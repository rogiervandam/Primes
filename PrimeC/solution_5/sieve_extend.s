GAS LISTING /tmp/ccBvFgp2.s 			page 1


   1              		.file	"sieve_extend.c"
   2              		.intel_syntax noprefix
   3              	# GNU C17 (Ubuntu 9.4.0-1ubuntu1~20.04.1) version 9.4.0 (x86_64-linux-gnu)
   4              	#	compiled by GNU C version 9.4.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl ve
   5              	
   6              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   7              	# options passed:  -imultiarch x86_64-linux-gnu sieve_extend.c
   8              	# -march=skylake -mmmx -mno-3dnow -msse -msse2 -msse3 -mssse3 -mno-sse4a
   9              	# -mcx16 -msahf -mmovbe -maes -mno-sha -mpclmul -mpopcnt -mabm -mno-lwp
  10              	# -mfma -mno-fma4 -mno-xop -mbmi -mno-sgx -mbmi2 -mno-pconfig -mno-wbnoinvd
  11              	# -mno-tbm -mavx2 -msse4.2 -msse4.1 -mlzcnt -mrtm -mhle -mrdrnd -mf16c
  12              	# -mfsgsbase -mrdseed -mprfchw -madx -mfxsr -mxsave -mxsaveopt -mno-avx512f
  13              	# -mno-avx512er -mno-avx512cd -mno-avx512pf -mno-prefetchwt1 -mclflushopt
  14              	# -mxsavec -mxsaves -mno-avx512dq -mno-avx512bw -mno-avx512vl
  15              	# -mno-avx512ifma -mno-avx512vbmi -mno-avx5124fmaps -mno-avx5124vnniw
  16              	# -mno-clwb -mno-mwaitx -mno-clzero -mno-pku -mno-rdpid -mno-gfni
  17              	# -mno-shstk -mno-avx512vbmi2 -mno-avx512vnni -mno-vaes -mno-vpclmulqdq
  18              	# -mno-avx512bitalg -mno-avx512vpopcntdq -mno-movdiri -mno-movdir64b
  19              	# -mno-waitpkg -mno-cldemote -mno-ptwrite -mtune=intel -masm=intel
  20              	# -malign-data=cacheline -mavx -g -Ofast -funroll-all-loops
  21              	# -fno-asynchronous-unwind-tables -fno-exceptions -fverbose-asm
  22              	# -fstack-protector-strong -Wformat -Wformat-security
  23              	# -fstack-clash-protection -fcf-protection
  24              	# options enabled:  -fPIC -fPIE -faggressive-loop-optimizations
  25              	# -falign-functions -falign-jumps -falign-labels -falign-loops
  26              	# -fassociative-math -fassume-phsa -fauto-inc-dec -fbranch-count-reg
  27              	# -fcaller-saves -fcode-hoisting -fcombine-stack-adjustments -fcommon
  28              	# -fcompare-elim -fcprop-registers -fcrossjumping -fcse-follow-jumps
  29              	# -fcx-limited-range -fdefer-pop -fdelete-null-pointer-checks
  30              	# -fdevirtualize -fdevirtualize-speculatively -fdwarf2-cfi-asm
  31              	# -fearly-inlining -feliminate-unused-debug-types -fexpensive-optimizations
  32              	# -ffinite-math-only -fforward-propagate -ffp-int-builtin-inexact
  33              	# -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  34              	# -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  35              	# -fif-conversion -fif-conversion2 -findirect-inlining -finline
  36              	# -finline-atomics -finline-functions -finline-functions-called-once
  37              	# -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  38              	# -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  39              	# -fipa-ra -fipa-reference -fipa-reference-addressable -fipa-sra
  40              	# -fipa-stack-alignment -fipa-vrp -fira-hoist-pressure
  41              	# -fira-share-save-slots -fira-share-spill-slots
  42              	# -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  43              	# -fleading-underscore -flifetime-dse -floop-interchange
  44              	# -floop-unroll-and-jam -flra-remat -flto-odr-type-merging
  45              	# -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  46              	# -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  47              	# -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  48              	# -fpredictive-commoning -fprefetch-loop-arrays -freciprocal-math -free
  49              	# -freg-struct-return -frename-registers -freorder-blocks
  50              	# -freorder-blocks-and-partition -freorder-functions -frerun-cse-after-loop
  51              	# -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  52              	# -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  53              	# -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  54              	# -fsched-stalled-insns-dep -fschedule-fusion -fschedule-insns2
  55              	# -fsemantic-interposition -fshow-column -fshrink-wrap
  56              	# -fshrink-wrap-separate -fsplit-ivs-in-unroller -fsplit-loops
  57              	# -fsplit-paths -fsplit-wide-types -fssa-backprop -fssa-phiopt
GAS LISTING /tmp/ccBvFgp2.s 			page 2


  58              	# -fstack-clash-protection -fstack-protector-strong -fstdarg-opt
  59              	# -fstore-merging -fstrict-aliasing -fstrict-volatile-bitfields
  60              	# -fsync-libcalls -fthread-jumps -ftoplevel-reorder -ftree-bit-ccp
  61              	# -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  62              	# -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  63              	# -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  64              	# -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  65              	# -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  66              	# -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  67              	# -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  68              	# -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  69              	# -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time
  70              	# -funroll-all-loops -funroll-loops -funsafe-math-optimizations
  71              	# -funswitch-loops -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  72              	# -fversion-loops-for-strides -fweb -fzero-initialized-in-bss
  73              	# -m128bit-long-double -m64 -m80387 -mabm -maccumulate-outgoing-args -madx
  74              	# -maes -malign-stringops -mavx -mavx2 -mbmi -mbmi2 -mclflushopt -mcx16
  75              	# -mf16c -mfancy-math-387 -mfma -mfp-ret-in-387 -mfsgsbase -mfxsr -mglibc
  76              	# -mhle -mlong-double-80 -mlzcnt -mmmx -mmovbe -mpclmul -mpopcnt -mprfchw
  77              	# -mpush-args -mrdrnd -mrdseed -mred-zone -mrtm -msahf -msse -msse2 -msse3
  78              	# -msse4 -msse4.1 -msse4.2 -mssse3 -mstv -mtls-direct-seg-refs -mvzeroupper
  79              	# -mxsave -mxsavec -mxsaveopt -mxsaves
  80              	
  81              		.text
  82              	.Ltext0:
  83              		.cfi_sections	.debug_frame
  84              		.p2align 4
  86              	extendSieve_smallSize:
  87              	.LVL0:
  88              	.LFB65:
  89              		.file 1 "sieve_extend.c"
   1:sieve_extend.c **** #include <stdio.h>
   2:sieve_extend.c **** #include <stdlib.h>
   3:sieve_extend.c **** #include <stdint.h>
   4:sieve_extend.c **** #include <time.h>
   5:sieve_extend.c **** #include <math.h>
   6:sieve_extend.c **** #include <string.h>
   7:sieve_extend.c **** 
   8:sieve_extend.c **** //add debug in front of a line to only compile it if the value below is set to 1 (or !=0)
   9:sieve_extend.c **** #define option_runonce 0
  10:sieve_extend.c **** #define debug if (option_runonce)
  11:sieve_extend.c **** #define debug2 if (option_runonce>=2)
  12:sieve_extend.c **** 
  13:sieve_extend.c **** #define default_sieve_limit 1000000
  14:sieve_extend.c **** #define default_blocksize (32*1024*8-1024)
  15:sieve_extend.c **** #define default_sieve_duration 5
  16:sieve_extend.c **** #define default_sample_duration 0.1
  17:sieve_extend.c **** #define default_sample_max 5
  18:sieve_extend.c **** #define default_verbose_level 1
  19:sieve_extend.c **** #define default_tune_level 0
  20:sieve_extend.c **** #define default_check_level 1
  21:sieve_extend.c **** #define default_show_primes_on_error 100
  22:sieve_extend.c **** #define default_showMaxFactor (0 || option_runonce?100:0)
  23:sieve_extend.c **** #define anticiped_cache_line_bytesize 128
  24:sieve_extend.c **** 
  25:sieve_extend.c **** // 64 bit
  26:sieve_extend.c **** #define TYPE uint64_t
GAS LISTING /tmp/ccBvFgp2.s 			page 3


  27:sieve_extend.c **** 
  28:sieve_extend.c **** // calculate the rest dynamically
  29:sieve_extend.c **** #define counter_t TYPE
  30:sieve_extend.c **** #define bitshift_t TYPE
  31:sieve_extend.c **** #define bitword_t uint64_t
  32:sieve_extend.c **** 
  33:sieve_extend.c **** #define WORD_SIZE (sizeof(bitword_t)*8)
  34:sieve_extend.c **** #define WORD_SIZE_counter ((counter_t)WORD_SIZE)
  35:sieve_extend.c **** #define WORD_SIZE_bitshift ((bitshift_t)WORD_SIZE)
  36:sieve_extend.c **** #define pow(base,pow) (pow*((base>>pow)&1U))
  37:sieve_extend.c **** //#define SHIFT ((bitshift_t)(pow(WORD_SIZE,1)+pow(WORD_SIZE,2)+pow(WORD_SIZE,3)+pow(WORD_SIZE,4)+p
  38:sieve_extend.c **** #define SHIFT_WORD ((bitshift_t)(pow(WORD_SIZE,1)+pow(WORD_SIZE,2)+pow(WORD_SIZE,3)+pow(WORD_SIZE,4
  39:sieve_extend.c **** 
  40:sieve_extend.c **** #define VECTOR_ELEMENTS 4
  41:sieve_extend.c **** #define VECTOR_SIZE_bytes (sizeof(bitword_t)*VECTOR_ELEMENTS)
  42:sieve_extend.c **** #define VECTOR_SIZE_counter (VECTOR_SIZE_bytes*8)
  43:sieve_extend.c **** #define VECTOR_SIZE (VECTOR_SIZE_bytes*8)
  44:sieve_extend.c **** #define SHIFT_VECTOR ((bitshift_t)(pow(VECTOR_SIZE,1)+pow(VECTOR_SIZE,2)+pow(VECTOR_SIZE,3)+pow(VEC
  45:sieve_extend.c **** 
  46:sieve_extend.c **** typedef bitword_t bitvector_t __attribute__ ((vector_size(VECTOR_SIZE_bytes)));
  47:sieve_extend.c **** 
  48:sieve_extend.c **** // globals for tuning
  49:sieve_extend.c **** counter_t global_SMALLSTEP_FASTER = 0;
  50:sieve_extend.c **** counter_t global_MEDIUMSTEP_FASTER = 0;
  51:sieve_extend.c **** counter_t global_VECTORSTEP_FASTER = VECTOR_SIZE/2;
  52:sieve_extend.c **** 
  53:sieve_extend.c **** #define SAFE_SHIFTBIT (bitshift_t)1U
  54:sieve_extend.c **** #define SAFE_ZERO  (bitword_t)0U
  55:sieve_extend.c **** #define BITWORD_SHIFTBIT (bitword_t)1U
  56:sieve_extend.c **** #define WORDMASK ((~SAFE_ZERO)>>(WORD_SIZE_bitshift-SHIFT_WORD))
  57:sieve_extend.c **** #define VECTORMASK ((~SAFE_ZERO)>>(WORD_SIZE_bitshift-SHIFT_VECTOR))
  58:sieve_extend.c **** // #define SMALLSTEP_FASTER ((counter_t)0)
  59:sieve_extend.c **** // #define MEDIUMSTEP_FASTER ((counter_t)16)
  60:sieve_extend.c **** // #define VECTORSTEP_FASTER ((counter_t)96)
  61:sieve_extend.c **** 
  62:sieve_extend.c **** #define SMALLSTEP_FASTER ((counter_t)global_SMALLSTEP_FASTER)
  63:sieve_extend.c **** #define MEDIUMSTEP_FASTER ((counter_t)global_MEDIUMSTEP_FASTER)
  64:sieve_extend.c **** #define VECTORSTEP_FASTER ((counter_t)global_VECTORSTEP_FASTER)
  65:sieve_extend.c **** 
  66:sieve_extend.c **** #define wordindex(index) (((counter_t)index) >> (bitshift_t)SHIFT_WORD)
  67:sieve_extend.c **** #define wordend(index) ((counter_t)index|WORDMASK)
  68:sieve_extend.c **** #define vectorindex(index) (((counter_t)index) >> (bitshift_t)SHIFT_VECTOR)
  69:sieve_extend.c **** #define vectorstart(index) (((counter_t)index) & (counter_t)~VECTORMASK)
  70:sieve_extend.c **** 
  71:sieve_extend.c **** // modern processors do a & over the shiftssize, so we only have to do that ourselve when using the
  72:sieve_extend.c **** #define bitindex(index) ((bitshift_t)(index))
  73:sieve_extend.c **** // #define bitindex(index) ((bitshift_t)(index)&((bitword_t)(WORD_SIZE-1)))
  74:sieve_extend.c **** //#define bitindex_calc(index) ((bitshift_t)(index)&((bitshift_t)(WORD_SIZE_bitshift-SAFE_SHIFTBIT)
  75:sieve_extend.c **** #define bitindex_calc(index) ((bitshift_t)(index)&((bitshift_t)(WORDMASK)))
  76:sieve_extend.c **** #define  markmask(index) (BITWORD_SHIFTBIT << bitindex(index))
  77:sieve_extend.c **** #define  markmask_calc(index) (BITWORD_SHIFTBIT << bitindex_calc(index))
  78:sieve_extend.c **** // #define chopmask(index) ((SAFE_SHIFTBIT << bitindex(index))-SAFE_SHIFTBIT)
  79:sieve_extend.c **** // #define chopmask2(index) (((bitword_t)2U << bitindex(index))-SAFE_SHIFTBIT)
  80:sieve_extend.c **** #define chopmask(index) (~SAFE_ZERO >> (WORD_SIZE-1-bitindex_calc(index)))
  81:sieve_extend.c **** #define keepmask(index) (~SAFE_ZERO << (bitindex_calc(index)))
  82:sieve_extend.c **** #define chopmask2(index) chopmask(index)
  83:sieve_extend.c **** #define real(bit) (bit*2+1)
GAS LISTING /tmp/ccBvFgp2.s 			page 4


  84:sieve_extend.c **** 
  85:sieve_extend.c **** #define min(a,b) ((a<b) ? a : b)
  86:sieve_extend.c **** #define uintsafeminus(a,b) ((a>b)?(a-b):0)
  87:sieve_extend.c **** 
  88:sieve_extend.c **** #define likely(x)       (__builtin_expect((x),1))
  89:sieve_extend.c **** #define unlikely(x)     (__builtin_expect((x),0))
  90:sieve_extend.c **** 
  91:sieve_extend.c **** counter_t debug_hitpoint[5] = { 0,0,0,0,0};
  92:sieve_extend.c **** 
  93:sieve_extend.c **** struct sieve_state {
  94:sieve_extend.c ****     bitword_t* bitarray;
  95:sieve_extend.c ****     counter_t  bits;
  96:sieve_extend.c ****     counter_t  size;
  97:sieve_extend.c **** };
  98:sieve_extend.c **** 
  99:sieve_extend.c **** #include "debugtools.h"
 100:sieve_extend.c **** 
 101:sieve_extend.c **** // use cache lines as much as possible - alignment might be key
 102:sieve_extend.c **** #define ceiling(x,y) (((x) + (y) - 1) / (y)) // Return the smallest multiple N of y such that:  x <
 103:sieve_extend.c **** static struct sieve_state *create_sieve(counter_t size) {
 104:sieve_extend.c ****     struct sieve_state *sieve = aligned_alloc(8, sizeof(struct sieve_state));
 105:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 106:sieve_extend.c **** 
 107:sieve_extend.c ****     sieve->bitarray = aligned_alloc((size_t)anticiped_cache_line_bytesize, (size_t)memSize );
 108:sieve_extend.c ****     sieve->bits     = size >> 1;
 109:sieve_extend.c ****     sieve->size     = size;
 110:sieve_extend.c **** 
 111:sieve_extend.c ****     // moved clearing the sieve with 0 to the sieve_block_extend
 112:sieve_extend.c ****     // it gave weird malloc problems at this point
 113:sieve_extend.c ****     return sieve;
 114:sieve_extend.c **** }
 115:sieve_extend.c **** 
 116:sieve_extend.c **** static void delete_sieve(struct sieve_state *sieve) {
 117:sieve_extend.c ****     free(sieve->bitarray);
 118:sieve_extend.c ****     free(sieve);
 119:sieve_extend.c **** }
 120:sieve_extend.c **** 
 121:sieve_extend.c **** // not much performance gain at smaller sieves, but its's nice to have an implementation
 122:sieve_extend.c **** static inline counter_t searchBitFalse(bitword_t* bitarray, register counter_t index) {
 123:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 125:sieve_extend.c **** }
 126:sieve_extend.c **** 
 127:sieve_extend.c **** // not much performance gain at smaller sieves, but its's nice to have an implementation
 128:sieve_extend.c **** static inline counter_t searchBitFalse_longRange(bitword_t* bitarray, register counter_t index) {
 129:sieve_extend.c ****     // return searchBitFalse(bitarray, index);
 130:sieve_extend.c **** 
 131:sieve_extend.c ****    register counter_t index_word = wordindex(index);
 132:sieve_extend.c ****    bitshift_t index_bit  = bitindex_calc(index);
 133:sieve_extend.c ****    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[index_word] >> index_bi
 134:sieve_extend.c ****    index += distance;
 135:sieve_extend.c ****    distance += index_bit;
 136:sieve_extend.c **** 
 137:sieve_extend.c ****    while unlikely(distance == WORD_SIZE_bitshift) { // to prevent a bug from optimzer
 138:sieve_extend.c ****        index_word++;
 139:sieve_extend.c ****        distance = (bitshift_t) __builtin_ctzll(~(bitarray[index_word]));
 140:sieve_extend.c ****        index += distance;
GAS LISTING /tmp/ccBvFgp2.s 			page 5


 141:sieve_extend.c ****    }
 142:sieve_extend.c **** 
 143:sieve_extend.c ****    return index;
 144:sieve_extend.c **** }
 145:sieve_extend.c **** 
 146:sieve_extend.c **** 
 147:sieve_extend.c **** static void inline applyMask(bitword_t* __restrict bitarray, const counter_t step, const counter_t 
 148:sieve_extend.c **** //#if __APPLE__
 149:sieve_extend.c **** //   register const counter_t step_2 = step * 2;
 150:sieve_extend.c **** //   register const counter_t step_3 = step * 3;
 151:sieve_extend.c **** //   register const counter_t step_4 = step * 4;
 152:sieve_extend.c **** //   register const counter_t range_stop_word = wordindex(range_stop);
 153:sieve_extend.c **** //   const counter_t loop_stop_word = (range_stop_word > step_3) ? (range_stop_word - step_3) : (co
 154:sieve_extend.c **** //
 155:sieve_extend.c **** //   #pragma ivdep
 156:sieve_extend.c **** //   for (;index_word < loop_stop_word;  index_word += step_4) {
 157:sieve_extend.c **** //       bitarray[index_word         ] |= mask;
 158:sieve_extend.c **** //       bitarray[index_word + step  ] |= mask;
 159:sieve_extend.c **** //       bitarray[index_word + step_2] |= mask;
 160:sieve_extend.c **** //       bitarray[index_word + step_3] |= mask;
 161:sieve_extend.c **** //   }
 162:sieve_extend.c **** //
 163:sieve_extend.c **** //   #pragma ivdep
 164:sieve_extend.c **** //   while (index_word < range_stop_word) {
 165:sieve_extend.c **** //       bitarray[index_word] |= mask;
 166:sieve_extend.c **** //       index_word += step;
 167:sieve_extend.c **** //   }
 168:sieve_extend.c **** //
 169:sieve_extend.c **** //   if (index_word == wordindex(range_stop)) {
 170:sieve_extend.c **** //       bitarray[wordindex(range_stop)] |= (mask & chopmask2(range_stop));
 171:sieve_extend.c **** //   }
 172:sieve_extend.c **** //#endif
 173:sieve_extend.c **** //    ALTERNATIVE using pointers is faster in gcc
 174:sieve_extend.c **** //#if __linux__
 175:sieve_extend.c ****    const counter_t range_stop_word = wordindex(range_stop);
 176:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 177:sieve_extend.c ****    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_stop
 178:sieve_extend.c **** 
 179:sieve_extend.c ****   #pragma unroll
 180:sieve_extend.c ****    #pragma ivdep
 181:sieve_extend.c ****    while likely(index_ptr < fast_loop_ptr) {
 182:sieve_extend.c ****        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 184:sieve_extend.c ****        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 186:sieve_extend.c ****        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 188:sieve_extend.c ****        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 190:sieve_extend.c ****        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 192:sieve_extend.c ****    }
 193:sieve_extend.c **** 
 194:sieve_extend.c ****    const register bitword_t* __restrict range_stop_ptr = &bitarray[(range_stop_word)];
 195:sieve_extend.c ****    while likely(index_ptr < range_stop_ptr) {
 196:sieve_extend.c ****        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
GAS LISTING /tmp/ccBvFgp2.s 			page 6


 198:sieve_extend.c ****    }
 199:sieve_extend.c **** 
 200:sieve_extend.c ****    if (index_ptr == range_stop_ptr) { // index_ptr could also end above range_stop_ptr, depending o
 201:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 202:sieve_extend.c ****    }
 203:sieve_extend.c **** 
 204:sieve_extend.c **** //    const counter_t range_stop_word = wordindex(range_stop);
 205:sieve_extend.c **** //    bitword_t* __restrict index_ptr = &bitarray[index_word];
 206:sieve_extend.c **** //    bitword_t* __restrict fast_loop_ptr = &bitarray[((range_stop_word>step*4) ? (range_stop_word 
 207:sieve_extend.c **** //    bitword_t* __restrict range_stop_ptr = &bitarray[(range_stop_word)];//>step_4) ? (range_stop_
 208:sieve_extend.c **** //    const int loop_iterations = ((range_stop_word - index_word) / (step*4));
 209:sieve_extend.c **** 
 210:sieve_extend.c **** //      debug printf("..%ju loop iterations for step %ju range in words (%ju - %ju)\n",(uintmax_t)l
 211:sieve_extend.c **** 
 212:sieve_extend.c **** //     #pragma unroll 1
 213:sieve_extend.c **** //    #pragma ivdep
 214:sieve_extend.c **** //    for ( int i=0; i < loop_iterations; i++) {
 215:sieve_extend.c **** //        *(index_ptr) |= mask;
 216:sieve_extend.c **** //        *(index_ptr+step) |= mask;
 217:sieve_extend.c **** //        *(index_ptr+2*step) |= mask;
 218:sieve_extend.c **** //        *(index_ptr+3*step) |= mask;
 219:sieve_extend.c **** //        index_ptr += 4*step;
 220:sieve_extend.c **** //    }
 221:sieve_extend.c **** 
 222:sieve_extend.c **** //    while ( index_ptr < range_stop_ptr) {
 223:sieve_extend.c **** //        *index_ptr |= mask;
 224:sieve_extend.c **** //        index_ptr+=step;
 225:sieve_extend.c **** //    }
 226:sieve_extend.c **** 
 227:sieve_extend.c **** //    if (index_ptr == range_stop_ptr) {
 228:sieve_extend.c **** //       *range_stop_ptr |= (mask & chopmask(range_stop));
 229:sieve_extend.c **** //    }
 230:sieve_extend.c **** //#endif
 231:sieve_extend.c **** }
 232:sieve_extend.c **** 
 233:sieve_extend.c **** // set bits by creating a pattern and then extending it to word and range size
 234:sieve_extend.c **** static void inline setBitsTrue_smallStep(bitword_t* __restrict bitarray, const counter_t range_star
 235:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using smallstep (%ju occurances)
 236:sieve_extend.c **** 
 237:sieve_extend.c ****     // build the pattern in a word
 238:sieve_extend.c **** 	register bitword_t pattern = BITWORD_SHIFTBIT;
 239:sieve_extend.c ****     for (bitshift_t patternsize = step; patternsize <= WORD_SIZE_bitshift; patternsize += patternsi
 240:sieve_extend.c ****         pattern |= (pattern << patternsize);
 241:sieve_extend.c **** 
 242:sieve_extend.c ****     // debug if (step==13) { printf("Before\n"); dump_bitarray(bitarray,10); }
 243:sieve_extend.c ****     
 244:sieve_extend.c ****     // initialize loop variables and stop if this is it
 245:sieve_extend.c ****     const counter_t range_stop_word = wordindex(range_stop);
 246:sieve_extend.c ****     register counter_t range_start_word = wordindex(range_start);
 247:sieve_extend.c ****      if (range_start_word >= range_stop_word) { // shortcut
 248:sieve_extend.c ****        bitarray[range_start_word] |= (pattern << bitindex(range_start)) & chopmask(range_stop);
 249:sieve_extend.c ****         //  debug if (step==13) { printf("After\n"); dump_bitarray(bitarray,10); }
 250:sieve_extend.c ****        return;
 251:sieve_extend.c ****     }
 252:sieve_extend.c ****     
 253:sieve_extend.c ****     bitarray[range_start_word] |= (pattern << bitindex(range_start));
 254:sieve_extend.c **** 
GAS LISTING /tmp/ccBvFgp2.s 			page 7


 255:sieve_extend.c ****    // from now on, we are before range_stop_word
 256:sieve_extend.c ****    // first word is special, because it should not set bits before the range_start_bit
 257:sieve_extend.c ****    register bitshift_t pattern_size = WORD_SIZE_bitshift - (WORD_SIZE_bitshift % step);
 258:sieve_extend.c ****    register bitshift_t pattern_shift = step - (WORD_SIZE_bitshift % step);
 259:sieve_extend.c ****    register bitshift_t shift = (bitindex_calc(range_start))%step ;
 260:sieve_extend.c ****    counter_t loop_range = range_stop_word - range_start_word;
 261:sieve_extend.c ****    #pragma unroll
 262:sieve_extend.c ****    #pragma ivdep
 263:sieve_extend.c ****    for (counter_t i=1; i <= loop_range; i++) {
 264:sieve_extend.c ****         bitshift_t totalshift = (shift+i*pattern_shift) % step;
 265:sieve_extend.c ****        bitarray[range_start_word+i] |=  (pattern >> (pattern_size-totalshift)) | (pattern << (total
 266:sieve_extend.c **** 
 267:sieve_extend.c ****         // bitarray[range_start_word+i] |=  (pattern >> (pattern_size-((shift+i*pattern_shift) % st
 268:sieve_extend.c ****    }
 269:sieve_extend.c ****    bitarray[range_stop_word] &= chopmask(range_stop);
 270:sieve_extend.c **** 
 271:sieve_extend.c **** //    for(counter_t check=range_start; check<=range_stop; check+=step) {
 272:sieve_extend.c **** //         if (!(bitarray[wordindex(check)] & markmask(check))) {
 273:sieve_extend.c **** //             printf("Bit %ju not set\n",check);
 274:sieve_extend.c **** //             dump_bitarray(bitarray,4);
 275:sieve_extend.c **** //             printWord(pattern); printf("\n");
 276:sieve_extend.c **** //             exit(0);
 277:sieve_extend.c **** //         }
 278:sieve_extend.c **** //    }
 279:sieve_extend.c **** 
 280:sieve_extend.c ****     // pattern = (pattern << (bitindex_calc(range_start) % step)); // correct for inital offset
 281:sieve_extend.c ****     // const register bitshift_t pattern_shift = WORD_SIZE_bitshift % step;
 282:sieve_extend.c ****     // const register bitshift_t pattern_shift_flipped = WORD_SIZE_bitshift - pattern_shift - patte
 283:sieve_extend.c ****     // const register counter_t loop_range = range_stop_word - range_start_word;
 284:sieve_extend.c ****     // #pragma unroll
 285:sieve_extend.c ****     // #pragma ivdep
 286:sieve_extend.c ****     // for (counter_t i=1; i <= loop_range; i++) {
 287:sieve_extend.c ****     //     pattern = (pattern >> pattern_shift) | (pattern << pattern_shift_flipped);
 288:sieve_extend.c ****     //     bitarray[range_start_word+i] |= pattern;
 289:sieve_extend.c ****     // }
 290:sieve_extend.c ****     // bitarray[range_stop_word] &= chopmask(range_stop);
 291:sieve_extend.c **** }
 292:sieve_extend.c **** 
 293:sieve_extend.c **** // Medium steps could be within the same word (e.g. less than 64 bits apart).
 294:sieve_extend.c **** // By joining the masks and then writing to memory, we might save some time.
 295:sieve_extend.c **** // This is especially true for small steps over long ranges
 296:sieve_extend.c **** // but it needs tuning, because there is some overhead of checking if the next step is in the same 
 297:sieve_extend.c **** static void  setBitsTrue_mediumStep(bitword_t* __restrict bitarray, const counter_t range_start, co
 298:sieve_extend.c ****     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * step;
 299:sieve_extend.c **** 
 300:sieve_extend.c ****     if (range_stop_unique > range_stop) { // the range will not repeat itself; no need to try to re
 301:sieve_extend.c ****         debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using mediumstep-unique (%ju
 302:sieve_extend.c **** 
 303:sieve_extend.c ****         #pragma ivdep
 304:sieve_extend.c ****         for (register counter_t index = range_start; index <= range_stop;) {
 305:sieve_extend.c ****             register counter_t index_word = wordindex(index);
 306:sieve_extend.c ****             register bitword_t mask = SAFE_ZERO;
 307:sieve_extend.c ****             #pragma ivdep
 308:sieve_extend.c ****             do {
 309:sieve_extend.c ****                 mask |= markmask(index);
 310:sieve_extend.c ****                 index += step;
 311:sieve_extend.c ****             } while (index_word == wordindex(index));
GAS LISTING /tmp/ccBvFgp2.s 			page 8


 312:sieve_extend.c ****             // for (; index_word == wordindex(index);  index += step) 
 313:sieve_extend.c ****             //     mask |= markmask(index);
 314:sieve_extend.c ****             bitarray[index_word] |= mask;
 315:sieve_extend.c ****         }
 316:sieve_extend.c ****     }
 317:sieve_extend.c ****     else { // this mask will reoccur at a interval of step words -> fill mask and reapply as a inte
 318:sieve_extend.c ****         debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using mediumstep-repeat (%ju
 319:sieve_extend.c ****         
 320:sieve_extend.c ****         #pragma ivdep
 321:sieve_extend.c ****         for (register counter_t index = range_start; index <= range_stop_unique;) {
 322:sieve_extend.c ****             register counter_t index_word = wordindex(index);
 323:sieve_extend.c ****             register bitword_t mask = SAFE_ZERO;
 324:sieve_extend.c ****             #pragma ivdep
 325:sieve_extend.c ****             do {
 326:sieve_extend.c ****                 mask |= markmask(index);
 327:sieve_extend.c ****                 index += step;
 328:sieve_extend.c ****             } while (index_word == wordindex(index));
 329:sieve_extend.c ****             // #pragma ivdep
 330:sieve_extend.c ****             // for (; index_word == wordindex(index);  index += step) 
 331:sieve_extend.c ****             //     mask |= markmask(index);
 332:sieve_extend.c ****             applyMask(bitarray, step, range_stop, mask, index_word);
 333:sieve_extend.c ****         }
 334:sieve_extend.c ****     }
 335:sieve_extend.c **** }
 336:sieve_extend.c **** 
 337:sieve_extend.c **** // small ranges (< WORD_SIZE * step) mean the mask is unique
 338:sieve_extend.c **** static inline void setBitsTrue_largeSteps(bitword_t* __restrict bitarray, const counter_t range_sta
 339:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largesteps (%ju occurances
 340:sieve_extend.c ****     
 341:sieve_extend.c ****     #pragma unroll
 342:sieve_extend.c ****     #pragma ivdep
 343:sieve_extend.c ****     for (counter_t index = range_start; index <= range_stop; index += step) {
 344:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 345:sieve_extend.c ****     }
 346:sieve_extend.c **** 
 347:sieve_extend.c **** //    counter_t loop_iterations = (range_stop - range_start) / step;
 348:sieve_extend.c **** //    #pragma unroll
 349:sieve_extend.c **** //     #pragma ivdep
 350:sieve_extend.c **** //     for (register counter_t i = 0; i <= loop_iterations; i++) {
 351:sieve_extend.c **** //         bitarray[wordindex(range_start+i*step)] |= markmask(range_start+i*step);
 352:sieve_extend.c **** //     }
 353:sieve_extend.c **** }
 354:sieve_extend.c **** 
 355:sieve_extend.c **** // small ranges (< WORD_SIZE * step) mean the mask is unique
 356:sieve_extend.c **** static void setBitsTrue_race(bitword_t* bitarray, counter_t index1, counter_t index2, const counter
 357:sieve_extend.c ****     debug printf("Setting bits step %ju and %ju in %ju bit range (%ju-%ju) using race (%ju occuranc
 358:sieve_extend.c **** 
 359:sieve_extend.c ****     counter_t index1_word = wordindex(index1);
 360:sieve_extend.c ****     counter_t index2_word = wordindex(index2);
 361:sieve_extend.c ****     
 362:sieve_extend.c ****     while (1) {
 363:sieve_extend.c ****         if (index1_word == index2_word) {
 364:sieve_extend.c ****             bitword_t mask = SAFE_ZERO;
 365:sieve_extend.c ****             counter_t index_word = index1_word;
 366:sieve_extend.c ****             do {
 367:sieve_extend.c ****                 mask |= markmask(index1);
 368:sieve_extend.c ****                 index1 += step1;
GAS LISTING /tmp/ccBvFgp2.s 			page 9


 369:sieve_extend.c ****                 index1_word = wordindex(index1);
 370:sieve_extend.c ****             } while (index1_word == index_word);
 371:sieve_extend.c ****             do {
 372:sieve_extend.c ****                 mask |= markmask(index2);
 373:sieve_extend.c ****                 index2 += step2;
 374:sieve_extend.c ****                 index2_word = wordindex(index2);
 375:sieve_extend.c ****             } while (index2_word == index_word);
 376:sieve_extend.c ****             bitarray[index_word] |= mask;
 377:sieve_extend.c ****         }
 378:sieve_extend.c **** 
 379:sieve_extend.c ****         // because step is larger, index2 is the most likely to get out of bounds first
 380:sieve_extend.c ****         if (index2 > range_stop) {
 381:sieve_extend.c ****             while (index1 <= range_stop) {
 382:sieve_extend.c ****                 bitarray[wordindex(index1)] |= markmask(index1);
 383:sieve_extend.c ****                 index1 += step1;
 384:sieve_extend.c ****             }
 385:sieve_extend.c ****             return;
 386:sieve_extend.c ****         }
 387:sieve_extend.c **** 
 388:sieve_extend.c ****         if (index1 > range_stop) {
 389:sieve_extend.c ****             while (index2 <= range_stop) {
 390:sieve_extend.c ****                 bitarray[wordindex(index2)] |= markmask(index2);
 391:sieve_extend.c ****                 index2 += step2;
 392:sieve_extend.c ****             }
 393:sieve_extend.c ****             return;
 394:sieve_extend.c ****         }
 395:sieve_extend.c **** 
 396:sieve_extend.c ****         while (index1_word < index2_word) {
 397:sieve_extend.c ****             bitarray[index1_word] |= markmask(index1);
 398:sieve_extend.c ****             index1 += step1;
 399:sieve_extend.c ****             index1_word = wordindex(index1);
 400:sieve_extend.c ****         }
 401:sieve_extend.c ****         
 402:sieve_extend.c ****         while (index2_word < index1_word){
 403:sieve_extend.c ****             bitarray[index2_word] |= markmask(index2);
 404:sieve_extend.c ****             index2 += step2;
 405:sieve_extend.c ****             index2_word = wordindex(index2);
 406:sieve_extend.c ****         }
 407:sieve_extend.c **** 
 408:sieve_extend.c ****     }
 409:sieve_extend.c **** }
 410:sieve_extend.c **** 
 411:sieve_extend.c **** // Large ranges (> WORD_SIZE * step) mean the same mask can be reused
 412:sieve_extend.c **** static inline void setBitsTrue_largeRange(bitword_t* __restrict bitarray, const counter_t range_sta
 413:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange (%ju occurances
 414:sieve_extend.c ****     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * step;
 415:sieve_extend.c **** 
 416:sieve_extend.c **** //    #pragma unroll
 417:sieve_extend.c ****     #pragma ivdep
 418:sieve_extend.c ****     for (register counter_t index = range_start; index < range_stop_unique; index += step) {
 419:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 420:sieve_extend.c ****     }
 421:sieve_extend.c **** }
 422:sieve_extend.c **** 
 423:sieve_extend.c **** 
 424:sieve_extend.c **** static void inline applyMask_vector(bitvector_t* __restrict bitarray, const counter_t step, const c
 425:sieve_extend.c ****    const counter_t range_stop_vector = vectorindex(range_stop);
GAS LISTING /tmp/ccBvFgp2.s 			page 10


 426:sieve_extend.c ****    register bitvector_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_vect
 427:sieve_extend.c ****    register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_st
 428:sieve_extend.c **** 
 429:sieve_extend.c ****    #pragma unroll
 430:sieve_extend.c ****    #pragma ivdep
 431:sieve_extend.c ****    while likely(index_ptr < fast_loop_ptr) {
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 436:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 437:sieve_extend.c ****    }
 438:sieve_extend.c **** 
 439:sieve_extend.c ****    const register bitvector_t* __restrict range_stop_ptr = &bitarray[(range_stop_vector)];
 440:sieve_extend.c ****    while likely(index_ptr <= range_stop_ptr) {
 441:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 442:sieve_extend.c ****    }
 443:sieve_extend.c **** 
 444:sieve_extend.c **** //    if (index_ptr == range_stop_ptr) { // index_ptr could also end above range_stop_ptr, dependin
 445:sieve_extend.c **** //         bitword_t* __restrict index_ptr_word = (bitword_t*)index_ptr;
 446:sieve_extend.c **** //         bitword_t* __restrict range_stop_ptr_word = (bitword_t*)&bitarray[wordindex(range_stop)]
 447:sieve_extend.c **** //         for(counter_t word=0; index_ptr_word+word <= range_stop_ptr_word; word++) {
 448:sieve_extend.c **** //             *(index_ptr_word+word) = mask[word];
 449:sieve_extend.c **** //         }
 450:sieve_extend.c ****  
 451:sieve_extend.c **** //                //     counter_t index_word = current_vector * VECTOR_ELEMENTS;
 452:sieve_extend.c **** //         //     counter_t range_stop_word = wordindex(range_stop);
 453:sieve_extend.c **** //         //     if likely(index_word <= range_stop_word) {
 454:sieve_extend.c **** //         //         #pragma ivdep
 455:sieve_extend.c **** //         //         for (word =0; word < VECTOR_ELEMENTS; word++) {
 456:sieve_extend.c **** //         //             if unlikely(index_word+word <= range_stop_word)
 457:sieve_extend.c **** //         //                 bitarray_word[index_word+word] |= quadmask[word];
 458:sieve_extend.c **** //         //         }
 459:sieve_extend.c **** //         //     }
 460:sieve_extend.c **** 
 461:sieve_extend.c **** 
 462:sieve_extend.c **** //    }
 463:sieve_extend.c **** }
 464:sieve_extend.c **** 
 465:sieve_extend.c **** static void setBitsTrue_largeRange_vector(bitword_t* __restrict bitarray_word, counter_t range_star
 466:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange vector (%ju occ
 467:sieve_extend.c **** 
 468:sieve_extend.c ****     // const counter_t range_stop_unique_oneword =  min(range_start + WORD_SIZE_counter * step, ran
 469:sieve_extend.c ****     // for (counter_t index = range_start; index <= range_stop_unique_oneword; index += step) {
 470:sieve_extend.c ****     //     applyMask(bitarray_word, step, range_stop, markmask(index), wordindex(index));
 471:sieve_extend.c ****     // }
 472:sieve_extend.c ****     // return;
 473:sieve_extend.c **** 
 474:sieve_extend.c ****     bitvector_t* __restrict bitarray_vector = __builtin_assume_aligned( (bitvector_t*) bitarray_wor
 475:sieve_extend.c ****     
 476:sieve_extend.c ****     // find out where the first complete vector is
 477:sieve_extend.c ****     // printWord(range_start); printf("\n");
 478:sieve_extend.c ****     // printWord(~VECTORMASK); printf("\n");
 479:sieve_extend.c ****     // printWord(vectorstart(range_start)); printf("\n\n");
 480:sieve_extend.c ****     counter_t range_start_atvector = vectorstart(range_start);
 481:sieve_extend.c ****     if likely((range_start_atvector + step) < range_start) { // not the first step possible in this
 482:sieve_extend.c ****         debug { printf("Range start+step %ju not at start of vector %ju\n",range_start+step, range_
GAS LISTING /tmp/ccBvFgp2.s 			page 11


 483:sieve_extend.c **** 
 484:sieve_extend.c ****         range_start_atvector += VECTOR_SIZE; // find next vector
 485:sieve_extend.c ****         if (unlikely(range_start_atvector > range_stop)) { // we should not be here; just handle wi
 486:sieve_extend.c ****             debug2 printf("..Marking and returning without vector\n");
 487:sieve_extend.c **** 
 488:sieve_extend.c ****             for (counter_t index = range_start; index <= range_stop; index += step) 
 489:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 490:sieve_extend.c ****             return;                 
 491:sieve_extend.c ****         }
 492:sieve_extend.c **** 
 493:sieve_extend.c ****         debug2 printf("..Marking without vector until %ju\n",range_start_atvector);
 494:sieve_extend.c ****         register counter_t index = range_start; // outside to later adjust range_start
 495:sieve_extend.c **** 
 496:sieve_extend.c ****         // #pragma ivdep unroll
 497:sieve_extend.c ****         // for (; index < range_start_atvector; index += step) 
 498:sieve_extend.c ****         //     bitarray_word[wordindex(index)] |= markmask(index);
 499:sieve_extend.c ****         // range_start = index;
 500:sieve_extend.c **** 
 501:sieve_extend.c ****         #pragma ivdep unroll
 502:sieve_extend.c ****         for (; range_start < range_start_atvector;) {
 503:sieve_extend.c ****             register counter_t index_word = wordindex(range_start);
 504:sieve_extend.c ****             register bitword_t mask = SAFE_ZERO;
 505:sieve_extend.c ****             do {
 506:sieve_extend.c ****                 mask |= markmask(range_start);
 507:sieve_extend.c ****                 range_start += step;
 508:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 509:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 510:sieve_extend.c ****         }
 511:sieve_extend.c ****     }
 512:sieve_extend.c ****     
 513:sieve_extend.c ****     const counter_t range_stop_unique =  min(range_start + VECTOR_SIZE_counter * step, range_stop);
 514:sieve_extend.c ****     
 515:sieve_extend.c ****     // const counter_t step_2 = step * 2;
 516:sieve_extend.c ****     // const counter_t step_3 = step * 3;
 517:sieve_extend.c ****     // const counter_t step_4 = step * 4;
 518:sieve_extend.c **** 
 519:sieve_extend.c ****     #pragma ivdep unroll
 520:sieve_extend.c ****     for (counter_t index = range_start; index < range_stop_unique;) {
 521:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 522:sieve_extend.c ****         register bitvector_t quadmask = { };
 523:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 524:sieve_extend.c ****         
 525:sieve_extend.c ****         // build a quadmask
 526:sieve_extend.c ****         #pragma ivdep unroll
 527:sieve_extend.c ****         do {
 528:sieve_extend.c ****             quadmask[word] |= markmask(index);
 529:sieve_extend.c ****             index += step;
 530:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 531:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 532:sieve_extend.c ****         
 533:sieve_extend.c ****         // use mask on all n*step multiples
 534:sieve_extend.c ****         register counter_t current_vector = current_vector_start_word >> (SHIFT_VECTOR - SHIFT_WORD
 535:sieve_extend.c ****         const counter_t range_stop_vector = vectorindex(range_stop);
 536:sieve_extend.c **** 
 537:sieve_extend.c ****         applyMask_vector(bitarray_vector, step, range_stop, quadmask, current_vector);
 538:sieve_extend.c **** 
 539:sieve_extend.c ****         // if (current_vector+step_4 <= range_stop_vector) {
GAS LISTING /tmp/ccBvFgp2.s 			page 12


 540:sieve_extend.c ****         //     register const counter_t loop_stop_vector = (range_stop_vector > step_4) ? (range_st
 541:sieve_extend.c ****         //     #pragma ivdep unroll
 542:sieve_extend.c ****         //     for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 543:sieve_extend.c ****         //         bitarray_vector[current_vector       ] |= quadmask;
 544:sieve_extend.c ****         //         bitarray_vector[current_vector+step  ] |= quadmask;
 545:sieve_extend.c ****         //         bitarray_vector[current_vector+step_2] |= quadmask;
 546:sieve_extend.c ****         //         bitarray_vector[current_vector+step_3] |= quadmask;
 547:sieve_extend.c ****         //     }
 548:sieve_extend.c ****         // }
 549:sieve_extend.c **** 
 550:sieve_extend.c **** 
 551:sieve_extend.c ****         // #pragma ivdep unroll
 552:sieve_extend.c ****         // for(; current_vector+step_4 < range_stop_vector; current_vector += step_4) {
 553:sieve_extend.c ****         //     bitarray_vector[current_vector       ] |= quadmask;
 554:sieve_extend.c ****         //     bitarray_vector[current_vector+step  ] |= quadmask;
 555:sieve_extend.c ****         //     bitarray_vector[current_vector+step_2] |= quadmask;
 556:sieve_extend.c ****         //     bitarray_vector[current_vector+step_3] |= quadmask;
 557:sieve_extend.c ****         // }
 558:sieve_extend.c **** 
 559:sieve_extend.c ****         // #pragma ivdep unroll
 560:sieve_extend.c ****         // for(; current_vector < range_stop_vector; current_vector += step) {
 561:sieve_extend.c ****         //     bitarray_vector[current_vector] |= quadmask;
 562:sieve_extend.c ****         // }
 563:sieve_extend.c ****         
 564:sieve_extend.c ****         // if unlikely(current_vector == range_stop_vector) {
 565:sieve_extend.c ****         //     counter_t index_word = current_vector * VECTOR_ELEMENTS;
 566:sieve_extend.c ****         //     counter_t range_stop_word = wordindex(range_stop);
 567:sieve_extend.c ****         //     if likely(index_word <= range_stop_word) {
 568:sieve_extend.c ****         //         #pragma ivdep
 569:sieve_extend.c ****         //         for (word =0; word < VECTOR_ELEMENTS; word++) {
 570:sieve_extend.c ****         //             if unlikely(index_word+word <= range_stop_word)
 571:sieve_extend.c ****         //                 bitarray_word[index_word+word] |= quadmask[word];
 572:sieve_extend.c ****         //         }
 573:sieve_extend.c ****         //     }
 574:sieve_extend.c **** 
 575:sieve_extend.c ****         // }
 576:sieve_extend.c ****     }
 577:sieve_extend.c **** }
 578:sieve_extend.c **** 
 579:sieve_extend.c **** static void extendSieve_smallSize(bitword_t* __restrict bitarray, const counter_t source_start, con
  90              		.loc 1 579 153 view -0
  91              		.cfi_startproc
 580:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
  92              		.loc 1 580 5 view .LVU1
 581:sieve_extend.c ****     // debug { printf("...At start. "); dump_bitarray(bitarray, 4); }
 582:sieve_extend.c **** 
 583:sieve_extend.c ****     const counter_t source_word = wordindex(source_start);
  93              		.loc 1 583 5 view .LVU2
 584:sieve_extend.c ****     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_start)) | (bitarray[sou
  94              		.loc 1 584 5 view .LVU3
  95              	# sieve_extend.c:579: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 579:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
  96              		.loc 1 579 153 is_stmt 0 view .LVU4
  97 0000 55       		push	rbp	#
  98              		.cfi_def_cfa_offset 16
  99              		.cfi_offset 6, -16
 100 0001 4989D1   		mov	r9, rdx	# size, tmp576
GAS LISTING /tmp/ccBvFgp2.s 			page 13


 101              	# sieve_extend.c:583:     const counter_t source_word = wordindex(source_start);
 583:sieve_extend.c ****     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_start)) | (bitarray[sou
 102              		.loc 1 583 21 view .LVU5
 103 0004 4889F0   		mov	rax, rsi	# source_word, source_start
 104              	# sieve_extend.c:579: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 579:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 105              		.loc 1 579 153 view .LVU6
 106 0007 4889E5   		mov	rbp, rsp	#,
 107              		.cfi_def_cfa_register 6
 108              	# sieve_extend.c:584:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 109              		.loc 1 584 134 view .LVU7
 110 000a 89F2     		mov	edx, esi	# tmp334, source_start
 111              	.LVL1:
 112              	# sieve_extend.c:579: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 579:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 113              		.loc 1 579 153 view .LVU8
 114 000c 4157     		push	r15	#
 115              	# sieve_extend.c:583:     const counter_t source_word = wordindex(source_start);
 583:sieve_extend.c ****     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_start)) | (bitarray[sou
 116              		.loc 1 583 21 view .LVU9
 117 000e 48C1E806 		shr	rax, 6	# source_word,
 118              	.LVL2:
 119              	# sieve_extend.c:584:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 120              		.loc 1 584 134 view .LVU10
 121 0012 83E23F   		and	edx, 63	# tmp334,
 122              	# sieve_extend.c:579: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 579:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 123              		.loc 1 579 153 view .LVU11
 124 0015 4156     		push	r14	#
 125              	# sieve_extend.c:584:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 126              		.loc 1 584 133 view .LVU12
 127 0017 41B84000 		mov	r8d, 64	# tmp336,
 127      0000
 128              	# sieve_extend.c:584:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 129              		.loc 1 584 167 view .LVU13
 130 001d 4589CB   		mov	r11d, r9d	# tmp342, size
 131              	# sieve_extend.c:579: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 579:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 132              		.loc 1 579 153 view .LVU14
 133 0020 4155     		push	r13	#
 134              	# sieve_extend.c:584:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 135              		.loc 1 584 133 view .LVU15
 136 0022 4129D0   		sub	r8d, edx	# tmp335, tmp334
 137              	# sieve_extend.c:584:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 138              		.loc 1 584 167 view .LVU16
 139 0025 41F7D3   		not	r11d	# tmp342
 140              	# sieve_extend.c:579: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 579:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 141              		.loc 1 579 153 view .LVU17
 142 0028 4154     		push	r12	#
 143              		.cfi_offset 15, -24
 144              		.cfi_offset 14, -32
 145              		.cfi_offset 13, -40
 146              		.cfi_offset 12, -48
 147              	# sieve_extend.c:584:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 148              		.loc 1 584 167 view .LVU18
 149 002a 49C7C4FF 		mov	r12, -1	# tmp345,
GAS LISTING /tmp/ccBvFgp2.s 			page 14


 149      FFFFFF
 150 0031 C442A3F7 		shrx	r13, r12, r11	# tmp344, tmp345, tmp342
 150      EC
 151              	# sieve_extend.c:579: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 579:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 152              		.loc 1 579 153 view .LVU19
 153 0036 53       		push	rbx	#
 154              		.cfi_offset 3, -56
 155 0037 4889CB   		mov	rbx, rcx	# destination_stop, tmp577
 156              	# sieve_extend.c:584:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 157              		.loc 1 584 58 view .LVU20
 158 003a 488B0CC7 		mov	rcx, QWORD PTR [rdi+rax*8]	# *_5, *_5
 159              	.LVL3:
 160              	# sieve_extend.c:584:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 161              		.loc 1 584 112 view .LVU21
 162 003e C462B9F7 		shlx	r8, QWORD PTR 8[rdi+rax*8], r8	# tmp337, *_11, tmp335
 162      44C708
 163              	# sieve_extend.c:584:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 164              		.loc 1 584 58 view .LVU22
 165 0045 C462CBF7 		shrx	r10, rcx, rsi	# tmp339, *_5, source_start
 165      D1
 166              	# sieve_extend.c:584:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 167              		.loc 1 584 85 view .LVU23
 168 004a 4D09D0   		or	r8, r10	# tmp341, tmp339
 169              	# sieve_extend.c:579: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 579:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 170              		.loc 1 579 153 view .LVU24
 171 004d 4883E4E0 		and	rsp, -32	#,
 172              	# sieve_extend.c:584:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 173              		.loc 1 584 24 view .LVU25
 174 0051 4D21E8   		and	r8, r13	# pattern, tmp344
 175              	.LVL4:
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 176              		.loc 1 585 5 is_stmt 1 view .LVU26
 177              	.LBB303:
 178              		.loc 1 585 10 view .LVU27
 179              		.loc 1 585 54 view .LVU28
 180              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 181              		.loc 1 585 5 is_stmt 0 view .LVU29
 182 0054 4983F940 		cmp	r9, 64	# size,
 183 0058 0F87C200 		ja	.L2	#,
 183      0000
 184 005e 4D89CE   		mov	r14, r9	# pattern_size, size
 185              	.LVL5:
 186              	.L3:
 586:sieve_extend.c ****         pattern |= (pattern << pattern_size);
 187              		.loc 1 586 9 is_stmt 1 discriminator 3 view .LVU30
 188              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 189              		.loc 1 585 103 is_stmt 0 discriminator 3 view .LVU31
 190 0061 4B8D0436 		lea	rax, [r14+r14]	# pattern_size,
 191              	# sieve_extend.c:586:         pattern |= (pattern << pattern_size);
 192              		.loc 1 586 29 discriminator 3 view .LVU32
 193 0065 C44289F7 		shlx	r15, r8, r14	# _23, pattern, pattern_size
 193      F8
 194              	# sieve_extend.c:586:         pattern |= (pattern << pattern_size);
 195              		.loc 1 586 17 discriminator 3 view .LVU33
GAS LISTING /tmp/ccBvFgp2.s 			page 15


 196 006a 4D09F8   		or	r8, r15	# pattern, _23
 197              	.LVL6:
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 198              		.loc 1 585 90 is_stmt 1 discriminator 3 view .LVU34
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 199              		.loc 1 585 54 discriminator 3 view .LVU35
 200              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 201              		.loc 1 585 5 is_stmt 0 discriminator 3 view .LVU36
 202 006d 4883F840 		cmp	rax, 64	# pattern_size,
 203 0071 0F87A900 		ja	.L2	#,
 203      0000
 204              		.loc 1 586 9 is_stmt 1 view .LVU37
 205              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 206              		.loc 1 585 103 is_stmt 0 view .LVU38
 207 0077 4A8D0CB5 		lea	rcx, 0[0+r14*4]	# pattern_size,
 207      00000000 
 208              	# sieve_extend.c:586:         pattern |= (pattern << pattern_size);
 209              		.loc 1 586 29 view .LVU39
 210 007f C4C2F9F7 		shlx	rdx, r8, rax	# _23, pattern, pattern_size
 210      D0
 211              	# sieve_extend.c:586:         pattern |= (pattern << pattern_size);
 212              		.loc 1 586 17 view .LVU40
 213 0084 4909D0   		or	r8, rdx	# pattern, _23
 214              	.LVL7:
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 215              		.loc 1 585 90 is_stmt 1 view .LVU41
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 216              		.loc 1 585 54 view .LVU42
 217              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 218              		.loc 1 585 5 is_stmt 0 view .LVU43
 219 0087 4883F940 		cmp	rcx, 64	# pattern_size,
 220 008b 0F878F00 		ja	.L2	#,
 220      0000
 221              		.loc 1 586 9 is_stmt 1 view .LVU44
 222              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 223              		.loc 1 585 103 is_stmt 0 view .LVU45
 224 0091 4E8D1CF5 		lea	r11, 0[0+r14*8]	# pattern_size,
 224      00000000 
 225              	# sieve_extend.c:586:         pattern |= (pattern << pattern_size);
 226              		.loc 1 586 29 view .LVU46
 227 0099 C442F1F7 		shlx	r10, r8, rcx	# _23, pattern, pattern_size
 227      D0
 228              	# sieve_extend.c:586:         pattern |= (pattern << pattern_size);
 229              		.loc 1 586 17 view .LVU47
 230 009e 4D09D0   		or	r8, r10	# pattern, _23
 231              	.LVL8:
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 232              		.loc 1 585 90 is_stmt 1 view .LVU48
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 233              		.loc 1 585 54 view .LVU49
 234              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 235              		.loc 1 585 5 is_stmt 0 view .LVU50
GAS LISTING /tmp/ccBvFgp2.s 			page 16


 236 00a1 4983FB40 		cmp	r11, 64	# pattern_size,
 237 00a5 7779     		ja	.L2	#,
 238              		.loc 1 586 9 is_stmt 1 view .LVU51
 239              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 240              		.loc 1 585 103 is_stmt 0 view .LVU52
 241 00a7 4D89F5   		mov	r13, r14	# pattern_size, pattern_size
 242              	# sieve_extend.c:586:         pattern |= (pattern << pattern_size);
 243              		.loc 1 586 29 view .LVU53
 244 00aa C442A1F7 		shlx	r12, r8, r11	# _23, pattern, pattern_size
 244      E0
 245              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 246              		.loc 1 585 103 view .LVU54
 247 00af 49C1E504 		sal	r13, 4	# pattern_size,
 248              	# sieve_extend.c:586:         pattern |= (pattern << pattern_size);
 249              		.loc 1 586 17 view .LVU55
 250 00b3 4D09E0   		or	r8, r12	# pattern, _23
 251              	.LVL9:
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 252              		.loc 1 585 90 is_stmt 1 view .LVU56
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 253              		.loc 1 585 54 view .LVU57
 254              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 255              		.loc 1 585 5 is_stmt 0 view .LVU58
 256 00b6 4983FD40 		cmp	r13, 64	# pattern_size,
 257 00ba 7764     		ja	.L2	#,
 258              		.loc 1 586 9 is_stmt 1 view .LVU59
 259              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 260              		.loc 1 585 103 is_stmt 0 view .LVU60
 261 00bc 4C89F0   		mov	rax, r14	# pattern_size, pattern_size
 262              	# sieve_extend.c:586:         pattern |= (pattern << pattern_size);
 263              		.loc 1 586 29 view .LVU61
 264 00bf C44291F7 		shlx	r15, r8, r13	# _23, pattern, pattern_size
 264      F8
 265              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 266              		.loc 1 585 103 view .LVU62
 267 00c4 48C1E005 		sal	rax, 5	# pattern_size,
 268              	# sieve_extend.c:586:         pattern |= (pattern << pattern_size);
 269              		.loc 1 586 17 view .LVU63
 270 00c8 4D09F8   		or	r8, r15	# pattern, _23
 271              	.LVL10:
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 272              		.loc 1 585 90 is_stmt 1 view .LVU64
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 273              		.loc 1 585 54 view .LVU65
 274              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 275              		.loc 1 585 5 is_stmt 0 view .LVU66
 276 00cb 4883F840 		cmp	rax, 64	# pattern_size,
 277 00cf 774F     		ja	.L2	#,
 278              		.loc 1 586 9 is_stmt 1 view .LVU67
 279              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
GAS LISTING /tmp/ccBvFgp2.s 			page 17


 280              		.loc 1 585 103 is_stmt 0 view .LVU68
 281 00d1 4C89F1   		mov	rcx, r14	# pattern_size, pattern_size
 282              	# sieve_extend.c:586:         pattern |= (pattern << pattern_size);
 283              		.loc 1 586 29 view .LVU69
 284 00d4 C4C2F9F7 		shlx	rdx, r8, rax	# _23, pattern, pattern_size
 284      D0
 285              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 286              		.loc 1 585 103 view .LVU70
 287 00d9 48C1E106 		sal	rcx, 6	# pattern_size,
 288              	# sieve_extend.c:586:         pattern |= (pattern << pattern_size);
 289              		.loc 1 586 17 view .LVU71
 290 00dd 4909D0   		or	r8, rdx	# pattern, _23
 291              	.LVL11:
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 292              		.loc 1 585 90 is_stmt 1 view .LVU72
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 293              		.loc 1 585 54 view .LVU73
 294              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 295              		.loc 1 585 5 is_stmt 0 view .LVU74
 296 00e0 4883F940 		cmp	rcx, 64	# pattern_size,
 297 00e4 773A     		ja	.L2	#,
 298              		.loc 1 586 9 is_stmt 1 view .LVU75
 299              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 300              		.loc 1 585 103 is_stmt 0 view .LVU76
 301 00e6 4D89F3   		mov	r11, r14	# pattern_size, pattern_size
 302              	# sieve_extend.c:586:         pattern |= (pattern << pattern_size);
 303              		.loc 1 586 29 view .LVU77
 304 00e9 C442F1F7 		shlx	r10, r8, rcx	# _23, pattern, pattern_size
 304      D0
 305              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 306              		.loc 1 585 103 view .LVU78
 307 00ee 49C1E307 		sal	r11, 7	# pattern_size,
 308              	# sieve_extend.c:586:         pattern |= (pattern << pattern_size);
 309              		.loc 1 586 17 view .LVU79
 310 00f2 4D09D0   		or	r8, r10	# pattern, _23
 311              	.LVL12:
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 312              		.loc 1 585 90 is_stmt 1 view .LVU80
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 313              		.loc 1 585 54 view .LVU81
 314              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 315              		.loc 1 585 5 is_stmt 0 view .LVU82
 316 00f5 4983FB40 		cmp	r11, 64	# pattern_size,
 317 00f9 7725     		ja	.L2	#,
 318              		.loc 1 586 9 is_stmt 1 view .LVU83
 319              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 320              		.loc 1 585 103 is_stmt 0 view .LVU84
 321 00fb 49C1E608 		sal	r14, 8	# pattern_size,
 322              	# sieve_extend.c:586:         pattern |= (pattern << pattern_size);
 323              		.loc 1 586 29 view .LVU85
 324 00ff C442A1F7 		shlx	r12, r8, r11	# _23, pattern, pattern_size
GAS LISTING /tmp/ccBvFgp2.s 			page 18


 324      E0
 325              	# sieve_extend.c:586:         pattern |= (pattern << pattern_size);
 326              		.loc 1 586 17 view .LVU86
 327 0104 4D09E0   		or	r8, r12	# pattern, _23
 328              	.LVL13:
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 329              		.loc 1 585 90 is_stmt 1 view .LVU87
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 330              		.loc 1 585 54 view .LVU88
 331              	# sieve_extend.c:585:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 332              		.loc 1 585 5 is_stmt 0 view .LVU89
 333 0107 4983FE40 		cmp	r14, 64	# pattern_size,
 334 010b 0F8650FF 		jbe	.L3	#,
 334      FFFF
 335              	.LVL14:
 336 0111 66662E0F 		.p2align 4
 336      1F840000 
 336      0000000F 
 336      1F4000
 337              		.p2align 3
 338              	.L2:
 585:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 339              		.loc 1 585 5 view .LVU90
 340              	.LBE303:
 587:sieve_extend.c **** 
 588:sieve_extend.c ****     const counter_t destination_start = source_start + size;
 341              		.loc 1 588 5 is_stmt 1 view .LVU91
 342              	# sieve_extend.c:588:     const counter_t destination_start = source_start + size;
 343              		.loc 1 588 21 is_stmt 0 view .LVU92
 344 0120 4A8D0C0E 		lea	rcx, [rsi+r9]	# destination_start,
 345              	.LVL15:
 589:sieve_extend.c ****     counter_t destination_start_word = wordindex(destination_start);
 346              		.loc 1 589 5 is_stmt 1 view .LVU93
 347              	# sieve_extend.c:590:     counter_t destination_stop_word = wordindex(destination_stop);
 590:sieve_extend.c ****     counter_t destination_stop_word = wordindex(destination_stop);
 348              		.loc 1 590 15 is_stmt 0 view .LVU94
 349 0124 4989DC   		mov	r12, rbx	# destination_stop_word, destination_stop
 350              	# sieve_extend.c:589:     counter_t destination_start_word = wordindex(destination_start);
 589:sieve_extend.c ****     counter_t destination_start_word = wordindex(destination_start);
 351              		.loc 1 589 15 view .LVU95
 352 0127 4989CB   		mov	r11, rcx	# destination_start_word, destination_start
 353 012a F7D3     		not	ebx	# tmp348
 354              	.LVL16:
 589:sieve_extend.c ****     counter_t destination_start_word = wordindex(destination_start);
 355              		.loc 1 589 15 view .LVU96
 356 012c 49C1EB06 		shr	r11, 6	# destination_start_word,
 357              	.LVL17:
 358              		.loc 1 590 5 is_stmt 1 view .LVU97
 359 0130 49C7C5FF 		mov	r13, -1	# tmp350,
 359      FFFFFF
 360              	# sieve_extend.c:590:     counter_t destination_stop_word = wordindex(destination_stop);
 361              		.loc 1 590 15 is_stmt 0 view .LVU98
 362 0137 49C1EC06 		shr	r12, 6	# destination_stop_word,
 363              	.LVL18:
 591:sieve_extend.c ****     if (destination_start_word >= destination_stop_word) {
 364              		.loc 1 591 5 is_stmt 1 view .LVU99
GAS LISTING /tmp/ccBvFgp2.s 			page 19


 365 013b 4A8D34DD 		lea	rsi, 0[0+r11*8]	# _116,
 365      00000000 
 366              	.LVL19:
 367              		.loc 1 591 5 is_stmt 0 view .LVU100
 368 0143 4C8D3437 		lea	r14, [rdi+rsi]	# _117,
 369              	# sieve_extend.c:591:     if (destination_start_word >= destination_stop_word) {
 370              		.loc 1 591 8 view .LVU101
 371 0147 4D39E3   		cmp	r11, r12	# destination_start_word, destination_stop_word
 372 014a C4C2F1F7 		shlx	rax, r8, rcx	# _120, pattern, destination_start
 372      C0
 373 014f 4D8B3E   		mov	r15, QWORD PTR [r14]	# pretmp_118, *_117
 374 0152 C4C2E3F7 		shrx	rbx, r13, rbx	# _124, tmp350, tmp348
 374      DD
 375 0157 0F833305 		jnb	.L49	#,
 375      0000
 592:sieve_extend.c ****         bitarray[destination_start_word] |= (pattern << bitindex(destination_start)) & chopmask(des
 593:sieve_extend.c ****         return;
 594:sieve_extend.c ****     }
 595:sieve_extend.c **** 
 596:sieve_extend.c ****     bitarray[destination_start_word] |= (pattern << bitindex(destination_start));
 376              		.loc 1 596 5 is_stmt 1 view .LVU102
 377              	# sieve_extend.c:596:     bitarray[destination_start_word] |= (pattern << bitindex(destination_star
 378              		.loc 1 596 38 is_stmt 0 view .LVU103
 379 015d 4C09F8   		or	rax, r15	# tmp353, pretmp_118
 380              	# sieve_extend.c:599:     register const bitshift_t pattern_shift = WORD_SIZE_counter % size;
 597:sieve_extend.c **** 
 598:sieve_extend.c ****     // TODO: refactor according to smallstep
 599:sieve_extend.c ****     register const bitshift_t pattern_shift = WORD_SIZE_counter % size;
 381              		.loc 1 599 31 view .LVU104
 382 0160 31D2     		xor	edx, edx	# tmp355
 383              	# sieve_extend.c:596:     bitarray[destination_start_word] |= (pattern << bitindex(destination_star
 596:sieve_extend.c **** 
 384              		.loc 1 596 38 view .LVU105
 385 0162 498906   		mov	QWORD PTR [r14], rax	# *_117, tmp353
 386              		.loc 1 599 5 is_stmt 1 view .LVU106
 387              	# sieve_extend.c:599:     register const bitshift_t pattern_shift = WORD_SIZE_counter % size;
 388              		.loc 1 599 31 is_stmt 0 view .LVU107
 389 0165 41BE4000 		mov	r14d, 64	# tmp354,
 389      0000
 390 016b 4C89F0   		mov	rax, r14	# tmp356, tmp354
 391 016e 488D7437 		lea	rsi, 8[rdi+rsi]	# vectp.133,
 391      08
 392 0173 49F7F1   		div	r9	# size
 393              	.LVL20:
 600:sieve_extend.c ****     register const bitshift_t pattern_size = WORD_SIZE_bitshift - pattern_shift;
 394              		.loc 1 600 5 is_stmt 1 view .LVU108
 601:sieve_extend.c ****     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destination_start)) & WORDMASK;
 395              		.loc 1 601 5 view .LVU109
 602:sieve_extend.c ****     register counter_t loop_range = destination_stop_word - destination_start_word;
 396              		.loc 1 602 5 view .LVU110
 397 0176 48C1EE03 		shr	rsi, 3	# tmp363,
 398              	# sieve_extend.c:602:     register counter_t loop_range = destination_stop_word - destination_start
 399              		.loc 1 602 24 is_stmt 0 view .LVU111
 400 017a 4D89E1   		mov	r9, r12	# loop_range, destination_stop_word
 401              	.LVL21:
 402              	# sieve_extend.c:601:     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destinati
 601:sieve_extend.c ****     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destination_start)) & WORDMASK;
GAS LISTING /tmp/ccBvFgp2.s 			page 20


 403              		.loc 1 601 89 view .LVU112
 404 017d 48F7D9   		neg	rcx	# tmp359
 405              	.LVL22:
 406              	# sieve_extend.c:602:     register counter_t loop_range = destination_stop_word - destination_start
 407              		.loc 1 602 24 view .LVU113
 408 0180 4D29D9   		sub	r9, r11	# loop_range, destination_start_word
 409              	.LVL23:
 603:sieve_extend.c ****     destination_start_word++;
 410              		.loc 1 603 5 is_stmt 1 view .LVU114
 411              	# sieve_extend.c:600:     register const bitshift_t pattern_size = WORD_SIZE_bitshift - pattern_shi
 600:sieve_extend.c ****     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destination_start)) & WORDMASK;
 412              		.loc 1 600 31 is_stmt 0 view .LVU115
 413 0183 4C89F0   		mov	rax, r14	# tmp354, tmp354
 414 0186 48F7DE   		neg	rsi	# tmp364
 415              	# sieve_extend.c:601:     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destinati
 601:sieve_extend.c ****     register counter_t loop_range = destination_stop_word - destination_start_word;
 416              		.loc 1 601 25 view .LVU116
 417 0189 83E13F   		and	ecx, 63	# shift,
 418              	.LVL24:
 601:sieve_extend.c ****     register counter_t loop_range = destination_stop_word - destination_start_word;
 419              		.loc 1 601 25 view .LVU117
 420 018c 83E603   		and	esi, 3	# prolog_loop_niters.134,
 421              	# sieve_extend.c:603:     destination_start_word++;
 422              		.loc 1 603 27 view .LVU118
 423 018f 4D8D5301 		lea	r10, 1[r11]	# destination_start_word,
 424              	.LVL25:
 604:sieve_extend.c ****     
 605:sieve_extend.c ****     #pragma unroll
 606:sieve_extend.c ****     #pragma ivdep
 607:sieve_extend.c ****     for (counter_t i=0; i<=loop_range; ++i ) {
 425              		.loc 1 607 5 is_stmt 1 view .LVU119
 426              	.LBB304:
 427              		.loc 1 607 10 view .LVU120
 428              		.loc 1 607 25 view .LVU121
 429 0193 4D8D6901 		lea	r13, 1[r9]	# niters.132,
 430 0197 894C24F4 		mov	DWORD PTR -12[rsp], ecx	# %sfp, shift
 431 019b 895424F8 		mov	DWORD PTR -8[rsp], edx	# %sfp, tmp355
 432              	.LBE304:
 433              	# sieve_extend.c:600:     register const bitshift_t pattern_size = WORD_SIZE_bitshift - pattern_shi
 600:sieve_extend.c ****     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destination_start)) & WORDMASK;
 434              		.loc 1 600 31 is_stmt 0 view .LVU122
 435 019f 4829D0   		sub	rax, rdx	# tmp354, tmp355
 436              	.LVL26:
 600:sieve_extend.c ****     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destination_start)) & WORDMASK;
 437              		.loc 1 600 31 view .LVU123
 438 01a2 894424FC 		mov	DWORD PTR -4[rsp], eax	# %sfp, pattern_size
 439 01a6 4983F90A 		cmp	r9, 10	# loop_range,
 440 01aa 0F860505 		jbe	.L11	#,
 440      0000
 441 01b0 4885F6   		test	rsi, rsi	# prolog_loop_niters.134
 442 01b3 0F84F404 		je	.L12	#,
 442      0000
 443              	.LBB305:
 608:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 444              		.loc 1 608 9 is_stmt 1 view .LVU124
 445              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 446              		.loc 1 608 72 is_stmt 0 view .LVU125
GAS LISTING /tmp/ccBvFgp2.s 			page 21


 447 01b9 4189C7   		mov	r15d, eax	# tmp365, pattern_size
 448 01bc 4129CF   		sub	r15d, ecx	# tmp365, shift
 449              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 450              		.loc 1 608 55 view .LVU126
 451 01bf C44281F7 		shlx	r14, r8, r15	# tmp366, pattern, tmp365
 451      F0
 452              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 453              		.loc 1 608 127 view .LVU127
 454 01c4 C442F3F7 		shrx	r15, r8, rcx	# tmp367, pattern, shift
 454      F8
 455              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 456              		.loc 1 608 116 view .LVU128
 457 01c9 4D09FE   		or	r14, r15	# tmp368, tmp367
 458 01cc 4E8934D7 		mov	QWORD PTR [rdi+r10*8], r14	# *_317, tmp368
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 459              		.loc 1 607 40 is_stmt 1 view .LVU129
 460              	.LVL27:
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 461              		.loc 1 607 25 view .LVU130
 462 01d0 4883FE01 		cmp	rsi, 1	# prolog_loop_niters.134,
 463              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 464              		.loc 1 607 40 is_stmt 0 view .LVU131
 465 01d4 41BE0100 		mov	r14d, 1	# i,
 465      0000
 466 01da 7452     		je	.L7	#,
 467              		.loc 1 608 9 is_stmt 1 view .LVU132
 468              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 469              		.loc 1 608 81 is_stmt 0 view .LVU133
 470 01dc 448D3411 		lea	r14d, [rcx+rdx]	# tmp369,
 471              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 472              		.loc 1 608 72 view .LVU134
 473 01e0 4189C7   		mov	r15d, eax	# tmp371, pattern_size
 474              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 475              		.loc 1 608 99 view .LVU135
 476 01e3 4183E63F 		and	r14d, 63	# _328,
 477              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 478              		.loc 1 608 72 view .LVU136
 479 01e7 4529F7   		sub	r15d, r14d	# tmp371, _328
 480              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 481              		.loc 1 608 127 view .LVU137
 482 01ea C4428BF7 		shrx	r14, r8, r14	# tmp373, pattern, _328
 482      F0
 483              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 484              		.loc 1 608 55 view .LVU138
 485 01ef C44281F7 		shlx	r15, r8, r15	# tmp372, pattern, tmp371
 485      F8
 486              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 487              		.loc 1 608 116 view .LVU139
 488 01f4 4D09FE   		or	r14, r15	# tmp374, tmp372
 489 01f7 4E8974DF 		mov	QWORD PTR 16[rdi+r11*8], r14	# *_334, tmp374
 489      10
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 490              		.loc 1 607 40 is_stmt 1 view .LVU140
 491              	.LVL28:
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 492              		.loc 1 607 25 view .LVU141
GAS LISTING /tmp/ccBvFgp2.s 			page 22


 493 01fc 4883FE03 		cmp	rsi, 3	# prolog_loop_niters.134,
 494              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 495              		.loc 1 607 40 is_stmt 0 view .LVU142
 496 0200 41BE0200 		mov	r14d, 2	# i,
 496      0000
 497 0206 7526     		jne	.L7	#,
 498              		.loc 1 608 9 is_stmt 1 view .LVU143
 499              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 500              		.loc 1 608 81 is_stmt 0 view .LVU144
 501 0208 448D3451 		lea	r14d, [rcx+rdx*2]	# tmp376,
 502              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 503              		.loc 1 608 72 view .LVU145
 504 020c 4189C7   		mov	r15d, eax	# tmp378, pattern_size
 505              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 506              		.loc 1 608 99 view .LVU146
 507 020f 4183E63F 		and	r14d, 63	# _104,
 508              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 509              		.loc 1 608 72 view .LVU147
 510 0213 4529F7   		sub	r15d, r14d	# tmp378, _104
 511              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 512              		.loc 1 608 127 view .LVU148
 513 0216 C4428BF7 		shrx	r14, r8, r14	# tmp380, pattern, _104
 513      F0
 514              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 515              		.loc 1 608 55 view .LVU149
 516 021b C44281F7 		shlx	r15, r8, r15	# tmp379, pattern, tmp378
 516      F8
 517              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 518              		.loc 1 608 116 view .LVU150
 519 0220 4D09FE   		or	r14, r15	# tmp381, tmp379
 520 0223 4E8974DF 		mov	QWORD PTR 24[rdi+r11*8], r14	# *_94, tmp381
 520      18
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 521              		.loc 1 607 40 is_stmt 1 view .LVU151
 522              	.LVL29:
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 523              		.loc 1 607 25 view .LVU152
 524              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 525              		.loc 1 607 40 is_stmt 0 view .LVU153
 526 0228 41BE0300 		mov	r14d, 3	# i,
 526      0000
 527              	.LVL30:
 528              	.L7:
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 529              		.loc 1 607 40 view .LVU154
 530 022e 4929F5   		sub	r13, rsi	# niters.135, prolog_loop_niters.134
 531 0231 4C01D6   		add	rsi, r10	# tmp388, destination_start_word
 532 0234 4D89EB   		mov	r11, r13	# bnd.136, niters.135
 533 0237 C4C1F96E 		vmovq	xmm3, r14	# i, i
 533      DE
 534 023c 49C1EB03 		shr	r11, 3	# bnd.136,
 535 0240 488D34F7 		lea	rsi, [rdi+rsi*8]	# ivtmp.154,
 536 0244 49C1E306 		sal	r11, 6	# tmp391,
 537 0248 C4627D59 		vpbroadcastq	ymm9, xmm3	# tmp382, i
 537      CB
GAS LISTING /tmp/ccBvFgp2.s 			page 23


 538 024d C4C1F96E 		vmovq	xmm4, r8	# pattern, pattern
 538      E0
 539 0252 4D8D3C33 		lea	r15, [r11+rsi]	# _344,
 540 0256 4183E340 		and	r11d, 64	# tmp391,
 541 025a C535D435 		vpaddq	ymm14, ymm9, YMMWORD PTR .LC0[rip]	# vect_vec_iv_.139, tmp382,
 541      00000000 
 542 0262 C4E27D58 		vpbroadcastd	ymm6, DWORD PTR -8[rsp]	# vect_cst__146, %sfp
 542      7424F8
 543 0269 C4E27D59 		vpbroadcastq	ymm2, xmm4	# vect_cst__156, pattern
 543      D4
 544 026e C4E27D58 		vpbroadcastd	ymm5, DWORD PTR -12[rsp]	# vect_cst__148, %sfp
 544      6C24F4
 545 0275 C4627D58 		vpbroadcastd	ymm12, DWORD PTR -4[rsp]	# vect_cst__152, %sfp
 545      6424FC
 546 027c C57D6F05 		vmovdqa	ymm8, YMMWORD PTR .LC1[rip]	# tmp496,
 546      00000000 
 547 0284 C5FD6F3D 		vmovdqa	ymm7, YMMWORD PTR .LC2[rip]	# tmp497,
 547      00000000 
 548 028c C57D6F2D 		vmovdqa	ymm13, YMMWORD PTR .LC3[rip]	# tmp498,
 548      00000000 
 549 0294 0F849600 		je	.L9	#,
 549      0000
 550              	.LVL31:
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 551              		.loc 1 607 40 view .LVU155
 552 029a C57D7FF1 		vmovdqa	ymm1, ymm14	# vect_vec_iv_.139, vect_vec_iv_.139
 553 029e 4883C640 		add	rsi, 64	# ivtmp.154,
 554              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 555              		.loc 1 608 81 view .LVU156
 556 02a2 C575D4D7 		vpaddq	ymm10, ymm1, ymm7	# vect_vec_iv_.139, vect_vec_iv_.139, tmp497
 557 02a6 C4410DD4 		vpaddq	ymm14, ymm14, ymm8	# vect_vec_iv_.139, vect_vec_iv_.139, tmp496
 557      F0
 558              		.loc 1 608 9 is_stmt 1 view .LVU157
 559              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 560              		.loc 1 608 81 is_stmt 0 view .LVU158
 561 02ab C4C37546 		vperm2i128	ymm0, ymm1, ymm10, 32	# tmp538, vect_vec_iv_.139, vect_vec_iv_.139,
 561      C220
 562 02b1 C4437546 		vperm2i128	ymm11, ymm1, ymm10, 49	# tmp539, vect_vec_iv_.139, vect_vec_iv_.139,
 562      DA31
 563 02b7 C57D70F8 		vpshufd	ymm15, ymm0, 216	# tmp540, tmp538,
 563      D8
 564 02bc C4C17D70 		vpshufd	ymm3, ymm11, 216	# tmp541, tmp539,
 564      DBD8
 565 02c2 C5056CCB 		vpunpcklqdq	ymm9, ymm15, ymm3	# tmp542, tmp540, tmp541
 566 02c6 C4C24D40 		vpmulld	ymm4, ymm6, ymm9	# vect__45.141, vect_cst__146, tmp542
 566      E1
 567              	.LVL32:
 568              		.loc 1 608 81 view .LVU159
 569 02cb C5DDFECD 		vpaddd	ymm1, ymm4, ymm5	# vect__47.142, vect__45.141, vect_cst__148
 570              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 571              		.loc 1 608 99 view .LVU160
 572 02cf C4C175DB 		vpand	ymm0, ymm1, ymm13	# vect__48.143, vect__47.142, tmp498
 572      C5
 573              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 574              		.loc 1 608 72 view .LVU161
 575 02d4 C51DFAF8 		vpsubd	ymm15, ymm12, ymm0	# vect__49.144, vect_cst__152, vect__48.143
 576              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
GAS LISTING /tmp/ccBvFgp2.s 			page 24


 577              		.loc 1 608 116 view .LVU162
 578 02d8 C4627D35 		vpmovzxdq	ymm11, xmm0	#, vect__48.143
 578      D8
 579 02dd C4427D35 		vpmovzxdq	ymm10, xmm15	#, vect__49.144
 579      D7
 580 02e2 C442ED45 		vpsrlvq	ymm9, ymm2, ymm11	# vect_patt_136.148, vect_cst__156, vect_patt_137.147
 580      CB
 581 02e7 C4C2ED47 		vpsllvq	ymm3, ymm2, ymm10	# vect_patt_138.146, vect_cst__156, vect_patt_139.145
 581      DA
 582 02ec C4637D39 		vextracti128	xmm1, ymm15, 0x1	# tmp554, vect__49.144
 582      F901
 583 02f2 C4C165EB 		vpor	ymm4, ymm3, ymm9	# vect__55.149, vect_patt_138.146, vect_patt_136.148
 583      E1
 584 02f7 C4E37D39 		vextracti128	xmm0, ymm0, 0x1	# tmp557, vect__48.143
 584      C001
 585 02fd C4627D35 		vpmovzxdq	ymm15, xmm1	# vect_patt_139.145, tmp554
 585      F9
 586 0302 C4E27D35 		vpmovzxdq	ymm3, xmm0	# vect_patt_137.147, tmp557
 586      D8
 587 0307 C442ED47 		vpsllvq	ymm10, ymm2, ymm15	# vect_patt_138.146, vect_cst__156, vect_patt_139.145
 587      D7
 588 030c C462ED45 		vpsrlvq	ymm11, ymm2, ymm3	# vect_patt_136.148, vect_cst__156, vect_patt_137.147
 588      DB
 589              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 590              		.loc 1 608 44 view .LVU163
 591 0311 C5FD7F66 		vmovdqa	YMMWORD PTR -64[rsi], ymm4	# MEM[base: _341, offset: 0B], vect__55.149
 591      C0
 592              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 593              		.loc 1 608 116 view .LVU164
 594 0316 C4412DEB 		vpor	ymm9, ymm10, ymm11	# vect__55.149, vect_patt_138.146, vect_patt_136.148
 594      CB
 595              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 596              		.loc 1 608 44 view .LVU165
 597 031b C57D7F4E 		vmovdqa	YMMWORD PTR -32[rsi], ymm9	# MEM[base: _341, offset: 32B], vect__55.149
 597      E0
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 598              		.loc 1 607 40 is_stmt 1 view .LVU166
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 599              		.loc 1 607 25 view .LVU167
 600 0320 4C39FE   		cmp	rsi, r15	# ivtmp.154, _344
 601 0323 0F841201 		je	.L37	#,
 601      0000
 602 0329 0F1F8000 		.p2align 4
 602      000000
 603              		.p2align 3
 604              	.L9:
 605              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 606              		.loc 1 608 81 is_stmt 0 discriminator 3 view .LVU168
 607 0330 C58DD4CF 		vpaddq	ymm1, ymm14, ymm7	# vect_vec_iv_.139, vect_vec_iv_.139, tmp497
 608 0334 C4C10DD4 		vpaddq	ymm4, ymm14, ymm8	# vect_vec_iv_.139, vect_vec_iv_.139, tmp496
 608      E0
 609              		.loc 1 608 9 is_stmt 1 discriminator 3 view .LVU169
 610              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 611              		.loc 1 608 81 is_stmt 0 discriminator 3 view .LVU170
 612 0339 C4630D46 		vperm2i128	ymm15, ymm14, ymm1, 32	# tmp398, vect_vec_iv_.139, vect_vec_iv_.139,
 612      F920
 613 033f C4630D46 		vperm2i128	ymm14, ymm14, ymm1, 49	# tmp399, vect_vec_iv_.139, vect_vec_iv_.139,
GAS LISTING /tmp/ccBvFgp2.s 			page 25


 613      F131
 614 0345 C4417D70 		vpshufd	ymm10, ymm15, 216	# tmp396, tmp398,
 614      D7D8
 615 034b 4883EE80 		sub	rsi, -128	# ivtmp.154,
 616 034f C4C17D70 		vpshufd	ymm0, ymm14, 216	# tmp397, tmp399,
 616      C6D8
 617 0355 C5AD6CD8 		vpunpcklqdq	ymm3, ymm10, ymm0	# tmp400, tmp396, tmp397
 618 0359 C4624D40 		vpmulld	ymm11, ymm6, ymm3	# vect__45.141, vect_cst__146, tmp400
 618      DB
 619 035e C525FECD 		vpaddd	ymm9, ymm11, ymm5	# vect__47.142, vect__45.141, vect_cst__148
 620              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 621              		.loc 1 608 99 discriminator 3 view .LVU171
 622 0362 C44135DB 		vpand	ymm15, ymm9, ymm13	# vect__48.143, vect__47.142, tmp498
 622      FD
 623              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 624              		.loc 1 608 72 discriminator 3 view .LVU172
 625 0367 C4C11DFA 		vpsubd	ymm1, ymm12, ymm15	# vect__49.144, vect_cst__152, vect__48.143
 625      CF
 626              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 627              		.loc 1 608 116 discriminator 3 view .LVU173
 628 036c C4C27D35 		vpmovzxdq	ymm0, xmm15	#, vect__48.143
 628      C7
 629 0371 C4627D35 		vpmovzxdq	ymm14, xmm1	#, vect__49.144
 629      F1
 630 0376 C4E2ED45 		vpsrlvq	ymm3, ymm2, ymm0	# vect_patt_136.148, vect_cst__156, vect_patt_137.147
 630      D8
 631 037b C442ED47 		vpsllvq	ymm10, ymm2, ymm14	# vect_patt_138.146, vect_cst__156, vect_patt_139.145
 631      D6
 632 0380 C4C37D39 		vextracti128	xmm9, ymm1, 0x1	# tmp412, vect__49.144
 632      C901
 633 0386 C52DEBDB 		vpor	ymm11, ymm10, ymm3	# vect__55.149, vect_patt_138.146, vect_patt_136.148
 634 038a C4437D39 		vextracti128	xmm15, ymm15, 0x1	# tmp415, vect__48.143
 634      FF01
 635 0390 C4C27D35 		vpmovzxdq	ymm1, xmm9	# vect_patt_139.145, tmp412
 635      C9
 636 0395 C4427D35 		vpmovzxdq	ymm10, xmm15	# vect_patt_137.147, tmp415
 636      D7
 637 039a C462ED47 		vpsllvq	ymm14, ymm2, ymm1	# vect_patt_138.146, vect_cst__156, vect_patt_139.145
 637      F1
 638 039f C4C2ED45 		vpsrlvq	ymm0, ymm2, ymm10	# vect_patt_136.148, vect_cst__156, vect_patt_137.147
 638      C2
 639              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 640              		.loc 1 608 44 discriminator 3 view .LVU174
 641 03a4 C57D7F5E 		vmovdqa	YMMWORD PTR -128[rsi], ymm11	# MEM[base: _341, offset: 0B], vect__55.149
 641      80
 642              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 643              		.loc 1 608 81 discriminator 3 view .LVU175
 644 03a9 C55DD4DF 		vpaddq	ymm11, ymm4, ymm7	# vect_vec_iv_.139, vect_vec_iv_.139, tmp497
 645              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 646              		.loc 1 608 116 discriminator 3 view .LVU176
 647 03ad C58DEBD8 		vpor	ymm3, ymm14, ymm0	# vect__55.149, vect_patt_138.146, vect_patt_136.148
 648              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 649              		.loc 1 608 81 discriminator 3 view .LVU177
 650 03b1 C4435D46 		vperm2i128	ymm9, ymm4, ymm11, 32	# tmp513, vect_vec_iv_.139, vect_vec_iv_.139,
 650      CB20
 651 03b7 C4C17D70 		vpshufd	ymm1, ymm9, 216	# tmp515, tmp513,
 651      C9D8
GAS LISTING /tmp/ccBvFgp2.s 			page 26


 652 03bd C4415DD4 		vpaddq	ymm14, ymm4, ymm8	# vect_vec_iv_.139, vect_vec_iv_.139, tmp496
 652      F0
 653              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 654              		.loc 1 608 44 discriminator 3 view .LVU178
 655 03c2 C5FD7F5E 		vmovdqa	YMMWORD PTR -96[rsi], ymm3	# MEM[base: _341, offset: 32B], vect__55.149
 655      A0
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 656              		.loc 1 607 40 is_stmt 1 discriminator 3 view .LVU179
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 657              		.loc 1 607 25 discriminator 3 view .LVU180
 658              		.loc 1 608 9 discriminator 3 view .LVU181
 659              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 660              		.loc 1 608 81 is_stmt 0 discriminator 3 view .LVU182
 661 03c7 C4C35D46 		vperm2i128	ymm4, ymm4, ymm11, 49	# tmp514, vect_vec_iv_.139, vect_vec_iv_.139,
 661      E331
 662 03cd C57D70FC 		vpshufd	ymm15, ymm4, 216	# tmp516, tmp514,
 662      D8
 663 03d2 C441756C 		vpunpcklqdq	ymm10, ymm1, ymm15	# tmp517, tmp515, tmp516
 663      D7
 664 03d7 C4C24D40 		vpmulld	ymm0, ymm6, ymm10	# vect__45.141, vect_cst__146, tmp517
 664      C2
 665 03dc C5FDFEDD 		vpaddd	ymm3, ymm0, ymm5	# vect__47.142, vect__45.141, vect_cst__148
 666              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 667              		.loc 1 608 99 discriminator 3 view .LVU183
 668 03e0 C44165DB 		vpand	ymm9, ymm3, ymm13	# vect__48.143, vect__47.142, tmp498
 668      CD
 669              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 670              		.loc 1 608 72 discriminator 3 view .LVU184
 671 03e5 C4C11DFA 		vpsubd	ymm4, ymm12, ymm9	# vect__49.144, vect_cst__152, vect__48.143
 671      E1
 672              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 673              		.loc 1 608 116 discriminator 3 view .LVU185
 674 03ea C4427D35 		vpmovzxdq	ymm15, xmm9	#, vect__48.143
 674      F9
 675 03ef C4627D35 		vpmovzxdq	ymm11, xmm4	#, vect__49.144
 675      DC
 676 03f4 C442ED45 		vpsrlvq	ymm10, ymm2, ymm15	# vect_patt_136.148, vect_cst__156, vect_patt_137.147
 676      D7
 677 03f9 C4C2ED47 		vpsllvq	ymm1, ymm2, ymm11	# vect_patt_138.146, vect_cst__156, vect_patt_139.145
 677      CB
 678 03fe C4E37D39 		vextracti128	xmm3, ymm4, 0x1	# tmp529, vect__49.144
 678      E301
 679 0404 C4C175EB 		vpor	ymm0, ymm1, ymm10	# vect__55.149, vect_patt_138.146, vect_patt_136.148
 679      C2
 680 0409 C4437D39 		vextracti128	xmm9, ymm9, 0x1	# tmp532, vect__48.143
 680      C901
 681 040f C4E27D35 		vpmovzxdq	ymm4, xmm3	# vect_patt_139.145, tmp529
 681      E3
 682 0414 C4C27D35 		vpmovzxdq	ymm1, xmm9	# vect_patt_137.147, tmp532
 682      C9
 683 0419 C462ED47 		vpsllvq	ymm11, ymm2, ymm4	# vect_patt_138.146, vect_cst__156, vect_patt_139.145
 683      DC
 684 041e C462ED45 		vpsrlvq	ymm15, ymm2, ymm1	# vect_patt_136.148, vect_cst__156, vect_patt_137.147
 684      F9
 685              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 686              		.loc 1 608 44 discriminator 3 view .LVU186
 687 0423 C5FD7F46 		vmovdqa	YMMWORD PTR -64[rsi], ymm0	# MEM[base: _341, offset: 0B], vect__55.149
GAS LISTING /tmp/ccBvFgp2.s 			page 27


 687      C0
 688              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 689              		.loc 1 608 116 discriminator 3 view .LVU187
 690 0428 C44125EB 		vpor	ymm10, ymm11, ymm15	# vect__55.149, vect_patt_138.146, vect_patt_136.148
 690      D7
 691              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 692              		.loc 1 608 44 discriminator 3 view .LVU188
 693 042d C57D7F56 		vmovdqa	YMMWORD PTR -32[rsi], ymm10	# MEM[base: _341, offset: 32B], vect__55.149
 693      E0
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 694              		.loc 1 607 40 is_stmt 1 discriminator 3 view .LVU189
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 695              		.loc 1 607 25 discriminator 3 view .LVU190
 696 0432 4C39FE   		cmp	rsi, r15	# ivtmp.154, _344
 697 0435 0F85F5FE 		jne	.L9	#,
 697      FFFF
 698              	.L37:
 699 043b 4C89EE   		mov	rsi, r13	# niters_vector_mult_vf.137, niters.135
 700 043e 4883E6F8 		and	rsi, -8	# niters_vector_mult_vf.137,
 701 0442 4901F6   		add	r14, rsi	# tmp.138, niters_vector_mult_vf.137
 702 0445 4939F5   		cmp	r13, rsi	# niters.135, niters_vector_mult_vf.137
 703 0448 0F845A02 		je	.L50	#,
 703      0000
 704 044e C5F877   		vzeroupper
 705              	.L6:
 706              	.LVL33:
 707              		.loc 1 608 9 view .LVU191
 708              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 709              		.loc 1 608 81 is_stmt 0 view .LVU192
 710 0451 4189D7   		mov	r15d, edx	# tmp418, tmp355
 711              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 712              		.loc 1 608 72 view .LVU193
 713 0454 4189C5   		mov	r13d, eax	# tmp421, pattern_size
 714              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 715              		.loc 1 608 81 view .LVU194
 716 0457 450FAFFE 		imul	r15d, r14d	# tmp418, tmp.138
 717              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 718              		.loc 1 608 17 view .LVU195
 719 045b 4F8D1C16 		lea	r11, [r14+r10]	# tmp420,
 720              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 721              		.loc 1 608 81 view .LVU196
 722 045f 4101CF   		add	r15d, ecx	# tmp419, shift
 723              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 724              		.loc 1 608 99 view .LVU197
 725 0462 4183E73F 		and	r15d, 63	# _49,
 726              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 727              		.loc 1 608 127 view .LVU198
 728 0466 C4C283F7 		shrx	rsi, r8, r15	# tmp423, pattern, _49
 728      F0
 729              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 730              		.loc 1 608 72 view .LVU199
 731 046b 4529FD   		sub	r13d, r15d	# tmp421, _49
 732              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 733              		.loc 1 607 40 view .LVU200
 734 046e 4D8D7E01 		lea	r15, 1[r14]	# i,
 735              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
GAS LISTING /tmp/ccBvFgp2.s 			page 28


 736              		.loc 1 608 55 view .LVU201
 737 0472 C44291F7 		shlx	r13, r8, r13	# tmp422, pattern, tmp421
 737      E8
 738              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 739              		.loc 1 608 116 view .LVU202
 740 0477 4C09EE   		or	rsi, r13	# tmp424, tmp422
 741 047a 4A8934DF 		mov	QWORD PTR [rdi+r11*8], rsi	# *_55, tmp424
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 742              		.loc 1 607 40 is_stmt 1 view .LVU203
 743              	.LVL34:
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 744              		.loc 1 607 25 view .LVU204
 745              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 746              		.loc 1 607 5 is_stmt 0 view .LVU205
 747 047e 4D39CF   		cmp	r15, r9	# i, loop_range
 748 0481 0F87F101 		ja	.L10	#,
 748      0000
 749              		.loc 1 608 9 is_stmt 1 view .LVU206
 750              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 751              		.loc 1 608 81 is_stmt 0 view .LVU207
 752 0487 4189D3   		mov	r11d, edx	# tmp425, tmp355
 753              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 754              		.loc 1 608 72 view .LVU208
 755 048a 4189C5   		mov	r13d, eax	# tmp428, pattern_size
 756              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 757              		.loc 1 608 81 view .LVU209
 758 048d 450FAFDF 		imul	r11d, r15d	# tmp425, i
 759              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 760              		.loc 1 608 17 view .LVU210
 761 0491 4D01D7   		add	r15, r10	# tmp427, destination_start_word
 762              	.LVL35:
 763              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 764              		.loc 1 608 81 view .LVU211
 765 0494 4101CB   		add	r11d, ecx	# tmp426, shift
 766              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 767              		.loc 1 608 99 view .LVU212
 768 0497 4183E33F 		and	r11d, 63	# _83,
 769              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 770              		.loc 1 608 72 view .LVU213
 771 049b 4529DD   		sub	r13d, r11d	# tmp428, _83
 772              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 773              		.loc 1 608 127 view .LVU214
 774 049e C442A3F7 		shrx	r11, r8, r11	# tmp430, pattern, _83
 774      D8
 775              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 776              		.loc 1 608 55 view .LVU215
 777 04a3 C4C291F7 		shlx	rsi, r8, r13	# tmp429, pattern, tmp428
 777      F0
 778              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 779              		.loc 1 608 116 view .LVU216
 780 04a8 4C09DE   		or	rsi, r11	# tmp431, tmp430
 781 04ab 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_181, tmp431
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 782              		.loc 1 607 40 is_stmt 1 view .LVU217
 783 04af 4D8D7E02 		lea	r15, 2[r14]	# i,
 784              	.LVL36:
GAS LISTING /tmp/ccBvFgp2.s 			page 29


 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 785              		.loc 1 607 25 view .LVU218
 786              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 787              		.loc 1 607 5 is_stmt 0 view .LVU219
 788 04b3 4D39F9   		cmp	r9, r15	# loop_range, i
 789 04b6 0F82BC01 		jb	.L10	#,
 789      0000
 790              		.loc 1 608 9 is_stmt 1 view .LVU220
 791              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 792              		.loc 1 608 81 is_stmt 0 view .LVU221
 793 04bc 89D6     		mov	esi, edx	# tmp432, tmp355
 794              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 795              		.loc 1 608 72 view .LVU222
 796 04be 4189C5   		mov	r13d, eax	# tmp435, pattern_size
 797              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 798              		.loc 1 608 81 view .LVU223
 799 04c1 410FAFF7 		imul	esi, r15d	# tmp432, i
 800              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 801              		.loc 1 608 17 view .LVU224
 802 04c5 4D01D7   		add	r15, r10	# tmp434, destination_start_word
 803              	.LVL37:
 804              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 805              		.loc 1 608 81 view .LVU225
 806 04c8 01CE     		add	esi, ecx	# tmp433, shift
 807              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 808              		.loc 1 608 99 view .LVU226
 809 04ca 83E63F   		and	esi, 63	# _190,
 810              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 811              		.loc 1 608 72 view .LVU227
 812 04cd 4129F5   		sub	r13d, esi	# tmp435, _190
 813              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 814              		.loc 1 608 127 view .LVU228
 815 04d0 C4C2CBF7 		shrx	rsi, r8, rsi	# tmp437, pattern, _190
 815      F0
 816              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 817              		.loc 1 608 55 view .LVU229
 818 04d5 C44291F7 		shlx	r11, r8, r13	# tmp436, pattern, tmp435
 818      D8
 819              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 820              		.loc 1 608 116 view .LVU230
 821 04da 4C09DE   		or	rsi, r11	# tmp438, tmp436
 822 04dd 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_196, tmp438
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 823              		.loc 1 607 40 is_stmt 1 view .LVU231
 824 04e1 4D8D7E03 		lea	r15, 3[r14]	# i,
 825              	.LVL38:
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 826              		.loc 1 607 25 view .LVU232
 827              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 828              		.loc 1 607 5 is_stmt 0 view .LVU233
 829 04e5 4D39F9   		cmp	r9, r15	# loop_range, i
 830 04e8 0F828A01 		jb	.L10	#,
 830      0000
 831              		.loc 1 608 9 is_stmt 1 view .LVU234
 832              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
GAS LISTING /tmp/ccBvFgp2.s 			page 30


 833              		.loc 1 608 81 is_stmt 0 view .LVU235
 834 04ee 4189D3   		mov	r11d, edx	# tmp439, tmp355
 835              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 836              		.loc 1 608 72 view .LVU236
 837 04f1 4189C5   		mov	r13d, eax	# tmp442, pattern_size
 838              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 839              		.loc 1 608 81 view .LVU237
 840 04f4 450FAFDF 		imul	r11d, r15d	# tmp439, i
 841              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 842              		.loc 1 608 17 view .LVU238
 843 04f8 4D01D7   		add	r15, r10	# tmp441, destination_start_word
 844              	.LVL39:
 845              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 846              		.loc 1 608 81 view .LVU239
 847 04fb 4101CB   		add	r11d, ecx	# tmp440, shift
 848              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 849              		.loc 1 608 99 view .LVU240
 850 04fe 4183E33F 		and	r11d, 63	# _205,
 851              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 852              		.loc 1 608 127 view .LVU241
 853 0502 C4C2A3F7 		shrx	rsi, r8, r11	# tmp444, pattern, _205
 853      F0
 854              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 855              		.loc 1 608 72 view .LVU242
 856 0507 4529DD   		sub	r13d, r11d	# tmp442, _205
 857              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 858              		.loc 1 608 55 view .LVU243
 859 050a C44291F7 		shlx	r13, r8, r13	# tmp443, pattern, tmp442
 859      E8
 860              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 861              		.loc 1 608 116 view .LVU244
 862 050f 4C09EE   		or	rsi, r13	# tmp445, tmp443
 863 0512 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_211, tmp445
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 864              		.loc 1 607 40 is_stmt 1 view .LVU245
 865 0516 4D8D7E04 		lea	r15, 4[r14]	# i,
 866              	.LVL40:
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 867              		.loc 1 607 25 view .LVU246
 868              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 869              		.loc 1 607 5 is_stmt 0 view .LVU247
 870 051a 4D39F9   		cmp	r9, r15	# loop_range, i
 871 051d 0F825501 		jb	.L10	#,
 871      0000
 872              		.loc 1 608 9 is_stmt 1 view .LVU248
 873              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 874              		.loc 1 608 81 is_stmt 0 view .LVU249
 875 0523 4189D3   		mov	r11d, edx	# tmp446, tmp355
 876              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 877              		.loc 1 608 72 view .LVU250
 878 0526 4189C5   		mov	r13d, eax	# tmp449, pattern_size
 879              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 880              		.loc 1 608 81 view .LVU251
 881 0529 450FAFDF 		imul	r11d, r15d	# tmp446, i
 882              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 883              		.loc 1 608 17 view .LVU252
GAS LISTING /tmp/ccBvFgp2.s 			page 31


 884 052d 4D01D7   		add	r15, r10	# tmp448, destination_start_word
 885              	.LVL41:
 886              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 887              		.loc 1 608 81 view .LVU253
 888 0530 4101CB   		add	r11d, ecx	# tmp447, shift
 889              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 890              		.loc 1 608 99 view .LVU254
 891 0533 4183E33F 		and	r11d, 63	# _220,
 892              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 893              		.loc 1 608 127 view .LVU255
 894 0537 C4C2A3F7 		shrx	rsi, r8, r11	# tmp451, pattern, _220
 894      F0
 895              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 896              		.loc 1 608 72 view .LVU256
 897 053c 4529DD   		sub	r13d, r11d	# tmp449, _220
 898              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 899              		.loc 1 608 55 view .LVU257
 900 053f C44291F7 		shlx	r13, r8, r13	# tmp450, pattern, tmp449
 900      E8
 901              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 902              		.loc 1 608 116 view .LVU258
 903 0544 4C09EE   		or	rsi, r13	# tmp452, tmp450
 904 0547 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_226, tmp452
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 905              		.loc 1 607 40 is_stmt 1 view .LVU259
 906 054b 4D8D7E05 		lea	r15, 5[r14]	# i,
 907              	.LVL42:
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 908              		.loc 1 607 25 view .LVU260
 909              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 910              		.loc 1 607 5 is_stmt 0 view .LVU261
 911 054f 4D39F9   		cmp	r9, r15	# loop_range, i
 912 0552 0F822001 		jb	.L10	#,
 912      0000
 913              		.loc 1 608 9 is_stmt 1 view .LVU262
 914              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 915              		.loc 1 608 81 is_stmt 0 view .LVU263
 916 0558 4189D3   		mov	r11d, edx	# tmp453, tmp355
 917              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 918              		.loc 1 608 72 view .LVU264
 919 055b 4189C5   		mov	r13d, eax	# tmp456, pattern_size
 920              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 921              		.loc 1 608 81 view .LVU265
 922 055e 450FAFDF 		imul	r11d, r15d	# tmp453, i
 923              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 924              		.loc 1 608 17 view .LVU266
 925 0562 4D01D7   		add	r15, r10	# tmp455, destination_start_word
 926              	.LVL43:
 927              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 928              		.loc 1 608 81 view .LVU267
 929 0565 4101CB   		add	r11d, ecx	# tmp454, shift
 930              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 931              		.loc 1 608 99 view .LVU268
 932 0568 4183E33F 		and	r11d, 63	# _235,
 933              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 934              		.loc 1 608 127 view .LVU269
GAS LISTING /tmp/ccBvFgp2.s 			page 32


 935 056c C4C2A3F7 		shrx	rsi, r8, r11	# tmp458, pattern, _235
 935      F0
 936              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 937              		.loc 1 608 72 view .LVU270
 938 0571 4529DD   		sub	r13d, r11d	# tmp456, _235
 939              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 940              		.loc 1 608 55 view .LVU271
 941 0574 C44291F7 		shlx	r13, r8, r13	# tmp457, pattern, tmp456
 941      E8
 942              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 943              		.loc 1 608 116 view .LVU272
 944 0579 4C09EE   		or	rsi, r13	# tmp459, tmp457
 945 057c 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_241, tmp459
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 946              		.loc 1 607 40 is_stmt 1 view .LVU273
 947 0580 4D8D7E06 		lea	r15, 6[r14]	# i,
 948              	.LVL44:
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 949              		.loc 1 607 25 view .LVU274
 950              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 951              		.loc 1 607 5 is_stmt 0 view .LVU275
 952 0584 4D39F9   		cmp	r9, r15	# loop_range, i
 953 0587 0F82EB00 		jb	.L10	#,
 953      0000
 954              		.loc 1 608 9 is_stmt 1 view .LVU276
 955              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 956              		.loc 1 608 81 is_stmt 0 view .LVU277
 957 058d 4189D3   		mov	r11d, edx	# tmp460, tmp355
 958              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 959              		.loc 1 608 72 view .LVU278
 960 0590 4189C5   		mov	r13d, eax	# tmp463, pattern_size
 961              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 962              		.loc 1 608 81 view .LVU279
 963 0593 450FAFDF 		imul	r11d, r15d	# tmp460, i
 964              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 965              		.loc 1 608 17 view .LVU280
 966 0597 4D01D7   		add	r15, r10	# tmp462, destination_start_word
 967              	.LVL45:
 968              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 969              		.loc 1 608 81 view .LVU281
 970 059a 4101CB   		add	r11d, ecx	# tmp461, shift
 971              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 972              		.loc 1 608 99 view .LVU282
 973 059d 4183E33F 		and	r11d, 63	# _250,
 974              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 975              		.loc 1 608 127 view .LVU283
 976 05a1 C4C2A3F7 		shrx	rsi, r8, r11	# tmp465, pattern, _250
 976      F0
 977              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 978              		.loc 1 608 72 view .LVU284
 979 05a6 4529DD   		sub	r13d, r11d	# tmp463, _250
 980              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 981              		.loc 1 608 55 view .LVU285
 982 05a9 C44291F7 		shlx	r13, r8, r13	# tmp464, pattern, tmp463
 982      E8
 983              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
GAS LISTING /tmp/ccBvFgp2.s 			page 33


 984              		.loc 1 608 116 view .LVU286
 985 05ae 4C09EE   		or	rsi, r13	# tmp466, tmp464
 986 05b1 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_256, tmp466
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 987              		.loc 1 607 40 is_stmt 1 view .LVU287
 988 05b5 4D8D7E07 		lea	r15, 7[r14]	# i,
 989              	.LVL46:
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 990              		.loc 1 607 25 view .LVU288
 991              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 992              		.loc 1 607 5 is_stmt 0 view .LVU289
 993 05b9 4D39F9   		cmp	r9, r15	# loop_range, i
 994 05bc 0F82B600 		jb	.L10	#,
 994      0000
 995              		.loc 1 608 9 is_stmt 1 view .LVU290
 996              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 997              		.loc 1 608 81 is_stmt 0 view .LVU291
 998 05c2 4189D3   		mov	r11d, edx	# tmp467, tmp355
 999              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1000              		.loc 1 608 72 view .LVU292
 1001 05c5 4189C5   		mov	r13d, eax	# tmp470, pattern_size
 1002              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1003              		.loc 1 608 81 view .LVU293
 1004 05c8 450FAFDF 		imul	r11d, r15d	# tmp467, i
 1005              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1006              		.loc 1 608 17 view .LVU294
 1007 05cc 4D01D7   		add	r15, r10	# tmp469, destination_start_word
 1008              	.LVL47:
 1009              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1010              		.loc 1 608 81 view .LVU295
 1011 05cf 4101CB   		add	r11d, ecx	# tmp468, shift
 1012              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1013              		.loc 1 608 99 view .LVU296
 1014 05d2 4183E33F 		and	r11d, 63	# _265,
 1015              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1016              		.loc 1 608 127 view .LVU297
 1017 05d6 C4C2A3F7 		shrx	rsi, r8, r11	# tmp472, pattern, _265
 1017      F0
 1018              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1019              		.loc 1 608 72 view .LVU298
 1020 05db 4529DD   		sub	r13d, r11d	# tmp470, _265
 1021              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1022              		.loc 1 608 55 view .LVU299
 1023 05de C44291F7 		shlx	r13, r8, r13	# tmp471, pattern, tmp470
 1023      E8
 1024              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1025              		.loc 1 608 116 view .LVU300
 1026 05e3 4C09EE   		or	rsi, r13	# tmp473, tmp471
 1027 05e6 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_271, tmp473
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1028              		.loc 1 607 40 is_stmt 1 view .LVU301
 1029 05ea 4D8D7E08 		lea	r15, 8[r14]	# i,
 1030              	.LVL48:
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1031              		.loc 1 607 25 view .LVU302
 1032              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
GAS LISTING /tmp/ccBvFgp2.s 			page 34


 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1033              		.loc 1 607 5 is_stmt 0 view .LVU303
 1034 05ee 4D39F9   		cmp	r9, r15	# loop_range, i
 1035 05f1 0F828100 		jb	.L10	#,
 1035      0000
 1036              		.loc 1 608 9 is_stmt 1 view .LVU304
 1037              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1038              		.loc 1 608 81 is_stmt 0 view .LVU305
 1039 05f7 4189D3   		mov	r11d, edx	# tmp474, tmp355
 1040              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1041              		.loc 1 608 72 view .LVU306
 1042 05fa 4189C5   		mov	r13d, eax	# tmp477, pattern_size
 1043              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1044              		.loc 1 608 81 view .LVU307
 1045 05fd 450FAFDF 		imul	r11d, r15d	# tmp474, i
 1046              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1047              		.loc 1 608 17 view .LVU308
 1048 0601 4D01D7   		add	r15, r10	# tmp476, destination_start_word
 1049              	.LVL49:
 1050              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1051              		.loc 1 608 81 view .LVU309
 1052 0604 4101CB   		add	r11d, ecx	# tmp475, shift
 1053              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1054              		.loc 1 608 99 view .LVU310
 1055 0607 4183E33F 		and	r11d, 63	# _280,
 1056              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1057              		.loc 1 608 127 view .LVU311
 1058 060b C4C2A3F7 		shrx	rsi, r8, r11	# tmp479, pattern, _280
 1058      F0
 1059              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1060              		.loc 1 608 72 view .LVU312
 1061 0610 4529DD   		sub	r13d, r11d	# tmp477, _280
 1062              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1063              		.loc 1 608 55 view .LVU313
 1064 0613 C44291F7 		shlx	r13, r8, r13	# tmp478, pattern, tmp477
 1064      E8
 1065              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1066              		.loc 1 608 116 view .LVU314
 1067 0618 4C09EE   		or	rsi, r13	# tmp480, tmp478
 1068 061b 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_286, tmp480
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1069              		.loc 1 607 40 is_stmt 1 view .LVU315
 1070 061f 4D8D7E09 		lea	r15, 9[r14]	# i,
 1071              	.LVL50:
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1072              		.loc 1 607 25 view .LVU316
 1073              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1074              		.loc 1 607 5 is_stmt 0 view .LVU317
 1075 0623 4D39F9   		cmp	r9, r15	# loop_range, i
 1076 0626 7250     		jb	.L10	#,
 1077              		.loc 1 608 9 is_stmt 1 view .LVU318
 1078              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1079              		.loc 1 608 81 is_stmt 0 view .LVU319
 1080 0628 4189D3   		mov	r11d, edx	# tmp481, tmp355
 1081              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1082              		.loc 1 608 72 view .LVU320
GAS LISTING /tmp/ccBvFgp2.s 			page 35


 1083 062b 4189C5   		mov	r13d, eax	# tmp484, pattern_size
 1084              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1085              		.loc 1 608 81 view .LVU321
 1086 062e 450FAFDF 		imul	r11d, r15d	# tmp481, i
 1087              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1088              		.loc 1 607 40 view .LVU322
 1089 0632 4983C60A 		add	r14, 10	# i,
 1090              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1091              		.loc 1 608 17 view .LVU323
 1092 0636 4D01D7   		add	r15, r10	# tmp483, destination_start_word
 1093              	.LVL51:
 1094              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1095              		.loc 1 608 81 view .LVU324
 1096 0639 4101CB   		add	r11d, ecx	# tmp482, shift
 1097              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1098              		.loc 1 608 99 view .LVU325
 1099 063c 4183E33F 		and	r11d, 63	# _295,
 1100              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1101              		.loc 1 608 127 view .LVU326
 1102 0640 C4C2A3F7 		shrx	rsi, r8, r11	# tmp486, pattern, _295
 1102      F0
 1103              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1104              		.loc 1 608 72 view .LVU327
 1105 0645 4529DD   		sub	r13d, r11d	# tmp484, _295
 1106              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1107              		.loc 1 608 55 view .LVU328
 1108 0648 C44291F7 		shlx	r13, r8, r13	# tmp485, pattern, tmp484
 1108      E8
 1109              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1110              		.loc 1 608 116 view .LVU329
 1111 064d 4C09EE   		or	rsi, r13	# tmp487, tmp485
 1112              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1113              		.loc 1 607 5 view .LVU330
 1114 0650 4D39F1   		cmp	r9, r14	# loop_range, i
 1115              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1116              		.loc 1 608 116 view .LVU331
 1117 0653 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_301, tmp487
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1118              		.loc 1 607 40 is_stmt 1 view .LVU332
 1119              	.LVL52:
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1120              		.loc 1 607 25 view .LVU333
 1121              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1122              		.loc 1 607 5 is_stmt 0 view .LVU334
 1123 0657 721F     		jb	.L10	#,
 1124              		.loc 1 608 9 is_stmt 1 view .LVU335
 1125              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1126              		.loc 1 608 81 is_stmt 0 view .LVU336
 1127 0659 410FAFD6 		imul	edx, r14d	# tmp488, i
 1128              	.LVL53:
 1129              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1130              		.loc 1 608 17 view .LVU337
 1131 065d 4D01D6   		add	r14, r10	# tmp490, destination_start_word
 1132              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
GAS LISTING /tmp/ccBvFgp2.s 			page 36


 1133              		.loc 1 608 81 view .LVU338
 1134 0660 01D1     		add	ecx, edx	# tmp489, tmp488
 1135              	.LVL54:
 1136              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1137              		.loc 1 608 99 view .LVU339
 1138 0662 83E13F   		and	ecx, 63	# _108,
 1139              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1140              		.loc 1 608 72 view .LVU340
 1141 0665 29C8     		sub	eax, ecx	# tmp491, _108
 1142              	.LVL55:
 1143              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1144              		.loc 1 608 55 view .LVU341
 1145 0667 C4C2F9F7 		shlx	rdx, r8, rax	# tmp492, pattern, tmp491
 1145      D0
 1146              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1147              		.loc 1 608 127 view .LVU342
 1148 066c C442F3F7 		shrx	r8, r8, rcx	# tmp493, pattern, _108
 1148      C0
 1149              	.LVL56:
 1150              	# sieve_extend.c:608:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1151              		.loc 1 608 116 view .LVU343
 1152 0671 4909D0   		or	r8, rdx	# tmp494, tmp492
 1153 0674 4E8904F7 		mov	QWORD PTR [rdi+r14*8], r8	# *_42, tmp494
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1154              		.loc 1 607 40 is_stmt 1 view .LVU344
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1155              		.loc 1 607 25 view .LVU345
 1156              	.L10:
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1157              		.loc 1 607 25 is_stmt 0 view .LVU346
 1158              	.LBE305:
 609:sieve_extend.c ****     }
 610:sieve_extend.c ****     bitarray[destination_stop_word] &= chopmask(destination_stop);
 1159              		.loc 1 610 5 is_stmt 1 view .LVU347
 1160              	# sieve_extend.c:610:     bitarray[destination_stop_word] &= chopmask(destination_stop);
 1161              		.loc 1 610 37 is_stmt 0 view .LVU348
 1162 0678 4A211CE7 		and	QWORD PTR [rdi+r12*8], rbx	# *_57, _124
 1163              	# sieve_extend.c:611: }
 611:sieve_extend.c **** }
 1164              		.loc 1 611 1 view .LVU349
 1165 067c 488D65D8 		lea	rsp, -40[rbp]	#,
 1166 0680 5B       		pop	rbx	#
 1167 0681 415C     		pop	r12	#
 1168              	.LVL57:
 1169              		.loc 1 611 1 view .LVU350
 1170 0683 415D     		pop	r13	#
 1171 0685 415E     		pop	r14	#
 1172 0687 415F     		pop	r15	#
 1173 0689 5D       		pop	rbp	#
 1174              		.cfi_remember_state
 1175              		.cfi_def_cfa 7, 8
 1176 068a C3       		ret	
 1177              	.LVL58:
 1178 068b 0F1F4400 		.p2align 4,,7
 1178      00
 1179              		.p2align 3
 1180              	.L49:
GAS LISTING /tmp/ccBvFgp2.s 			page 37


 1181              		.cfi_restore_state
 592:sieve_extend.c ****         return;
 1182              		.loc 1 592 9 is_stmt 1 view .LVU351
 1183              	# sieve_extend.c:592:         bitarray[destination_start_word] |= (pattern << bitindex(destination_
 592:sieve_extend.c ****         return;
 1184              		.loc 1 592 86 is_stmt 0 view .LVU352
 1185 0690 4821D8   		and	rax, rbx	# tmp351, _124
 1186              	# sieve_extend.c:592:         bitarray[destination_start_word] |= (pattern << bitindex(destination_
 592:sieve_extend.c ****         return;
 1187              		.loc 1 592 42 view .LVU353
 1188 0693 4C09F8   		or	rax, r15	# tmp352, pretmp_118
 1189 0696 498906   		mov	QWORD PTR [r14], rax	# *_117, tmp352
 593:sieve_extend.c ****     }
 1190              		.loc 1 593 9 is_stmt 1 view .LVU354
 1191              	# sieve_extend.c:611: }
 1192              		.loc 1 611 1 is_stmt 0 view .LVU355
 1193 0699 488D65D8 		lea	rsp, -40[rbp]	#,
 1194 069d 5B       		pop	rbx	#
 1195 069e 415C     		pop	r12	#
 1196              	.LVL59:
 1197              		.loc 1 611 1 view .LVU356
 1198 06a0 415D     		pop	r13	#
 1199 06a2 415E     		pop	r14	#
 1200 06a4 415F     		pop	r15	#
 1201 06a6 5D       		pop	rbp	#
 1202              		.cfi_remember_state
 1203              		.cfi_def_cfa 7, 8
 1204 06a7 C3       		ret	
 1205              	.LVL60:
 1206              	.L50:
 1207              		.cfi_restore_state
 1208              		.loc 1 611 1 view .LVU357
 1209 06a8 C5F877   		vzeroupper
 1210 06ab EBCB     		jmp	.L10	#
 1211              	.LVL61:
 1212              	.L12:
 1213              	.LBB306:
 1214              	# sieve_extend.c:607:     for (counter_t i=0; i<=loop_range; ++i ) {
 607:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1215              		.loc 1 607 20 view .LVU358
 1216 06ad 4531F6   		xor	r14d, r14d	# i
 1217 06b0 E979FBFF 		jmp	.L7	#
 1217      FF
 1218              	.L11:
 1219 06b5 4531F6   		xor	r14d, r14d	# tmp.138
 1220              		.p2align 4,,2
 1221 06b8 E994FDFF 		jmp	.L6	#
 1221      FF
 1222              	.LBE306:
 1223              		.cfi_endproc
 1224              	.LFE65:
 1226 06bd 0F1F00   		.p2align 4
 1228              	extendSieve_shiftright_ivdep:
 1229              	.LVL62:
 1230              	.LFB70:
 612:sieve_extend.c **** 
 613:sieve_extend.c **** static void extendSieve_aligned(bitword_t* bitarray, const counter_t source_start, const counter_t 
GAS LISTING /tmp/ccBvFgp2.s 			page 38


 614:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using aligned (%ju copies)\n"
 615:sieve_extend.c **** 
 616:sieve_extend.c ****     const counter_t destination_stop_word = wordindex(destination_stop);
 617:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 618:sieve_extend.c ****     counter_t source_word = wordindex(source_start);
 619:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
 620:sieve_extend.c ****     
 621:sieve_extend.c ****     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 622:sieve_extend.c **** 
 623:sieve_extend.c ****     while (copy_word + size <= destination_stop_word) {
 624:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 625:sieve_extend.c ****         copy_word += size;
 626:sieve_extend.c ****     }
 627:sieve_extend.c **** 
 628:sieve_extend.c ****    while (copy_word < destination_stop_word) {
 629:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 630:sieve_extend.c ****         source_word++;
 631:sieve_extend.c ****         copy_word++;
 632:sieve_extend.c ****     }
 633:sieve_extend.c **** 
 634:sieve_extend.c **** }
 635:sieve_extend.c **** 
 636:sieve_extend.c **** //https://stackoverflow.com/questions/1898153/how-to-determine-if-memory-is-aligned
 637:sieve_extend.c **** #define is_unaligned(POINTER, BYTE_COUNT) (((uintptr_t)(const void *)(POINTER)) % (BYTE_COUNT))
 638:sieve_extend.c **** 
 639:sieve_extend.c **** void shiftvec(uint64_t* __restrict dst, const uint64_t* __restrict src, int size, int shift)
 640:sieve_extend.c **** {
 641:sieve_extend.c ****     int i = 0;
 642:sieve_extend.c ****     // MSVC: use steps of 2 for SSE, 4 for AVX2, 8 for AVX512
 643:sieve_extend.c ****     for (; i+4 < size; i+=4,dst+=4,src+=4)
 644:sieve_extend.c ****     {
 645:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 646:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 647:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 648:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 649:sieve_extend.c ****     }
 650:sieve_extend.c ****     for (; i < size; ++i,++src,++dst)
 651:sieve_extend.c ****     {
 652:sieve_extend.c ****         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 653:sieve_extend.c ****     }    
 654:sieve_extend.c **** }
 655:sieve_extend.c **** 
 656:sieve_extend.c **** #define forward_distance 3
 657:sieve_extend.c **** static void extendSieve_shiftright_ptr(bitword_t* bitarray, const counter_t source_start, const cou
 658:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 659:sieve_extend.c ****    
 660:sieve_extend.c ****     const counter_t destination_stop_word = wordindex(destination_stop);
 661:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 662:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_calc(source_start);
 663:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 664:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 665:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 666:sieve_extend.c **** 
 667:sieve_extend.c ****     if (copy_word >= destination_stop_word) { 
 668:sieve_extend.c ****         bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start in to not lose da
 669:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 670:sieve_extend.c ****                                 & keepmask(copy_start) & chopmask(destination_stop);
GAS LISTING /tmp/ccBvFgp2.s 			page 39


 671:sieve_extend.c ****         return; // rapid exit for one word variant
 672:sieve_extend.c ****     }
 673:sieve_extend.c **** 
 674:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start in to not lose data
 675:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 676:sieve_extend.c ****                                 & keepmask(copy_start);
 677:sieve_extend.c **** 
 678:sieve_extend.c ****     copy_word++;
 679:sieve_extend.c **** 
 680:sieve_extend.c ****     debug printf("..copy distance %ju\n",(uintmax_t) copy_word - (uintmax_t) source_word);
 681:sieve_extend.c ****     if (((copy_word - source_word) > forward_distance)) {
 682:sieve_extend.c ****         // shiftvec(&bitarray[copy_word], &bitarray[source_word],size_word,shift );
 683:sieve_extend.c ****         
 684:sieve_extend.c ****         bitword_t* __restrict copy_ptr   = &bitarray[copy_word];
 685:sieve_extend.c ****         bitword_t* __restrict source_ptr = &bitarray[source_word];
 686:sieve_extend.c ****         // bitword_t* copy_ptr   = &bitarray[copy_word];
 687:sieve_extend.c ****         // bitword_t* source_ptr = &bitarray[source_word];
 688:sieve_extend.c ****         bitword_t* __restrict dest_ptr   = &bitarray[destination_stop_word];
 689:sieve_extend.c ****         long size_word_ptr   = dest_ptr - copy_ptr;
 690:sieve_extend.c **** 
 691:sieve_extend.c ****         #pragma ivdep 
 692:sieve_extend.c ****         for (long i = 0; (i+forward_distance) < size_word_ptr; i+=forward_distance, copy_ptr+=forwa
 693:sieve_extend.c ****             #pragma ivdep
 694:sieve_extend.c ****             for (counter_t j = 0; j < forward_distance; ++j) 
 695:sieve_extend.c ****                 *(copy_ptr+j)  = (*(source_ptr+j  ) >> shift_flipped); 
 696:sieve_extend.c ****             #pragma ivdep
 697:sieve_extend.c ****             for (counter_t j = 0; j < forward_distance; ++j) 
 698:sieve_extend.c ****                 *(copy_ptr+j) |= (*(source_ptr+j+1) << shift);
 699:sieve_extend.c ****         }
 700:sieve_extend.c **** 
 701:sieve_extend.c ****         size_word_ptr = dest_ptr - copy_ptr;
 702:sieve_extend.c ****         #pragma ivdep 
 703:sieve_extend.c ****         for (counter_t i=0; i <= size_word_ptr; i++)
 704:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 705:sieve_extend.c **** 
 706:sieve_extend.c ****         // #pragma GCC ivdep
 707:sieve_extend.c ****         // for (; i <= size_word; i++) 
 708:sieve_extend.c ****         //     *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 709:sieve_extend.c ****     }
 710:sieve_extend.c ****     else {
 711:sieve_extend.c ****         register counter_t i = 0;
 712:sieve_extend.c ****         bitword_t* copy_ptr   = &bitarray[copy_word];
 713:sieve_extend.c ****         bitword_t* source_ptr = &bitarray[source_word];
 714:sieve_extend.c ****         bitword_t* dest_ptr   = &bitarray[destination_stop_word];
 715:sieve_extend.c ****         long size_word_ptr   = dest_ptr - copy_ptr;
 716:sieve_extend.c ****         for (; i <= size_word_ptr; i++)
 717:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 718:sieve_extend.c ****     }
 719:sieve_extend.c **** 
 720:sieve_extend.c ****     // for (; i <= size_word; i++) 
 721:sieve_extend.c ****     //     *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 722:sieve_extend.c **** 
 723:sieve_extend.c ****     // for (; i <= size_word; i++) 
 724:sieve_extend.c ****     //     bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_wo
 725:sieve_extend.c **** 
 726:sieve_extend.c ****     // for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
 727:sieve_extend.c ****     //     bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
GAS LISTING /tmp/ccBvFgp2.s 			page 40


 728:sieve_extend.c **** }
 729:sieve_extend.c **** 
 730:sieve_extend.c **** static inline counter_t extendSieve_shiftleft_unrolled(bitword_t* bitarray, const counter_t aligned
 731:sieve_extend.c ****     const counter_t fast_loop_stop_word = (aligned_copy_word>2) ? (aligned_copy_word - 2) : 0; // s
 732:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 733:sieve_extend.c ****     counter_t distance = 0;
 734:sieve_extend.c ****     while (copy_word < fast_loop_stop_word) {
 735:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 736:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 737:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 738:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 739:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 740:sieve_extend.c ****         copy_word += 2;
 741:sieve_extend.c ****         source_word += 2;
 742:sieve_extend.c ****         distance += 2;
 743:sieve_extend.c ****     }
 744:sieve_extend.c ****     return distance;
 745:sieve_extend.c **** }
 746:sieve_extend.c **** 
 747:sieve_extend.c **** //static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source_start, const counte
 748:sieve_extend.c **** //    const bitword_t* destination_stop_ptr = &bitarray[wordindex(destination_stop)];
 749:sieve_extend.c **** //    const counter_t copy_start = source_start + size;
 750:sieve_extend.c **** //    register const bitshift_t shift = bitindex_calc(source_start) - bitindex_calc(copy_start);
 751:sieve_extend.c **** //    register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 752:sieve_extend.c **** //    register bitword_t* source_ptr = &bitarray[wordindex(source_start)];
 753:sieve_extend.c **** //    register bitword_t* copy_ptr = &bitarray[wordindex(copy_start)];
 754:sieve_extend.c **** //    const bitword_t* aligned_copy_ptr = min(source_ptr + size, destination_stop_ptr); // after <<
 755:sieve_extend.c **** //
 756:sieve_extend.c **** //    *copy_ptr |= ((*source_ptr >> shift) | (*(source_ptr+1) << shift_flipped)) & ~chopmask2(copy_
 757:sieve_extend.c **** //    copy_ptr++;
 758:sieve_extend.c **** //    source_ptr++;
 759:sieve_extend.c **** //
 760:sieve_extend.c **** //    while (copy_ptr+3 <= aligned_copy_ptr) {
 761:sieve_extend.c **** //        bitword_t source0 = *source_ptr >> shift;
 762:sieve_extend.c **** //        bitword_t source1 = *(source_ptr+1);
 763:sieve_extend.c **** //        *copy_ptr = (source0) | (source1 << shift_flipped);
 764:sieve_extend.c **** //        bitword_t source2 = *(source_ptr+2);
 765:sieve_extend.c **** //        *(copy_ptr+1) = (source1 >> shift) | (source2 << shift_flipped);
 766:sieve_extend.c **** //        bitword_t source3 = *(source_ptr+3);
 767:sieve_extend.c **** //        *(copy_ptr+2) = (source2 >> shift) | (source3 << shift_flipped);
 768:sieve_extend.c **** //
 769:sieve_extend.c **** //        copy_ptr+=3;
 770:sieve_extend.c **** //        source_ptr+=3;
 771:sieve_extend.c **** //    }
 772:sieve_extend.c **** //
 773:sieve_extend.c **** //    while (copy_ptr <= aligned_copy_ptr) {
 774:sieve_extend.c **** //        register bitword_t source0 = *source_ptr >> shift;
 775:sieve_extend.c **** //        source_ptr++;
 776:sieve_extend.c **** //        register bitword_t source1 = *source_ptr << shift_flipped;
 777:sieve_extend.c **** //        *copy_ptr = source0 | source1;
 778:sieve_extend.c **** //        copy_ptr++;
 779:sieve_extend.c **** //    }
 780:sieve_extend.c **** //
 781:sieve_extend.c **** //    if (copy_ptr >= destination_stop_ptr) return;
 782:sieve_extend.c **** //
 783:sieve_extend.c **** //    source_ptr = copy_ptr - size; // recalibrate
 784:sieve_extend.c **** //    const size_t memsize = (size_t)size*sizeof(bitword_t);
GAS LISTING /tmp/ccBvFgp2.s 			page 41


 785:sieve_extend.c **** //     while (copy_ptr + size <= destination_stop_ptr) {
 786:sieve_extend.c **** //         memcpy(copy_ptr, source_ptr, memsize );
 787:sieve_extend.c **** //         copy_ptr += size;
 788:sieve_extend.c **** //     }
 789:sieve_extend.c **** //
 790:sieve_extend.c **** //    while (copy_ptr <= destination_stop_ptr) {
 791:sieve_extend.c **** //        // *copy_ptr++ = *source_ptr++;
 792:sieve_extend.c **** //        *copy_ptr = *source_ptr;
 793:sieve_extend.c **** //        copy_ptr++;
 794:sieve_extend.c **** //        source_ptr++;
 795:sieve_extend.c **** //    }
 796:sieve_extend.c **** //
 797:sieve_extend.c **** //}
 798:sieve_extend.c **** 
 799:sieve_extend.c **** 
 800:sieve_extend.c **** static void extendSieve_shiftright_ivdep(bitword_t* bitarray, const counter_t source_start, const c
 1231              		.loc 1 800 149 is_stmt 1 view -0
 1232              		.cfi_startproc
 801:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 1233              		.loc 1 801 5 view .LVU360
 802:sieve_extend.c ****    
 803:sieve_extend.c ****     const counter_t destination_stop_word = wordindex(destination_stop);
 1234              		.loc 1 803 5 view .LVU361
 1235              	# sieve_extend.c:800: static void extendSieve_shiftright_ivdep(bitword_t* bitarray, const counter_t
 800:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 1236              		.loc 1 800 149 is_stmt 0 view .LVU362
 1237 06c0 55       		push	rbp	#
 1238              		.cfi_def_cfa_offset 16
 1239              		.cfi_offset 6, -16
 1240              	# sieve_extend.c:804:     const counter_t copy_start = source_start + size;
 804:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 1241              		.loc 1 804 21 view .LVU363
 1242 06c1 4C8D0416 		lea	r8, [rsi+rdx]	# copy_start,
 1243              	# sieve_extend.c:803:     const counter_t destination_stop_word = wordindex(destination_stop);
 803:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 1244              		.loc 1 803 21 view .LVU364
 1245 06c5 4889C8   		mov	rax, rcx	# destination_stop_word, destination_stop
 1246              	# sieve_extend.c:800: static void extendSieve_shiftright_ivdep(bitword_t* bitarray, const counter_t
 800:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 1247              		.loc 1 800 149 view .LVU365
 1248 06c8 4889E5   		mov	rbp, rsp	#,
 1249              		.cfi_def_cfa_register 6
 1250              	# sieve_extend.c:805:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
 805:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_calc(source_start);
 1251              		.loc 1 805 39 view .LVU366
 1252 06cb 4D89C2   		mov	r10, r8	# _4, copy_start
 1253              	# sieve_extend.c:800: static void extendSieve_shiftright_ivdep(bitword_t* bitarray, const counter_t
 800:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 1254              		.loc 1 800 149 view .LVU367
 1255 06ce 4157     		push	r15	#
 1256              	# sieve_extend.c:808:     register counter_t copy_word = wordindex(copy_start);
 806:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 807:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 808:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 1257              		.loc 1 808 24 view .LVU368
 1258 06d0 49C1E806 		shr	r8, 6	# copy_word,
 1259              	# sieve_extend.c:805:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
GAS LISTING /tmp/ccBvFgp2.s 			page 42


 805:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 1260              		.loc 1 805 39 view .LVU369
 1261 06d4 4183E23F 		and	r10d, 63	# _4,
 1262              	# sieve_extend.c:800: static void extendSieve_shiftright_ivdep(bitword_t* bitarray, const counter_t
 800:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 1263              		.loc 1 800 149 view .LVU370
 1264 06d8 4156     		push	r14	#
 1265              	# sieve_extend.c:803:     const counter_t destination_stop_word = wordindex(destination_stop);
 803:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 1266              		.loc 1 803 21 view .LVU371
 1267 06da 48C1E806 		shr	rax, 6	# destination_stop_word,
 1268              		.cfi_offset 15, -24
 1269              		.cfi_offset 14, -32
 1270              	# sieve_extend.c:805:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
 805:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 1271              		.loc 1 805 31 view .LVU372
 1272 06de 4D89D6   		mov	r14, r10	# shift, _4
 1273              	# sieve_extend.c:800: static void extendSieve_shiftright_ivdep(bitword_t* bitarray, const counter_t
 800:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 1274              		.loc 1 800 149 view .LVU373
 1275 06e1 4155     		push	r13	#
 1276 06e3 F7D1     		not	ecx	# tmp401
 1277              	.LVL63:
 800:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 1278              		.loc 1 800 149 view .LVU374
 1279 06e5 4154     		push	r12	#
 1280              		.cfi_offset 13, -40
 1281              		.cfi_offset 12, -48
 1282 06e7 4E8D24C5 		lea	r12, 0[0+r8*8]	# _176,
 1282      00000000 
 1283 06ef 53       		push	rbx	#
 1284 06f0 4E8D2C27 		lea	r13, [rdi+r12]	# _177,
 1285 06f4 4D8B7D00 		mov	r15, QWORD PTR 0[r13]	# pretmp_178, *_177
 1286 06f8 4883E4E0 		and	rsp, -32	#,
 1287              		.cfi_offset 3, -56
 1288              	.LVL64:
 804:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_calc(source_start);
 1289              		.loc 1 804 5 is_stmt 1 view .LVU375
 805:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 1290              		.loc 1 805 5 view .LVU376
 1291              	# sieve_extend.c:803:     const counter_t destination_stop_word = wordindex(destination_stop);
 803:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 1292              		.loc 1 803 21 is_stmt 0 view .LVU377
 1293 06fc 48894424 		mov	QWORD PTR -8[rsp], rax	# %sfp, destination_stop_word
 1293      F8
 1294              	.LVL65:
 1295              	# sieve_extend.c:805:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
 805:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 1296              		.loc 1 805 67 view .LVU378
 1297 0701 4889F0   		mov	rax, rsi	# _5, source_start
 1298              	# sieve_extend.c:807:     register counter_t source_word = wordindex(source_start);
 807:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 1299              		.loc 1 807 24 view .LVU379
 1300 0704 48C1EE06 		shr	rsi, 6	# source_word,
 1301              	.LVL66:
 1302              	# sieve_extend.c:805:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
 805:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
GAS LISTING /tmp/ccBvFgp2.s 			page 43


 1303              		.loc 1 805 67 view .LVU380
 1304 0708 83E03F   		and	eax, 63	# _5,
 1305              	.LVL67:
 806:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 1306              		.loc 1 806 5 is_stmt 1 view .LVU381
 807:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 1307              		.loc 1 807 5 view .LVU382
 1308              		.loc 1 808 5 view .LVU383
 809:sieve_extend.c **** 
 810:sieve_extend.c ****     if (copy_word >= destination_stop_word) { 
 1309              		.loc 1 810 5 view .LVU384
 1310              	# sieve_extend.c:805:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
 805:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 1311              		.loc 1 805 31 is_stmt 0 view .LVU385
 1312 070b 4929C6   		sub	r14, rax	# shift, _5
 1313              	.LVL68:
 805:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 1314              		.loc 1 805 31 view .LVU386
 1315 070e 488D1CF5 		lea	rbx, 0[0+rsi*8]	# _179,
 1315      00000000 
 1316              	# sieve_extend.c:806:     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 806:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 1317              		.loc 1 806 31 view .LVU387
 1318 0716 4883C040 		add	rax, 64	# tmp394,
 1319              	.LVL69:
 806:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 1320              		.loc 1 806 31 view .LVU388
 1321 071a 4C8D1C1F 		lea	r11, [rdi+rbx]	# _180,
 1322 071e 4C897C24 		mov	QWORD PTR -24[rsp], r15	# %sfp, pretmp_178
 1322      E8
 1323 0723 4C29D0   		sub	rax, r10	# shift_flipped, _4
 1324              	.LVL70:
 806:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 1325              		.loc 1 806 31 view .LVU389
 1326 0726 C44289F7 		shlx	r9, QWORD PTR [r11], r14	# tmp396, *_180, shift
 1326      0B
 1327 072b C442FBF7 		shrx	r15, r15, rax	# tmp398, pretmp_178, shift_flipped
 1327      FF
 1328 0730 44897424 		mov	DWORD PTR -12[rsp], r14d	# %sfp, shift
 1328      F4
 1329 0735 4D09F9   		or	r9, r15	# _186, tmp398
 1330              	# sieve_extend.c:810:     if (copy_word >= destination_stop_word) { 
 1331              		.loc 1 810 8 view .LVU390
 1332 0738 4C394424 		cmp	QWORD PTR -8[rsp], r8	# %sfp, copy_word
 1332      F8
 1333 073d 49C7C7FF 		mov	r15, -1	# tmp400,
 1333      FFFFFF
 1334 0744 894424F0 		mov	DWORD PTR -16[rsp], eax	# %sfp, shift_flipped
 1335 0748 C442A9F7 		shlx	r10, r15, r10	# _189, tmp400, _4
 1335      D7
 1336              	.LVL71:
 1337              		.loc 1 810 8 view .LVU391
 1338 074d C442F3F7 		shrx	r15, r15, rcx	# _193, tmp400, tmp401
 1338      FF
 1339 0752 0F86F80A 		jbe	.L260	#,
 1339      0000
 811:sieve_extend.c ****         bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start in to not lose da
GAS LISTING /tmp/ccBvFgp2.s 			page 44


 812:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 813:sieve_extend.c ****                                 & keepmask(copy_start) & chopmask(destination_stop);
 814:sieve_extend.c ****         return; // rapid exit for one word variant
 815:sieve_extend.c ****     }
 816:sieve_extend.c **** 
 817:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start in to not lose data
 1340              		.loc 1 817 5 is_stmt 1 view .LVU392
 1341              	# sieve_extend.c:819:                                 & keepmask(copy_start);
 818:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 819:sieve_extend.c ****                                 & keepmask(copy_start);
 1342              		.loc 1 819 33 is_stmt 0 view .LVU393
 1343 0758 4D21D1   		and	r9, r10	# tmp407, _189
 1344              	# sieve_extend.c:821:     copy_word++;
 820:sieve_extend.c **** 
 821:sieve_extend.c ****     copy_word++;
 1345              		.loc 1 821 14 view .LVU394
 1346 075b 498D4801 		lea	rcx, 1[r8]	# copy_word,
 1347              	# sieve_extend.c:817:     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start
 817:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 1348              		.loc 1 817 25 view .LVU395
 1349 075f 4C0B4C24 		or	r9, QWORD PTR -24[rsp]	# tmp408, %sfp
 1349      E8
 1350              	# sieve_extend.c:825:     if (size >= WORD_SIZE_counter) {
 822:sieve_extend.c **** 
 823:sieve_extend.c ****     debug { printf("...start - %ju - %ju - end\n",(uintmax_t)wordindex(copy_start), (uintmax_t)dest
 824:sieve_extend.c **** 
 825:sieve_extend.c ****     if (size >= WORD_SIZE_counter) {
 1351              		.loc 1 825 8 view .LVU396
 1352 0764 4883FA3F 		cmp	rdx, 63	# size,
 1353              	# sieve_extend.c:817:     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start
 817:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 1354              		.loc 1 817 25 view .LVU397
 1355 0768 4D894D00 		mov	QWORD PTR 0[r13], r9	# *_177, tmp408
 821:sieve_extend.c **** 
 1356              		.loc 1 821 5 is_stmt 1 view .LVU398
 1357              	.LVL72:
 823:sieve_extend.c **** 
 1358              		.loc 1 823 5 view .LVU399
 1359              		.loc 1 825 5 view .LVU400
 1360              	# sieve_extend.c:825:     if (size >= WORD_SIZE_counter) {
 1361              		.loc 1 825 8 is_stmt 0 view .LVU401
 1362 076c 0F876604 		ja	.L261	#,
 1362      0000
 826:sieve_extend.c ****         register const counter_t loop_distance = destination_stop_word - copy_word;
 827:sieve_extend.c **** 
 828:sieve_extend.c ****         #pragma unroll
 829:sieve_extend.c ****         #pragma ivdep
 830:sieve_extend.c ****         for (register counter_t i = 0; i <loop_distance; i++) {
 831:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 832:sieve_extend.c ****         }
 833:sieve_extend.c ****         source_word += loop_distance; copy_word+= loop_distance;
 834:sieve_extend.c ****     }
 835:sieve_extend.c **** 
 836:sieve_extend.c ****     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 1363              		.loc 1 836 12 is_stmt 1 discriminator 1 view .LVU402
 1364              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 1365              		.loc 1 836 5 is_stmt 0 discriminator 1 view .LVU403
GAS LISTING /tmp/ccBvFgp2.s 			page 45


 1366 0772 4C8B5C24 		mov	r11, QWORD PTR -8[rsp]	# destination_stop_word, %sfp
 1366      F8
 1367 0777 4939CB   		cmp	r11, rcx	# destination_stop_word, copy_word
 1368 077a 0F824104 		jb	.L66	#,
 1368      0000
 1369 0780 4D89DC   		mov	r12, r11	# _173, destination_stop_word
 1370 0783 498D5301 		lea	rdx, 1[r11]	# _198,
 1371              	.LVL73:
 1372              		.loc 1 836 5 discriminator 1 view .LVU404
 1373 0787 4929CC   		sub	r12, rcx	# _173, copy_word
 1374 078a 4C8D0CF5 		lea	r9, 40[0+rsi*8]	# _168,
 1374      28000000 
 1375 0792 4C896424 		mov	QWORD PTR -32[rsp], r12	# %sfp, _173
 1375      E0
 1376 0797 4C8D24CD 		lea	r12, 0[0+rcx*8]	# _166,
 1376      00000000 
 1377 079f 48895424 		mov	QWORD PTR -24[rsp], rdx	# %sfp, _198
 1377      E8
 1378 07a4 4D8D5424 		lea	r10, 32[r12]	# tmp497,
 1378      20
 1379 07a9 488D14F5 		lea	rdx, 0[0+rsi*8]	# _260,
 1379      00000000 
 1380 07b1 4D8D6802 		lea	r13, 2[r8]	# _175,
 1381 07b5 4C39D2   		cmp	rdx, r10	# _260, tmp497
 1382 07b8 410F9DC2 		setge	r10b	#, tmp499
 1383 07bc 4D39CC   		cmp	r12, r9	# _166, _168
 1384 07bf 410F9DC1 		setge	r9b	#, tmp501
 1385 07c3 4508CA   		or	r10b, r9b	# tmp499, tmp501
 1386 07c6 0F843808 		je	.L56	#,
 1386      0000
 1387 07cc 48837C24 		cmp	QWORD PTR -32[rsp], 5	# %sfp,
 1387      E005
 1388 07d2 410F97C2 		seta	r10b	#, tmp504
 1389 07d6 4C3B6C24 		cmp	r13, QWORD PTR -24[rsp]	# _175, %sfp
 1389      E8
 1390 07db 410F96C1 		setbe	r9b	#, tmp506
 1391 07df 4584CA   		test	r10b, r9b	# tmp504, tmp506
 1392 07e2 0F841C08 		je	.L56	#,
 1392      0000
 1393 07e8 4D29C3   		sub	r11, r8	# tmp508, copy_word
 1394 07eb 4C3B6C24 		cmp	r13, QWORD PTR -24[rsp]	# _175, %sfp
 1394      E8
 1395 07f0 41B90100 		mov	r9d, 1	# tmp509,
 1395      0000
 1396 07f6 4D0F46CB 		cmovbe	r9, r11	# tmp508,, niters.164
 1397 07fa 4801FA   		add	rdx, rdi	# vectp.165, bitarray
 1398 07fd 48C1EA03 		shr	rdx, 3	# tmp511,
 1399 0801 48F7DA   		neg	rdx	# tmp512
 1400 0804 83E203   		and	edx, 3	# prolog_loop_niters.166,
 1401 0807 0F847B0A 		je	.L77	#,
 1401      0000
 837:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1402              		.loc 1 837 9 is_stmt 1 view .LVU405
 1403              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1404              		.loc 1 837 99 is_stmt 0 view .LVU406
 1405 080d 488B5C1F 		mov	rbx, QWORD PTR 8[rdi+rbx]	# *_354, *_354
 1405      08
GAS LISTING /tmp/ccBvFgp2.s 			page 46


 1406              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1407              		.loc 1 837 83 view .LVU407
 1408 0812 4C8D5601 		lea	r10, 1[rsi]	# tmp566,
 1409              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1410              		.loc 1 837 99 view .LVU408
 1411 0816 C46289F7 		shlx	r11, rbx, r14	# tmp513, *_354, shift
 1411      DB
 1412              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1413              		.loc 1 837 54 view .LVU409
 1414 081b C4E2FBF7 		shrx	rbx, QWORD PTR [rdi+rsi*8], rax	# tmp515, *_349, shift_flipped
 1414      1CF7
 1415              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1416              		.loc 1 837 83 view .LVU410
 1417 0821 4C895424 		mov	QWORD PTR -40[rsp], r10	# %sfp, tmp566
 1417      D8
 1418              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1419              		.loc 1 837 72 view .LVU411
 1420 0826 4909DB   		or	r11, rbx	# tmp517, tmp515
 1421 0829 4E891C27 		mov	QWORD PTR [rdi+r12], r11	# *_358, tmp517
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1422              		.loc 1 836 48 is_stmt 1 view .LVU412
 1423              	.LVL74:
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1424              		.loc 1 836 12 view .LVU413
 1425 082d 4883FA01 		cmp	rdx, 1	# prolog_loop_niters.166,
 1426              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1427              		.loc 1 837 29 is_stmt 0 view .LVU414
 1428 0831 4D89EC   		mov	r12, r13	# copy_word, _175
 1429 0834 745E     		je	.L67	#,
 1430              		.loc 1 837 9 is_stmt 1 view .LVU415
 1431              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1432              		.loc 1 837 40 is_stmt 0 view .LVU416
 1433 0836 4E8D24D5 		lea	r12, 0[0+r10*8]	# _367,
 1433      00000000 
 1434              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1435              		.loc 1 837 83 view .LVU417
 1436 083e 4C8D5E02 		lea	r11, 2[rsi]	# source_word,
 1437              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1438              		.loc 1 837 54 view .LVU418
 1439 0842 4A8B1C27 		mov	rbx, QWORD PTR [rdi+r12]	# *_368, *_368
 1440              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1441              		.loc 1 837 83 view .LVU419
 1442 0846 4C895C24 		mov	QWORD PTR -40[rsp], r11	# %sfp, source_word
 1442      D8
 1443              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1444              		.loc 1 837 99 view .LVU420
 1445 084b C42289F7 		shlx	r11, QWORD PTR 8[rdi+r12], r14	# tmp518, *_373, shift
 1445      5C2708
 1446              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1447              		.loc 1 837 54 view .LVU421
 1448 0852 C462FBF7 		shrx	r12, rbx, rax	# tmp520, *_368, shift_flipped
 1448      E3
 1449              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1450              		.loc 1 837 72 view .LVU422
 1451 0857 4D09E3   		or	r11, r12	# tmp522, tmp520
 1452 085a 4883FA03 		cmp	rdx, 3	# prolog_loop_niters.166,
 1453              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
GAS LISTING /tmp/ccBvFgp2.s 			page 47


 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1454              		.loc 1 836 57 view .LVU423
 1455 085e 4D8D6003 		lea	r12, 3[r8]	# copy_word,
 1456              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1457              		.loc 1 837 72 view .LVU424
 1458 0862 4E891CEF 		mov	QWORD PTR [rdi+r13*8], r11	# *_377, tmp522
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1459              		.loc 1 836 48 is_stmt 1 view .LVU425
 1460              	.LVL75:
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1461              		.loc 1 836 12 view .LVU426
 1462 0866 752C     		jne	.L67	#,
 1463              		.loc 1 837 9 view .LVU427
 1464              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1465              		.loc 1 837 40 is_stmt 0 view .LVU428
 1466 0868 488D5E02 		lea	rbx, 2[rsi]	# source_word,
 1467              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1468              		.loc 1 837 83 view .LVU429
 1469 086c 4C8D5E03 		lea	r11, 3[rsi]	# source_word,
 1470 0870 4C895C24 		mov	QWORD PTR -40[rsp], r11	# %sfp, source_word
 1470      D8
 1471              	.LVL76:
 1472              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1473              		.loc 1 837 40 view .LVU430
 1474 0875 48C1E303 		sal	rbx, 3	# source_word,
 1475              	.LVL77:
 1476              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1477              		.loc 1 837 99 view .LVU431
 1478 0879 C46289F7 		shlx	r11, QWORD PTR 8[rdi+rbx], r14	# tmp523, *_111, shift
 1478      5C1F08
 1479              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1480              		.loc 1 837 54 view .LVU432
 1481 0880 488B1C1F 		mov	rbx, QWORD PTR [rdi+rbx]	# *_121, *_121
 1482 0884 C4E2FBF7 		shrx	rbx, rbx, rax	# tmp525, *_121, shift_flipped
 1482      DB
 1483              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1484              		.loc 1 837 72 view .LVU433
 1485 0889 4909DB   		or	r11, rbx	# tmp527, tmp525
 1486 088c 4E891CE7 		mov	QWORD PTR [rdi+r12*8], r11	# *_103, tmp527
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1487              		.loc 1 836 48 is_stmt 1 view .LVU434
 1488              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1489              		.loc 1 836 57 is_stmt 0 view .LVU435
 1490 0890 4D8D6004 		lea	r12, 4[r8]	# copy_word,
 1491              	.LVL78:
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1492              		.loc 1 836 12 is_stmt 1 view .LVU436
 1493              	.L67:
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1494              		.loc 1 836 12 is_stmt 0 view .LVU437
 1495 0894 4901D2   		add	r10, rdx	# tmp531, prolog_loop_niters.166
 1496 0897 4929D1   		sub	r9, rdx	# niters.167, prolog_loop_niters.166
 1497 089a 4E8D04D7 		lea	r8, [rdi+r10*8]	# vectp.177,
 1498 089e 4D89CA   		mov	r10, r9	# bnd.168, niters.167
 1499 08a1 49C1EA02 		shr	r10, 2	# bnd.168,
 1500 08a5 4801D6   		add	rsi, rdx	# tmp528, prolog_loop_niters.166
GAS LISTING /tmp/ccBvFgp2.s 			page 48


 1501 08a8 49C1E205 		sal	r10, 5	# _469,
 1502 08ac 4801D1   		add	rcx, rdx	# tmp533, prolog_loop_niters.166
 1503 08af 4D8D5AE0 		lea	r11, -32[r10]	# tmp588,
 1504              	# sieve_extend.c:821:     copy_word++;
 821:sieve_extend.c **** 
 1505              		.loc 1 821 14 view .LVU438
 1506 08b3 31D2     		xor	edx, edx	# ivtmp.215
 1507 08b5 488D34F7 		lea	rsi, [rdi+rsi*8]	# vectp.173,
 1508 08b9 488D0CCF 		lea	rcx, [rdi+rcx*8]	# vectp.182,
 1509 08bd 49C1EB05 		shr	r11, 5	# tmp586,
 1510 08c1 C5F96E4C 		vmovd	xmm1, DWORD PTR -16[rsp]	# _184, %sfp
 1510      24F0
 1511 08c7 4983C301 		add	r11, 1	# tmp589,
 1512 08cb C5F96E44 		vmovd	xmm0, DWORD PTR -12[rsp]	# _182, %sfp
 1512      24F4
 1513 08d1 4183E307 		and	r11d, 7	# tmp590,
 1514 08d5 0F841A01 		je	.L69	#,
 1514      0000
 1515 08db 4983FB01 		cmp	r11, 1	# tmp590,
 1516 08df 0F84E700 		je	.L191	#,
 1516      0000
 1517 08e5 4983FB02 		cmp	r11, 2	# tmp590,
 1518 08e9 0F84BD00 		je	.L192	#,
 1518      0000
 1519 08ef 4983FB03 		cmp	r11, 3	# tmp590,
 1520 08f3 0F849200 		je	.L193	#,
 1520      0000
 1521 08f9 4983FB04 		cmp	r11, 4	# tmp590,
 1522 08fd 746C     		je	.L194	#,
 1523 08ff 4983FB05 		cmp	r11, 5	# tmp590,
 1524 0903 7445     		je	.L195	#,
 1525 0905 4983FB06 		cmp	r11, 6	# tmp590,
 1526 0909 741E     		je	.L196	#,
 1527              		.loc 1 837 9 is_stmt 1 view .LVU439
 1528              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1529              		.loc 1 837 54 is_stmt 0 view .LVU440
 1530 090b C5FD6F36 		vmovdqa	ymm6, YMMWORD PTR [rsi]	# tmp1085, MEM[base: vectp.173_10, index: ivtmp.215_467, offset: 0
 1531 090f BA200000 		mov	edx, 32	# ivtmp.215,
 1531      00
 1532              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1533              		.loc 1 837 99 view .LVU441
 1534 0914 C4C17E6F 		vmovdqu	ymm7, YMMWORD PTR [r8]	# tmp1086, MEM[base: vectp.177_17, index: ivtmp.215_467, offset: 0B
 1534      38
 1535              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1536              		.loc 1 837 54 view .LVU442
 1537 0919 C5CDD3D1 		vpsrlq	ymm2, ymm6, xmm1	# vect__62.175, tmp1085, _184
 1538              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1539              		.loc 1 837 99 view .LVU443
 1540 091d C5C5F3D8 		vpsllq	ymm3, ymm7, xmm0	# vect__67.179, tmp1086, _182
 1541              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1542              		.loc 1 837 72 view .LVU444
 1543 0921 C5EDEBE3 		vpor	ymm4, ymm2, ymm3	# vect__70.180, vect__62.175, vect__67.179
 1544              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1545              		.loc 1 837 29 view .LVU445
 1546 0925 C5FE7F21 		vmovdqu	YMMWORD PTR [rcx], ymm4	# MEM[base: vectp.182_212, index: ivtmp.215_467, offset: 0B], vect
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1547              		.loc 1 836 48 is_stmt 1 view .LVU446
GAS LISTING /tmp/ccBvFgp2.s 			page 49


 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1548              		.loc 1 836 12 view .LVU447
 1549              	.L196:
 1550              		.loc 1 837 9 view .LVU448
 1551              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1552              		.loc 1 837 54 is_stmt 0 view .LVU449
 1553 0929 C5FD6F2C 		vmovdqa	ymm5, YMMWORD PTR [rsi+rdx]	# tmp1087, MEM[base: vectp.173_10, index: ivtmp.215_467, offse
 1553      16
 1554              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1555              		.loc 1 837 99 view .LVU450
 1556 092e C4417E6F 		vmovdqu	ymm9, YMMWORD PTR [r8+rdx]	# tmp1088, MEM[base: vectp.177_17, index: ivtmp.215_467, offset
 1556      0C10
 1557              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1558              		.loc 1 837 54 view .LVU451
 1559 0934 C555D3C1 		vpsrlq	ymm8, ymm5, xmm1	# vect__62.175, tmp1087, _184
 1560              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1561              		.loc 1 837 99 view .LVU452
 1562 0938 C535F3D0 		vpsllq	ymm10, ymm9, xmm0	# vect__67.179, tmp1088, _182
 1563              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1564              		.loc 1 837 72 view .LVU453
 1565 093c C4413DEB 		vpor	ymm11, ymm8, ymm10	# vect__70.180, vect__62.175, vect__67.179
 1565      DA
 1566              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1567              		.loc 1 837 29 view .LVU454
 1568 0941 C57E7F1C 		vmovdqu	YMMWORD PTR [rcx+rdx], ymm11	# MEM[base: vectp.182_212, index: ivtmp.215_467, offset: 0B],
 1568      11
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1569              		.loc 1 836 48 is_stmt 1 view .LVU455
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1570              		.loc 1 836 12 view .LVU456
 1571 0946 4883C220 		add	rdx, 32	# ivtmp.215,
 1572              	.L195:
 1573              		.loc 1 837 9 view .LVU457
 1574              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1575              		.loc 1 837 54 is_stmt 0 view .LVU458
 1576 094a C57D6F24 		vmovdqa	ymm12, YMMWORD PTR [rsi+rdx]	# tmp1089, MEM[base: vectp.173_10, index: ivtmp.215_467, offs
 1576      16
 1577              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1578              		.loc 1 837 99 view .LVU459
 1579 094f C4417E6F 		vmovdqu	ymm14, YMMWORD PTR [r8+rdx]	# tmp1090, MEM[base: vectp.177_17, index: ivtmp.215_467, offse
 1579      3410
 1580              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1581              		.loc 1 837 54 view .LVU460
 1582 0955 C51DD3E9 		vpsrlq	ymm13, ymm12, xmm1	# vect__62.175, tmp1089, _184
 1583              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1584              		.loc 1 837 99 view .LVU461
 1585 0959 C50DF3F8 		vpsllq	ymm15, ymm14, xmm0	# vect__67.179, tmp1090, _182
 1586              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1587              		.loc 1 837 72 view .LVU462
 1588 095d C4C115EB 		vpor	ymm6, ymm13, ymm15	# vect__70.180, vect__62.175, vect__67.179
 1588      F7
 1589              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1590              		.loc 1 837 29 view .LVU463
 1591 0962 C5FE7F34 		vmovdqu	YMMWORD PTR [rcx+rdx], ymm6	# MEM[base: vectp.182_212, index: ivtmp.215_467, offset: 0B], 
 1591      11
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1592              		.loc 1 836 48 is_stmt 1 view .LVU464
GAS LISTING /tmp/ccBvFgp2.s 			page 50


 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1593              		.loc 1 836 12 view .LVU465
 1594 0967 4883C220 		add	rdx, 32	# ivtmp.215,
 1595              	.L194:
 1596              		.loc 1 837 9 view .LVU466
 1597              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1598              		.loc 1 837 54 is_stmt 0 view .LVU467
 1599 096b C5FD6F14 		vmovdqa	ymm2, YMMWORD PTR [rsi+rdx]	# tmp1091, MEM[base: vectp.173_10, index: ivtmp.215_467, offse
 1599      16
 1600              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1601              		.loc 1 837 99 view .LVU468
 1602 0970 C4C17E6F 		vmovdqu	ymm3, YMMWORD PTR [r8+rdx]	# tmp1092, MEM[base: vectp.177_17, index: ivtmp.215_467, offset
 1602      1C10
 1603              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1604              		.loc 1 837 54 view .LVU469
 1605 0976 C5EDD3F9 		vpsrlq	ymm7, ymm2, xmm1	# vect__62.175, tmp1091, _184
 1606              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1607              		.loc 1 837 99 view .LVU470
 1608 097a C5E5F3E0 		vpsllq	ymm4, ymm3, xmm0	# vect__67.179, tmp1092, _182
 1609              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1610              		.loc 1 837 72 view .LVU471
 1611 097e C5C5EBEC 		vpor	ymm5, ymm7, ymm4	# vect__70.180, vect__62.175, vect__67.179
 1612              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1613              		.loc 1 837 29 view .LVU472
 1614 0982 C5FE7F2C 		vmovdqu	YMMWORD PTR [rcx+rdx], ymm5	# MEM[base: vectp.182_212, index: ivtmp.215_467, offset: 0B], 
 1614      11
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1615              		.loc 1 836 48 is_stmt 1 view .LVU473
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1616              		.loc 1 836 12 view .LVU474
 1617 0987 4883C220 		add	rdx, 32	# ivtmp.215,
 1618              	.L193:
 1619              		.loc 1 837 9 view .LVU475
 1620              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1621              		.loc 1 837 54 is_stmt 0 view .LVU476
 1622 098b C57D6F04 		vmovdqa	ymm8, YMMWORD PTR [rsi+rdx]	# tmp1093, MEM[base: vectp.173_10, index: ivtmp.215_467, offse
 1622      16
 1623              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1624              		.loc 1 837 99 view .LVU477
 1625 0990 C4417E6F 		vmovdqu	ymm10, YMMWORD PTR [r8+rdx]	# tmp1094, MEM[base: vectp.177_17, index: ivtmp.215_467, offse
 1625      1410
 1626              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1627              		.loc 1 837 54 view .LVU478
 1628 0996 C53DD3C9 		vpsrlq	ymm9, ymm8, xmm1	# vect__62.175, tmp1093, _184
 1629              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1630              		.loc 1 837 99 view .LVU479
 1631 099a C52DF3D8 		vpsllq	ymm11, ymm10, xmm0	# vect__67.179, tmp1094, _182
 1632              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1633              		.loc 1 837 72 view .LVU480
 1634 099e C44135EB 		vpor	ymm12, ymm9, ymm11	# vect__70.180, vect__62.175, vect__67.179
 1634      E3
 1635              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1636              		.loc 1 837 29 view .LVU481
 1637 09a3 C57E7F24 		vmovdqu	YMMWORD PTR [rcx+rdx], ymm12	# MEM[base: vectp.182_212, index: ivtmp.215_467, offset: 0B],
 1637      11
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1638              		.loc 1 836 48 is_stmt 1 view .LVU482
GAS LISTING /tmp/ccBvFgp2.s 			page 51


 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1639              		.loc 1 836 12 view .LVU483
 1640 09a8 4883C220 		add	rdx, 32	# ivtmp.215,
 1641              	.L192:
 1642              		.loc 1 837 9 view .LVU484
 1643              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1644              		.loc 1 837 54 is_stmt 0 view .LVU485
 1645 09ac C57D6F2C 		vmovdqa	ymm13, YMMWORD PTR [rsi+rdx]	# tmp1095, MEM[base: vectp.173_10, index: ivtmp.215_467, offs
 1645      16
 1646              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1647              		.loc 1 837 99 view .LVU486
 1648 09b1 C4417E6F 		vmovdqu	ymm15, YMMWORD PTR [r8+rdx]	# tmp1096, MEM[base: vectp.177_17, index: ivtmp.215_467, offse
 1648      3C10
 1649              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1650              		.loc 1 837 54 view .LVU487
 1651 09b7 C515D3F1 		vpsrlq	ymm14, ymm13, xmm1	# vect__62.175, tmp1095, _184
 1652              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1653              		.loc 1 837 99 view .LVU488
 1654 09bb C585F3F0 		vpsllq	ymm6, ymm15, xmm0	# vect__67.179, tmp1096, _182
 1655              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1656              		.loc 1 837 72 view .LVU489
 1657 09bf C58DEBD6 		vpor	ymm2, ymm14, ymm6	# vect__70.180, vect__62.175, vect__67.179
 1658              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1659              		.loc 1 837 29 view .LVU490
 1660 09c3 C5FE7F14 		vmovdqu	YMMWORD PTR [rcx+rdx], ymm2	# MEM[base: vectp.182_212, index: ivtmp.215_467, offset: 0B], 
 1660      11
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1661              		.loc 1 836 48 is_stmt 1 view .LVU491
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1662              		.loc 1 836 12 view .LVU492
 1663 09c8 4883C220 		add	rdx, 32	# ivtmp.215,
 1664              	.L191:
 1665              		.loc 1 837 9 view .LVU493
 1666              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1667              		.loc 1 837 54 is_stmt 0 view .LVU494
 1668 09cc C5FD6F3C 		vmovdqa	ymm7, YMMWORD PTR [rsi+rdx]	# tmp1097, MEM[base: vectp.173_10, index: ivtmp.215_467, offse
 1668      16
 1669              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1670              		.loc 1 837 99 view .LVU495
 1671 09d1 C4C17E6F 		vmovdqu	ymm3, YMMWORD PTR [r8+rdx]	# tmp1098, MEM[base: vectp.177_17, index: ivtmp.215_467, offset
 1671      1C10
 1672              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1673              		.loc 1 837 54 view .LVU496
 1674 09d7 C5C5D3E1 		vpsrlq	ymm4, ymm7, xmm1	# vect__62.175, tmp1097, _184
 1675              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1676              		.loc 1 837 99 view .LVU497
 1677 09db C5E5F3E8 		vpsllq	ymm5, ymm3, xmm0	# vect__67.179, tmp1098, _182
 1678              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1679              		.loc 1 837 72 view .LVU498
 1680 09df C55DEBC5 		vpor	ymm8, ymm4, ymm5	# vect__70.180, vect__62.175, vect__67.179
 1681              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1682              		.loc 1 837 29 view .LVU499
 1683 09e3 C57E7F04 		vmovdqu	YMMWORD PTR [rcx+rdx], ymm8	# MEM[base: vectp.182_212, index: ivtmp.215_467, offset: 0B], 
 1683      11
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1684              		.loc 1 836 48 is_stmt 1 view .LVU500
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
GAS LISTING /tmp/ccBvFgp2.s 			page 52


 1685              		.loc 1 836 12 view .LVU501
 1686 09e8 4883C220 		add	rdx, 32	# ivtmp.215,
 1687 09ec 4C39D2   		cmp	rdx, r10	# ivtmp.215, _469
 1688 09ef 0F842E01 		je	.L244	#,
 1688      0000
 1689              	.L69:
 1690              		.loc 1 837 9 discriminator 2 view .LVU502
 1691              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1692              		.loc 1 837 54 is_stmt 0 discriminator 2 view .LVU503
 1693 09f5 C57D6F0C 		vmovdqa	ymm9, YMMWORD PTR [rsi+rdx]	# tmp1015, MEM[base: vectp.173_10, index: ivtmp.215_467, offse
 1693      16
 1694              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1695              		.loc 1 837 99 discriminator 2 view .LVU504
 1696 09fa C4417E6F 		vmovdqu	ymm11, YMMWORD PTR [r8+rdx]	# tmp1016, MEM[base: vectp.177_17, index: ivtmp.215_467, offse
 1696      1C10
 1697              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1698              		.loc 1 837 54 discriminator 2 view .LVU505
 1699 0a00 C535D3D1 		vpsrlq	ymm10, ymm9, xmm1	# vect__62.175, tmp1015, _184
 1700              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1701              		.loc 1 837 99 discriminator 2 view .LVU506
 1702 0a04 C525F3E0 		vpsllq	ymm12, ymm11, xmm0	# vect__67.179, tmp1016, _182
 1703              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1704              		.loc 1 837 72 discriminator 2 view .LVU507
 1705 0a08 C4412DEB 		vpor	ymm13, ymm10, ymm12	# vect__70.180, vect__62.175, vect__67.179
 1705      EC
 1706              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1707              		.loc 1 837 29 discriminator 2 view .LVU508
 1708 0a0d C57E7F2C 		vmovdqu	YMMWORD PTR [rcx+rdx], ymm13	# MEM[base: vectp.182_212, index: ivtmp.215_467, offset: 0B],
 1708      11
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1709              		.loc 1 836 48 is_stmt 1 discriminator 2 view .LVU509
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1710              		.loc 1 836 12 discriminator 2 view .LVU510
 1711              		.loc 1 837 9 discriminator 2 view .LVU511
 1712              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1713              		.loc 1 837 54 is_stmt 0 discriminator 2 view .LVU512
 1714 0a12 C57D6F74 		vmovdqa	ymm14, YMMWORD PTR 32[rsi+rdx]	# tmp1017, MEM[base: vectp.173_10, index: ivtmp.215_467, of
 1714      1620
 1715              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1716              		.loc 1 837 99 discriminator 2 view .LVU513
 1717 0a18 C4C17E6F 		vmovdqu	ymm6, YMMWORD PTR 32[r8+rdx]	# tmp1018, MEM[base: vectp.177_17, index: ivtmp.215_467, offs
 1717      741020
 1718              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1719              		.loc 1 837 54 discriminator 2 view .LVU514
 1720 0a1f C50DD3F9 		vpsrlq	ymm15, ymm14, xmm1	# vect__62.175, tmp1017, _184
 1721              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1722              		.loc 1 837 99 discriminator 2 view .LVU515
 1723 0a23 C5CDF3D0 		vpsllq	ymm2, ymm6, xmm0	# vect__67.179, tmp1018, _182
 1724              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1725              		.loc 1 837 72 discriminator 2 view .LVU516
 1726 0a27 C585EBFA 		vpor	ymm7, ymm15, ymm2	# vect__70.180, vect__62.175, vect__67.179
 1727              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1728              		.loc 1 837 29 discriminator 2 view .LVU517
 1729 0a2b C5FE7F7C 		vmovdqu	YMMWORD PTR 32[rcx+rdx], ymm7	# MEM[base: vectp.182_212, index: ivtmp.215_467, offset: 0B]
 1729      1120
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1730              		.loc 1 836 48 is_stmt 1 discriminator 2 view .LVU518
GAS LISTING /tmp/ccBvFgp2.s 			page 53


 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1731              		.loc 1 836 12 discriminator 2 view .LVU519
 1732              		.loc 1 837 9 discriminator 2 view .LVU520
 1733              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1734              		.loc 1 837 54 is_stmt 0 discriminator 2 view .LVU521
 1735 0a31 C5FD6F64 		vmovdqa	ymm4, YMMWORD PTR 64[rsi+rdx]	# tmp1019, MEM[base: vectp.173_10, index: ivtmp.215_467, off
 1735      1640
 1736              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1737              		.loc 1 837 99 discriminator 2 view .LVU522
 1738 0a37 C4C17E6F 		vmovdqu	ymm3, YMMWORD PTR 64[r8+rdx]	# tmp1020, MEM[base: vectp.177_17, index: ivtmp.215_467, offs
 1738      5C1040
 1739              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1740              		.loc 1 837 54 discriminator 2 view .LVU523
 1741 0a3e C5DDD3E9 		vpsrlq	ymm5, ymm4, xmm1	# vect__62.175, tmp1019, _184
 1742              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1743              		.loc 1 837 99 discriminator 2 view .LVU524
 1744 0a42 C565F3C0 		vpsllq	ymm8, ymm3, xmm0	# vect__67.179, tmp1020, _182
 1745              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1746              		.loc 1 837 72 discriminator 2 view .LVU525
 1747 0a46 C44155EB 		vpor	ymm9, ymm5, ymm8	# vect__70.180, vect__62.175, vect__67.179
 1747      C8
 1748              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1749              		.loc 1 837 29 discriminator 2 view .LVU526
 1750 0a4b C57E7F4C 		vmovdqu	YMMWORD PTR 64[rcx+rdx], ymm9	# MEM[base: vectp.182_212, index: ivtmp.215_467, offset: 0B]
 1750      1140
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1751              		.loc 1 836 48 is_stmt 1 discriminator 2 view .LVU527
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1752              		.loc 1 836 12 discriminator 2 view .LVU528
 1753              		.loc 1 837 9 discriminator 2 view .LVU529
 1754              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1755              		.loc 1 837 54 is_stmt 0 discriminator 2 view .LVU530
 1756 0a51 C57D6F54 		vmovdqa	ymm10, YMMWORD PTR 96[rsi+rdx]	# tmp1021, MEM[base: vectp.173_10, index: ivtmp.215_467, of
 1756      1660
 1757              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1758              		.loc 1 837 99 discriminator 2 view .LVU531
 1759 0a57 C4417E6F 		vmovdqu	ymm12, YMMWORD PTR 96[r8+rdx]	# tmp1022, MEM[base: vectp.177_17, index: ivtmp.215_467, off
 1759      641060
 1760              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1761              		.loc 1 837 54 discriminator 2 view .LVU532
 1762 0a5e C52DD3D9 		vpsrlq	ymm11, ymm10, xmm1	# vect__62.175, tmp1021, _184
 1763              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1764              		.loc 1 837 99 discriminator 2 view .LVU533
 1765 0a62 C51DF3E8 		vpsllq	ymm13, ymm12, xmm0	# vect__67.179, tmp1022, _182
 1766              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1767              		.loc 1 837 72 discriminator 2 view .LVU534
 1768 0a66 C44125EB 		vpor	ymm14, ymm11, ymm13	# vect__70.180, vect__62.175, vect__67.179
 1768      F5
 1769              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1770              		.loc 1 837 29 discriminator 2 view .LVU535
 1771 0a6b C57E7F74 		vmovdqu	YMMWORD PTR 96[rcx+rdx], ymm14	# MEM[base: vectp.182_212, index: ivtmp.215_467, offset: 0B
 1771      1160
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1772              		.loc 1 836 48 is_stmt 1 discriminator 2 view .LVU536
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1773              		.loc 1 836 12 discriminator 2 view .LVU537
 1774              		.loc 1 837 9 discriminator 2 view .LVU538
GAS LISTING /tmp/ccBvFgp2.s 			page 54


 1775              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1776              		.loc 1 837 54 is_stmt 0 discriminator 2 view .LVU539
 1777 0a71 C57D6FBC 		vmovdqa	ymm15, YMMWORD PTR 128[rsi+rdx]	# tmp1023, MEM[base: vectp.173_10, index: ivtmp.215_467, o
 1777      16800000 
 1777      00
 1778              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1779              		.loc 1 837 99 discriminator 2 view .LVU540
 1780 0a7a C4C17E6F 		vmovdqu	ymm2, YMMWORD PTR 128[r8+rdx]	# tmp1024, MEM[base: vectp.177_17, index: ivtmp.215_467, off
 1780      94108000 
 1780      0000
 1781              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1782              		.loc 1 837 54 discriminator 2 view .LVU541
 1783 0a84 C585D3F1 		vpsrlq	ymm6, ymm15, xmm1	# vect__62.175, tmp1023, _184
 1784              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1785              		.loc 1 837 99 discriminator 2 view .LVU542
 1786 0a88 C5EDF3F8 		vpsllq	ymm7, ymm2, xmm0	# vect__67.179, tmp1024, _182
 1787              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1788              		.loc 1 837 72 discriminator 2 view .LVU543
 1789 0a8c C5CDEBE7 		vpor	ymm4, ymm6, ymm7	# vect__70.180, vect__62.175, vect__67.179
 1790              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1791              		.loc 1 837 29 discriminator 2 view .LVU544
 1792 0a90 C5FE7FA4 		vmovdqu	YMMWORD PTR 128[rcx+rdx], ymm4	# MEM[base: vectp.182_212, index: ivtmp.215_467, offset: 0B
 1792      11800000 
 1792      00
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1793              		.loc 1 836 48 is_stmt 1 discriminator 2 view .LVU545
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1794              		.loc 1 836 12 discriminator 2 view .LVU546
 1795              		.loc 1 837 9 discriminator 2 view .LVU547
 1796              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1797              		.loc 1 837 54 is_stmt 0 discriminator 2 view .LVU548
 1798 0a99 C5FD6FAC 		vmovdqa	ymm5, YMMWORD PTR 160[rsi+rdx]	# tmp1025, MEM[base: vectp.173_10, index: ivtmp.215_467, of
 1798      16A00000 
 1798      00
 1799              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1800              		.loc 1 837 99 discriminator 2 view .LVU549
 1801 0aa2 C4C17E6F 		vmovdqu	ymm3, YMMWORD PTR 160[r8+rdx]	# tmp1026, MEM[base: vectp.177_17, index: ivtmp.215_467, off
 1801      9C10A000 
 1801      0000
 1802              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1803              		.loc 1 837 54 discriminator 2 view .LVU550
 1804 0aac C555D3C1 		vpsrlq	ymm8, ymm5, xmm1	# vect__62.175, tmp1025, _184
 1805              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1806              		.loc 1 837 99 discriminator 2 view .LVU551
 1807 0ab0 C565F3C8 		vpsllq	ymm9, ymm3, xmm0	# vect__67.179, tmp1026, _182
 1808              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1809              		.loc 1 837 72 discriminator 2 view .LVU552
 1810 0ab4 C4413DEB 		vpor	ymm10, ymm8, ymm9	# vect__70.180, vect__62.175, vect__67.179
 1810      D1
 1811              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1812              		.loc 1 837 29 discriminator 2 view .LVU553
 1813 0ab9 C57E7F94 		vmovdqu	YMMWORD PTR 160[rcx+rdx], ymm10	# MEM[base: vectp.182_212, index: ivtmp.215_467, offset: 0
 1813      11A00000 
 1813      00
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1814              		.loc 1 836 48 is_stmt 1 discriminator 2 view .LVU554
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
GAS LISTING /tmp/ccBvFgp2.s 			page 55


 1815              		.loc 1 836 12 discriminator 2 view .LVU555
 1816              		.loc 1 837 9 discriminator 2 view .LVU556
 1817              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1818              		.loc 1 837 54 is_stmt 0 discriminator 2 view .LVU557
 1819 0ac2 C57D6F9C 		vmovdqa	ymm11, YMMWORD PTR 192[rsi+rdx]	# tmp1027, MEM[base: vectp.173_10, index: ivtmp.215_467, o
 1819      16C00000 
 1819      00
 1820              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1821              		.loc 1 837 99 discriminator 2 view .LVU558
 1822 0acb C4417E6F 		vmovdqu	ymm13, YMMWORD PTR 192[r8+rdx]	# tmp1028, MEM[base: vectp.177_17, index: ivtmp.215_467, of
 1822      AC10C000 
 1822      0000
 1823              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1824              		.loc 1 837 54 discriminator 2 view .LVU559
 1825 0ad5 C525D3E1 		vpsrlq	ymm12, ymm11, xmm1	# vect__62.175, tmp1027, _184
 1826              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1827              		.loc 1 837 99 discriminator 2 view .LVU560
 1828 0ad9 C515F3F0 		vpsllq	ymm14, ymm13, xmm0	# vect__67.179, tmp1028, _182
 1829              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1830              		.loc 1 837 72 discriminator 2 view .LVU561
 1831 0add C4411DEB 		vpor	ymm15, ymm12, ymm14	# vect__70.180, vect__62.175, vect__67.179
 1831      FE
 1832              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1833              		.loc 1 837 29 discriminator 2 view .LVU562
 1834 0ae2 C57E7FBC 		vmovdqu	YMMWORD PTR 192[rcx+rdx], ymm15	# MEM[base: vectp.182_212, index: ivtmp.215_467, offset: 0
 1834      11C00000 
 1834      00
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1835              		.loc 1 836 48 is_stmt 1 discriminator 2 view .LVU563
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1836              		.loc 1 836 12 discriminator 2 view .LVU564
 1837              		.loc 1 837 9 discriminator 2 view .LVU565
 1838              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1839              		.loc 1 837 54 is_stmt 0 discriminator 2 view .LVU566
 1840 0aeb C5FD6FB4 		vmovdqa	ymm6, YMMWORD PTR 224[rsi+rdx]	# tmp1029, MEM[base: vectp.173_10, index: ivtmp.215_467, of
 1840      16E00000 
 1840      00
 1841              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1842              		.loc 1 837 99 discriminator 2 view .LVU567
 1843 0af4 C4C17E6F 		vmovdqu	ymm7, YMMWORD PTR 224[r8+rdx]	# tmp1030, MEM[base: vectp.177_17, index: ivtmp.215_467, off
 1843      BC10E000 
 1843      0000
 1844              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1845              		.loc 1 837 54 discriminator 2 view .LVU568
 1846 0afe C5CDD3D1 		vpsrlq	ymm2, ymm6, xmm1	# vect__62.175, tmp1029, _184
 1847              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1848              		.loc 1 837 99 discriminator 2 view .LVU569
 1849 0b02 C5C5F3E0 		vpsllq	ymm4, ymm7, xmm0	# vect__67.179, tmp1030, _182
 1850              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1851              		.loc 1 837 72 discriminator 2 view .LVU570
 1852 0b06 C5EDEBEC 		vpor	ymm5, ymm2, ymm4	# vect__70.180, vect__62.175, vect__67.179
 1853              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1854              		.loc 1 837 29 discriminator 2 view .LVU571
 1855 0b0a C5FE7FAC 		vmovdqu	YMMWORD PTR 224[rcx+rdx], ymm5	# MEM[base: vectp.182_212, index: ivtmp.215_467, offset: 0B
 1855      11E00000 
 1855      00
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
GAS LISTING /tmp/ccBvFgp2.s 			page 56


 1856              		.loc 1 836 48 is_stmt 1 discriminator 2 view .LVU572
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1857              		.loc 1 836 12 discriminator 2 view .LVU573
 1858 0b13 4881C200 		add	rdx, 256	# ivtmp.215,
 1858      010000
 1859 0b1a 4C39D2   		cmp	rdx, r10	# ivtmp.215, _469
 1860 0b1d 0F85D2FE 		jne	.L69	#,
 1860      FFFF
 1861              	.L244:
 1862 0b23 4C8B5424 		mov	r10, QWORD PTR -40[rsp]	# source_word, %sfp
 1862      D8
 1863 0b28 4C89CB   		mov	rbx, r9	# niters_vector_mult_vf.169, niters.167
 1864 0b2b 4883E3FC 		and	rbx, -4	# niters_vector_mult_vf.169,
 1865 0b2f 4901DC   		add	r12, rbx	# tmp.170, niters_vector_mult_vf.169
 1866 0b32 4901DA   		add	r10, rbx	# source_word, niters_vector_mult_vf.169
 1867 0b35 4C39CB   		cmp	rbx, r9	# niters_vector_mult_vf.169, niters.167
 1868 0b38 0F844207 		je	.L257	#,
 1868      0000
 1869              	.LVL79:
 1870              		.loc 1 837 9 view .LVU574
 1871              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1872              		.loc 1 836 5 is_stmt 0 view .LVU575
 1873 0b3e 488B5424 		mov	rdx, QWORD PTR -8[rsp]	# destination_stop_word, %sfp
 1873      F8
 1874              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1875              		.loc 1 836 57 view .LVU576
 1876 0b43 4D8D5C24 		lea	r11, 1[r12]	# copy_word,
 1876      01
 1877              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1878              		.loc 1 837 99 view .LVU577
 1879 0b48 C42289F7 		shlx	r8, QWORD PTR 8[rdi+r10*8], r14	# tmp545, *_66, shift
 1879      44D708
 1880              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1881              		.loc 1 837 54 view .LVU578
 1882 0b4f C4A2FBF7 		shrx	rsi, QWORD PTR [rdi+r10*8], rax	# tmp547, *_61, shift_flipped
 1882      34D7
 1883              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1884              		.loc 1 837 72 view .LVU579
 1885 0b55 4909F0   		or	r8, rsi	# tmp549, tmp547
 1886              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1887              		.loc 1 837 83 view .LVU580
 1888 0b58 4D8D4A01 		lea	r9, 1[r10]	# _64,
 1889              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1890              		.loc 1 837 72 view .LVU581
 1891 0b5c 4E8904E7 		mov	QWORD PTR [rdi+r12*8], r8	# *_70, tmp549
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1892              		.loc 1 836 48 is_stmt 1 view .LVU582
 1893              	.LVL80:
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1894              		.loc 1 836 12 view .LVU583
 1895              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1896              		.loc 1 836 5 is_stmt 0 view .LVU584
 1897 0b60 4939D3   		cmp	r11, rdx	# copy_word, destination_stop_word
 1898 0b63 0F871707 		ja	.L257	#,
GAS LISTING /tmp/ccBvFgp2.s 			page 57


 1898      0000
 1899              		.loc 1 837 9 is_stmt 1 view .LVU585
 1900              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1901              		.loc 1 836 57 is_stmt 0 view .LVU586
 1902 0b69 4983C402 		add	r12, 2	# copy_word,
 1903              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1904              		.loc 1 837 99 view .LVU587
 1905 0b6d C4A289F7 		shlx	rcx, QWORD PTR 8[rdi+r9*8], r14	# tmp550, *_53, shift
 1905      4CCF08
 1906              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1907              		.loc 1 837 54 view .LVU588
 1908 0b74 4A8B1CCF 		mov	rbx, QWORD PTR [rdi+r9*8]	# *_48, *_48
 1909              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1910              		.loc 1 837 83 view .LVU589
 1911 0b78 4983C202 		add	r10, 2	# _51,
 1912              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1913              		.loc 1 837 54 view .LVU590
 1914 0b7c C462FBF7 		shrx	r9, rbx, rax	# tmp552, *_48, shift_flipped
 1914      CB
 1915              	.LVL81:
 1916              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1917              		.loc 1 837 72 view .LVU591
 1918 0b81 4C09C9   		or	rcx, r9	# tmp554, tmp552
 1919 0b84 4A890CDF 		mov	QWORD PTR [rdi+r11*8], rcx	# *_57, tmp554
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1920              		.loc 1 836 48 is_stmt 1 view .LVU592
 1921              	.LVL82:
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1922              		.loc 1 836 12 view .LVU593
 1923              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1924              		.loc 1 836 5 is_stmt 0 view .LVU594
 1925 0b88 4C39E2   		cmp	rdx, r12	# destination_stop_word, copy_word
 1926 0b8b 0F82EF06 		jb	.L257	#,
 1926      0000
 1927              		.loc 1 837 9 is_stmt 1 view .LVU595
 1928              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1929              		.loc 1 837 99 is_stmt 0 view .LVU596
 1930 0b91 C42289F7 		shlx	r14, QWORD PTR 8[rdi+r10*8], r14	# tmp555, *_36, shift
 1930      74D708
 1931              	.LVL83:
 1932              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1933              		.loc 1 837 54 view .LVU597
 1934 0b98 4E8B14D7 		mov	r10, QWORD PTR [rdi+r10*8]	# *_30, *_30
 1935              	.LVL84:
 1936              		.loc 1 837 54 view .LVU598
 1937 0b9c C4C2FBF7 		shrx	rax, r10, rax	# tmp557, *_30, shift_flipped
 1937      C2
 1938              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1939              		.loc 1 837 72 view .LVU599
 1940 0ba1 4C09F0   		or	rax, r14	# tmp559, tmp555
 1941 0ba4 4A8904E7 		mov	QWORD PTR [rdi+r12*8], rax	# *_40, tmp559
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1942              		.loc 1 836 48 is_stmt 1 view .LVU600
 1943              	.LVL85:
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
GAS LISTING /tmp/ccBvFgp2.s 			page 58


 1944              		.loc 1 836 12 view .LVU601
 1945 0ba8 C5F877   		vzeroupper
 1946              	.LVL86:
 1947              	.L73:
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1948              		.loc 1 836 12 is_stmt 0 view .LVU602
 1949 0bab 4C3B6C24 		cmp	r13, QWORD PTR -24[rsp]	# _175, %sfp
 1949      E8
 1950 0bb0 B9000000 		mov	ecx, 0	# tmp544,
 1950      00
 1951 0bb5 4C8B6424 		mov	r12, QWORD PTR -32[rsp]	#, %sfp
 1951      E0
 1952 0bba 490F46CC 		cmovbe	rcx, r12	#,, tmp543
 1953 0bbe 4C01E9   		add	rcx, r13	# copy_word, _175
 1954              	.L66:
 838:sieve_extend.c ****     }
 839:sieve_extend.c ****     bitarray[copy_word] &= chopmask(destination_stop);
 1955              		.loc 1 839 5 is_stmt 1 view .LVU603
 1956              	# sieve_extend.c:839:     bitarray[copy_word] &= chopmask(destination_stop);
 1957              		.loc 1 839 25 is_stmt 0 view .LVU604
 1958 0bc1 4C213CCF 		and	QWORD PTR [rdi+rcx*8], r15	# *_72, _193
 1959              	# sieve_extend.c:841: }
 840:sieve_extend.c **** 
 841:sieve_extend.c **** }
 1960              		.loc 1 841 1 view .LVU605
 1961 0bc5 488D65D8 		lea	rsp, -40[rbp]	#,
 1962 0bc9 5B       		pop	rbx	#
 1963 0bca 415C     		pop	r12	#
 1964 0bcc 415D     		pop	r13	#
 1965 0bce 415E     		pop	r14	#
 1966 0bd0 415F     		pop	r15	#
 1967 0bd2 5D       		pop	rbp	#
 1968              		.cfi_remember_state
 1969              		.cfi_def_cfa 7, 8
 1970 0bd3 C3       		ret	
 1971              	.LVL87:
 1972              		.p2align 4,,7
 1973 0bd4 0F1F4000 		.p2align 3
 1974              	.L261:
 1975              		.cfi_restore_state
 1976              	.LBB307:
 826:sieve_extend.c **** 
 1977              		.loc 1 826 9 is_stmt 1 view .LVU606
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 1978              		.loc 1 830 9 view .LVU607
 1979              	.LBB308:
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 1980              		.loc 1 830 14 view .LVU608
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 1981              		.loc 1 830 40 view .LVU609
 1982              	# sieve_extend.c:830:         for (register counter_t i = 0; i <loop_distance; i++) {
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 1983              		.loc 1 830 9 is_stmt 0 view .LVU610
 1984 0bd8 4C8B6C24 		mov	r13, QWORD PTR -8[rsp]	# loop_distance, %sfp
 1984      F8
 1985 0bdd 4889F2   		mov	rdx, rsi	# source_word, source_word
 1986              	.LVL88:
GAS LISTING /tmp/ccBvFgp2.s 			page 59


 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 1987              		.loc 1 830 9 view .LVU611
 1988 0be0 4929CD   		sub	r13, rcx	# loop_distance, copy_word
 1989 0be3 4C896C24 		mov	QWORD PTR -24[rsp], r13	# %sfp, loop_distance
 1989      E8
 1990 0be8 0F84FB03 		je	.L62	#,
 1990      0000
 1991 0bee 4D8D5424 		lea	r10, 8[r12]	# tmp413,
 1991      08
 1992 0bf3 4C8D4B28 		lea	r9, 40[rbx]	# tmp412,
 1993 0bf7 4D39D1   		cmp	r9, r10	# tmp412, tmp413
 1994 0bfa 4C8D6B08 		lea	r13, 8[rbx]	# tmp417,
 1995 0bfe 410F9EC1 		setle	r9b	#, tmp415
 1996 0c02 4983C428 		add	r12, 40	# tmp416,
 1997 0c06 4D39EC   		cmp	r12, r13	# tmp416, tmp417
 1998 0c09 488D5601 		lea	rdx, 1[rsi]	# _232,
 1999 0c0d 410F9EC5 		setle	r13b	#, tmp419
 2000 0c11 4509E9   		or	r9d, r13d	# tmp420, tmp419
 2001 0c14 4C8D6B20 		lea	r13, 32[rbx]	# tmp421,
 2002 0c18 4D39D5   		cmp	r13, r10	# tmp421, tmp413
 2003 0c1b 410F9EC2 		setle	r10b	#, tmp424
 2004 0c1f 4939DC   		cmp	r12, rbx	# tmp416, _179
 2005 0c22 410F9EC4 		setle	r12b	#, tmp427
 2006 0c26 4509E2   		or	r10d, r12d	# tmp428, tmp427
 2007 0c29 4584D1   		test	r9b, r10b	# tmp420, tmp428
 2008 0c2c 0F846706 		je	.L57	#,
 2008      0000
 2009 0c32 4C8B4C24 		mov	r9, QWORD PTR -24[rsp]	# loop_distance, %sfp
 2009      E8
 2010 0c37 4D8D69FF 		lea	r13, -1[r9]	# tmp430,
 2011 0c3b 4983FD05 		cmp	r13, 5	# tmp430,
 2012 0c3f 0F865406 		jbe	.L57	#,
 2012      0000
 2013 0c45 4D89D9   		mov	r9, r11	# tmp433, _180
 2014              	# sieve_extend.c:830:         for (register counter_t i = 0; i <loop_distance; i++) {
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2015              		.loc 1 830 33 view .LVU612
 2016 0c48 4531E4   		xor	r12d, r12d	# i
 2017 0c4b 49C1E903 		shr	r9, 3	# tmp433,
 2018 0c4f 49F7D9   		neg	r9	# tmp434
 2019 0c52 4183E103 		and	r9d, 3	# prolog_loop_niters.185,
 2020 0c56 7468     		je	.L58	#,
 831:sieve_extend.c ****         }
 2021              		.loc 1 831 13 is_stmt 1 view .LVU613
 2022              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2023              		.loc 1 831 109 is_stmt 0 view .LVU614
 2024 0c58 488B5C1F 		mov	rbx, QWORD PTR 8[rdi+rbx]	# *_428, *_428
 2024      08
 2025 0c5d C46289F7 		shlx	r10, rbx, r14	# tmp435, *_428, shift
 2025      D3
 2026              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2027              		.loc 1 831 62 view .LVU615
 2028 0c62 4D8B1B   		mov	r11, QWORD PTR [r11]	# *_180, *_180
 2029 0c65 C442FBF7 		shrx	r12, r11, rax	# tmp437, *_180, shift_flipped
 2029      E3
GAS LISTING /tmp/ccBvFgp2.s 			page 60


 2030              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2031              		.loc 1 831 80 view .LVU616
 2032 0c6a 4D09E2   		or	r10, r12	# tmp439, tmp437
 2033 0c6d 4983F901 		cmp	r9, 1	# prolog_loop_niters.185,
 2034 0c71 4C8914CF 		mov	QWORD PTR [rdi+rcx*8], r10	# *_433, tmp439
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2035              		.loc 1 830 58 is_stmt 1 view .LVU617
 2036              	.LVL89:
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2037              		.loc 1 830 40 view .LVU618
 2038              	# sieve_extend.c:830:         for (register counter_t i = 0; i <loop_distance; i++) {
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2039              		.loc 1 830 59 is_stmt 0 view .LVU619
 2040 0c75 41BC0100 		mov	r12d, 1	# i,
 2040      0000
 2041 0c7b 7443     		je	.L58	#,
 831:sieve_extend.c ****         }
 2042              		.loc 1 831 13 is_stmt 1 view .LVU620
 2043              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2044              		.loc 1 831 109 is_stmt 0 view .LVU621
 2045 0c7d C46289F7 		shlx	r13, QWORD PTR 8[rdi+rdx*8], r14	# tmp441, *_448, shift
 2045      6CD708
 2046              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2047              		.loc 1 831 62 view .LVU622
 2048 0c84 C4E2FBF7 		shrx	rbx, QWORD PTR [rdi+rdx*8], rax	# tmp443, *_443, shift_flipped
 2048      1CD7
 2049              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2050              		.loc 1 831 80 view .LVU623
 2051 0c8a 4909DD   		or	r13, rbx	# tmp445, tmp443
 2052 0c8d 4983F903 		cmp	r9, 3	# prolog_loop_niters.185,
 2053 0c91 4E896CC7 		mov	QWORD PTR 16[rdi+r8*8], r13	# *_453, tmp445
 2053      10
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2054              		.loc 1 830 58 is_stmt 1 view .LVU624
 2055              	.LVL90:
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2056              		.loc 1 830 40 view .LVU625
 2057              	# sieve_extend.c:830:         for (register counter_t i = 0; i <loop_distance; i++) {
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2058              		.loc 1 830 59 is_stmt 0 view .LVU626
 2059 0c96 41BC0200 		mov	r12d, 2	# i,
 2059      0000
 2060 0c9c 7522     		jne	.L58	#,
 831:sieve_extend.c ****         }
 2061              		.loc 1 831 13 is_stmt 1 view .LVU627
 2062              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2063              		.loc 1 831 58 is_stmt 0 view .LVU628
 2064 0c9e 4C8D5E02 		lea	r11, 2[rsi]	# tmp446,
 2065              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2066              		.loc 1 831 109 view .LVU629
 2067 0ca2 C42289F7 		shlx	r10, QWORD PTR 8[rdi+r11*8], r14	# tmp448, *_286, shift
GAS LISTING /tmp/ccBvFgp2.s 			page 61


 2067      54DF08
 2068              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2069              		.loc 1 831 62 view .LVU630
 2070 0ca9 4E8B24DF 		mov	r12, QWORD PTR [rdi+r11*8]	# *_281, *_281
 2071 0cad C442FBF7 		shrx	r13, r12, rax	# tmp450, *_281, shift_flipped
 2071      EC
 2072              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2073              		.loc 1 831 80 view .LVU631
 2074 0cb2 4D09EA   		or	r10, r13	# tmp452, tmp450
 2075              	# sieve_extend.c:830:         for (register counter_t i = 0; i <loop_distance; i++) {
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2076              		.loc 1 830 59 view .LVU632
 2077 0cb5 41BC0300 		mov	r12d, 3	# i,
 2077      0000
 2078              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2079              		.loc 1 831 80 view .LVU633
 2080 0cbb 4E8954C7 		mov	QWORD PTR 24[rdi+r8*8], r10	# *_291, tmp452
 2080      18
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2081              		.loc 1 830 58 is_stmt 1 view .LVU634
 2082              	.LVL91:
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2083              		.loc 1 830 40 view .LVU635
 2084              	.L58:
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2085              		.loc 1 830 40 is_stmt 0 view .LVU636
 2086 0cc0 488B5C24 		mov	rbx, QWORD PTR -24[rsp]	# niters.186, %sfp
 2086      E8
 2087 0cc5 4E8D040E 		lea	r8, [rsi+r9]	# tmp453,
 2088 0cc9 4E8D14C7 		lea	r10, [rdi+r8*8]	# vectp.191,
 2089 0ccd 4C01CA   		add	rdx, r9	# tmp455, prolog_loop_niters.185
 2090 0cd0 C5F96E4C 		vmovd	xmm1, DWORD PTR -16[rsp]	# _184, %sfp
 2090      24F0
 2091 0cd6 4C8D1CD7 		lea	r11, [rdi+rdx*8]	# vectp.195,
 2092 0cda 4C29CB   		sub	rbx, r9	# niters.186, prolog_loop_niters.185
 2093              	# sieve_extend.c:830:         for (register counter_t i = 0; i <loop_distance; i++) {
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2094              		.loc 1 830 33 view .LVU637
 2095 0cdd 31D2     		xor	edx, edx	# ivtmp.234
 2096 0cdf 4989DD   		mov	r13, rbx	# bnd.187, niters.186
 2097 0ce2 4901C9   		add	r9, rcx	# tmp457, copy_word
 2098 0ce5 49C1ED02 		shr	r13, 2	# bnd.187,
 2099 0ce9 4E8D0CCF 		lea	r9, [rdi+r9*8]	# vectp.200,
 2100 0ced 49C1E505 		sal	r13, 5	# bnd.187,
 2101 0cf1 C5F96E44 		vmovd	xmm0, DWORD PTR -12[rsp]	# _182, %sfp
 2101      24F4
 2102 0cf7 4D8D45E0 		lea	r8, -32[r13]	# tmp582,
 2103 0cfb 49C1E805 		shr	r8, 5	# tmp580,
 2104 0cff 4983C001 		add	r8, 1	# tmp583,
 2105 0d03 4183E007 		and	r8d, 7	# tmp584,
 2106 0d07 0F840901 		je	.L60	#,
 2106      0000
 2107 0d0d 4983F801 		cmp	r8, 1	# tmp584,
 2108 0d11 0F84D300 		je	.L179	#,
GAS LISTING /tmp/ccBvFgp2.s 			page 62


 2108      0000
 2109 0d17 4983F802 		cmp	r8, 2	# tmp584,
 2110 0d1b 0F84A600 		je	.L180	#,
 2110      0000
 2111 0d21 4983F803 		cmp	r8, 3	# tmp584,
 2112 0d25 747E     		je	.L181	#,
 2113 0d27 4983F804 		cmp	r8, 4	# tmp584,
 2114 0d2b 7455     		je	.L182	#,
 2115 0d2d 4983F805 		cmp	r8, 5	# tmp584,
 2116 0d31 742D     		je	.L183	#,
 2117 0d33 4983F806 		cmp	r8, 6	# tmp584,
 2118 0d37 0F858007 		jne	.L262	#,
 2118      0000
 2119              	.L184:
 831:sieve_extend.c ****         }
 2120              		.loc 1 831 13 is_stmt 1 view .LVU638
 2121              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2122              		.loc 1 831 62 is_stmt 0 view .LVU639
 2123 0d3d C4417D6F 		vmovdqa	ymm12, YMMWORD PTR [r10+rdx]	# tmp1073, MEM[base: vectp.191_325, index: ivtmp.234_483, off
 2123      2412
 2124              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2125              		.loc 1 831 109 view .LVU640
 2126 0d43 C4417E6F 		vmovdqu	ymm14, YMMWORD PTR [r11+rdx]	# tmp1074, MEM[base: vectp.195_332, index: ivtmp.234_483, off
 2126      3413
 2127              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2128              		.loc 1 831 62 view .LVU641
 2129 0d49 C51DD3E9 		vpsrlq	ymm13, ymm12, xmm1	# vect__49.193, tmp1073, _184
 2130              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2131              		.loc 1 831 109 view .LVU642
 2132 0d4d C50DF3F8 		vpsllq	ymm15, ymm14, xmm0	# vect__54.197, tmp1074, _182
 2133              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2134              		.loc 1 831 80 view .LVU643
 2135 0d51 C4C115EB 		vpor	ymm6, ymm13, ymm15	# vect__58.198, vect__49.193, vect__54.197
 2135      F7
 2136              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2137              		.loc 1 831 35 view .LVU644
 2138 0d56 C4C17E7F 		vmovdqu	YMMWORD PTR [r9+rdx], ymm6	# MEM[base: vectp.200_341, index: ivtmp.234_483, offset: 0B], v
 2138      3411
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2139              		.loc 1 830 58 is_stmt 1 view .LVU645
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2140              		.loc 1 830 40 view .LVU646
 2141 0d5c 4883C220 		add	rdx, 32	# ivtmp.234,
 2142              	.L183:
 831:sieve_extend.c ****         }
 2143              		.loc 1 831 13 view .LVU647
 2144              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2145              		.loc 1 831 62 is_stmt 0 view .LVU648
 2146 0d60 C4C17D6F 		vmovdqa	ymm2, YMMWORD PTR [r10+rdx]	# tmp1075, MEM[base: vectp.191_325, index: ivtmp.234_483, offs
 2146      1412
GAS LISTING /tmp/ccBvFgp2.s 			page 63


 2147              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2148              		.loc 1 831 109 view .LVU649
 2149 0d66 C4C17E6F 		vmovdqu	ymm4, YMMWORD PTR [r11+rdx]	# tmp1076, MEM[base: vectp.195_332, index: ivtmp.234_483, offs
 2149      2413
 2150              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2151              		.loc 1 831 62 view .LVU650
 2152 0d6c C5EDD3F9 		vpsrlq	ymm7, ymm2, xmm1	# vect__49.193, tmp1075, _184
 2153              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2154              		.loc 1 831 109 view .LVU651
 2155 0d70 C5DDF3E8 		vpsllq	ymm5, ymm4, xmm0	# vect__54.197, tmp1076, _182
 2156              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2157              		.loc 1 831 80 view .LVU652
 2158 0d74 C545EBC5 		vpor	ymm8, ymm7, ymm5	# vect__58.198, vect__49.193, vect__54.197
 2159              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2160              		.loc 1 831 35 view .LVU653
 2161 0d78 C4417E7F 		vmovdqu	YMMWORD PTR [r9+rdx], ymm8	# MEM[base: vectp.200_341, index: ivtmp.234_483, offset: 0B], v
 2161      0411
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2162              		.loc 1 830 58 is_stmt 1 view .LVU654
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2163              		.loc 1 830 40 view .LVU655
 2164 0d7e 4883C220 		add	rdx, 32	# ivtmp.234,
 2165              	.L182:
 831:sieve_extend.c ****         }
 2166              		.loc 1 831 13 view .LVU656
 2167              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2168              		.loc 1 831 62 is_stmt 0 view .LVU657
 2169 0d82 C4417D6F 		vmovdqa	ymm9, YMMWORD PTR [r10+rdx]	# tmp1077, MEM[base: vectp.191_325, index: ivtmp.234_483, offs
 2169      0C12
 2170              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2171              		.loc 1 831 109 view .LVU658
 2172 0d88 C4C17E6F 		vmovdqu	ymm3, YMMWORD PTR [r11+rdx]	# tmp1078, MEM[base: vectp.195_332, index: ivtmp.234_483, offs
 2172      1C13
 2173              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2174              		.loc 1 831 62 view .LVU659
 2175 0d8e C535D3D1 		vpsrlq	ymm10, ymm9, xmm1	# vect__49.193, tmp1077, _184
 2176              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2177              		.loc 1 831 109 view .LVU660
 2178 0d92 C565F3D8 		vpsllq	ymm11, ymm3, xmm0	# vect__54.197, tmp1078, _182
 2179              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2180              		.loc 1 831 80 view .LVU661
 2181 0d96 C4412DEB 		vpor	ymm12, ymm10, ymm11	# vect__58.198, vect__49.193, vect__54.197
 2181      E3
 2182              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2183              		.loc 1 831 35 view .LVU662
 2184 0d9b C4417E7F 		vmovdqu	YMMWORD PTR [r9+rdx], ymm12	# MEM[base: vectp.200_341, index: ivtmp.234_483, offset: 0B], 
GAS LISTING /tmp/ccBvFgp2.s 			page 64


 2184      2411
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2185              		.loc 1 830 58 is_stmt 1 view .LVU663
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2186              		.loc 1 830 40 view .LVU664
 2187 0da1 4883C220 		add	rdx, 32	# ivtmp.234,
 2188              	.L181:
 831:sieve_extend.c ****         }
 2189              		.loc 1 831 13 view .LVU665
 2190              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2191              		.loc 1 831 62 is_stmt 0 view .LVU666
 2192 0da5 C4417D6F 		vmovdqa	ymm13, YMMWORD PTR [r10+rdx]	# tmp1079, MEM[base: vectp.191_325, index: ivtmp.234_483, off
 2192      2C12
 2193              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2194              		.loc 1 831 109 view .LVU667
 2195 0dab C4417E6F 		vmovdqu	ymm15, YMMWORD PTR [r11+rdx]	# tmp1080, MEM[base: vectp.195_332, index: ivtmp.234_483, off
 2195      3C13
 2196              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2197              		.loc 1 831 62 view .LVU668
 2198 0db1 C515D3F1 		vpsrlq	ymm14, ymm13, xmm1	# vect__49.193, tmp1079, _184
 2199              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2200              		.loc 1 831 109 view .LVU669
 2201 0db5 C585F3F0 		vpsllq	ymm6, ymm15, xmm0	# vect__54.197, tmp1080, _182
 2202              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2203              		.loc 1 831 80 view .LVU670
 2204 0db9 C58DEBD6 		vpor	ymm2, ymm14, ymm6	# vect__58.198, vect__49.193, vect__54.197
 2205              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2206              		.loc 1 831 35 view .LVU671
 2207 0dbd C4C17E7F 		vmovdqu	YMMWORD PTR [r9+rdx], ymm2	# MEM[base: vectp.200_341, index: ivtmp.234_483, offset: 0B], v
 2207      1411
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2208              		.loc 1 830 58 is_stmt 1 view .LVU672
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2209              		.loc 1 830 40 view .LVU673
 2210 0dc3 4883C220 		add	rdx, 32	# ivtmp.234,
 2211              	.L180:
 831:sieve_extend.c ****         }
 2212              		.loc 1 831 13 view .LVU674
 2213              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2214              		.loc 1 831 62 is_stmt 0 view .LVU675
 2215 0dc7 C4C17D6F 		vmovdqa	ymm7, YMMWORD PTR [r10+rdx]	# tmp1081, MEM[base: vectp.191_325, index: ivtmp.234_483, offs
 2215      3C12
 2216              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2217              		.loc 1 831 109 view .LVU676
 2218 0dcd C4C17E6F 		vmovdqu	ymm5, YMMWORD PTR [r11+rdx]	# tmp1082, MEM[base: vectp.195_332, index: ivtmp.234_483, offs
 2218      2C13
 2219              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2220              		.loc 1 831 62 view .LVU677
GAS LISTING /tmp/ccBvFgp2.s 			page 65


 2221 0dd3 C5C5D3E1 		vpsrlq	ymm4, ymm7, xmm1	# vect__49.193, tmp1081, _184
 2222              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2223              		.loc 1 831 109 view .LVU678
 2224 0dd7 C555F3C0 		vpsllq	ymm8, ymm5, xmm0	# vect__54.197, tmp1082, _182
 2225              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2226              		.loc 1 831 80 view .LVU679
 2227 0ddb C4415DEB 		vpor	ymm9, ymm4, ymm8	# vect__58.198, vect__49.193, vect__54.197
 2227      C8
 2228              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2229              		.loc 1 831 35 view .LVU680
 2230 0de0 C4417E7F 		vmovdqu	YMMWORD PTR [r9+rdx], ymm9	# MEM[base: vectp.200_341, index: ivtmp.234_483, offset: 0B], v
 2230      0C11
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2231              		.loc 1 830 58 is_stmt 1 view .LVU681
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2232              		.loc 1 830 40 view .LVU682
 2233 0de6 4883C220 		add	rdx, 32	# ivtmp.234,
 2234              	.L179:
 831:sieve_extend.c ****         }
 2235              		.loc 1 831 13 view .LVU683
 2236              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2237              		.loc 1 831 62 is_stmt 0 view .LVU684
 2238 0dea C4417D6F 		vmovdqa	ymm10, YMMWORD PTR [r10+rdx]	# tmp1083, MEM[base: vectp.191_325, index: ivtmp.234_483, off
 2238      1412
 2239              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2240              		.loc 1 831 109 view .LVU685
 2241 0df0 C4C17E6F 		vmovdqu	ymm3, YMMWORD PTR [r11+rdx]	# tmp1084, MEM[base: vectp.195_332, index: ivtmp.234_483, offs
 2241      1C13
 2242              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2243              		.loc 1 831 62 view .LVU686
 2244 0df6 C52DD3D9 		vpsrlq	ymm11, ymm10, xmm1	# vect__49.193, tmp1083, _184
 2245              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2246              		.loc 1 831 109 view .LVU687
 2247 0dfa C565F3E0 		vpsllq	ymm12, ymm3, xmm0	# vect__54.197, tmp1084, _182
 2248              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2249              		.loc 1 831 80 view .LVU688
 2250 0dfe C44125EB 		vpor	ymm13, ymm11, ymm12	# vect__58.198, vect__49.193, vect__54.197
 2250      EC
 2251              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2252              		.loc 1 831 35 view .LVU689
 2253 0e03 C4417E7F 		vmovdqu	YMMWORD PTR [r9+rdx], ymm13	# MEM[base: vectp.200_341, index: ivtmp.234_483, offset: 0B], 
 2253      2C11
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2254              		.loc 1 830 58 is_stmt 1 view .LVU690
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2255              		.loc 1 830 40 view .LVU691
 2256 0e09 4883C220 		add	rdx, 32	# ivtmp.234,
 2257 0e0d 4C39EA   		cmp	rdx, r13	# ivtmp.234, _485
GAS LISTING /tmp/ccBvFgp2.s 			page 66


 2258 0e10 0F843E01 		je	.L243	#,
 2258      0000
 2259              	.L60:
 831:sieve_extend.c ****         }
 2260              		.loc 1 831 13 discriminator 3 view .LVU692
 2261              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2262              		.loc 1 831 62 is_stmt 0 discriminator 3 view .LVU693
 2263 0e16 C4417D6F 		vmovdqa	ymm14, YMMWORD PTR [r10+rdx]	# tmp980, MEM[base: vectp.191_325, index: ivtmp.234_483, offs
 2263      3412
 2264              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2265              		.loc 1 831 109 discriminator 3 view .LVU694
 2266 0e1c C4C17E6F 		vmovdqu	ymm6, YMMWORD PTR [r11+rdx]	# tmp981, MEM[base: vectp.195_332, index: ivtmp.234_483, offse
 2266      3413
 2267              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2268              		.loc 1 831 62 discriminator 3 view .LVU695
 2269 0e22 C50DD3F9 		vpsrlq	ymm15, ymm14, xmm1	# vect__49.193, tmp980, _184
 2270              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2271              		.loc 1 831 109 discriminator 3 view .LVU696
 2272 0e26 C5CDF3D0 		vpsllq	ymm2, ymm6, xmm0	# vect__54.197, tmp981, _182
 2273              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2274              		.loc 1 831 80 discriminator 3 view .LVU697
 2275 0e2a C585EBFA 		vpor	ymm7, ymm15, ymm2	# vect__58.198, vect__49.193, vect__54.197
 2276              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2277              		.loc 1 831 35 discriminator 3 view .LVU698
 2278 0e2e C4C17E7F 		vmovdqu	YMMWORD PTR [r9+rdx], ymm7	# MEM[base: vectp.200_341, index: ivtmp.234_483, offset: 0B], v
 2278      3C11
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2279              		.loc 1 830 58 is_stmt 1 discriminator 3 view .LVU699
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2280              		.loc 1 830 40 discriminator 3 view .LVU700
 831:sieve_extend.c ****         }
 2281              		.loc 1 831 13 discriminator 3 view .LVU701
 2282              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2283              		.loc 1 831 62 is_stmt 0 discriminator 3 view .LVU702
 2284 0e34 C4C17D6F 		vmovdqa	ymm4, YMMWORD PTR 32[r10+rdx]	# tmp982, MEM[base: vectp.191_325, index: ivtmp.234_483, off
 2284      641220
 2285              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2286              		.loc 1 831 109 discriminator 3 view .LVU703
 2287 0e3b C4C17E6F 		vmovdqu	ymm5, YMMWORD PTR 32[r11+rdx]	# tmp983, MEM[base: vectp.195_332, index: ivtmp.234_483, off
 2287      6C1320
 2288              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2289              		.loc 1 831 62 discriminator 3 view .LVU704
 2290 0e42 C55DD3C1 		vpsrlq	ymm8, ymm4, xmm1	# vect__49.193, tmp982, _184
 2291              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2292              		.loc 1 831 109 discriminator 3 view .LVU705
 2293 0e46 C555F3C8 		vpsllq	ymm9, ymm5, xmm0	# vect__54.197, tmp983, _182
 2294              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
GAS LISTING /tmp/ccBvFgp2.s 			page 67


 831:sieve_extend.c ****         }
 2295              		.loc 1 831 80 discriminator 3 view .LVU706
 2296 0e4a C4413DEB 		vpor	ymm10, ymm8, ymm9	# vect__58.198, vect__49.193, vect__54.197
 2296      D1
 2297              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2298              		.loc 1 831 35 discriminator 3 view .LVU707
 2299 0e4f C4417E7F 		vmovdqu	YMMWORD PTR 32[r9+rdx], ymm10	# MEM[base: vectp.200_341, index: ivtmp.234_483, offset: 0B]
 2299      541120
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2300              		.loc 1 830 58 is_stmt 1 discriminator 3 view .LVU708
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2301              		.loc 1 830 40 discriminator 3 view .LVU709
 831:sieve_extend.c ****         }
 2302              		.loc 1 831 13 discriminator 3 view .LVU710
 2303              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2304              		.loc 1 831 62 is_stmt 0 discriminator 3 view .LVU711
 2305 0e56 C4417D6F 		vmovdqa	ymm11, YMMWORD PTR 64[r10+rdx]	# tmp984, MEM[base: vectp.191_325, index: ivtmp.234_483, of
 2305      5C1240
 2306              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2307              		.loc 1 831 109 discriminator 3 view .LVU712
 2308 0e5d C4C17E6F 		vmovdqu	ymm3, YMMWORD PTR 64[r11+rdx]	# tmp985, MEM[base: vectp.195_332, index: ivtmp.234_483, off
 2308      5C1340
 2309              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2310              		.loc 1 831 62 discriminator 3 view .LVU713
 2311 0e64 C525D3E1 		vpsrlq	ymm12, ymm11, xmm1	# vect__49.193, tmp984, _184
 2312              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2313              		.loc 1 831 109 discriminator 3 view .LVU714
 2314 0e68 C565F3E8 		vpsllq	ymm13, ymm3, xmm0	# vect__54.197, tmp985, _182
 2315              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2316              		.loc 1 831 80 discriminator 3 view .LVU715
 2317 0e6c C4411DEB 		vpor	ymm14, ymm12, ymm13	# vect__58.198, vect__49.193, vect__54.197
 2317      F5
 2318              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2319              		.loc 1 831 35 discriminator 3 view .LVU716
 2320 0e71 C4417E7F 		vmovdqu	YMMWORD PTR 64[r9+rdx], ymm14	# MEM[base: vectp.200_341, index: ivtmp.234_483, offset: 0B]
 2320      741140
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2321              		.loc 1 830 58 is_stmt 1 discriminator 3 view .LVU717
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2322              		.loc 1 830 40 discriminator 3 view .LVU718
 831:sieve_extend.c ****         }
 2323              		.loc 1 831 13 discriminator 3 view .LVU719
 2324              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2325              		.loc 1 831 62 is_stmt 0 discriminator 3 view .LVU720
 2326 0e78 C4417D6F 		vmovdqa	ymm15, YMMWORD PTR 96[r10+rdx]	# tmp986, MEM[base: vectp.191_325, index: ivtmp.234_483, of
 2326      7C1260
 2327              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2328              		.loc 1 831 109 discriminator 3 view .LVU721
GAS LISTING /tmp/ccBvFgp2.s 			page 68


 2329 0e7f C4C17E6F 		vmovdqu	ymm2, YMMWORD PTR 96[r11+rdx]	# tmp987, MEM[base: vectp.195_332, index: ivtmp.234_483, off
 2329      541360
 2330              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2331              		.loc 1 831 62 discriminator 3 view .LVU722
 2332 0e86 C585D3F1 		vpsrlq	ymm6, ymm15, xmm1	# vect__49.193, tmp986, _184
 2333              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2334              		.loc 1 831 109 discriminator 3 view .LVU723
 2335 0e8a C5EDF3F8 		vpsllq	ymm7, ymm2, xmm0	# vect__54.197, tmp987, _182
 2336              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2337              		.loc 1 831 80 discriminator 3 view .LVU724
 2338 0e8e C5CDEBE7 		vpor	ymm4, ymm6, ymm7	# vect__58.198, vect__49.193, vect__54.197
 2339              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2340              		.loc 1 831 35 discriminator 3 view .LVU725
 2341 0e92 C4C17E7F 		vmovdqu	YMMWORD PTR 96[r9+rdx], ymm4	# MEM[base: vectp.200_341, index: ivtmp.234_483, offset: 0B],
 2341      641160
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2342              		.loc 1 830 58 is_stmt 1 discriminator 3 view .LVU726
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2343              		.loc 1 830 40 discriminator 3 view .LVU727
 831:sieve_extend.c ****         }
 2344              		.loc 1 831 13 discriminator 3 view .LVU728
 2345              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2346              		.loc 1 831 62 is_stmt 0 discriminator 3 view .LVU729
 2347 0e99 C4417D6F 		vmovdqa	ymm8, YMMWORD PTR 128[r10+rdx]	# tmp988, MEM[base: vectp.191_325, index: ivtmp.234_483, of
 2347      84128000 
 2347      0000
 2348              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2349              		.loc 1 831 109 discriminator 3 view .LVU730
 2350 0ea3 C4417E6F 		vmovdqu	ymm9, YMMWORD PTR 128[r11+rdx]	# tmp989, MEM[base: vectp.195_332, index: ivtmp.234_483, of
 2350      8C138000 
 2350      0000
 2351              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2352              		.loc 1 831 62 discriminator 3 view .LVU731
 2353 0ead C5BDD3E9 		vpsrlq	ymm5, ymm8, xmm1	# vect__49.193, tmp988, _184
 2354              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2355              		.loc 1 831 109 discriminator 3 view .LVU732
 2356 0eb1 C535F3D0 		vpsllq	ymm10, ymm9, xmm0	# vect__54.197, tmp989, _182
 2357              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2358              		.loc 1 831 80 discriminator 3 view .LVU733
 2359 0eb5 C44155EB 		vpor	ymm11, ymm5, ymm10	# vect__58.198, vect__49.193, vect__54.197
 2359      DA
 2360              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2361              		.loc 1 831 35 discriminator 3 view .LVU734
 2362 0eba C4417E7F 		vmovdqu	YMMWORD PTR 128[r9+rdx], ymm11	# MEM[base: vectp.200_341, index: ivtmp.234_483, offset: 0B
 2362      9C118000 
 2362      0000
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
GAS LISTING /tmp/ccBvFgp2.s 			page 69


 2363              		.loc 1 830 58 is_stmt 1 discriminator 3 view .LVU735
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2364              		.loc 1 830 40 discriminator 3 view .LVU736
 831:sieve_extend.c ****         }
 2365              		.loc 1 831 13 discriminator 3 view .LVU737
 2366              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2367              		.loc 1 831 62 is_stmt 0 discriminator 3 view .LVU738
 2368 0ec4 C4417D6F 		vmovdqa	ymm12, YMMWORD PTR 160[r10+rdx]	# tmp990, MEM[base: vectp.191_325, index: ivtmp.234_483, o
 2368      A412A000 
 2368      0000
 2369              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2370              		.loc 1 831 109 discriminator 3 view .LVU739
 2371 0ece C4C17E6F 		vmovdqu	ymm3, YMMWORD PTR 160[r11+rdx]	# tmp991, MEM[base: vectp.195_332, index: ivtmp.234_483, of
 2371      9C13A000 
 2371      0000
 2372              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2373              		.loc 1 831 62 discriminator 3 view .LVU740
 2374 0ed8 C51DD3E9 		vpsrlq	ymm13, ymm12, xmm1	# vect__49.193, tmp990, _184
 2375              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2376              		.loc 1 831 109 discriminator 3 view .LVU741
 2377 0edc C565F3F0 		vpsllq	ymm14, ymm3, xmm0	# vect__54.197, tmp991, _182
 2378              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2379              		.loc 1 831 80 discriminator 3 view .LVU742
 2380 0ee0 C44115EB 		vpor	ymm15, ymm13, ymm14	# vect__58.198, vect__49.193, vect__54.197
 2380      FE
 2381              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2382              		.loc 1 831 35 discriminator 3 view .LVU743
 2383 0ee5 C4417E7F 		vmovdqu	YMMWORD PTR 160[r9+rdx], ymm15	# MEM[base: vectp.200_341, index: ivtmp.234_483, offset: 0B
 2383      BC11A000 
 2383      0000
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2384              		.loc 1 830 58 is_stmt 1 discriminator 3 view .LVU744
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2385              		.loc 1 830 40 discriminator 3 view .LVU745
 831:sieve_extend.c ****         }
 2386              		.loc 1 831 13 discriminator 3 view .LVU746
 2387              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2388              		.loc 1 831 62 is_stmt 0 discriminator 3 view .LVU747
 2389 0eef C4C17D6F 		vmovdqa	ymm6, YMMWORD PTR 192[r10+rdx]	# tmp992, MEM[base: vectp.191_325, index: ivtmp.234_483, of
 2389      B412C000 
 2389      0000
 2390              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2391              		.loc 1 831 109 discriminator 3 view .LVU748
 2392 0ef9 C4C17E6F 		vmovdqu	ymm7, YMMWORD PTR 192[r11+rdx]	# tmp993, MEM[base: vectp.195_332, index: ivtmp.234_483, of
 2392      BC13C000 
 2392      0000
 2393              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2394              		.loc 1 831 62 discriminator 3 view .LVU749
GAS LISTING /tmp/ccBvFgp2.s 			page 70


 2395 0f03 C5CDD3D1 		vpsrlq	ymm2, ymm6, xmm1	# vect__49.193, tmp992, _184
 2396              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2397              		.loc 1 831 109 discriminator 3 view .LVU750
 2398 0f07 C5C5F3E0 		vpsllq	ymm4, ymm7, xmm0	# vect__54.197, tmp993, _182
 2399              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2400              		.loc 1 831 80 discriminator 3 view .LVU751
 2401 0f0b C56DEBC4 		vpor	ymm8, ymm2, ymm4	# vect__58.198, vect__49.193, vect__54.197
 2402              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2403              		.loc 1 831 35 discriminator 3 view .LVU752
 2404 0f0f C4417E7F 		vmovdqu	YMMWORD PTR 192[r9+rdx], ymm8	# MEM[base: vectp.200_341, index: ivtmp.234_483, offset: 0B]
 2404      8411C000 
 2404      0000
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2405              		.loc 1 830 58 is_stmt 1 discriminator 3 view .LVU753
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2406              		.loc 1 830 40 discriminator 3 view .LVU754
 831:sieve_extend.c ****         }
 2407              		.loc 1 831 13 discriminator 3 view .LVU755
 2408              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2409              		.loc 1 831 62 is_stmt 0 discriminator 3 view .LVU756
 2410 0f19 C4C17D6F 		vmovdqa	ymm5, YMMWORD PTR 224[r10+rdx]	# tmp994, MEM[base: vectp.191_325, index: ivtmp.234_483, of
 2410      AC12E000 
 2410      0000
 2411              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2412              		.loc 1 831 109 discriminator 3 view .LVU757
 2413 0f23 C4417E6F 		vmovdqu	ymm10, YMMWORD PTR 224[r11+rdx]	# tmp995, MEM[base: vectp.195_332, index: ivtmp.234_483, o
 2413      9413E000 
 2413      0000
 2414              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2415              		.loc 1 831 62 discriminator 3 view .LVU758
 2416 0f2d C555D3C9 		vpsrlq	ymm9, ymm5, xmm1	# vect__49.193, tmp994, _184
 2417              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2418              		.loc 1 831 109 discriminator 3 view .LVU759
 2419 0f31 C52DF3D8 		vpsllq	ymm11, ymm10, xmm0	# vect__54.197, tmp995, _182
 2420              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2421              		.loc 1 831 80 discriminator 3 view .LVU760
 2422 0f35 C44135EB 		vpor	ymm12, ymm9, ymm11	# vect__58.198, vect__49.193, vect__54.197
 2422      E3
 2423              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2424              		.loc 1 831 35 discriminator 3 view .LVU761
 2425 0f3a C4417E7F 		vmovdqu	YMMWORD PTR 224[r9+rdx], ymm12	# MEM[base: vectp.200_341, index: ivtmp.234_483, offset: 0B
 2425      A411E000 
 2425      0000
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2426              		.loc 1 830 58 is_stmt 1 discriminator 3 view .LVU762
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2427              		.loc 1 830 40 discriminator 3 view .LVU763
 2428 0f44 4881C200 		add	rdx, 256	# ivtmp.234,
GAS LISTING /tmp/ccBvFgp2.s 			page 71


 2428      010000
 2429 0f4b 4C39EA   		cmp	rdx, r13	# ivtmp.234, _485
 2430 0f4e 0F85C2FE 		jne	.L60	#,
 2430      FFFF
 2431              	.L243:
 2432 0f54 4C8B6C24 		mov	r13, QWORD PTR -24[rsp]	# loop_distance, %sfp
 2432      E8
 2433 0f59 4989DA   		mov	r10, rbx	# niters_vector_mult_vf.188, niters.186
 2434 0f5c 4983E2FC 		and	r10, -4	# niters_vector_mult_vf.188,
 2435 0f60 4C39D3   		cmp	rbx, r10	# niters.186, niters_vector_mult_vf.188
 2436 0f63 4F8D2414 		lea	r12, [r12+r10]	# tmp.189,
 2437 0f67 4A8D142E 		lea	rdx, [rsi+r13]	# source_word,
 2438 0f6b 0F840703 		je	.L255	#,
 2438      0000
 2439              	.LVL92:
 831:sieve_extend.c ****         }
 2440              		.loc 1 831 13 view .LVU764
 2441              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2442              		.loc 1 831 58 is_stmt 0 view .LVU765
 2443 0f71 4A8D1C26 		lea	rbx, [rsi+r12]	# tmp467,
 2444              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2445              		.loc 1 831 21 view .LVU766
 2446 0f75 4E8D1C21 		lea	r11, [rcx+r12]	# tmp468,
 2447              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2448              		.loc 1 831 62 view .LVU767
 2449 0f79 4C8B04DF 		mov	r8, QWORD PTR [rdi+rbx*8]	# *_386, *_386
 2450              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2451              		.loc 1 831 109 view .LVU768
 2452 0f7d C46289F7 		shlx	r9, QWORD PTR 8[rdi+rbx*8], r14	# tmp469, *_391, shift
 2452      4CDF08
 2453              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2454              		.loc 1 831 62 view .LVU769
 2455 0f84 C442FBF7 		shrx	r10, r8, rax	# tmp471, *_386, shift_flipped
 2455      D0
 2456              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2457              		.loc 1 831 80 view .LVU770
 2458 0f89 4D09D1   		or	r9, r10	# tmp473, tmp471
 2459 0f8c 4E890CDF 		mov	QWORD PTR [rdi+r11*8], r9	# *_396, tmp473
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2460              		.loc 1 830 58 is_stmt 1 view .LVU771
 2461              	# sieve_extend.c:830:         for (register counter_t i = 0; i <loop_distance; i++) {
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2462              		.loc 1 830 59 is_stmt 0 view .LVU772
 2463 0f90 4D8D4C24 		lea	r9, 1[r12]	# i,
 2463      01
 2464              	.LVL93:
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2465              		.loc 1 830 40 is_stmt 1 view .LVU773
 2466              	# sieve_extend.c:830:         for (register counter_t i = 0; i <loop_distance; i++) {
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2467              		.loc 1 830 9 is_stmt 0 view .LVU774
GAS LISTING /tmp/ccBvFgp2.s 			page 72


 2468 0f95 4D39CD   		cmp	r13, r9	# loop_distance, i
 2469 0f98 0F86DA02 		jbe	.L255	#,
 2469      0000
 831:sieve_extend.c ****         }
 2470              		.loc 1 831 13 is_stmt 1 view .LVU775
 2471              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2472              		.loc 1 831 58 is_stmt 0 view .LVU776
 2473 0f9e 4A8D1C0E 		lea	rbx, [rsi+r9]	# tmp474,
 2474              	# sieve_extend.c:830:         for (register counter_t i = 0; i <loop_distance; i++) {
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2475              		.loc 1 830 59 view .LVU777
 2476 0fa2 4983C402 		add	r12, 2	# i,
 2477              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2478              		.loc 1 831 62 view .LVU778
 2479 0fa6 4C8B1CDF 		mov	r11, QWORD PTR [rdi+rbx*8]	# *_404, *_404
 2480              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2481              		.loc 1 831 21 view .LVU779
 2482 0faa 4901C9   		add	r9, rcx	# tmp475, copy_word
 2483              	.LVL94:
 2484              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2485              		.loc 1 831 109 view .LVU780
 2486 0fad C46289F7 		shlx	r8, QWORD PTR 8[rdi+rbx*8], r14	# tmp476, *_409, shift
 2486      44DF08
 2487              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2488              		.loc 1 831 62 view .LVU781
 2489 0fb4 C442FBF7 		shrx	r10, r11, rax	# tmp478, *_404, shift_flipped
 2489      D3
 2490              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2491              		.loc 1 831 80 view .LVU782
 2492 0fb9 4D09D0   		or	r8, r10	# tmp480, tmp478
 2493              	# sieve_extend.c:830:         for (register counter_t i = 0; i <loop_distance; i++) {
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2494              		.loc 1 830 9 view .LVU783
 2495 0fbc 4D39E5   		cmp	r13, r12	# loop_distance, i
 2496              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2497              		.loc 1 831 80 view .LVU784
 2498 0fbf 4E8904CF 		mov	QWORD PTR [rdi+r9*8], r8	# *_414, tmp480
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2499              		.loc 1 830 58 is_stmt 1 view .LVU785
 2500              	.LVL95:
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2501              		.loc 1 830 40 view .LVU786
 2502              	# sieve_extend.c:830:         for (register counter_t i = 0; i <loop_distance; i++) {
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2503              		.loc 1 830 9 is_stmt 0 view .LVU787
 2504 0fc3 0F86AF02 		jbe	.L255	#,
 2504      0000
 831:sieve_extend.c ****         }
 2505              		.loc 1 831 13 is_stmt 1 view .LVU788
 2506              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
GAS LISTING /tmp/ccBvFgp2.s 			page 73


 831:sieve_extend.c ****         }
 2507              		.loc 1 831 58 is_stmt 0 view .LVU789
 2508 0fc9 4C01E6   		add	rsi, r12	# tmp481, i
 2509              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2510              		.loc 1 831 21 view .LVU790
 2511 0fcc 4901CC   		add	r12, rcx	# tmp482, copy_word
 2512              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2513              		.loc 1 831 109 view .LVU791
 2514 0fcf C4E289F7 		shlx	rcx, QWORD PTR 8[rdi+rsi*8], r14	# tmp483, *_311, shift
 2514      4CF708
 2515              	.LVL96:
 2516              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2517              		.loc 1 831 62 view .LVU792
 2518 0fd6 488B34F7 		mov	rsi, QWORD PTR [rdi+rsi*8]	# *_306, *_306
 2519 0fda C462FBF7 		shrx	r14, rsi, rax	# tmp485, *_306, shift_flipped
 2519      F6
 2520              	.LVL97:
 2521              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2522              		.loc 1 831 80 view .LVU793
 2523 0fdf 4909CE   		or	r14, rcx	# tmp487, tmp483
 2524 0fe2 4E8934E7 		mov	QWORD PTR [rdi+r12*8], r14	# *_316, tmp487
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2525              		.loc 1 830 58 is_stmt 1 view .LVU794
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2526              		.loc 1 830 40 view .LVU795
 2527 0fe6 C5F877   		vzeroupper
 2528              	.L62:
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2529              		.loc 1 830 40 is_stmt 0 view .LVU796
 2530              	.LBE308:
 833:sieve_extend.c ****     }
 2531              		.loc 1 833 9 is_stmt 1 view .LVU797
 833:sieve_extend.c ****     }
 2532              		.loc 1 833 39 view .LVU798
 2533              	.LVL98:
 833:sieve_extend.c ****     }
 2534              		.loc 1 833 39 is_stmt 0 view .LVU799
 2535              	.LBE307:
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2536              		.loc 1 836 12 is_stmt 1 view .LVU800
 2537 0fe9 488B4C24 		mov	rcx, QWORD PTR -8[rsp]	# destination_stop_word, %sfp
 2537      F8
 2538 0fee 48C1E203 		sal	rdx, 3	# _260,
 2539              	.LVL99:
 2540              	.LBB310:
 2541              	# sieve_extend.c:833:         source_word += loop_distance; copy_word+= loop_distance;
 833:sieve_extend.c ****     }
 2542              		.loc 1 833 21 is_stmt 0 view .LVU801
 2543 0ff2 48C74424 		mov	QWORD PTR -32[rsp], 0	# %sfp,
 2543      E0000000 
 2543      00
 2544 0ffb 4C8D6901 		lea	r13, 1[rcx]	# _198,
 2545 0fff 4C896C24 		mov	QWORD PTR -24[rsp], r13	# %sfp, _198
GAS LISTING /tmp/ccBvFgp2.s 			page 74


 2545      E8
 2546              	.LVL100:
 2547              	.L56:
 833:sieve_extend.c ****     }
 2548              		.loc 1 833 21 view .LVU802
 2549 1004 4C8B5C24 		mov	r11, QWORD PTR -8[rsp]	# destination_stop_word, %sfp
 2549      F8
 2550 1009 4801FA   		add	rdx, rdi	# ivtmp.207, bitarray
 2551              	.LBE310:
 2552              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2553              		.loc 1 837 99 view .LVU803
 2554 100c 440FB664 		movzx	r12d, BYTE PTR -12[rsp]	# tmp1038, %sfp
 2554      24F4
 2555 1012 C46299F7 		shlx	r14, QWORD PTR 8[rdx], r12	# tmp560, MEM[base: _465, offset: 8B], tmp1038
 2555      7208
 2556              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2557              		.loc 1 837 54 view .LVU804
 2558 1018 440FB654 		movzx	r10d, BYTE PTR -16[rsp]	# tmp1039, %sfp
 2558      24F0
 2559              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2560              		.loc 1 836 57 view .LVU805
 2561 101e 4C8D6101 		lea	r12, 1[rcx]	# copy_word,
 2562 1022 4D89D8   		mov	r8, r11	# tmp570, destination_stop_word
 2563              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2564              		.loc 1 837 54 view .LVU806
 2565 1025 C4E2ABF7 		shrx	rsi, QWORD PTR [rdx], r10	# tmp562, MEM[base: _465, offset: 0B], tmp1039
 2565      32
 2566 102a 4929C8   		sub	r8, rcx	# tmp570, copy_word
 2567              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2568              		.loc 1 837 72 view .LVU807
 2569 102d 4909F6   		or	r14, rsi	# tmp564, tmp562
 2570 1030 4C8934CF 		mov	QWORD PTR [rdi+rcx*8], r14	# MEM[base: bitarray_90(D), index: copy_word_155, step: 8, offset: 
 2571 1034 4183E007 		and	r8d, 7	# tmp571,
 2572              	.LVL101:
 837:sieve_extend.c ****     }
 2573              		.loc 1 837 9 is_stmt 1 view .LVU808
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2574              		.loc 1 836 48 view .LVU809
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2575              		.loc 1 836 12 view .LVU810
 2576              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2577              		.loc 1 836 5 is_stmt 0 view .LVU811
 2578 1038 4D39E3   		cmp	r11, r12	# destination_stop_word, copy_word
 2579 103b 4C8D7208 		lea	r14, 8[rdx]	# ivtmp.207,
 2580 103f 0F8266FB 		jb	.L73	#,
 2580      FFFF
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2581              		.loc 1 836 5 view .LVU812
 2582 1045 4D85C0   		test	r8, r8	# tmp571
 2583 1048 0F844001 		je	.L249	#,
 2583      0000
GAS LISTING /tmp/ccBvFgp2.s 			page 75


 2584 104e 4983F801 		cmp	r8, 1	# tmp571,
 2585 1052 0F840601 		je	.L198	#,
 2585      0000
 2586 1058 4983F802 		cmp	r8, 2	# tmp571,
 2587 105c 0F84D800 		je	.L199	#,
 2587      0000
 2588 1062 4983F803 		cmp	r8, 3	# tmp571,
 2589 1066 0F84A900 		je	.L200	#,
 2589      0000
 2590 106c 4983F804 		cmp	r8, 4	# tmp571,
 2591 1070 747D     		je	.L201	#,
 2592 1072 4983F805 		cmp	r8, 5	# tmp571,
 2593 1076 7452     		je	.L202	#,
 2594 1078 4983F806 		cmp	r8, 6	# tmp571,
 2595 107c 7428     		je	.L203	#,
 837:sieve_extend.c ****     }
 2596              		.loc 1 837 9 is_stmt 1 view .LVU813
 2597              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2598              		.loc 1 837 54 is_stmt 0 view .LVU814
 2599 107e 498B06   		mov	rax, QWORD PTR [r14]	# MEM[base: _465, offset: 0B], MEM[base: _465, offset: 0B]
 2600              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2601              		.loc 1 837 99 view .LVU815
 2602 1081 440FB64C 		movzx	r9d, BYTE PTR -12[rsp]	# tmp1042, %sfp
 2602      24F4
 2603 1087 C442B1F7 		shlx	r11, QWORD PTR 8[r14], r9	# tmp777, MEM[base: _465, offset: 8B], tmp1042
 2603      5E08
 2604              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2605              		.loc 1 837 54 view .LVU816
 2606 108d 0FB65C24 		movzx	ebx, BYTE PTR -16[rsp]	# tmp1043, %sfp
 2606      F0
 2607 1092 C462E3F7 		shrx	r8, rax, rbx	# tmp779, MEM[base: _465, offset: 0B], tmp1043
 2607      C0
 2608              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2609              		.loc 1 837 72 view .LVU817
 2610 1097 4D09D8   		or	r8, r11	# tmp780, tmp777
 2611 109a 4C8D7210 		lea	r14, 16[rdx]	# ivtmp.207,
 2612 109e 4E8904E7 		mov	QWORD PTR [rdi+r12*8], r8	# MEM[base: bitarray_90(D), index: copy_word_155, step: 8, offset: 0
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2613              		.loc 1 836 48 is_stmt 1 view .LVU818
 2614              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2615              		.loc 1 836 57 is_stmt 0 view .LVU819
 2616 10a2 4C8D6102 		lea	r12, 2[rcx]	# copy_word,
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2617              		.loc 1 836 12 is_stmt 1 view .LVU820
 2618              	.L203:
 837:sieve_extend.c ****     }
 2619              		.loc 1 837 9 view .LVU821
 2620              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2621              		.loc 1 837 99 is_stmt 0 view .LVU822
 2622 10a6 0FB65424 		movzx	edx, BYTE PTR -12[rsp]	# tmp1044, %sfp
 2622      F4
GAS LISTING /tmp/ccBvFgp2.s 			page 76


 2623 10ab C442E9F7 		shlx	r10, QWORD PTR 8[r14], rdx	# tmp782, MEM[base: _465, offset: 8B], tmp1044
 2623      5608
 2624              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2625              		.loc 1 837 54 view .LVU823
 2626 10b1 0FB64C24 		movzx	ecx, BYTE PTR -16[rsp]	# tmp1045, %sfp
 2626      F0
 2627              	.LVL102:
 837:sieve_extend.c ****     }
 2628              		.loc 1 837 54 view .LVU824
 2629 10b6 C4C2F3F7 		shrx	rsi, QWORD PTR [r14], rcx	# tmp784, MEM[base: _465, offset: 0B], tmp1045
 2629      36
 2630              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2631              		.loc 1 837 72 view .LVU825
 2632 10bb 4909F2   		or	r10, rsi	# tmp785, tmp784
 2633 10be 4983C608 		add	r14, 8	# ivtmp.207,
 2634 10c2 4E8914E7 		mov	QWORD PTR [rdi+r12*8], r10	# MEM[base: bitarray_90(D), index: copy_word_155, step: 8, offset: 
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2635              		.loc 1 836 48 is_stmt 1 view .LVU826
 2636              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2637              		.loc 1 836 57 is_stmt 0 view .LVU827
 2638 10c6 4983C401 		add	r12, 1	# copy_word,
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2639              		.loc 1 836 12 is_stmt 1 view .LVU828
 2640              	.L202:
 837:sieve_extend.c ****     }
 2641              		.loc 1 837 9 view .LVU829
 2642              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2643              		.loc 1 837 99 is_stmt 0 view .LVU830
 2644 10ca 440FB64C 		movzx	r9d, BYTE PTR -12[rsp]	# tmp1046, %sfp
 2644      24F4
 2645 10d0 C442B1F7 		shlx	r11, QWORD PTR 8[r14], r9	# tmp787, MEM[base: _465, offset: 8B], tmp1046
 2645      5E08
 2646              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2647              		.loc 1 837 54 view .LVU831
 2648 10d6 0FB64424 		movzx	eax, BYTE PTR -16[rsp]	# tmp1047, %sfp
 2648      F0
 2649 10db C4C2FBF7 		shrx	rbx, QWORD PTR [r14], rax	# tmp789, MEM[base: _465, offset: 0B], tmp1047
 2649      1E
 2650              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2651              		.loc 1 837 72 view .LVU832
 2652 10e0 4909DB   		or	r11, rbx	# tmp790, tmp789
 2653 10e3 4983C608 		add	r14, 8	# ivtmp.207,
 2654 10e7 4E891CE7 		mov	QWORD PTR [rdi+r12*8], r11	# MEM[base: bitarray_90(D), index: copy_word_155, step: 8, offset: 
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2655              		.loc 1 836 48 is_stmt 1 view .LVU833
 2656              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2657              		.loc 1 836 57 is_stmt 0 view .LVU834
 2658 10eb 4983C401 		add	r12, 1	# copy_word,
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2659              		.loc 1 836 12 is_stmt 1 view .LVU835
GAS LISTING /tmp/ccBvFgp2.s 			page 77


 2660              	.L201:
 837:sieve_extend.c ****     }
 2661              		.loc 1 837 9 view .LVU836
 2662              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2663              		.loc 1 837 99 is_stmt 0 view .LVU837
 2664 10ef 440FB644 		movzx	r8d, BYTE PTR -12[rsp]	# tmp1048, %sfp
 2664      24F4
 2665 10f5 C4C2B9F7 		shlx	rdx, QWORD PTR 8[r14], r8	# tmp792, MEM[base: _465, offset: 8B], tmp1048
 2665      5608
 2666              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2667              		.loc 1 837 54 view .LVU838
 2668 10fb 440FB654 		movzx	r10d, BYTE PTR -16[rsp]	# tmp1049, %sfp
 2668      24F0
 2669 1101 C4C2ABF7 		shrx	rcx, QWORD PTR [r14], r10	# tmp794, MEM[base: _465, offset: 0B], tmp1049
 2669      0E
 2670              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2671              		.loc 1 837 72 view .LVU839
 2672 1106 4809CA   		or	rdx, rcx	# tmp795, tmp794
 2673 1109 4983C608 		add	r14, 8	# ivtmp.207,
 2674 110d 4A8914E7 		mov	QWORD PTR [rdi+r12*8], rdx	# MEM[base: bitarray_90(D), index: copy_word_155, step: 8, offset: 
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2675              		.loc 1 836 48 is_stmt 1 view .LVU840
 2676              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2677              		.loc 1 836 57 is_stmt 0 view .LVU841
 2678 1111 4983C401 		add	r12, 1	# copy_word,
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2679              		.loc 1 836 12 is_stmt 1 view .LVU842
 2680              	.L200:
 837:sieve_extend.c ****     }
 2681              		.loc 1 837 9 view .LVU843
 2682              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2683              		.loc 1 837 99 is_stmt 0 view .LVU844
 2684 1115 0FB67424 		movzx	esi, BYTE PTR -12[rsp]	# tmp1050, %sfp
 2684      F4
 2685 111a C442C9F7 		shlx	r9, QWORD PTR 8[r14], rsi	# tmp797, MEM[base: _465, offset: 8B], tmp1050
 2685      4E08
 2686              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2687              		.loc 1 837 54 view .LVU845
 2688 1120 440FB65C 		movzx	r11d, BYTE PTR -16[rsp]	# tmp1051, %sfp
 2688      24F0
 2689 1126 C4C2A3F7 		shrx	rax, QWORD PTR [r14], r11	# tmp799, MEM[base: _465, offset: 0B], tmp1051
 2689      06
 2690              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2691              		.loc 1 837 72 view .LVU846
 2692 112b 4909C1   		or	r9, rax	# tmp800, tmp799
 2693 112e 4983C608 		add	r14, 8	# ivtmp.207,
 2694 1132 4E890CE7 		mov	QWORD PTR [rdi+r12*8], r9	# MEM[base: bitarray_90(D), index: copy_word_155, step: 8, offset: 0
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2695              		.loc 1 836 48 is_stmt 1 view .LVU847
 2696              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
GAS LISTING /tmp/ccBvFgp2.s 			page 78


 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2697              		.loc 1 836 57 is_stmt 0 view .LVU848
 2698 1136 4983C401 		add	r12, 1	# copy_word,
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2699              		.loc 1 836 12 is_stmt 1 view .LVU849
 2700              	.L199:
 837:sieve_extend.c ****     }
 2701              		.loc 1 837 9 view .LVU850
 2702              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2703              		.loc 1 837 99 is_stmt 0 view .LVU851
 2704 113a 0FB65C24 		movzx	ebx, BYTE PTR -12[rsp]	# tmp1052, %sfp
 2704      F4
 2705 113f C442E1F7 		shlx	r8, QWORD PTR 8[r14], rbx	# tmp802, MEM[base: _465, offset: 8B], tmp1052
 2705      4608
 2706              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2707              		.loc 1 837 54 view .LVU852
 2708 1145 0FB65424 		movzx	edx, BYTE PTR -16[rsp]	# tmp1053, %sfp
 2708      F0
 2709 114a C442EBF7 		shrx	r10, QWORD PTR [r14], rdx	# tmp804, MEM[base: _465, offset: 0B], tmp1053
 2709      16
 2710              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2711              		.loc 1 837 72 view .LVU853
 2712 114f 4D09D0   		or	r8, r10	# tmp805, tmp804
 2713 1152 4983C608 		add	r14, 8	# ivtmp.207,
 2714 1156 4E8904E7 		mov	QWORD PTR [rdi+r12*8], r8	# MEM[base: bitarray_90(D), index: copy_word_155, step: 8, offset: 0
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2715              		.loc 1 836 48 is_stmt 1 view .LVU854
 2716              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2717              		.loc 1 836 57 is_stmt 0 view .LVU855
 2718 115a 4983C401 		add	r12, 1	# copy_word,
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2719              		.loc 1 836 12 is_stmt 1 view .LVU856
 2720              	.L198:
 837:sieve_extend.c ****     }
 2721              		.loc 1 837 9 view .LVU857
 2722              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2723              		.loc 1 837 99 is_stmt 0 view .LVU858
 2724 115e 0FB64C24 		movzx	ecx, BYTE PTR -12[rsp]	# tmp1054, %sfp
 2724      F4
 2725 1163 C4C2F1F7 		shlx	rsi, QWORD PTR 8[r14], rcx	# tmp807, MEM[base: _465, offset: 8B], tmp1054
 2725      7608
 2726              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2727              		.loc 1 837 54 view .LVU859
 2728 1169 440FB64C 		movzx	r9d, BYTE PTR -16[rsp]	# tmp1055, %sfp
 2728      24F0
 2729 116f C442B3F7 		shrx	r11, QWORD PTR [r14], r9	# tmp809, MEM[base: _465, offset: 0B], tmp1055
 2729      1E
 2730              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2731              		.loc 1 837 72 view .LVU860
 2732 1174 4C09DE   		or	rsi, r11	# tmp810, tmp809
GAS LISTING /tmp/ccBvFgp2.s 			page 79


 2733 1177 4983C608 		add	r14, 8	# ivtmp.207,
 2734 117b 4A8934E7 		mov	QWORD PTR [rdi+r12*8], rsi	# MEM[base: bitarray_90(D), index: copy_word_155, step: 8, offset: 
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2735              		.loc 1 836 48 is_stmt 1 view .LVU861
 2736              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2737              		.loc 1 836 57 is_stmt 0 view .LVU862
 2738 117f 4983C401 		add	r12, 1	# copy_word,
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2739              		.loc 1 836 12 is_stmt 1 view .LVU863
 2740              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2741              		.loc 1 836 5 is_stmt 0 view .LVU864
 2742 1183 4C396424 		cmp	QWORD PTR -8[rsp], r12	# %sfp, copy_word
 2742      F8
 2743 1188 0F821DFA 		jb	.L73	#,
 2743      FFFF
 2744              	.L249:
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2745              		.loc 1 836 5 view .LVU865
 2746 118e 8B4424F4 		mov	eax, DWORD PTR -12[rsp]	# _182, %sfp
 2747 1192 8B5C24F0 		mov	ebx, DWORD PTR -16[rsp]	# _184, %sfp
 2748              	.L72:
 837:sieve_extend.c ****     }
 2749              		.loc 1 837 9 is_stmt 1 view .LVU866
 2750              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2751              		.loc 1 837 54 is_stmt 0 view .LVU867
 2752 1196 C4C2E3F7 		shrx	rdx, QWORD PTR [r14], rbx	# tmp725, MEM[base: _465, offset: 0B], _184
 2752      16
 2753              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2754              		.loc 1 837 99 view .LVU868
 2755 119b C442F9F7 		shlx	r8, QWORD PTR 8[r14], rax	# tmp723, MEM[base: _465, offset: 8B], _182
 2755      4608
 2756              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2757              		.loc 1 837 72 view .LVU869
 2758 11a1 4909D0   		or	r8, rdx	# tmp726, tmp725
 2759 11a4 4983C640 		add	r14, 64	# ivtmp.207,
 2760 11a8 4E8904E7 		mov	QWORD PTR [rdi+r12*8], r8	# MEM[base: bitarray_90(D), index: copy_word_155, step: 8, offset: 0
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2761              		.loc 1 836 48 is_stmt 1 view .LVU870
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2762              		.loc 1 836 12 view .LVU871
 837:sieve_extend.c ****     }
 2763              		.loc 1 837 9 view .LVU872
 2764              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2765              		.loc 1 837 54 is_stmt 0 view .LVU873
 2766 11ac C4C2E3F7 		shrx	rcx, QWORD PTR -56[r14], rbx	# tmp732, MEM[base: _465, offset: 0B], _184
 2766      4EC8
 2767              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2768              		.loc 1 837 99 view .LVU874
 2769 11b2 C442F9F7 		shlx	r10, QWORD PTR -48[r14], rax	# tmp730, MEM[base: _465, offset: 8B], _182
 2769      56D0
GAS LISTING /tmp/ccBvFgp2.s 			page 80


 2770              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2771              		.loc 1 837 72 view .LVU875
 2772 11b8 4909CA   		or	r10, rcx	# tmp733, tmp732
 2773 11bb 4E8954E7 		mov	QWORD PTR 8[rdi+r12*8], r10	# MEM[base: bitarray_90(D), index: copy_word_155, step: 8, offset:
 2773      08
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2774              		.loc 1 836 48 is_stmt 1 view .LVU876
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2775              		.loc 1 836 12 view .LVU877
 837:sieve_extend.c ****     }
 2776              		.loc 1 837 9 view .LVU878
 2777              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2778              		.loc 1 837 54 is_stmt 0 view .LVU879
 2779 11c0 C442E3F7 		shrx	r9, QWORD PTR -48[r14], rbx	# tmp739, MEM[base: _465, offset: 0B], _184
 2779      4ED0
 2780              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2781              		.loc 1 837 99 view .LVU880
 2782 11c6 C4C2F9F7 		shlx	rsi, QWORD PTR -40[r14], rax	# tmp737, MEM[base: _465, offset: 8B], _182
 2782      76D8
 2783              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2784              		.loc 1 837 72 view .LVU881
 2785 11cc 4C09CE   		or	rsi, r9	# tmp740, tmp739
 2786 11cf 4A8974E7 		mov	QWORD PTR 16[rdi+r12*8], rsi	# MEM[base: bitarray_90(D), index: copy_word_155, step: 8, offset
 2786      10
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2787              		.loc 1 836 48 is_stmt 1 view .LVU882
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2788              		.loc 1 836 12 view .LVU883
 837:sieve_extend.c ****     }
 2789              		.loc 1 837 9 view .LVU884
 2790              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2791              		.loc 1 837 54 is_stmt 0 view .LVU885
 2792 11d4 C442E3F7 		shrx	r8, QWORD PTR -40[r14], rbx	# tmp746, MEM[base: _465, offset: 0B], _184
 2792      46D8
 2793              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2794              		.loc 1 837 99 view .LVU886
 2795 11da C442F9F7 		shlx	r11, QWORD PTR -32[r14], rax	# tmp744, MEM[base: _465, offset: 8B], _182
 2795      5EE0
 2796              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2797              		.loc 1 837 72 view .LVU887
 2798 11e0 4D09C3   		or	r11, r8	# tmp747, tmp746
 2799 11e3 4E895CE7 		mov	QWORD PTR 24[rdi+r12*8], r11	# MEM[base: bitarray_90(D), index: copy_word_155, step: 8, offset
 2799      18
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2800              		.loc 1 836 48 is_stmt 1 view .LVU888
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2801              		.loc 1 836 12 view .LVU889
 837:sieve_extend.c ****     }
 2802              		.loc 1 837 9 view .LVU890
 2803              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
GAS LISTING /tmp/ccBvFgp2.s 			page 81


 837:sieve_extend.c ****     }
 2804              		.loc 1 837 99 is_stmt 0 view .LVU891
 2805 11e8 C4C2F9F7 		shlx	rdx, QWORD PTR -24[r14], rax	# tmp751, MEM[base: _465, offset: 8B], _182
 2805      56E8
 2806              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2807              		.loc 1 837 54 view .LVU892
 2808 11ee C442E3F7 		shrx	r10, QWORD PTR -32[r14], rbx	# tmp753, MEM[base: _465, offset: 0B], _184
 2808      56E0
 2809              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2810              		.loc 1 837 72 view .LVU893
 2811 11f4 4C09D2   		or	rdx, r10	# tmp754, tmp753
 2812 11f7 4A8954E7 		mov	QWORD PTR 32[rdi+r12*8], rdx	# MEM[base: bitarray_90(D), index: copy_word_155, step: 8, offset
 2812      20
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2813              		.loc 1 836 48 is_stmt 1 view .LVU894
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2814              		.loc 1 836 12 view .LVU895
 837:sieve_extend.c ****     }
 2815              		.loc 1 837 9 view .LVU896
 2816              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2817              		.loc 1 837 99 is_stmt 0 view .LVU897
 2818 11fc C4C2F9F7 		shlx	rcx, QWORD PTR -16[r14], rax	# tmp758, MEM[base: _465, offset: 8B], _182
 2818      4EF0
 2819              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2820              		.loc 1 837 54 view .LVU898
 2821 1202 C4C2E3F7 		shrx	rsi, QWORD PTR -24[r14], rbx	# tmp760, MEM[base: _465, offset: 0B], _184
 2821      76E8
 2822              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2823              		.loc 1 837 72 view .LVU899
 2824 1208 4809F1   		or	rcx, rsi	# tmp761, tmp760
 2825 120b 4A894CE7 		mov	QWORD PTR 40[rdi+r12*8], rcx	# MEM[base: bitarray_90(D), index: copy_word_155, step: 8, offset
 2825      28
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2826              		.loc 1 836 48 is_stmt 1 view .LVU900
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2827              		.loc 1 836 12 view .LVU901
 837:sieve_extend.c ****     }
 2828              		.loc 1 837 9 view .LVU902
 2829              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2830              		.loc 1 837 99 is_stmt 0 view .LVU903
 2831 1210 C442F9F7 		shlx	r11, QWORD PTR -8[r14], rax	# tmp765, MEM[base: _465, offset: 8B], _182
 2831      5EF8
 2832              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2833              		.loc 1 837 54 view .LVU904
 2834 1216 C442E3F7 		shrx	r9, QWORD PTR -16[r14], rbx	# tmp767, MEM[base: _465, offset: 0B], _184
 2834      4EF0
 2835              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2836              		.loc 1 837 72 view .LVU905
 2837 121c 4D09CB   		or	r11, r9	# tmp768, tmp767
GAS LISTING /tmp/ccBvFgp2.s 			page 82


 2838 121f 4E895CE7 		mov	QWORD PTR 48[rdi+r12*8], r11	# MEM[base: bitarray_90(D), index: copy_word_155, step: 8, offset
 2838      30
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2839              		.loc 1 836 48 is_stmt 1 view .LVU906
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2840              		.loc 1 836 12 view .LVU907
 837:sieve_extend.c ****     }
 2841              		.loc 1 837 9 view .LVU908
 2842              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2843              		.loc 1 837 99 is_stmt 0 view .LVU909
 2844 1224 C442F9F7 		shlx	r8, QWORD PTR [r14], rax	# tmp772, MEM[base: _465, offset: 8B], _182
 2844      06
 2845              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2846              		.loc 1 837 54 view .LVU910
 2847 1229 C4C2E3F7 		shrx	rdx, QWORD PTR -8[r14], rbx	# tmp774, MEM[base: _465, offset: 0B], _184
 2847      56F8
 2848              	# sieve_extend.c:837:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 837:sieve_extend.c ****     }
 2849              		.loc 1 837 72 view .LVU911
 2850 122f 4909D0   		or	r8, rdx	# tmp775, tmp774
 2851 1232 4E8944E7 		mov	QWORD PTR 56[rdi+r12*8], r8	# MEM[base: bitarray_90(D), index: copy_word_155, step: 8, offset:
 2851      38
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2852              		.loc 1 836 48 is_stmt 1 view .LVU912
 2853              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2854              		.loc 1 836 57 is_stmt 0 view .LVU913
 2855 1237 4983C408 		add	r12, 8	# copy_word,
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2856              		.loc 1 836 12 is_stmt 1 view .LVU914
 2857              	# sieve_extend.c:836:     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 836:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2858              		.loc 1 836 5 is_stmt 0 view .LVU915
 2859 123b 4C396424 		cmp	QWORD PTR -8[rsp], r12	# %sfp, copy_word
 2859      F8
 2860 1240 0F8350FF 		jnb	.L72	#,
 2860      FFFF
 2861 1246 E960F9FF 		jmp	.L73	#
 2861      FF
 2862              	.LVL103:
 2863 124b 0F1F4400 		.p2align 4,,7
 2863      00
 2864              		.p2align 3
 2865              	.L260:
 811:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 2866              		.loc 1 811 9 is_stmt 1 view .LVU916
 2867              	# sieve_extend.c:811:         bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the s
 811:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 2868              		.loc 1 811 29 is_stmt 0 view .LVU917
 2869 1250 488B7C24 		mov	rdi, QWORD PTR -24[rsp]	# pretmp_178, %sfp
 2869      E8
 2870              	.LVL104:
 2871              	# sieve_extend.c:813:                                 & keepmask(copy_start) & chopmask(destination
 813:sieve_extend.c ****         return; // rapid exit for one word variant
 2872              		.loc 1 813 56 view .LVU918
GAS LISTING /tmp/ccBvFgp2.s 			page 83


 2873 1255 4D21FA   		and	r10, r15	# _189, _193
 2874 1258 4D21D1   		and	r9, r10	# tmp405, tmp404
 2875              	# sieve_extend.c:811:         bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the s
 811:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 2876              		.loc 1 811 29 view .LVU919
 2877 125b 4C09CF   		or	rdi, r9	# pretmp_178, tmp405
 2878 125e 49897D00 		mov	QWORD PTR 0[r13], rdi	# *_177, tmp406
 814:sieve_extend.c ****     }
 2879              		.loc 1 814 9 is_stmt 1 view .LVU920
 2880              	# sieve_extend.c:841: }
 2881              		.loc 1 841 1 is_stmt 0 view .LVU921
 2882 1262 488D65D8 		lea	rsp, -40[rbp]	#,
 2883 1266 5B       		pop	rbx	#
 2884 1267 415C     		pop	r12	#
 2885 1269 415D     		pop	r13	#
 2886 126b 415E     		pop	r14	#
 2887              	.LVL105:
 2888              		.loc 1 841 1 view .LVU922
 2889 126d 415F     		pop	r15	#
 2890 126f 5D       		pop	rbp	#
 2891              		.cfi_remember_state
 2892              		.cfi_def_cfa 7, 8
 2893 1270 C3       		ret	
 2894              	.LVL106:
 2895              		.p2align 4,,7
 2896 1271 0F1F8000 		.p2align 3
 2896      000000
 2897              	.L255:
 2898              		.cfi_restore_state
 2899              		.loc 1 841 1 view .LVU923
 2900 1278 C5F877   		vzeroupper
 2901 127b E969FDFF 		jmp	.L62	#
 2901      FF
 2902              	.LVL107:
 2903              		.p2align 4,,7
 2904              		.p2align 3
 2905              	.L257:
 2906              		.loc 1 841 1 view .LVU924
 2907 1280 C5F877   		vzeroupper
 2908 1283 E923F9FF 		jmp	.L73	#
 2908      FF
 2909              	.LVL108:
 2910              		.p2align 4,,7
 2911              		.p2align 3
 2912              	.L77:
 2913              	# sieve_extend.c:807:     register counter_t source_word = wordindex(source_start);
 807:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 2914              		.loc 1 807 24 view .LVU925
 2915 1288 48897424 		mov	QWORD PTR -40[rsp], rsi	# %sfp, source_word
 2915      D8
 2916              	# sieve_extend.c:821:     copy_word++;
 821:sieve_extend.c **** 
 2917              		.loc 1 821 14 view .LVU926
 2918 128d 4989CC   		mov	r12, rcx	# copy_word, copy_word
 2919 1290 4C8D5601 		lea	r10, 1[rsi]	# tmp566,
 2920 1294 E9FBF5FF 		jmp	.L67	#
 2920      FF
GAS LISTING /tmp/ccBvFgp2.s 			page 84


 2921              	.LVL109:
 2922              	.L57:
 821:sieve_extend.c **** 
 2923              		.loc 1 821 14 view .LVU927
 2924 1299 488B5424 		mov	rdx, QWORD PTR -24[rsp]	# loop_distance, %sfp
 2924      E8
 2925              	.LBB311:
 2926              	.LBB309:
 2927              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2928              		.loc 1 831 35 view .LVU928
 2929 129e 4929F0   		sub	r8, rsi	# tmp490, source_word
 2930 12a1 4801F2   		add	rdx, rsi	# loop_distance, source_word
 2931 12a4 4C8D24D7 		lea	r12, [rdi+rdx*8]	# _481,
 2932 12a8 4C89E0   		mov	rax, r12	# tmp575, _481
 2933 12ab 4C29D8   		sub	rax, r11	# tmp575, ivtmp.225
 2934 12ae 4883E808 		sub	rax, 8	# tmp576,
 2935 12b2 48C1E803 		shr	rax, 3	# tmp574,
 2936 12b6 4883C001 		add	rax, 1	# tmp577,
 2937 12ba 83E007   		and	eax, 7	# tmp578,
 2938 12bd 0F842401 		je	.L250	#,
 2938      0000
 2939 12c3 4883F801 		cmp	rax, 1	# tmp578,
 2940 12c7 0F84EF00 		je	.L185	#,
 2940      0000
 2941 12cd 4883F802 		cmp	rax, 2	# tmp578,
 2942 12d1 0F84C400 		je	.L186	#,
 2942      0000
 2943 12d7 4883F803 		cmp	rax, 3	# tmp578,
 2944 12db 0F849800 		je	.L187	#,
 2944      0000
 2945 12e1 4883F804 		cmp	rax, 4	# tmp578,
 2946 12e5 7471     		je	.L188	#,
 2947 12e7 4883F805 		cmp	rax, 5	# tmp578,
 2948 12eb 7449     		je	.L189	#,
 2949 12ed 4883F806 		cmp	rax, 6	# tmp578,
 2950 12f1 7422     		je	.L190	#,
 2951              	.LVL110:
 831:sieve_extend.c ****         }
 2952              		.loc 1 831 13 is_stmt 1 view .LVU929
 2953              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2954              		.loc 1 831 62 is_stmt 0 view .LVU930
 2955 12f3 440FB64C 		movzx	r9d, BYTE PTR -16[rsp]	# tmp1057, %sfp
 2955      24F0
 2956 12f9 C442B3F7 		shrx	r13, QWORD PTR [r11], r9	# tmp812, MEM[base: _475, offset: 0B], tmp1057
 2956      2B
 2957              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2958              		.loc 1 831 109 view .LVU931
 2959 12fe 0FB65C24 		movzx	ebx, BYTE PTR -12[rsp]	# tmp1058, %sfp
 2959      F4
 2960 1303 C442E1F7 		shlx	r10, QWORD PTR 8[r11], rbx	# tmp814, MEM[base: _475, offset: 8B], tmp1058
 2960      5308
 2961              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2962              		.loc 1 831 80 view .LVU932
GAS LISTING /tmp/ccBvFgp2.s 			page 85


 2963 1309 4D09D5   		or	r13, r10	# tmp815, tmp814
 2964 130c 4F896CC3 		mov	QWORD PTR 8[r11+r8*8], r13	# MEM[base: _475, index: _477, step: 8, offset: 8B], tmp815
 2964      08
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2965              		.loc 1 830 58 is_stmt 1 view .LVU933
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2966              		.loc 1 830 40 view .LVU934
 2967 1311 4983C308 		add	r11, 8	# ivtmp.225,
 2968              	.L190:
 831:sieve_extend.c ****         }
 2969              		.loc 1 831 13 view .LVU935
 2970              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2971              		.loc 1 831 62 is_stmt 0 view .LVU936
 2972 1315 0FB64C24 		movzx	ecx, BYTE PTR -16[rsp]	# tmp1059, %sfp
 2972      F0
 2973              	.LVL111:
 831:sieve_extend.c ****         }
 2974              		.loc 1 831 62 view .LVU937
 2975 131a C442F3F7 		shrx	r14, QWORD PTR [r11], rcx	# tmp817, MEM[base: _475, offset: 0B], tmp1059
 2975      33
 2976              	.LVL112:
 2977              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2978              		.loc 1 831 109 view .LVU938
 2979 131f 0FB67424 		movzx	esi, BYTE PTR -12[rsp]	# tmp1060, %sfp
 2979      F4
 2980 1324 C4C2C9F7 		shlx	rax, QWORD PTR 8[r11], rsi	# tmp819, MEM[base: _475, offset: 8B], tmp1060
 2980      4308
 2981              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2982              		.loc 1 831 80 view .LVU939
 2983 132a 4909C6   		or	r14, rax	# tmp820, tmp819
 2984 132d 4F8974C3 		mov	QWORD PTR 8[r11+r8*8], r14	# MEM[base: _475, index: _477, step: 8, offset: 8B], tmp820
 2984      08
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2985              		.loc 1 830 58 is_stmt 1 view .LVU940
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 2986              		.loc 1 830 40 view .LVU941
 2987 1332 4983C308 		add	r11, 8	# ivtmp.225,
 2988              	.L189:
 831:sieve_extend.c ****         }
 2989              		.loc 1 831 13 view .LVU942
 2990              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2991              		.loc 1 831 62 is_stmt 0 view .LVU943
 2992 1336 440FB64C 		movzx	r9d, BYTE PTR -16[rsp]	# tmp1061, %sfp
 2992      24F0
 2993 133c C442B3F7 		shrx	r13, QWORD PTR [r11], r9	# tmp822, MEM[base: _475, offset: 0B], tmp1061
 2993      2B
 2994              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2995              		.loc 1 831 109 view .LVU944
 2996 1341 0FB65C24 		movzx	ebx, BYTE PTR -12[rsp]	# tmp1062, %sfp
 2996      F4
 2997 1346 C442E1F7 		shlx	r10, QWORD PTR 8[r11], rbx	# tmp824, MEM[base: _475, offset: 8B], tmp1062
 2997      5308
GAS LISTING /tmp/ccBvFgp2.s 			page 86


 2998              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 2999              		.loc 1 831 80 view .LVU945
 3000 134c 4D09D5   		or	r13, r10	# tmp825, tmp824
 3001 134f 4F896CC3 		mov	QWORD PTR 8[r11+r8*8], r13	# MEM[base: _475, index: _477, step: 8, offset: 8B], tmp825
 3001      08
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3002              		.loc 1 830 58 is_stmt 1 view .LVU946
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3003              		.loc 1 830 40 view .LVU947
 3004 1354 4983C308 		add	r11, 8	# ivtmp.225,
 3005              	.L188:
 831:sieve_extend.c ****         }
 3006              		.loc 1 831 13 view .LVU948
 3007              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3008              		.loc 1 831 62 is_stmt 0 view .LVU949
 3009 1358 0FB64C24 		movzx	ecx, BYTE PTR -16[rsp]	# tmp1063, %sfp
 3009      F0
 3010 135d C442F3F7 		shrx	r14, QWORD PTR [r11], rcx	# tmp827, MEM[base: _475, offset: 0B], tmp1063
 3010      33
 3011              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3012              		.loc 1 831 109 view .LVU950
 3013 1362 0FB67424 		movzx	esi, BYTE PTR -12[rsp]	# tmp1064, %sfp
 3013      F4
 3014 1367 C4C2C9F7 		shlx	rax, QWORD PTR 8[r11], rsi	# tmp829, MEM[base: _475, offset: 8B], tmp1064
 3014      4308
 3015              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3016              		.loc 1 831 80 view .LVU951
 3017 136d 4909C6   		or	r14, rax	# tmp830, tmp829
 3018 1370 4F8974C3 		mov	QWORD PTR 8[r11+r8*8], r14	# MEM[base: _475, index: _477, step: 8, offset: 8B], tmp830
 3018      08
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3019              		.loc 1 830 58 is_stmt 1 view .LVU952
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3020              		.loc 1 830 40 view .LVU953
 3021 1375 4983C308 		add	r11, 8	# ivtmp.225,
 3022              	.L187:
 831:sieve_extend.c ****         }
 3023              		.loc 1 831 13 view .LVU954
 3024              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3025              		.loc 1 831 62 is_stmt 0 view .LVU955
 3026 1379 440FB64C 		movzx	r9d, BYTE PTR -16[rsp]	# tmp1065, %sfp
 3026      24F0
 3027 137f C442B3F7 		shrx	r13, QWORD PTR [r11], r9	# tmp832, MEM[base: _475, offset: 0B], tmp1065
 3027      2B
 3028              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3029              		.loc 1 831 109 view .LVU956
 3030 1384 0FB65C24 		movzx	ebx, BYTE PTR -12[rsp]	# tmp1066, %sfp
 3030      F4
 3031 1389 C442E1F7 		shlx	r10, QWORD PTR 8[r11], rbx	# tmp834, MEM[base: _475, offset: 8B], tmp1066
 3031      5308
 3032              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
GAS LISTING /tmp/ccBvFgp2.s 			page 87


 831:sieve_extend.c ****         }
 3033              		.loc 1 831 80 view .LVU957
 3034 138f 4D09D5   		or	r13, r10	# tmp835, tmp834
 3035 1392 4F896CC3 		mov	QWORD PTR 8[r11+r8*8], r13	# MEM[base: _475, index: _477, step: 8, offset: 8B], tmp835
 3035      08
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3036              		.loc 1 830 58 is_stmt 1 view .LVU958
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3037              		.loc 1 830 40 view .LVU959
 3038 1397 4983C308 		add	r11, 8	# ivtmp.225,
 3039              	.L186:
 831:sieve_extend.c ****         }
 3040              		.loc 1 831 13 view .LVU960
 3041              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3042              		.loc 1 831 62 is_stmt 0 view .LVU961
 3043 139b 0FB64C24 		movzx	ecx, BYTE PTR -16[rsp]	# tmp1067, %sfp
 3043      F0
 3044 13a0 C442F3F7 		shrx	r14, QWORD PTR [r11], rcx	# tmp837, MEM[base: _475, offset: 0B], tmp1067
 3044      33
 3045              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3046              		.loc 1 831 109 view .LVU962
 3047 13a5 0FB67424 		movzx	esi, BYTE PTR -12[rsp]	# tmp1068, %sfp
 3047      F4
 3048 13aa C4C2C9F7 		shlx	rax, QWORD PTR 8[r11], rsi	# tmp839, MEM[base: _475, offset: 8B], tmp1068
 3048      4308
 3049              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3050              		.loc 1 831 80 view .LVU963
 3051 13b0 4909C6   		or	r14, rax	# tmp840, tmp839
 3052 13b3 4F8974C3 		mov	QWORD PTR 8[r11+r8*8], r14	# MEM[base: _475, index: _477, step: 8, offset: 8B], tmp840
 3052      08
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3053              		.loc 1 830 58 is_stmt 1 view .LVU964
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3054              		.loc 1 830 40 view .LVU965
 3055 13b8 4983C308 		add	r11, 8	# ivtmp.225,
 3056              	.L185:
 831:sieve_extend.c ****         }
 3057              		.loc 1 831 13 view .LVU966
 3058              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3059              		.loc 1 831 62 is_stmt 0 view .LVU967
 3060 13bc 440FB64C 		movzx	r9d, BYTE PTR -16[rsp]	# tmp1069, %sfp
 3060      24F0
 3061 13c2 C442B3F7 		shrx	r13, QWORD PTR [r11], r9	# tmp842, MEM[base: _475, offset: 0B], tmp1069
 3061      2B
 3062              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3063              		.loc 1 831 109 view .LVU968
 3064 13c7 0FB65C24 		movzx	ebx, BYTE PTR -12[rsp]	# tmp1070, %sfp
 3064      F4
 3065 13cc C442E1F7 		shlx	r10, QWORD PTR 8[r11], rbx	# tmp844, MEM[base: _475, offset: 8B], tmp1070
 3065      5308
 3066              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
GAS LISTING /tmp/ccBvFgp2.s 			page 88


 3067              		.loc 1 831 80 view .LVU969
 3068 13d2 4D09D5   		or	r13, r10	# tmp845, tmp844
 3069 13d5 4F896CC3 		mov	QWORD PTR 8[r11+r8*8], r13	# MEM[base: _475, index: _477, step: 8, offset: 8B], tmp845
 3069      08
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3070              		.loc 1 830 58 is_stmt 1 view .LVU970
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3071              		.loc 1 830 40 view .LVU971
 3072 13da 4983C308 		add	r11, 8	# ivtmp.225,
 3073              	# sieve_extend.c:830:         for (register counter_t i = 0; i <loop_distance; i++) {
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3074              		.loc 1 830 9 is_stmt 0 view .LVU972
 3075 13de 4D39E3   		cmp	r11, r12	# ivtmp.225, _481
 3076 13e1 0F8402FC 		je	.L62	#,
 3076      FFFF
 3077              	.L250:
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3078              		.loc 1 830 9 view .LVU973
 3079 13e7 8B4C24F4 		mov	ecx, DWORD PTR -12[rsp]	# _182, %sfp
 3080 13eb 448B7424 		mov	r14d, DWORD PTR -16[rsp]	# _184, %sfp
 3080      F0
 3081              	.L64:
 831:sieve_extend.c ****         }
 3082              		.loc 1 831 13 is_stmt 1 view .LVU974
 3083              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3084              		.loc 1 831 109 is_stmt 0 view .LVU975
 3085 13f0 C4C2F1F7 		shlx	rax, QWORD PTR 8[r11], rcx	# tmp493, MEM[base: _475, offset: 8B], _182
 3085      4308
 3086              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3087              		.loc 1 831 62 view .LVU976
 3088 13f6 C4C28BF7 		shrx	rsi, QWORD PTR [r11], r14	# tmp491, MEM[base: _475, offset: 0B], _184
 3088      33
 3089              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3090              		.loc 1 831 80 view .LVU977
 3091 13fb 4809C6   		or	rsi, rax	# tmp495, tmp493
 3092 13fe 4D8D6B08 		lea	r13, 8[r11]	# tmp579,
 3093 1402 4B8974C3 		mov	QWORD PTR 8[r11+r8*8], rsi	# MEM[base: _475, index: _477, step: 8, offset: 8B], tmp495
 3093      08
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3094              		.loc 1 830 58 is_stmt 1 view .LVU978
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3095              		.loc 1 830 40 view .LVU979
 831:sieve_extend.c ****         }
 3096              		.loc 1 831 13 view .LVU980
 3097              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3098              		.loc 1 831 62 is_stmt 0 view .LVU981
 3099 1407 C4428BF7 		shrx	r9, QWORD PTR 8[r11], r14	# tmp636, MEM[base: _475, offset: 0B], _184
 3099      4B08
 3100              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3101              		.loc 1 831 109 view .LVU982
 3102 140d C4C2F1F7 		shlx	rbx, QWORD PTR 8[r13], rcx	# tmp638, MEM[base: _475, offset: 8B], _182
 3102      5D08
GAS LISTING /tmp/ccBvFgp2.s 			page 89


 3103              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3104              		.loc 1 831 80 view .LVU983
 3105 1413 4909D9   		or	r9, rbx	# tmp639, tmp638
 3106 1416 4D8D5310 		lea	r10, 16[r11]	# ivtmp.225,
 3107 141a 4D8D6B18 		lea	r13, 24[r11]	# ivtmp.225,
 3108 141e 4F894CC3 		mov	QWORD PTR 16[r11+r8*8], r9	# MEM[base: _475, index: _477, step: 8, offset: 8B], tmp639
 3108      10
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3109              		.loc 1 830 58 is_stmt 1 view .LVU984
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3110              		.loc 1 830 40 view .LVU985
 831:sieve_extend.c ****         }
 3111              		.loc 1 831 13 view .LVU986
 3112              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3113              		.loc 1 831 62 is_stmt 0 view .LVU987
 3114 1423 C4C28BF7 		shrx	rsi, QWORD PTR 16[r11], r14	# tmp642, MEM[base: _475, offset: 0B], _184
 3114      7310
 3115              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3116              		.loc 1 831 109 view .LVU988
 3117 1429 C4C2F1F7 		shlx	rax, QWORD PTR 8[r10], rcx	# tmp644, MEM[base: _475, offset: 8B], _182
 3117      4208
 3118              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3119              		.loc 1 831 80 view .LVU989
 3120 142f 4809C6   		or	rsi, rax	# tmp645, tmp644
 3121 1432 4B8974C3 		mov	QWORD PTR 24[r11+r8*8], rsi	# MEM[base: _475, index: _477, step: 8, offset: 8B], tmp645
 3121      18
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3122              		.loc 1 830 58 is_stmt 1 view .LVU990
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3123              		.loc 1 830 40 view .LVU991
 831:sieve_extend.c ****         }
 3124              		.loc 1 831 13 view .LVU992
 3125              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3126              		.loc 1 831 62 is_stmt 0 view .LVU993
 3127 1437 C4428BF7 		shrx	r9, QWORD PTR 24[r11], r14	# tmp648, MEM[base: _475, offset: 0B], _184
 3127      4B18
 3128              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3129              		.loc 1 831 109 view .LVU994
 3130 143d C4C2F1F7 		shlx	rbx, QWORD PTR 8[r13], rcx	# tmp650, MEM[base: _475, offset: 8B], _182
 3130      5D08
 3131              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3132              		.loc 1 831 80 view .LVU995
 3133 1443 4909D9   		or	r9, rbx	# tmp651, tmp650
 3134 1446 4D8D5320 		lea	r10, 32[r11]	# ivtmp.225,
 3135 144a 4D8D6B28 		lea	r13, 40[r11]	# ivtmp.225,
 3136 144e 4F894CC3 		mov	QWORD PTR 32[r11+r8*8], r9	# MEM[base: _475, index: _477, step: 8, offset: 8B], tmp651
 3136      20
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3137              		.loc 1 830 58 is_stmt 1 view .LVU996
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
GAS LISTING /tmp/ccBvFgp2.s 			page 90


 3138              		.loc 1 830 40 view .LVU997
 831:sieve_extend.c ****         }
 3139              		.loc 1 831 13 view .LVU998
 3140              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3141              		.loc 1 831 62 is_stmt 0 view .LVU999
 3142 1453 C4C28BF7 		shrx	rsi, QWORD PTR 32[r11], r14	# tmp654, MEM[base: _475, offset: 0B], _184
 3142      7320
 3143              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3144              		.loc 1 831 109 view .LVU1000
 3145 1459 C4C2F1F7 		shlx	rax, QWORD PTR 8[r10], rcx	# tmp656, MEM[base: _475, offset: 8B], _182
 3145      4208
 3146              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3147              		.loc 1 831 80 view .LVU1001
 3148 145f 4809C6   		or	rsi, rax	# tmp657, tmp656
 3149 1462 4B8974C3 		mov	QWORD PTR 40[r11+r8*8], rsi	# MEM[base: _475, index: _477, step: 8, offset: 8B], tmp657
 3149      28
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3150              		.loc 1 830 58 is_stmt 1 view .LVU1002
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3151              		.loc 1 830 40 view .LVU1003
 831:sieve_extend.c ****         }
 3152              		.loc 1 831 13 view .LVU1004
 3153              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3154              		.loc 1 831 62 is_stmt 0 view .LVU1005
 3155 1467 C4428BF7 		shrx	r9, QWORD PTR 40[r11], r14	# tmp660, MEM[base: _475, offset: 0B], _184
 3155      4B28
 3156              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3157              		.loc 1 831 109 view .LVU1006
 3158 146d C4C2F1F7 		shlx	rbx, QWORD PTR 8[r13], rcx	# tmp662, MEM[base: _475, offset: 8B], _182
 3158      5D08
 3159              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3160              		.loc 1 831 80 view .LVU1007
 3161 1473 4909D9   		or	r9, rbx	# tmp663, tmp662
 3162 1476 4D8D5330 		lea	r10, 48[r11]	# ivtmp.225,
 3163 147a 4D8D6B38 		lea	r13, 56[r11]	# ivtmp.225,
 3164 147e 4F894CC3 		mov	QWORD PTR 48[r11+r8*8], r9	# MEM[base: _475, index: _477, step: 8, offset: 8B], tmp663
 3164      30
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3165              		.loc 1 830 58 is_stmt 1 view .LVU1008
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3166              		.loc 1 830 40 view .LVU1009
 831:sieve_extend.c ****         }
 3167              		.loc 1 831 13 view .LVU1010
 3168              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3169              		.loc 1 831 62 is_stmt 0 view .LVU1011
 3170 1483 C4C28BF7 		shrx	rsi, QWORD PTR 48[r11], r14	# tmp666, MEM[base: _475, offset: 0B], _184
 3170      7330
 3171              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3172              		.loc 1 831 109 view .LVU1012
GAS LISTING /tmp/ccBvFgp2.s 			page 91


 3173 1489 C4C2F1F7 		shlx	rax, QWORD PTR 8[r10], rcx	# tmp668, MEM[base: _475, offset: 8B], _182
 3173      4208
 3174              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3175              		.loc 1 831 80 view .LVU1013
 3176 148f 4809C6   		or	rsi, rax	# tmp669, tmp668
 3177 1492 4B8974C3 		mov	QWORD PTR 56[r11+r8*8], rsi	# MEM[base: _475, index: _477, step: 8, offset: 8B], tmp669
 3177      38
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3178              		.loc 1 830 58 is_stmt 1 view .LVU1014
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3179              		.loc 1 830 40 view .LVU1015
 831:sieve_extend.c ****         }
 3180              		.loc 1 831 13 view .LVU1016
 3181              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3182              		.loc 1 831 62 is_stmt 0 view .LVU1017
 3183 1497 C4428BF7 		shrx	r9, QWORD PTR 56[r11], r14	# tmp672, MEM[base: _475, offset: 0B], _184
 3183      4B38
 3184              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3185              		.loc 1 831 109 view .LVU1018
 3186 149d C4C2F1F7 		shlx	rbx, QWORD PTR 8[r13], rcx	# tmp674, MEM[base: _475, offset: 8B], _182
 3186      5D08
 3187              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3188              		.loc 1 831 80 view .LVU1019
 3189 14a3 4909D9   		or	r9, rbx	# tmp675, tmp674
 3190 14a6 4F894CC3 		mov	QWORD PTR 64[r11+r8*8], r9	# MEM[base: _475, index: _477, step: 8, offset: 8B], tmp675
 3190      40
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3191              		.loc 1 830 58 is_stmt 1 view .LVU1020
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3192              		.loc 1 830 40 view .LVU1021
 3193 14ab 4983C340 		add	r11, 64	# ivtmp.225,
 3194              	# sieve_extend.c:830:         for (register counter_t i = 0; i <loop_distance; i++) {
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3195              		.loc 1 830 9 is_stmt 0 view .LVU1022
 3196 14af 4D39E3   		cmp	r11, r12	# ivtmp.225, _481
 3197 14b2 0F8538FF 		jne	.L64	#,
 3197      FFFF
 3198 14b8 E92CFBFF 		jmp	.L62	#
 3198      FF
 3199              	.LVL113:
 3200              	.L262:
 831:sieve_extend.c ****         }
 3201              		.loc 1 831 13 is_stmt 1 view .LVU1023
 3202              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3203              		.loc 1 831 62 is_stmt 0 view .LVU1024
 3204 14bd C4417D6F 		vmovdqa	ymm8, YMMWORD PTR [r10]	# tmp1071, MEM[base: vectp.191_325, index: ivtmp.234_483, offset: 
 3204      02
 3205 14c2 BA200000 		mov	edx, 32	# ivtmp.234,
 3205      00
 3206              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3207              		.loc 1 831 109 view .LVU1025
GAS LISTING /tmp/ccBvFgp2.s 			page 92


 3208 14c7 C4C17E6F 		vmovdqu	ymm3, YMMWORD PTR [r11]	# tmp1072, MEM[base: vectp.195_332, index: ivtmp.234_483, offset: 
 3208      1B
 3209              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3210              		.loc 1 831 62 view .LVU1026
 3211 14cc C53DD3C9 		vpsrlq	ymm9, ymm8, xmm1	# vect__49.193, tmp1071, _184
 3212              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3213              		.loc 1 831 109 view .LVU1027
 3214 14d0 C565F3D0 		vpsllq	ymm10, ymm3, xmm0	# vect__54.197, tmp1072, _182
 3215              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3216              		.loc 1 831 80 view .LVU1028
 3217 14d4 C44135EB 		vpor	ymm11, ymm9, ymm10	# vect__58.198, vect__49.193, vect__54.197
 3217      DA
 3218              	# sieve_extend.c:831:             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped
 831:sieve_extend.c ****         }
 3219              		.loc 1 831 35 view .LVU1029
 3220 14d9 C4417E7F 		vmovdqu	YMMWORD PTR [r9], ymm11	# MEM[base: vectp.200_341, index: ivtmp.234_483, offset: 0B], vect
 3220      19
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3221              		.loc 1 830 58 is_stmt 1 view .LVU1030
 830:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 3222              		.loc 1 830 40 view .LVU1031
 3223 14de E95AF8FF 		jmp	.L184	#
 3223      FF
 3224              	.LBE309:
 3225              	.LBE311:
 3226              		.cfi_endproc
 3227              	.LFE70:
 3229 14e3 66662E0F 		.p2align 4
 3229      1F840000 
 3229      00000066 
 3229      90
 3230              		.globl	compare_tuning_result
 3232              	compare_tuning_result:
 3233              	.LVL114:
 3234              	.LFB82:
 842:sieve_extend.c **** 
 843:sieve_extend.c **** static void extendSieve_shiftright_base(bitword_t* bitarray, const counter_t source_start, const co
 844:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 845:sieve_extend.c ****    
 846:sieve_extend.c ****     const counter_t destination_stop_word = wordindex(destination_stop);
 847:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 848:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_calc(source_start);
 849:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 850:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 851:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 852:sieve_extend.c **** 
 853:sieve_extend.c ****     if (copy_word >= destination_stop_word) { 
 854:sieve_extend.c ****         bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start in to not lose da
 855:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 856:sieve_extend.c ****                                 & keepmask(copy_start) & chopmask(destination_stop);
 857:sieve_extend.c ****         return; // rapid exit for one word variant
 858:sieve_extend.c ****     }
 859:sieve_extend.c **** 
 860:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start in to not lose data
GAS LISTING /tmp/ccBvFgp2.s 			page 93


 861:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 862:sieve_extend.c ****                                 & keepmask(copy_start);
 863:sieve_extend.c ****     
 864:sieve_extend.c ****     copy_word++;
 865:sieve_extend.c **** 
 866:sieve_extend.c ****     debug { printf("...start - %ju - %ju - end\n",(uintmax_t)wordindex(copy_start), (uintmax_t)dest
 867:sieve_extend.c **** 
 868:sieve_extend.c ****     for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
 869:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 870:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 871:sieve_extend.c **** 
 872:sieve_extend.c **** }
 873:sieve_extend.c **** 
 874:sieve_extend.c **** static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source_start, const counter_
 875:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 876:sieve_extend.c **** 
 877:sieve_extend.c ****     const counter_t destination_stop_word = wordindex(destination_stop);
 878:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 879:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_calc(copy_start);
 880:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 881:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 882:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 883:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 884:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 885:sieve_extend.c ****                              & ~chopmask(copy_start); // because this is the first word, dont copy 
 886:sieve_extend.c **** 
 887:sieve_extend.c ****     copy_word++;
 888:sieve_extend.c ****     source_word++;
 889:sieve_extend.c **** 
 890:sieve_extend.c ****     const counter_t aligned_copy_word = min(source_word + size, destination_stop_word); // after <<
 891:sieve_extend.c ****     const counter_t distance  = extendSieve_shiftleft_unrolled(bitarray, aligned_copy_word, shift, 
 892:sieve_extend.c ****     source_word += distance;
 893:sieve_extend.c ****     copy_word += distance;
 894:sieve_extend.c **** 
 895:sieve_extend.c ****      debug { counter_t fast_loop_stop_word = uintsafeminus(aligned_copy_word,2); printf("...start -
 896:sieve_extend.c **** 
 897:sieve_extend.c ****     #pragma ivdep
 898:sieve_extend.c ****     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 899:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 900:sieve_extend.c ****     }
 901:sieve_extend.c **** 
 902:sieve_extend.c ****     if (copy_word >= destination_stop_word) return;
 903:sieve_extend.c **** 
 904:sieve_extend.c ****     source_word = copy_word - size; // recalibrate
 905:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 906:sieve_extend.c **** 
 907:sieve_extend.c ****     #pragma ivdep
 908:sieve_extend.c ****     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 909:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 910:sieve_extend.c **** 
 911:sieve_extend.c ****     #pragma ivdep
 912:sieve_extend.c ****     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 913:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 914:sieve_extend.c **** 
 915:sieve_extend.c **** 
 916:sieve_extend.c ****  }
 917:sieve_extend.c **** 
GAS LISTING /tmp/ccBvFgp2.s 			page 94


 918:sieve_extend.c **** static inline void extendSieve(bitword_t* bitarray, const counter_t source_start, const counter_t s
 919:sieve_extend.c ****     if (size < WORD_SIZE_counter)   {
 920:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 921:sieve_extend.c ****         return; // rapid exit for small sizes
 922:sieve_extend.c ****     }
 923:sieve_extend.c **** 
 924:sieve_extend.c ****     const counter_t copy_start  = source_start + size;
 925:sieve_extend.c ****     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 926:sieve_extend.c ****     const bitshift_t source_bit = bitindex_calc(source_start);
 927:sieve_extend.c **** 
 928:sieve_extend.c ****     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_start, size, destinatio
 929:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
 930:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 931:sieve_extend.c **** }
 932:sieve_extend.c **** 
 933:sieve_extend.c **** static void sieve_block_stripe(struct sieve_state *sieve, const counter_t block_start, const counte
 934:sieve_extend.c ****     counter_t prime = prime_start;
 935:sieve_extend.c ****     counter_t start = prime * prime * 2 + prime * 2;
 936:sieve_extend.c ****     counter_t step  = prime * 2 + 1;
 937:sieve_extend.c ****     bitword_t* bitarray = sieve->bitarray;
 938:sieve_extend.c **** 
 939:sieve_extend.c ****     debug printf("Block strip for block %ju - %ju\n",(uintmax_t)block_start,(uintmax_t)block_stop);
 940:sieve_extend.c ****     
 941:sieve_extend.c ****     // while (start <= block_stop) {
 942:sieve_extend.c ****     //     step  = prime * 2 + 1;
 943:sieve_extend.c ****     //     if unlikely(step > SMALLSTEP_FASTER) break;
 944:sieve_extend.c ****     //     if likely(block_start >= (prime + 1)) start = block_start + prime + prime - ((block_star
 945:sieve_extend.c ****     //     setBitsTrue_smallStep(bitarray, start, (bitshift_t)step, block_stop);
 946:sieve_extend.c ****     //     prime = searchBitFalse(bitarray, prime+1 );
 947:sieve_extend.c ****     //     start = prime * prime * 2 + prime * 2;
 948:sieve_extend.c ****     // }
 949:sieve_extend.c ****     
 950:sieve_extend.c ****     // while (start <= block_stop) {
 951:sieve_extend.c ****     //     step  = prime * 2 + 1;
 952:sieve_extend.c ****     //     if unlikely(step > MEDIUMSTEP_FASTER) break;
 953:sieve_extend.c ****     //     if likely(block_start >= (prime + 1)) start = block_start + prime + prime - ((block_star
 954:sieve_extend.c ****     //     setBitsTrue_mediumStep(bitarray, start, step, block_stop);
 955:sieve_extend.c ****     //     prime = searchBitFalse(bitarray, prime+1 );
 956:sieve_extend.c ****     //     start = prime * prime * 2 + prime * 2;
 957:sieve_extend.c ****     // }
 958:sieve_extend.c **** 
 959:sieve_extend.c **** //     counter_t start1 = 0; // save value
 960:sieve_extend.c **** //     counter_t step1 = 0; // save value
 961:sieve_extend.c **** //     while (start <= block_stop) {
 962:sieve_extend.c **** //         step  = prime * 2 + 1;
 963:sieve_extend.c **** //         if (step > 64) break;
 964:sieve_extend.c **** //         if likely(block_start >= (prime + 1)) start = block_start + prime + prime - ((block_star
 965:sieve_extend.c **** //         start1 = start; // save value
 966:sieve_extend.c **** //         step1 = step; // save value
 967:sieve_extend.c **** //         prime = searchBitFalse(bitarray, prime+1 );
 968:sieve_extend.c **** //         start = prime * prime * 2 + prime * 2;
 969:sieve_extend.c **** //         step  = prime * 2 + 1;
 970:sieve_extend.c **** //         if (block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start + pr
 971:sieve_extend.c **** //         if (start <= block_stop) setBitsTrue_race(bitarray, start1, start, step1, step, block_st
 972:sieve_extend.c **** // //        else                     setBitsTrue_largeSteps(bitarray, start1, step1, block_stop);
 973:sieve_extend.c **** //         prime = searchBitFalse(bitarray, prime+1 );
 974:sieve_extend.c **** //         start = prime * prime * 2 + prime * 2;
GAS LISTING /tmp/ccBvFgp2.s 			page 95


 975:sieve_extend.c **** //     }
 976:sieve_extend.c **** 
 977:sieve_extend.c ****     while (start <= block_stop) {
 978:sieve_extend.c ****         step  = prime * 2 + 1;
 979:sieve_extend.c ****         if unlikely(step > VECTORSTEP_FASTER) break;
 980:sieve_extend.c ****         if likely(block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start +
 981:sieve_extend.c ****         setBitsTrue_largeRange_vector(bitarray, start, step, block_stop);
 982:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1 );
 983:sieve_extend.c ****         start = prime * prime * 2 + prime * 2;
 984:sieve_extend.c ****     }
 985:sieve_extend.c **** 
 986:sieve_extend.c ****     while (start <= block_stop) {
 987:sieve_extend.c ****         step  = prime * 2 + 1;
 988:sieve_extend.c ****         if likely(block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start +
 989:sieve_extend.c ****         if unlikely(start + step * WORD_SIZE_counter > block_stop) break;
 990:sieve_extend.c ****         setBitsTrue_largeRange(bitarray, start, step, block_stop);
 991:sieve_extend.c ****         prime = searchBitFalse_longRange(bitarray, prime+1 );
 992:sieve_extend.c ****         start = prime * prime * 2 + prime * 2;
 993:sieve_extend.c ****     }
 994:sieve_extend.c **** 
 995:sieve_extend.c ****     while (start <= block_stop) {
 996:sieve_extend.c ****         step  = prime * 2 + 1;
 997:sieve_extend.c ****         if likely(block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start +
 998:sieve_extend.c ****         if likely(start <= block_stop)
 999:sieve_extend.c ****             setBitsTrue_largeSteps(bitarray, start, step, block_stop);
1000:sieve_extend.c ****         prime = searchBitFalse_longRange(bitarray, prime+1 );
1001:sieve_extend.c ****         start = prime * prime * 2 + prime * 2;
1002:sieve_extend.c ****     }
1003:sieve_extend.c **** }
1004:sieve_extend.c **** 
1005:sieve_extend.c **** struct block {
1006:sieve_extend.c ****     counter_t pattern_size; // size of pattern applied 
1007:sieve_extend.c ****     counter_t pattern_start; // start of pattern
1008:sieve_extend.c ****     counter_t prime; // next prime to be striped
1009:sieve_extend.c **** };
1010:sieve_extend.c **** 
1011:sieve_extend.c **** // returns prime that could not be handled:
1012:sieve_extend.c **** // start is too large
1013:sieve_extend.c **** // range is too big
1014:sieve_extend.c **** static struct block sieve_block_extend(struct sieve_state *sieve, const counter_t block_start, cons
1015:sieve_extend.c ****     register counter_t prime   = 0;
1016:sieve_extend.c ****     counter_t patternsize_bits = 1;
1017:sieve_extend.c ****     counter_t pattern_start    = 0;
1018:sieve_extend.c ****     counter_t range_stop       = block_start;
1019:sieve_extend.c ****     bitword_t* bitarray        = sieve->bitarray;
1020:sieve_extend.c ****     struct block block = { .prime = 0, .pattern_start = 0, .pattern_size = 0 };
1021:sieve_extend.c **** 
1022:sieve_extend.c ****     sieve->bitarray[0] = SAFE_ZERO; // only the first word has to be cleared; the rest is populated
1023:sieve_extend.c ****     
1024:sieve_extend.c ****     for (;range_stop < block_stop;) {
1025:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
1026:sieve_extend.c ****         counter_t start = prime * prime * 2 + prime * 2;
1027:sieve_extend.c ****         if unlikely(start > block_stop) break;
1028:sieve_extend.c **** 
1029:sieve_extend.c ****         const counter_t step  = prime * 2 + 1;
1030:sieve_extend.c ****         if (block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start + prime
1031:sieve_extend.c **** 
GAS LISTING /tmp/ccBvFgp2.s 			page 96


1032:sieve_extend.c ****         range_stop = block_start + patternsize_bits * step * 2;  // range is x2 so the second block
1033:sieve_extend.c ****         block.pattern_size = patternsize_bits;
1034:sieve_extend.c ****         block.pattern_start = pattern_start;
1035:sieve_extend.c ****         if (range_stop > block_stop) return block; //range_stop = block_stop;
1036:sieve_extend.c **** 
1037:sieve_extend.c ****         if (patternsize_bits>1) {
1038:sieve_extend.c ****             pattern_start = block_start | patternsize_bits;
1039:sieve_extend.c ****             extendSieve(bitarray, pattern_start, patternsize_bits, range_stop);
1040:sieve_extend.c ****         }
1041:sieve_extend.c ****         patternsize_bits *= step;
1042:sieve_extend.c **** 
1043:sieve_extend.c ****         // if      (step < SMALLSTEP_FASTER)      setBitsTrue_smallStep (bitarray, start, (bitshift
1044:sieve_extend.c ****         // else if (step < MEDIUMSTEP_FASTER)     setBitsTrue_mediumStep(bitarray, start, step, ran
1045:sieve_extend.c ****         if (step < VECTORSTEP_FASTER)     setBitsTrue_largeRange_vector(bitarray, start, step, rang
1046:sieve_extend.c ****         else                              setBitsTrue_largeRange(bitarray, start, step, range_stop)
1047:sieve_extend.c ****         block.prime = prime;
1048:sieve_extend.c ****     } 
1049:sieve_extend.c **** 
1050:sieve_extend.c ****     return block;
1051:sieve_extend.c **** }
1052:sieve_extend.c **** 
1053:sieve_extend.c **** static struct sieve_state *sieve(const counter_t maxints, const counter_t blocksize) {
1054:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
1055:sieve_extend.c ****     counter_t prime     = 0;
1056:sieve_extend.c ****     bitword_t* bitarray = sieve->bitarray;
1057:sieve_extend.c **** 
1058:sieve_extend.c ****     debug printf("Running sieve to find all primes up to %ju with blocksize %ju\n",(uintmax_t)maxin
1059:sieve_extend.c **** 
1060:sieve_extend.c ****     // fill the whole sieve bij adding en copying incrementally
1061:sieve_extend.c ****     struct block block = sieve_block_extend(sieve, 0, sieve->bits);
1062:sieve_extend.c ****     extendSieve(bitarray, block.pattern_start, block.pattern_size, sieve->bits);
1063:sieve_extend.c ****     prime = block.prime;
1064:sieve_extend.c **** 
1065:sieve_extend.c ****     // #pragma unroll 8
1066:sieve_extend.c ****     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= sieve->bits; block_sta
1067:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
1068:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime);
1069:sieve_extend.c ****         sieve_block_stripe(sieve, block_start, block_stop, prime);
1070:sieve_extend.c ****     } 
1071:sieve_extend.c **** 
1072:sieve_extend.c ****     return sieve;
1073:sieve_extend.c **** }
1074:sieve_extend.c **** 
1075:sieve_extend.c **** static void show_primes(struct sieve_state *sieve, counter_t maxFactor) {
1076:sieve_extend.c ****     counter_t primeCount = 1;    // We already have 2
1077:sieve_extend.c ****     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(sieve->bitarray, factor+
1078:sieve_extend.c ****         primeCount++;
1079:sieve_extend.c ****         if (factor < maxFactor/2) {
1080:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
1081:sieve_extend.c ****             if (primeCount % 10 == 0) printf("\n");
1082:sieve_extend.c ****         }
1083:sieve_extend.c ****     }
1084:sieve_extend.c ****     printf("\nFound %ju primes until %ju\n",(uintmax_t)primeCount, (uintmax_t)sieve->bits*2+1);
1085:sieve_extend.c **** }
1086:sieve_extend.c **** 
1087:sieve_extend.c **** static counter_t count_primes(struct sieve_state *sieve) {
1088:sieve_extend.c ****     counter_t primeCount = 1;
GAS LISTING /tmp/ccBvFgp2.s 			page 97


1089:sieve_extend.c ****     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(sieve->bitarray, factor+
1090:sieve_extend.c ****     return primeCount;
1091:sieve_extend.c **** }
1092:sieve_extend.c **** 
1093:sieve_extend.c **** static void deepAnalyzePrimes(struct sieve_state *sieve) {
1094:sieve_extend.c ****     printf("DeepAnalyzing\n");
1095:sieve_extend.c ****     counter_t warn_prime = 0;
1096:sieve_extend.c ****     counter_t warn_nonprime = 0;
1097:sieve_extend.c ****     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
1098:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
1099:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1100:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
1101:sieve_extend.c ****                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marked prime, but %ju * %ju
1102:sieve_extend.c ****                 }
1103:sieve_extend.c ****             }
1104:sieve_extend.c ****         }
1105:sieve_extend.c ****         else {
1106:sieve_extend.c ****             counter_t c_prime = 0;
1107:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1108:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
1109:sieve_extend.c ****             }
1110:sieve_extend.c ****             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju) was marked non-prime, 
1111:sieve_extend.c ****         }
1112:sieve_extend.c ****     }
1113:sieve_extend.c **** }
1114:sieve_extend.c **** 
1115:sieve_extend.c **** 
1116:sieve_extend.c **** int validatePrimeCount(struct sieve_state *sieve, int option_verboselevel) {
1117:sieve_extend.c **** 
1118:sieve_extend.c ****     counter_t primecount = count_primes(sieve);
1119:sieve_extend.c ****     counter_t valid_primes = 0;
1120:sieve_extend.c ****     switch(sieve->size) {
1121:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
1122:sieve_extend.c ****         case 100:           valid_primes = 25;       break;
1123:sieve_extend.c ****         case 1000:          valid_primes = 168;      break;
1124:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
1125:sieve_extend.c ****         case 100000:        valid_primes = 9592;     break;
1126:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
1127:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
1128:sieve_extend.c ****         case 100000000:     valid_primes = 5761455;  break;
1129:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
1130:sieve_extend.c ****         default:            valid_primes= 0;
1131:sieve_extend.c ****     }
1132:sieve_extend.c **** 
1133:sieve_extend.c ****     int valid = (valid_primes == primecount);
1134:sieve_extend.c ****     if (valid  && option_verboselevel >= 4) printf("Result: Sievesize %ju is expected to have %ju p
1135:sieve_extend.c ****     if (!valid && option_verboselevel >= 1) {
1136:sieve_extend.c ****         printf("No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produ
1137:sieve_extend.c ****         if (!valid && option_verboselevel >= 2) show_primes(sieve, default_show_primes_on_error);
1138:sieve_extend.c ****     }
1139:sieve_extend.c ****     if (!valid && option_verboselevel >= 3) deepAnalyzePrimes(sieve);
1140:sieve_extend.c ****     return (valid);
1141:sieve_extend.c **** }
1142:sieve_extend.c **** 
1143:sieve_extend.c **** void usage(char *name) {
1144:sieve_extend.c ****     fprintf(stderr, "Usage: %s [options] [maximum]\n", name);
1145:sieve_extend.c ****     fprintf(stderr, "Options:\n");
GAS LISTING /tmp/ccBvFgp2.s 			page 98


1146:sieve_extend.c ****     fprintf(stderr, "  --verbose <level>  Show more output to a certain level:\n");
1147:sieve_extend.c ****     fprintf(stderr, "                     1 - show phase progress\n");
1148:sieve_extend.c ****     fprintf(stderr, "                     2 - show general progress within the phase\n");
1149:sieve_extend.c ****     fprintf(stderr, "                     3 - show actual work\n");
1150:sieve_extend.c ****     fprintf(stderr, "  --check            check the correctness of the algorithm\n");
1151:sieve_extend.c ****     fprintf(stderr, "  --show <maximum>   Show the primes found up to the maximum\n");
1152:sieve_extend.c ****     fprintf(stderr, "  --tune  <level>    find the best settings for the current os and hardware\n"
1153:sieve_extend.c ****     fprintf(stderr, "                     1 - fast tuning\n");
1154:sieve_extend.c ****     fprintf(stderr, "                     2 - refined tuning\n");
1155:sieve_extend.c ****     fprintf(stderr, "                     3 - maximum tuning (takes long)\n");
1156:sieve_extend.c ****     exit(1);
1157:sieve_extend.c **** }
1158:sieve_extend.c **** 
1159:sieve_extend.c **** typedef struct  {
1160:sieve_extend.c ****     counter_t maxints;
1161:sieve_extend.c ****     counter_t blocksize_bits;
1162:sieve_extend.c ****     counter_t blocksize_kb;
1163:sieve_extend.c ****     counter_t free_bits;
1164:sieve_extend.c ****     counter_t smallstep_faster;
1165:sieve_extend.c ****     counter_t mediumstep_faster;
1166:sieve_extend.c ****     counter_t vectorstep_faster;
1167:sieve_extend.c ****     counter_t sample_max;
1168:sieve_extend.c ****     double    sample_duration;
1169:sieve_extend.c ****     counter_t passes;
1170:sieve_extend.c ****     double    elapsed_time;
1171:sieve_extend.c ****     double    avg;
1172:sieve_extend.c **** } tuning_result_type;
1173:sieve_extend.c **** 
1174:sieve_extend.c **** int compare_tuning_result(const void *a, const void *b) {
 3235              		.loc 1 1174 57 view -0
 3236              		.cfi_startproc
 3237              		.loc 1 1174 57 is_stmt 0 view .LVU1033
 3238 14f0 F30F1EFA 		endbr64	
1175:sieve_extend.c ****     tuning_result_type *resultA = (tuning_result_type *)a;
 3239              		.loc 1 1175 5 is_stmt 1 view .LVU1034
 3240              	.LVL115:
1176:sieve_extend.c ****     tuning_result_type *resultB = (tuning_result_type *)b;
 3241              		.loc 1 1176 5 view .LVU1035
1177:sieve_extend.c ****     return (resultB->avg > resultA->avg ? 1 : -1);
 3242              		.loc 1 1177 5 view .LVU1036
 3243              	# sieve_extend.c:1177:     return (resultB->avg > resultA->avg ? 1 : -1);
 3244              		.loc 1 1177 45 is_stmt 0 view .LVU1037
 3245 14f4 C5FB1046 		vmovsd	xmm0, QWORD PTR 88[rsi]	# MEM[(struct tuning_result_type *)b_5(D)].avg, MEM[(struct tuning_
 3245      58
 3246 14f9 31C0     		xor	eax, eax	# <retval>
 3247 14fb C5F92F47 		vcomisd	xmm0, QWORD PTR 88[rdi]	# MEM[(struct tuning_result_type *)b_5(D)].avg, MEM[(struct tuning
 3247      58
 3248 1500 0F97C0   		seta	al	#, <retval>
 3249 1503 8D4400FF 		lea	eax, -1[rax+rax]	# <retval>,
 3250              	# sieve_extend.c:1178: }
1178:sieve_extend.c **** }
 3251              		.loc 1 1178 1 view .LVU1038
 3252 1507 C3       		ret	
 3253              		.cfi_endproc
 3254              	.LFE82:
 3256 1508 0F1F8400 		.p2align 4
 3256      00000000 
GAS LISTING /tmp/ccBvFgp2.s 			page 99


 3258              	setBitsTrue_largeRange_vector:
 3259              	.LVL116:
 3260              	.LFB64:
 465:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange vector (%ju occ
 3261              		.loc 1 465 153 is_stmt 1 view -0
 3262              		.cfi_startproc
 465:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange vector (%ju occ
 3263              		.loc 1 465 153 is_stmt 0 view .LVU1040
 3264 1510 55       		push	rbp	#
 3265              		.cfi_def_cfa_offset 16
 3266              		.cfi_offset 6, -16
 3267              	# sieve_extend.c:480:     counter_t range_start_atvector = vectorstart(range_start);
 480:sieve_extend.c ****     if likely((range_start_atvector + step) < range_start) { // not the first step possible in this
 3268              		.loc 1 480 15 view .LVU1041
 3269 1511 4989F3   		mov	r11, rsi	# range_start_atvector, range_start
 3270              	# sieve_extend.c:465: static void setBitsTrue_largeRange_vector(bitword_t* __restrict bitarray_word
 465:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange vector (%ju occ
 3271              		.loc 1 465 153 view .LVU1042
 3272 1514 4889E5   		mov	rbp, rsp	#,
 3273              		.cfi_def_cfa_register 6
 3274              	# sieve_extend.c:480:     counter_t range_start_atvector = vectorstart(range_start);
 480:sieve_extend.c ****     if likely((range_start_atvector + step) < range_start) { // not the first step possible in this
 3275              		.loc 1 480 15 view .LVU1043
 3276 1517 4530DB   		xor	r11b, r11b	# range_start_atvector
 3277              	# sieve_extend.c:465: static void setBitsTrue_largeRange_vector(bitword_t* __restrict bitarray_word
 465:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange vector (%ju occ
 3278              		.loc 1 465 153 view .LVU1044
 3279 151a 4157     		push	r15	#
 3280 151c 4156     		push	r14	#
 3281 151e 4155     		push	r13	#
 3282 1520 4154     		push	r12	#
 3283 1522 53       		push	rbx	#
 3284 1523 4883E4E0 		and	rsp, -32	#,
 3285 1527 488D6424 		lea	rsp, -64[rsp]	#,
 3285      C0
 3286              		.cfi_offset 15, -24
 3287              		.cfi_offset 14, -32
 3288              		.cfi_offset 13, -40
 3289              		.cfi_offset 12, -48
 3290              		.cfi_offset 3, -56
 3291              	# sieve_extend.c:465: static void setBitsTrue_largeRange_vector(bitword_t* __restrict bitarray_word
 465:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange vector (%ju occ
 3292              		.loc 1 465 153 view .LVU1045
 3293 152c 64488B04 		mov	rax, QWORD PTR fs:40	# tmp408, MEM[(<address-space-1> long unsigned int *)40B]
 3293      25280000 
 3293      00
 3294 1535 48894424 		mov	QWORD PTR 56[rsp], rax	# D.6624, tmp408
 3294      38
 3295 153a 31C0     		xor	eax, eax	# tmp408
 466:sieve_extend.c **** 
 3296              		.loc 1 466 5 is_stmt 1 view .LVU1046
 474:sieve_extend.c ****     
 3297              		.loc 1 474 5 view .LVU1047
 3298              	.LVL117:
 480:sieve_extend.c ****     if likely((range_start_atvector + step) < range_start) { // not the first step possible in this
 3299              		.loc 1 480 5 view .LVU1048
 481:sieve_extend.c ****         debug { printf("Range start+step %ju not at start of vector %ju\n",range_start+step, range_
GAS LISTING /tmp/ccBvFgp2.s 			page 100


 3300              		.loc 1 481 5 view .LVU1049
 3301              	# sieve_extend.c:481:     if likely((range_start_atvector + step) < range_start) { // not the first
 481:sieve_extend.c ****         debug { printf("Range start+step %ju not at start of vector %ju\n",range_start+step, range_
 3302              		.loc 1 481 8 is_stmt 0 view .LVU1050
 3303 153c 498D0413 		lea	rax, [r11+rdx]	# tmp180,
 3304 1540 4839F0   		cmp	rax, rsi	# tmp180, range_start
 3305 1543 0F830401 		jnb	.L267	#,
 3305      0000
 3306              	.LBB319:
 482:sieve_extend.c **** 
 3307              		.loc 1 482 9 is_stmt 1 view .LVU1051
 484:sieve_extend.c ****         if (unlikely(range_start_atvector > range_stop)) { // we should not be here; just handle wi
 3308              		.loc 1 484 9 view .LVU1052
 3309              	# sieve_extend.c:484:         range_start_atvector += VECTOR_SIZE; // find next vector
 484:sieve_extend.c ****         if (unlikely(range_start_atvector > range_stop)) { // we should not be here; just handle wi
 3310              		.loc 1 484 30 is_stmt 0 view .LVU1053
 3311 1549 4981C300 		add	r11, 256	# range_start_atvector,
 3311      010000
 3312              	.LVL118:
 485:sieve_extend.c ****             debug2 printf("..Marking and returning without vector\n");
 3313              		.loc 1 485 9 is_stmt 1 view .LVU1054
 3314              	# sieve_extend.c:485:         if (unlikely(range_start_atvector > range_stop)) { // we should not b
 485:sieve_extend.c ****             debug2 printf("..Marking and returning without vector\n");
 3315              		.loc 1 485 12 is_stmt 0 view .LVU1055
 3316 1550 4939CB   		cmp	r11, rcx	# range_start_atvector, range_stop
 3317 1553 0F877508 		ja	.L268	#,
 3317      0000
 502:sieve_extend.c ****             register counter_t index_word = wordindex(range_start);
 3318              		.loc 1 502 16 is_stmt 1 view .LVU1056
 3319              	# sieve_extend.c:502:         for (; range_start < range_start_atvector;) {
 502:sieve_extend.c ****             register counter_t index_word = wordindex(range_start);
 3320              		.loc 1 502 9 is_stmt 0 view .LVU1057
 3321 1559 4C39DE   		cmp	rsi, r11	# range_start, range_start_atvector
 3322              	.LBB320:
 3323              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3324              		.loc 1 506 25 view .LVU1058
 3325 155c 41B90100 		mov	r9d, 1	# tmp188,
 3325      0000
 3326              	.LBE320:
 3327              	# sieve_extend.c:502:         for (; range_start < range_start_atvector;) {
 502:sieve_extend.c ****             register counter_t index_word = wordindex(range_start);
 3328              		.loc 1 502 9 view .LVU1059
 3329 1562 0F83E500 		jnb	.L267	#,
 3329      0000
 3330              	.LVL119:
 3331 1568 0F1F8400 		.p2align 4
 3331      00000000 
 3332              		.p2align 3
 3333              	.L269:
 3334              	.LBB321:
 503:sieve_extend.c ****             register bitword_t mask = SAFE_ZERO;
 3335              		.loc 1 503 13 is_stmt 1 view .LVU1060
 3336              	# sieve_extend.c:503:             register counter_t index_word = wordindex(range_start);
 503:sieve_extend.c ****             register bitword_t mask = SAFE_ZERO;
 3337              		.loc 1 503 32 is_stmt 0 view .LVU1061
 3338 1570 4989F0   		mov	r8, rsi	# index_word, range_start
GAS LISTING /tmp/ccBvFgp2.s 			page 101


 3339              	# sieve_extend.c:504:             register bitword_t mask = SAFE_ZERO;
 504:sieve_extend.c ****             do {
 3340              		.loc 1 504 32 view .LVU1062
 3341 1573 31DB     		xor	ebx, ebx	# mask
 3342              	# sieve_extend.c:503:             register counter_t index_word = wordindex(range_start);
 503:sieve_extend.c ****             register bitword_t mask = SAFE_ZERO;
 3343              		.loc 1 503 32 view .LVU1063
 3344 1575 49C1E806 		shr	r8, 6	# index_word,
 3345              	.LVL120:
 504:sieve_extend.c ****             do {
 3346              		.loc 1 504 13 is_stmt 1 view .LVU1064
 3347              	.L272:
 505:sieve_extend.c ****                 mask |= markmask(range_start);
 3348              		.loc 1 505 13 discriminator 1 view .LVU1065
 506:sieve_extend.c ****                 range_start += step;
 3349              		.loc 1 506 17 discriminator 1 view .LVU1066
 3350              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3351              		.loc 1 506 25 is_stmt 0 discriminator 1 view .LVU1067
 3352 1579 C442C9F7 		shlx	r10, r9, rsi	# tmp187, tmp188, range_start
 3352      D1
 3353              	# sieve_extend.c:507:                 range_start += step;
 507:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 3354              		.loc 1 507 29 discriminator 1 view .LVU1068
 3355 157e 4801D6   		add	rsi, rdx	# range_start, step
 3356              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3357              		.loc 1 508 22 discriminator 1 view .LVU1069
 3358 1581 4989F4   		mov	r12, rsi	# tmp189, range_start
 3359              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3360              		.loc 1 506 22 discriminator 1 view .LVU1070
 3361 1584 4C09D3   		or	rbx, r10	# mask, tmp187
 3362              	.LVL121:
 507:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 3363              		.loc 1 507 17 is_stmt 1 discriminator 1 view .LVU1071
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3364              		.loc 1 508 21 discriminator 1 view .LVU1072
 3365              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3366              		.loc 1 508 22 is_stmt 0 discriminator 1 view .LVU1073
 3367 1587 49C1EC06 		shr	r12, 6	# tmp189,
 3368              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3369              		.loc 1 508 13 discriminator 1 view .LVU1074
 3370 158b 4D39C4   		cmp	r12, r8	# tmp189, index_word
 3371 158e 0F85AC00 		jne	.L421	#,
 3371      0000
 505:sieve_extend.c ****                 mask |= markmask(range_start);
 3372              		.loc 1 505 13 is_stmt 1 view .LVU1075
 506:sieve_extend.c ****                 range_start += step;
 3373              		.loc 1 506 17 view .LVU1076
 3374              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3375              		.loc 1 506 25 is_stmt 0 view .LVU1077
 3376 1594 C442C9F7 		shlx	r13, r9, rsi	# tmp390, tmp188, range_start
 3376      E9
GAS LISTING /tmp/ccBvFgp2.s 			page 102


 3377              	# sieve_extend.c:507:                 range_start += step;
 507:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 3378              		.loc 1 507 29 view .LVU1078
 3379 1599 4801D6   		add	rsi, rdx	# range_start, step
 3380              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3381              		.loc 1 508 22 view .LVU1079
 3382 159c 4989F6   		mov	r14, rsi	# tmp391, range_start
 3383              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3384              		.loc 1 506 22 view .LVU1080
 3385 159f 4C09EB   		or	rbx, r13	# mask, tmp390
 3386              	.LVL122:
 507:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 3387              		.loc 1 507 17 is_stmt 1 view .LVU1081
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3388              		.loc 1 508 21 view .LVU1082
 3389              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3390              		.loc 1 508 22 is_stmt 0 view .LVU1083
 3391 15a2 49C1EE06 		shr	r14, 6	# tmp391,
 3392              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3393              		.loc 1 508 13 view .LVU1084
 3394 15a6 4D39C6   		cmp	r14, r8	# tmp391, index_word
 3395 15a9 0F859100 		jne	.L421	#,
 3395      0000
 505:sieve_extend.c ****                 mask |= markmask(range_start);
 3396              		.loc 1 505 13 is_stmt 1 view .LVU1085
 506:sieve_extend.c ****                 range_start += step;
 3397              		.loc 1 506 17 view .LVU1086
 3398              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3399              		.loc 1 506 25 is_stmt 0 view .LVU1087
 3400 15af C442C9F7 		shlx	r15, r9, rsi	# tmp392, tmp188, range_start
 3400      F9
 3401              	# sieve_extend.c:507:                 range_start += step;
 507:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 3402              		.loc 1 507 29 view .LVU1088
 3403 15b4 4801D6   		add	rsi, rdx	# range_start, step
 3404              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3405              		.loc 1 508 22 view .LVU1089
 3406 15b7 4889F0   		mov	rax, rsi	# tmp393, range_start
 3407              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3408              		.loc 1 506 22 view .LVU1090
 3409 15ba 4C09FB   		or	rbx, r15	# mask, tmp392
 3410              	.LVL123:
 507:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 3411              		.loc 1 507 17 is_stmt 1 view .LVU1091
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3412              		.loc 1 508 21 view .LVU1092
 3413              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3414              		.loc 1 508 22 is_stmt 0 view .LVU1093
 3415 15bd 48C1E806 		shr	rax, 6	# tmp393,
GAS LISTING /tmp/ccBvFgp2.s 			page 103


 3416              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3417              		.loc 1 508 13 view .LVU1094
 3418 15c1 4C39C0   		cmp	rax, r8	# tmp393, index_word
 3419 15c4 757A     		jne	.L421	#,
 505:sieve_extend.c ****                 mask |= markmask(range_start);
 3420              		.loc 1 505 13 is_stmt 1 view .LVU1095
 506:sieve_extend.c ****                 range_start += step;
 3421              		.loc 1 506 17 view .LVU1096
 3422              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3423              		.loc 1 506 25 is_stmt 0 view .LVU1097
 3424 15c6 C442C9F7 		shlx	r10, r9, rsi	# tmp394, tmp188, range_start
 3424      D1
 3425              	# sieve_extend.c:507:                 range_start += step;
 507:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 3426              		.loc 1 507 29 view .LVU1098
 3427 15cb 4801D6   		add	rsi, rdx	# range_start, step
 3428              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3429              		.loc 1 508 22 view .LVU1099
 3430 15ce 4989F4   		mov	r12, rsi	# tmp395, range_start
 3431              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3432              		.loc 1 506 22 view .LVU1100
 3433 15d1 4C09D3   		or	rbx, r10	# mask, tmp394
 3434              	.LVL124:
 507:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 3435              		.loc 1 507 17 is_stmt 1 view .LVU1101
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3436              		.loc 1 508 21 view .LVU1102
 3437              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3438              		.loc 1 508 22 is_stmt 0 view .LVU1103
 3439 15d4 49C1EC06 		shr	r12, 6	# tmp395,
 3440              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3441              		.loc 1 508 13 view .LVU1104
 3442 15d8 4D39C4   		cmp	r12, r8	# tmp395, index_word
 3443 15db 7563     		jne	.L421	#,
 505:sieve_extend.c ****                 mask |= markmask(range_start);
 3444              		.loc 1 505 13 is_stmt 1 view .LVU1105
 506:sieve_extend.c ****                 range_start += step;
 3445              		.loc 1 506 17 view .LVU1106
 3446              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3447              		.loc 1 506 25 is_stmt 0 view .LVU1107
 3448 15dd C442C9F7 		shlx	r13, r9, rsi	# tmp396, tmp188, range_start
 3448      E9
 3449              	# sieve_extend.c:507:                 range_start += step;
 507:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 3450              		.loc 1 507 29 view .LVU1108
 3451 15e2 4801D6   		add	rsi, rdx	# range_start, step
 3452              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3453              		.loc 1 508 22 view .LVU1109
 3454 15e5 4989F6   		mov	r14, rsi	# tmp397, range_start
GAS LISTING /tmp/ccBvFgp2.s 			page 104


 3455              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3456              		.loc 1 506 22 view .LVU1110
 3457 15e8 4C09EB   		or	rbx, r13	# mask, tmp396
 3458              	.LVL125:
 507:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 3459              		.loc 1 507 17 is_stmt 1 view .LVU1111
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3460              		.loc 1 508 21 view .LVU1112
 3461              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3462              		.loc 1 508 22 is_stmt 0 view .LVU1113
 3463 15eb 49C1EE06 		shr	r14, 6	# tmp397,
 3464              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3465              		.loc 1 508 13 view .LVU1114
 3466 15ef 4D39C6   		cmp	r14, r8	# tmp397, index_word
 3467 15f2 754C     		jne	.L421	#,
 505:sieve_extend.c ****                 mask |= markmask(range_start);
 3468              		.loc 1 505 13 is_stmt 1 view .LVU1115
 506:sieve_extend.c ****                 range_start += step;
 3469              		.loc 1 506 17 view .LVU1116
 3470              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3471              		.loc 1 506 25 is_stmt 0 view .LVU1117
 3472 15f4 C442C9F7 		shlx	r15, r9, rsi	# tmp398, tmp188, range_start
 3472      F9
 3473              	# sieve_extend.c:507:                 range_start += step;
 507:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 3474              		.loc 1 507 29 view .LVU1118
 3475 15f9 4801D6   		add	rsi, rdx	# range_start, step
 3476              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3477              		.loc 1 508 22 view .LVU1119
 3478 15fc 4889F0   		mov	rax, rsi	# tmp399, range_start
 3479              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3480              		.loc 1 506 22 view .LVU1120
 3481 15ff 4C09FB   		or	rbx, r15	# mask, tmp398
 3482              	.LVL126:
 507:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 3483              		.loc 1 507 17 is_stmt 1 view .LVU1121
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3484              		.loc 1 508 21 view .LVU1122
 3485              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3486              		.loc 1 508 22 is_stmt 0 view .LVU1123
 3487 1602 48C1E806 		shr	rax, 6	# tmp399,
 3488              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3489              		.loc 1 508 13 view .LVU1124
 3490 1606 4C39C0   		cmp	rax, r8	# tmp399, index_word
 3491 1609 7535     		jne	.L421	#,
 505:sieve_extend.c ****                 mask |= markmask(range_start);
 3492              		.loc 1 505 13 is_stmt 1 view .LVU1125
 506:sieve_extend.c ****                 range_start += step;
 3493              		.loc 1 506 17 view .LVU1126
GAS LISTING /tmp/ccBvFgp2.s 			page 105


 3494              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3495              		.loc 1 506 25 is_stmt 0 view .LVU1127
 3496 160b C442C9F7 		shlx	r10, r9, rsi	# tmp400, tmp188, range_start
 3496      D1
 3497              	# sieve_extend.c:507:                 range_start += step;
 507:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 3498              		.loc 1 507 29 view .LVU1128
 3499 1610 4801D6   		add	rsi, rdx	# range_start, step
 3500              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3501              		.loc 1 508 22 view .LVU1129
 3502 1613 4989F4   		mov	r12, rsi	# tmp401, range_start
 3503              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3504              		.loc 1 506 22 view .LVU1130
 3505 1616 4C09D3   		or	rbx, r10	# mask, tmp400
 3506              	.LVL127:
 507:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 3507              		.loc 1 507 17 is_stmt 1 view .LVU1131
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3508              		.loc 1 508 21 view .LVU1132
 3509              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3510              		.loc 1 508 22 is_stmt 0 view .LVU1133
 3511 1619 49C1EC06 		shr	r12, 6	# tmp401,
 3512              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3513              		.loc 1 508 13 view .LVU1134
 3514 161d 4D39C4   		cmp	r12, r8	# tmp401, index_word
 3515 1620 751E     		jne	.L421	#,
 505:sieve_extend.c ****                 mask |= markmask(range_start);
 3516              		.loc 1 505 13 is_stmt 1 view .LVU1135
 506:sieve_extend.c ****                 range_start += step;
 3517              		.loc 1 506 17 view .LVU1136
 3518              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3519              		.loc 1 506 25 is_stmt 0 view .LVU1137
 3520 1622 C442C9F7 		shlx	r13, r9, rsi	# tmp402, tmp188, range_start
 3520      E9
 3521              	# sieve_extend.c:507:                 range_start += step;
 507:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 3522              		.loc 1 507 29 view .LVU1138
 3523 1627 4801D6   		add	rsi, rdx	# range_start, step
 3524              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3525              		.loc 1 508 22 view .LVU1139
 3526 162a 4989F6   		mov	r14, rsi	# tmp403, range_start
 3527              	# sieve_extend.c:506:                 mask |= markmask(range_start);
 506:sieve_extend.c ****                 range_start += step;
 3528              		.loc 1 506 22 view .LVU1140
 3529 162d 4C09EB   		or	rbx, r13	# mask, tmp402
 3530              	.LVL128:
 507:sieve_extend.c ****             } while (wordindex(range_start) == index_word);
 3531              		.loc 1 507 17 is_stmt 1 view .LVU1141
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3532              		.loc 1 508 21 view .LVU1142
GAS LISTING /tmp/ccBvFgp2.s 			page 106


 3533              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3534              		.loc 1 508 22 is_stmt 0 view .LVU1143
 3535 1630 49C1EE06 		shr	r14, 6	# tmp403,
 3536              	# sieve_extend.c:508:             } while (wordindex(range_start) == index_word);
 508:sieve_extend.c ****             bitarray_word[index_word] |= mask;
 3537              		.loc 1 508 13 view .LVU1144
 3538 1634 4D39C6   		cmp	r14, r8	# tmp403, index_word
 3539 1637 0F843CFF 		je	.L272	#,
 3539      FFFF
 3540 163d 0F1F00   		.p2align 4
 3541              		.p2align 3
 3542              	.L421:
 509:sieve_extend.c ****         }
 3543              		.loc 1 509 13 is_stmt 1 view .LVU1145
 3544              	# sieve_extend.c:509:             bitarray_word[index_word] |= mask;
 509:sieve_extend.c ****         }
 3545              		.loc 1 509 39 is_stmt 0 view .LVU1146
 3546 1640 4A091CC7 		or	QWORD PTR [rdi+r8*8], rbx	# *_24, mask
 509:sieve_extend.c ****         }
 3547              		.loc 1 509 39 view .LVU1147
 3548              	.LBE321:
 502:sieve_extend.c ****             register counter_t index_word = wordindex(range_start);
 3549              		.loc 1 502 16 is_stmt 1 view .LVU1148
 3550              	# sieve_extend.c:502:         for (; range_start < range_start_atvector;) {
 502:sieve_extend.c ****             register counter_t index_word = wordindex(range_start);
 3551              		.loc 1 502 9 is_stmt 0 view .LVU1149
 3552 1644 4939F3   		cmp	r11, rsi	# range_start_atvector, range_start
 3553 1647 0F8723FF 		ja	.L269	#,
 3553      FFFF
 3554              	.LVL129:
 3555              	.L267:
 502:sieve_extend.c ****             register counter_t index_word = wordindex(range_start);
 3556              		.loc 1 502 9 view .LVU1150
 3557              	.LBE319:
 513:sieve_extend.c ****     
 3558              		.loc 1 513 5 is_stmt 1 view .LVU1151
 3559              	# sieve_extend.c:513:     const counter_t range_stop_unique =  min(range_start + VECTOR_SIZE_counte
 513:sieve_extend.c ****     
 3560              		.loc 1 513 42 is_stmt 0 view .LVU1152
 3561 164d 4989D2   		mov	r10, rdx	# tmp191, step
 3562 1650 49C1E208 		sal	r10, 8	# tmp191,
 3563 1654 4901F2   		add	r10, rsi	# tmp192, range_start
 3564              	# sieve_extend.c:513:     const counter_t range_stop_unique =  min(range_start + VECTOR_SIZE_counte
 513:sieve_extend.c ****     
 3565              		.loc 1 513 21 view .LVU1153
 3566 1657 4939CA   		cmp	r10, rcx	# tmp192, range_stop
 3567 165a 4C0F47D1 		cmova	r10, rcx	# tmp192,, range_stop_unique, range_stop
 3568              	.LVL130:
 520:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 3569              		.loc 1 520 5 is_stmt 1 view .LVU1154
 3570              	.LBB323:
 520:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 3571              		.loc 1 520 10 view .LVU1155
 520:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 3572              		.loc 1 520 41 view .LVU1156
 3573              	# sieve_extend.c:520:     for (counter_t index = range_start; index < range_stop_unique;) {
GAS LISTING /tmp/ccBvFgp2.s 			page 107


 520:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 3574              		.loc 1 520 5 is_stmt 0 view .LVU1157
 3575 165e 4C39D6   		cmp	rsi, r10	# range_start, range_stop_unique
 3576 1661 0F830C04 		jnb	.L266	#,
 3576      0000
 3577              	.LBB324:
 3578              	.LBB325:
 3579              	.LBB326:
 3580              	# sieve_extend.c:425:    const counter_t range_stop_vector = vectorindex(range_stop);
 425:sieve_extend.c ****    register bitvector_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_vect
 3581              		.loc 1 425 20 view .LVU1158
 3582 1667 4989CB   		mov	r11, rcx	# range_stop, range_stop
 3583              	.LVL131:
 3584              	# sieve_extend.c:427:    register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligne
 427:sieve_extend.c **** 
 3585              		.loc 1 427 114 view .LVU1159
 3586 166a 488D1C92 		lea	rbx, [rdx+rdx*4]	# tmp195,
 3587              	# sieve_extend.c:425:    const counter_t range_stop_vector = vectorindex(range_stop);
 425:sieve_extend.c ****    register bitvector_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_vect
 3588              		.loc 1 425 20 view .LVU1160
 3589 166e 49C1EB08 		shr	r11, 8	# range_stop,
 3590              	# sieve_extend.c:432:        *index_ptr |= mask; index_ptr+=step;
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3591              		.loc 1 432 37 view .LVU1161
 3592 1672 4889D1   		mov	rcx, rdx	# _85, step
 3593              	.LVL132:
 3594              	# sieve_extend.c:427:    register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligne
 427:sieve_extend.c **** 
 3595              		.loc 1 427 139 view .LVU1162
 3596 1675 4D89D8   		mov	r8, r11	# tmp196, range_stop_vector
 3597              	# sieve_extend.c:439:    const register bitvector_t* __restrict range_stop_ptr = &bitarray[(range_s
 439:sieve_extend.c ****    while likely(index_ptr <= range_stop_ptr) {
 3598              		.loc 1 439 69 view .LVU1163
 3599 1678 4D89D9   		mov	r9, r11	# tmp197, range_stop_vector
 3600 167b 49C1E105 		sal	r9, 5	# tmp197,
 3601              	# sieve_extend.c:427:    register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligne
 427:sieve_extend.c **** 
 3602              		.loc 1 427 139 view .LVU1164
 3603 167f 4929D8   		sub	r8, rbx	# tmp196, tmp195
 3604              	# sieve_extend.c:427:    register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligne
 427:sieve_extend.c **** 
 3605              		.loc 1 427 89 view .LVU1165
 3606 1682 49C1E005 		sal	r8, 5	# tmp196,
 3607              	# sieve_extend.c:439:    const register bitvector_t* __restrict range_stop_ptr = &bitarray[(range_s
 439:sieve_extend.c ****    while likely(index_ptr <= range_stop_ptr) {
 3608              		.loc 1 439 43 view .LVU1166
 3609 1686 4901F9   		add	r9, rdi	# range_stop_ptr, bitarray_word
 3610              	# sieve_extend.c:432:        *index_ptr |= mask; index_ptr+=step;
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3611              		.loc 1 432 37 view .LVU1167
 3612 1689 48C1E105 		sal	rcx, 5	# _85,
 3613 168d 4901F8   		add	r8, rdi	# tmp217, bitarray_word
 3614 1690 4883FA01 		cmp	rdx, 1	# step,
 3615 1694 0F85FC03 		jne	.L426	#,
 3615      0000
 3616              	.LBE326:
 3617              	.LBE325:
GAS LISTING /tmp/ccBvFgp2.s 			page 108


 3618              	# sieve_extend.c:522:         register bitvector_t quadmask = { };
 522:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 3619              		.loc 1 522 30 view .LVU1168
 3620 169a C5E9EFD2 		vpxor	xmm2, xmm2, xmm2	# tmp218
 3621 169e 4983FB05 		cmp	r11, 5	# range_stop_vector,
 3622              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3623              		.loc 1 528 31 view .LVU1169
 3624 16a2 41BB0100 		mov	r11d, 1	# tmp222,
 3624      0000
 3625 16a8 4C0F46C7 		cmovbe	r8, rdi	# bitarray_word,, fast_loop_ptr
 3626              	.LVL133:
 3627 16ac 0F1F4000 		.p2align 4
 3628              		.p2align 3
 3629              	.L284:
 521:sieve_extend.c ****         register bitvector_t quadmask = { };
 3630              		.loc 1 521 9 is_stmt 1 view .LVU1170
 3631              	# sieve_extend.c:521:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 521:sieve_extend.c ****         register bitvector_t quadmask = { };
 3632              		.loc 1 521 54 is_stmt 0 view .LVU1171
 3633 16b0 4889F0   		mov	rax, rsi	# _192, range_start
 3634              	# sieve_extend.c:523:         register counter_t word = wordindex(index) - current_vector_start_wor
 523:sieve_extend.c ****         
 3635              		.loc 1 523 35 view .LVU1172
 3636 16b3 4989F6   		mov	r14, rsi	# tmp219, range_start
 3637              	# sieve_extend.c:521:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 521:sieve_extend.c ****         register bitvector_t quadmask = { };
 3638              		.loc 1 521 54 view .LVU1173
 3639 16b6 48C1E808 		shr	rax, 8	# _192,
 3640              	# sieve_extend.c:523:         register counter_t word = wordindex(index) - current_vector_start_wor
 523:sieve_extend.c ****         
 3641              		.loc 1 523 35 view .LVU1174
 3642 16ba 49C1EE06 		shr	r14, 6	# tmp219,
 3643              	# sieve_extend.c:521:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 521:sieve_extend.c ****         register bitvector_t quadmask = { };
 3644              		.loc 1 521 25 view .LVU1175
 3645 16be 488D1485 		lea	rdx, 0[0+rax*4]	# current_vector_start_word,
 3645      00000000 
 3646              	.LVL134:
 522:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 3647              		.loc 1 522 9 is_stmt 1 view .LVU1176
 3648              	# sieve_extend.c:522:         register bitvector_t quadmask = { };
 522:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 3649              		.loc 1 522 30 is_stmt 0 view .LVU1177
 3650 16c6 C5FD7F14 		vmovdqa	YMMWORD PTR [rsp], ymm2	# quadmask, tmp218
 3650      24
 523:sieve_extend.c ****         
 3651              		.loc 1 523 9 is_stmt 1 view .LVU1178
 3652              	# sieve_extend.c:523:         register counter_t word = wordindex(index) - current_vector_start_wor
 523:sieve_extend.c ****         
 3653              		.loc 1 523 28 is_stmt 0 view .LVU1179
 3654 16cb 4929D6   		sub	r14, rdx	# word, current_vector_start_word
 3655              	.LVL135:
 3656              	.L279:
 527:sieve_extend.c ****             quadmask[word] |= markmask(index);
 3657              		.loc 1 527 9 is_stmt 1 view .LVU1180
 528:sieve_extend.c ****             index += step;
GAS LISTING /tmp/ccBvFgp2.s 			page 109


 3658              		.loc 1 528 13 view .LVU1181
 3659              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3660              		.loc 1 528 31 is_stmt 0 view .LVU1182
 3661 16ce C442C9F7 		shlx	r15, r11, rsi	# tmp221, tmp222, range_start
 3661      FB
 3662              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3663              		.loc 1 528 28 view .LVU1183
 3664 16d3 4E093CF4 		or	QWORD PTR [rsp+r14*8], r15	# quadmask, tmp221
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3665              		.loc 1 529 13 is_stmt 1 view .LVU1184
 3666              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3667              		.loc 1 529 19 is_stmt 0 view .LVU1185
 3668 16d7 4C8D7601 		lea	r14, 1[rsi]	# tmp239,
 3669              	.LVL136:
 3670              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3671              		.loc 1 530 20 view .LVU1186
 3672 16db 4C89F1   		mov	rcx, r14	# tmp223, range_start
 3673              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3674              		.loc 1 529 19 view .LVU1187
 3675 16de 4C89F6   		mov	rsi, r14	# range_start, tmp239
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3676              		.loc 1 530 13 is_stmt 1 view .LVU1188
 3677              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3678              		.loc 1 530 20 is_stmt 0 view .LVU1189
 3679 16e1 48C1E906 		shr	rcx, 6	# tmp223,
 3680              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3681              		.loc 1 530 18 view .LVU1190
 3682 16e5 4829D1   		sub	rcx, rdx	# word, current_vector_start_word
 531:sieve_extend.c ****         
 3683              		.loc 1 531 17 is_stmt 1 view .LVU1191
 3684              	# sieve_extend.c:531:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 531:sieve_extend.c ****         
 3685              		.loc 1 531 9 is_stmt 0 view .LVU1192
 3686 16e8 4883F903 		cmp	rcx, 3	# word,
 3687 16ec 0F87DE00 		ja	.L419	#,
 3687      0000
 527:sieve_extend.c ****             quadmask[word] |= markmask(index);
 3688              		.loc 1 527 9 is_stmt 1 view .LVU1193
 528:sieve_extend.c ****             index += step;
 3689              		.loc 1 528 13 view .LVU1194
 3690              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3691              		.loc 1 529 19 is_stmt 0 view .LVU1195
 3692 16f2 4883C601 		add	rsi, 1	# range_start,
 3693              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3694              		.loc 1 528 31 view .LVU1196
 3695 16f6 C4C289F7 		shlx	rbx, r11, r14	# tmp320, tmp222, range_start
 3695      DB
 3696              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
GAS LISTING /tmp/ccBvFgp2.s 			page 110


 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3697              		.loc 1 530 20 view .LVU1197
 3698 16fb 4989F4   		mov	r12, rsi	# tmp321, range_start
 3699              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3700              		.loc 1 528 28 view .LVU1198
 3701 16fe 48091CCC 		or	QWORD PTR [rsp+rcx*8], rbx	# quadmask, tmp320
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3702              		.loc 1 529 13 is_stmt 1 view .LVU1199
 3703              	.LVL137:
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3704              		.loc 1 530 13 view .LVU1200
 3705              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3706              		.loc 1 530 20 is_stmt 0 view .LVU1201
 3707 1702 49C1EC06 		shr	r12, 6	# tmp321,
 3708              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3709              		.loc 1 530 18 view .LVU1202
 3710 1706 4929D4   		sub	r12, rdx	# word, current_vector_start_word
 531:sieve_extend.c ****         
 3711              		.loc 1 531 17 is_stmt 1 view .LVU1203
 3712              	# sieve_extend.c:531:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 531:sieve_extend.c ****         
 3713              		.loc 1 531 9 is_stmt 0 view .LVU1204
 3714 1709 4983FC03 		cmp	r12, 3	# word,
 3715 170d 0F87BD00 		ja	.L419	#,
 3715      0000
 527:sieve_extend.c ****             quadmask[word] |= markmask(index);
 3716              		.loc 1 527 9 is_stmt 1 view .LVU1205
 528:sieve_extend.c ****             index += step;
 3717              		.loc 1 528 13 view .LVU1206
 3718              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3719              		.loc 1 528 31 is_stmt 0 view .LVU1207
 3720 1713 C4C2C9F7 		shlx	rsi, r11, rsi	# tmp323, tmp222, range_start
 3720      F3
 3721              	.LVL138:
 3722              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3723              		.loc 1 528 28 view .LVU1208
 3724 1718 4A0934E4 		or	QWORD PTR [rsp+r12*8], rsi	# quadmask, tmp323
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3725              		.loc 1 529 13 is_stmt 1 view .LVU1209
 3726              	.LVL139:
 3727              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3728              		.loc 1 529 19 is_stmt 0 view .LVU1210
 3729 171c 498D7602 		lea	rsi, 2[r14]	# range_start,
 3730              	.LVL140:
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3731              		.loc 1 530 13 is_stmt 1 view .LVU1211
 3732              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3733              		.loc 1 530 20 is_stmt 0 view .LVU1212
 3734 1720 4989F5   		mov	r13, rsi	# tmp324, range_start
 3735 1723 49C1ED06 		shr	r13, 6	# tmp324,
GAS LISTING /tmp/ccBvFgp2.s 			page 111


 3736              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3737              		.loc 1 530 18 view .LVU1213
 3738 1727 4929D5   		sub	r13, rdx	# word, current_vector_start_word
 531:sieve_extend.c ****         
 3739              		.loc 1 531 17 is_stmt 1 view .LVU1214
 3740              	# sieve_extend.c:531:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 531:sieve_extend.c ****         
 3741              		.loc 1 531 9 is_stmt 0 view .LVU1215
 3742 172a 4983FD03 		cmp	r13, 3	# word,
 3743 172e 0F879C00 		ja	.L419	#,
 3743      0000
 527:sieve_extend.c ****             quadmask[word] |= markmask(index);
 3744              		.loc 1 527 9 is_stmt 1 view .LVU1216
 528:sieve_extend.c ****             index += step;
 3745              		.loc 1 528 13 view .LVU1217
 3746              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3747              		.loc 1 528 31 is_stmt 0 view .LVU1218
 3748 1734 C442C9F7 		shlx	r15, r11, rsi	# tmp326, tmp222, range_start
 3748      FB
 3749              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3750              		.loc 1 529 19 view .LVU1219
 3751 1739 498D7603 		lea	rsi, 3[r14]	# range_start,
 3752              	.LVL141:
 3753              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3754              		.loc 1 530 20 view .LVU1220
 3755 173d 4889F1   		mov	rcx, rsi	# tmp327, range_start
 3756              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3757              		.loc 1 528 28 view .LVU1221
 3758 1740 4E093CEC 		or	QWORD PTR [rsp+r13*8], r15	# quadmask, tmp326
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3759              		.loc 1 529 13 is_stmt 1 view .LVU1222
 3760              	.LVL142:
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3761              		.loc 1 530 13 view .LVU1223
 3762              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3763              		.loc 1 530 20 is_stmt 0 view .LVU1224
 3764 1744 48C1E906 		shr	rcx, 6	# tmp327,
 3765              	.LVL143:
 3766              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3767              		.loc 1 530 18 view .LVU1225
 3768 1748 4829D1   		sub	rcx, rdx	# word, current_vector_start_word
 531:sieve_extend.c ****         
 3769              		.loc 1 531 17 is_stmt 1 view .LVU1226
 3770              	# sieve_extend.c:531:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 531:sieve_extend.c ****         
 3771              		.loc 1 531 9 is_stmt 0 view .LVU1227
 3772 174b 4883F903 		cmp	rcx, 3	# word,
 3773 174f 777F     		ja	.L419	#,
 527:sieve_extend.c ****             quadmask[word] |= markmask(index);
 3774              		.loc 1 527 9 is_stmt 1 view .LVU1228
GAS LISTING /tmp/ccBvFgp2.s 			page 112


 528:sieve_extend.c ****             index += step;
 3775              		.loc 1 528 13 view .LVU1229
 3776              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3777              		.loc 1 528 31 is_stmt 0 view .LVU1230
 3778 1751 C4C2C9F7 		shlx	rbx, r11, rsi	# tmp329, tmp222, range_start
 3778      DB
 3779              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3780              		.loc 1 529 19 view .LVU1231
 3781 1756 498D7604 		lea	rsi, 4[r14]	# range_start,
 3782              	.LVL144:
 3783              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3784              		.loc 1 530 20 view .LVU1232
 3785 175a 4989F4   		mov	r12, rsi	# tmp330, range_start
 3786              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3787              		.loc 1 528 28 view .LVU1233
 3788 175d 48091CCC 		or	QWORD PTR [rsp+rcx*8], rbx	# quadmask, tmp329
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3789              		.loc 1 529 13 is_stmt 1 view .LVU1234
 3790              	.LVL145:
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3791              		.loc 1 530 13 view .LVU1235
 3792              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3793              		.loc 1 530 20 is_stmt 0 view .LVU1236
 3794 1761 49C1EC06 		shr	r12, 6	# tmp330,
 3795              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3796              		.loc 1 530 18 view .LVU1237
 3797 1765 4929D4   		sub	r12, rdx	# word, current_vector_start_word
 531:sieve_extend.c ****         
 3798              		.loc 1 531 17 is_stmt 1 view .LVU1238
 3799              	# sieve_extend.c:531:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 531:sieve_extend.c ****         
 3800              		.loc 1 531 9 is_stmt 0 view .LVU1239
 3801 1768 4983FC03 		cmp	r12, 3	# word,
 3802 176c 7762     		ja	.L419	#,
 527:sieve_extend.c ****             quadmask[word] |= markmask(index);
 3803              		.loc 1 527 9 is_stmt 1 view .LVU1240
 528:sieve_extend.c ****             index += step;
 3804              		.loc 1 528 13 view .LVU1241
 3805              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3806              		.loc 1 528 31 is_stmt 0 view .LVU1242
 3807 176e C4C2C9F7 		shlx	rsi, r11, rsi	# tmp332, tmp222, range_start
 3807      F3
 3808              	.LVL146:
 3809              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3810              		.loc 1 528 28 view .LVU1243
 3811 1773 4A0934E4 		or	QWORD PTR [rsp+r12*8], rsi	# quadmask, tmp332
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3812              		.loc 1 529 13 is_stmt 1 view .LVU1244
 3813              	.LVL147:
GAS LISTING /tmp/ccBvFgp2.s 			page 113


 3814              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3815              		.loc 1 529 19 is_stmt 0 view .LVU1245
 3816 1777 498D7605 		lea	rsi, 5[r14]	# range_start,
 3817              	.LVL148:
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3818              		.loc 1 530 13 is_stmt 1 view .LVU1246
 3819              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3820              		.loc 1 530 20 is_stmt 0 view .LVU1247
 3821 177b 4989F5   		mov	r13, rsi	# tmp333, range_start
 3822 177e 49C1ED06 		shr	r13, 6	# tmp333,
 3823              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3824              		.loc 1 530 18 view .LVU1248
 3825 1782 4929D5   		sub	r13, rdx	# word, current_vector_start_word
 531:sieve_extend.c ****         
 3826              		.loc 1 531 17 is_stmt 1 view .LVU1249
 3827              	# sieve_extend.c:531:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 531:sieve_extend.c ****         
 3828              		.loc 1 531 9 is_stmt 0 view .LVU1250
 3829 1785 4983FD03 		cmp	r13, 3	# word,
 3830 1789 7745     		ja	.L419	#,
 527:sieve_extend.c ****             quadmask[word] |= markmask(index);
 3831              		.loc 1 527 9 is_stmt 1 view .LVU1251
 528:sieve_extend.c ****             index += step;
 3832              		.loc 1 528 13 view .LVU1252
 3833              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3834              		.loc 1 528 31 is_stmt 0 view .LVU1253
 3835 178b C442C9F7 		shlx	r15, r11, rsi	# tmp335, tmp222, range_start
 3835      FB
 3836              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3837              		.loc 1 529 19 view .LVU1254
 3838 1790 498D7606 		lea	rsi, 6[r14]	# range_start,
 3839              	.LVL149:
 3840              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3841              		.loc 1 530 20 view .LVU1255
 3842 1794 4889F1   		mov	rcx, rsi	# tmp336, range_start
 3843              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3844              		.loc 1 528 28 view .LVU1256
 3845 1797 4E093CEC 		or	QWORD PTR [rsp+r13*8], r15	# quadmask, tmp335
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3846              		.loc 1 529 13 is_stmt 1 view .LVU1257
 3847              	.LVL150:
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3848              		.loc 1 530 13 view .LVU1258
 3849              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3850              		.loc 1 530 20 is_stmt 0 view .LVU1259
 3851 179b 48C1E906 		shr	rcx, 6	# tmp336,
 3852              	.LVL151:
 3853              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
GAS LISTING /tmp/ccBvFgp2.s 			page 114


 3854              		.loc 1 530 18 view .LVU1260
 3855 179f 4829D1   		sub	rcx, rdx	# word, current_vector_start_word
 531:sieve_extend.c ****         
 3856              		.loc 1 531 17 is_stmt 1 view .LVU1261
 3857              	# sieve_extend.c:531:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 531:sieve_extend.c ****         
 3858              		.loc 1 531 9 is_stmt 0 view .LVU1262
 3859 17a2 4883F903 		cmp	rcx, 3	# word,
 3860 17a6 7728     		ja	.L419	#,
 527:sieve_extend.c ****             quadmask[word] |= markmask(index);
 3861              		.loc 1 527 9 is_stmt 1 view .LVU1263
 528:sieve_extend.c ****             index += step;
 3862              		.loc 1 528 13 view .LVU1264
 3863              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3864              		.loc 1 528 31 is_stmt 0 view .LVU1265
 3865 17a8 C4C2C9F7 		shlx	rbx, r11, rsi	# tmp338, tmp222, range_start
 3865      DB
 3866              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3867              		.loc 1 529 19 view .LVU1266
 3868 17ad 498D7607 		lea	rsi, 7[r14]	# range_start,
 3869              	.LVL152:
 3870              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3871              		.loc 1 530 20 view .LVU1267
 3872 17b1 4989F6   		mov	r14, rsi	# tmp339, range_start
 3873              	.LVL153:
 3874              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 3875              		.loc 1 528 28 view .LVU1268
 3876 17b4 48091CCC 		or	QWORD PTR [rsp+rcx*8], rbx	# quadmask, tmp338
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3877              		.loc 1 529 13 is_stmt 1 view .LVU1269
 3878              	.LVL154:
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3879              		.loc 1 530 13 view .LVU1270
 3880              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3881              		.loc 1 530 20 is_stmt 0 view .LVU1271
 3882 17b8 49C1EE06 		shr	r14, 6	# tmp339,
 3883              	.LVL155:
 3884              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3885              		.loc 1 530 18 view .LVU1272
 3886 17bc 4929D6   		sub	r14, rdx	# word, current_vector_start_word
 3887              	.LVL156:
 531:sieve_extend.c ****         
 3888              		.loc 1 531 17 is_stmt 1 view .LVU1273
 3889              	# sieve_extend.c:531:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 531:sieve_extend.c ****         
 3890              		.loc 1 531 9 is_stmt 0 view .LVU1274
 3891 17bf 4983FE03 		cmp	r14, 3	# word,
 3892 17c3 0F8605FF 		jbe	.L279	#,
 3892      FFFF
 3893              	.LVL157:
 3894 17c9 0F1F8000 		.p2align 4
GAS LISTING /tmp/ccBvFgp2.s 			page 115


 3894      000000
 3895              		.p2align 3
 3896              	.L419:
 534:sieve_extend.c ****         const counter_t range_stop_vector = vectorindex(range_stop);
 3897              		.loc 1 534 9 is_stmt 1 view .LVU1275
 535:sieve_extend.c **** 
 3898              		.loc 1 535 9 view .LVU1276
 537:sieve_extend.c **** 
 3899              		.loc 1 537 9 view .LVU1277
 3900              	.LBB330:
 3901              	.LBB327:
 3902              	# sieve_extend.c:426:    register bitvector_t* __restrict index_ptr      =  __builtin_assume_aligne
 426:sieve_extend.c ****    register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_st
 3903              		.loc 1 426 89 is_stmt 0 view .LVU1278
 3904 17d0 48C1E005 		sal	rax, 5	# tmp224,
 3905              	.LVL158:
 426:sieve_extend.c ****    register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_st
 3906              		.loc 1 426 89 view .LVU1279
 3907              	.LBE327:
 3908              	.LBE330:
 3909              	# sieve_extend.c:537:         applyMask_vector(bitarray_vector, step, range_stop, quadmask, current
 537:sieve_extend.c **** 
 3910              		.loc 1 537 9 view .LVU1280
 3911 17d4 C5FD6F1C 		vmovdqa	ymm3, YMMWORD PTR [rsp]	# quadmask.55_171, quadmask
 3911      24
 3912              	.LVL159:
 3913              	.LBB331:
 3914              	.LBI325:
 424:sieve_extend.c ****    const counter_t range_stop_vector = vectorindex(range_stop);
 3915              		.loc 1 424 20 is_stmt 1 view .LVU1281
 3916              	.LBB328:
 425:sieve_extend.c ****    register bitvector_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_vect
 3917              		.loc 1 425 4 view .LVU1282
 426:sieve_extend.c ****    register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_st
 3918              		.loc 1 426 4 view .LVU1283
 3919              	# sieve_extend.c:426:    register bitvector_t* __restrict index_ptr      =  __builtin_assume_aligne
 426:sieve_extend.c ****    register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_st
 3920              		.loc 1 426 80 is_stmt 0 view .LVU1284
 3921 17d9 4801F8   		add	rax, rdi	# _70, bitarray_word
 3922              	.LVL160:
 427:sieve_extend.c **** 
 3923              		.loc 1 427 4 is_stmt 1 view .LVU1285
 431:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3924              		.loc 1 431 4 view .LVU1286
 431:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3925              		.loc 1 431 10 view .LVU1287
 3926 17dc 4939C0   		cmp	r8, rax	# fast_loop_ptr, _70
 3927 17df 0F865B01 		jbe	.L280	#,
 3927      0000
 3928 17e5 488D5040 		lea	rdx, 64[rax]	# ivtmp.261,
 3929              	.LVL161:
 3930              	.L281:
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3931              		.loc 1 432 8 view .LVU1288
 3932              	# sieve_extend.c:432:        *index_ptr |= mask; index_ptr+=step;
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3933              		.loc 1 432 19 is_stmt 0 view .LVU1289
GAS LISTING /tmp/ccBvFgp2.s 			page 116


 3934 17e9 C5E5EB08 		vpor	ymm1, ymm3, YMMWORD PTR [rax]	# tmp225, quadmask.55_171, MEM[base: index_ptr_164, offset: 0B]
 3935              	# sieve_extend.c:433:        *index_ptr |= mask; index_ptr+=step;
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3936              		.loc 1 433 19 view .LVU1290
 3937 17ed C5E5EB60 		vpor	ymm4, ymm3, YMMWORD PTR 32[rax]	# tmp226, quadmask.55_171, MEM[base: index_ptr_164, offset: 3
 3937      20
 3938              	# sieve_extend.c:432:        *index_ptr |= mask; index_ptr+=step;
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3939              		.loc 1 432 19 view .LVU1291
 3940 17f2 C5FD7F08 		vmovdqa	YMMWORD PTR [rax], ymm1	# MEM[base: index_ptr_164, offset: 0B], tmp225
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3941              		.loc 1 432 28 is_stmt 1 view .LVU1292
 3942              	.LVL162:
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3943              		.loc 1 433 8 view .LVU1293
 3944 17f6 4C8DA0A0 		lea	r12, 160[rax]	# tmp237,
 3944      000000
 3945              	# sieve_extend.c:433:        *index_ptr |= mask; index_ptr+=step;
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3946              		.loc 1 433 19 is_stmt 0 view .LVU1294
 3947 17fd C5FD7F60 		vmovdqa	YMMWORD PTR 32[rax], ymm4	# MEM[base: index_ptr_164, offset: 32B], tmp226
 3947      20
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3948              		.loc 1 433 28 is_stmt 1 view .LVU1295
 3949              	.LVL163:
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3950              		.loc 1 434 8 view .LVU1296
 3951              	# sieve_extend.c:431:    while likely(index_ptr < fast_loop_ptr) {
 431:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3952              		.loc 1 431 10 is_stmt 0 view .LVU1297
 3953 1802 4D39C4   		cmp	r12, r8	# _70, fast_loop_ptr
 3954              	# sieve_extend.c:434:        *index_ptr |= mask; index_ptr+=step;
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3955              		.loc 1 434 19 view .LVU1298
 3956 1805 C5E5EB2A 		vpor	ymm5, ymm3, YMMWORD PTR [rdx]	# tmp227, quadmask.55_171, MEM[base: _47, offset: 0B]
 3957              	# sieve_extend.c:435:        *index_ptr |= mask; index_ptr+=step;
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3958              		.loc 1 435 19 view .LVU1299
 3959 1809 C5E5EB72 		vpor	ymm6, ymm3, YMMWORD PTR 32[rdx]	# tmp228, quadmask.55_171, MEM[base: _47, offset: 32B]
 3959      20
 3960              	# sieve_extend.c:434:        *index_ptr |= mask; index_ptr+=step;
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3961              		.loc 1 434 19 view .LVU1300
 3962 180e C5FD7F2A 		vmovdqa	YMMWORD PTR [rdx], ymm5	# MEM[base: _47, offset: 0B], tmp227
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3963              		.loc 1 434 28 is_stmt 1 view .LVU1301
 3964              	.LVL164:
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3965              		.loc 1 435 8 view .LVU1302
 3966 1812 4C8DAAA0 		lea	r13, 160[rdx]	# tmp238,
 3966      000000
 3967              	# sieve_extend.c:435:        *index_ptr |= mask; index_ptr+=step;
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3968              		.loc 1 435 19 is_stmt 0 view .LVU1303
 3969 1819 C5FD7F72 		vmovdqa	YMMWORD PTR 32[rdx], ymm6	# MEM[base: _47, offset: 32B], tmp228
 3969      20
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
GAS LISTING /tmp/ccBvFgp2.s 			page 117


 3970              		.loc 1 435 28 is_stmt 1 view .LVU1304
 3971              	.LVL165:
 436:sieve_extend.c ****    }
 3972              		.loc 1 436 8 view .LVU1305
 3973              	# sieve_extend.c:436:        *index_ptr |= mask; index_ptr+=step;
 436:sieve_extend.c ****    }
 3974              		.loc 1 436 19 is_stmt 0 view .LVU1306
 3975 181e C5E5EBB8 		vpor	ymm7, ymm3, YMMWORD PTR 128[rax]	# tmp229, quadmask.55_171, MEM[base: index_ptr_164, offset: 
 3975      80000000 
 3976 1826 C5FD7FB8 		vmovdqa	YMMWORD PTR 128[rax], ymm7	# MEM[base: index_ptr_164, offset: 128B], tmp229
 3976      80000000 
 436:sieve_extend.c ****    }
 3977              		.loc 1 436 28 is_stmt 1 view .LVU1307
 3978              	.LVL166:
 436:sieve_extend.c ****    }
 3979              		.loc 1 436 28 is_stmt 0 view .LVU1308
 3980 182e 4C89E0   		mov	rax, r12	# _70, tmp237
 3981              	.LVL167:
 431:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3982              		.loc 1 431 10 is_stmt 1 view .LVU1309
 3983 1831 0F830901 		jnb	.L280	#,
 3983      0000
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3984              		.loc 1 432 8 view .LVU1310
 3985              	# sieve_extend.c:432:        *index_ptr |= mask; index_ptr+=step;
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3986              		.loc 1 432 19 is_stmt 0 view .LVU1311
 3987 1837 C4C165EB 		vpor	ymm0, ymm3, YMMWORD PTR [r12]	# tmp303, quadmask.55_171, MEM[base: index_ptr_164, offset: 0B]
 3987      0424
 3988              	# sieve_extend.c:433:        *index_ptr |= mask; index_ptr+=step;
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3989              		.loc 1 433 19 view .LVU1312
 3990 183d C44165EB 		vpor	ymm8, ymm3, YMMWORD PTR 32[r12]	# tmp304, quadmask.55_171, MEM[base: index_ptr_164, offset: 3
 3990      442420
 3991              	# sieve_extend.c:432:        *index_ptr |= mask; index_ptr+=step;
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3992              		.loc 1 432 19 view .LVU1313
 3993 1844 C4C17D7F 		vmovdqa	YMMWORD PTR [r12], ymm0	# MEM[base: index_ptr_164, offset: 0B], tmp303
 3993      0424
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3994              		.loc 1 432 28 is_stmt 1 view .LVU1314
 3995              	.LVL168:
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3996              		.loc 1 433 8 view .LVU1315
 3997 184a 4805A000 		add	rax, 160	# _70,
 3997      0000
 3998              	# sieve_extend.c:433:        *index_ptr |= mask; index_ptr+=step;
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 3999              		.loc 1 433 19 is_stmt 0 view .LVU1316
 4000 1850 C4417D7F 		vmovdqa	YMMWORD PTR 32[r12], ymm8	# MEM[base: index_ptr_164, offset: 32B], tmp304
 4000      442420
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4001              		.loc 1 433 28 is_stmt 1 view .LVU1317
 4002              	.LVL169:
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4003              		.loc 1 434 8 view .LVU1318
 4004              	# sieve_extend.c:431:    while likely(index_ptr < fast_loop_ptr) {
GAS LISTING /tmp/ccBvFgp2.s 			page 118


 431:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4005              		.loc 1 431 10 is_stmt 0 view .LVU1319
 4006 1857 4C39C0   		cmp	rax, r8	# _70, fast_loop_ptr
 4007              	# sieve_extend.c:434:        *index_ptr |= mask; index_ptr+=step;
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4008              		.loc 1 434 19 view .LVU1320
 4009 185a C565EB8A 		vpor	ymm9, ymm3, YMMWORD PTR 160[rdx]	# tmp305, quadmask.55_171, MEM[base: _47, offset: 0B]
 4009      A0000000 
 4010 1862 C57D7F8A 		vmovdqa	YMMWORD PTR 160[rdx], ymm9	# MEM[base: _47, offset: 0B], tmp305
 4010      A0000000 
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4011              		.loc 1 434 28 is_stmt 1 view .LVU1321
 4012              	.LVL170:
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4013              		.loc 1 435 8 view .LVU1322
 4014              	# sieve_extend.c:435:        *index_ptr |= mask; index_ptr+=step;
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4015              		.loc 1 435 19 is_stmt 0 view .LVU1323
 4016 186a C44165EB 		vpor	ymm10, ymm3, YMMWORD PTR 32[r13]	# tmp306, quadmask.55_171, MEM[base: _47, offset: 32B]
 4016      5520
 4017 1870 C4417D7F 		vmovdqa	YMMWORD PTR 32[r13], ymm10	# MEM[base: _47, offset: 32B], tmp306
 4017      5520
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4018              		.loc 1 435 28 is_stmt 1 view .LVU1324
 4019              	.LVL171:
 436:sieve_extend.c ****    }
 4020              		.loc 1 436 8 view .LVU1325
 4021              	# sieve_extend.c:436:        *index_ptr |= mask; index_ptr+=step;
 436:sieve_extend.c ****    }
 4022              		.loc 1 436 19 is_stmt 0 view .LVU1326
 4023 1876 C44165EB 		vpor	ymm11, ymm3, YMMWORD PTR 128[r12]	# tmp307, quadmask.55_171, MEM[base: index_ptr_164, offset:
 4023      9C248000 
 4023      0000
 4024 1880 C4417D7F 		vmovdqa	YMMWORD PTR 128[r12], ymm11	# MEM[base: index_ptr_164, offset: 128B], tmp307
 4024      9C248000 
 4024      0000
 436:sieve_extend.c ****    }
 4025              		.loc 1 436 28 is_stmt 1 view .LVU1327
 4026              	.LVL172:
 431:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4027              		.loc 1 431 10 view .LVU1328
 4028 188a 0F83B000 		jnb	.L280	#,
 4028      0000
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4029              		.loc 1 432 8 view .LVU1329
 4030              	# sieve_extend.c:432:        *index_ptr |= mask; index_ptr+=step;
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4031              		.loc 1 432 19 is_stmt 0 view .LVU1330
 4032 1890 C565EB20 		vpor	ymm12, ymm3, YMMWORD PTR [rax]	# tmp309, quadmask.55_171, MEM[base: index_ptr_164, offset: 0B
 4033              	# sieve_extend.c:433:        *index_ptr |= mask; index_ptr+=step;
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4034              		.loc 1 433 19 view .LVU1331
 4035 1894 C565EB68 		vpor	ymm13, ymm3, YMMWORD PTR 32[rax]	# tmp310, quadmask.55_171, MEM[base: index_ptr_164, offset: 
 4035      20
 4036              	# sieve_extend.c:432:        *index_ptr |= mask; index_ptr+=step;
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4037              		.loc 1 432 19 view .LVU1332
GAS LISTING /tmp/ccBvFgp2.s 			page 119


 4038 1899 C57D7F20 		vmovdqa	YMMWORD PTR [rax], ymm12	# MEM[base: index_ptr_164, offset: 0B], tmp309
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4039              		.loc 1 432 28 is_stmt 1 view .LVU1333
 4040              	.LVL173:
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4041              		.loc 1 433 8 view .LVU1334
 4042              	# sieve_extend.c:433:        *index_ptr |= mask; index_ptr+=step;
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4043              		.loc 1 433 19 is_stmt 0 view .LVU1335
 4044 189d C57D7F68 		vmovdqa	YMMWORD PTR 32[rax], ymm13	# MEM[base: index_ptr_164, offset: 32B], tmp310
 4044      20
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4045              		.loc 1 433 28 is_stmt 1 view .LVU1336
 4046              	.LVL174:
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4047              		.loc 1 434 8 view .LVU1337
 4048              	# sieve_extend.c:434:        *index_ptr |= mask; index_ptr+=step;
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4049              		.loc 1 434 19 is_stmt 0 view .LVU1338
 4050 18a2 C565EBB2 		vpor	ymm14, ymm3, YMMWORD PTR 320[rdx]	# tmp311, quadmask.55_171, MEM[base: _47, offset: 0B]
 4050      40010000 
 4051              	# sieve_extend.c:435:        *index_ptr |= mask; index_ptr+=step;
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4052              		.loc 1 435 19 view .LVU1339
 4053 18aa C565EBBA 		vpor	ymm15, ymm3, YMMWORD PTR 352[rdx]	# tmp312, quadmask.55_171, MEM[base: _47, offset: 32B]
 4053      60010000 
 4054              	# sieve_extend.c:434:        *index_ptr |= mask; index_ptr+=step;
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4055              		.loc 1 434 19 view .LVU1340
 4056 18b2 C57D7FB2 		vmovdqa	YMMWORD PTR 320[rdx], ymm14	# MEM[base: _47, offset: 0B], tmp311
 4056      40010000 
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4057              		.loc 1 434 28 is_stmt 1 view .LVU1341
 4058              	.LVL175:
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4059              		.loc 1 435 8 view .LVU1342
 4060              	# sieve_extend.c:435:        *index_ptr |= mask; index_ptr+=step;
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4061              		.loc 1 435 19 is_stmt 0 view .LVU1343
 4062 18ba C57D7FBA 		vmovdqa	YMMWORD PTR 352[rdx], ymm15	# MEM[base: _47, offset: 32B], tmp312
 4062      60010000 
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4063              		.loc 1 435 28 is_stmt 1 view .LVU1344
 4064              	.LVL176:
 436:sieve_extend.c ****    }
 4065              		.loc 1 436 8 view .LVU1345
 4066              	# sieve_extend.c:436:        *index_ptr |= mask; index_ptr+=step;
 436:sieve_extend.c ****    }
 4067              		.loc 1 436 19 is_stmt 0 view .LVU1346
 4068 18c2 C5E5EB88 		vpor	ymm1, ymm3, YMMWORD PTR 128[rax]	# tmp313, quadmask.55_171, MEM[base: index_ptr_164, offset: 
 4068      80000000 
 4069 18ca C5FD7F88 		vmovdqa	YMMWORD PTR 128[rax], ymm1	# MEM[base: index_ptr_164, offset: 128B], tmp313
 4069      80000000 
 436:sieve_extend.c ****    }
 4070              		.loc 1 436 28 is_stmt 1 view .LVU1347
 4071              	.LVL177:
 436:sieve_extend.c ****    }
GAS LISTING /tmp/ccBvFgp2.s 			page 120


 4072              		.loc 1 436 28 is_stmt 0 view .LVU1348
 4073 18d2 498D8424 		lea	rax, 320[r12]	# _70,
 4073      40010000 
 4074              	.LVL178:
 431:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4075              		.loc 1 431 10 is_stmt 1 view .LVU1349
 4076 18da 4C39C0   		cmp	rax, r8	# _70, fast_loop_ptr
 4077 18dd 7361     		jnb	.L280	#,
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4078              		.loc 1 432 8 view .LVU1350
 4079              	# sieve_extend.c:432:        *index_ptr |= mask; index_ptr+=step;
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4080              		.loc 1 432 19 is_stmt 0 view .LVU1351
 4081 18df C4C165EB 		vpor	ymm4, ymm3, YMMWORD PTR 320[r12]	# tmp315, quadmask.55_171, MEM[base: index_ptr_164, offset: 
 4081      A4244001 
 4081      0000
 4082 18e9 4881C280 		add	rdx, 640	# ivtmp.261,
 4082      020000
 4083 18f0 C4C17D7F 		vmovdqa	YMMWORD PTR 320[r12], ymm4	# MEM[base: index_ptr_164, offset: 0B], tmp315
 4083      A4244001 
 4083      0000
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4084              		.loc 1 432 28 is_stmt 1 view .LVU1352
 4085              	.LVL179:
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4086              		.loc 1 433 8 view .LVU1353
 4087              	# sieve_extend.c:433:        *index_ptr |= mask; index_ptr+=step;
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4088              		.loc 1 433 19 is_stmt 0 view .LVU1354
 4089 18fa C5E5EB68 		vpor	ymm5, ymm3, YMMWORD PTR 32[rax]	# tmp316, quadmask.55_171, MEM[base: index_ptr_164, offset: 3
 4089      20
 4090 18ff C5FD7F68 		vmovdqa	YMMWORD PTR 32[rax], ymm5	# MEM[base: index_ptr_164, offset: 32B], tmp316
 4090      20
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4091              		.loc 1 433 28 is_stmt 1 view .LVU1355
 4092              	.LVL180:
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4093              		.loc 1 434 8 view .LVU1356
 4094              	# sieve_extend.c:434:        *index_ptr |= mask; index_ptr+=step;
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4095              		.loc 1 434 19 is_stmt 0 view .LVU1357
 4096 1904 C5E5EBB2 		vpor	ymm6, ymm3, YMMWORD PTR -160[rdx]	# tmp317, quadmask.55_171, MEM[base: _47, offset: 0B]
 4096      60FFFFFF 
 4097              	# sieve_extend.c:435:        *index_ptr |= mask; index_ptr+=step;
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4098              		.loc 1 435 19 view .LVU1358
 4099 190c C5E5EB7A 		vpor	ymm7, ymm3, YMMWORD PTR -128[rdx]	# tmp318, quadmask.55_171, MEM[base: _47, offset: 32B]
 4099      80
 4100              	# sieve_extend.c:434:        *index_ptr |= mask; index_ptr+=step;
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4101              		.loc 1 434 19 view .LVU1359
 4102 1911 C5FD7FB2 		vmovdqa	YMMWORD PTR -160[rdx], ymm6	# MEM[base: _47, offset: 0B], tmp317
 4102      60FFFFFF 
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4103              		.loc 1 434 28 is_stmt 1 view .LVU1360
 4104              	.LVL181:
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
GAS LISTING /tmp/ccBvFgp2.s 			page 121


 4105              		.loc 1 435 8 view .LVU1361
 4106              	# sieve_extend.c:435:        *index_ptr |= mask; index_ptr+=step;
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4107              		.loc 1 435 19 is_stmt 0 view .LVU1362
 4108 1919 C5FD7F7A 		vmovdqa	YMMWORD PTR -128[rdx], ymm7	# MEM[base: _47, offset: 32B], tmp318
 4108      80
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4109              		.loc 1 435 28 is_stmt 1 view .LVU1363
 4110              	.LVL182:
 436:sieve_extend.c ****    }
 4111              		.loc 1 436 8 view .LVU1364
 4112              	# sieve_extend.c:436:        *index_ptr |= mask; index_ptr+=step;
 436:sieve_extend.c ****    }
 4113              		.loc 1 436 19 is_stmt 0 view .LVU1365
 4114 191e C5E5EB80 		vpor	ymm0, ymm3, YMMWORD PTR 128[rax]	# tmp319, quadmask.55_171, MEM[base: index_ptr_164, offset: 
 4114      80000000 
 4115 1926 C5FD7F80 		vmovdqa	YMMWORD PTR 128[rax], ymm0	# MEM[base: index_ptr_164, offset: 128B], tmp319
 4115      80000000 
 436:sieve_extend.c ****    }
 4116              		.loc 1 436 28 is_stmt 1 view .LVU1366
 4117              	.LVL183:
 436:sieve_extend.c ****    }
 4118              		.loc 1 436 28 is_stmt 0 view .LVU1367
 4119 192e 498D8424 		lea	rax, 480[r12]	# _70,
 4119      E0010000 
 4120              	.LVL184:
 431:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4121              		.loc 1 431 10 is_stmt 1 view .LVU1368
 4122 1936 4C39C0   		cmp	rax, r8	# _70, fast_loop_ptr
 4123 1939 0F82AAFE 		jb	.L281	#,
 4123      FFFF
 4124 193f 90       		.p2align 4
 4125              		.p2align 3
 4126              	.L280:
 439:sieve_extend.c ****    while likely(index_ptr <= range_stop_ptr) {
 4127              		.loc 1 439 4 view .LVU1369
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4128              		.loc 1 440 4 view .LVU1370
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4129              		.loc 1 440 10 view .LVU1371
 4130 1940 4939C1   		cmp	r9, rax	# range_stop_ptr, _70
 4131 1943 0F821E01 		jb	.L282	#,
 4131      0000
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4132              		.loc 1 440 10 is_stmt 0 view .LVU1372
 4133 1949 4D89CF   		mov	r15, r9	# tmp234, range_stop_ptr
 4134              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4135              		.loc 1 441 37 view .LVU1373
 4136 194c 488D4820 		lea	rcx, 32[rax]	# _70,
 4137 1950 4929C7   		sub	r15, rax	# tmp234, _70
 4138              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4139              		.loc 1 441 19 view .LVU1374
 4140 1953 C565EB00 		vpor	ymm8, ymm3, YMMWORD PTR [rax]	# tmp230, quadmask.55_171, MEM[base: index_ptr_130, offset: 0B]
 4141 1957 49C1EF05 		shr	r15, 5	# tmp233,
 4142 195b C57D7F00 		vmovdqa	YMMWORD PTR [rax], ymm8	# MEM[base: index_ptr_130, offset: 0B], tmp230
GAS LISTING /tmp/ccBvFgp2.s 			page 122


 4143 195f 4183E707 		and	r15d, 7	# tmp235,
 441:sieve_extend.c ****    }
 4144              		.loc 1 441 8 is_stmt 1 view .LVU1375
 441:sieve_extend.c ****    }
 4145              		.loc 1 441 28 view .LVU1376
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4146              		.loc 1 440 10 view .LVU1377
 4147 1963 4939C9   		cmp	r9, rcx	# range_stop_ptr, _70
 4148 1966 0F82FB00 		jb	.L282	#,
 4148      0000
 4149 196c 4D85FF   		test	r15, r15	# tmp235
 4150 196f 0F848300 		je	.L283	#,
 4150      0000
 4151 1975 4983FF01 		cmp	r15, 1	# tmp235,
 4152 1979 746B     		je	.L378	#,
 4153 197b 4983FF02 		cmp	r15, 2	# tmp235,
 4154 197f 7458     		je	.L379	#,
 4155 1981 4983FF03 		cmp	r15, 3	# tmp235,
 4156 1985 7445     		je	.L380	#,
 4157 1987 4983FF04 		cmp	r15, 4	# tmp235,
 4158 198b 7432     		je	.L381	#,
 4159 198d 4983FF05 		cmp	r15, 5	# tmp235,
 4160 1991 741F     		je	.L382	#,
 4161 1993 4983FF06 		cmp	r15, 6	# tmp235,
 4162 1997 740C     		je	.L383	#,
 441:sieve_extend.c ****    }
 4163              		.loc 1 441 8 view .LVU1378
 4164              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4165              		.loc 1 441 19 is_stmt 0 view .LVU1379
 4166 1999 C565EB09 		vpor	ymm9, ymm3, YMMWORD PTR [rcx]	# tmp296, quadmask.55_171, MEM[base: index_ptr_130, offset: 0B]
 4167 199d C57D7F09 		vmovdqa	YMMWORD PTR [rcx], ymm9	# MEM[base: index_ptr_130, offset: 0B], tmp296
 441:sieve_extend.c ****    }
 4168              		.loc 1 441 28 is_stmt 1 view .LVU1380
 4169              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4170              		.loc 1 441 37 is_stmt 0 view .LVU1381
 4171 19a1 488D4840 		lea	rcx, 64[rax]	# _70,
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4172              		.loc 1 440 10 is_stmt 1 view .LVU1382
 4173              	.L383:
 441:sieve_extend.c ****    }
 4174              		.loc 1 441 8 view .LVU1383
 4175              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4176              		.loc 1 441 19 is_stmt 0 view .LVU1384
 4177 19a5 C565EB11 		vpor	ymm10, ymm3, YMMWORD PTR [rcx]	# tmp297, quadmask.55_171, MEM[base: index_ptr_130, offset: 0B
 4178              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4179              		.loc 1 441 37 view .LVU1385
 4180 19a9 4883C120 		add	rcx, 32	# _70,
 4181              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4182              		.loc 1 441 19 view .LVU1386
 4183 19ad C57D7F51 		vmovdqa	YMMWORD PTR -32[rcx], ymm10	# MEM[base: index_ptr_130, offset: 0B], tmp297
 4183      E0
 441:sieve_extend.c ****    }
GAS LISTING /tmp/ccBvFgp2.s 			page 123


 4184              		.loc 1 441 28 is_stmt 1 view .LVU1387
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4185              		.loc 1 440 10 view .LVU1388
 4186              	.L382:
 441:sieve_extend.c ****    }
 4187              		.loc 1 441 8 view .LVU1389
 4188              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4189              		.loc 1 441 19 is_stmt 0 view .LVU1390
 4190 19b2 C565EB19 		vpor	ymm11, ymm3, YMMWORD PTR [rcx]	# tmp298, quadmask.55_171, MEM[base: index_ptr_130, offset: 0B
 4191              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4192              		.loc 1 441 37 view .LVU1391
 4193 19b6 4883C120 		add	rcx, 32	# _70,
 4194              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4195              		.loc 1 441 19 view .LVU1392
 4196 19ba C57D7F59 		vmovdqa	YMMWORD PTR -32[rcx], ymm11	# MEM[base: index_ptr_130, offset: 0B], tmp298
 4196      E0
 441:sieve_extend.c ****    }
 4197              		.loc 1 441 28 is_stmt 1 view .LVU1393
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4198              		.loc 1 440 10 view .LVU1394
 4199              	.L381:
 441:sieve_extend.c ****    }
 4200              		.loc 1 441 8 view .LVU1395
 4201              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4202              		.loc 1 441 19 is_stmt 0 view .LVU1396
 4203 19bf C565EB21 		vpor	ymm12, ymm3, YMMWORD PTR [rcx]	# tmp299, quadmask.55_171, MEM[base: index_ptr_130, offset: 0B
 4204              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4205              		.loc 1 441 37 view .LVU1397
 4206 19c3 4883C120 		add	rcx, 32	# _70,
 4207              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4208              		.loc 1 441 19 view .LVU1398
 4209 19c7 C57D7F61 		vmovdqa	YMMWORD PTR -32[rcx], ymm12	# MEM[base: index_ptr_130, offset: 0B], tmp299
 4209      E0
 441:sieve_extend.c ****    }
 4210              		.loc 1 441 28 is_stmt 1 view .LVU1399
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4211              		.loc 1 440 10 view .LVU1400
 4212              	.L380:
 441:sieve_extend.c ****    }
 4213              		.loc 1 441 8 view .LVU1401
 4214              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4215              		.loc 1 441 19 is_stmt 0 view .LVU1402
 4216 19cc C565EB29 		vpor	ymm13, ymm3, YMMWORD PTR [rcx]	# tmp300, quadmask.55_171, MEM[base: index_ptr_130, offset: 0B
 4217              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4218              		.loc 1 441 37 view .LVU1403
 4219 19d0 4883C120 		add	rcx, 32	# _70,
 4220              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4221              		.loc 1 441 19 view .LVU1404
GAS LISTING /tmp/ccBvFgp2.s 			page 124


 4222 19d4 C57D7F69 		vmovdqa	YMMWORD PTR -32[rcx], ymm13	# MEM[base: index_ptr_130, offset: 0B], tmp300
 4222      E0
 441:sieve_extend.c ****    }
 4223              		.loc 1 441 28 is_stmt 1 view .LVU1405
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4224              		.loc 1 440 10 view .LVU1406
 4225              	.L379:
 441:sieve_extend.c ****    }
 4226              		.loc 1 441 8 view .LVU1407
 4227              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4228              		.loc 1 441 19 is_stmt 0 view .LVU1408
 4229 19d9 C565EB31 		vpor	ymm14, ymm3, YMMWORD PTR [rcx]	# tmp301, quadmask.55_171, MEM[base: index_ptr_130, offset: 0B
 4230              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4231              		.loc 1 441 37 view .LVU1409
 4232 19dd 4883C120 		add	rcx, 32	# _70,
 4233              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4234              		.loc 1 441 19 view .LVU1410
 4235 19e1 C57D7F71 		vmovdqa	YMMWORD PTR -32[rcx], ymm14	# MEM[base: index_ptr_130, offset: 0B], tmp301
 4235      E0
 441:sieve_extend.c ****    }
 4236              		.loc 1 441 28 is_stmt 1 view .LVU1411
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4237              		.loc 1 440 10 view .LVU1412
 4238              	.L378:
 441:sieve_extend.c ****    }
 4239              		.loc 1 441 8 view .LVU1413
 4240              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4241              		.loc 1 441 19 is_stmt 0 view .LVU1414
 4242 19e6 C565EB39 		vpor	ymm15, ymm3, YMMWORD PTR [rcx]	# tmp302, quadmask.55_171, MEM[base: index_ptr_130, offset: 0B
 4243              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4244              		.loc 1 441 37 view .LVU1415
 4245 19ea 4883C120 		add	rcx, 32	# _70,
 4246              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4247              		.loc 1 441 19 view .LVU1416
 4248 19ee C57D7F79 		vmovdqa	YMMWORD PTR -32[rcx], ymm15	# MEM[base: index_ptr_130, offset: 0B], tmp302
 4248      E0
 441:sieve_extend.c ****    }
 4249              		.loc 1 441 28 is_stmt 1 view .LVU1417
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4250              		.loc 1 440 10 view .LVU1418
 4251 19f3 4939C9   		cmp	r9, rcx	# range_stop_ptr, _70
 4252 19f6 726F     		jb	.L282	#,
 4253              	.L283:
 441:sieve_extend.c ****    }
 4254              		.loc 1 441 8 view .LVU1419
 4255              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4256              		.loc 1 441 19 is_stmt 0 view .LVU1420
 4257 19f8 C5E5EB09 		vpor	ymm1, ymm3, YMMWORD PTR [rcx]	# tmp246, quadmask.55_171, MEM[base: index_ptr_130, offset: 0B]
 4258 19fc C5E5EB61 		vpor	ymm4, ymm3, YMMWORD PTR 32[rcx]	# tmp248, quadmask.55_171, MEM[base: index_ptr_130, offset: 0
 4258      20
GAS LISTING /tmp/ccBvFgp2.s 			page 125


 4259 1a01 C5E5EB69 		vpor	ymm5, ymm3, YMMWORD PTR 64[rcx]	# tmp250, quadmask.55_171, MEM[base: index_ptr_130, offset: 0
 4259      40
 4260 1a06 C5E5EB71 		vpor	ymm6, ymm3, YMMWORD PTR 96[rcx]	# tmp252, quadmask.55_171, MEM[base: index_ptr_130, offset: 0
 4260      60
 4261 1a0b C5E5EBB9 		vpor	ymm7, ymm3, YMMWORD PTR 128[rcx]	# tmp254, quadmask.55_171, MEM[base: index_ptr_130, offset: 
 4261      80000000 
 4262 1a13 C5E5EB81 		vpor	ymm0, ymm3, YMMWORD PTR 160[rcx]	# tmp256, quadmask.55_171, MEM[base: index_ptr_130, offset: 
 4262      A0000000 
 4263 1a1b C565EB81 		vpor	ymm8, ymm3, YMMWORD PTR 192[rcx]	# tmp258, quadmask.55_171, MEM[base: index_ptr_130, offset: 
 4263      C0000000 
 4264 1a23 C565EB89 		vpor	ymm9, ymm3, YMMWORD PTR 224[rcx]	# tmp260, quadmask.55_171, MEM[base: index_ptr_130, offset: 
 4264      E0000000 
 4265 1a2b C5FD7F09 		vmovdqa	YMMWORD PTR [rcx], ymm1	# MEM[base: index_ptr_130, offset: 0B], tmp246
 441:sieve_extend.c ****    }
 4266              		.loc 1 441 28 is_stmt 1 view .LVU1421
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4267              		.loc 1 440 10 view .LVU1422
 441:sieve_extend.c ****    }
 4268              		.loc 1 441 8 view .LVU1423
 4269              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4270              		.loc 1 441 37 is_stmt 0 view .LVU1424
 4271 1a2f 4881C100 		add	rcx, 256	# _70,
 4271      010000
 4272              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4273              		.loc 1 441 19 view .LVU1425
 4274 1a36 C5FD7FA1 		vmovdqa	YMMWORD PTR -224[rcx], ymm4	# MEM[base: index_ptr_130, offset: 0B], tmp248
 4274      20FFFFFF 
 441:sieve_extend.c ****    }
 4275              		.loc 1 441 28 is_stmt 1 view .LVU1426
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4276              		.loc 1 440 10 view .LVU1427
 441:sieve_extend.c ****    }
 4277              		.loc 1 441 8 view .LVU1428
 4278              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4279              		.loc 1 441 19 is_stmt 0 view .LVU1429
 4280 1a3e C5FD7FA9 		vmovdqa	YMMWORD PTR -192[rcx], ymm5	# MEM[base: index_ptr_130, offset: 0B], tmp250
 4280      40FFFFFF 
 441:sieve_extend.c ****    }
 4281              		.loc 1 441 28 is_stmt 1 view .LVU1430
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4282              		.loc 1 440 10 view .LVU1431
 441:sieve_extend.c ****    }
 4283              		.loc 1 441 8 view .LVU1432
 4284              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4285              		.loc 1 441 19 is_stmt 0 view .LVU1433
 4286 1a46 C5FD7FB1 		vmovdqa	YMMWORD PTR -160[rcx], ymm6	# MEM[base: index_ptr_130, offset: 0B], tmp252
 4286      60FFFFFF 
 441:sieve_extend.c ****    }
 4287              		.loc 1 441 28 is_stmt 1 view .LVU1434
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4288              		.loc 1 440 10 view .LVU1435
 441:sieve_extend.c ****    }
 4289              		.loc 1 441 8 view .LVU1436
GAS LISTING /tmp/ccBvFgp2.s 			page 126


 4290              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4291              		.loc 1 441 19 is_stmt 0 view .LVU1437
 4292 1a4e C5FD7F79 		vmovdqa	YMMWORD PTR -128[rcx], ymm7	# MEM[base: index_ptr_130, offset: 0B], tmp254
 4292      80
 441:sieve_extend.c ****    }
 4293              		.loc 1 441 28 is_stmt 1 view .LVU1438
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4294              		.loc 1 440 10 view .LVU1439
 441:sieve_extend.c ****    }
 4295              		.loc 1 441 8 view .LVU1440
 4296              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4297              		.loc 1 441 19 is_stmt 0 view .LVU1441
 4298 1a53 C5FD7F41 		vmovdqa	YMMWORD PTR -96[rcx], ymm0	# MEM[base: index_ptr_130, offset: 0B], tmp256
 4298      A0
 441:sieve_extend.c ****    }
 4299              		.loc 1 441 28 is_stmt 1 view .LVU1442
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4300              		.loc 1 440 10 view .LVU1443
 441:sieve_extend.c ****    }
 4301              		.loc 1 441 8 view .LVU1444
 4302              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4303              		.loc 1 441 19 is_stmt 0 view .LVU1445
 4304 1a58 C57D7F41 		vmovdqa	YMMWORD PTR -64[rcx], ymm8	# MEM[base: index_ptr_130, offset: 0B], tmp258
 4304      C0
 441:sieve_extend.c ****    }
 4305              		.loc 1 441 28 is_stmt 1 view .LVU1446
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4306              		.loc 1 440 10 view .LVU1447
 441:sieve_extend.c ****    }
 4307              		.loc 1 441 8 view .LVU1448
 4308              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4309              		.loc 1 441 19 is_stmt 0 view .LVU1449
 4310 1a5d C57D7F49 		vmovdqa	YMMWORD PTR -32[rcx], ymm9	# MEM[base: index_ptr_130, offset: 0B], tmp260
 4310      E0
 441:sieve_extend.c ****    }
 4311              		.loc 1 441 28 is_stmt 1 view .LVU1450
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4312              		.loc 1 440 10 view .LVU1451
 4313 1a62 4939C9   		cmp	r9, rcx	# range_stop_ptr, _70
 4314 1a65 7391     		jnb	.L283	#,
 4315              	.L282:
 4316              	.LVL185:
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4317              		.loc 1 440 10 is_stmt 0 view .LVU1452
 4318              	.LBE328:
 4319              	.LBE331:
 4320              	.LBE324:
 520:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 4321              		.loc 1 520 41 is_stmt 1 view .LVU1453
 4322              	# sieve_extend.c:520:     for (counter_t index = range_start; index < range_stop_unique;) {
 520:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 4323              		.loc 1 520 5 is_stmt 0 view .LVU1454
 4324 1a67 4939F2   		cmp	r10, rsi	# range_stop_unique, range_start
GAS LISTING /tmp/ccBvFgp2.s 			page 127


 4325 1a6a 0F8740FC 		ja	.L284	#,
 4325      FFFF
 4326              	.LVL186:
 4327              	.L425:
 520:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 4328              		.loc 1 520 5 view .LVU1455
 4329 1a70 C5F877   		vzeroupper
 4330              	.LVL187:
 4331              	.L266:
 520:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 4332              		.loc 1 520 5 view .LVU1456
 4333              	.LBE323:
 4334              	# sieve_extend.c:577: }
 577:sieve_extend.c **** 
 4335              		.loc 1 577 1 view .LVU1457
 4336 1a73 488B4424 		mov	rax, QWORD PTR 56[rsp]	# tmp409, D.6624
 4336      38
 4337 1a78 64483304 		xor	rax, QWORD PTR fs:40	# tmp409, MEM[(<address-space-1> long unsigned int *)40B]
 4337      25280000 
 4337      00
 4338 1a81 0F853B04 		jne	.L427	#,
 4338      0000
 4339 1a87 488D65D8 		lea	rsp, -40[rbp]	#,
 4340 1a8b 5B       		pop	rbx	#
 4341 1a8c 415C     		pop	r12	#
 4342 1a8e 415D     		pop	r13	#
 4343 1a90 415E     		pop	r14	#
 4344 1a92 415F     		pop	r15	#
 4345 1a94 5D       		pop	rbp	#
 4346              		.cfi_remember_state
 4347              		.cfi_def_cfa 7, 8
 4348 1a95 C3       		ret	
 4349              	.LVL188:
 4350              	.L426:
 4351              		.cfi_restore_state
 577:sieve_extend.c **** 
 4352              		.loc 1 577 1 view .LVU1458
 4353 1a96 4939DB   		cmp	r11, rbx	# range_stop_vector, tmp195
 4354 1a99 4989D5   		mov	r13, rdx	# _9, step
 4355 1a9c 4D89C3   		mov	r11, r8	# tmp199, tmp199
 4356              	.LBB334:
 4357              	.LBB333:
 4358              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4359              		.loc 1 528 31 view .LVU1459
 4360 1a9f 41BC0100 		mov	r12d, 1	# tmp208,
 4360      0000
 4361              	# sieve_extend.c:522:         register bitvector_t quadmask = { };
 522:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 4362              		.loc 1 522 30 view .LVU1460
 4363 1aa5 C5E9EFD2 		vpxor	xmm2, xmm2, xmm2	# tmp204
 4364 1aa9 4C0F46DF 		cmovbe	r11, rdi	# bitarray_word,, tmp199
 4365 1aad 48C1E305 		sal	rbx, 5	# tmp203,
 4366 1ab1 49C1E506 		sal	r13, 6	# _9,
 4367 1ab5 66662E0F 		.p2align 4
 4367      1F840000 
 4367      000000
GAS LISTING /tmp/ccBvFgp2.s 			page 128


 4368              		.p2align 3
 4369              	.L278:
 521:sieve_extend.c ****         register bitvector_t quadmask = { };
 4370              		.loc 1 521 9 is_stmt 1 view .LVU1461
 4371              	# sieve_extend.c:521:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 521:sieve_extend.c ****         register bitvector_t quadmask = { };
 4372              		.loc 1 521 54 is_stmt 0 view .LVU1462
 4373 1ac0 4989F6   		mov	r14, rsi	# _31, range_start
 4374              	# sieve_extend.c:523:         register counter_t word = wordindex(index) - current_vector_start_wor
 523:sieve_extend.c ****         
 4375              		.loc 1 523 35 view .LVU1463
 4376 1ac3 4889F0   		mov	rax, rsi	# tmp205, range_start
 4377              	# sieve_extend.c:521:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 521:sieve_extend.c ****         register bitvector_t quadmask = { };
 4378              		.loc 1 521 54 view .LVU1464
 4379 1ac6 49C1EE08 		shr	r14, 8	# _31,
 4380              	# sieve_extend.c:523:         register counter_t word = wordindex(index) - current_vector_start_wor
 523:sieve_extend.c ****         
 4381              		.loc 1 523 35 view .LVU1465
 4382 1aca 48C1E806 		shr	rax, 6	# tmp205,
 4383              	# sieve_extend.c:521:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 521:sieve_extend.c ****         register bitvector_t quadmask = { };
 4384              		.loc 1 521 25 view .LVU1466
 4385 1ace 4E8D04B5 		lea	r8, 0[0+r14*4]	# current_vector_start_word,
 4385      00000000 
 4386              	.LVL189:
 522:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 4387              		.loc 1 522 9 is_stmt 1 view .LVU1467
 4388              	# sieve_extend.c:522:         register bitvector_t quadmask = { };
 522:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 4389              		.loc 1 522 30 is_stmt 0 view .LVU1468
 4390 1ad6 C5FD7F14 		vmovdqa	YMMWORD PTR [rsp], ymm2	# quadmask, tmp204
 4390      24
 523:sieve_extend.c ****         
 4391              		.loc 1 523 9 is_stmt 1 view .LVU1469
 4392              	# sieve_extend.c:523:         register counter_t word = wordindex(index) - current_vector_start_wor
 523:sieve_extend.c ****         
 4393              		.loc 1 523 28 is_stmt 0 view .LVU1470
 4394 1adb 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 4395              	.LVL190:
 4396              	.L274:
 527:sieve_extend.c ****             quadmask[word] |= markmask(index);
 4397              		.loc 1 527 9 is_stmt 1 discriminator 1 view .LVU1471
 528:sieve_extend.c ****             index += step;
 4398              		.loc 1 528 13 discriminator 1 view .LVU1472
 4399              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4400              		.loc 1 528 31 is_stmt 0 discriminator 1 view .LVU1473
 4401 1ade C442C9F7 		shlx	r15, r12, rsi	# tmp207, tmp208, range_start
 4401      FC
 4402              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 4403              		.loc 1 529 19 discriminator 1 view .LVU1474
 4404 1ae3 4801D6   		add	rsi, rdx	# range_start, step
 4405              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4406              		.loc 1 528 28 discriminator 1 view .LVU1475
GAS LISTING /tmp/ccBvFgp2.s 			page 129


 4407 1ae6 4C093CC4 		or	QWORD PTR [rsp+rax*8], r15	# quadmask, tmp207
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 4408              		.loc 1 529 13 is_stmt 1 discriminator 1 view .LVU1476
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4409              		.loc 1 530 13 discriminator 1 view .LVU1477
 4410              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4411              		.loc 1 530 20 is_stmt 0 discriminator 1 view .LVU1478
 4412 1aea 4889F0   		mov	rax, rsi	# tmp209, range_start
 4413              	.LVL191:
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4414              		.loc 1 530 20 discriminator 1 view .LVU1479
 4415 1aed 48C1E806 		shr	rax, 6	# tmp209,
 4416              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4417              		.loc 1 530 18 discriminator 1 view .LVU1480
 4418 1af1 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 531:sieve_extend.c ****         
 4419              		.loc 1 531 17 is_stmt 1 discriminator 1 view .LVU1481
 4420              	# sieve_extend.c:531:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 531:sieve_extend.c ****         
 4421              		.loc 1 531 9 is_stmt 0 discriminator 1 view .LVU1482
 4422 1af4 4883F803 		cmp	rax, 3	# word,
 4423 1af8 0F87D200 		ja	.L420	#,
 4423      0000
 527:sieve_extend.c ****             quadmask[word] |= markmask(index);
 4424              		.loc 1 527 9 is_stmt 1 view .LVU1483
 528:sieve_extend.c ****             index += step;
 4425              		.loc 1 528 13 view .LVU1484
 4426              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4427              		.loc 1 528 31 is_stmt 0 view .LVU1485
 4428 1afe C442C9F7 		shlx	r15, r12, rsi	# tmp370, tmp208, range_start
 4428      FC
 4429              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 4430              		.loc 1 529 19 view .LVU1486
 4431 1b03 4801D6   		add	rsi, rdx	# range_start, step
 4432              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4433              		.loc 1 528 28 view .LVU1487
 4434 1b06 4C093CC4 		or	QWORD PTR [rsp+rax*8], r15	# quadmask, tmp370
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 4435              		.loc 1 529 13 is_stmt 1 view .LVU1488
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4436              		.loc 1 530 13 view .LVU1489
 4437              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4438              		.loc 1 530 20 is_stmt 0 view .LVU1490
 4439 1b0a 4889F0   		mov	rax, rsi	# tmp371, range_start
 4440 1b0d 48C1E806 		shr	rax, 6	# tmp371,
 4441              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4442              		.loc 1 530 18 view .LVU1491
 4443 1b11 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 531:sieve_extend.c ****         
 4444              		.loc 1 531 17 is_stmt 1 view .LVU1492
GAS LISTING /tmp/ccBvFgp2.s 			page 130


 4445              	# sieve_extend.c:531:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 531:sieve_extend.c ****         
 4446              		.loc 1 531 9 is_stmt 0 view .LVU1493
 4447 1b14 4883F803 		cmp	rax, 3	# word,
 4448 1b18 0F87B200 		ja	.L420	#,
 4448      0000
 527:sieve_extend.c ****             quadmask[word] |= markmask(index);
 4449              		.loc 1 527 9 is_stmt 1 view .LVU1494
 528:sieve_extend.c ****             index += step;
 4450              		.loc 1 528 13 view .LVU1495
 4451              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4452              		.loc 1 528 31 is_stmt 0 view .LVU1496
 4453 1b1e C442C9F7 		shlx	r15, r12, rsi	# tmp373, tmp208, range_start
 4453      FC
 4454              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 4455              		.loc 1 529 19 view .LVU1497
 4456 1b23 4801D6   		add	rsi, rdx	# range_start, step
 4457              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4458              		.loc 1 528 28 view .LVU1498
 4459 1b26 4C093CC4 		or	QWORD PTR [rsp+rax*8], r15	# quadmask, tmp373
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 4460              		.loc 1 529 13 is_stmt 1 view .LVU1499
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4461              		.loc 1 530 13 view .LVU1500
 4462              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4463              		.loc 1 530 20 is_stmt 0 view .LVU1501
 4464 1b2a 4889F0   		mov	rax, rsi	# tmp374, range_start
 4465 1b2d 48C1E806 		shr	rax, 6	# tmp374,
 4466              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4467              		.loc 1 530 18 view .LVU1502
 4468 1b31 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 531:sieve_extend.c ****         
 4469              		.loc 1 531 17 is_stmt 1 view .LVU1503
 4470              	# sieve_extend.c:531:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 531:sieve_extend.c ****         
 4471              		.loc 1 531 9 is_stmt 0 view .LVU1504
 4472 1b34 4883F803 		cmp	rax, 3	# word,
 4473 1b38 0F879200 		ja	.L420	#,
 4473      0000
 527:sieve_extend.c ****             quadmask[word] |= markmask(index);
 4474              		.loc 1 527 9 is_stmt 1 view .LVU1505
 528:sieve_extend.c ****             index += step;
 4475              		.loc 1 528 13 view .LVU1506
 4476              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4477              		.loc 1 528 31 is_stmt 0 view .LVU1507
 4478 1b3e C442C9F7 		shlx	r15, r12, rsi	# tmp376, tmp208, range_start
 4478      FC
 4479              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 4480              		.loc 1 529 19 view .LVU1508
 4481 1b43 4801D6   		add	rsi, rdx	# range_start, step
GAS LISTING /tmp/ccBvFgp2.s 			page 131


 4482              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4483              		.loc 1 528 28 view .LVU1509
 4484 1b46 4C093CC4 		or	QWORD PTR [rsp+rax*8], r15	# quadmask, tmp376
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 4485              		.loc 1 529 13 is_stmt 1 view .LVU1510
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4486              		.loc 1 530 13 view .LVU1511
 4487              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4488              		.loc 1 530 20 is_stmt 0 view .LVU1512
 4489 1b4a 4889F0   		mov	rax, rsi	# tmp377, range_start
 4490 1b4d 48C1E806 		shr	rax, 6	# tmp377,
 4491              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4492              		.loc 1 530 18 view .LVU1513
 4493 1b51 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 531:sieve_extend.c ****         
 4494              		.loc 1 531 17 is_stmt 1 view .LVU1514
 4495              	# sieve_extend.c:531:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 531:sieve_extend.c ****         
 4496              		.loc 1 531 9 is_stmt 0 view .LVU1515
 4497 1b54 4883F803 		cmp	rax, 3	# word,
 4498 1b58 7776     		ja	.L420	#,
 527:sieve_extend.c ****             quadmask[word] |= markmask(index);
 4499              		.loc 1 527 9 is_stmt 1 view .LVU1516
 528:sieve_extend.c ****             index += step;
 4500              		.loc 1 528 13 view .LVU1517
 4501              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4502              		.loc 1 528 31 is_stmt 0 view .LVU1518
 4503 1b5a C442C9F7 		shlx	r15, r12, rsi	# tmp379, tmp208, range_start
 4503      FC
 4504              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 4505              		.loc 1 529 19 view .LVU1519
 4506 1b5f 4801D6   		add	rsi, rdx	# range_start, step
 4507              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4508              		.loc 1 528 28 view .LVU1520
 4509 1b62 4C093CC4 		or	QWORD PTR [rsp+rax*8], r15	# quadmask, tmp379
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 4510              		.loc 1 529 13 is_stmt 1 view .LVU1521
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4511              		.loc 1 530 13 view .LVU1522
 4512              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4513              		.loc 1 530 20 is_stmt 0 view .LVU1523
 4514 1b66 4889F0   		mov	rax, rsi	# tmp380, range_start
 4515 1b69 48C1E806 		shr	rax, 6	# tmp380,
 4516              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4517              		.loc 1 530 18 view .LVU1524
 4518 1b6d 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 531:sieve_extend.c ****         
 4519              		.loc 1 531 17 is_stmt 1 view .LVU1525
 4520              	# sieve_extend.c:531:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
GAS LISTING /tmp/ccBvFgp2.s 			page 132


 531:sieve_extend.c ****         
 4521              		.loc 1 531 9 is_stmt 0 view .LVU1526
 4522 1b70 4883F803 		cmp	rax, 3	# word,
 4523 1b74 775A     		ja	.L420	#,
 527:sieve_extend.c ****             quadmask[word] |= markmask(index);
 4524              		.loc 1 527 9 is_stmt 1 view .LVU1527
 528:sieve_extend.c ****             index += step;
 4525              		.loc 1 528 13 view .LVU1528
 4526              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4527              		.loc 1 528 31 is_stmt 0 view .LVU1529
 4528 1b76 C442C9F7 		shlx	r15, r12, rsi	# tmp382, tmp208, range_start
 4528      FC
 4529              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 4530              		.loc 1 529 19 view .LVU1530
 4531 1b7b 4801D6   		add	rsi, rdx	# range_start, step
 4532              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4533              		.loc 1 528 28 view .LVU1531
 4534 1b7e 4C093CC4 		or	QWORD PTR [rsp+rax*8], r15	# quadmask, tmp382
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 4535              		.loc 1 529 13 is_stmt 1 view .LVU1532
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4536              		.loc 1 530 13 view .LVU1533
 4537              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4538              		.loc 1 530 20 is_stmt 0 view .LVU1534
 4539 1b82 4889F0   		mov	rax, rsi	# tmp383, range_start
 4540 1b85 48C1E806 		shr	rax, 6	# tmp383,
 4541              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4542              		.loc 1 530 18 view .LVU1535
 4543 1b89 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 531:sieve_extend.c ****         
 4544              		.loc 1 531 17 is_stmt 1 view .LVU1536
 4545              	# sieve_extend.c:531:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 531:sieve_extend.c ****         
 4546              		.loc 1 531 9 is_stmt 0 view .LVU1537
 4547 1b8c 4883F803 		cmp	rax, 3	# word,
 4548 1b90 773E     		ja	.L420	#,
 527:sieve_extend.c ****             quadmask[word] |= markmask(index);
 4549              		.loc 1 527 9 is_stmt 1 view .LVU1538
 528:sieve_extend.c ****             index += step;
 4550              		.loc 1 528 13 view .LVU1539
 4551              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4552              		.loc 1 528 31 is_stmt 0 view .LVU1540
 4553 1b92 C442C9F7 		shlx	r15, r12, rsi	# tmp385, tmp208, range_start
 4553      FC
 4554              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 4555              		.loc 1 529 19 view .LVU1541
 4556 1b97 4801D6   		add	rsi, rdx	# range_start, step
 4557              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4558              		.loc 1 528 28 view .LVU1542
GAS LISTING /tmp/ccBvFgp2.s 			page 133


 4559 1b9a 4C093CC4 		or	QWORD PTR [rsp+rax*8], r15	# quadmask, tmp385
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 4560              		.loc 1 529 13 is_stmt 1 view .LVU1543
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4561              		.loc 1 530 13 view .LVU1544
 4562              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4563              		.loc 1 530 20 is_stmt 0 view .LVU1545
 4564 1b9e 4889F0   		mov	rax, rsi	# tmp386, range_start
 4565 1ba1 48C1E806 		shr	rax, 6	# tmp386,
 4566              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4567              		.loc 1 530 18 view .LVU1546
 4568 1ba5 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 531:sieve_extend.c ****         
 4569              		.loc 1 531 17 is_stmt 1 view .LVU1547
 4570              	# sieve_extend.c:531:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 531:sieve_extend.c ****         
 4571              		.loc 1 531 9 is_stmt 0 view .LVU1548
 4572 1ba8 4883F803 		cmp	rax, 3	# word,
 4573 1bac 7722     		ja	.L420	#,
 527:sieve_extend.c ****             quadmask[word] |= markmask(index);
 4574              		.loc 1 527 9 is_stmt 1 view .LVU1549
 528:sieve_extend.c ****             index += step;
 4575              		.loc 1 528 13 view .LVU1550
 4576              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4577              		.loc 1 528 31 is_stmt 0 view .LVU1551
 4578 1bae C442C9F7 		shlx	r15, r12, rsi	# tmp388, tmp208, range_start
 4578      FC
 4579              	# sieve_extend.c:529:             index += step;
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 4580              		.loc 1 529 19 view .LVU1552
 4581 1bb3 4801D6   		add	rsi, rdx	# range_start, step
 4582              	# sieve_extend.c:528:             quadmask[word] |= markmask(index);
 528:sieve_extend.c ****             index += step;
 4583              		.loc 1 528 28 view .LVU1553
 4584 1bb6 4C093CC4 		or	QWORD PTR [rsp+rax*8], r15	# quadmask, tmp388
 529:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 4585              		.loc 1 529 13 is_stmt 1 view .LVU1554
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4586              		.loc 1 530 13 view .LVU1555
 4587              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4588              		.loc 1 530 20 is_stmt 0 view .LVU1556
 4589 1bba 4889F0   		mov	rax, rsi	# tmp389, range_start
 4590 1bbd 48C1E806 		shr	rax, 6	# tmp389,
 4591              	.LVL192:
 4592              	# sieve_extend.c:530:             word = wordindex(index) - current_vector_start_word;
 530:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 4593              		.loc 1 530 18 view .LVU1557
 4594 1bc1 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 4595              	.LVL193:
 531:sieve_extend.c ****         
 4596              		.loc 1 531 17 is_stmt 1 view .LVU1558
 4597              	# sieve_extend.c:531:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 531:sieve_extend.c ****         
GAS LISTING /tmp/ccBvFgp2.s 			page 134


 4598              		.loc 1 531 9 is_stmt 0 view .LVU1559
 4599 1bc4 4883F803 		cmp	rax, 3	# word,
 4600 1bc8 0F8610FF 		jbe	.L274	#,
 4600      FFFF
 4601              	.LVL194:
 4602 1bce 6690     		.p2align 4
 4603              		.p2align 3
 4604              	.L420:
 534:sieve_extend.c ****         const counter_t range_stop_vector = vectorindex(range_stop);
 4605              		.loc 1 534 9 is_stmt 1 view .LVU1560
 535:sieve_extend.c **** 
 4606              		.loc 1 535 9 view .LVU1561
 537:sieve_extend.c **** 
 4607              		.loc 1 537 9 view .LVU1562
 4608 1bd0 C5FD6F04 		vmovdqa	ymm0, YMMWORD PTR [rsp]	# quadmask.55_38, quadmask
 4608      24
 4609              	.LVL195:
 4610              	.LBB332:
 424:sieve_extend.c ****    const counter_t range_stop_vector = vectorindex(range_stop);
 4611              		.loc 1 424 20 view .LVU1563
 4612              	.LBB329:
 425:sieve_extend.c ****    register bitvector_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_vect
 4613              		.loc 1 425 4 view .LVU1564
 426:sieve_extend.c ****    register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_st
 4614              		.loc 1 426 4 view .LVU1565
 4615              	# sieve_extend.c:426:    register bitvector_t* __restrict index_ptr      =  __builtin_assume_aligne
 426:sieve_extend.c ****    register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_st
 4616              		.loc 1 426 89 is_stmt 0 view .LVU1566
 4617 1bd5 4D89F0   		mov	r8, r14	# _31, _31
 4618              	.LVL196:
 426:sieve_extend.c ****    register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_st
 4619              		.loc 1 426 89 view .LVU1567
 4620 1bd8 49C1E005 		sal	r8, 5	# _31,
 4621              	# sieve_extend.c:426:    register bitvector_t* __restrict index_ptr      =  __builtin_assume_aligne
 426:sieve_extend.c ****    register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_st
 4622              		.loc 1 426 80 view .LVU1568
 4623 1bdc 4901F8   		add	r8, rdi	# index_ptr, bitarray_word
 4624              	.LVL197:
 427:sieve_extend.c **** 
 4625              		.loc 1 427 4 is_stmt 1 view .LVU1569
 431:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4626              		.loc 1 431 4 view .LVU1570
 431:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4627              		.loc 1 431 10 view .LVU1571
 4628 1bdf 4D39D8   		cmp	r8, r11	# index_ptr, fast_loop_ptr
 4629 1be2 0F832801 		jnb	.L424	#,
 4629      0000
 4630 1be8 4F8D3428 		lea	r14, [r8+r13]	# ivtmp.287,
 4631              	.LVL198:
 4632              	.L276:
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4633              		.loc 1 432 8 view .LVU1572
 4634              	# sieve_extend.c:432:        *index_ptr |= mask; index_ptr+=step;
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4635              		.loc 1 432 19 is_stmt 0 view .LVU1573
 4636 1bec C4C17DEB 		vpor	ymm1, ymm0, YMMWORD PTR [r8]	# tmp211, quadmask.55_38, MEM[base: index_ptr_137, offset: 0B]
 4636      08
GAS LISTING /tmp/ccBvFgp2.s 			page 135


 4637 1bf1 C4C17D7F 		vmovdqa	YMMWORD PTR [r8], ymm1	# MEM[base: index_ptr_137, offset: 0B], tmp211
 4637      08
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4638              		.loc 1 432 28 is_stmt 1 view .LVU1574
 4639              	.LVL199:
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4640              		.loc 1 433 8 view .LVU1575
 4641              	# sieve_extend.c:433:        *index_ptr |= mask; index_ptr+=step;
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4642              		.loc 1 433 19 is_stmt 0 view .LVU1576
 4643 1bf6 C4C17DEB 		vpor	ymm3, ymm0, YMMWORD PTR [r8+rcx]	# tmp212, quadmask.55_38, MEM[base: index_ptr_137, index: _8
 4643      1C08
 4644 1bfc C4C17D7F 		vmovdqa	YMMWORD PTR [r8+rcx], ymm3	# MEM[base: index_ptr_137, index: _85, offset: 0B], tmp212
 4644      1C08
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4645              		.loc 1 433 28 is_stmt 1 view .LVU1577
 4646              	.LVL200:
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4647              		.loc 1 434 8 view .LVU1578
 4648              	# sieve_extend.c:434:        *index_ptr |= mask; index_ptr+=step;
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4649              		.loc 1 434 19 is_stmt 0 view .LVU1579
 4650 1c02 C4C17DEB 		vpor	ymm4, ymm0, YMMWORD PTR [r14]	# tmp213, quadmask.55_38, MEM[base: _189, offset: 0B]
 4650      26
 4651 1c07 C4C17D7F 		vmovdqa	YMMWORD PTR [r14], ymm4	# MEM[base: _189, offset: 0B], tmp213
 4651      26
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4652              		.loc 1 434 28 is_stmt 1 view .LVU1580
 4653              	.LVL201:
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4654              		.loc 1 435 8 view .LVU1581
 4655              	# sieve_extend.c:435:        *index_ptr |= mask; index_ptr+=step;
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4656              		.loc 1 435 19 is_stmt 0 view .LVU1582
 4657 1c0c C4C17DEB 		vpor	ymm5, ymm0, YMMWORD PTR [r14+rcx]	# tmp214, quadmask.55_38, MEM[base: _189, index: _85, offse
 4657      2C0E
 4658 1c12 C4C17D7F 		vmovdqa	YMMWORD PTR [r14+rcx], ymm5	# MEM[base: _189, index: _85, offset: 0B], tmp214
 4658      2C0E
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4659              		.loc 1 435 28 is_stmt 1 view .LVU1583
 4660              	.LVL202:
 436:sieve_extend.c ****    }
 4661              		.loc 1 436 8 view .LVU1584
 4662 1c18 4901DE   		add	r14, rbx	# ivtmp.287, tmp203
 4663              	# sieve_extend.c:436:        *index_ptr |= mask; index_ptr+=step;
 436:sieve_extend.c ****    }
 4664              		.loc 1 436 19 is_stmt 0 view .LVU1585
 4665 1c1b C4C17DEB 		vpor	ymm6, ymm0, YMMWORD PTR [r8+rcx*4]	# tmp215, quadmask.55_38, MEM[base: index_ptr_137, index: 
 4665      3488
 4666 1c21 C4C17D7F 		vmovdqa	YMMWORD PTR [r8+rcx*4], ymm6	# MEM[base: index_ptr_137, index: _85, step: 4, offset: 0B], 
 4666      3488
 436:sieve_extend.c ****    }
 4667              		.loc 1 436 28 is_stmt 1 view .LVU1586
 4668              	.LVL203:
 436:sieve_extend.c ****    }
 4669              		.loc 1 436 28 is_stmt 0 view .LVU1587
 4670 1c27 4901D8   		add	r8, rbx	# index_ptr, tmp203
GAS LISTING /tmp/ccBvFgp2.s 			page 136


 4671              	.LVL204:
 431:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4672              		.loc 1 431 10 is_stmt 1 view .LVU1588
 4673 1c2a 4D39D8   		cmp	r8, r11	# index_ptr, fast_loop_ptr
 4674 1c2d 0F83DD00 		jnb	.L424	#,
 4674      0000
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4675              		.loc 1 432 8 view .LVU1589
 4676              	# sieve_extend.c:432:        *index_ptr |= mask; index_ptr+=step;
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4677              		.loc 1 432 19 is_stmt 0 view .LVU1590
 4678 1c33 C4C17DEB 		vpor	ymm7, ymm0, YMMWORD PTR [r8]	# tmp353, quadmask.55_38, MEM[base: index_ptr_137, offset: 0B]
 4678      38
 4679 1c38 C4C17D7F 		vmovdqa	YMMWORD PTR [r8], ymm7	# MEM[base: index_ptr_137, offset: 0B], tmp353
 4679      38
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4680              		.loc 1 432 28 is_stmt 1 view .LVU1591
 4681              	.LVL205:
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4682              		.loc 1 433 8 view .LVU1592
 4683              	# sieve_extend.c:433:        *index_ptr |= mask; index_ptr+=step;
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4684              		.loc 1 433 19 is_stmt 0 view .LVU1593
 4685 1c3d C4417DEB 		vpor	ymm8, ymm0, YMMWORD PTR [r8+rcx]	# tmp354, quadmask.55_38, MEM[base: index_ptr_137, index: _8
 4685      0408
 4686 1c43 C4417D7F 		vmovdqa	YMMWORD PTR [r8+rcx], ymm8	# MEM[base: index_ptr_137, index: _85, offset: 0B], tmp354
 4686      0408
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4687              		.loc 1 433 28 is_stmt 1 view .LVU1594
 4688              	.LVL206:
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4689              		.loc 1 434 8 view .LVU1595
 4690              	# sieve_extend.c:434:        *index_ptr |= mask; index_ptr+=step;
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4691              		.loc 1 434 19 is_stmt 0 view .LVU1596
 4692 1c49 C4417DEB 		vpor	ymm9, ymm0, YMMWORD PTR [r14]	# tmp355, quadmask.55_38, MEM[base: _189, offset: 0B]
 4692      0E
 4693 1c4e C4417D7F 		vmovdqa	YMMWORD PTR [r14], ymm9	# MEM[base: _189, offset: 0B], tmp355
 4693      0E
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4694              		.loc 1 434 28 is_stmt 1 view .LVU1597
 4695              	.LVL207:
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4696              		.loc 1 435 8 view .LVU1598
 4697              	# sieve_extend.c:435:        *index_ptr |= mask; index_ptr+=step;
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4698              		.loc 1 435 19 is_stmt 0 view .LVU1599
 4699 1c53 C4417DEB 		vpor	ymm10, ymm0, YMMWORD PTR [r14+rcx]	# tmp356, quadmask.55_38, MEM[base: _189, index: _85, offs
 4699      140E
 4700 1c59 C4417D7F 		vmovdqa	YMMWORD PTR [r14+rcx], ymm10	# MEM[base: _189, index: _85, offset: 0B], tmp356
 4700      140E
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4701              		.loc 1 435 28 is_stmt 1 view .LVU1600
 4702              	.LVL208:
 436:sieve_extend.c ****    }
 4703              		.loc 1 436 8 view .LVU1601
 4704 1c5f 4901DE   		add	r14, rbx	# ivtmp.287, tmp203
GAS LISTING /tmp/ccBvFgp2.s 			page 137


 4705              	# sieve_extend.c:436:        *index_ptr |= mask; index_ptr+=step;
 436:sieve_extend.c ****    }
 4706              		.loc 1 436 19 is_stmt 0 view .LVU1602
 4707 1c62 C4417DEB 		vpor	ymm11, ymm0, YMMWORD PTR [r8+rcx*4]	# tmp357, quadmask.55_38, MEM[base: index_ptr_137, index:
 4707      1C88
 4708 1c68 C4417D7F 		vmovdqa	YMMWORD PTR [r8+rcx*4], ymm11	# MEM[base: index_ptr_137, index: _85, step: 4, offset: 0B],
 4708      1C88
 436:sieve_extend.c ****    }
 4709              		.loc 1 436 28 is_stmt 1 view .LVU1603
 4710              	.LVL209:
 436:sieve_extend.c ****    }
 4711              		.loc 1 436 28 is_stmt 0 view .LVU1604
 4712 1c6e 4901D8   		add	r8, rbx	# index_ptr, tmp203
 4713              	.LVL210:
 431:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4714              		.loc 1 431 10 is_stmt 1 view .LVU1605
 4715 1c71 4D39D8   		cmp	r8, r11	# index_ptr, fast_loop_ptr
 4716 1c74 0F839600 		jnb	.L424	#,
 4716      0000
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4717              		.loc 1 432 8 view .LVU1606
 4718              	# sieve_extend.c:432:        *index_ptr |= mask; index_ptr+=step;
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4719              		.loc 1 432 19 is_stmt 0 view .LVU1607
 4720 1c7a C4417DEB 		vpor	ymm12, ymm0, YMMWORD PTR [r8]	# tmp359, quadmask.55_38, MEM[base: index_ptr_137, offset: 0B]
 4720      20
 4721 1c7f C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm12	# MEM[base: index_ptr_137, offset: 0B], tmp359
 4721      20
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4722              		.loc 1 432 28 is_stmt 1 view .LVU1608
 4723              	.LVL211:
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4724              		.loc 1 433 8 view .LVU1609
 4725              	# sieve_extend.c:433:        *index_ptr |= mask; index_ptr+=step;
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4726              		.loc 1 433 19 is_stmt 0 view .LVU1610
 4727 1c84 C4417DEB 		vpor	ymm13, ymm0, YMMWORD PTR [r8+rcx]	# tmp360, quadmask.55_38, MEM[base: index_ptr_137, index: _
 4727      2C08
 4728 1c8a C4417D7F 		vmovdqa	YMMWORD PTR [r8+rcx], ymm13	# MEM[base: index_ptr_137, index: _85, offset: 0B], tmp360
 4728      2C08
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4729              		.loc 1 433 28 is_stmt 1 view .LVU1611
 4730              	.LVL212:
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4731              		.loc 1 434 8 view .LVU1612
 4732              	# sieve_extend.c:434:        *index_ptr |= mask; index_ptr+=step;
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4733              		.loc 1 434 19 is_stmt 0 view .LVU1613
 4734 1c90 C4417DEB 		vpor	ymm14, ymm0, YMMWORD PTR [r14]	# tmp361, quadmask.55_38, MEM[base: _189, offset: 0B]
 4734      36
 4735 1c95 C4417D7F 		vmovdqa	YMMWORD PTR [r14], ymm14	# MEM[base: _189, offset: 0B], tmp361
 4735      36
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4736              		.loc 1 434 28 is_stmt 1 view .LVU1614
 4737              	.LVL213:
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4738              		.loc 1 435 8 view .LVU1615
GAS LISTING /tmp/ccBvFgp2.s 			page 138


 4739              	# sieve_extend.c:435:        *index_ptr |= mask; index_ptr+=step;
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4740              		.loc 1 435 19 is_stmt 0 view .LVU1616
 4741 1c9a C4417DEB 		vpor	ymm15, ymm0, YMMWORD PTR [r14+rcx]	# tmp362, quadmask.55_38, MEM[base: _189, index: _85, offs
 4741      3C0E
 4742 1ca0 C4417D7F 		vmovdqa	YMMWORD PTR [r14+rcx], ymm15	# MEM[base: _189, index: _85, offset: 0B], tmp362
 4742      3C0E
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4743              		.loc 1 435 28 is_stmt 1 view .LVU1617
 4744              	.LVL214:
 436:sieve_extend.c ****    }
 4745              		.loc 1 436 8 view .LVU1618
 4746 1ca6 4901DE   		add	r14, rbx	# ivtmp.287, tmp203
 4747              	# sieve_extend.c:436:        *index_ptr |= mask; index_ptr+=step;
 436:sieve_extend.c ****    }
 4748              		.loc 1 436 19 is_stmt 0 view .LVU1619
 4749 1ca9 C4C17DEB 		vpor	ymm1, ymm0, YMMWORD PTR [r8+rcx*4]	# tmp363, quadmask.55_38, MEM[base: index_ptr_137, index: 
 4749      0C88
 4750 1caf C4C17D7F 		vmovdqa	YMMWORD PTR [r8+rcx*4], ymm1	# MEM[base: index_ptr_137, index: _85, step: 4, offset: 0B], 
 4750      0C88
 436:sieve_extend.c ****    }
 4751              		.loc 1 436 28 is_stmt 1 view .LVU1620
 4752              	.LVL215:
 436:sieve_extend.c ****    }
 4753              		.loc 1 436 28 is_stmt 0 view .LVU1621
 4754 1cb5 4901D8   		add	r8, rbx	# index_ptr, tmp203
 4755              	.LVL216:
 431:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4756              		.loc 1 431 10 is_stmt 1 view .LVU1622
 4757 1cb8 4D39D8   		cmp	r8, r11	# index_ptr, fast_loop_ptr
 4758 1cbb 7353     		jnb	.L424	#,
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4759              		.loc 1 432 8 view .LVU1623
 4760              	# sieve_extend.c:432:        *index_ptr |= mask; index_ptr+=step;
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4761              		.loc 1 432 19 is_stmt 0 view .LVU1624
 4762 1cbd C4C17DEB 		vpor	ymm3, ymm0, YMMWORD PTR [r8]	# tmp365, quadmask.55_38, MEM[base: index_ptr_137, offset: 0B]
 4762      18
 4763 1cc2 C4C17D7F 		vmovdqa	YMMWORD PTR [r8], ymm3	# MEM[base: index_ptr_137, offset: 0B], tmp365
 4763      18
 432:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4764              		.loc 1 432 28 is_stmt 1 view .LVU1625
 4765              	.LVL217:
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4766              		.loc 1 433 8 view .LVU1626
 4767              	# sieve_extend.c:433:        *index_ptr |= mask; index_ptr+=step;
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4768              		.loc 1 433 19 is_stmt 0 view .LVU1627
 4769 1cc7 C4C17DEB 		vpor	ymm4, ymm0, YMMWORD PTR [r8+rcx]	# tmp366, quadmask.55_38, MEM[base: index_ptr_137, index: _8
 4769      2408
 4770 1ccd C4C17D7F 		vmovdqa	YMMWORD PTR [r8+rcx], ymm4	# MEM[base: index_ptr_137, index: _85, offset: 0B], tmp366
 4770      2408
 433:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4771              		.loc 1 433 28 is_stmt 1 view .LVU1628
 4772              	.LVL218:
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4773              		.loc 1 434 8 view .LVU1629
GAS LISTING /tmp/ccBvFgp2.s 			page 139


 4774              	# sieve_extend.c:434:        *index_ptr |= mask; index_ptr+=step;
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4775              		.loc 1 434 19 is_stmt 0 view .LVU1630
 4776 1cd3 C4C17DEB 		vpor	ymm5, ymm0, YMMWORD PTR [r14]	# tmp367, quadmask.55_38, MEM[base: _189, offset: 0B]
 4776      2E
 4777 1cd8 C4C17D7F 		vmovdqa	YMMWORD PTR [r14], ymm5	# MEM[base: _189, offset: 0B], tmp367
 4777      2E
 434:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4778              		.loc 1 434 28 is_stmt 1 view .LVU1631
 4779              	.LVL219:
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4780              		.loc 1 435 8 view .LVU1632
 4781              	# sieve_extend.c:435:        *index_ptr |= mask; index_ptr+=step;
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4782              		.loc 1 435 19 is_stmt 0 view .LVU1633
 4783 1cdd C4C17DEB 		vpor	ymm6, ymm0, YMMWORD PTR [r14+rcx]	# tmp368, quadmask.55_38, MEM[base: _189, index: _85, offse
 4783      340E
 4784 1ce3 C4C17D7F 		vmovdqa	YMMWORD PTR [r14+rcx], ymm6	# MEM[base: _189, index: _85, offset: 0B], tmp368
 4784      340E
 435:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4785              		.loc 1 435 28 is_stmt 1 view .LVU1634
 4786              	.LVL220:
 436:sieve_extend.c ****    }
 4787              		.loc 1 436 8 view .LVU1635
 4788 1ce9 4901DE   		add	r14, rbx	# ivtmp.287, tmp203
 4789              	# sieve_extend.c:436:        *index_ptr |= mask; index_ptr+=step;
 436:sieve_extend.c ****    }
 4790              		.loc 1 436 19 is_stmt 0 view .LVU1636
 4791 1cec C4C17DEB 		vpor	ymm7, ymm0, YMMWORD PTR [r8+rcx*4]	# tmp369, quadmask.55_38, MEM[base: index_ptr_137, index: 
 4791      3C88
 4792 1cf2 C4C17D7F 		vmovdqa	YMMWORD PTR [r8+rcx*4], ymm7	# MEM[base: index_ptr_137, index: _85, step: 4, offset: 0B], 
 4792      3C88
 436:sieve_extend.c ****    }
 4793              		.loc 1 436 28 is_stmt 1 view .LVU1637
 4794              	.LVL221:
 436:sieve_extend.c ****    }
 4795              		.loc 1 436 28 is_stmt 0 view .LVU1638
 4796 1cf8 4901D8   		add	r8, rbx	# index_ptr, tmp203
 4797              	.LVL222:
 431:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4798              		.loc 1 431 10 is_stmt 1 view .LVU1639
 4799 1cfb 4D39D8   		cmp	r8, r11	# index_ptr, fast_loop_ptr
 4800 1cfe 0F82E8FE 		jb	.L276	#,
 4800      FFFF
 4801 1d04 66662E0F 		.p2align 4
 4801      1F840000 
 4801      00000090 
 4802              		.p2align 3
 4803              	.L424:
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4804              		.loc 1 440 10 view .LVU1640
 4805 1d10 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 4806 1d13 0F82A700 		jb	.L285	#,
 4806      0000
 4807              	.L277:
 441:sieve_extend.c ****    }
 4808              		.loc 1 441 8 view .LVU1641
GAS LISTING /tmp/ccBvFgp2.s 			page 140


 4809              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4810              		.loc 1 441 19 is_stmt 0 view .LVU1642
 4811 1d19 C4417DEB 		vpor	ymm8, ymm0, YMMWORD PTR [r8]	# tmp231, quadmask.55_38, MEM[base: index_ptr_135, offset: 0B]
 4811      00
 4812 1d1e C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm8	# MEM[base: index_ptr_135, offset: 0B], tmp231
 4812      00
 441:sieve_extend.c ****    }
 4813              		.loc 1 441 28 is_stmt 1 view .LVU1643
 4814              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4815              		.loc 1 441 37 is_stmt 0 view .LVU1644
 4816 1d23 4901C8   		add	r8, rcx	# index_ptr, _85
 4817              	.LVL223:
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4818              		.loc 1 440 10 is_stmt 1 view .LVU1645
 4819 1d26 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 4820 1d29 0F829100 		jb	.L285	#,
 4820      0000
 441:sieve_extend.c ****    }
 4821              		.loc 1 441 8 view .LVU1646
 4822              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4823              		.loc 1 441 19 is_stmt 0 view .LVU1647
 4824 1d2f C4417DEB 		vpor	ymm9, ymm0, YMMWORD PTR [r8]	# tmp340, quadmask.55_38, MEM[base: index_ptr_135, offset: 0B]
 4824      08
 4825 1d34 C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm9	# MEM[base: index_ptr_135, offset: 0B], tmp340
 4825      08
 441:sieve_extend.c ****    }
 4826              		.loc 1 441 28 is_stmt 1 view .LVU1648
 4827              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4828              		.loc 1 441 37 is_stmt 0 view .LVU1649
 4829 1d39 4901C8   		add	r8, rcx	# index_ptr, _85
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4830              		.loc 1 440 10 is_stmt 1 view .LVU1650
 4831 1d3c 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 4832 1d3f 727F     		jb	.L285	#,
 441:sieve_extend.c ****    }
 4833              		.loc 1 441 8 view .LVU1651
 4834              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4835              		.loc 1 441 19 is_stmt 0 view .LVU1652
 4836 1d41 C4417DEB 		vpor	ymm10, ymm0, YMMWORD PTR [r8]	# tmp342, quadmask.55_38, MEM[base: index_ptr_135, offset: 0B]
 4836      10
 4837 1d46 C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm10	# MEM[base: index_ptr_135, offset: 0B], tmp342
 4837      10
 441:sieve_extend.c ****    }
 4838              		.loc 1 441 28 is_stmt 1 view .LVU1653
 4839              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4840              		.loc 1 441 37 is_stmt 0 view .LVU1654
 4841 1d4b 4901C8   		add	r8, rcx	# index_ptr, _85
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4842              		.loc 1 440 10 is_stmt 1 view .LVU1655
 4843 1d4e 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 4844 1d51 726D     		jb	.L285	#,
GAS LISTING /tmp/ccBvFgp2.s 			page 141


 441:sieve_extend.c ****    }
 4845              		.loc 1 441 8 view .LVU1656
 4846              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4847              		.loc 1 441 19 is_stmt 0 view .LVU1657
 4848 1d53 C4417DEB 		vpor	ymm11, ymm0, YMMWORD PTR [r8]	# tmp344, quadmask.55_38, MEM[base: index_ptr_135, offset: 0B]
 4848      18
 4849 1d58 C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm11	# MEM[base: index_ptr_135, offset: 0B], tmp344
 4849      18
 441:sieve_extend.c ****    }
 4850              		.loc 1 441 28 is_stmt 1 view .LVU1658
 4851              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4852              		.loc 1 441 37 is_stmt 0 view .LVU1659
 4853 1d5d 4901C8   		add	r8, rcx	# index_ptr, _85
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4854              		.loc 1 440 10 is_stmt 1 view .LVU1660
 4855 1d60 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 4856 1d63 725B     		jb	.L285	#,
 441:sieve_extend.c ****    }
 4857              		.loc 1 441 8 view .LVU1661
 4858              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4859              		.loc 1 441 19 is_stmt 0 view .LVU1662
 4860 1d65 C4417DEB 		vpor	ymm12, ymm0, YMMWORD PTR [r8]	# tmp346, quadmask.55_38, MEM[base: index_ptr_135, offset: 0B]
 4860      20
 4861 1d6a C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm12	# MEM[base: index_ptr_135, offset: 0B], tmp346
 4861      20
 441:sieve_extend.c ****    }
 4862              		.loc 1 441 28 is_stmt 1 view .LVU1663
 4863              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4864              		.loc 1 441 37 is_stmt 0 view .LVU1664
 4865 1d6f 4901C8   		add	r8, rcx	# index_ptr, _85
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4866              		.loc 1 440 10 is_stmt 1 view .LVU1665
 4867 1d72 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 4868 1d75 7249     		jb	.L285	#,
 441:sieve_extend.c ****    }
 4869              		.loc 1 441 8 view .LVU1666
 4870              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4871              		.loc 1 441 19 is_stmt 0 view .LVU1667
 4872 1d77 C4417DEB 		vpor	ymm13, ymm0, YMMWORD PTR [r8]	# tmp348, quadmask.55_38, MEM[base: index_ptr_135, offset: 0B]
 4872      28
 4873 1d7c C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm13	# MEM[base: index_ptr_135, offset: 0B], tmp348
 4873      28
 441:sieve_extend.c ****    }
 4874              		.loc 1 441 28 is_stmt 1 view .LVU1668
 4875              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4876              		.loc 1 441 37 is_stmt 0 view .LVU1669
 4877 1d81 4901C8   		add	r8, rcx	# index_ptr, _85
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4878              		.loc 1 440 10 is_stmt 1 view .LVU1670
 4879 1d84 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 4880 1d87 7237     		jb	.L285	#,
GAS LISTING /tmp/ccBvFgp2.s 			page 142


 441:sieve_extend.c ****    }
 4881              		.loc 1 441 8 view .LVU1671
 4882              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4883              		.loc 1 441 19 is_stmt 0 view .LVU1672
 4884 1d89 C4417DEB 		vpor	ymm14, ymm0, YMMWORD PTR [r8]	# tmp350, quadmask.55_38, MEM[base: index_ptr_135, offset: 0B]
 4884      30
 4885 1d8e C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm14	# MEM[base: index_ptr_135, offset: 0B], tmp350
 4885      30
 441:sieve_extend.c ****    }
 4886              		.loc 1 441 28 is_stmt 1 view .LVU1673
 4887              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4888              		.loc 1 441 37 is_stmt 0 view .LVU1674
 4889 1d93 4901C8   		add	r8, rcx	# index_ptr, _85
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4890              		.loc 1 440 10 is_stmt 1 view .LVU1675
 4891 1d96 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 4892 1d99 7225     		jb	.L285	#,
 441:sieve_extend.c ****    }
 4893              		.loc 1 441 8 view .LVU1676
 4894              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4895              		.loc 1 441 19 is_stmt 0 view .LVU1677
 4896 1d9b C4417DEB 		vpor	ymm15, ymm0, YMMWORD PTR [r8]	# tmp352, quadmask.55_38, MEM[base: index_ptr_135, offset: 0B]
 4896      38
 4897 1da0 C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm15	# MEM[base: index_ptr_135, offset: 0B], tmp352
 4897      38
 441:sieve_extend.c ****    }
 4898              		.loc 1 441 28 is_stmt 1 view .LVU1678
 4899              	.LVL224:
 4900              	# sieve_extend.c:441:        *index_ptr |= mask; index_ptr+=step;
 441:sieve_extend.c ****    }
 4901              		.loc 1 441 37 is_stmt 0 view .LVU1679
 4902 1da5 4901C8   		add	r8, rcx	# index_ptr, _85
 4903              	.LVL225:
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4904              		.loc 1 440 10 is_stmt 1 view .LVU1680
 4905 1da8 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 4906 1dab 0F8368FF 		jnb	.L277	#,
 4906      FFFF
 4907              	.LVL226:
 4908 1db1 66662E0F 		.p2align 4
 4908      1F840000 
 4908      0000000F 
 4908      1F4000
 4909              		.p2align 3
 4910              	.L285:
 440:sieve_extend.c ****        *index_ptr |= mask; index_ptr+=step;
 4911              		.loc 1 440 10 is_stmt 0 view .LVU1681
 4912              	.LBE329:
 4913              	.LBE332:
 4914              	.LBE333:
 520:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 4915              		.loc 1 520 41 is_stmt 1 view .LVU1682
 4916              	# sieve_extend.c:520:     for (counter_t index = range_start; index < range_stop_unique;) {
 520:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
GAS LISTING /tmp/ccBvFgp2.s 			page 143


 4917              		.loc 1 520 5 is_stmt 0 view .LVU1683
 4918 1dc0 4939F2   		cmp	r10, rsi	# range_stop_unique, range_start
 4919 1dc3 0F87F7FC 		ja	.L278	#,
 4919      FFFF
 4920 1dc9 E9A2FCFF 		jmp	.L425	#
 4920      FF
 4921              	.LVL227:
 4922              	.L268:
 520:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 4923              		.loc 1 520 5 view .LVU1684
 4924              	.LBE334:
 4925              	.LBB335:
 4926              	.LBB322:
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4927              		.loc 1 488 49 is_stmt 1 view .LVU1685
 4928              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4929              		.loc 1 488 13 is_stmt 0 view .LVU1686
 4930 1dce 4839CE   		cmp	rsi, rcx	# range_start, range_stop
 4931              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 4932              		.loc 1 489 52 view .LVU1687
 4933 1dd1 41BA0100 		mov	r10d, 1	# tmp185,
 4933      0000
 4934              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4935              		.loc 1 488 13 view .LVU1688
 4936 1dd7 0F8796FC 		ja	.L266	#,
 4936      FFFF
 4937              	.LVL228:
 4938              	.L270:
 489:sieve_extend.c ****             return;                 
 4939              		.loc 1 489 17 is_stmt 1 discriminator 3 view .LVU1689
 4940              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 4941              		.loc 1 489 49 is_stmt 0 discriminator 3 view .LVU1690
 4942 1ddd 4889F3   		mov	rbx, rsi	# tmp181, range_start
 4943              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 4944              		.loc 1 489 52 discriminator 3 view .LVU1691
 4945 1de0 C442C9F7 		shlx	r9, r10, rsi	# tmp184, tmp185, range_start
 4945      CA
 4946              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 4947              		.loc 1 489 49 discriminator 3 view .LVU1692
 4948 1de5 48C1EB06 		shr	rbx, 6	# tmp181,
 4949              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4950              		.loc 1 488 76 discriminator 3 view .LVU1693
 4951 1de9 4801D6   		add	rsi, rdx	# range_start, step
 4952              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 4953              		.loc 1 489 49 discriminator 3 view .LVU1694
 4954 1dec 4C090CDF 		or	QWORD PTR [rdi+rbx*8], r9	# *_14, tmp184
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4955              		.loc 1 488 70 is_stmt 1 discriminator 3 view .LVU1695
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
GAS LISTING /tmp/ccBvFgp2.s 			page 144


 4956              		.loc 1 488 49 discriminator 3 view .LVU1696
 4957              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4958              		.loc 1 488 13 is_stmt 0 discriminator 3 view .LVU1697
 4959 1df0 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 4960 1df3 0F827AFC 		jb	.L266	#,
 4960      FFFF
 489:sieve_extend.c ****             return;                 
 4961              		.loc 1 489 17 is_stmt 1 view .LVU1698
 4962              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 4963              		.loc 1 489 49 is_stmt 0 view .LVU1699
 4964 1df9 4989F6   		mov	r14, rsi	# tmp262, range_start
 4965              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 4966              		.loc 1 489 52 view .LVU1700
 4967 1dfc C442C9F7 		shlx	r12, r10, rsi	# tmp265, tmp185, range_start
 4967      E2
 4968              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 4969              		.loc 1 489 49 view .LVU1701
 4970 1e01 49C1EE06 		shr	r14, 6	# tmp262,
 4971              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4972              		.loc 1 488 76 view .LVU1702
 4973 1e05 4801D6   		add	rsi, rdx	# range_start, step
 4974              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 4975              		.loc 1 489 49 view .LVU1703
 4976 1e08 4E0924F7 		or	QWORD PTR [rdi+r14*8], r12	# *_14, tmp265
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4977              		.loc 1 488 70 is_stmt 1 view .LVU1704
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4978              		.loc 1 488 49 view .LVU1705
 4979              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4980              		.loc 1 488 13 is_stmt 0 view .LVU1706
 4981 1e0c 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 4982 1e0f 0F825EFC 		jb	.L266	#,
 4982      FFFF
 489:sieve_extend.c ****             return;                 
 4983              		.loc 1 489 17 is_stmt 1 view .LVU1707
 4984              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 4985              		.loc 1 489 49 is_stmt 0 view .LVU1708
 4986 1e15 4989F5   		mov	r13, rsi	# tmp267, range_start
 4987              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 4988              		.loc 1 489 52 view .LVU1709
 4989 1e18 C4C2C9F7 		shlx	rax, r10, rsi	# tmp270, tmp185, range_start
 4989      C2
 4990              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 4991              		.loc 1 489 49 view .LVU1710
 4992 1e1d 49C1ED06 		shr	r13, 6	# tmp267,
 4993              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
GAS LISTING /tmp/ccBvFgp2.s 			page 145


 4994              		.loc 1 488 76 view .LVU1711
 4995 1e21 4801D6   		add	rsi, rdx	# range_start, step
 4996              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 4997              		.loc 1 489 49 view .LVU1712
 4998 1e24 4A0904EF 		or	QWORD PTR [rdi+r13*8], rax	# *_14, tmp270
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4999              		.loc 1 488 70 is_stmt 1 view .LVU1713
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5000              		.loc 1 488 49 view .LVU1714
 5001              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5002              		.loc 1 488 13 is_stmt 0 view .LVU1715
 5003 1e28 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 5004 1e2b 0F8242FC 		jb	.L266	#,
 5004      FFFF
 489:sieve_extend.c ****             return;                 
 5005              		.loc 1 489 17 is_stmt 1 view .LVU1716
 5006              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5007              		.loc 1 489 49 is_stmt 0 view .LVU1717
 5008 1e31 4989F7   		mov	r15, rsi	# tmp272, range_start
 5009              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5010              		.loc 1 489 52 view .LVU1718
 5011 1e34 C442C9F7 		shlx	r8, r10, rsi	# tmp275, tmp185, range_start
 5011      C2
 5012              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5013              		.loc 1 489 49 view .LVU1719
 5014 1e39 49C1EF06 		shr	r15, 6	# tmp272,
 5015              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5016              		.loc 1 488 76 view .LVU1720
 5017 1e3d 4801D6   		add	rsi, rdx	# range_start, step
 5018              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5019              		.loc 1 489 49 view .LVU1721
 5020 1e40 4E0904FF 		or	QWORD PTR [rdi+r15*8], r8	# *_14, tmp275
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5021              		.loc 1 488 70 is_stmt 1 view .LVU1722
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5022              		.loc 1 488 49 view .LVU1723
 5023              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5024              		.loc 1 488 13 is_stmt 0 view .LVU1724
 5025 1e44 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 5026 1e47 0F8226FC 		jb	.L266	#,
 5026      FFFF
 489:sieve_extend.c ****             return;                 
 5027              		.loc 1 489 17 is_stmt 1 view .LVU1725
 5028              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5029              		.loc 1 489 49 is_stmt 0 view .LVU1726
 5030 1e4d 4989F3   		mov	r11, rsi	# tmp277, range_start
 5031              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
GAS LISTING /tmp/ccBvFgp2.s 			page 146


 5032              		.loc 1 489 52 view .LVU1727
 5033 1e50 C4C2C9F7 		shlx	rbx, r10, rsi	# tmp280, tmp185, range_start
 5033      DA
 5034              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5035              		.loc 1 489 49 view .LVU1728
 5036 1e55 49C1EB06 		shr	r11, 6	# tmp277,
 5037              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5038              		.loc 1 488 76 view .LVU1729
 5039 1e59 4801D6   		add	rsi, rdx	# range_start, step
 5040              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5041              		.loc 1 489 49 view .LVU1730
 5042 1e5c 4A091CDF 		or	QWORD PTR [rdi+r11*8], rbx	# *_14, tmp280
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5043              		.loc 1 488 70 is_stmt 1 view .LVU1731
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5044              		.loc 1 488 49 view .LVU1732
 5045              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5046              		.loc 1 488 13 is_stmt 0 view .LVU1733
 5047 1e60 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 5048 1e63 0F820AFC 		jb	.L266	#,
 5048      FFFF
 489:sieve_extend.c ****             return;                 
 5049              		.loc 1 489 17 is_stmt 1 view .LVU1734
 5050              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5051              		.loc 1 489 49 is_stmt 0 view .LVU1735
 5052 1e69 4989F6   		mov	r14, rsi	# tmp282, range_start
 5053              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5054              		.loc 1 489 52 view .LVU1736
 5055 1e6c C442C9F7 		shlx	r9, r10, rsi	# tmp285, tmp185, range_start
 5055      CA
 5056              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5057              		.loc 1 489 49 view .LVU1737
 5058 1e71 49C1EE06 		shr	r14, 6	# tmp282,
 5059              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5060              		.loc 1 488 76 view .LVU1738
 5061 1e75 4801D6   		add	rsi, rdx	# range_start, step
 5062              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5063              		.loc 1 489 49 view .LVU1739
 5064 1e78 4E090CF7 		or	QWORD PTR [rdi+r14*8], r9	# *_14, tmp285
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5065              		.loc 1 488 70 is_stmt 1 view .LVU1740
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5066              		.loc 1 488 49 view .LVU1741
 5067              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5068              		.loc 1 488 13 is_stmt 0 view .LVU1742
 5069 1e7c 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 5070 1e7f 0F82EEFB 		jb	.L266	#,
GAS LISTING /tmp/ccBvFgp2.s 			page 147


 5070      FFFF
 489:sieve_extend.c ****             return;                 
 5071              		.loc 1 489 17 is_stmt 1 view .LVU1743
 5072              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5073              		.loc 1 489 49 is_stmt 0 view .LVU1744
 5074 1e85 4989F4   		mov	r12, rsi	# tmp287, range_start
 5075              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5076              		.loc 1 489 52 view .LVU1745
 5077 1e88 C442C9F7 		shlx	r13, r10, rsi	# tmp290, tmp185, range_start
 5077      EA
 5078              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5079              		.loc 1 489 49 view .LVU1746
 5080 1e8d 49C1EC06 		shr	r12, 6	# tmp287,
 5081              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5082              		.loc 1 488 76 view .LVU1747
 5083 1e91 4801D6   		add	rsi, rdx	# range_start, step
 5084              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5085              		.loc 1 489 49 view .LVU1748
 5086 1e94 4E092CE7 		or	QWORD PTR [rdi+r12*8], r13	# *_14, tmp290
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5087              		.loc 1 488 70 is_stmt 1 view .LVU1749
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5088              		.loc 1 488 49 view .LVU1750
 5089              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5090              		.loc 1 488 13 is_stmt 0 view .LVU1751
 5091 1e98 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 5092 1e9b 0F82D2FB 		jb	.L266	#,
 5092      FFFF
 489:sieve_extend.c ****             return;                 
 5093              		.loc 1 489 17 is_stmt 1 view .LVU1752
 5094              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5095              		.loc 1 489 49 is_stmt 0 view .LVU1753
 5096 1ea1 4889F0   		mov	rax, rsi	# tmp292, range_start
 5097              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5098              		.loc 1 489 52 view .LVU1754
 5099 1ea4 C442C9F7 		shlx	r15, r10, rsi	# tmp295, tmp185, range_start
 5099      FA
 5100              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5101              		.loc 1 489 49 view .LVU1755
 5102 1ea9 48C1E806 		shr	rax, 6	# tmp292,
 5103              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5104              		.loc 1 488 76 view .LVU1756
 5105 1ead 4801D6   		add	rsi, rdx	# range_start, step
 5106              	# sieve_extend.c:489:                 bitarray_word[wordindex(index)] |= markmask(index);
 489:sieve_extend.c ****             return;                 
 5107              		.loc 1 489 49 view .LVU1757
 5108 1eb0 4C093CC7 		or	QWORD PTR [rdi+rax*8], r15	# *_14, tmp295
GAS LISTING /tmp/ccBvFgp2.s 			page 148


 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5109              		.loc 1 488 70 is_stmt 1 view .LVU1758
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5110              		.loc 1 488 49 view .LVU1759
 5111              	# sieve_extend.c:488:             for (counter_t index = range_start; index <= range_stop; index +=
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5112              		.loc 1 488 13 is_stmt 0 view .LVU1760
 5113 1eb4 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 5114 1eb7 0F8320FF 		jnb	.L270	#,
 5114      FFFF
 5115 1ebd E9B1FBFF 		jmp	.L266	#
 5115      FF
 5116              	.LVL229:
 5117              	.L427:
 488:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 5118              		.loc 1 488 13 view .LVU1761
 5119              	.LBE322:
 5120              	.LBE335:
 5121              	# sieve_extend.c:577: }
 577:sieve_extend.c **** 
 5122              		.loc 1 577 1 view .LVU1762
 5123 1ec2 E8000000 		call	__stack_chk_fail@PLT	#
 5123      00
 5124              	.LVL230:
 577:sieve_extend.c **** 
 5125              		.loc 1 577 1 view .LVU1763
 5126              		.cfi_endproc
 5127              	.LFE64:
 5129 1ec7 660F1F84 		.p2align 4
 5129      00000000 
 5129      00
 5131              	extendSieve_aligned:
 5132              	.LVL231:
 5133              	.LFB66:
 613:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using aligned (%ju copies)\n"
 5134              		.loc 1 613 140 is_stmt 1 view -0
 5135              		.cfi_startproc
 614:sieve_extend.c **** 
 5136              		.loc 1 614 5 view .LVU1765
 616:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 5137              		.loc 1 616 5 view .LVU1766
 5138              	# sieve_extend.c:613: static void extendSieve_aligned(bitword_t* bitarray, const counter_t source_s
 613:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using aligned (%ju copies)\n"
 5139              		.loc 1 613 140 is_stmt 0 view .LVU1767
 5140 1ed0 55       		push	rbp	#
 5141              		.cfi_def_cfa_offset 16
 5142              		.cfi_offset 6, -16
 5143 1ed1 4889E5   		mov	rbp, rsp	#,
 5144              		.cfi_def_cfa_register 6
 5145 1ed4 4157     		push	r15	#
 5146 1ed6 4156     		push	r14	#
 5147 1ed8 4155     		push	r13	#
 5148              		.cfi_offset 15, -24
 5149              		.cfi_offset 14, -32
 5150              		.cfi_offset 13, -40
 5151 1eda 4989FD   		mov	r13, rdi	# bitarray, tmp295
 5152 1edd 4154     		push	r12	#
GAS LISTING /tmp/ccBvFgp2.s 			page 149


 5153              		.cfi_offset 12, -48
 5154 1edf 4989D4   		mov	r12, rdx	# size, tmp297
 5155 1ee2 53       		push	rbx	#
 5156              		.cfi_offset 3, -56
 5157              	# sieve_extend.c:616:     const counter_t destination_stop_word = wordindex(destination_stop);
 616:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 5158              		.loc 1 616 21 view .LVU1768
 5159 1ee3 4889CB   		mov	rbx, rcx	# tmp298, tmp298
 5160              	# sieve_extend.c:617:     const counter_t copy_start = source_start + size;
 617:sieve_extend.c ****     counter_t source_word = wordindex(source_start);
 5161              		.loc 1 617 21 view .LVU1769
 5162 1ee6 488D0C16 		lea	rcx, [rsi+rdx]	# copy_start,
 5163              	.LVL232:
 5164              	# sieve_extend.c:613: static void extendSieve_aligned(bitword_t* bitarray, const counter_t source_s
 613:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using aligned (%ju copies)\n"
 5165              		.loc 1 613 140 view .LVU1770
 5166 1eea 4883E4E0 		and	rsp, -32	#,
 5167              	# sieve_extend.c:619:     counter_t copy_word = wordindex(copy_start);
 619:sieve_extend.c ****     
 5168              		.loc 1 619 15 view .LVU1771
 5169 1eee 4889C8   		mov	rax, rcx	# ivtmp.341, copy_start
 5170              	# sieve_extend.c:618:     counter_t source_word = wordindex(source_start);
 618:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
 5171              		.loc 1 618 15 view .LVU1772
 5172 1ef1 48C1EE06 		shr	rsi, 6	# source_start,
 5173              	.LVL233:
 5174              	# sieve_extend.c:613: static void extendSieve_aligned(bitword_t* bitarray, const counter_t source_s
 613:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using aligned (%ju copies)\n"
 5175              		.loc 1 613 140 view .LVU1773
 5176 1ef5 488D6424 		lea	rsp, -32[rsp]	#,
 5176      E0
 5177              	# sieve_extend.c:619:     counter_t copy_word = wordindex(copy_start);
 619:sieve_extend.c ****     
 5178              		.loc 1 619 15 view .LVU1774
 5179 1efa 48C1E806 		shr	rax, 6	# ivtmp.341,
 5180              	# sieve_extend.c:621:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 621:sieve_extend.c **** 
 5181              		.loc 1 621 35 view .LVU1775
 5182 1efe 488D3CF5 		lea	rdi, 0[0+rsi*8]	# _4,
 5182      00000000 
 5183              	.LVL234:
 5184              	# sieve_extend.c:616:     const counter_t destination_stop_word = wordindex(destination_stop);
 616:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 5185              		.loc 1 616 21 view .LVU1776
 5186 1f06 48C1EB06 		shr	rbx, 6	# tmp298,
 5187              	.LVL235:
 617:sieve_extend.c ****     counter_t source_word = wordindex(source_start);
 5188              		.loc 1 617 5 is_stmt 1 view .LVU1777
 618:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
 5189              		.loc 1 618 5 view .LVU1778
 5190              	# sieve_extend.c:621:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 621:sieve_extend.c **** 
 5191              		.loc 1 621 35 is_stmt 0 view .LVU1779
 5192 1f0a 4D8D743D 		lea	r14, 0[r13+rdi]	# _5,
 5192      00
 5193              	# sieve_extend.c:618:     counter_t source_word = wordindex(source_start);
 618:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
GAS LISTING /tmp/ccBvFgp2.s 			page 150


 5194              		.loc 1 618 15 view .LVU1780
 5195 1f0f 48897424 		mov	QWORD PTR 8[rsp], rsi	# %sfp, source_word
 5195      08
 5196              	.LVL236:
 619:sieve_extend.c ****     
 5197              		.loc 1 619 5 is_stmt 1 view .LVU1781
 621:sieve_extend.c **** 
 5198              		.loc 1 621 5 view .LVU1782
 5199              	# sieve_extend.c:621:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 621:sieve_extend.c **** 
 5200              		.loc 1 621 52 is_stmt 0 view .LVU1783
 5201 1f14 89CE     		mov	esi, ecx	# tmp183, copy_start
 5202              	.LVL237:
 5203              	# sieve_extend.c:623:     while (copy_word + size <= destination_stop_word) {
 623:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 5204              		.loc 1 623 22 view .LVU1784
 5205 1f16 498D0C04 		lea	rcx, [r12+rax]	# ivtmp.341,
 5206              	.LVL238:
 5207              	# sieve_extend.c:621:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 621:sieve_extend.c **** 
 5208              		.loc 1 621 52 view .LVU1785
 5209 1f1a F7D6     		not	esi	# tmp183
 5210              	# sieve_extend.c:621:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 621:sieve_extend.c **** 
 5211              		.loc 1 621 35 view .LVU1786
 5212 1f1c 48893C24 		mov	QWORD PTR [rsp], rdi	# %sfp, _4
 5213              	# sieve_extend.c:621:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 621:sieve_extend.c **** 
 5214              		.loc 1 621 52 view .LVU1787
 5215 1f20 48C7C2FF 		mov	rdx, -1	# tmp186,
 5215      FFFFFF
 5216              	.LVL239:
 621:sieve_extend.c **** 
 5217              		.loc 1 621 52 view .LVU1788
 5218 1f27 C462CBF7 		shrx	r8, rdx, rsi	# tmp185, tmp186, tmp183
 5218      C2
 5219              	# sieve_extend.c:621:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 621:sieve_extend.c **** 
 5220              		.loc 1 621 49 view .LVU1789
 5221 1f2c C442B8F2 		andn	r9, r8, QWORD PTR [r14]	# tmp189, tmp185, *_5
 5221      0E
 5222              	# sieve_extend.c:621:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 621:sieve_extend.c **** 
 5223              		.loc 1 621 25 view .LVU1790
 5224 1f31 4D894CC5 		mov	QWORD PTR 0[r13+rax*8], r9	# *_13, tmp189
 5224      00
 623:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 5225              		.loc 1 623 5 is_stmt 1 view .LVU1791
 623:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 5226              		.loc 1 623 11 view .LVU1792
 5227 1f36 4839CB   		cmp	rbx, rcx	# destination_stop_word, ivtmp.341
 5228 1f39 0F827101 		jb	.L429	#,
 5228      0000
 5229 1f3f 4C8D14C5 		lea	r10, 0[0+rax*8]	# _12,
 5229      00000000 
 5230 1f47 488D04CD 		lea	rax, 0[0+rcx*8]	# tmp191,
 5230      00000000 
GAS LISTING /tmp/ccBvFgp2.s 			page 151


 5231              	.LVL240:
 623:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 5232              		.loc 1 623 11 is_stmt 0 view .LVU1793
 5233 1f4f 4D01EA   		add	r10, r13	# tmp190, bitarray
 5234              	# sieve_extend.c:624:         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*
 624:sieve_extend.c ****         copy_word += size;
 5235              		.loc 1 624 9 view .LVU1794
 5236 1f52 4E8D3CE5 		lea	r15, 0[0+r12*8]	# _15,
 5236      00000000 
 5237 1f5a 4929C2   		sub	r10, rax	# tmp190, tmp191
 5238 1f5d 4C895424 		mov	QWORD PTR 24[rsp], r10	# %sfp, tmp190
 5238      18
 5239              	.LVL241:
 5240              	.L430:
 624:sieve_extend.c ****         copy_word += size;
 5241              		.loc 1 624 9 is_stmt 1 view .LVU1795
 5242              	.LBB336:
 5243              	.LBI336:
 5244              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h"
   1:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* Copyright (C) 2004-2020 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    <https://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _BITS_STRING_FORTIFIED_H
  19:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #define _BITS_STRING_FORTIFIED_H 1
  20:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  21:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _STRING_H
  22:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** # error "Never use <bits/string_fortified.h> directly; include <string.h> instead."
  23:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  24:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  25:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  26:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __warndecl (__warn_memset_zero_len,
  27:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  28:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  29:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
 5245              		.loc 2 31 1 view .LVU1796
 5246              	.LBB337:
  32:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
  33:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
 5247              		.loc 2 34 3 view .LVU1797
 5248              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
GAS LISTING /tmp/ccBvFgp2.s 			page 152


 5249              		.loc 2 34 10 is_stmt 0 view .LVU1798
 5250 1f62 4C8B5C24 		mov	r11, QWORD PTR 24[rsp]	# _189, %sfp
 5250      18
 5251 1f67 4C89FA   		mov	rdx, r15	#, _15
 5252 1f6a 48894C24 		mov	QWORD PTR 16[rsp], rcx	# %sfp, ivtmp.341
 5252      10
 5253 1f6f 4C89F6   		mov	rsi, r14	#, _5
 5254 1f72 498D3CCB 		lea	rdi, [r11+rcx*8]	# tmp193,
 5255 1f76 E8000000 		call	memcpy@PLT	#
 5255      00
 5256              	.LVL242:
 5257              		.loc 2 34 10 view .LVU1799
 5258              	.LBE337:
 5259              	.LBE336:
 625:sieve_extend.c ****     }
 5260              		.loc 1 625 9 is_stmt 1 view .LVU1800
 623:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 5261              		.loc 1 623 11 view .LVU1801
 5262 1f7b 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.341, %sfp
 5262      10
 5263 1f80 4A8D0C20 		lea	rcx, [rax+r12]	# ivtmp.341,
 5264 1f84 4839CB   		cmp	rbx, rcx	# destination_stop_word, ivtmp.341
 5265 1f87 0F822301 		jb	.L429	#,
 5265      0000
 624:sieve_extend.c ****         copy_word += size;
 5266              		.loc 1 624 9 view .LVU1802
 5267              	.LVL243:
 5268              	.LBB345:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 5269              		.loc 2 31 1 view .LVU1803
 5270              	.LBB338:
 5271              		.loc 2 34 3 view .LVU1804
 5272              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 5273              		.loc 2 34 10 is_stmt 0 view .LVU1805
 5274 1f8d 488B7C24 		mov	rdi, QWORD PTR 24[rsp]	# _189, %sfp
 5274      18
 5275 1f92 4C89F6   		mov	rsi, r14	#, _5
 5276 1f95 48894C24 		mov	QWORD PTR 16[rsp], rcx	# %sfp, ivtmp.341
 5276      10
 5277              	.LVL244:
 5278              		.loc 2 34 10 view .LVU1806
 5279 1f9a 4C89FA   		mov	rdx, r15	#, _15
 5280 1f9d 488D3CCF 		lea	rdi, [rdi+rcx*8]	# tmp276,
 5281 1fa1 E8000000 		call	memcpy@PLT	#
 5281      00
 5282              	.LVL245:
 5283              		.loc 2 34 10 view .LVU1807
 5284              	.LBE338:
 5285              	.LBE345:
 625:sieve_extend.c ****     }
 5286              		.loc 1 625 9 is_stmt 1 view .LVU1808
 623:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 5287              		.loc 1 623 11 view .LVU1809
 5288 1fa6 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.341, %sfp
 5288      10
 5289 1fab 4A8D3420 		lea	rsi, [rax+r12]	# ivtmp.341,
 5290 1faf 4839F3   		cmp	rbx, rsi	# destination_stop_word, ivtmp.341
GAS LISTING /tmp/ccBvFgp2.s 			page 153


 5291 1fb2 0F82F800 		jb	.L429	#,
 5291      0000
 624:sieve_extend.c ****         copy_word += size;
 5292              		.loc 1 624 9 view .LVU1810
 5293              	.LVL246:
 5294              	.LBB346:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 5295              		.loc 2 31 1 view .LVU1811
 5296              	.LBB339:
 5297              		.loc 2 34 3 view .LVU1812
 5298              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 5299              		.loc 2 34 10 is_stmt 0 view .LVU1813
 5300 1fb8 488B5424 		mov	rdx, QWORD PTR 24[rsp]	# _189, %sfp
 5300      18
 5301 1fbd 48897424 		mov	QWORD PTR 16[rsp], rsi	# %sfp, ivtmp.341
 5301      10
 5302 1fc2 488D3CF2 		lea	rdi, [rdx+rsi*8]	# tmp279,
 5303 1fc6 4C89FA   		mov	rdx, r15	#, _15
 5304 1fc9 4C89F6   		mov	rsi, r14	#, _5
 5305 1fcc E8000000 		call	memcpy@PLT	#
 5305      00
 5306              	.LVL247:
 5307              		.loc 2 34 10 view .LVU1814
 5308              	.LBE339:
 5309              	.LBE346:
 625:sieve_extend.c ****     }
 5310              		.loc 1 625 9 is_stmt 1 view .LVU1815
 623:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 5311              		.loc 1 623 11 view .LVU1816
 5312 1fd1 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.341, %sfp
 5312      10
 5313 1fd6 4E8D0420 		lea	r8, [rax+r12]	# ivtmp.341,
 5314 1fda 4C39C3   		cmp	rbx, r8	# destination_stop_word, ivtmp.341
 5315 1fdd 0F82CD00 		jb	.L429	#,
 5315      0000
 624:sieve_extend.c ****         copy_word += size;
 5316              		.loc 1 624 9 view .LVU1817
 5317              	.LVL248:
 5318              	.LBB347:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 5319              		.loc 2 31 1 view .LVU1818
 5320              	.LBB340:
 5321              		.loc 2 34 3 view .LVU1819
 5322              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 5323              		.loc 2 34 10 is_stmt 0 view .LVU1820
 5324 1fe3 4C8B4C24 		mov	r9, QWORD PTR 24[rsp]	# _189, %sfp
 5324      18
 5325 1fe8 4C89FA   		mov	rdx, r15	#, _15
 5326 1feb 4C894424 		mov	QWORD PTR 16[rsp], r8	# %sfp, ivtmp.341
 5326      10
 5327 1ff0 4C89F6   		mov	rsi, r14	#, _5
 5328 1ff3 4B8D3CC1 		lea	rdi, [r9+r8*8]	# tmp282,
 5329 1ff7 E8000000 		call	memcpy@PLT	#
 5329      00
 5330              	.LVL249:
 5331              		.loc 2 34 10 view .LVU1821
 5332              	.LBE340:
GAS LISTING /tmp/ccBvFgp2.s 			page 154


 5333              	.LBE347:
 625:sieve_extend.c ****     }
 5334              		.loc 1 625 9 is_stmt 1 view .LVU1822
 623:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 5335              		.loc 1 623 11 view .LVU1823
 5336 1ffc 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.341, %sfp
 5336      10
 5337 2001 4E8D1420 		lea	r10, [rax+r12]	# ivtmp.341,
 5338 2005 4C39D3   		cmp	rbx, r10	# destination_stop_word, ivtmp.341
 5339 2008 0F82A200 		jb	.L429	#,
 5339      0000
 624:sieve_extend.c ****         copy_word += size;
 5340              		.loc 1 624 9 view .LVU1824
 5341              	.LVL250:
 5342              	.LBB348:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 5343              		.loc 2 31 1 view .LVU1825
 5344              	.LBB341:
 5345              		.loc 2 34 3 view .LVU1826
 5346              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 5347              		.loc 2 34 10 is_stmt 0 view .LVU1827
 5348 200e 4C8B5C24 		mov	r11, QWORD PTR 24[rsp]	# _189, %sfp
 5348      18
 5349 2013 4C89FA   		mov	rdx, r15	#, _15
 5350 2016 4C895424 		mov	QWORD PTR 16[rsp], r10	# %sfp, ivtmp.341
 5350      10
 5351 201b 4C89F6   		mov	rsi, r14	#, _5
 5352 201e 4B8D3CD3 		lea	rdi, [r11+r10*8]	# tmp285,
 5353 2022 E8000000 		call	memcpy@PLT	#
 5353      00
 5354              	.LVL251:
 5355              		.loc 2 34 10 view .LVU1828
 5356              	.LBE341:
 5357              	.LBE348:
 625:sieve_extend.c ****     }
 5358              		.loc 1 625 9 is_stmt 1 view .LVU1829
 623:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 5359              		.loc 1 623 11 view .LVU1830
 5360 2027 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.341, %sfp
 5360      10
 5361 202c 4A8D0C20 		lea	rcx, [rax+r12]	# ivtmp.341,
 5362 2030 4839CB   		cmp	rbx, rcx	# destination_stop_word, ivtmp.341
 5363 2033 727B     		jb	.L429	#,
 624:sieve_extend.c ****         copy_word += size;
 5364              		.loc 1 624 9 view .LVU1831
 5365              	.LVL252:
 5366              	.LBB349:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 5367              		.loc 2 31 1 view .LVU1832
 5368              	.LBB342:
 5369              		.loc 2 34 3 view .LVU1833
 5370              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 5371              		.loc 2 34 10 is_stmt 0 view .LVU1834
 5372 2035 488B7C24 		mov	rdi, QWORD PTR 24[rsp]	# _189, %sfp
 5372      18
 5373 203a 4C89F6   		mov	rsi, r14	#, _5
 5374 203d 48894C24 		mov	QWORD PTR 16[rsp], rcx	# %sfp, ivtmp.341
GAS LISTING /tmp/ccBvFgp2.s 			page 155


 5374      10
 5375 2042 4C89FA   		mov	rdx, r15	#, _15
 5376 2045 488D3CCF 		lea	rdi, [rdi+rcx*8]	# tmp288,
 5377 2049 E8000000 		call	memcpy@PLT	#
 5377      00
 5378              	.LVL253:
 5379              		.loc 2 34 10 view .LVU1835
 5380              	.LBE342:
 5381              	.LBE349:
 625:sieve_extend.c ****     }
 5382              		.loc 1 625 9 is_stmt 1 view .LVU1836
 623:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 5383              		.loc 1 623 11 view .LVU1837
 5384 204e 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.341, %sfp
 5384      10
 5385 2053 4A8D3420 		lea	rsi, [rax+r12]	# ivtmp.341,
 5386 2057 4839F3   		cmp	rbx, rsi	# destination_stop_word, ivtmp.341
 5387 205a 7254     		jb	.L429	#,
 624:sieve_extend.c ****         copy_word += size;
 5388              		.loc 1 624 9 view .LVU1838
 5389              	.LVL254:
 5390              	.LBB350:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 5391              		.loc 2 31 1 view .LVU1839
 5392              	.LBB343:
 5393              		.loc 2 34 3 view .LVU1840
 5394              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 5395              		.loc 2 34 10 is_stmt 0 view .LVU1841
 5396 205c 488B5424 		mov	rdx, QWORD PTR 24[rsp]	# _189, %sfp
 5396      18
 5397 2061 48897424 		mov	QWORD PTR 16[rsp], rsi	# %sfp, ivtmp.341
 5397      10
 5398 2066 488D3CF2 		lea	rdi, [rdx+rsi*8]	# tmp291,
 5399 206a 4C89FA   		mov	rdx, r15	#, _15
 5400 206d 4C89F6   		mov	rsi, r14	#, _5
 5401 2070 E8000000 		call	memcpy@PLT	#
 5401      00
 5402              	.LVL255:
 5403              		.loc 2 34 10 view .LVU1842
 5404              	.LBE343:
 5405              	.LBE350:
 625:sieve_extend.c ****     }
 5406              		.loc 1 625 9 is_stmt 1 view .LVU1843
 623:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 5407              		.loc 1 623 11 view .LVU1844
 5408 2075 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.341, %sfp
 5408      10
 5409 207a 4E8D0420 		lea	r8, [rax+r12]	# ivtmp.341,
 5410 207e 4C39C3   		cmp	rbx, r8	# destination_stop_word, ivtmp.341
 5411 2081 722D     		jb	.L429	#,
 624:sieve_extend.c ****         copy_word += size;
 5412              		.loc 1 624 9 view .LVU1845
 5413              	.LVL256:
 5414              	.LBB351:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 5415              		.loc 2 31 1 view .LVU1846
 5416              	.LBB344:
GAS LISTING /tmp/ccBvFgp2.s 			page 156


 5417              		.loc 2 34 3 view .LVU1847
 5418              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 5419              		.loc 2 34 10 is_stmt 0 view .LVU1848
 5420 2083 4C8B4C24 		mov	r9, QWORD PTR 24[rsp]	# _189, %sfp
 5420      18
 5421 2088 4C89FA   		mov	rdx, r15	#, _15
 5422 208b 4C894424 		mov	QWORD PTR 16[rsp], r8	# %sfp, ivtmp.341
 5422      10
 5423 2090 4C89F6   		mov	rsi, r14	#, _5
 5424 2093 4B8D3CC1 		lea	rdi, [r9+r8*8]	# tmp294,
 5425 2097 E8000000 		call	memcpy@PLT	#
 5425      00
 5426              	.LVL257:
 5427              		.loc 2 34 10 view .LVU1849
 5428              	.LBE344:
 5429              	.LBE351:
 625:sieve_extend.c ****     }
 5430              		.loc 1 625 9 is_stmt 1 view .LVU1850
 623:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 5431              		.loc 1 623 11 view .LVU1851
 5432 209c 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.341, %sfp
 5432      10
 5433              	.LVL258:
 623:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 5434              		.loc 1 623 11 is_stmt 0 view .LVU1852
 5435 20a1 4A8D0C20 		lea	rcx, [rax+r12]	# ivtmp.341,
 5436              	.LVL259:
 623:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 5437              		.loc 1 623 11 view .LVU1853
 5438 20a5 4839CB   		cmp	rbx, rcx	# destination_stop_word, ivtmp.341
 5439 20a8 0F83B4FE 		jnb	.L430	#,
 5439      FFFF
 5440              	.LVL260:
 5441 20ae 6690     		.p2align 4
 5442              		.p2align 3
 5443              	.L429:
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5444              		.loc 1 628 10 is_stmt 1 view .LVU1854
 5445 20b0 4839C3   		cmp	rbx, rax	# destination_stop_word, ivtmp.341
 5446 20b3 0F864902 		jbe	.L540	#,
 5446      0000
 5447 20b9 4C8B1424 		mov	r10, QWORD PTR [rsp]	# _4, %sfp
 5448 20bd 4C8D24C5 		lea	r12, 0[0+rax*8]	# _41,
 5448      00000000 
 5449              	.LVL261:
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5450              		.loc 1 628 10 is_stmt 0 view .LVU1855
 5451 20c5 4D8D7C24 		lea	r15, 32[r12]	# tmp199,
 5451      20
 5452 20ca 498D7A20 		lea	rdi, 32[r10]	# tmp202,
 5453 20ce 4D39FA   		cmp	r10, r15	# _4, tmp199
 5454 20d1 410F9DC3 		setge	r11b	#, tmp201
 5455 20d5 4939FC   		cmp	r12, rdi	# _41, tmp202
 5456 20d8 400F9DC6 		setge	sil	#, tmp204
 5457 20dc 4108F3   		or	r11b, sil	# tmp201, tmp204
 5458 20df 0F844B02 		je	.L432	#,
 5458      0000
GAS LISTING /tmp/ccBvFgp2.s 			page 157


 5459 20e5 488D53FF 		lea	rdx, -1[rbx]	# tmp206,
 5460 20e9 4829C2   		sub	rdx, rax	# tmp207, ivtmp.341
 5461 20ec 4883FA05 		cmp	rdx, 5	# tmp207,
 5462 20f0 0F863A02 		jbe	.L432	#,
 5462      0000
 5463 20f6 4D89F7   		mov	r15, r14	# tmp210, _5
 5464 20f9 49C1EF03 		shr	r15, 3	# tmp210,
 5465 20fd 49F7DF   		neg	r15	# tmp211
 5466 2100 4183E703 		and	r15d, 3	# prolog_loop_niters.309,
 5467 2104 0F842E03 		je	.L439	#,
 5467      0000
 629:sieve_extend.c ****         source_word++;
 5468              		.loc 1 629 9 is_stmt 1 view .LVU1856
 5469              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5470              		.loc 1 629 39 is_stmt 0 view .LVU1857
 5471 210a 4D8B06   		mov	r8, QWORD PTR [r14]	# _150, *_5
 5472 210d 4983FF01 		cmp	r15, 1	# prolog_loop_niters.309,
 5473              	# sieve_extend.c:630:         source_word++;
 630:sieve_extend.c ****         copy_word++;
 5474              		.loc 1 630 20 view .LVU1858
 5475 2111 4C8B4C24 		mov	r9, QWORD PTR 8[rsp]	# source_word, %sfp
 5475      08
 5476              	# sieve_extend.c:631:         copy_word++;
 631:sieve_extend.c ****     }
 5477              		.loc 1 631 18 view .LVU1859
 5478 2116 4C8D7001 		lea	r14, 1[rax]	# copy_word,
 5479              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5480              		.loc 1 629 29 view .LVU1860
 5481 211a 4F894425 		mov	QWORD PTR 0[r13+r12], r8	# *_149, _150
 5481      00
 630:sieve_extend.c ****         copy_word++;
 5482              		.loc 1 630 9 is_stmt 1 view .LVU1861
 5483              	# sieve_extend.c:630:         source_word++;
 630:sieve_extend.c ****         copy_word++;
 5484              		.loc 1 630 20 is_stmt 0 view .LVU1862
 5485 211f 4D8D6101 		lea	r12, 1[r9]	# source_word,
 5486              	.LVL262:
 631:sieve_extend.c ****     }
 5487              		.loc 1 631 9 is_stmt 1 view .LVU1863
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5488              		.loc 1 628 10 view .LVU1864
 5489 2123 742A     		je	.L433	#,
 629:sieve_extend.c ****         source_word++;
 5490              		.loc 1 629 9 view .LVU1865
 5491              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5492              		.loc 1 629 39 is_stmt 0 view .LVU1866
 5493 2125 4B8B4CE5 		mov	rcx, QWORD PTR 0[r13+r12*8]	# _163, *_160
 5493      00
 5494 212a 4983FF03 		cmp	r15, 3	# prolog_loop_niters.309,
 5495              	# sieve_extend.c:630:         source_word++;
 630:sieve_extend.c ****         copy_word++;
 5496              		.loc 1 630 20 view .LVU1867
 5497 212e 4D8D6102 		lea	r12, 2[r9]	# source_word,
 5498              	.LVL263:
GAS LISTING /tmp/ccBvFgp2.s 			page 158


 5499              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5500              		.loc 1 629 29 view .LVU1868
 5501 2132 4B894CF5 		mov	QWORD PTR 0[r13+r14*8], rcx	# *_162, _163
 5501      00
 630:sieve_extend.c ****         copy_word++;
 5502              		.loc 1 630 9 is_stmt 1 view .LVU1869
 5503              	.LVL264:
 631:sieve_extend.c ****     }
 5504              		.loc 1 631 9 view .LVU1870
 5505              	# sieve_extend.c:631:         copy_word++;
 631:sieve_extend.c ****     }
 5506              		.loc 1 631 18 is_stmt 0 view .LVU1871
 5507 2137 4C8D7002 		lea	r14, 2[rax]	# copy_word,
 5508              	.LVL265:
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5509              		.loc 1 628 10 is_stmt 1 view .LVU1872
 5510 213b 7512     		jne	.L433	#,
 629:sieve_extend.c ****         source_word++;
 5511              		.loc 1 629 9 view .LVU1873
 5512              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5513              		.loc 1 629 39 is_stmt 0 view .LVU1874
 5514 213d 4F8B54E5 		mov	r10, QWORD PTR 0[r13+r12*8]	# _89, *_86
 5514      00
 5515              	# sieve_extend.c:630:         source_word++;
 630:sieve_extend.c ****         copy_word++;
 5516              		.loc 1 630 20 view .LVU1875
 5517 2142 4D8D6103 		lea	r12, 3[r9]	# source_word,
 5518              	.LVL266:
 5519              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5520              		.loc 1 629 29 view .LVU1876
 5521 2146 4F8954F5 		mov	QWORD PTR 0[r13+r14*8], r10	# *_88, _89
 5521      00
 630:sieve_extend.c ****         copy_word++;
 5522              		.loc 1 630 9 is_stmt 1 view .LVU1877
 5523              	.LVL267:
 631:sieve_extend.c ****     }
 5524              		.loc 1 631 9 view .LVU1878
 5525              	# sieve_extend.c:631:         copy_word++;
 631:sieve_extend.c ****     }
 5526              		.loc 1 631 18 is_stmt 0 view .LVU1879
 5527 214b 4C8D7003 		lea	r14, 3[rax]	# copy_word,
 5528              	.LVL268:
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5529              		.loc 1 628 10 is_stmt 1 view .LVU1880
 5530              	.L433:
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5531              		.loc 1 628 10 is_stmt 0 view .LVU1881
 5532 214f 488B7C24 		mov	rdi, QWORD PTR 8[rsp]	# source_word, %sfp
 5532      08
 5533 2154 4989DB   		mov	r11, rbx	# tmp212, destination_stop_word
 5534 2157 4D29FB   		sub	r11, r15	# tmp212, prolog_loop_niters.309
 5535 215a 4929C3   		sub	r11, rax	# niters.310, ivtmp.341
 5536 215d 4C01F8   		add	rax, r15	# tmp215, prolog_loop_niters.309
 5537 2160 4D89D8   		mov	r8, r11	# bnd.311, niters.310
GAS LISTING /tmp/ccBvFgp2.s 			page 159


 5538 2163 4C01FF   		add	rdi, r15	# source_word, prolog_loop_niters.309
 5539 2166 49C1E802 		shr	r8, 2	# bnd.311,
 5540 216a 4D8D7CC5 		lea	r15, 0[r13+rax*8]	# vectp.319,
 5540      00
 5541 216f 49C1E005 		sal	r8, 5	# _182,
 5542              	# sieve_extend.c:618:     counter_t source_word = wordindex(source_start);
 618:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
 5543              		.loc 1 618 15 view .LVU1882
 5544 2173 31C0     		xor	eax, eax	# ivtmp.332
 5545 2175 498D50E0 		lea	rdx, -32[r8]	# tmp228,
 5546 2179 498D74FD 		lea	rsi, 0[r13+rdi*8]	# vectp.316,
 5546      00
 5547 217e 48C1EA05 		shr	rdx, 5	# tmp226,
 5548 2182 4883C201 		add	rdx, 1	# tmp229,
 5549 2186 83E207   		and	edx, 7	# tmp230,
 5550 2189 0F849500 		je	.L435	#,
 5550      0000
 5551 218f 4883FA01 		cmp	rdx, 1	# tmp230,
 5552 2193 7477     		je	.L499	#,
 5553 2195 4883FA02 		cmp	rdx, 2	# tmp230,
 5554 2199 7462     		je	.L500	#,
 5555 219b 4883FA03 		cmp	rdx, 3	# tmp230,
 5556 219f 744D     		je	.L501	#,
 5557 21a1 4883FA04 		cmp	rdx, 4	# tmp230,
 5558 21a5 7438     		je	.L502	#,
 5559 21a7 4883FA05 		cmp	rdx, 5	# tmp230,
 5560 21ab 7423     		je	.L503	#,
 5561 21ad 4883FA06 		cmp	rdx, 6	# tmp230,
 5562 21b1 740E     		je	.L504	#,
 629:sieve_extend.c ****         source_word++;
 5563              		.loc 1 629 9 is_stmt 1 view .LVU1883
 5564              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5565              		.loc 1 629 29 is_stmt 0 view .LVU1884
 5566 21b3 C5FD6F0E 		vmovdqa	ymm1, YMMWORD PTR [rsi]	# tmp330, MEM[base: vectp.316_119, index: ivtmp.332_180, offset: 0
 5567 21b7 B8200000 		mov	eax, 32	# ivtmp.332,
 5567      00
 5568 21bc C4C17E7F 		vmovdqu	YMMWORD PTR [r15], ymm1	# MEM[base: vectp.319_125, index: ivtmp.332_180, offset: 0B], tmp3
 5568      0F
 630:sieve_extend.c ****         copy_word++;
 5569              		.loc 1 630 9 is_stmt 1 view .LVU1885
 631:sieve_extend.c ****     }
 5570              		.loc 1 631 9 view .LVU1886
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5571              		.loc 1 628 10 view .LVU1887
 5572              	.L504:
 629:sieve_extend.c ****         source_word++;
 5573              		.loc 1 629 9 view .LVU1888
 5574              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5575              		.loc 1 629 29 is_stmt 0 view .LVU1889
 5576 21c1 C5FD6F3C 		vmovdqa	ymm7, YMMWORD PTR [rsi+rax]	# tmp331, MEM[base: vectp.316_119, index: ivtmp.332_180, offse
 5576      06
 5577 21c6 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm7	# MEM[base: vectp.319_125, index: ivtmp.332_180, offset: 0B], 
 5577      3C07
 630:sieve_extend.c ****         copy_word++;
 5578              		.loc 1 630 9 is_stmt 1 view .LVU1890
GAS LISTING /tmp/ccBvFgp2.s 			page 160


 631:sieve_extend.c ****     }
 5579              		.loc 1 631 9 view .LVU1891
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5580              		.loc 1 628 10 view .LVU1892
 5581 21cc 4883C020 		add	rax, 32	# ivtmp.332,
 5582              	.L503:
 629:sieve_extend.c ****         source_word++;
 5583              		.loc 1 629 9 view .LVU1893
 5584              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5585              		.loc 1 629 29 is_stmt 0 view .LVU1894
 5586 21d0 C5FD6F34 		vmovdqa	ymm6, YMMWORD PTR [rsi+rax]	# tmp332, MEM[base: vectp.316_119, index: ivtmp.332_180, offse
 5586      06
 5587 21d5 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm6	# MEM[base: vectp.319_125, index: ivtmp.332_180, offset: 0B], 
 5587      3407
 630:sieve_extend.c ****         copy_word++;
 5588              		.loc 1 630 9 is_stmt 1 view .LVU1895
 631:sieve_extend.c ****     }
 5589              		.loc 1 631 9 view .LVU1896
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5590              		.loc 1 628 10 view .LVU1897
 5591 21db 4883C020 		add	rax, 32	# ivtmp.332,
 5592              	.L502:
 629:sieve_extend.c ****         source_word++;
 5593              		.loc 1 629 9 view .LVU1898
 5594              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5595              		.loc 1 629 29 is_stmt 0 view .LVU1899
 5596 21df C5FD6F2C 		vmovdqa	ymm5, YMMWORD PTR [rsi+rax]	# tmp333, MEM[base: vectp.316_119, index: ivtmp.332_180, offse
 5596      06
 5597 21e4 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm5	# MEM[base: vectp.319_125, index: ivtmp.332_180, offset: 0B], 
 5597      2C07
 630:sieve_extend.c ****         copy_word++;
 5598              		.loc 1 630 9 is_stmt 1 view .LVU1900
 631:sieve_extend.c ****     }
 5599              		.loc 1 631 9 view .LVU1901
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5600              		.loc 1 628 10 view .LVU1902
 5601 21ea 4883C020 		add	rax, 32	# ivtmp.332,
 5602              	.L501:
 629:sieve_extend.c ****         source_word++;
 5603              		.loc 1 629 9 view .LVU1903
 5604              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5605              		.loc 1 629 29 is_stmt 0 view .LVU1904
 5606 21ee C5FD6F24 		vmovdqa	ymm4, YMMWORD PTR [rsi+rax]	# tmp334, MEM[base: vectp.316_119, index: ivtmp.332_180, offse
 5606      06
 5607 21f3 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm4	# MEM[base: vectp.319_125, index: ivtmp.332_180, offset: 0B], 
 5607      2407
 630:sieve_extend.c ****         copy_word++;
 5608              		.loc 1 630 9 is_stmt 1 view .LVU1905
 631:sieve_extend.c ****     }
 5609              		.loc 1 631 9 view .LVU1906
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5610              		.loc 1 628 10 view .LVU1907
 5611 21f9 4883C020 		add	rax, 32	# ivtmp.332,
 5612              	.L500:
GAS LISTING /tmp/ccBvFgp2.s 			page 161


 629:sieve_extend.c ****         source_word++;
 5613              		.loc 1 629 9 view .LVU1908
 5614              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5615              		.loc 1 629 29 is_stmt 0 view .LVU1909
 5616 21fd C5FD6F04 		vmovdqa	ymm0, YMMWORD PTR [rsi+rax]	# tmp335, MEM[base: vectp.316_119, index: ivtmp.332_180, offse
 5616      06
 5617 2202 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm0	# MEM[base: vectp.319_125, index: ivtmp.332_180, offset: 0B], 
 5617      0407
 630:sieve_extend.c ****         copy_word++;
 5618              		.loc 1 630 9 is_stmt 1 view .LVU1910
 631:sieve_extend.c ****     }
 5619              		.loc 1 631 9 view .LVU1911
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5620              		.loc 1 628 10 view .LVU1912
 5621 2208 4883C020 		add	rax, 32	# ivtmp.332,
 5622              	.L499:
 629:sieve_extend.c ****         source_word++;
 5623              		.loc 1 629 9 view .LVU1913
 5624              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5625              		.loc 1 629 29 is_stmt 0 view .LVU1914
 5626 220c C5FD6F14 		vmovdqa	ymm2, YMMWORD PTR [rsi+rax]	# tmp336, MEM[base: vectp.316_119, index: ivtmp.332_180, offse
 5626      06
 5627 2211 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm2	# MEM[base: vectp.319_125, index: ivtmp.332_180, offset: 0B], 
 5627      1407
 630:sieve_extend.c ****         copy_word++;
 5628              		.loc 1 630 9 is_stmt 1 view .LVU1915
 631:sieve_extend.c ****     }
 5629              		.loc 1 631 9 view .LVU1916
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5630              		.loc 1 628 10 view .LVU1917
 5631 2217 4883C020 		add	rax, 32	# ivtmp.332,
 5632 221b 4C39C0   		cmp	rax, r8	# ivtmp.332, _182
 5633 221e 0F848D00 		je	.L536	#,
 5633      0000
 5634              	.L435:
 629:sieve_extend.c ****         source_word++;
 5635              		.loc 1 629 9 view .LVU1918
 5636              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5637              		.loc 1 629 29 is_stmt 0 view .LVU1919
 5638 2224 C5FD6F1C 		vmovdqa	ymm3, YMMWORD PTR [rsi+rax]	# tmp319, MEM[base: vectp.316_119, index: ivtmp.332_180, offse
 5638      06
 5639 2229 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm3	# MEM[base: vectp.319_125, index: ivtmp.332_180, offset: 0B], 
 5639      1C07
 630:sieve_extend.c ****         copy_word++;
 5640              		.loc 1 630 9 is_stmt 1 view .LVU1920
 631:sieve_extend.c ****     }
 5641              		.loc 1 631 9 view .LVU1921
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5642              		.loc 1 628 10 view .LVU1922
 629:sieve_extend.c ****         source_word++;
 5643              		.loc 1 629 9 view .LVU1923
 5644              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5645              		.loc 1 629 29 is_stmt 0 view .LVU1924
GAS LISTING /tmp/ccBvFgp2.s 			page 162


 5646 222f C57D6F44 		vmovdqa	ymm8, YMMWORD PTR 32[rsi+rax]	# tmp320, MEM[base: vectp.316_119, index: ivtmp.332_180, off
 5646      0620
 5647 2235 C4417E7F 		vmovdqu	YMMWORD PTR 32[r15+rax], ymm8	# MEM[base: vectp.319_125, index: ivtmp.332_180, offset: 0B]
 5647      440720
 630:sieve_extend.c ****         copy_word++;
 5648              		.loc 1 630 9 is_stmt 1 view .LVU1925
 631:sieve_extend.c ****     }
 5649              		.loc 1 631 9 view .LVU1926
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5650              		.loc 1 628 10 view .LVU1927
 629:sieve_extend.c ****         source_word++;
 5651              		.loc 1 629 9 view .LVU1928
 5652              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5653              		.loc 1 629 29 is_stmt 0 view .LVU1929
 5654 223c C57D6F4C 		vmovdqa	ymm9, YMMWORD PTR 64[rsi+rax]	# tmp321, MEM[base: vectp.316_119, index: ivtmp.332_180, off
 5654      0640
 5655 2242 C4417E7F 		vmovdqu	YMMWORD PTR 64[r15+rax], ymm9	# MEM[base: vectp.319_125, index: ivtmp.332_180, offset: 0B]
 5655      4C0740
 630:sieve_extend.c ****         copy_word++;
 5656              		.loc 1 630 9 is_stmt 1 view .LVU1930
 631:sieve_extend.c ****     }
 5657              		.loc 1 631 9 view .LVU1931
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5658              		.loc 1 628 10 view .LVU1932
 629:sieve_extend.c ****         source_word++;
 5659              		.loc 1 629 9 view .LVU1933
 5660              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5661              		.loc 1 629 29 is_stmt 0 view .LVU1934
 5662 2249 C57D6F54 		vmovdqa	ymm10, YMMWORD PTR 96[rsi+rax]	# tmp322, MEM[base: vectp.316_119, index: ivtmp.332_180, of
 5662      0660
 5663 224f C4417E7F 		vmovdqu	YMMWORD PTR 96[r15+rax], ymm10	# MEM[base: vectp.319_125, index: ivtmp.332_180, offset: 0B
 5663      540760
 630:sieve_extend.c ****         copy_word++;
 5664              		.loc 1 630 9 is_stmt 1 view .LVU1935
 631:sieve_extend.c ****     }
 5665              		.loc 1 631 9 view .LVU1936
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5666              		.loc 1 628 10 view .LVU1937
 629:sieve_extend.c ****         source_word++;
 5667              		.loc 1 629 9 view .LVU1938
 5668              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5669              		.loc 1 629 29 is_stmt 0 view .LVU1939
 5670 2256 C57D6F9C 		vmovdqa	ymm11, YMMWORD PTR 128[rsi+rax]	# tmp323, MEM[base: vectp.316_119, index: ivtmp.332_180, o
 5670      06800000 
 5670      00
 5671 225f C4417E7F 		vmovdqu	YMMWORD PTR 128[r15+rax], ymm11	# MEM[base: vectp.319_125, index: ivtmp.332_180, offset: 0
 5671      9C078000 
 5671      0000
 630:sieve_extend.c ****         copy_word++;
 5672              		.loc 1 630 9 is_stmt 1 view .LVU1940
 631:sieve_extend.c ****     }
 5673              		.loc 1 631 9 view .LVU1941
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5674              		.loc 1 628 10 view .LVU1942
GAS LISTING /tmp/ccBvFgp2.s 			page 163


 629:sieve_extend.c ****         source_word++;
 5675              		.loc 1 629 9 view .LVU1943
 5676              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5677              		.loc 1 629 29 is_stmt 0 view .LVU1944
 5678 2269 C57D6FA4 		vmovdqa	ymm12, YMMWORD PTR 160[rsi+rax]	# tmp324, MEM[base: vectp.316_119, index: ivtmp.332_180, o
 5678      06A00000 
 5678      00
 5679 2272 C4417E7F 		vmovdqu	YMMWORD PTR 160[r15+rax], ymm12	# MEM[base: vectp.319_125, index: ivtmp.332_180, offset: 0
 5679      A407A000 
 5679      0000
 630:sieve_extend.c ****         copy_word++;
 5680              		.loc 1 630 9 is_stmt 1 view .LVU1945
 631:sieve_extend.c ****     }
 5681              		.loc 1 631 9 view .LVU1946
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5682              		.loc 1 628 10 view .LVU1947
 629:sieve_extend.c ****         source_word++;
 5683              		.loc 1 629 9 view .LVU1948
 5684              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5685              		.loc 1 629 29 is_stmt 0 view .LVU1949
 5686 227c C57D6FAC 		vmovdqa	ymm13, YMMWORD PTR 192[rsi+rax]	# tmp325, MEM[base: vectp.316_119, index: ivtmp.332_180, o
 5686      06C00000 
 5686      00
 5687 2285 C4417E7F 		vmovdqu	YMMWORD PTR 192[r15+rax], ymm13	# MEM[base: vectp.319_125, index: ivtmp.332_180, offset: 0
 5687      AC07C000 
 5687      0000
 630:sieve_extend.c ****         copy_word++;
 5688              		.loc 1 630 9 is_stmt 1 view .LVU1950
 631:sieve_extend.c ****     }
 5689              		.loc 1 631 9 view .LVU1951
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5690              		.loc 1 628 10 view .LVU1952
 629:sieve_extend.c ****         source_word++;
 5691              		.loc 1 629 9 view .LVU1953
 5692              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5693              		.loc 1 629 29 is_stmt 0 view .LVU1954
 5694 228f C57D6FB4 		vmovdqa	ymm14, YMMWORD PTR 224[rsi+rax]	# tmp326, MEM[base: vectp.316_119, index: ivtmp.332_180, o
 5694      06E00000 
 5694      00
 5695 2298 C4417E7F 		vmovdqu	YMMWORD PTR 224[r15+rax], ymm14	# MEM[base: vectp.319_125, index: ivtmp.332_180, offset: 0
 5695      B407E000 
 5695      0000
 630:sieve_extend.c ****         copy_word++;
 5696              		.loc 1 630 9 is_stmt 1 view .LVU1955
 631:sieve_extend.c ****     }
 5697              		.loc 1 631 9 view .LVU1956
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5698              		.loc 1 628 10 view .LVU1957
 5699 22a2 48050001 		add	rax, 256	# ivtmp.332,
 5699      0000
 5700 22a8 4C39C0   		cmp	rax, r8	# ivtmp.332, _182
 5701 22ab 0F8573FF 		jne	.L435	#,
 5701      FFFF
 5702              	.L536:
GAS LISTING /tmp/ccBvFgp2.s 			page 164


 5703 22b1 4D89D9   		mov	r9, r11	# niters_vector_mult_vf.312, niters.310
 5704 22b4 4983E1FC 		and	r9, -4	# niters_vector_mult_vf.312,
 5705 22b8 4D01CC   		add	r12, r9	# tmp.313, niters_vector_mult_vf.312
 5706 22bb 4D01CE   		add	r14, r9	# tmp.314, niters_vector_mult_vf.312
 5707 22be 4D39CB   		cmp	r11, r9	# niters.310, niters_vector_mult_vf.312
 5708 22c1 7455     		je	.L539	#,
 5709              	.LVL269:
 629:sieve_extend.c ****         source_word++;
 5710              		.loc 1 629 9 view .LVU1958
 5711              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5712              		.loc 1 629 39 is_stmt 0 view .LVU1959
 5713 22c3 4B8B4CE5 		mov	rcx, QWORD PTR 0[r13+r12*8]	# _37, *_21
 5713      00
 5714              	# sieve_extend.c:631:         copy_word++;
 631:sieve_extend.c ****     }
 5715              		.loc 1 631 18 view .LVU1960
 5716 22c8 4D8D5601 		lea	r10, 1[r14]	# copy_word,
 5717              	# sieve_extend.c:630:         source_word++;
 630:sieve_extend.c ****         copy_word++;
 5718              		.loc 1 630 20 view .LVU1961
 5719 22cc 4983C401 		add	r12, 1	# source_word,
 5720              	.LVL270:
 5721              	# sieve_extend.c:628:    while (copy_word < destination_stop_word) {
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5722              		.loc 1 628 10 view .LVU1962
 5723 22d0 4C39D3   		cmp	rbx, r10	# destination_stop_word, copy_word
 5724              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5725              		.loc 1 629 29 view .LVU1963
 5726 22d3 4B894CF5 		mov	QWORD PTR 0[r13+r14*8], rcx	# *_23, _37
 5726      00
 630:sieve_extend.c ****         copy_word++;
 5727              		.loc 1 630 9 is_stmt 1 view .LVU1964
 5728              	.LVL271:
 631:sieve_extend.c ****     }
 5729              		.loc 1 631 9 view .LVU1965
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5730              		.loc 1 628 10 view .LVU1966
 5731 22d8 763E     		jbe	.L539	#,
 629:sieve_extend.c ****         source_word++;
 5732              		.loc 1 629 9 view .LVU1967
 5733              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5734              		.loc 1 629 39 is_stmt 0 view .LVU1968
 5735 22da 4E8D1CE5 		lea	r11, 0[0+r12*8]	# _134,
 5735      00000000 
 5736              	# sieve_extend.c:631:         copy_word++;
 631:sieve_extend.c ****     }
 5737              		.loc 1 631 18 view .LVU1969
 5738 22e2 4983C602 		add	r14, 2	# copy_word,
 5739              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5740              		.loc 1 629 39 view .LVU1970
 5741 22e6 4F8B64E5 		mov	r12, QWORD PTR 0[r13+r12*8]	# _138, *_135
 5741      00
 5742              	# sieve_extend.c:628:    while (copy_word < destination_stop_word) {
GAS LISTING /tmp/ccBvFgp2.s 			page 165


 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5743              		.loc 1 628 10 view .LVU1971
 5744 22eb 4C39F3   		cmp	rbx, r14	# destination_stop_word, copy_word
 5745              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5746              		.loc 1 629 29 view .LVU1972
 5747 22ee 4F8964D5 		mov	QWORD PTR 0[r13+r10*8], r12	# *_137, _138
 5747      00
 630:sieve_extend.c ****         copy_word++;
 5748              		.loc 1 630 9 is_stmt 1 view .LVU1973
 631:sieve_extend.c ****     }
 5749              		.loc 1 631 9 view .LVU1974
 5750              	.LVL272:
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5751              		.loc 1 628 10 view .LVU1975
 5752 22f3 7623     		jbe	.L539	#,
 629:sieve_extend.c ****         source_word++;
 5753              		.loc 1 629 9 view .LVU1976
 5754              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5755              		.loc 1 629 39 is_stmt 0 view .LVU1977
 5756 22f5 4B8B5C1D 		mov	rbx, QWORD PTR 8[r13+r11]	# _109, *_106
 5756      08
 5757              	.LVL273:
 5758              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5759              		.loc 1 629 29 view .LVU1978
 5760 22fa 4B895CF5 		mov	QWORD PTR 0[r13+r14*8], rbx	# *_108, _109
 5760      00
 630:sieve_extend.c ****         copy_word++;
 5761              		.loc 1 630 9 is_stmt 1 view .LVU1979
 631:sieve_extend.c ****     }
 5762              		.loc 1 631 9 view .LVU1980
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5763              		.loc 1 628 10 view .LVU1981
 5764 22ff C5F877   		vzeroupper
 5765              	.LVL274:
 5766              	.L540:
 5767              	# sieve_extend.c:634: }
 634:sieve_extend.c **** 
 5768              		.loc 1 634 1 is_stmt 0 view .LVU1982
 5769 2302 488D65D8 		lea	rsp, -40[rbp]	#,
 5770 2306 5B       		pop	rbx	#
 5771 2307 415C     		pop	r12	#
 5772 2309 415D     		pop	r13	#
 5773 230b 415E     		pop	r14	#
 5774 230d 415F     		pop	r15	#
 5775 230f 5D       		pop	rbp	#
 5776              		.cfi_remember_state
 5777              		.cfi_def_cfa 7, 8
 5778 2310 C3       		ret	
 5779              	.LVL275:
 5780              		.p2align 4,,7
 5781 2311 0F1F8000 		.p2align 3
 5781      000000
 5782              	.L539:
 5783              		.cfi_restore_state
GAS LISTING /tmp/ccBvFgp2.s 			page 166


 634:sieve_extend.c **** 
 5784              		.loc 1 634 1 view .LVU1983
 5785 2318 C5F877   		vzeroupper
 5786 231b 488D65D8 		lea	rsp, -40[rbp]	#,
 5787 231f 5B       		pop	rbx	#
 5788              	.LVL276:
 634:sieve_extend.c **** 
 5789              		.loc 1 634 1 view .LVU1984
 5790 2320 415C     		pop	r12	#
 5791 2322 415D     		pop	r13	#
 5792              	.LVL277:
 634:sieve_extend.c **** 
 5793              		.loc 1 634 1 view .LVU1985
 5794 2324 415E     		pop	r14	#
 5795 2326 415F     		pop	r15	#
 5796 2328 5D       		pop	rbp	#
 5797              		.cfi_remember_state
 5798              		.cfi_def_cfa 7, 8
 5799 2329 C3       		ret	
 5800              	.LVL278:
 5801 232a 660F1F44 		.p2align 4,,7
 5801      0000
 5802              		.p2align 3
 5803              	.L432:
 5804              		.cfi_restore_state
 5805              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5806              		.loc 1 629 39 view .LVU1986
 5807 2330 488B7C24 		mov	rdi, QWORD PTR 8[rsp]	# source_word, %sfp
 5807      08
 5808 2335 4F8D7425 		lea	r14, 0[r13+r12]	# ivtmp.327,
 5808      00
 5809 233a 4D8D6CDD 		lea	r13, 0[r13+rbx*8]	# _179,
 5809      00
 5810              	.LVL279:
 629:sieve_extend.c ****         source_word++;
 5811              		.loc 1 629 39 view .LVU1987
 5812 233f 4C89EE   		mov	rsi, r13	# tmp221, _179
 5813 2342 4C29F6   		sub	rsi, r14	# tmp221, ivtmp.327
 5814 2345 4829C7   		sub	rdi, rax	# source_word, ivtmp.341
 5815 2348 4883EE08 		sub	rsi, 8	# tmp222,
 5816 234c 48C1EE03 		shr	rsi, 3	# tmp220,
 5817 2350 4883C601 		add	rsi, 1	# tmp223,
 5818 2354 83E607   		and	esi, 7	# tmp224,
 5819 2357 0F848100 		je	.L437	#,
 5819      0000
 5820 235d 4883FE01 		cmp	rsi, 1	# tmp224,
 5821 2361 7466     		je	.L505	#,
 5822 2363 4883FE02 		cmp	rsi, 2	# tmp224,
 5823 2367 7454     		je	.L506	#,
 5824 2369 4883FE03 		cmp	rsi, 3	# tmp224,
 5825 236d 7442     		je	.L507	#,
 5826 236f 4883FE04 		cmp	rsi, 4	# tmp224,
 5827 2373 7430     		je	.L508	#,
 5828 2375 4883FE05 		cmp	rsi, 5	# tmp224,
 5829 2379 741E     		je	.L509	#,
 5830 237b 4883FE06 		cmp	rsi, 6	# tmp224,
GAS LISTING /tmp/ccBvFgp2.s 			page 167


 5831 237f 740C     		je	.L510	#,
 5832              	.LVL280:
 629:sieve_extend.c ****         source_word++;
 5833              		.loc 1 629 9 is_stmt 1 view .LVU1988
 5834              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5835              		.loc 1 629 39 is_stmt 0 view .LVU1989
 5836 2381 4D8B3CFE 		mov	r15, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 5837 2385 4983C608 		add	r14, 8	# ivtmp.327,
 5838              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5839              		.loc 1 629 29 view .LVU1990
 5840 2389 4D897EF8 		mov	QWORD PTR -8[r14], r15	# MEM[base: _174, offset: 0B], _70
 630:sieve_extend.c ****         copy_word++;
 5841              		.loc 1 630 9 is_stmt 1 view .LVU1991
 631:sieve_extend.c ****     }
 5842              		.loc 1 631 9 view .LVU1992
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5843              		.loc 1 628 10 view .LVU1993
 5844              	.L510:
 629:sieve_extend.c ****         source_word++;
 5845              		.loc 1 629 9 view .LVU1994
 5846              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5847              		.loc 1 629 39 is_stmt 0 view .LVU1995
 5848 238d 4D8B04FE 		mov	r8, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 5849 2391 4983C608 		add	r14, 8	# ivtmp.327,
 5850              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5851              		.loc 1 629 29 view .LVU1996
 5852 2395 4D8946F8 		mov	QWORD PTR -8[r14], r8	# MEM[base: _174, offset: 0B], _70
 630:sieve_extend.c ****         copy_word++;
 5853              		.loc 1 630 9 is_stmt 1 view .LVU1997
 631:sieve_extend.c ****     }
 5854              		.loc 1 631 9 view .LVU1998
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5855              		.loc 1 628 10 view .LVU1999
 5856              	.L509:
 629:sieve_extend.c ****         source_word++;
 5857              		.loc 1 629 9 view .LVU2000
 5858              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5859              		.loc 1 629 39 is_stmt 0 view .LVU2001
 5860 2399 498B14FE 		mov	rdx, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 5861 239d 4983C608 		add	r14, 8	# ivtmp.327,
 5862              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5863              		.loc 1 629 29 view .LVU2002
 5864 23a1 498956F8 		mov	QWORD PTR -8[r14], rdx	# MEM[base: _174, offset: 0B], _70
 630:sieve_extend.c ****         copy_word++;
 5865              		.loc 1 630 9 is_stmt 1 view .LVU2003
 631:sieve_extend.c ****     }
 5866              		.loc 1 631 9 view .LVU2004
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5867              		.loc 1 628 10 view .LVU2005
 5868              	.L508:
 629:sieve_extend.c ****         source_word++;
GAS LISTING /tmp/ccBvFgp2.s 			page 168


 5869              		.loc 1 629 9 view .LVU2006
 5870              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5871              		.loc 1 629 39 is_stmt 0 view .LVU2007
 5872 23a5 498B04FE 		mov	rax, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 5873 23a9 4983C608 		add	r14, 8	# ivtmp.327,
 5874              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5875              		.loc 1 629 29 view .LVU2008
 5876 23ad 498946F8 		mov	QWORD PTR -8[r14], rax	# MEM[base: _174, offset: 0B], _70
 630:sieve_extend.c ****         copy_word++;
 5877              		.loc 1 630 9 is_stmt 1 view .LVU2009
 631:sieve_extend.c ****     }
 5878              		.loc 1 631 9 view .LVU2010
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5879              		.loc 1 628 10 view .LVU2011
 5880              	.L507:
 629:sieve_extend.c ****         source_word++;
 5881              		.loc 1 629 9 view .LVU2012
 5882              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5883              		.loc 1 629 39 is_stmt 0 view .LVU2013
 5884 23b1 4D8B0CFE 		mov	r9, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 5885 23b5 4983C608 		add	r14, 8	# ivtmp.327,
 5886              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5887              		.loc 1 629 29 view .LVU2014
 5888 23b9 4D894EF8 		mov	QWORD PTR -8[r14], r9	# MEM[base: _174, offset: 0B], _70
 630:sieve_extend.c ****         copy_word++;
 5889              		.loc 1 630 9 is_stmt 1 view .LVU2015
 631:sieve_extend.c ****     }
 5890              		.loc 1 631 9 view .LVU2016
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5891              		.loc 1 628 10 view .LVU2017
 5892              	.L506:
 629:sieve_extend.c ****         source_word++;
 5893              		.loc 1 629 9 view .LVU2018
 5894              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5895              		.loc 1 629 39 is_stmt 0 view .LVU2019
 5896 23bd 498B0CFE 		mov	rcx, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 5897 23c1 4983C608 		add	r14, 8	# ivtmp.327,
 5898              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5899              		.loc 1 629 29 view .LVU2020
 5900 23c5 49894EF8 		mov	QWORD PTR -8[r14], rcx	# MEM[base: _174, offset: 0B], _70
 630:sieve_extend.c ****         copy_word++;
 5901              		.loc 1 630 9 is_stmt 1 view .LVU2021
 631:sieve_extend.c ****     }
 5902              		.loc 1 631 9 view .LVU2022
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5903              		.loc 1 628 10 view .LVU2023
 5904              	.L505:
 629:sieve_extend.c ****         source_word++;
 5905              		.loc 1 629 9 view .LVU2024
 5906              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
GAS LISTING /tmp/ccBvFgp2.s 			page 169


 5907              		.loc 1 629 39 is_stmt 0 view .LVU2025
 5908 23c9 4D8B14FE 		mov	r10, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 5909 23cd 4983C608 		add	r14, 8	# ivtmp.327,
 5910              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5911              		.loc 1 629 29 view .LVU2026
 5912 23d1 4D8956F8 		mov	QWORD PTR -8[r14], r10	# MEM[base: _174, offset: 0B], _70
 630:sieve_extend.c ****         copy_word++;
 5913              		.loc 1 630 9 is_stmt 1 view .LVU2027
 631:sieve_extend.c ****     }
 5914              		.loc 1 631 9 view .LVU2028
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5915              		.loc 1 628 10 view .LVU2029
 5916 23d5 4D39EE   		cmp	r14, r13	# ivtmp.327, _179
 5917 23d8 0F8424FF 		je	.L540	#,
 5917      FFFF
 5918              	.LVL281:
 5919              	.L437:
 629:sieve_extend.c ****         source_word++;
 5920              		.loc 1 629 9 view .LVU2030
 5921              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5922              		.loc 1 629 39 is_stmt 0 view .LVU2031
 5923 23de 4D8B1CFE 		mov	r11, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 5924              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5925              		.loc 1 629 29 view .LVU2032
 5926 23e2 4D891E   		mov	QWORD PTR [r14], r11	# MEM[base: _174, offset: 0B], _70
 630:sieve_extend.c ****         copy_word++;
 5927              		.loc 1 630 9 is_stmt 1 view .LVU2033
 631:sieve_extend.c ****     }
 5928              		.loc 1 631 9 view .LVU2034
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5929              		.loc 1 628 10 view .LVU2035
 629:sieve_extend.c ****         source_word++;
 5930              		.loc 1 629 9 view .LVU2036
 5931              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5932              		.loc 1 629 39 is_stmt 0 view .LVU2037
 5933 23e5 4D8B64FE 		mov	r12, QWORD PTR 8[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 5933      08
 5934              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5935              		.loc 1 629 29 view .LVU2038
 5936 23ea 4D896608 		mov	QWORD PTR 8[r14], r12	# MEM[base: _174, offset: 0B], _70
 630:sieve_extend.c ****         copy_word++;
 5937              		.loc 1 630 9 is_stmt 1 view .LVU2039
 631:sieve_extend.c ****     }
 5938              		.loc 1 631 9 view .LVU2040
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5939              		.loc 1 628 10 view .LVU2041
 629:sieve_extend.c ****         source_word++;
 5940              		.loc 1 629 9 view .LVU2042
 5941              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5942              		.loc 1 629 39 is_stmt 0 view .LVU2043
 5943 23ee 498B5CFE 		mov	rbx, QWORD PTR 16[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
GAS LISTING /tmp/ccBvFgp2.s 			page 170


 5943      10
 5944              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5945              		.loc 1 629 29 view .LVU2044
 5946 23f3 49895E10 		mov	QWORD PTR 16[r14], rbx	# MEM[base: _174, offset: 0B], _70
 630:sieve_extend.c ****         copy_word++;
 5947              		.loc 1 630 9 is_stmt 1 view .LVU2045
 631:sieve_extend.c ****     }
 5948              		.loc 1 631 9 view .LVU2046
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5949              		.loc 1 628 10 view .LVU2047
 629:sieve_extend.c ****         source_word++;
 5950              		.loc 1 629 9 view .LVU2048
 5951              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5952              		.loc 1 629 39 is_stmt 0 view .LVU2049
 5953 23f7 498B74FE 		mov	rsi, QWORD PTR 24[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 5953      18
 5954              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5955              		.loc 1 629 29 view .LVU2050
 5956 23fc 49897618 		mov	QWORD PTR 24[r14], rsi	# MEM[base: _174, offset: 0B], _70
 630:sieve_extend.c ****         copy_word++;
 5957              		.loc 1 630 9 is_stmt 1 view .LVU2051
 631:sieve_extend.c ****     }
 5958              		.loc 1 631 9 view .LVU2052
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5959              		.loc 1 628 10 view .LVU2053
 629:sieve_extend.c ****         source_word++;
 5960              		.loc 1 629 9 view .LVU2054
 5961              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5962              		.loc 1 629 39 is_stmt 0 view .LVU2055
 5963 2400 4D8B7CFE 		mov	r15, QWORD PTR 32[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 5963      20
 5964              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5965              		.loc 1 629 29 view .LVU2056
 5966 2405 4D897E20 		mov	QWORD PTR 32[r14], r15	# MEM[base: _174, offset: 0B], _70
 630:sieve_extend.c ****         copy_word++;
 5967              		.loc 1 630 9 is_stmt 1 view .LVU2057
 631:sieve_extend.c ****     }
 5968              		.loc 1 631 9 view .LVU2058
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5969              		.loc 1 628 10 view .LVU2059
 629:sieve_extend.c ****         source_word++;
 5970              		.loc 1 629 9 view .LVU2060
 5971              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5972              		.loc 1 629 39 is_stmt 0 view .LVU2061
 5973 2409 4D8B44FE 		mov	r8, QWORD PTR 40[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 5973      28
 5974              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5975              		.loc 1 629 29 view .LVU2062
 5976 240e 4D894628 		mov	QWORD PTR 40[r14], r8	# MEM[base: _174, offset: 0B], _70
 630:sieve_extend.c ****         copy_word++;
GAS LISTING /tmp/ccBvFgp2.s 			page 171


 5977              		.loc 1 630 9 is_stmt 1 view .LVU2063
 631:sieve_extend.c ****     }
 5978              		.loc 1 631 9 view .LVU2064
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5979              		.loc 1 628 10 view .LVU2065
 629:sieve_extend.c ****         source_word++;
 5980              		.loc 1 629 9 view .LVU2066
 5981              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5982              		.loc 1 629 39 is_stmt 0 view .LVU2067
 5983 2412 498B54FE 		mov	rdx, QWORD PTR 48[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 5983      30
 5984              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5985              		.loc 1 629 29 view .LVU2068
 5986 2417 49895630 		mov	QWORD PTR 48[r14], rdx	# MEM[base: _174, offset: 0B], _70
 630:sieve_extend.c ****         copy_word++;
 5987              		.loc 1 630 9 is_stmt 1 view .LVU2069
 631:sieve_extend.c ****     }
 5988              		.loc 1 631 9 view .LVU2070
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5989              		.loc 1 628 10 view .LVU2071
 629:sieve_extend.c ****         source_word++;
 5990              		.loc 1 629 9 view .LVU2072
 5991              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5992              		.loc 1 629 39 is_stmt 0 view .LVU2073
 5993 241b 498B44FE 		mov	rax, QWORD PTR 56[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 5993      38
 5994 2420 4983C640 		add	r14, 64	# ivtmp.327,
 5995              	# sieve_extend.c:629:         bitarray[copy_word] = bitarray[source_word];
 629:sieve_extend.c ****         source_word++;
 5996              		.loc 1 629 29 view .LVU2074
 5997 2424 498946F8 		mov	QWORD PTR -8[r14], rax	# MEM[base: _174, offset: 0B], _70
 630:sieve_extend.c ****         copy_word++;
 5998              		.loc 1 630 9 is_stmt 1 view .LVU2075
 631:sieve_extend.c ****     }
 5999              		.loc 1 631 9 view .LVU2076
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6000              		.loc 1 628 10 view .LVU2077
 6001 2428 4D39EE   		cmp	r14, r13	# ivtmp.327, _179
 6002 242b 75B1     		jne	.L437	#,
 6003 242d E9D0FEFF 		jmp	.L540	#
 6003      FF
 6004              	.LVL282:
 6005              		.p2align 4,,7
 6006 2432 660F1F44 		.p2align 3
 6006      0000
 6007              	.L439:
 6008              	# sieve_extend.c:618:     counter_t source_word = wordindex(source_start);
 618:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
 6009              		.loc 1 618 15 is_stmt 0 view .LVU2078
 6010 2438 4C8B6424 		mov	r12, QWORD PTR 8[rsp]	# source_word, %sfp
 6010      08
 6011              	# sieve_extend.c:628:    while (copy_word < destination_stop_word) {
 628:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6012              		.loc 1 628 10 view .LVU2079
GAS LISTING /tmp/ccBvFgp2.s 			page 172


 6013 243d 4989C6   		mov	r14, rax	# copy_word, ivtmp.341
 6014 2440 E90AFDFF 		jmp	.L433	#
 6014      FF
 6015              		.cfi_endproc
 6016              	.LFE66:
 6018 2445 66662E0F 		.p2align 4
 6018      1F840000 
 6018      000000
 6020              	extendSieve_shiftleft:
 6021              	.LVL283:
 6022              	.LFB72:
 874:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 6023              		.loc 1 874 142 is_stmt 1 view -0
 6024              		.cfi_startproc
 875:sieve_extend.c **** 
 6025              		.loc 1 875 5 view .LVU2081
 877:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 6026              		.loc 1 877 5 view .LVU2082
 6027              	# sieve_extend.c:874: static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source
 874:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 6028              		.loc 1 874 142 is_stmt 0 view .LVU2083
 6029 2450 55       		push	rbp	#
 6030              		.cfi_def_cfa_offset 16
 6031              		.cfi_offset 6, -16
 6032              	# sieve_extend.c:877:     const counter_t destination_stop_word = wordindex(destination_stop);
 877:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 6033              		.loc 1 877 21 view .LVU2084
 6034 2451 48C1E906 		shr	rcx, 6	# tmp1219,
 6035              	.LVL284:
 6036              	# sieve_extend.c:874: static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source
 874:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 6037              		.loc 1 874 142 view .LVU2085
 6038 2455 4989D2   		mov	r10, rdx	# size, tmp1218
 6039 2458 4889E5   		mov	rbp, rsp	#,
 6040              		.cfi_def_cfa_register 6
 6041 245b 4157     		push	r15	#
 6042 245d 4156     		push	r14	#
 6043              		.cfi_offset 15, -24
 6044              		.cfi_offset 14, -32
 6045              	# sieve_extend.c:877:     const counter_t destination_stop_word = wordindex(destination_stop);
 877:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 6046              		.loc 1 877 21 view .LVU2086
 6047 245f 4989CE   		mov	r14, rcx	# destination_stop_word, tmp1219
 6048              	# sieve_extend.c:874: static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source
 874:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 6049              		.loc 1 874 142 view .LVU2087
 6050 2462 4155     		push	r13	#
 6051 2464 4154     		push	r12	#
 6052 2466 53       		push	rbx	#
 6053              		.cfi_offset 13, -40
 6054              		.cfi_offset 12, -48
 6055              		.cfi_offset 3, -56
 6056 2467 4889FB   		mov	rbx, rdi	# bitarray, tmp1216
 6057              	# sieve_extend.c:878:     const counter_t copy_start = source_start + size;
 878:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_calc(copy_start);
 6058              		.loc 1 878 21 view .LVU2088
 6059 246a 488D3C16 		lea	rdi, [rsi+rdx]	# copy_start,
GAS LISTING /tmp/ccBvFgp2.s 			page 173


 6060              	.LVL285:
 6061              	# sieve_extend.c:874: static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source
 874:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 6062              		.loc 1 874 142 view .LVU2089
 6063 246e 4883E4E0 		and	rsp, -32	#,
 6064              	# sieve_extend.c:879:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 879:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 6065              		.loc 1 879 69 view .LVU2090
 6066 2472 4889F8   		mov	rax, rdi	# _5, copy_start
 6067              	# sieve_extend.c:874: static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source
 874:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 6068              		.loc 1 874 142 view .LVU2091
 6069 2475 488D6424 		lea	rsp, -96[rsp]	#,
 6069      A0
 6070              	# sieve_extend.c:882:     register counter_t copy_word = wordindex(copy_start);
 882:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 6071              		.loc 1 882 24 view .LVU2092
 6072 247a 4989FB   		mov	r11, rdi	# copy_word, copy_start
 6073              	# sieve_extend.c:877:     const counter_t destination_stop_word = wordindex(destination_stop);
 877:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 6074              		.loc 1 877 21 view .LVU2093
 6075 247d 48894C24 		mov	QWORD PTR 80[rsp], rcx	# %sfp, destination_stop_word
 6075      50
 6076              	.LVL286:
 878:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_calc(copy_start);
 6077              		.loc 1 878 5 is_stmt 1 view .LVU2094
 879:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 6078              		.loc 1 879 5 view .LVU2095
 6079              	# sieve_extend.c:879:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 879:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 6080              		.loc 1 879 39 is_stmt 0 view .LVU2096
 6081 2482 4889F1   		mov	rcx, rsi	# _4, source_start
 6082              	.LVL287:
 6083              	# sieve_extend.c:881:     register counter_t source_word = wordindex(source_start);
 881:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 6084              		.loc 1 881 24 view .LVU2097
 6085 2485 48C1EE06 		shr	rsi, 6	# source_start,
 6086              	.LVL288:
 6087              	# sieve_extend.c:879:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 879:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 6088              		.loc 1 879 39 view .LVU2098
 6089 2489 83E13F   		and	ecx, 63	# _4,
 6090              	.LVL289:
 6091              	# sieve_extend.c:881:     register counter_t source_word = wordindex(source_start);
 881:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 6092              		.loc 1 881 24 view .LVU2099
 6093 248c 4989F0   		mov	r8, rsi	# source_word, source_start
 6094              	# sieve_extend.c:879:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 879:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 6095              		.loc 1 879 69 view .LVU2100
 6096 248f 83E03F   		and	eax, 63	# _5,
 6097              	.LVL290:
 880:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 6098              		.loc 1 880 5 is_stmt 1 view .LVU2101
 881:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 6099              		.loc 1 881 5 view .LVU2102
 882:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
GAS LISTING /tmp/ccBvFgp2.s 			page 174


 6100              		.loc 1 882 5 view .LVU2103
 6101              	# sieve_extend.c:882:     register counter_t copy_word = wordindex(copy_start);
 882:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 6102              		.loc 1 882 24 is_stmt 0 view .LVU2104
 6103 2492 49C1EB06 		shr	r11, 6	# copy_word,
 6104              	.LVL291:
 883:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 6105              		.loc 1 883 5 is_stmt 1 view .LVU2105
 6106              	# sieve_extend.c:884:                              | (bitarray[source_word+1] << shift_flipped))
 884:sieve_extend.c ****                              & ~chopmask(copy_start); // because this is the first word, dont copy 
 6107              		.loc 1 884 41 is_stmt 0 view .LVU2106
 6108 2496 4D8D4801 		lea	r9, 1[r8]	# _183,
 6109              	# sieve_extend.c:879:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 879:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 6110              		.loc 1 879 31 view .LVU2107
 6111 249a 4989CD   		mov	r13, rcx	# shift, _4
 6112              	# sieve_extend.c:883:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 883:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 6113              		.loc 1 883 25 view .LVU2108
 6114 249d 4A8D34DD 		lea	rsi, 0[0+r11*8]	# _6,
 6114      00000000 
 6115              	# sieve_extend.c:884:                              | (bitarray[source_word+1] << shift_flipped))
 884:sieve_extend.c ****                              & ~chopmask(copy_start); // because this is the first word, dont copy 
 6116              		.loc 1 884 41 view .LVU2109
 6117 24a5 4C894C24 		mov	QWORD PTR 88[rsp], r9	# %sfp, _183
 6117      58
 6118              	# sieve_extend.c:879:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 879:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 6119              		.loc 1 879 31 view .LVU2110
 6120 24aa 4929C5   		sub	r13, rax	# shift, _5
 6121              	.LVL292:
 6122              	# sieve_extend.c:890:     const counter_t aligned_copy_word = min(source_word + size, destination_s
 890:sieve_extend.c ****     const counter_t distance  = extendSieve_shiftleft_unrolled(bitarray, aligned_copy_word, shift, 
 6123              		.loc 1 890 41 view .LVU2111
 6124 24ad 4D01D1   		add	r9, r10	# tmp555, size
 6125              	# sieve_extend.c:880:     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 880:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 6126              		.loc 1 880 31 view .LVU2112
 6127 24b0 4829C8   		sub	rax, rcx	# tmp542, _4
 6128              	.LVL293:
 6129              	# sieve_extend.c:874: static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source
 874:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 6130              		.loc 1 874 142 view .LVU2113
 6131 24b3 48895424 		mov	QWORD PTR 24[rsp], rdx	# %sfp, size
 6131      18
 6132              	# sieve_extend.c:880:     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 880:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 6133              		.loc 1 880 31 view .LVU2114
 6134 24b8 4C8D7840 		lea	r15, 64[rax]	# shift_flipped,
 6135              	.LVL294:
 6136              	# sieve_extend.c:883:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 883:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 6137              		.loc 1 883 52 view .LVU2115
 6138 24bc 4A8B0CC3 		mov	rcx, QWORD PTR [rbx+r8*8]	# *_10, *_10
 6139              	# sieve_extend.c:883:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 883:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 6140              		.loc 1 883 38 view .LVU2116
GAS LISTING /tmp/ccBvFgp2.s 			page 175


 6141 24c0 4A8D14C5 		lea	rdx, 0[0+r8*8]	# _9,
 6141      00000000 
 6142              	.LVL295:
 6143              	# sieve_extend.c:885:                              & ~chopmask(copy_start); // because this is the 
 885:sieve_extend.c **** 
 6144              		.loc 1 885 33 view .LVU2117
 6145 24c8 F7D7     		not	edi	# tmp549
 6146              	.LVL296:
 6147              	# sieve_extend.c:884:                              | (bitarray[source_word+1] << shift_flipped))
 884:sieve_extend.c ****                              & ~chopmask(copy_start); // because this is the first word, dont copy 
 6148              		.loc 1 884 57 view .LVU2118
 6149 24ca C4E281F7 		shlx	rax, QWORD PTR 8[rbx+rdx], r15	# tmp544, *_16, shift_flipped
 6149      441308
 6150              	# sieve_extend.c:883:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 883:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 6151              		.loc 1 883 52 view .LVU2119
 6152 24d1 C46293F7 		shrx	r8, rcx, r13	# tmp546, *_10, shift
 6152      C1
 6153              	# sieve_extend.c:884:                              | (bitarray[source_word+1] << shift_flipped))
 884:sieve_extend.c ****                              & ~chopmask(copy_start); // because this is the first word, dont copy 
 6154              		.loc 1 884 30 view .LVU2120
 6155 24d6 4909C0   		or	r8, rax	# tmp548, tmp544
 6156              	# sieve_extend.c:885:                              & ~chopmask(copy_start); // because this is the 
 885:sieve_extend.c **** 
 6157              		.loc 1 885 33 view .LVU2121
 6158 24d9 48C7C0FF 		mov	rax, -1	# tmp552,
 6158      FFFFFF
 6159 24e0 C4E2C3F7 		shrx	rdi, rax, rdi	# tmp551, tmp552, tmp549
 6159      F8
 6160              	# sieve_extend.c:885:                              & ~chopmask(copy_start); // because this is the 
 885:sieve_extend.c **** 
 6161              		.loc 1 885 30 view .LVU2122
 6162 24e5 C4C2C0F2 		andn	rcx, rdi, r8	# tmp554, tmp551, tmp548
 6162      C8
 6163              	# sieve_extend.c:883:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 883:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 6164              		.loc 1 883 25 view .LVU2123
 6165 24ea 48090C33 		or	QWORD PTR [rbx+rsi], rcx	# *_7, tmp554
 887:sieve_extend.c ****     source_word++;
 6166              		.loc 1 887 5 is_stmt 1 view .LVU2124
 6167              	# sieve_extend.c:890:     const counter_t aligned_copy_word = min(source_word + size, destination_s
 890:sieve_extend.c ****     const counter_t distance  = extendSieve_shiftleft_unrolled(bitarray, aligned_copy_word, shift, 
 6168              		.loc 1 890 21 is_stmt 0 view .LVU2125
 6169 24ee 4D39F1   		cmp	r9, r14	# tmp555, destination_stop_word
 6170              	# sieve_extend.c:887:     copy_word++;
 887:sieve_extend.c ****     source_word++;
 6171              		.loc 1 887 14 view .LVU2126
 6172 24f1 498D4301 		lea	rax, 1[r11]	# ivtmp.425,
 6173              	.LVL297:
 888:sieve_extend.c **** 
 6174              		.loc 1 888 5 is_stmt 1 view .LVU2127
 890:sieve_extend.c ****     const counter_t distance  = extendSieve_shiftleft_unrolled(bitarray, aligned_copy_word, shift, 
 6175              		.loc 1 890 5 view .LVU2128
 6176              	# sieve_extend.c:884:                              | (bitarray[source_word+1] << shift_flipped))
 884:sieve_extend.c ****                              & ~chopmask(copy_start); // because this is the first word, dont copy 
 6177              		.loc 1 884 57 is_stmt 0 view .LVU2129
 6178 24f5 44897C24 		mov	DWORD PTR 72[rsp], r15d	# %sfp, shift_flipped
GAS LISTING /tmp/ccBvFgp2.s 			page 176


 6178      48
 6179              	# sieve_extend.c:883:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 883:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 6180              		.loc 1 883 52 view .LVU2130
 6181 24fa 4589EC   		mov	r12d, r13d	# _12, shift
 6182              	# sieve_extend.c:890:     const counter_t aligned_copy_word = min(source_word + size, destination_s
 890:sieve_extend.c ****     const counter_t distance  = extendSieve_shiftleft_unrolled(bitarray, aligned_copy_word, shift, 
 6183              		.loc 1 890 21 view .LVU2131
 6184 24fd 4D0F47CE 		cmova	r9, r14	# tmp555,, tmp555, destination_stop_word
 6185              	.LBB357:
 6186              	.LBB358:
 6187              	# sieve_extend.c:731:     const counter_t fast_loop_stop_word = (aligned_copy_word>2) ? (aligned_co
 731:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 6188              		.loc 1 731 91 view .LVU2132
 6189 2501 41BE0200 		mov	r14d, 2	# tmp556,
 6189      0000
 6190              	.LVL298:
 731:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 6191              		.loc 1 731 91 view .LVU2133
 6192              	.LBE358:
 6193              	.LBE357:
 6194              	# sieve_extend.c:890:     const counter_t aligned_copy_word = min(source_word + size, destination_s
 890:sieve_extend.c ****     const counter_t distance  = extendSieve_shiftleft_unrolled(bitarray, aligned_copy_word, shift, 
 6195              		.loc 1 890 21 view .LVU2134
 6196 2507 4C894C24 		mov	QWORD PTR 64[rsp], r9	# %sfp, aligned_copy_word
 6196      40
 6197              	.LVL299:
 891:sieve_extend.c ****     source_word += distance;
 6198              		.loc 1 891 5 is_stmt 1 view .LVU2135
 6199              	.LBB383:
 6200              	.LBI357:
 730:sieve_extend.c ****     const counter_t fast_loop_stop_word = (aligned_copy_word>2) ? (aligned_copy_word - 2) : 0; // s
 6201              		.loc 1 730 25 view .LVU2136
 6202              	.LBB380:
 731:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 6203              		.loc 1 731 5 view .LVU2137
 6204              	# sieve_extend.c:731:     const counter_t fast_loop_stop_word = (aligned_copy_word>2) ? (aligned_co
 731:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 6205              		.loc 1 731 91 is_stmt 0 view .LVU2138
 6206 250c 4983F902 		cmp	r9, 2	# aligned_copy_word,
 6207 2510 4D0F43F1 		cmovnb	r14, r9	# aligned_copy_word,, _86
 6208              	# sieve_extend.c:731:     const counter_t fast_loop_stop_word = (aligned_copy_word>2) ? (aligned_co
 731:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 6209              		.loc 1 731 21 view .LVU2139
 6210 2514 4D8D46FE 		lea	r8, -2[r14]	# fast_loop_stop_word,
 6211 2518 4C894424 		mov	QWORD PTR 48[rsp], r8	# %sfp, fast_loop_stop_word
 6211      30
 6212              	.LVL300:
 732:sieve_extend.c ****     counter_t distance = 0;
 6213              		.loc 1 732 5 is_stmt 1 view .LVU2140
 733:sieve_extend.c ****     while (copy_word < fast_loop_stop_word) {
 6214              		.loc 1 733 5 view .LVU2141
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6215              		.loc 1 734 5 view .LVU2142
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6216              		.loc 1 734 11 view .LVU2143
 6217 251d 4C39C0   		cmp	rax, r8	# ivtmp.425, fast_loop_stop_word
GAS LISTING /tmp/ccBvFgp2.s 			page 177


 6218 2520 0F83A404 		jnb	.L543	#,
 6218      0000
 6219 2526 4C8D5240 		lea	r10, 64[rdx]	# tmp559,
 6220              	.LVL301:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6221              		.loc 1 734 11 is_stmt 0 view .LVU2144
 6222 252a 4D29DE   		sub	r14, r11	# tmp557, copy_word
 6223 252d 4C8D4610 		lea	r8, 16[rsi]	# tmp560,
 6224              	.LVL302:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6225              		.loc 1 734 11 view .LVU2145
 6226 2531 498D7EFC 		lea	rdi, -4[r14]	# _332,
 6227 2535 488D4A08 		lea	rcx, 8[rdx]	# tmp796,
 6228 2539 4D39C2   		cmp	r10, r8	# tmp559, tmp560
 6229 253c 4C8D7648 		lea	r14, 72[rsi]	# tmp563,
 6230 2540 410F9EC1 		setle	r9b	#, tmp562
 6231              	.LVL303:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6232              		.loc 1 734 11 view .LVU2146
 6233 2544 48897C24 		mov	QWORD PTR 56[rsp], rdi	# %sfp, _332
 6233      38
 6234 2549 4939CE   		cmp	r14, rcx	# tmp563, tmp796
 6235 254c 400F9EC7 		setle	dil	#, tmp566
 6236 2550 4109F9   		or	r9d, edi	# tmp567, tmp566
 6237 2553 488D7A50 		lea	rdi, 80[rdx]	# tmp568,
 6238 2557 48897C24 		mov	QWORD PTR 40[rsp], rdi	# %sfp, tmp568
 6238      28
 6239 255c 4C39C7   		cmp	rdi, r8	# tmp568, tmp560
 6240 255f 0F9E4424 		setle	BYTE PTR 39[rsp]	#, %sfp
 6240      27
 6241 2564 4883C210 		add	rdx, 16	# tmp573,
 6242 2568 4939D6   		cmp	r14, rdx	# tmp563, tmp573
 6243 256b 400F9EC7 		setle	dil	#, tmp575
 6244 256f 400A7C24 		or	dil, BYTE PTR 39[rsp]	# tmp576, %sfp
 6244      27
 6245 2574 4421CF   		and	edi, r9d	# tmp577, tmp567
 6246 2577 48837C24 		cmp	QWORD PTR 56[rsp], 11	# %sfp,
 6246      380B
 6247 257d 410F97C1 		seta	r9b	#, tmp579
 6248 2581 4421CF   		and	edi, r9d	# tmp580, tmp579
 6249 2584 4C8D4E08 		lea	r9, 8[rsi]	# tmp582,
 6250 2588 4D39CA   		cmp	r10, r9	# tmp559, tmp582
 6251 258b 410F9EC2 		setle	r10b	#, tmp584
 6252 258f 4883C640 		add	rsi, 64	# tmp585,
 6253 2593 4839CE   		cmp	rsi, rcx	# tmp585, tmp796
 6254 2596 0F9E4424 		setle	BYTE PTR 39[rsp]	#, %sfp
 6254      27
 6255 259b 440A5424 		or	r10b, BYTE PTR 39[rsp]	# tmp589, %sfp
 6255      27
 6256 25a0 4421D7   		and	edi, r10d	# tmp590, tmp589
 6257 25a3 4C394C24 		cmp	QWORD PTR 40[rsp], r9	# %sfp, tmp582
 6257      28
 6258 25a8 410F9EC2 		setle	r10b	#, tmp594
 6259 25ac 4839D6   		cmp	rsi, rdx	# tmp585, tmp573
 6260 25af 0F9E4424 		setle	BYTE PTR 40[rsp]	#, %sfp
 6260      28
 6261 25b4 440A5424 		or	r10b, BYTE PTR 40[rsp]	# tmp599, %sfp
GAS LISTING /tmp/ccBvFgp2.s 			page 178


 6261      28
 6262 25b9 4484D7   		test	dil, r10b	# tmp590, tmp599
 6263 25bc 0F845E0D 		je	.L544	#,
 6263      0000
 6264 25c2 4D39CE   		cmp	r14, r9	# tmp563, tmp582
 6265 25c5 410F9EC6 		setle	r14b	#, tmp604
 6266 25c9 4C39C6   		cmp	rsi, r8	# tmp585, tmp560
 6267 25cc 400F9EC6 		setle	sil	#, tmp608
 6268 25d0 4108F6   		or	r14b, sil	# tmp604, tmp608
 6269 25d3 0F84470D 		je	.L544	#,
 6269      0000
 6270 25d9 4801D9   		add	rcx, rbx	# vectp.390, bitarray
 6271 25dc 4801DA   		add	rdx, rbx	# vectp.394, bitarray
 6272              	.LBB359:
 6273              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6274              		.loc 1 736 19 view .LVU2147
 6275 25df C5FE6F0A 		vmovdqu	ymm1, YMMWORD PTR [rdx]	# MEM[base: vectp.394_499, index: ivtmp.465_748, offset: 0B], MEM[
 6276 25e3 C4C1796E 		vmovd	xmm3, r13d	# _12, _12
 6276      DD
 6277 25e8 C5FE6F42 		vmovdqu	ymm0, YMMWORD PTR 32[rdx]	# MEM[base: vectp.394_499, index: ivtmp.465_748, offset: 32B], M
 6277      20
 6278 25ed C4C1796E 		vmovd	xmm4, r15d	# _18,
 6278      E7
 6279              	# sieve_extend.c:735:         bitword_t source0 = bitarray[source_word  ];
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6280              		.loc 1 735 19 view .LVU2148
 6281 25f2 C5FE6F39 		vmovdqu	ymm7, YMMWORD PTR [rcx]	# tmp1315, MEM[base: vectp.390_490, index: ivtmp.465_748, offset: 
 6282              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6283              		.loc 1 736 19 view .LVU2149
 6284 25f6 C5F56CE8 		vpunpcklqdq	ymm5, ymm1, ymm0	# tmp616, MEM[base: vectp.394_499, index: ivtmp.465_748, offset: 0B],
 6285 25fa C5756DF0 		vpunpckhqdq	ymm14, ymm1, ymm0	# tmp634, MEM[base: vectp.394_499, index: ivtmp.465_748, offset: 0B]
 6286              	# sieve_extend.c:735:         bitword_t source0 = bitarray[source_word  ];
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6287              		.loc 1 735 19 view .LVU2150
 6288 25fe C5C56C51 		vpunpcklqdq	ymm2, ymm7, YMMWORD PTR 32[rcx]	# tmp620, tmp1315, MEM[base: vectp.390_490, index: ivt
 6288      20
 6289 2603 4C8B7424 		mov	r14, QWORD PTR 56[rsp]	# _332, %sfp
 6289      38
 6290              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6291              		.loc 1 736 19 view .LVU2151
 6292 2608 C463FD00 		vpermq	ymm8, ymm5, 216	# vect_perm_even_507, tmp616,
 6292      C5D8
 6293              	# sieve_extend.c:735:         bitword_t source0 = bitarray[source_word  ];
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6294              		.loc 1 735 19 view .LVU2152
 6295 260e C4E3FD00 		vpermq	ymm6, ymm2, 216	# tmp619, tmp620,
 6295      F2D8
 6296              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6297              		.loc 1 736 19 view .LVU2153
 6298 2614 C443FD00 		vpermq	ymm15, ymm14, 216	# tmp633, tmp634,
 6298      FED8
 6299              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
GAS LISTING /tmp/ccBvFgp2.s 			page 179


 6300              		.loc 1 737 63 view .LVU2154
 6301 261a C53DF3D4 		vpsllq	ymm10, ymm8, xmm4	# vect__100.398, vect_perm_even_507, _18
 6302              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6303              		.loc 1 737 42 view .LVU2155
 6304 261e C54DD3CB 		vpsrlq	ymm9, ymm6, xmm3	# vect__98.397, tmp619, _12
 6305              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6306              		.loc 1 739 42 view .LVU2156
 6307 2622 C5BDD3C3 		vpsrlq	ymm0, ymm8, xmm3	# vect__109.400, vect_perm_even_507, _12
 6308              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6309              		.loc 1 739 63 view .LVU2157
 6310 2626 C585F3CC 		vpsllq	ymm1, ymm15, xmm4	# vect__110.401, tmp633, _18
 6311 262a 49C1EE03 		shr	r14, 3	# _332,
 6312              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6313              		.loc 1 737 52 view .LVU2158
 6314 262e C44135EB 		vpor	ymm11, ymm9, ymm10	# vect__104.399, vect__98.397, vect__100.398
 6314      DA
 6315              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6316              		.loc 1 739 52 view .LVU2159
 6317 2633 C5F5EBE8 		vpor	ymm5, ymm1, ymm0	# vect__114.402, vect__110.401, vect__109.400
 6318 2637 4D8D56FF 		lea	r10, -1[r14]	# tmp828,
 6319              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6320              		.loc 1 737 31 view .LVU2160
 6321 263b C4437D39 		vextracti128	xmm13, ymm11, 0x1	# tmp630, vect__104.399
 6321      DD01
 6322 2641 4183E201 		and	r10d, 1	# tmp830,
 6323              	.LVL304:
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6324              		.loc 1 735 9 is_stmt 1 view .LVU2161
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6325              		.loc 1 736 9 view .LVU2162
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6326              		.loc 1 737 9 view .LVU2163
 6327              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6328              		.loc 1 739 31 is_stmt 0 view .LVU2164
 6329 2645 C4E37D39 		vextracti128	xmm7, ymm5, 0x1	# tmp644, vect__114.402
 6329      EF01
 6330 264b 4983FE01 		cmp	r14, 1	# bnd.383,
 6331              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6332              		.loc 1 737 31 view .LVU2165
 6333 264f C42179D6 		vmovq	QWORD PTR [rbx+r9], xmm11	# MEM[base: _513, index: ivtmp.465_748, offset: 0B], tmp626
 6333      1C0B
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6334              		.loc 1 737 31 view .LVU2166
 6335 2655 4E8D1C0B 		lea	r11, [rbx+r9]	# _513,
 6336              	.LVL305:
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6337              		.loc 1 737 31 view .LVU2167
 6338 2659 C423F916 		vpextrq	QWORD PTR 16[rbx+r9], xmm11, 1	# MEM[base: _513, index: ivtmp.465_748, offset: 16B], tmp62
 6338      5C0B1001 
GAS LISTING /tmp/ccBvFgp2.s 			page 180


 6339 2661 4A8D3C03 		lea	rdi, [rbx+r8]	# _533,
 6340 2665 C42179D6 		vmovq	QWORD PTR 32[rbx+r9], xmm13	# MEM[base: _513, index: ivtmp.465_748, offset: 32B], tmp630
 6340      6C0B20
 6341 266c C423F916 		vpextrq	QWORD PTR 48[rbx+r9], xmm13, 1	# MEM[base: _513, index: ivtmp.465_748, offset: 48B], tmp63
 6341      6C0B3001 
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6342              		.loc 1 738 9 is_stmt 1 view .LVU2168
 6343              	.LVL306:
 739:sieve_extend.c ****         copy_word += 2;
 6344              		.loc 1 739 9 view .LVU2169
 6345 2674 41B90100 		mov	r9d, 1	# ivtmp.463,
 6345      0000
 6346              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6347              		.loc 1 739 31 is_stmt 0 view .LVU2170
 6348 267a C4A179D6 		vmovq	QWORD PTR [rbx+r8], xmm5	# MEM[base: _533, index: ivtmp.465_748, offset: 0B], tmp640
 6348      2C03
 739:sieve_extend.c ****         copy_word += 2;
 6349              		.loc 1 739 31 view .LVU2171
 6350 2680 C4A3F916 		vpextrq	QWORD PTR 16[rbx+r8], xmm5, 1	# MEM[base: _533, index: ivtmp.465_748, offset: 16B], tmp640
 6350      6C031001 
 6351 2688 C4A179D6 		vmovq	QWORD PTR 32[rbx+r8], xmm7	# MEM[base: _533, index: ivtmp.465_748, offset: 32B], tmp644
 6351      7C0320
 6352 268f C4A3F916 		vpextrq	QWORD PTR 48[rbx+r8], xmm7, 1	# MEM[base: _533, index: ivtmp.465_748, offset: 48B], tmp644
 6352      7C033001 
 740:sieve_extend.c ****         source_word += 2;
 6353              		.loc 1 740 9 is_stmt 1 view .LVU2172
 741:sieve_extend.c ****         distance += 2;
 6354              		.loc 1 741 9 view .LVU2173
 742:sieve_extend.c ****     }
 6355              		.loc 1 742 9 view .LVU2174
 742:sieve_extend.c ****     }
 6356              		.loc 1 742 9 is_stmt 0 view .LVU2175
 6357              	.LBE359:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6358              		.loc 1 734 11 is_stmt 1 view .LVU2176
 6359 2697 41B84000 		mov	r8d, 64	# ivtmp.465,
 6359      0000
 6360 269d 0F86E901 		jbe	.L774	#,
 6360      0000
 6361 26a3 4D85D2   		test	r10, r10	# tmp830
 6362 26a6 0F84A400 		je	.L545	#,
 6362      0000
 6363              	.LBB360:
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6364              		.loc 1 735 9 view .LVU2177
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6365              		.loc 1 736 9 view .LVU2178
 6366              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6367              		.loc 1 736 19 is_stmt 0 view .LVU2179
 6368 26ac C57E6F4A 		vmovdqu	ymm9, YMMWORD PTR 64[rdx]	# MEM[base: vectp.394_499, index: ivtmp.465_748, offset: 0B], ME
 6368      40
 6369 26b1 4983FE02 		cmp	r14, 2	# bnd.383,
 6370 26b5 C57E6F52 		vmovdqu	ymm10, YMMWORD PTR 96[rdx]	# MEM[base: vectp.394_499, index: ivtmp.465_748, offset: 32B], 
 6370      60
 6371 26ba 41B90200 		mov	r9d, 2	# ivtmp.463,
GAS LISTING /tmp/ccBvFgp2.s 			page 181


 6371      0000
 6372              	# sieve_extend.c:735:         bitword_t source0 = bitarray[source_word  ];
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6373              		.loc 1 735 19 view .LVU2180
 6374 26c0 C5FE6F71 		vmovdqu	ymm6, YMMWORD PTR 64[rcx]	# tmp1432, MEM[base: vectp.390_490, index: ivtmp.465_748, offset
 6374      40
 6375              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6376              		.loc 1 736 19 view .LVU2181
 6377 26c5 C4C1356C 		vpunpcklqdq	ymm2, ymm9, ymm10	# tmp1190, MEM[base: vectp.394_499, index: ivtmp.465_748, offset: 0B
 6377      D2
 6378 26ca C441356D 		vpunpckhqdq	ymm8, ymm9, ymm10	# tmp1205, MEM[base: vectp.394_499, index: ivtmp.465_748, offset: 0B
 6378      C2
 6379              	# sieve_extend.c:735:         bitword_t source0 = bitarray[source_word  ];
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6380              		.loc 1 735 19 view .LVU2182
 6381 26cf C54D6C61 		vpunpcklqdq	ymm12, ymm6, YMMWORD PTR 96[rcx]	# tmp1194, tmp1432, MEM[base: vectp.390_490, index: i
 6381      60
 6382              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6383              		.loc 1 736 19 view .LVU2183
 6384 26d4 C463FD00 		vpermq	ymm11, ymm2, 216	# vect_perm_even_507, tmp1190,
 6384      DAD8
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6385              		.loc 1 737 9 is_stmt 1 view .LVU2184
 6386              	# sieve_extend.c:735:         bitword_t source0 = bitarray[source_word  ];
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6387              		.loc 1 735 19 is_stmt 0 view .LVU2185
 6388 26da C443FD00 		vpermq	ymm13, ymm12, 216	# tmp1195, tmp1194,
 6388      ECD8
 6389              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6390              		.loc 1 736 19 view .LVU2186
 6391 26e0 C4C3FD00 		vpermq	ymm7, ymm8, 216	# tmp1206, tmp1205,
 6391      F8D8
 6392 26e6 41B88000 		mov	r8d, 128	# ivtmp.465,
 6392      0000
 6393              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6394              		.loc 1 737 42 view .LVU2187
 6395 26ec C515D3F3 		vpsrlq	ymm14, ymm13, xmm3	# vect__98.397, tmp1195, _12
 6396              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6397              		.loc 1 737 63 view .LVU2188
 6398 26f0 C525F3FC 		vpsllq	ymm15, ymm11, xmm4	# vect__100.398, vect_perm_even_507, _18
 6399              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6400              		.loc 1 739 42 view .LVU2189
 6401 26f4 C525D3D3 		vpsrlq	ymm10, ymm11, xmm3	# vect__109.400, vect_perm_even_507, _12
 6402              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6403              		.loc 1 739 63 view .LVU2190
 6404 26f8 C545F3CC 		vpsllq	ymm9, ymm7, xmm4	# vect__110.401, tmp1206, _18
 6405              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6406              		.loc 1 737 52 view .LVU2191
 6407 26fc C4C10DEB 		vpor	ymm1, ymm14, ymm15	# vect__104.399, vect__98.397, vect__100.398
GAS LISTING /tmp/ccBvFgp2.s 			page 182


 6407      CF
 6408              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6409              		.loc 1 739 52 view .LVU2192
 6410 2701 C4C135EB 		vpor	ymm2, ymm9, ymm10	# vect__114.402, vect__110.401, vect__109.400
 6410      D2
 6411              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6412              		.loc 1 737 31 view .LVU2193
 6413 2706 C4E37D39 		vextracti128	xmm5, ymm1, 0x1	# tmp1202, vect__104.399
 6413      CD01
 6414              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6415              		.loc 1 739 31 view .LVU2194
 6416 270c C4E37D39 		vextracti128	xmm6, ymm2, 0x1	# tmp1213, vect__114.402
 6416      D601
 6417              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6418              		.loc 1 737 31 view .LVU2195
 6419 2712 C4C179D6 		vmovq	QWORD PTR 64[r11], xmm1	# MEM[base: _513, index: ivtmp.465_748, offset: 0B], tmp1199
 6419      4B40
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6420              		.loc 1 737 31 view .LVU2196
 6421 2718 C4C3F916 		vpextrq	QWORD PTR 80[r11], xmm1, 1	# MEM[base: _513, index: ivtmp.465_748, offset: 16B], tmp1199
 6421      4B5001
 6422 271f C4C179D6 		vmovq	QWORD PTR 96[r11], xmm5	# MEM[base: _513, index: ivtmp.465_748, offset: 32B], tmp1202
 6422      6B60
 6423 2725 C4C3F916 		vpextrq	QWORD PTR 112[r11], xmm5, 1	# MEM[base: _513, index: ivtmp.465_748, offset: 48B], tmp1202
 6423      6B7001
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6424              		.loc 1 738 9 is_stmt 1 view .LVU2197
 739:sieve_extend.c ****         copy_word += 2;
 6425              		.loc 1 739 9 view .LVU2198
 6426              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6427              		.loc 1 739 31 is_stmt 0 view .LVU2199
 6428 272c C5F9D657 		vmovq	QWORD PTR 64[rdi], xmm2	# MEM[base: _533, index: ivtmp.465_748, offset: 0B], tmp1210
 6428      40
 739:sieve_extend.c ****         copy_word += 2;
 6429              		.loc 1 739 31 view .LVU2200
 6430 2731 C4E3F916 		vpextrq	QWORD PTR 80[rdi], xmm2, 1	# MEM[base: _533, index: ivtmp.465_748, offset: 16B], tmp1210
 6430      575001
 6431 2738 C5F9D677 		vmovq	QWORD PTR 96[rdi], xmm6	# MEM[base: _533, index: ivtmp.465_748, offset: 32B], tmp1213
 6431      60
 6432 273d C4E3F916 		vpextrq	QWORD PTR 112[rdi], xmm6, 1	# MEM[base: _533, index: ivtmp.465_748, offset: 48B], tmp1213
 6432      777001
 740:sieve_extend.c ****         source_word += 2;
 6433              		.loc 1 740 9 is_stmt 1 view .LVU2201
 741:sieve_extend.c ****         distance += 2;
 6434              		.loc 1 741 9 view .LVU2202
 742:sieve_extend.c ****     }
 6435              		.loc 1 742 9 view .LVU2203
 742:sieve_extend.c ****     }
 6436              		.loc 1 742 9 is_stmt 0 view .LVU2204
 6437              	.LBE360:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6438              		.loc 1 734 11 is_stmt 1 view .LVU2205
GAS LISTING /tmp/ccBvFgp2.s 			page 183


 6439 2744 0F864201 		jbe	.L774	#,
 6439      0000
 6440 274a 660F1F44 		.p2align 4
 6440      0000
 6441              		.p2align 3
 6442              	.L545:
 6443              	.LBB361:
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6444              		.loc 1 735 9 view .LVU2206
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6445              		.loc 1 736 9 view .LVU2207
 6446              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6447              		.loc 1 736 19 is_stmt 0 view .LVU2208
 6448 2750 C4217E6F 		vmovdqu	ymm12, YMMWORD PTR [rdx+r8]	# MEM[base: vectp.394_499, index: ivtmp.465_748, offset: 0B], 
 6448      2402
 6449 2756 4983C102 		add	r9, 2	# ivtmp.463,
 6450 275a C4217E6F 		vmovdqu	ymm13, YMMWORD PTR 32[rdx+r8]	# MEM[base: vectp.394_499, index: ivtmp.465_748, offset: 32B
 6450      6C0220
 6451              	# sieve_extend.c:735:         bitword_t source0 = bitarray[source_word  ];
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6452              		.loc 1 735 19 view .LVU2209
 6453 2761 C4A17E6F 		vmovdqu	ymm1, YMMWORD PTR [rcx+r8]	# tmp1316, MEM[base: vectp.390_490, index: ivtmp.465_748, offse
 6453      0C01
 6454              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6455              		.loc 1 736 19 view .LVU2210
 6456 2767 C4411D6C 		vpunpcklqdq	ymm14, ymm12, ymm13	# tmp837, MEM[base: vectp.394_499, index: ivtmp.465_748, offset: 0
 6456      F5
 6457 276c C4411D6D 		vpunpckhqdq	ymm11, ymm12, ymm13	# tmp852, MEM[base: vectp.394_499, index: ivtmp.465_748, offset: 0
 6457      DD
 6458              	# sieve_extend.c:735:         bitword_t source0 = bitarray[source_word  ];
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6459              		.loc 1 735 19 view .LVU2211
 6460 2771 C4A1756C 		vpunpcklqdq	ymm0, ymm1, YMMWORD PTR 32[rcx+r8]	# tmp841, tmp1316, MEM[base: vectp.390_490, index: 
 6460      440120
 6461              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6462              		.loc 1 736 19 view .LVU2212
 6463 2778 C443FD00 		vpermq	ymm15, ymm14, 216	# vect_perm_even_507, tmp837,
 6463      FED8
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6464              		.loc 1 737 9 is_stmt 1 view .LVU2213
 6465              	# sieve_extend.c:735:         bitword_t source0 = bitarray[source_word  ];
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6466              		.loc 1 735 19 is_stmt 0 view .LVU2214
 6467 277e C4E3FD00 		vpermq	ymm5, ymm0, 216	# tmp842, tmp841,
 6467      E8D8
 6468              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6469              		.loc 1 736 19 view .LVU2215
 6470 2784 C4C3FD00 		vpermq	ymm6, ymm11, 216	# tmp853, tmp852,
 6470      F3D8
 6471              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6472              		.loc 1 737 42 view .LVU2216
 6473 278a C555D3C3 		vpsrlq	ymm8, ymm5, xmm3	# vect__98.397, tmp842, _12
GAS LISTING /tmp/ccBvFgp2.s 			page 184


 6474              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6475              		.loc 1 737 63 view .LVU2217
 6476 278e C585F3FC 		vpsllq	ymm7, ymm15, xmm4	# vect__100.398, vect_perm_even_507, _18
 6477              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6478              		.loc 1 739 42 view .LVU2218
 6479 2792 C505D3EB 		vpsrlq	ymm13, ymm15, xmm3	# vect__109.400, vect_perm_even_507, _12
 6480              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6481              		.loc 1 739 63 view .LVU2219
 6482 2796 C54DF3E4 		vpsllq	ymm12, ymm6, xmm4	# vect__110.401, tmp853, _18
 6483              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6484              		.loc 1 737 52 view .LVU2220
 6485 279a C53DEBCF 		vpor	ymm9, ymm8, ymm7	# vect__104.399, vect__98.397, vect__100.398
 6486              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6487              		.loc 1 739 52 view .LVU2221
 6488 279e C4411DEB 		vpor	ymm14, ymm12, ymm13	# vect__114.402, vect__110.401, vect__109.400
 6488      F5
 6489              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6490              		.loc 1 737 31 view .LVU2222
 6491 27a3 C4637D39 		vextracti128	xmm2, ymm9, 0x1	# tmp849, vect__104.399
 6491      CA01
 6492              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6493              		.loc 1 739 31 view .LVU2223
 6494 27a9 C4637D39 		vextracti128	xmm1, ymm14, 0x1	# tmp860, vect__114.402
 6494      F101
 6495              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6496              		.loc 1 737 31 view .LVU2224
 6497 27af C40179D6 		vmovq	QWORD PTR [r11+r8], xmm9	# MEM[base: _513, index: ivtmp.465_748, offset: 0B], tmp846
 6497      0C03
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6498              		.loc 1 737 31 view .LVU2225
 6499 27b5 C403F916 		vpextrq	QWORD PTR 16[r11+r8], xmm9, 1	# MEM[base: _513, index: ivtmp.465_748, offset: 16B], tmp846
 6499      4C031001 
 6500 27bd C48179D6 		vmovq	QWORD PTR 32[r11+r8], xmm2	# MEM[base: _513, index: ivtmp.465_748, offset: 32B], tmp849
 6500      540320
 6501 27c4 C483F916 		vpextrq	QWORD PTR 48[r11+r8], xmm2, 1	# MEM[base: _513, index: ivtmp.465_748, offset: 48B], tmp849
 6501      54033001 
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6502              		.loc 1 738 9 is_stmt 1 view .LVU2226
 739:sieve_extend.c ****         copy_word += 2;
 6503              		.loc 1 739 9 view .LVU2227
 6504              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6505              		.loc 1 739 31 is_stmt 0 view .LVU2228
 6506 27cc C42179D6 		vmovq	QWORD PTR [rdi+r8], xmm14	# MEM[base: _533, index: ivtmp.465_748, offset: 0B], tmp857
 6506      3407
 739:sieve_extend.c ****         copy_word += 2;
 6507              		.loc 1 739 31 view .LVU2229
 6508 27d2 C423F916 		vpextrq	QWORD PTR 16[rdi+r8], xmm14, 1	# MEM[base: _533, index: ivtmp.465_748, offset: 16B], tmp85
 6508      74071001 
GAS LISTING /tmp/ccBvFgp2.s 			page 185


 6509 27da C4A179D6 		vmovq	QWORD PTR 32[rdi+r8], xmm1	# MEM[base: _533, index: ivtmp.465_748, offset: 32B], tmp860
 6509      4C0720
 6510 27e1 C4A3F916 		vpextrq	QWORD PTR 48[rdi+r8], xmm1, 1	# MEM[base: _533, index: ivtmp.465_748, offset: 48B], tmp860
 6510      4C073001 
 740:sieve_extend.c ****         source_word += 2;
 6511              		.loc 1 740 9 is_stmt 1 view .LVU2230
 741:sieve_extend.c ****         distance += 2;
 6512              		.loc 1 741 9 view .LVU2231
 742:sieve_extend.c ****     }
 6513              		.loc 1 742 9 view .LVU2232
 742:sieve_extend.c ****     }
 6514              		.loc 1 742 9 is_stmt 0 view .LVU2233
 6515              	.LBE361:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6516              		.loc 1 734 11 is_stmt 1 view .LVU2234
 6517              	.LBB362:
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6518              		.loc 1 735 9 view .LVU2235
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6519              		.loc 1 736 9 view .LVU2236
 6520              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6521              		.loc 1 736 19 is_stmt 0 view .LVU2237
 6522 27e9 C4217E6F 		vmovdqu	ymm8, YMMWORD PTR 64[rdx+r8]	# MEM[base: vectp.394_499, index: ivtmp.465_748, offset: 0B],
 6522      440240
 6523 27f0 C4A17E6F 		vmovdqu	ymm0, YMMWORD PTR 96[rdx+r8]	# MEM[base: vectp.394_499, index: ivtmp.465_748, offset: 32B]
 6523      440260
 6524              	# sieve_extend.c:735:         bitword_t source0 = bitarray[source_word  ];
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6525              		.loc 1 735 19 view .LVU2238
 6526 27f7 C4A17E6F 		vmovdqu	ymm7, YMMWORD PTR 64[rcx+r8]	# tmp1317, MEM[base: vectp.390_490, index: ivtmp.465_748, off
 6526      7C0140
 6527              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6528              		.loc 1 736 19 view .LVU2239
 6529 27fe C5BD6CE8 		vpunpcklqdq	ymm5, ymm8, ymm0	# tmp867, MEM[base: vectp.394_499, index: ivtmp.465_748, offset: 0B],
 6530 2802 C53D6DF8 		vpunpckhqdq	ymm15, ymm8, ymm0	# tmp882, MEM[base: vectp.394_499, index: ivtmp.465_748, offset: 0B]
 6531              	# sieve_extend.c:735:         bitword_t source0 = bitarray[source_word  ];
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6532              		.loc 1 735 19 view .LVU2240
 6533 2806 C421456C 		vpunpcklqdq	ymm10, ymm7, YMMWORD PTR 96[rcx+r8]	# tmp871, tmp1317, MEM[base: vectp.390_490, index:
 6533      540160
 6534              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6535              		.loc 1 736 19 view .LVU2241
 6536 280d C463FD00 		vpermq	ymm9, ymm5, 216	# vect_perm_even_507, tmp867,
 6536      CDD8
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6537              		.loc 1 737 9 is_stmt 1 view .LVU2242
 6538              	# sieve_extend.c:735:         bitword_t source0 = bitarray[source_word  ];
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6539              		.loc 1 735 19 is_stmt 0 view .LVU2243
 6540 2813 C4C3FD00 		vpermq	ymm2, ymm10, 216	# tmp872, tmp871,
 6540      D2D8
 6541              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6542              		.loc 1 736 19 view .LVU2244
GAS LISTING /tmp/ccBvFgp2.s 			page 186


 6543 2819 C4C3FD00 		vpermq	ymm1, ymm15, 216	# tmp883, tmp882,
 6543      CFD8
 6544              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6545              		.loc 1 737 42 view .LVU2245
 6546 281f C56DD3DB 		vpsrlq	ymm11, ymm2, xmm3	# vect__98.397, tmp872, _12
 6547              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6548              		.loc 1 737 63 view .LVU2246
 6549 2823 C5B5F3F4 		vpsllq	ymm6, ymm9, xmm4	# vect__100.398, vect_perm_even_507, _18
 6550              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6551              		.loc 1 739 42 view .LVU2247
 6552 2827 C5B5D3C3 		vpsrlq	ymm0, ymm9, xmm3	# vect__109.400, vect_perm_even_507, _12
 6553              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6554              		.loc 1 739 63 view .LVU2248
 6555 282b C575F3C4 		vpsllq	ymm8, ymm1, xmm4	# vect__110.401, tmp883, _18
 6556              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6557              		.loc 1 737 52 view .LVU2249
 6558 282f C525EBE6 		vpor	ymm12, ymm11, ymm6	# vect__104.399, vect__98.397, vect__100.398
 6559              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6560              		.loc 1 739 52 view .LVU2250
 6561 2833 C5BDEBE8 		vpor	ymm5, ymm8, ymm0	# vect__114.402, vect__110.401, vect__109.400
 6562              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6563              		.loc 1 737 31 view .LVU2251
 6564 2837 C4437D39 		vextracti128	xmm14, ymm12, 0x1	# tmp879, vect__104.399
 6564      E601
 6565              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6566              		.loc 1 739 31 view .LVU2252
 6567 283d C4E37D39 		vextracti128	xmm7, ymm5, 0x1	# tmp890, vect__114.402
 6567      EF01
 6568              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6569              		.loc 1 737 31 view .LVU2253
 6570 2843 C40179D6 		vmovq	QWORD PTR 64[r11+r8], xmm12	# MEM[base: _513, index: ivtmp.465_748, offset: 0B], tmp876
 6570      640340
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6571              		.loc 1 737 31 view .LVU2254
 6572 284a C403F916 		vpextrq	QWORD PTR 80[r11+r8], xmm12, 1	# MEM[base: _513, index: ivtmp.465_748, offset: 16B], tmp87
 6572      64035001 
 6573 2852 C40179D6 		vmovq	QWORD PTR 96[r11+r8], xmm14	# MEM[base: _513, index: ivtmp.465_748, offset: 32B], tmp879
 6573      740360
 6574 2859 C403F916 		vpextrq	QWORD PTR 112[r11+r8], xmm14, 1	# MEM[base: _513, index: ivtmp.465_748, offset: 48B], tmp8
 6574      74037001 
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6575              		.loc 1 738 9 is_stmt 1 view .LVU2255
 739:sieve_extend.c ****         copy_word += 2;
 6576              		.loc 1 739 9 view .LVU2256
 6577              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6578              		.loc 1 739 31 is_stmt 0 view .LVU2257
 6579 2861 C4A179D6 		vmovq	QWORD PTR 64[rdi+r8], xmm5	# MEM[base: _533, index: ivtmp.465_748, offset: 0B], tmp887
GAS LISTING /tmp/ccBvFgp2.s 			page 187


 6579      6C0740
 739:sieve_extend.c ****         copy_word += 2;
 6580              		.loc 1 739 31 view .LVU2258
 6581 2868 C4A3F916 		vpextrq	QWORD PTR 80[rdi+r8], xmm5, 1	# MEM[base: _533, index: ivtmp.465_748, offset: 16B], tmp887
 6581      6C075001 
 6582 2870 C4A179D6 		vmovq	QWORD PTR 96[rdi+r8], xmm7	# MEM[base: _533, index: ivtmp.465_748, offset: 32B], tmp890
 6582      7C0760
 6583 2877 C4A3F916 		vpextrq	QWORD PTR 112[rdi+r8], xmm7, 1	# MEM[base: _533, index: ivtmp.465_748, offset: 48B], tmp89
 6583      7C077001 
 740:sieve_extend.c ****         source_word += 2;
 6584              		.loc 1 740 9 is_stmt 1 view .LVU2259
 741:sieve_extend.c ****         distance += 2;
 6585              		.loc 1 741 9 view .LVU2260
 742:sieve_extend.c ****     }
 6586              		.loc 1 742 9 view .LVU2261
 742:sieve_extend.c ****     }
 6587              		.loc 1 742 9 is_stmt 0 view .LVU2262
 6588              	.LBE362:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6589              		.loc 1 734 11 is_stmt 1 view .LVU2263
 6590 287f 4983E880 		sub	r8, -128	# ivtmp.465,
 6591 2883 4D39CE   		cmp	r14, r9	# bnd.383, ivtmp.463
 6592 2886 0F87C4FE 		ja	.L545	#,
 6592      FFFF
 6593              	.L774:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6594              		.loc 1 734 11 is_stmt 0 view .LVU2264
 6595 288c 488B5424 		mov	rdx, QWORD PTR 88[rsp]	# _183, %sfp
 6595      58
 6596 2891 49C1E603 		sal	r14, 3	# _483,
 6597 2895 4A8D0C32 		lea	rcx, [rdx+r14]	# tmp.385,
 6598 2899 4A8D1430 		lea	rdx, [rax+r14]	# tmp.386,
 6599              	.LVL307:
 6600              	.LBB363:
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6601              		.loc 1 735 9 is_stmt 1 view .LVU2265
 6602              	# sieve_extend.c:735:         bitword_t source0 = bitarray[source_word  ];
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6603              		.loc 1 735 37 is_stmt 0 view .LVU2266
 6604 289d 4C8D1CCD 		lea	r11, 0[0+rcx*8]	# _605,
 6604      00000000 
 6605              	.LVL308:
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6606              		.loc 1 736 9 is_stmt 1 view .LVU2267
 6607              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6608              		.loc 1 737 42 is_stmt 0 view .LVU2268
 6609 28a5 C4E293F7 		shrx	rsi, QWORD PTR [rbx+rcx*8], r13	# tmp648, *_606, shift
 6609      34CB
 6610              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6611              		.loc 1 736 19 view .LVU2269
 6612 28ab 4A8B7C1B 		mov	rdi, QWORD PTR 8[rbx+r11]	# source1, *_610
 6612      08
 6613              	.LVL309:
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6614              		.loc 1 737 9 is_stmt 1 view .LVU2270
GAS LISTING /tmp/ccBvFgp2.s 			page 188


 6615              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6616              		.loc 1 737 63 is_stmt 0 view .LVU2271
 6617 28b0 C46281F7 		shlx	r10, rdi, r15	# tmp650, source1, shift_flipped
 6617      D7
 6618              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6619              		.loc 1 737 52 view .LVU2272
 6620 28b5 4C09D6   		or	rsi, r10	# tmp651, tmp650
 6621              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6622              		.loc 1 739 42 view .LVU2273
 6623 28b8 C4E293F7 		shrx	rdi, rdi, r13	# tmp654, source1, shift
 6623      FF
 6624              	.LVL310:
 6625              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6626              		.loc 1 737 52 view .LVU2274
 6627 28bd 488934D3 		mov	QWORD PTR [rbx+rdx*8], rsi	# *_615, tmp651
 6628              	.LVL311:
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6629              		.loc 1 738 9 is_stmt 1 view .LVU2275
 6630              	# sieve_extend.c:738:         bitword_t source2 = bitarray[source_word+2];
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6631              		.loc 1 738 37 is_stmt 0 view .LVU2276
 6632 28c1 4C8D4902 		lea	r9, 2[rcx]	# _618,
 6633              	.LVL312:
 739:sieve_extend.c ****         copy_word += 2;
 6634              		.loc 1 739 9 is_stmt 1 view .LVU2277
 6635              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6636              		.loc 1 739 63 is_stmt 0 view .LVU2278
 6637 28c5 4E8B441B 		mov	r8, QWORD PTR 16[rbx+r11]	# *_620, *_620
 6637      10
 6638 28ca C44281F7 		shlx	r11, r8, r15	# tmp652, *_620, shift_flipped
 6638      D8
 6639              	.LVL313:
 6640              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6641              		.loc 1 739 52 view .LVU2279
 6642 28cf 4C09DF   		or	rdi, r11	# tmp655, tmp652
 6643              	# sieve_extend.c:740:         copy_word += 2;
 740:sieve_extend.c ****         source_word += 2;
 6644              		.loc 1 740 19 view .LVU2280
 6645 28d2 4C8D4202 		lea	r8, 2[rdx]	# copy_word,
 6646              	.LVL314:
 740:sieve_extend.c ****         source_word += 2;
 6647              		.loc 1 740 19 view .LVU2281
 6648              	.LBE363:
 6649              	# sieve_extend.c:734:     while (copy_word < fast_loop_stop_word) {
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6650              		.loc 1 734 11 view .LVU2282
 6651 28d6 4C8B5C24 		mov	r11, QWORD PTR 48[rsp]	# fast_loop_stop_word, %sfp
 6651      30
 6652              	.LBB364:
 6653              	# sieve_extend.c:742:         distance += 2;
 742:sieve_extend.c ****     }
GAS LISTING /tmp/ccBvFgp2.s 			page 189


 6654              		.loc 1 742 18 view .LVU2283
 6655 28db 4D8D5602 		lea	r10, 2[r14]	# distance,
 6656              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6657              		.loc 1 739 52 view .LVU2284
 6658 28df 48897CD3 		mov	QWORD PTR 8[rbx+rdx*8], rdi	# *_626, tmp655
 6658      08
 6659              	.LVL315:
 740:sieve_extend.c ****         source_word += 2;
 6660              		.loc 1 740 9 is_stmt 1 view .LVU2285
 741:sieve_extend.c ****         distance += 2;
 6661              		.loc 1 741 9 view .LVU2286
 742:sieve_extend.c ****     }
 6662              		.loc 1 742 9 view .LVU2287
 742:sieve_extend.c ****     }
 6663              		.loc 1 742 9 is_stmt 0 view .LVU2288
 6664              	.LBE364:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6665              		.loc 1 734 11 is_stmt 1 view .LVU2289
 6666 28e4 4D39C3   		cmp	r11, r8	# fast_loop_stop_word, copy_word
 6667 28e7 0F86D500 		jbe	.L548	#,
 6667      0000
 6668              	.LBB365:
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6669              		.loc 1 735 9 view .LVU2290
 6670              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6671              		.loc 1 737 42 is_stmt 0 view .LVU2291
 6672 28ed 4A8B34CB 		mov	rsi, QWORD PTR [rbx+r9*8]	# *_636, *_636
 6673              	# sieve_extend.c:735:         bitword_t source0 = bitarray[source_word  ];
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6674              		.loc 1 735 37 view .LVU2292
 6675 28f1 4E8D14CD 		lea	r10, 0[0+r9*8]	# _635,
 6675      00000000 
 6676              	.LVL316:
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6677              		.loc 1 736 9 is_stmt 1 view .LVU2293
 6678              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6679              		.loc 1 736 19 is_stmt 0 view .LVU2294
 6680 28f9 4A8B7C13 		mov	rdi, QWORD PTR 8[rbx+r10]	# source1, *_640
 6680      08
 6681              	.LVL317:
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6682              		.loc 1 737 9 is_stmt 1 view .LVU2295
 6683              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6684              		.loc 1 737 42 is_stmt 0 view .LVU2296
 6685 28fe C4E293F7 		shrx	rsi, rsi, r13	# tmp656, *_636, shift
 6685      F6
 6686              	.LVL318:
 6687              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6688              		.loc 1 737 63 view .LVU2297
 6689 2903 C46281F7 		shlx	r9, rdi, r15	# tmp658, source1, shift_flipped
 6689      CF
 6690              	.LVL319:
GAS LISTING /tmp/ccBvFgp2.s 			page 190


 6691              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6692              		.loc 1 737 52 view .LVU2298
 6693 2908 4C09CE   		or	rsi, r9	# tmp659, tmp658
 6694 290b 4A8934C3 		mov	QWORD PTR [rbx+r8*8], rsi	# *_645, tmp659
 6695              	.LVL320:
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6696              		.loc 1 738 9 is_stmt 1 view .LVU2299
 6697              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6698              		.loc 1 739 42 is_stmt 0 view .LVU2300
 6699 290f C4E293F7 		shrx	rdi, rdi, r13	# tmp662, source1, shift
 6699      FF
 6700              	.LVL321:
 6701              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6702              		.loc 1 739 63 view .LVU2301
 6703 2914 4E8B5413 		mov	r10, QWORD PTR 16[rbx+r10]	# *_650, *_650
 6703      10
 6704 2919 C4C281F7 		shlx	rsi, r10, r15	# tmp660, *_650, shift_flipped
 6704      F2
 6705              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6706              		.loc 1 739 52 view .LVU2302
 6707 291e 4809F7   		or	rdi, rsi	# tmp663, tmp660
 6708              	# sieve_extend.c:738:         bitword_t source2 = bitarray[source_word+2];
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6709              		.loc 1 738 37 view .LVU2303
 6710 2921 4C8D4904 		lea	r9, 4[rcx]	# _648,
 739:sieve_extend.c ****         copy_word += 2;
 6711              		.loc 1 739 9 is_stmt 1 view .LVU2304
 6712              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6713              		.loc 1 739 52 is_stmt 0 view .LVU2305
 6714 2925 4A897CC3 		mov	QWORD PTR 8[rbx+r8*8], rdi	# *_656, tmp663
 6714      08
 740:sieve_extend.c ****         source_word += 2;
 6715              		.loc 1 740 9 is_stmt 1 view .LVU2306
 6716              	# sieve_extend.c:740:         copy_word += 2;
 740:sieve_extend.c ****         source_word += 2;
 6717              		.loc 1 740 19 is_stmt 0 view .LVU2307
 6718 292a 4C8D4204 		lea	r8, 4[rdx]	# copy_word,
 6719              	.LVL322:
 741:sieve_extend.c ****         distance += 2;
 6720              		.loc 1 741 9 is_stmt 1 view .LVU2308
 742:sieve_extend.c ****     }
 6721              		.loc 1 742 9 view .LVU2309
 742:sieve_extend.c ****     }
 6722              		.loc 1 742 9 is_stmt 0 view .LVU2310
 6723              	.LBE365:
 6724              	# sieve_extend.c:734:     while (copy_word < fast_loop_stop_word) {
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6725              		.loc 1 734 11 view .LVU2311
 6726 292e 4D39C3   		cmp	r11, r8	# fast_loop_stop_word, copy_word
 6727              	.LBB366:
 6728              	# sieve_extend.c:742:         distance += 2;
 742:sieve_extend.c ****     }
GAS LISTING /tmp/ccBvFgp2.s 			page 191


 6729              		.loc 1 742 18 view .LVU2312
 6730 2931 4D8D5604 		lea	r10, 4[r14]	# distance,
 6731              	.LVL323:
 742:sieve_extend.c ****     }
 6732              		.loc 1 742 18 view .LVU2313
 6733              	.LBE366:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6734              		.loc 1 734 11 is_stmt 1 view .LVU2314
 6735 2935 0F868700 		jbe	.L548	#,
 6735      0000
 6736              	.LBB367:
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6737              		.loc 1 735 9 view .LVU2315
 6738              	# sieve_extend.c:735:         bitword_t source0 = bitarray[source_word  ];
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6739              		.loc 1 735 37 is_stmt 0 view .LVU2316
 6740 293b 4E8D14CD 		lea	r10, 0[0+r9*8]	# _665,
 6740      00000000 
 6741              	.LVL324:
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6742              		.loc 1 736 9 is_stmt 1 view .LVU2317
 6743              	# sieve_extend.c:740:         copy_word += 2;
 740:sieve_extend.c ****         source_word += 2;
 6744              		.loc 1 740 19 is_stmt 0 view .LVU2318
 6745 2943 4883C206 		add	rdx, 6	# copy_word,
 6746              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6747              		.loc 1 736 19 view .LVU2319
 6748 2947 4A8B7C13 		mov	rdi, QWORD PTR 8[rbx+r10]	# source1, *_670
 6748      08
 6749              	.LVL325:
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6750              		.loc 1 737 9 is_stmt 1 view .LVU2320
 6751              	# sieve_extend.c:738:         bitword_t source2 = bitarray[source_word+2];
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6752              		.loc 1 738 37 is_stmt 0 view .LVU2321
 6753 294c 4883C106 		add	rcx, 6	# _678,
 6754              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6755              		.loc 1 737 42 view .LVU2322
 6756 2950 4E8B0CCB 		mov	r9, QWORD PTR [rbx+r9*8]	# *_666, *_666
 6757              	.LVL326:
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6758              		.loc 1 737 42 view .LVU2323
 6759 2954 C4C293F7 		shrx	rsi, r9, r13	# tmp664, *_666, shift
 6759      F1
 6760              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6761              		.loc 1 737 63 view .LVU2324
 6762 2959 C46281F7 		shlx	r9, rdi, r15	# tmp666, source1, shift_flipped
 6762      CF
 6763              	.LVL327:
 6764              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6765              		.loc 1 737 52 view .LVU2325
 6766 295e 4C09CE   		or	rsi, r9	# tmp667, tmp666
 6767 2961 4A8934C3 		mov	QWORD PTR [rbx+r8*8], rsi	# *_675, tmp667
GAS LISTING /tmp/ccBvFgp2.s 			page 192


 6768              	.LVL328:
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6769              		.loc 1 738 9 is_stmt 1 view .LVU2326
 739:sieve_extend.c ****         copy_word += 2;
 6770              		.loc 1 739 9 view .LVU2327
 6771              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6772              		.loc 1 739 42 is_stmt 0 view .LVU2328
 6773 2965 C4E293F7 		shrx	rdi, rdi, r13	# tmp670, source1, shift
 6773      FF
 6774              	.LVL329:
 6775              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6776              		.loc 1 739 63 view .LVU2329
 6777 296a 4E8B5413 		mov	r10, QWORD PTR 16[rbx+r10]	# *_680, *_680
 6777      10
 6778              	.LVL330:
 739:sieve_extend.c ****         copy_word += 2;
 6779              		.loc 1 739 63 view .LVU2330
 6780 296f C4C281F7 		shlx	rsi, r10, r15	# tmp668, *_680, shift_flipped
 6780      F2
 6781              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6782              		.loc 1 739 52 view .LVU2331
 6783 2974 4809F7   		or	rdi, rsi	# tmp671, tmp668
 6784              	.LBE367:
 6785              	# sieve_extend.c:734:     while (copy_word < fast_loop_stop_word) {
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6786              		.loc 1 734 11 view .LVU2332
 6787 2977 4939D3   		cmp	r11, rdx	# fast_loop_stop_word, copy_word
 6788              	.LBB368:
 6789              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6790              		.loc 1 739 52 view .LVU2333
 6791 297a 4A897CC3 		mov	QWORD PTR 8[rbx+r8*8], rdi	# *_686, tmp671
 6791      08
 740:sieve_extend.c ****         source_word += 2;
 6792              		.loc 1 740 9 is_stmt 1 view .LVU2334
 6793              	.LVL331:
 741:sieve_extend.c ****         distance += 2;
 6794              		.loc 1 741 9 view .LVU2335
 742:sieve_extend.c ****     }
 6795              		.loc 1 742 9 view .LVU2336
 6796              	# sieve_extend.c:742:         distance += 2;
 742:sieve_extend.c ****     }
 6797              		.loc 1 742 18 is_stmt 0 view .LVU2337
 6798 297f 4D8D5606 		lea	r10, 6[r14]	# distance,
 6799              	.LVL332:
 742:sieve_extend.c ****     }
 6800              		.loc 1 742 18 view .LVU2338
 6801              	.LBE368:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6802              		.loc 1 734 11 is_stmt 1 view .LVU2339
 6803 2983 763D     		jbe	.L548	#,
 6804              	.LBB369:
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6805              		.loc 1 735 9 view .LVU2340
GAS LISTING /tmp/ccBvFgp2.s 			page 193


 6806              	# sieve_extend.c:735:         bitword_t source0 = bitarray[source_word  ];
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6807              		.loc 1 735 37 is_stmt 0 view .LVU2341
 6808 2985 4C8D1CCD 		lea	r11, 0[0+rcx*8]	# _452,
 6808      00000000 
 6809              	.LVL333:
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6810              		.loc 1 736 9 is_stmt 1 view .LVU2342
 6811              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6812              		.loc 1 736 19 is_stmt 0 view .LVU2343
 6813 298d 4E8B4C1B 		mov	r9, QWORD PTR 8[rbx+r11]	# source1, *_457
 6813      08
 6814              	.LVL334:
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6815              		.loc 1 737 9 is_stmt 1 view .LVU2344
 6816              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6817              		.loc 1 737 63 is_stmt 0 view .LVU2345
 6818 2992 C44281F7 		shlx	r8, r9, r15	# tmp674, source1, shift_flipped
 6818      C1
 6819              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6820              		.loc 1 737 42 view .LVU2346
 6821 2997 488B0CCB 		mov	rcx, QWORD PTR [rbx+rcx*8]	# *_453, *_453
 6822              	.LVL335:
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6823              		.loc 1 737 42 view .LVU2347
 6824 299b C46293F7 		shrx	r10, rcx, r13	# tmp672, *_453, shift
 6824      D1
 6825              	.LVL336:
 6826              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6827              		.loc 1 737 52 view .LVU2348
 6828 29a0 4D09C2   		or	r10, r8	# tmp675, tmp674
 6829 29a3 4C8914D3 		mov	QWORD PTR [rbx+rdx*8], r10	# *_462, tmp675
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6830              		.loc 1 738 9 is_stmt 1 view .LVU2349
 6831              	.LVL337:
 739:sieve_extend.c ****         copy_word += 2;
 6832              		.loc 1 739 9 view .LVU2350
 6833              	# sieve_extend.c:742:         distance += 2;
 742:sieve_extend.c ****     }
 6834              		.loc 1 742 18 is_stmt 0 view .LVU2351
 6835 29a7 4D8D5608 		lea	r10, 8[r14]	# distance,
 6836              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6837              		.loc 1 739 63 view .LVU2352
 6838 29ab 4A8B741B 		mov	rsi, QWORD PTR 16[rbx+r11]	# *_467, *_467
 6838      10
 6839              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6840              		.loc 1 739 42 view .LVU2353
 6841 29b0 C44293F7 		shrx	r11, r9, r13	# tmp678, source1, shift
 6841      D9
 6842              	.LVL338:
 6843              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
GAS LISTING /tmp/ccBvFgp2.s 			page 194


 739:sieve_extend.c ****         copy_word += 2;
 6844              		.loc 1 739 63 view .LVU2354
 6845 29b5 C4E281F7 		shlx	rdi, rsi, r15	# tmp676, *_467, shift_flipped
 6845      FE
 6846              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 6847              		.loc 1 739 52 view .LVU2355
 6848 29ba 4909FB   		or	r11, rdi	# tmp679, tmp676
 6849 29bd 4C895CD3 		mov	QWORD PTR 8[rbx+rdx*8], r11	# *_473, tmp679
 6849      08
 740:sieve_extend.c ****         source_word += 2;
 6850              		.loc 1 740 9 is_stmt 1 view .LVU2356
 741:sieve_extend.c ****         distance += 2;
 6851              		.loc 1 741 9 view .LVU2357
 742:sieve_extend.c ****     }
 6852              		.loc 1 742 9 view .LVU2358
 6853              	.LVL339:
 742:sieve_extend.c ****     }
 6854              		.loc 1 742 9 is_stmt 0 view .LVU2359
 6855              	.LBE369:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6856              		.loc 1 734 11 is_stmt 1 view .LVU2360
 6857              	.L548:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6858              		.loc 1 734 11 is_stmt 0 view .LVU2361
 6859 29c2 4C015424 		add	QWORD PTR 88[rsp], r10	# %sfp, distance
 6859      58
 6860 29c7 4C01D0   		add	rax, r10	# ivtmp.425, distance
 6861              	.L543:
 744:sieve_extend.c **** }
 6862              		.loc 1 744 5 is_stmt 1 view .LVU2362
 6863              	.LVL340:
 744:sieve_extend.c **** }
 6864              		.loc 1 744 5 is_stmt 0 view .LVU2363
 6865              	.LBE380:
 6866              	.LBE383:
 892:sieve_extend.c ****     copy_word += distance;
 6867              		.loc 1 892 5 is_stmt 1 view .LVU2364
 893:sieve_extend.c **** 
 6868              		.loc 1 893 5 view .LVU2365
 895:sieve_extend.c **** 
 6869              		.loc 1 895 6 view .LVU2366
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6870              		.loc 1 898 11 view .LVU2367
 6871              	# sieve_extend.c:898:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6872              		.loc 1 898 5 is_stmt 0 view .LVU2368
 6873 29ca 4C8B5424 		mov	r10, QWORD PTR 64[rsp]	# aligned_copy_word, %sfp
 6873      40
 6874 29cf 4939C2   		cmp	r10, rax	# aligned_copy_word, ivtmp.425
 6875 29d2 0F821004 		jb	.L549	#,
 6875      0000
 6876 29d8 4C8B5C24 		mov	r11, QWORD PTR 88[rsp]	# _183, %sfp
 6876      58
 6877 29dd 488D34C5 		lea	rsi, 0[0+rax*8]	# _220,
 6877      00000000 
 6878 29e5 488D7E20 		lea	rdi, 32[rsi]	# tmp691,
GAS LISTING /tmp/ccBvFgp2.s 			page 195


 6879 29e9 4A8D14DD 		lea	rdx, 0[0+r11*8]	# _226,
 6879      00000000 
 6880 29f1 4A8D0CDD 		lea	rcx, 40[0+r11*8]	# _218,
 6880      28000000 
 6881 29f9 4839D7   		cmp	rdi, rdx	# tmp691, _226
 6882 29fc 4D89DE   		mov	r14, r11	# _183, _183
 6883 29ff 410F9EC1 		setle	r9b	#, tmp693
 6884 2a03 4839F1   		cmp	rcx, rsi	# _218, _220
 6885 2a06 410F9EC0 		setle	r8b	#, tmp695
 6886 2a0a 4508C1   		or	r9b, r8b	# tmp693, tmp695
 6887 2a0d 0F84E50A 		je	.L550	#,
 6887      0000
 6888 2a13 4C89D1   		mov	rcx, r10	# tmp697, aligned_copy_word
 6889 2a16 4829C1   		sub	rcx, rax	# tmp697, ivtmp.425
 6890 2a19 4883F905 		cmp	rcx, 5	# tmp697,
 6891 2a1d 0F86D50A 		jbe	.L550	#,
 6891      0000
 6892 2a23 4801DA   		add	rdx, rbx	# vectp.363, bitarray
 6893 2a26 4983C201 		add	r10, 1	# ivtmp.425,
 6894 2a2a 48C1EA03 		shr	rdx, 3	# tmp702,
 6895 2a2e 4C89D7   		mov	rdi, r10	# niters.362, ivtmp.425
 6896 2a31 48F7DA   		neg	rdx	# tmp703
 6897 2a34 4829C7   		sub	rdi, rax	# niters.362, ivtmp.425
 6898 2a37 83E203   		and	edx, 3	# prolog_loop_niters.364,
 6899 2a3a 0F84A80A 		je	.L569	#,
 6899      0000
 6900              	.LVL341:
 899:sieve_extend.c ****     }
 6901              		.loc 1 899 9 is_stmt 1 view .LVU2369
 6902              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6903              		.loc 1 899 77 is_stmt 0 view .LVU2370
 6904 2a40 4D8D4301 		lea	r8, 1[r11]	# tmp793,
 6905              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6906              		.loc 1 899 94 view .LVU2371
 6907 2a44 4E8B5CDB 		mov	r11, QWORD PTR 8[rbx+r11*8]	# *_573, *_573
 6907      08
 6908              	.LVL342:
 899:sieve_extend.c ****     }
 6909              		.loc 1 899 94 view .LVU2372
 6910 2a49 C44281F7 		shlx	r9, r11, r15	# tmp704,, shift_flipped
 6910      CB
 6911              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6912              		.loc 1 899 56 view .LVU2373
 6913 2a4e 4E8B1CF3 		mov	r11, QWORD PTR [rbx+r14*8]	# *_568, *_568
 6914              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6915              		.loc 1 899 77 view .LVU2374
 6916 2a52 4C89C1   		mov	rcx, r8	# source_word, tmp793
 6917              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6918              		.loc 1 899 56 view .LVU2375
 6919 2a55 4C895C24 		mov	QWORD PTR 56[rsp], r11	# %sfp, *_568
 6919      38
 6920 2a5a C44293F7 		shrx	r11, r11, r13	# tmp706,, shift
GAS LISTING /tmp/ccBvFgp2.s 			page 196


 6920      DB
 6921              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6922              		.loc 1 899 66 view .LVU2376
 6923 2a5f 4D09D9   		or	r9, r11	# tmp708, tmp706
 6924 2a62 4883FA01 		cmp	rdx, 1	# prolog_loop_niters.364,
 6925 2a66 4C890C33 		mov	QWORD PTR [rbx+rsi], r9	# *_577, tmp708
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6926              		.loc 1 898 43 is_stmt 1 view .LVU2377
 6927              	# sieve_extend.c:898:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6928              		.loc 1 898 52 is_stmt 0 view .LVU2378
 6929 2a6a 488D7001 		lea	rsi, 1[rax]	# copy_word,
 6930              	.LVL343:
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6931              		.loc 1 898 11 is_stmt 1 view .LVU2379
 6932 2a6e 7454     		je	.L551	#,
 899:sieve_extend.c ****     }
 6933              		.loc 1 899 9 view .LVU2380
 6934              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6935              		.loc 1 899 40 is_stmt 0 view .LVU2381
 6936 2a70 4E8D1CC5 		lea	r11, 0[0+r8*8]	# _586,
 6936      00000000 
 6937              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6938              		.loc 1 899 94 view .LVU2382
 6939 2a78 C42281F7 		shlx	r9, QWORD PTR 8[rbx+r11], r15	# tmp709, *_592, shift_flipped
 6939      4C1B08
 6940              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6941              		.loc 1 899 56 view .LVU2383
 6942 2a7f 4E8B1C1B 		mov	r11, QWORD PTR [rbx+r11]	# *_587, *_587
 6943 2a83 C44293F7 		shrx	r11, r11, r13	# tmp711, *_587, shift
 6943      DB
 6944              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6945              		.loc 1 899 66 view .LVU2384
 6946 2a88 4D09D9   		or	r9, r11	# tmp713, tmp711
 6947 2a8b 4883FA03 		cmp	rdx, 3	# prolog_loop_niters.364,
 6948 2a8f 4C890CF3 		mov	QWORD PTR [rbx+rsi*8], r9	# *_596, tmp713
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6949              		.loc 1 898 43 is_stmt 1 view .LVU2385
 6950              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6951              		.loc 1 899 77 is_stmt 0 view .LVU2386
 6952 2a93 498D4E02 		lea	rcx, 2[r14]	# source_word,
 6953              	.LVL344:
 6954              	# sieve_extend.c:898:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6955              		.loc 1 898 52 view .LVU2387
 6956 2a97 488D7002 		lea	rsi, 2[rax]	# copy_word,
 6957              	.LVL345:
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6958              		.loc 1 898 11 is_stmt 1 view .LVU2388
 6959 2a9b 7527     		jne	.L551	#,
 899:sieve_extend.c ****     }
GAS LISTING /tmp/ccBvFgp2.s 			page 197


 6960              		.loc 1 899 9 view .LVU2389
 6961              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6962              		.loc 1 899 40 is_stmt 0 view .LVU2390
 6963 2a9d 4C8D1CCD 		lea	r11, 0[0+rcx*8]	# _261,
 6963      00000000 
 6964              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6965              		.loc 1 899 77 view .LVU2391
 6966 2aa5 498D4E03 		lea	rcx, 3[r14]	# source_word,
 6967              	.LVL346:
 6968              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6969              		.loc 1 899 56 view .LVU2392
 6970 2aa9 4E8B0C1B 		mov	r9, QWORD PTR [rbx+r11]	# *_262, *_262
 6971              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6972              		.loc 1 899 94 view .LVU2393
 6973 2aad C42281F7 		shlx	r14, QWORD PTR 8[rbx+r11], r15	# tmp714, *_267, shift_flipped
 6973      741B08
 6974              	.LVL347:
 6975              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6976              		.loc 1 899 56 view .LVU2394
 6977 2ab4 C44293F7 		shrx	r11, r9, r13	# tmp716, *_262, shift
 6977      D9
 6978              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 6979              		.loc 1 899 66 view .LVU2395
 6980 2ab9 4D09DE   		or	r14, r11	# tmp718, tmp716
 6981 2abc 4C8934F3 		mov	QWORD PTR [rbx+rsi*8], r14	# *_271, tmp718
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6982              		.loc 1 898 43 is_stmt 1 view .LVU2396
 6983              	# sieve_extend.c:898:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6984              		.loc 1 898 52 is_stmt 0 view .LVU2397
 6985 2ac0 488D7003 		lea	rsi, 3[rax]	# copy_word,
 6986              	.LVL348:
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6987              		.loc 1 898 11 is_stmt 1 view .LVU2398
 6988              	.L551:
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6989              		.loc 1 898 11 is_stmt 0 view .LVU2399
 6990 2ac4 4829D7   		sub	rdi, rdx	# niters.365, prolog_loop_niters.364
 6991 2ac7 C441796E 		vmovd	xmm10, r12d	# _12, _12
 6991      D4
 6992 2acc 4989FB   		mov	r11, rdi	# bnd.366, niters.365
 6993 2acf 4801D0   		add	rax, rdx	# tmp724, prolog_loop_niters.364
 6994 2ad2 49C1EB02 		shr	r11, 2	# bnd.366,
 6995 2ad6 4901D0   		add	r8, rdx	# tmp722, prolog_loop_niters.364
 6996 2ad9 49C1E305 		sal	r11, 5	# _733,
 6997 2add 4E8D04C3 		lea	r8, [rbx+r8*8]	# vectp.375,
 6998 2ae1 4C8B7424 		mov	r14, QWORD PTR 88[rsp]	# _183, %sfp
 6998      58
 6999 2ae6 4D8D63E0 		lea	r12, -32[r11]	# tmp818,
 7000 2aea C5F96E54 		vmovd	xmm2, DWORD PTR 72[rsp]	# _18, %sfp
 7000      2448
GAS LISTING /tmp/ccBvFgp2.s 			page 198


 7001 2af0 49C1EC05 		shr	r12, 5	# tmp816,
 7002 2af4 4983C401 		add	r12, 1	# tmp819,
 7003 2af8 4901D6   		add	r14, rdx	# _183, prolog_loop_niters.364
 7004 2afb 488D14C3 		lea	rdx, [rbx+rax*8]	# vectp.380,
 7005              	# sieve_extend.c:892:     source_word += distance;
 892:sieve_extend.c ****     copy_word += distance;
 7006              		.loc 1 892 17 view .LVU2400
 7007 2aff 31C0     		xor	eax, eax	# ivtmp.441
 7008 2b01 4183E407 		and	r12d, 7	# tmp820,
 7009 2b05 4E8D0CF3 		lea	r9, [rbx+r14*8]	# vectp.371,
 7010 2b09 0F842801 		je	.L553	#,
 7010      0000
 7011 2b0f 4983FC01 		cmp	r12, 1	# tmp820,
 7012 2b13 0F84F200 		je	.L701	#,
 7012      0000
 7013 2b19 4983FC02 		cmp	r12, 2	# tmp820,
 7014 2b1d 0F84C600 		je	.L702	#,
 7014      0000
 7015 2b23 4983FC03 		cmp	r12, 3	# tmp820,
 7016 2b27 0F849900 		je	.L703	#,
 7016      0000
 7017 2b2d 4983FC04 		cmp	r12, 4	# tmp820,
 7018 2b31 7470     		je	.L704	#,
 7019 2b33 4983FC05 		cmp	r12, 5	# tmp820,
 7020 2b37 7448     		je	.L705	#,
 7021 2b39 4983FC06 		cmp	r12, 6	# tmp820,
 7022 2b3d 7420     		je	.L706	#,
 899:sieve_extend.c ****     }
 7023              		.loc 1 899 9 is_stmt 1 view .LVU2401
 7024              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7025              		.loc 1 899 56 is_stmt 0 view .LVU2402
 7026 2b3f C4C17D6F 		vmovdqa	ymm3, YMMWORD PTR [r9]	# tmp1411, MEM[base: vectp.371_307, index: ivtmp.441_731, offset: 0
 7026      19
 7027 2b44 B8200000 		mov	eax, 32	# ivtmp.441,
 7027      00
 7028              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7029              		.loc 1 899 94 view .LVU2403
 7030 2b49 C4C17E6F 		vmovdqu	ymm4, YMMWORD PTR [r8]	# tmp1412, MEM[base: vectp.375_314, index: ivtmp.441_731, offset: 0
 7030      20
 7031              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7032              		.loc 1 899 56 view .LVU2404
 7033 2b4e C44165D3 		vpsrlq	ymm11, ymm3, xmm10	# vect__38.373, tmp1411, _12
 7033      DA
 7034              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7035              		.loc 1 899 94 view .LVU2405
 7036 2b53 C5DDF3F2 		vpsllq	ymm6, ymm4, xmm2	# vect__43.377, tmp1412, _18
 7037              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7038              		.loc 1 899 66 view .LVU2406
 7039 2b57 C525EBE6 		vpor	ymm12, ymm11, ymm6	# vect__46.378, vect__38.373, vect__43.377
 7040              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7041              		.loc 1 899 29 view .LVU2407
GAS LISTING /tmp/ccBvFgp2.s 			page 199


 7042 2b5b C57E7F22 		vmovdqu	YMMWORD PTR [rdx], ymm12	# MEM[base: vectp.380_323, index: ivtmp.441_731, offset: 0B], vec
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7043              		.loc 1 898 43 is_stmt 1 view .LVU2408
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7044              		.loc 1 898 11 view .LVU2409
 7045              	.L706:
 899:sieve_extend.c ****     }
 7046              		.loc 1 899 9 view .LVU2410
 7047              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7048              		.loc 1 899 56 is_stmt 0 view .LVU2411
 7049 2b5f C4417D6F 		vmovdqa	ymm13, YMMWORD PTR [r9+rax]	# tmp1413, MEM[base: vectp.371_307, index: ivtmp.441_731, offs
 7049      2C01
 7050              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7051              		.loc 1 899 94 view .LVU2412
 7052 2b65 C4417E6F 		vmovdqu	ymm15, YMMWORD PTR [r8+rax]	# tmp1414, MEM[base: vectp.375_314, index: ivtmp.441_731, offs
 7052      3C00
 7053              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7054              		.loc 1 899 56 view .LVU2413
 7055 2b6b C44115D3 		vpsrlq	ymm14, ymm13, xmm10	# vect__38.373, tmp1413, _12
 7055      F2
 7056              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7057              		.loc 1 899 94 view .LVU2414
 7058 2b70 C585F3CA 		vpsllq	ymm1, ymm15, xmm2	# vect__43.377, tmp1414, _18
 7059              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7060              		.loc 1 899 66 view .LVU2415
 7061 2b74 C50DEBC1 		vpor	ymm8, ymm14, ymm1	# vect__46.378, vect__38.373, vect__43.377
 7062              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7063              		.loc 1 899 29 view .LVU2416
 7064 2b78 C57E7F04 		vmovdqu	YMMWORD PTR [rdx+rax], ymm8	# MEM[base: vectp.380_323, index: ivtmp.441_731, offset: 0B], 
 7064      02
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7065              		.loc 1 898 43 is_stmt 1 view .LVU2417
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7066              		.loc 1 898 11 view .LVU2418
 7067 2b7d 4883C020 		add	rax, 32	# ivtmp.441,
 7068              	.L705:
 899:sieve_extend.c ****     }
 7069              		.loc 1 899 9 view .LVU2419
 7070              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7071              		.loc 1 899 56 is_stmt 0 view .LVU2420
 7072 2b81 C4C17D6F 		vmovdqa	ymm0, YMMWORD PTR [r9+rax]	# tmp1415, MEM[base: vectp.371_307, index: ivtmp.441_731, offse
 7072      0401
 7073              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7074              		.loc 1 899 94 view .LVU2421
 7075 2b87 C4417E6F 		vmovdqu	ymm9, YMMWORD PTR [r8+rax]	# tmp1416, MEM[base: vectp.375_314, index: ivtmp.441_731, offse
 7075      0C00
 7076              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7077              		.loc 1 899 56 view .LVU2422
GAS LISTING /tmp/ccBvFgp2.s 			page 200


 7078 2b8d C4C17DD3 		vpsrlq	ymm5, ymm0, xmm10	# vect__38.373, tmp1415, _12
 7078      EA
 7079              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7080              		.loc 1 899 94 view .LVU2423
 7081 2b92 C5B5F3FA 		vpsllq	ymm7, ymm9, xmm2	# vect__43.377, tmp1416, _18
 7082              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7083              		.loc 1 899 66 view .LVU2424
 7084 2b96 C5D5EBDF 		vpor	ymm3, ymm5, ymm7	# vect__46.378, vect__38.373, vect__43.377
 7085              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7086              		.loc 1 899 29 view .LVU2425
 7087 2b9a C5FE7F1C 		vmovdqu	YMMWORD PTR [rdx+rax], ymm3	# MEM[base: vectp.380_323, index: ivtmp.441_731, offset: 0B], 
 7087      02
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7088              		.loc 1 898 43 is_stmt 1 view .LVU2426
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7089              		.loc 1 898 11 view .LVU2427
 7090 2b9f 4883C020 		add	rax, 32	# ivtmp.441,
 7091              	.L704:
 899:sieve_extend.c ****     }
 7092              		.loc 1 899 9 view .LVU2428
 7093              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7094              		.loc 1 899 56 is_stmt 0 view .LVU2429
 7095 2ba3 C4417D6F 		vmovdqa	ymm11, YMMWORD PTR [r9+rax]	# tmp1417, MEM[base: vectp.371_307, index: ivtmp.441_731, offs
 7095      1C01
 7096              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7097              		.loc 1 899 94 view .LVU2430
 7098 2ba9 C4C17E6F 		vmovdqu	ymm6, YMMWORD PTR [r8+rax]	# tmp1418, MEM[base: vectp.375_314, index: ivtmp.441_731, offse
 7098      3400
 7099              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7100              		.loc 1 899 56 view .LVU2431
 7101 2baf C4C125D3 		vpsrlq	ymm4, ymm11, xmm10	# vect__38.373, tmp1417, _12
 7101      E2
 7102              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7103              		.loc 1 899 94 view .LVU2432
 7104 2bb4 C54DF3E2 		vpsllq	ymm12, ymm6, xmm2	# vect__43.377, tmp1418, _18
 7105              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7106              		.loc 1 899 66 view .LVU2433
 7107 2bb8 C4415DEB 		vpor	ymm13, ymm4, ymm12	# vect__46.378, vect__38.373, vect__43.377
 7107      EC
 7108              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7109              		.loc 1 899 29 view .LVU2434
 7110 2bbd C57E7F2C 		vmovdqu	YMMWORD PTR [rdx+rax], ymm13	# MEM[base: vectp.380_323, index: ivtmp.441_731, offset: 0B],
 7110      02
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7111              		.loc 1 898 43 is_stmt 1 view .LVU2435
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7112              		.loc 1 898 11 view .LVU2436
 7113 2bc2 4883C020 		add	rax, 32	# ivtmp.441,
GAS LISTING /tmp/ccBvFgp2.s 			page 201


 7114              	.L703:
 899:sieve_extend.c ****     }
 7115              		.loc 1 899 9 view .LVU2437
 7116              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7117              		.loc 1 899 56 is_stmt 0 view .LVU2438
 7118 2bc6 C4417D6F 		vmovdqa	ymm14, YMMWORD PTR [r9+rax]	# tmp1419, MEM[base: vectp.371_307, index: ivtmp.441_731, offs
 7118      3401
 7119              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7120              		.loc 1 899 94 view .LVU2439
 7121 2bcc C4C17E6F 		vmovdqu	ymm1, YMMWORD PTR [r8+rax]	# tmp1420, MEM[base: vectp.375_314, index: ivtmp.441_731, offse
 7121      0C00
 7122              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7123              		.loc 1 899 56 view .LVU2440
 7124 2bd2 C4410DD3 		vpsrlq	ymm15, ymm14, xmm10	# vect__38.373, tmp1419, _12
 7124      FA
 7125              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7126              		.loc 1 899 94 view .LVU2441
 7127 2bd7 C575F3C2 		vpsllq	ymm8, ymm1, xmm2	# vect__43.377, tmp1420, _18
 7128              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7129              		.loc 1 899 66 view .LVU2442
 7130 2bdb C4C105EB 		vpor	ymm0, ymm15, ymm8	# vect__46.378, vect__38.373, vect__43.377
 7130      C0
 7131              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7132              		.loc 1 899 29 view .LVU2443
 7133 2be0 C5FE7F04 		vmovdqu	YMMWORD PTR [rdx+rax], ymm0	# MEM[base: vectp.380_323, index: ivtmp.441_731, offset: 0B], 
 7133      02
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7134              		.loc 1 898 43 is_stmt 1 view .LVU2444
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7135              		.loc 1 898 11 view .LVU2445
 7136 2be5 4883C020 		add	rax, 32	# ivtmp.441,
 7137              	.L702:
 899:sieve_extend.c ****     }
 7138              		.loc 1 899 9 view .LVU2446
 7139              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7140              		.loc 1 899 56 is_stmt 0 view .LVU2447
 7141 2be9 C4C17D6F 		vmovdqa	ymm5, YMMWORD PTR [r9+rax]	# tmp1421, MEM[base: vectp.371_307, index: ivtmp.441_731, offse
 7141      2C01
 7142              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7143              		.loc 1 899 94 view .LVU2448
 7144 2bef C4C17E6F 		vmovdqu	ymm7, YMMWORD PTR [r8+rax]	# tmp1422, MEM[base: vectp.375_314, index: ivtmp.441_731, offse
 7144      3C00
 7145              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7146              		.loc 1 899 56 view .LVU2449
 7147 2bf5 C44155D3 		vpsrlq	ymm9, ymm5, xmm10	# vect__38.373, tmp1421, _12
 7147      CA
 7148              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
GAS LISTING /tmp/ccBvFgp2.s 			page 202


 7149              		.loc 1 899 94 view .LVU2450
 7150 2bfa C5C5F3DA 		vpsllq	ymm3, ymm7, xmm2	# vect__43.377, tmp1422, _18
 7151              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7152              		.loc 1 899 66 view .LVU2451
 7153 2bfe C535EBDB 		vpor	ymm11, ymm9, ymm3	# vect__46.378, vect__38.373, vect__43.377
 7154              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7155              		.loc 1 899 29 view .LVU2452
 7156 2c02 C57E7F1C 		vmovdqu	YMMWORD PTR [rdx+rax], ymm11	# MEM[base: vectp.380_323, index: ivtmp.441_731, offset: 0B],
 7156      02
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7157              		.loc 1 898 43 is_stmt 1 view .LVU2453
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7158              		.loc 1 898 11 view .LVU2454
 7159 2c07 4883C020 		add	rax, 32	# ivtmp.441,
 7160              	.L701:
 899:sieve_extend.c ****     }
 7161              		.loc 1 899 9 view .LVU2455
 7162              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7163              		.loc 1 899 56 is_stmt 0 view .LVU2456
 7164 2c0b C4C17D6F 		vmovdqa	ymm4, YMMWORD PTR [r9+rax]	# tmp1423, MEM[base: vectp.371_307, index: ivtmp.441_731, offse
 7164      2401
 7165              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7166              		.loc 1 899 94 view .LVU2457
 7167 2c11 C4417E6F 		vmovdqu	ymm12, YMMWORD PTR [r8+rax]	# tmp1424, MEM[base: vectp.375_314, index: ivtmp.441_731, offs
 7167      2400
 7168              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7169              		.loc 1 899 56 view .LVU2458
 7170 2c17 C4C15DD3 		vpsrlq	ymm6, ymm4, xmm10	# vect__38.373, tmp1423, _12
 7170      F2
 7171              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7172              		.loc 1 899 94 view .LVU2459
 7173 2c1c C51DF3EA 		vpsllq	ymm13, ymm12, xmm2	# vect__43.377, tmp1424, _18
 7174              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7175              		.loc 1 899 66 view .LVU2460
 7176 2c20 C4414DEB 		vpor	ymm14, ymm6, ymm13	# vect__46.378, vect__38.373, vect__43.377
 7176      F5
 7177              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7178              		.loc 1 899 29 view .LVU2461
 7179 2c25 C57E7F34 		vmovdqu	YMMWORD PTR [rdx+rax], ymm14	# MEM[base: vectp.380_323, index: ivtmp.441_731, offset: 0B],
 7179      02
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7180              		.loc 1 898 43 is_stmt 1 view .LVU2462
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7181              		.loc 1 898 11 view .LVU2463
 7182 2c2a 4883C020 		add	rax, 32	# ivtmp.441,
 7183 2c2e 4C39D8   		cmp	rax, r11	# ivtmp.441, _733
 7184 2c31 0F843B01 		je	.L782	#,
 7184      0000
 7185              	.L553:
GAS LISTING /tmp/ccBvFgp2.s 			page 203


 899:sieve_extend.c ****     }
 7186              		.loc 1 899 9 discriminator 2 view .LVU2464
 7187              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7188              		.loc 1 899 56 is_stmt 0 discriminator 2 view .LVU2465
 7189 2c37 C4417D6F 		vmovdqa	ymm15, YMMWORD PTR [r9+rax]	# tmp1348, MEM[base: vectp.371_307, index: ivtmp.441_731, offs
 7189      3C01
 7190              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7191              		.loc 1 899 94 discriminator 2 view .LVU2466
 7192 2c3d C4417E6F 		vmovdqu	ymm8, YMMWORD PTR [r8+rax]	# tmp1349, MEM[base: vectp.375_314, index: ivtmp.441_731, offse
 7192      0400
 7193              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7194              		.loc 1 899 56 discriminator 2 view .LVU2467
 7195 2c43 C4C105D3 		vpsrlq	ymm1, ymm15, xmm10	# vect__38.373, tmp1348, _12
 7195      CA
 7196              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7197              		.loc 1 899 94 discriminator 2 view .LVU2468
 7198 2c48 C5BDF3C2 		vpsllq	ymm0, ymm8, xmm2	# vect__43.377, tmp1349, _18
 7199              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7200              		.loc 1 899 66 discriminator 2 view .LVU2469
 7201 2c4c C5F5EBE8 		vpor	ymm5, ymm1, ymm0	# vect__46.378, vect__38.373, vect__43.377
 7202              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7203              		.loc 1 899 29 discriminator 2 view .LVU2470
 7204 2c50 C5FE7F2C 		vmovdqu	YMMWORD PTR [rdx+rax], ymm5	# MEM[base: vectp.380_323, index: ivtmp.441_731, offset: 0B], 
 7204      02
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7205              		.loc 1 898 43 is_stmt 1 discriminator 2 view .LVU2471
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7206              		.loc 1 898 11 discriminator 2 view .LVU2472
 899:sieve_extend.c ****     }
 7207              		.loc 1 899 9 discriminator 2 view .LVU2473
 7208              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7209              		.loc 1 899 56 is_stmt 0 discriminator 2 view .LVU2474
 7210 2c55 C4417D6F 		vmovdqa	ymm9, YMMWORD PTR 32[r9+rax]	# tmp1350, MEM[base: vectp.371_307, index: ivtmp.441_731, off
 7210      4C0120
 7211              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7212              		.loc 1 899 94 discriminator 2 view .LVU2475
 7213 2c5c C4C17E6F 		vmovdqu	ymm7, YMMWORD PTR 32[r8+rax]	# tmp1351, MEM[base: vectp.375_314, index: ivtmp.441_731, off
 7213      7C0020
 7214              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7215              		.loc 1 899 56 discriminator 2 view .LVU2476
 7216 2c63 C44135D3 		vpsrlq	ymm11, ymm9, xmm10	# vect__38.373, tmp1350, _12
 7216      DA
 7217              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7218              		.loc 1 899 94 discriminator 2 view .LVU2477
 7219 2c68 C5C5F3DA 		vpsllq	ymm3, ymm7, xmm2	# vect__43.377, tmp1351, _18
 7220              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
GAS LISTING /tmp/ccBvFgp2.s 			page 204


 7221              		.loc 1 899 66 discriminator 2 view .LVU2478
 7222 2c6c C5A5EBE3 		vpor	ymm4, ymm11, ymm3	# vect__46.378, vect__38.373, vect__43.377
 7223              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7224              		.loc 1 899 29 discriminator 2 view .LVU2479
 7225 2c70 C5FE7F64 		vmovdqu	YMMWORD PTR 32[rdx+rax], ymm4	# MEM[base: vectp.380_323, index: ivtmp.441_731, offset: 0B]
 7225      0220
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7226              		.loc 1 898 43 is_stmt 1 discriminator 2 view .LVU2480
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7227              		.loc 1 898 11 discriminator 2 view .LVU2481
 899:sieve_extend.c ****     }
 7228              		.loc 1 899 9 discriminator 2 view .LVU2482
 7229              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7230              		.loc 1 899 56 is_stmt 0 discriminator 2 view .LVU2483
 7231 2c76 C4C17D6F 		vmovdqa	ymm6, YMMWORD PTR 64[r9+rax]	# tmp1352, MEM[base: vectp.371_307, index: ivtmp.441_731, off
 7231      740140
 7232              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7233              		.loc 1 899 94 discriminator 2 view .LVU2484
 7234 2c7d C4417E6F 		vmovdqu	ymm13, YMMWORD PTR 64[r8+rax]	# tmp1353, MEM[base: vectp.375_314, index: ivtmp.441_731, of
 7234      6C0040
 7235              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7236              		.loc 1 899 56 discriminator 2 view .LVU2485
 7237 2c84 C4414DD3 		vpsrlq	ymm12, ymm6, xmm10	# vect__38.373, tmp1352, _12
 7237      E2
 7238              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7239              		.loc 1 899 94 discriminator 2 view .LVU2486
 7240 2c89 C515F3F2 		vpsllq	ymm14, ymm13, xmm2	# vect__43.377, tmp1353, _18
 7241              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7242              		.loc 1 899 66 discriminator 2 view .LVU2487
 7243 2c8d C4411DEB 		vpor	ymm15, ymm12, ymm14	# vect__46.378, vect__38.373, vect__43.377
 7243      FE
 7244              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7245              		.loc 1 899 29 discriminator 2 view .LVU2488
 7246 2c92 C57E7F7C 		vmovdqu	YMMWORD PTR 64[rdx+rax], ymm15	# MEM[base: vectp.380_323, index: ivtmp.441_731, offset: 0B
 7246      0240
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7247              		.loc 1 898 43 is_stmt 1 discriminator 2 view .LVU2489
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7248              		.loc 1 898 11 discriminator 2 view .LVU2490
 899:sieve_extend.c ****     }
 7249              		.loc 1 899 9 discriminator 2 view .LVU2491
 7250              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7251              		.loc 1 899 56 is_stmt 0 discriminator 2 view .LVU2492
 7252 2c98 C4C17D6F 		vmovdqa	ymm1, YMMWORD PTR 96[r9+rax]	# tmp1354, MEM[base: vectp.371_307, index: ivtmp.441_731, off
 7252      4C0160
 7253              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7254              		.loc 1 899 94 discriminator 2 view .LVU2493
 7255 2c9f C4C17E6F 		vmovdqu	ymm0, YMMWORD PTR 96[r8+rax]	# tmp1355, MEM[base: vectp.375_314, index: ivtmp.441_731, off
GAS LISTING /tmp/ccBvFgp2.s 			page 205


 7255      440060
 7256              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7257              		.loc 1 899 56 discriminator 2 view .LVU2494
 7258 2ca6 C44175D3 		vpsrlq	ymm8, ymm1, xmm10	# vect__38.373, tmp1354, _12
 7258      C2
 7259              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7260              		.loc 1 899 94 discriminator 2 view .LVU2495
 7261 2cab C5FDF3EA 		vpsllq	ymm5, ymm0, xmm2	# vect__43.377, tmp1355, _18
 7262              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7263              		.loc 1 899 66 discriminator 2 view .LVU2496
 7264 2caf C53DEBCD 		vpor	ymm9, ymm8, ymm5	# vect__46.378, vect__38.373, vect__43.377
 7265              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7266              		.loc 1 899 29 discriminator 2 view .LVU2497
 7267 2cb3 C57E7F4C 		vmovdqu	YMMWORD PTR 96[rdx+rax], ymm9	# MEM[base: vectp.380_323, index: ivtmp.441_731, offset: 0B]
 7267      0260
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7268              		.loc 1 898 43 is_stmt 1 discriminator 2 view .LVU2498
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7269              		.loc 1 898 11 discriminator 2 view .LVU2499
 899:sieve_extend.c ****     }
 7270              		.loc 1 899 9 discriminator 2 view .LVU2500
 7271              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7272              		.loc 1 899 56 is_stmt 0 discriminator 2 view .LVU2501
 7273 2cb9 C4417D6F 		vmovdqa	ymm11, YMMWORD PTR 128[r9+rax]	# tmp1356, MEM[base: vectp.371_307, index: ivtmp.441_731, o
 7273      9C018000 
 7273      0000
 7274              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7275              		.loc 1 899 94 discriminator 2 view .LVU2502
 7276 2cc3 C4C17E6F 		vmovdqu	ymm7, YMMWORD PTR 128[r8+rax]	# tmp1357, MEM[base: vectp.375_314, index: ivtmp.441_731, of
 7276      BC008000 
 7276      0000
 7277              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7278              		.loc 1 899 56 discriminator 2 view .LVU2503
 7279 2ccd C4C125D3 		vpsrlq	ymm4, ymm11, xmm10	# vect__38.373, tmp1356, _12
 7279      E2
 7280              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7281              		.loc 1 899 94 discriminator 2 view .LVU2504
 7282 2cd2 C5C5F3DA 		vpsllq	ymm3, ymm7, xmm2	# vect__43.377, tmp1357, _18
 7283              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7284              		.loc 1 899 66 discriminator 2 view .LVU2505
 7285 2cd6 C5DDEBF3 		vpor	ymm6, ymm4, ymm3	# vect__46.378, vect__38.373, vect__43.377
 7286              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7287              		.loc 1 899 29 discriminator 2 view .LVU2506
 7288 2cda C5FE7FB4 		vmovdqu	YMMWORD PTR 128[rdx+rax], ymm6	# MEM[base: vectp.380_323, index: ivtmp.441_731, offset: 0B
 7288      02800000 
 7288      00
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
GAS LISTING /tmp/ccBvFgp2.s 			page 206


 7289              		.loc 1 898 43 is_stmt 1 discriminator 2 view .LVU2507
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7290              		.loc 1 898 11 discriminator 2 view .LVU2508
 899:sieve_extend.c ****     }
 7291              		.loc 1 899 9 discriminator 2 view .LVU2509
 7292              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7293              		.loc 1 899 56 is_stmt 0 discriminator 2 view .LVU2510
 7294 2ce3 C4417D6F 		vmovdqa	ymm12, YMMWORD PTR 160[r9+rax]	# tmp1358, MEM[base: vectp.371_307, index: ivtmp.441_731, o
 7294      A401A000 
 7294      0000
 7295              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7296              		.loc 1 899 94 discriminator 2 view .LVU2511
 7297 2ced C4417E6F 		vmovdqu	ymm14, YMMWORD PTR 160[r8+rax]	# tmp1359, MEM[base: vectp.375_314, index: ivtmp.441_731, o
 7297      B400A000 
 7297      0000
 7298              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7299              		.loc 1 899 56 discriminator 2 view .LVU2512
 7300 2cf7 C4411DD3 		vpsrlq	ymm13, ymm12, xmm10	# vect__38.373, tmp1358, _12
 7300      EA
 7301              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7302              		.loc 1 899 94 discriminator 2 view .LVU2513
 7303 2cfc C50DF3FA 		vpsllq	ymm15, ymm14, xmm2	# vect__43.377, tmp1359, _18
 7304              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7305              		.loc 1 899 66 discriminator 2 view .LVU2514
 7306 2d00 C4C115EB 		vpor	ymm1, ymm13, ymm15	# vect__46.378, vect__38.373, vect__43.377
 7306      CF
 7307              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7308              		.loc 1 899 29 discriminator 2 view .LVU2515
 7309 2d05 C5FE7F8C 		vmovdqu	YMMWORD PTR 160[rdx+rax], ymm1	# MEM[base: vectp.380_323, index: ivtmp.441_731, offset: 0B
 7309      02A00000 
 7309      00
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7310              		.loc 1 898 43 is_stmt 1 discriminator 2 view .LVU2516
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7311              		.loc 1 898 11 discriminator 2 view .LVU2517
 899:sieve_extend.c ****     }
 7312              		.loc 1 899 9 discriminator 2 view .LVU2518
 7313              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7314              		.loc 1 899 56 is_stmt 0 discriminator 2 view .LVU2519
 7315 2d0e C4417D6F 		vmovdqa	ymm8, YMMWORD PTR 192[r9+rax]	# tmp1360, MEM[base: vectp.371_307, index: ivtmp.441_731, of
 7315      8401C000 
 7315      0000
 7316              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7317              		.loc 1 899 94 discriminator 2 view .LVU2520
 7318 2d18 C4C17E6F 		vmovdqu	ymm5, YMMWORD PTR 192[r8+rax]	# tmp1361, MEM[base: vectp.375_314, index: ivtmp.441_731, of
 7318      AC00C000 
 7318      0000
 7319              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
GAS LISTING /tmp/ccBvFgp2.s 			page 207


 7320              		.loc 1 899 56 discriminator 2 view .LVU2521
 7321 2d22 C4C13DD3 		vpsrlq	ymm0, ymm8, xmm10	# vect__38.373, tmp1360, _12
 7321      C2
 7322              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7323              		.loc 1 899 94 discriminator 2 view .LVU2522
 7324 2d27 C555F3CA 		vpsllq	ymm9, ymm5, xmm2	# vect__43.377, tmp1361, _18
 7325              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7326              		.loc 1 899 66 discriminator 2 view .LVU2523
 7327 2d2b C4417DEB 		vpor	ymm11, ymm0, ymm9	# vect__46.378, vect__38.373, vect__43.377
 7327      D9
 7328              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7329              		.loc 1 899 29 discriminator 2 view .LVU2524
 7330 2d30 C57E7F9C 		vmovdqu	YMMWORD PTR 192[rdx+rax], ymm11	# MEM[base: vectp.380_323, index: ivtmp.441_731, offset: 0
 7330      02C00000 
 7330      00
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7331              		.loc 1 898 43 is_stmt 1 discriminator 2 view .LVU2525
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7332              		.loc 1 898 11 discriminator 2 view .LVU2526
 899:sieve_extend.c ****     }
 7333              		.loc 1 899 9 discriminator 2 view .LVU2527
 7334              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7335              		.loc 1 899 56 is_stmt 0 discriminator 2 view .LVU2528
 7336 2d39 C4C17D6F 		vmovdqa	ymm4, YMMWORD PTR 224[r9+rax]	# tmp1362, MEM[base: vectp.371_307, index: ivtmp.441_731, of
 7336      A401E000 
 7336      0000
 7337              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7338              		.loc 1 899 94 discriminator 2 view .LVU2529
 7339 2d43 C4C17E6F 		vmovdqu	ymm7, YMMWORD PTR 224[r8+rax]	# tmp1363, MEM[base: vectp.375_314, index: ivtmp.441_731, of
 7339      BC00E000 
 7339      0000
 7340              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7341              		.loc 1 899 56 discriminator 2 view .LVU2530
 7342 2d4d C4C15DD3 		vpsrlq	ymm6, ymm4, xmm10	# vect__38.373, tmp1362, _12
 7342      F2
 7343              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7344              		.loc 1 899 94 discriminator 2 view .LVU2531
 7345 2d52 C5C5F3DA 		vpsllq	ymm3, ymm7, xmm2	# vect__43.377, tmp1363, _18
 7346              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7347              		.loc 1 899 66 discriminator 2 view .LVU2532
 7348 2d56 C54DEBE3 		vpor	ymm12, ymm6, ymm3	# vect__46.378, vect__38.373, vect__43.377
 7349              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7350              		.loc 1 899 29 discriminator 2 view .LVU2533
 7351 2d5a C57E7FA4 		vmovdqu	YMMWORD PTR 224[rdx+rax], ymm12	# MEM[base: vectp.380_323, index: ivtmp.441_731, offset: 0
 7351      02E00000 
 7351      00
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7352              		.loc 1 898 43 is_stmt 1 discriminator 2 view .LVU2534
GAS LISTING /tmp/ccBvFgp2.s 			page 208


 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7353              		.loc 1 898 11 discriminator 2 view .LVU2535
 7354 2d63 48050001 		add	rax, 256	# ivtmp.441,
 7354      0000
 7355 2d69 4C39D8   		cmp	rax, r11	# ivtmp.441, _733
 7356 2d6c 0F85C5FE 		jne	.L553	#,
 7356      FFFF
 7357              	.L782:
 7358 2d72 4989FE   		mov	r14, rdi	# niters_vector_mult_vf.367, niters.365
 7359 2d75 4983E6FC 		and	r14, -4	# niters_vector_mult_vf.367,
 7360 2d79 4C01F1   		add	rcx, r14	# tmp.368, niters_vector_mult_vf.367
 7361 2d7c 4C01F6   		add	rsi, r14	# tmp.369, niters_vector_mult_vf.367
 7362 2d7f 4C39F7   		cmp	rdi, r14	# niters.365, niters_vector_mult_vf.367
 7363 2d82 7461     		je	.L556	#,
 7364              	.LVL349:
 899:sieve_extend.c ****     }
 7365              		.loc 1 899 9 view .LVU2536
 7366              	# sieve_extend.c:898:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7367              		.loc 1 898 5 is_stmt 0 view .LVU2537
 7368 2d84 4C8B5C24 		mov	r11, QWORD PTR 64[rsp]	# aligned_copy_word, %sfp
 7368      40
 7369              	# sieve_extend.c:898:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7370              		.loc 1 898 52 view .LVU2538
 7371 2d89 488D5601 		lea	rdx, 1[rsi]	# copy_word,
 7372              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7373              		.loc 1 899 94 view .LVU2539
 7374 2d8d C46281F7 		shlx	r9, QWORD PTR 8[rbx+rcx*8], r15	# tmp734, *_133, shift_flipped
 7374      4CCB08
 7375              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7376              		.loc 1 899 56 view .LVU2540
 7377 2d94 C46293F7 		shrx	r8, QWORD PTR [rbx+rcx*8], r13	# tmp736, *_82, shift
 7377      04CB
 7378              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7379              		.loc 1 899 66 view .LVU2541
 7380 2d9a 4D09C1   		or	r9, r8	# tmp738, tmp736
 7381              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7382              		.loc 1 899 77 view .LVU2542
 7383 2d9d 488D7901 		lea	rdi, 1[rcx]	# _301,
 7384              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7385              		.loc 1 899 66 view .LVU2543
 7386 2da1 4C890CF3 		mov	QWORD PTR [rbx+rsi*8], r9	# *_55, tmp738
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7387              		.loc 1 898 43 is_stmt 1 view .LVU2544
 7388              	.LVL350:
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7389              		.loc 1 898 11 view .LVU2545
 7390              	# sieve_extend.c:898:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7391              		.loc 1 898 5 is_stmt 0 view .LVU2546
 7392 2da5 4939D3   		cmp	r11, rdx	# aligned_copy_word, copy_word
GAS LISTING /tmp/ccBvFgp2.s 			page 209


 7393 2da8 723B     		jb	.L556	#,
 899:sieve_extend.c ****     }
 7394              		.loc 1 899 9 is_stmt 1 view .LVU2547
 7395              	# sieve_extend.c:898:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7396              		.loc 1 898 52 is_stmt 0 view .LVU2548
 7397 2daa 4883C602 		add	rsi, 2	# copy_word,
 7398              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7399              		.loc 1 899 94 view .LVU2549
 7400 2dae C46281F7 		shlx	r12, QWORD PTR 8[rbx+rdi*8], r15	# tmp739, *_555, shift_flipped
 7400      64FB08
 7401              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7402              		.loc 1 899 56 view .LVU2550
 7403 2db5 488B04FB 		mov	rax, QWORD PTR [rbx+rdi*8]	# *_122, *_122
 7404              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7405              		.loc 1 899 77 view .LVU2551
 7406 2db9 4883C102 		add	rcx, 2	# _78,
 7407              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7408              		.loc 1 899 56 view .LVU2552
 7409 2dbd C46293F7 		shrx	r14, rax, r13	# tmp741, *_122, shift
 7409      F0
 7410              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7411              		.loc 1 899 66 view .LVU2553
 7412 2dc2 4D09F4   		or	r12, r14	# tmp743, tmp741
 7413 2dc5 4C8924D3 		mov	QWORD PTR [rbx+rdx*8], r12	# *_559, tmp743
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7414              		.loc 1 898 43 is_stmt 1 view .LVU2554
 7415              	.LVL351:
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7416              		.loc 1 898 11 view .LVU2555
 7417              	# sieve_extend.c:898:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7418              		.loc 1 898 5 is_stmt 0 view .LVU2556
 7419 2dc9 4939F3   		cmp	r11, rsi	# aligned_copy_word, copy_word
 7420 2dcc 7217     		jb	.L556	#,
 899:sieve_extend.c ****     }
 7421              		.loc 1 899 9 is_stmt 1 view .LVU2557
 7422              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7423              		.loc 1 899 94 is_stmt 0 view .LVU2558
 7424 2dce C46281F7 		shlx	r15, QWORD PTR 8[rbx+rcx*8], r15	# tmp744, *_293, shift_flipped
 7424      7CCB08
 7425              	.LVL352:
 7426              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7427              		.loc 1 899 56 view .LVU2559
 7428 2dd5 488B0CCB 		mov	rcx, QWORD PTR [rbx+rcx*8]	# *_288, *_288
 7429              	.LVL353:
 899:sieve_extend.c ****     }
 7430              		.loc 1 899 56 view .LVU2560
 7431 2dd9 C46293F7 		shrx	r13, rcx, r13	# tmp746, *_288, shift
 7431      E9
GAS LISTING /tmp/ccBvFgp2.s 			page 210


 7432              	.LVL354:
 7433              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 7434              		.loc 1 899 66 view .LVU2561
 7435 2dde 4D09EF   		or	r15, r13	# tmp748, tmp746
 7436 2de1 4C893CF3 		mov	QWORD PTR [rbx+rsi*8], r15	# *_297, tmp748
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7437              		.loc 1 898 43 is_stmt 1 view .LVU2562
 7438              	.LVL355:
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7439              		.loc 1 898 11 view .LVU2563
 7440              	.L556:
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7441              		.loc 1 898 11 is_stmt 0 view .LVU2564
 7442 2de5 4C89D0   		mov	rax, r10	# ivtmp.425, ivtmp.425
 7443              	.L549:
 902:sieve_extend.c **** 
 7444              		.loc 1 902 5 is_stmt 1 view .LVU2565
 7445              	# sieve_extend.c:902:     if (copy_word >= destination_stop_word) return;
 902:sieve_extend.c **** 
 7446              		.loc 1 902 8 is_stmt 0 view .LVU2566
 7447 2de8 4C8B4424 		mov	r8, QWORD PTR 80[rsp]	# destination_stop_word, %sfp
 7447      50
 7448 2ded 4939C0   		cmp	r8, rax	# destination_stop_word, ivtmp.425
 7449 2df0 0F86B304 		jbe	.L804	#,
 7449      0000
 904:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 7450              		.loc 1 904 5 is_stmt 1 view .LVU2567
 7451              	# sieve_extend.c:904:     source_word = copy_word - size; // recalibrate
 904:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 7452              		.loc 1 904 17 is_stmt 0 view .LVU2568
 7453 2df6 488B7424 		mov	rsi, QWORD PTR 24[rsp]	# size, %sfp
 7453      18
 7454 2dfb 4989C5   		mov	r13, rax	# source_word, ivtmp.425
 7455              	# sieve_extend.c:908:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7456              		.loc 1 908 21 view .LVU2569
 7457 2dfe 488D0C06 		lea	rcx, [rsi+rax]	# ivtmp.425,
 7458              	# sieve_extend.c:904:     source_word = copy_word - size; // recalibrate
 904:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 7459              		.loc 1 904 17 view .LVU2570
 7460 2e02 4929F5   		sub	r13, rsi	# source_word, size
 7461              	.LVL356:
 905:sieve_extend.c **** 
 7462              		.loc 1 905 5 is_stmt 1 view .LVU2571
 7463              	# sieve_extend.c:908:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7464              		.loc 1 908 5 is_stmt 0 view .LVU2572
 7465 2e05 4939C8   		cmp	r8, rcx	# destination_stop_word, ivtmp.425
 7466              	# sieve_extend.c:905:     const size_t memsize = (size_t)size*sizeof(bitword_t);
 905:sieve_extend.c **** 
 7467              		.loc 1 905 18 view .LVU2573
 7468 2e08 4C8D34F5 		lea	r14, 0[0+rsi*8]	# memsize,
 7468      00000000 
 7469              	.LVL357:
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7470              		.loc 1 908 5 is_stmt 1 view .LVU2574
GAS LISTING /tmp/ccBvFgp2.s 			page 211


 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7471              		.loc 1 908 11 view .LVU2575
 7472              	# sieve_extend.c:908:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7473              		.loc 1 908 5 is_stmt 0 view .LVU2576
 7474 2e10 0F825F01 		jb	.L558	#,
 7474      0000
 7475 2e16 4C8D24C3 		lea	r12, [rbx+rax*8]	# tmp761,
 7476 2e1a 488D04CD 		lea	rax, 0[0+rcx*8]	# tmp762,
 7476      00000000 
 7477              	# sieve_extend.c:909:         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 909:sieve_extend.c **** 
 7478              		.loc 1 909 38 view .LVU2577
 7479 2e22 4E8D3CEB 		lea	r15, [rbx+r13*8]	# _48,
 7480 2e26 4929C4   		sub	r12, rax	# _711, tmp762
 7481 2e29 4C896C24 		mov	QWORD PTR 72[rsp], r13	# %sfp, source_word
 7481      48
 7482 2e2e 4989F5   		mov	r13, rsi	# size, size
 7483              	.LVL358:
 909:sieve_extend.c **** 
 7484              		.loc 1 909 38 view .LVU2578
 7485 2e31 48895C24 		mov	QWORD PTR 64[rsp], rbx	# %sfp, bitarray
 7485      40
 7486              	.LVL359:
 909:sieve_extend.c **** 
 7487              		.loc 1 909 38 view .LVU2579
 7488 2e36 4C89C3   		mov	rbx, r8	# destination_stop_word, destination_stop_word
 7489              	.LVL360:
 909:sieve_extend.c **** 
 7490              		.loc 1 909 38 view .LVU2580
 7491 2e39 C5F877   		vzeroupper
 7492              	.L559:
 909:sieve_extend.c **** 
 7493              		.loc 1 909 9 is_stmt 1 discriminator 2 view .LVU2581
 7494              	.LVL361:
 7495              	.LBB384:
 7496              	.LBI384:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 7497              		.loc 2 31 1 discriminator 2 view .LVU2582
 7498              	.LBB385:
 7499              		.loc 2 34 3 discriminator 2 view .LVU2583
 7500              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 7501              		.loc 2 34 10 is_stmt 0 discriminator 2 view .LVU2584
 7502 2e3c 498D3CCC 		lea	rdi, [r12+rcx*8]	# tmp764,
 7503 2e40 4C89F2   		mov	rdx, r14	#, memsize
 7504 2e43 48894C24 		mov	QWORD PTR 88[rsp], rcx	# %sfp, ivtmp.425
 7504      58
 7505 2e48 4C89FE   		mov	rsi, r15	#, _48
 7506 2e4b E8000000 		call	memcpy@PLT	#
 7506      00
 7507              	.LVL362:
 7508              		.loc 2 34 10 discriminator 2 view .LVU2585
 7509              	.LBE385:
 7510              	.LBE384:
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7511              		.loc 1 908 54 is_stmt 1 discriminator 2 view .LVU2586
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
GAS LISTING /tmp/ccBvFgp2.s 			page 212


 7512              		.loc 1 908 11 discriminator 2 view .LVU2587
 7513 2e50 488B4424 		mov	rax, QWORD PTR 88[rsp]	# ivtmp.425, %sfp
 7513      58
 7514 2e55 4A8D0C28 		lea	rcx, [rax+r13]	# ivtmp.425,
 7515              	# sieve_extend.c:908:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7516              		.loc 1 908 5 is_stmt 0 discriminator 2 view .LVU2588
 7517 2e59 4839CB   		cmp	rbx, rcx	# destination_stop_word, ivtmp.425
 7518 2e5c 0F82FE00 		jb	.L794	#,
 7518      0000
 909:sieve_extend.c **** 
 7519              		.loc 1 909 9 is_stmt 1 view .LVU2589
 7520              	.LVL363:
 7521              	.LBB393:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 7522              		.loc 2 31 1 view .LVU2590
 7523              	.LBB386:
 7524              		.loc 2 34 3 view .LVU2591
 7525              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 7526              		.loc 2 34 10 is_stmt 0 view .LVU2592
 7527 2e62 498D3CCC 		lea	rdi, [r12+rcx*8]	# tmp1070,
 7528 2e66 4C89F2   		mov	rdx, r14	#, memsize
 7529 2e69 48894C24 		mov	QWORD PTR 88[rsp], rcx	# %sfp, ivtmp.425
 7529      58
 7530              	.LVL364:
 7531              		.loc 2 34 10 view .LVU2593
 7532 2e6e 4C89FE   		mov	rsi, r15	#, _48
 7533 2e71 E8000000 		call	memcpy@PLT	#
 7533      00
 7534              	.LVL365:
 7535              		.loc 2 34 10 view .LVU2594
 7536              	.LBE386:
 7537              	.LBE393:
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7538              		.loc 1 908 54 is_stmt 1 view .LVU2595
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7539              		.loc 1 908 11 view .LVU2596
 7540 2e76 488B4424 		mov	rax, QWORD PTR 88[rsp]	# ivtmp.425, %sfp
 7540      58
 7541 2e7b 4E8D0C28 		lea	r9, [rax+r13]	# ivtmp.425,
 7542              	# sieve_extend.c:908:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7543              		.loc 1 908 5 is_stmt 0 view .LVU2597
 7544 2e7f 4C39CB   		cmp	rbx, r9	# destination_stop_word, ivtmp.425
 7545 2e82 0F82D800 		jb	.L794	#,
 7545      0000
 909:sieve_extend.c **** 
 7546              		.loc 1 909 9 is_stmt 1 view .LVU2598
 7547              	.LVL366:
 7548              	.LBB394:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 7549              		.loc 2 31 1 view .LVU2599
 7550              	.LBB387:
 7551              		.loc 2 34 3 view .LVU2600
 7552              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 7553              		.loc 2 34 10 is_stmt 0 view .LVU2601
 7554 2e88 4B8D3CCC 		lea	rdi, [r12+r9*8]	# tmp1073,
GAS LISTING /tmp/ccBvFgp2.s 			page 213


 7555 2e8c 4C89F2   		mov	rdx, r14	#, memsize
 7556 2e8f 4C894C24 		mov	QWORD PTR 88[rsp], r9	# %sfp, ivtmp.425
 7556      58
 7557 2e94 4C89FE   		mov	rsi, r15	#, _48
 7558 2e97 E8000000 		call	memcpy@PLT	#
 7558      00
 7559              	.LVL367:
 7560              		.loc 2 34 10 view .LVU2602
 7561              	.LBE387:
 7562              	.LBE394:
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7563              		.loc 1 908 54 is_stmt 1 view .LVU2603
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7564              		.loc 1 908 11 view .LVU2604
 7565 2e9c 488B4424 		mov	rax, QWORD PTR 88[rsp]	# ivtmp.425, %sfp
 7565      58
 7566 2ea1 4E8D1C28 		lea	r11, [rax+r13]	# ivtmp.425,
 7567              	# sieve_extend.c:908:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7568              		.loc 1 908 5 is_stmt 0 view .LVU2605
 7569 2ea5 4C39DB   		cmp	rbx, r11	# destination_stop_word, ivtmp.425
 7570 2ea8 0F82B200 		jb	.L794	#,
 7570      0000
 909:sieve_extend.c **** 
 7571              		.loc 1 909 9 is_stmt 1 view .LVU2606
 7572              	.LVL368:
 7573              	.LBB395:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 7574              		.loc 2 31 1 view .LVU2607
 7575              	.LBB388:
 7576              		.loc 2 34 3 view .LVU2608
 7577              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 7578              		.loc 2 34 10 is_stmt 0 view .LVU2609
 7579 2eae 4C89F2   		mov	rdx, r14	#, memsize
 7580 2eb1 4B8D3CDC 		lea	rdi, [r12+r11*8]	# tmp1076,
 7581 2eb5 4C895C24 		mov	QWORD PTR 88[rsp], r11	# %sfp, ivtmp.425
 7581      58
 7582 2eba 4C89FE   		mov	rsi, r15	#, _48
 7583 2ebd E8000000 		call	memcpy@PLT	#
 7583      00
 7584              	.LVL369:
 7585              		.loc 2 34 10 view .LVU2610
 7586              	.LBE388:
 7587              	.LBE395:
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7588              		.loc 1 908 54 is_stmt 1 view .LVU2611
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7589              		.loc 1 908 11 view .LVU2612
 7590 2ec2 488B4424 		mov	rax, QWORD PTR 88[rsp]	# ivtmp.425, %sfp
 7590      58
 7591 2ec7 4A8D1428 		lea	rdx, [rax+r13]	# ivtmp.425,
 7592              	# sieve_extend.c:908:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7593              		.loc 1 908 5 is_stmt 0 view .LVU2613
 7594 2ecb 4839D3   		cmp	rbx, rdx	# destination_stop_word, ivtmp.425
 7595 2ece 0F828C00 		jb	.L794	#,
 7595      0000
GAS LISTING /tmp/ccBvFgp2.s 			page 214


 909:sieve_extend.c **** 
 7596              		.loc 1 909 9 is_stmt 1 view .LVU2614
 7597              	.LVL370:
 7598              	.LBB396:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 7599              		.loc 2 31 1 view .LVU2615
 7600              	.LBB389:
 7601              		.loc 2 34 3 view .LVU2616
 7602              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 7603              		.loc 2 34 10 is_stmt 0 view .LVU2617
 7604 2ed4 498D3CD4 		lea	rdi, [r12+rdx*8]	# tmp1079,
 7605 2ed8 4C89FE   		mov	rsi, r15	#, _48
 7606 2edb 48895424 		mov	QWORD PTR 88[rsp], rdx	# %sfp, ivtmp.425
 7606      58
 7607 2ee0 4C89F2   		mov	rdx, r14	#, memsize
 7608 2ee3 E8000000 		call	memcpy@PLT	#
 7608      00
 7609              	.LVL371:
 7610              		.loc 2 34 10 view .LVU2618
 7611              	.LBE389:
 7612              	.LBE396:
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7613              		.loc 1 908 54 is_stmt 1 view .LVU2619
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7614              		.loc 1 908 11 view .LVU2620
 7615 2ee8 488B4424 		mov	rax, QWORD PTR 88[rsp]	# ivtmp.425, %sfp
 7615      58
 7616 2eed 4E8D1428 		lea	r10, [rax+r13]	# ivtmp.425,
 7617              	# sieve_extend.c:908:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7618              		.loc 1 908 5 is_stmt 0 view .LVU2621
 7619 2ef1 4C39D3   		cmp	rbx, r10	# destination_stop_word, ivtmp.425
 7620 2ef4 726A     		jb	.L794	#,
 909:sieve_extend.c **** 
 7621              		.loc 1 909 9 is_stmt 1 view .LVU2622
 7622              	.LVL372:
 7623              	.LBB397:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 7624              		.loc 2 31 1 view .LVU2623
 7625              	.LBB390:
 7626              		.loc 2 34 3 view .LVU2624
 7627              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 7628              		.loc 2 34 10 is_stmt 0 view .LVU2625
 7629 2ef6 4B8D3CD4 		lea	rdi, [r12+r10*8]	# tmp1082,
 7630 2efa 4C89F2   		mov	rdx, r14	#, memsize
 7631 2efd 4C895424 		mov	QWORD PTR 88[rsp], r10	# %sfp, ivtmp.425
 7631      58
 7632 2f02 4C89FE   		mov	rsi, r15	#, _48
 7633 2f05 E8000000 		call	memcpy@PLT	#
 7633      00
 7634              	.LVL373:
 7635              		.loc 2 34 10 view .LVU2626
 7636              	.LBE390:
 7637              	.LBE397:
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7638              		.loc 1 908 54 is_stmt 1 view .LVU2627
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
GAS LISTING /tmp/ccBvFgp2.s 			page 215


 7639              		.loc 1 908 11 view .LVU2628
 7640 2f0a 488B4424 		mov	rax, QWORD PTR 88[rsp]	# ivtmp.425, %sfp
 7640      58
 7641 2f0f 4E8D0428 		lea	r8, [rax+r13]	# ivtmp.425,
 7642              	# sieve_extend.c:908:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7643              		.loc 1 908 5 is_stmt 0 view .LVU2629
 7644 2f13 4C39C3   		cmp	rbx, r8	# destination_stop_word, ivtmp.425
 7645 2f16 7248     		jb	.L794	#,
 909:sieve_extend.c **** 
 7646              		.loc 1 909 9 is_stmt 1 view .LVU2630
 7647              	.LVL374:
 7648              	.LBB398:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 7649              		.loc 2 31 1 view .LVU2631
 7650              	.LBB391:
 7651              		.loc 2 34 3 view .LVU2632
 7652              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 7653              		.loc 2 34 10 is_stmt 0 view .LVU2633
 7654 2f18 4C89FE   		mov	rsi, r15	#, _48
 7655 2f1b 4B8D3CC4 		lea	rdi, [r12+r8*8]	# tmp1085,
 7656 2f1f 4C894424 		mov	QWORD PTR 88[rsp], r8	# %sfp, ivtmp.425
 7656      58
 7657 2f24 4C89F2   		mov	rdx, r14	#, memsize
 7658 2f27 E8000000 		call	memcpy@PLT	#
 7658      00
 7659              	.LVL375:
 7660              		.loc 2 34 10 view .LVU2634
 7661              	.LBE391:
 7662              	.LBE398:
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7663              		.loc 1 908 54 is_stmt 1 view .LVU2635
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7664              		.loc 1 908 11 view .LVU2636
 7665 2f2c 488B4424 		mov	rax, QWORD PTR 88[rsp]	# ivtmp.425, %sfp
 7665      58
 7666 2f31 4A8D3428 		lea	rsi, [rax+r13]	# ivtmp.425,
 7667              	# sieve_extend.c:908:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7668              		.loc 1 908 5 is_stmt 0 view .LVU2637
 7669 2f35 4839F3   		cmp	rbx, rsi	# destination_stop_word, ivtmp.425
 7670 2f38 7226     		jb	.L794	#,
 909:sieve_extend.c **** 
 7671              		.loc 1 909 9 is_stmt 1 view .LVU2638
 7672              	.LVL376:
 7673              	.LBB399:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 7674              		.loc 2 31 1 view .LVU2639
 7675              	.LBB392:
 7676              		.loc 2 34 3 view .LVU2640
 7677              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 7678              		.loc 2 34 10 is_stmt 0 view .LVU2641
 7679 2f3a 498D3CF4 		lea	rdi, [r12+rsi*8]	# tmp1088,
 7680 2f3e 4C89F2   		mov	rdx, r14	#, memsize
 7681 2f41 48897424 		mov	QWORD PTR 88[rsp], rsi	# %sfp, ivtmp.425
 7681      58
 7682 2f46 4C89FE   		mov	rsi, r15	#, _48
GAS LISTING /tmp/ccBvFgp2.s 			page 216


 7683 2f49 E8000000 		call	memcpy@PLT	#
 7683      00
 7684              	.LVL377:
 7685              		.loc 2 34 10 view .LVU2642
 7686              	.LBE392:
 7687              	.LBE399:
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7688              		.loc 1 908 54 is_stmt 1 view .LVU2643
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7689              		.loc 1 908 11 view .LVU2644
 7690 2f4e 488B4424 		mov	rax, QWORD PTR 88[rsp]	# ivtmp.425, %sfp
 7690      58
 7691              	.LVL378:
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7692              		.loc 1 908 11 is_stmt 0 view .LVU2645
 7693 2f53 4A8D0C28 		lea	rcx, [rax+r13]	# ivtmp.425,
 7694              	.LVL379:
 7695              	# sieve_extend.c:908:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7696              		.loc 1 908 5 view .LVU2646
 7697 2f57 4839CB   		cmp	rbx, rcx	# destination_stop_word, ivtmp.425
 7698 2f5a 0F83DCFE 		jnb	.L559	#,
 7698      FFFF
 7699              	.LVL380:
 7700              		.p2align 4
 7701              		.p2align 3
 7702              	.L794:
 908:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 7703              		.loc 1 908 5 view .LVU2647
 7704 2f60 4C8B6C24 		mov	r13, QWORD PTR 72[rsp]	# source_word, %sfp
 7704      48
 7705              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7706              		.loc 1 912 5 view .LVU2648
 7707 2f65 48394424 		cmp	QWORD PTR 80[rsp], rax	# %sfp, ivtmp.425
 7707      50
 7708 2f6a 488B5C24 		mov	rbx, QWORD PTR 64[rsp]	# bitarray, %sfp
 7708      40
 7709              	.LVL381:
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7710              		.loc 1 912 11 is_stmt 1 view .LVU2649
 7711              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7712              		.loc 1 912 5 is_stmt 0 view .LVU2650
 7713 2f6f 0F826E02 		jb	.L805	#,
 7713      0000
 7714              	.LVL382:
 7715              	.L558:
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7716              		.loc 1 912 5 view .LVU2651
 7717 2f75 4C8D3CC5 		lea	r15, 0[0+rax*8]	# _195,
 7717      00000000 
 7718 2f7d 4E8D24ED 		lea	r12, 0[0+r13*8]	# _187,
 7718      00000000 
 7719 2f85 498D7F20 		lea	rdi, 32[r15]	# tmp771,
 7720 2f89 4E8D34ED 		lea	r14, 32[0+r13*8]	# _197,
 7720      20000000 
GAS LISTING /tmp/ccBvFgp2.s 			page 217


 7721              	.LVL383:
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7722              		.loc 1 912 5 view .LVU2652
 7723 2f91 4939FC   		cmp	r12, rdi	# _187, tmp771
 7724 2f94 410F9DC1 		setge	r9b	#, tmp773
 7725 2f98 4D39F7   		cmp	r15, r14	# _195, _197
 7726 2f9b 410F9DC3 		setge	r11b	#, tmp775
 7727 2f9f 4508D9   		or	r9b, r11b	# tmp773, tmp775
 7728 2fa2 0F845002 		je	.L561	#,
 7728      0000
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7729              		.loc 1 912 5 view .LVU2653
 7730 2fa8 488B5424 		mov	rdx, QWORD PTR 80[rsp]	# destination_stop_word, %sfp
 7730      50
 7731 2fad 4989D2   		mov	r10, rdx	# tmp777, destination_stop_word
 7732 2fb0 4929C2   		sub	r10, rax	# tmp777, ivtmp.425
 7733 2fb3 4983FA05 		cmp	r10, 5	# tmp777,
 7734 2fb7 0F863B02 		jbe	.L561	#,
 7734      0000
 7735 2fbd 4901DC   		add	r12, rbx	# vectp.350, bitarray
 7736 2fc0 4C8D4201 		lea	r8, 1[rdx]	# _75,
 7737 2fc4 49C1EC03 		shr	r12, 3	# tmp781,
 7738 2fc8 49F7DC   		neg	r12	# tmp782
 7739 2fcb 4183E403 		and	r12d, 3	# prolog_loop_niters.351,
 7740 2fcf 0F842B07 		je	.L570	#,
 7740      0000
 913:sieve_extend.c **** 
 7741              		.loc 1 913 9 is_stmt 1 view .LVU2654
 7742              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7743              		.loc 1 913 39 is_stmt 0 view .LVU2655
 7744 2fd5 4A8B0CEB 		mov	rcx, QWORD PTR [rbx+r13*8]	# _114, *_111
 7745 2fd9 4983FC01 		cmp	r12, 1	# prolog_loop_niters.351,
 7746              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7747              		.loc 1 912 57 view .LVU2656
 7748 2fdd 488D7001 		lea	rsi, 1[rax]	# copy_word,
 7749              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7750              		.loc 1 912 71 view .LVU2657
 7751 2fe1 4D8D7501 		lea	r14, 1[r13]	# source_word,
 7752              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7753              		.loc 1 913 29 view .LVU2658
 7754 2fe5 4A890C3B 		mov	QWORD PTR [rbx+r15], rcx	# *_113, _114
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7755              		.loc 1 912 48 is_stmt 1 view .LVU2659
 7756              	.LVL384:
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7757              		.loc 1 912 11 view .LVU2660
 7758 2fe9 7426     		je	.L562	#,
 913:sieve_extend.c **** 
 7759              		.loc 1 913 9 view .LVU2661
 7760              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7761              		.loc 1 913 39 is_stmt 0 view .LVU2662
 7762 2feb 4E8B3CF3 		mov	r15, QWORD PTR [rbx+r14*8]	# _38, *_35
GAS LISTING /tmp/ccBvFgp2.s 			page 218


 7763 2fef 4983FC03 		cmp	r12, 3	# prolog_loop_niters.351,
 7764              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7765              		.loc 1 912 71 view .LVU2663
 7766 2ff3 4D8D7502 		lea	r14, 2[r13]	# source_word,
 7767              	.LVL385:
 7768              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7769              		.loc 1 913 29 view .LVU2664
 7770 2ff7 4C893CF3 		mov	QWORD PTR [rbx+rsi*8], r15	# *_37, _38
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7771              		.loc 1 912 48 is_stmt 1 view .LVU2665
 7772              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7773              		.loc 1 912 57 is_stmt 0 view .LVU2666
 7774 2ffb 488D7002 		lea	rsi, 2[rax]	# copy_word,
 7775              	.LVL386:
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7776              		.loc 1 912 11 is_stmt 1 view .LVU2667
 7777 2fff 7510     		jne	.L562	#,
 913:sieve_extend.c **** 
 7778              		.loc 1 913 9 view .LVU2668
 7779              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7780              		.loc 1 913 39 is_stmt 0 view .LVU2669
 7781 3001 4A8B3CF3 		mov	rdi, QWORD PTR [rbx+r14*8]	# _150, *_153
 7782              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7783              		.loc 1 912 71 view .LVU2670
 7784 3005 4D8D7503 		lea	r14, 3[r13]	# source_word,
 7785              	.LVL387:
 7786              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7787              		.loc 1 913 29 view .LVU2671
 7788 3009 48893CF3 		mov	QWORD PTR [rbx+rsi*8], rdi	# *_151, _150
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7789              		.loc 1 912 48 is_stmt 1 view .LVU2672
 7790              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7791              		.loc 1 912 57 is_stmt 0 view .LVU2673
 7792 300d 488D7003 		lea	rsi, 3[rax]	# copy_word,
 7793              	.LVL388:
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7794              		.loc 1 912 11 is_stmt 1 view .LVU2674
 7795              	.L562:
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7796              		.loc 1 912 11 is_stmt 0 view .LVU2675
 7797 3011 4D29E0   		sub	r8, r12	# tmp783, prolog_loop_niters.351
 7798 3014 4D01E5   		add	r13, r12	# tmp784, prolog_loop_niters.351
 7799 3017 4929C0   		sub	r8, rax	# niters.352, ivtmp.425
 7800 301a 4C01E0   		add	rax, r12	# tmp786, prolog_loop_niters.351
 7801 301d 4D89C1   		mov	r9, r8	# bnd.353, niters.352
 7802 3020 4C8D24C3 		lea	r12, [rbx+rax*8]	# vectp.361,
 7803 3024 49C1E902 		shr	r9, 2	# bnd.353,
 7804              	# sieve_extend.c:904:     source_word = copy_word - size; // recalibrate
 904:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 7805              		.loc 1 904 17 view .LVU2676
GAS LISTING /tmp/ccBvFgp2.s 			page 219


 7806 3028 31C0     		xor	eax, eax	# ivtmp.416
 7807 302a 49C1E105 		sal	r9, 5	# _704,
 7808 302e 4E8D2CEB 		lea	r13, [rbx+r13*8]	# vectp.358,
 7809 3032 4D8D59E0 		lea	r11, -32[r9]	# tmp806,
 7810 3036 49C1EB05 		shr	r11, 5	# tmp804,
 7811 303a 4983C301 		add	r11, 1	# tmp807,
 7812 303e 4183E307 		and	r11d, 7	# tmp808,
 7813 3042 0F84A800 		je	.L564	#,
 7813      0000
 7814 3048 4983FB01 		cmp	r11, 1	# tmp808,
 7815 304c 0F848400 		je	.L714	#,
 7815      0000
 7816 3052 4983FB02 		cmp	r11, 2	# tmp808,
 7817 3056 746D     		je	.L715	#,
 7818 3058 4983FB03 		cmp	r11, 3	# tmp808,
 7819 305c 7456     		je	.L716	#,
 7820 305e 4983FB04 		cmp	r11, 4	# tmp808,
 7821 3062 743F     		je	.L717	#,
 7822 3064 4983FB05 		cmp	r11, 5	# tmp808,
 7823 3068 7428     		je	.L718	#,
 7824 306a 4983FB06 		cmp	r11, 6	# tmp808,
 7825 306e 7411     		je	.L719	#,
 7826              	.LVL389:
 913:sieve_extend.c **** 
 7827              		.loc 1 913 9 is_stmt 1 view .LVU2677
 7828              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7829              		.loc 1 913 29 is_stmt 0 view .LVU2678
 7830 3070 C4417D6F 		vmovdqa	ymm10, YMMWORD PTR 0[r13]	# tmp1397, MEM[base: vectp.358_189, index: ivtmp.416_702, offset
 7830      5500
 7831 3076 B8200000 		mov	eax, 32	# ivtmp.416,
 7831      00
 7832 307b C4417E7F 		vmovdqu	YMMWORD PTR [r12], ymm10	# MEM[base: vectp.361_207, index: ivtmp.416_702, offset: 0B], tmp
 7832      1424
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7833              		.loc 1 912 48 is_stmt 1 view .LVU2679
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7834              		.loc 1 912 11 view .LVU2680
 7835              	.L719:
 913:sieve_extend.c **** 
 7836              		.loc 1 913 9 view .LVU2681
 7837              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7838              		.loc 1 913 29 is_stmt 0 view .LVU2682
 7839 3081 C4C17D6F 		vmovdqa	ymm2, YMMWORD PTR 0[r13+rax]	# tmp1398, MEM[base: vectp.358_189, index: ivtmp.416_702, off
 7839      540500
 7840 3088 C4C17E7F 		vmovdqu	YMMWORD PTR [r12+rax], ymm2	# MEM[base: vectp.361_207, index: ivtmp.416_702, offset: 0B], 
 7840      1404
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7841              		.loc 1 912 48 is_stmt 1 view .LVU2683
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7842              		.loc 1 912 11 view .LVU2684
 7843 308e 4883C020 		add	rax, 32	# ivtmp.416,
 7844              	.L718:
 913:sieve_extend.c **** 
 7845              		.loc 1 913 9 view .LVU2685
 7846              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/ccBvFgp2.s 			page 220


 913:sieve_extend.c **** 
 7847              		.loc 1 913 29 is_stmt 0 view .LVU2686
 7848 3092 C4417D6F 		vmovdqa	ymm13, YMMWORD PTR 0[r13+rax]	# tmp1399, MEM[base: vectp.358_189, index: ivtmp.416_702, of
 7848      6C0500
 7849 3099 C4417E7F 		vmovdqu	YMMWORD PTR [r12+rax], ymm13	# MEM[base: vectp.361_207, index: ivtmp.416_702, offset: 0B],
 7849      2C04
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7850              		.loc 1 912 48 is_stmt 1 view .LVU2687
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7851              		.loc 1 912 11 view .LVU2688
 7852 309f 4883C020 		add	rax, 32	# ivtmp.416,
 7853              	.L717:
 913:sieve_extend.c **** 
 7854              		.loc 1 913 9 view .LVU2689
 7855              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7856              		.loc 1 913 29 is_stmt 0 view .LVU2690
 7857 30a3 C4417D6F 		vmovdqa	ymm14, YMMWORD PTR 0[r13+rax]	# tmp1400, MEM[base: vectp.358_189, index: ivtmp.416_702, of
 7857      740500
 7858 30aa C4417E7F 		vmovdqu	YMMWORD PTR [r12+rax], ymm14	# MEM[base: vectp.361_207, index: ivtmp.416_702, offset: 0B],
 7858      3404
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7859              		.loc 1 912 48 is_stmt 1 view .LVU2691
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7860              		.loc 1 912 11 view .LVU2692
 7861 30b0 4883C020 		add	rax, 32	# ivtmp.416,
 7862              	.L716:
 913:sieve_extend.c **** 
 7863              		.loc 1 913 9 view .LVU2693
 7864              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7865              		.loc 1 913 29 is_stmt 0 view .LVU2694
 7866 30b4 C4417D6F 		vmovdqa	ymm15, YMMWORD PTR 0[r13+rax]	# tmp1401, MEM[base: vectp.358_189, index: ivtmp.416_702, of
 7866      7C0500
 7867 30bb C4417E7F 		vmovdqu	YMMWORD PTR [r12+rax], ymm15	# MEM[base: vectp.361_207, index: ivtmp.416_702, offset: 0B],
 7867      3C04
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7868              		.loc 1 912 48 is_stmt 1 view .LVU2695
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7869              		.loc 1 912 11 view .LVU2696
 7870 30c1 4883C020 		add	rax, 32	# ivtmp.416,
 7871              	.L715:
 913:sieve_extend.c **** 
 7872              		.loc 1 913 9 view .LVU2697
 7873              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7874              		.loc 1 913 29 is_stmt 0 view .LVU2698
 7875 30c5 C4C17D6F 		vmovdqa	ymm1, YMMWORD PTR 0[r13+rax]	# tmp1402, MEM[base: vectp.358_189, index: ivtmp.416_702, off
 7875      4C0500
 7876 30cc C4C17E7F 		vmovdqu	YMMWORD PTR [r12+rax], ymm1	# MEM[base: vectp.361_207, index: ivtmp.416_702, offset: 0B], 
 7876      0C04
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7877              		.loc 1 912 48 is_stmt 1 view .LVU2699
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7878              		.loc 1 912 11 view .LVU2700
 7879 30d2 4883C020 		add	rax, 32	# ivtmp.416,
 7880              	.L714:
GAS LISTING /tmp/ccBvFgp2.s 			page 221


 913:sieve_extend.c **** 
 7881              		.loc 1 913 9 view .LVU2701
 7882              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7883              		.loc 1 913 29 is_stmt 0 view .LVU2702
 7884 30d6 C4417D6F 		vmovdqa	ymm8, YMMWORD PTR 0[r13+rax]	# tmp1403, MEM[base: vectp.358_189, index: ivtmp.416_702, off
 7884      440500
 7885 30dd C4417E7F 		vmovdqu	YMMWORD PTR [r12+rax], ymm8	# MEM[base: vectp.361_207, index: ivtmp.416_702, offset: 0B], 
 7885      0404
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7886              		.loc 1 912 48 is_stmt 1 view .LVU2703
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7887              		.loc 1 912 11 view .LVU2704
 7888 30e3 4883C020 		add	rax, 32	# ivtmp.416,
 7889 30e7 4C39C8   		cmp	rax, r9	# ivtmp.416, _704
 7890 30ea 0F849600 		je	.L779	#,
 7890      0000
 7891              	.L564:
 913:sieve_extend.c **** 
 7892              		.loc 1 913 9 discriminator 2 view .LVU2705
 7893              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7894              		.loc 1 913 29 is_stmt 0 discriminator 2 view .LVU2706
 7895 30f0 C4C17D6F 		vmovdqa	ymm0, YMMWORD PTR 0[r13+rax]	# tmp1384, MEM[base: vectp.358_189, index: ivtmp.416_702, off
 7895      440500
 7896 30f7 C4C17E7F 		vmovdqu	YMMWORD PTR [r12+rax], ymm0	# MEM[base: vectp.361_207, index: ivtmp.416_702, offset: 0B], 
 7896      0404
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7897              		.loc 1 912 48 is_stmt 1 discriminator 2 view .LVU2707
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7898              		.loc 1 912 11 discriminator 2 view .LVU2708
 913:sieve_extend.c **** 
 7899              		.loc 1 913 9 discriminator 2 view .LVU2709
 7900              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7901              		.loc 1 913 29 is_stmt 0 discriminator 2 view .LVU2710
 7902 30fd C4C17D6F 		vmovdqa	ymm5, YMMWORD PTR 32[r13+rax]	# tmp1385, MEM[base: vectp.358_189, index: ivtmp.416_702, of
 7902      6C0520
 7903 3104 C4C17E7F 		vmovdqu	YMMWORD PTR 32[r12+rax], ymm5	# MEM[base: vectp.361_207, index: ivtmp.416_702, offset: 0B]
 7903      6C0420
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7904              		.loc 1 912 48 is_stmt 1 discriminator 2 view .LVU2711
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7905              		.loc 1 912 11 discriminator 2 view .LVU2712
 913:sieve_extend.c **** 
 7906              		.loc 1 913 9 discriminator 2 view .LVU2713
 7907              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7908              		.loc 1 913 29 is_stmt 0 discriminator 2 view .LVU2714
 7909 310b C4417D6F 		vmovdqa	ymm9, YMMWORD PTR 64[r13+rax]	# tmp1386, MEM[base: vectp.358_189, index: ivtmp.416_702, of
 7909      4C0540
 7910 3112 C4417E7F 		vmovdqu	YMMWORD PTR 64[r12+rax], ymm9	# MEM[base: vectp.361_207, index: ivtmp.416_702, offset: 0B]
 7910      4C0440
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7911              		.loc 1 912 48 is_stmt 1 discriminator 2 view .LVU2715
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7912              		.loc 1 912 11 discriminator 2 view .LVU2716
GAS LISTING /tmp/ccBvFgp2.s 			page 222


 913:sieve_extend.c **** 
 7913              		.loc 1 913 9 discriminator 2 view .LVU2717
 7914              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7915              		.loc 1 913 29 is_stmt 0 discriminator 2 view .LVU2718
 7916 3119 C4417D6F 		vmovdqa	ymm11, YMMWORD PTR 96[r13+rax]	# tmp1387, MEM[base: vectp.358_189, index: ivtmp.416_702, o
 7916      5C0560
 7917 3120 C4417E7F 		vmovdqu	YMMWORD PTR 96[r12+rax], ymm11	# MEM[base: vectp.361_207, index: ivtmp.416_702, offset: 0B
 7917      5C0460
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7918              		.loc 1 912 48 is_stmt 1 discriminator 2 view .LVU2719
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7919              		.loc 1 912 11 discriminator 2 view .LVU2720
 913:sieve_extend.c **** 
 7920              		.loc 1 913 9 discriminator 2 view .LVU2721
 7921              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7922              		.loc 1 913 29 is_stmt 0 discriminator 2 view .LVU2722
 7923 3127 C4C17D6F 		vmovdqa	ymm4, YMMWORD PTR 128[r13+rax]	# tmp1388, MEM[base: vectp.358_189, index: ivtmp.416_702, o
 7923      A4058000 
 7923      0000
 7924 3131 C4C17E7F 		vmovdqu	YMMWORD PTR 128[r12+rax], ymm4	# MEM[base: vectp.361_207, index: ivtmp.416_702, offset: 0B
 7924      A4048000 
 7924      0000
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7925              		.loc 1 912 48 is_stmt 1 discriminator 2 view .LVU2723
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7926              		.loc 1 912 11 discriminator 2 view .LVU2724
 913:sieve_extend.c **** 
 7927              		.loc 1 913 9 discriminator 2 view .LVU2725
 7928              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7929              		.loc 1 913 29 is_stmt 0 discriminator 2 view .LVU2726
 7930 313b C4C17D6F 		vmovdqa	ymm6, YMMWORD PTR 160[r13+rax]	# tmp1389, MEM[base: vectp.358_189, index: ivtmp.416_702, o
 7930      B405A000 
 7930      0000
 7931 3145 C4C17E7F 		vmovdqu	YMMWORD PTR 160[r12+rax], ymm6	# MEM[base: vectp.361_207, index: ivtmp.416_702, offset: 0B
 7931      B404A000 
 7931      0000
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7932              		.loc 1 912 48 is_stmt 1 discriminator 2 view .LVU2727
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7933              		.loc 1 912 11 discriminator 2 view .LVU2728
 913:sieve_extend.c **** 
 7934              		.loc 1 913 9 discriminator 2 view .LVU2729
 7935              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7936              		.loc 1 913 29 is_stmt 0 discriminator 2 view .LVU2730
 7937 314f C4C17D6F 		vmovdqa	ymm7, YMMWORD PTR 192[r13+rax]	# tmp1390, MEM[base: vectp.358_189, index: ivtmp.416_702, o
 7937      BC05C000 
 7937      0000
 7938 3159 C4C17E7F 		vmovdqu	YMMWORD PTR 192[r12+rax], ymm7	# MEM[base: vectp.361_207, index: ivtmp.416_702, offset: 0B
 7938      BC04C000 
 7938      0000
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7939              		.loc 1 912 48 is_stmt 1 discriminator 2 view .LVU2731
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/ccBvFgp2.s 			page 223


 7940              		.loc 1 912 11 discriminator 2 view .LVU2732
 913:sieve_extend.c **** 
 7941              		.loc 1 913 9 discriminator 2 view .LVU2733
 7942              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7943              		.loc 1 913 29 is_stmt 0 discriminator 2 view .LVU2734
 7944 3163 C4C17D6F 		vmovdqa	ymm3, YMMWORD PTR 224[r13+rax]	# tmp1391, MEM[base: vectp.358_189, index: ivtmp.416_702, o
 7944      9C05E000 
 7944      0000
 7945 316d C4C17E7F 		vmovdqu	YMMWORD PTR 224[r12+rax], ymm3	# MEM[base: vectp.361_207, index: ivtmp.416_702, offset: 0B
 7945      9C04E000 
 7945      0000
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7946              		.loc 1 912 48 is_stmt 1 discriminator 2 view .LVU2735
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7947              		.loc 1 912 11 discriminator 2 view .LVU2736
 7948 3177 48050001 		add	rax, 256	# ivtmp.416,
 7948      0000
 7949 317d 4C39C8   		cmp	rax, r9	# ivtmp.416, _704
 7950 3180 0F856AFF 		jne	.L564	#,
 7950      FFFF
 7951              	.L779:
 7952 3186 4C89C2   		mov	rdx, r8	# niters_vector_mult_vf.354, niters.352
 7953 3189 4883E2FC 		and	rdx, -4	# niters_vector_mult_vf.354,
 7954 318d 4901D6   		add	r14, rdx	# tmp.355, niters_vector_mult_vf.354
 7955 3190 4801D6   		add	rsi, rdx	# tmp.356, niters_vector_mult_vf.354
 7956 3193 4C39C2   		cmp	rdx, r8	# niters_vector_mult_vf.354, niters.352
 7957 3196 0F840D01 		je	.L804	#,
 7957      0000
 7958              	.LVL390:
 913:sieve_extend.c **** 
 7959              		.loc 1 913 9 view .LVU2737
 7960              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7961              		.loc 1 912 5 is_stmt 0 view .LVU2738
 7962 319c 4C8B7C24 		mov	r15, QWORD PTR 80[rsp]	# destination_stop_word, %sfp
 7962      50
 7963              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7964              		.loc 1 912 57 view .LVU2739
 7965 31a1 4C8D4601 		lea	r8, 1[rsi]	# copy_word,
 7966              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7967              		.loc 1 913 39 view .LVU2740
 7968 31a5 4E8B14F3 		mov	r10, QWORD PTR [rbx+r14*8]	# _90, *_141
 7969              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7970              		.loc 1 912 71 view .LVU2741
 7971 31a9 4983C601 		add	r14, 1	# source_word,
 7972              	.LVL391:
 7973              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7974              		.loc 1 912 5 view .LVU2742
 7975 31ad 4D39C7   		cmp	r15, r8	# destination_stop_word, copy_word
 7976              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7977              		.loc 1 913 29 view .LVU2743
GAS LISTING /tmp/ccBvFgp2.s 			page 224


 7978 31b0 4C8914F3 		mov	QWORD PTR [rbx+rsi*8], r10	# *_489, _90
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7979              		.loc 1 912 48 is_stmt 1 view .LVU2744
 7980              	.LVL392:
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7981              		.loc 1 912 11 view .LVU2745
 7982              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7983              		.loc 1 912 5 is_stmt 0 view .LVU2746
 7984 31b4 0F82EF00 		jb	.L804	#,
 7984      0000
 913:sieve_extend.c **** 
 7985              		.loc 1 913 9 is_stmt 1 view .LVU2747
 7986              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7987              		.loc 1 913 39 is_stmt 0 view .LVU2748
 7988 31ba 4A8D0CF5 		lea	rcx, 0[0+r14*8]	# _96,
 7988      00000000 
 7989              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7990              		.loc 1 912 57 view .LVU2749
 7991 31c2 4883C602 		add	rsi, 2	# copy_word,
 7992              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7993              		.loc 1 913 39 view .LVU2750
 7994 31c6 4E8B34F3 		mov	r14, QWORD PTR [rbx+r14*8]	# _103, *_98
 7995              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7996              		.loc 1 912 5 view .LVU2751
 7997 31ca 4939F7   		cmp	r15, rsi	# destination_stop_word, copy_word
 7998              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 7999              		.loc 1 913 29 view .LVU2752
 8000 31cd 4E8934C3 		mov	QWORD PTR [rbx+r8*8], r14	# *_102, _103
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8001              		.loc 1 912 48 is_stmt 1 view .LVU2753
 8002              	.LVL393:
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8003              		.loc 1 912 11 view .LVU2754
 8004              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8005              		.loc 1 912 5 is_stmt 0 view .LVU2755
 8006 31d1 0F82D200 		jb	.L804	#,
 8006      0000
 913:sieve_extend.c **** 
 8007              		.loc 1 913 9 is_stmt 1 view .LVU2756
 8008              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8009              		.loc 1 913 39 is_stmt 0 view .LVU2757
 8010 31d7 488B7C0B 		mov	rdi, QWORD PTR 8[rbx+rcx]	# _34, *_83
 8010      08
 8011              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8012              		.loc 1 913 29 view .LVU2758
 8013 31dc 48893CF3 		mov	QWORD PTR [rbx+rsi*8], rdi	# *_72, _34
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8014              		.loc 1 912 48 is_stmt 1 view .LVU2759
GAS LISTING /tmp/ccBvFgp2.s 			page 225


 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8015              		.loc 1 912 11 view .LVU2760
 8016 31e0 C5F877   		vzeroupper
 8017              	.L805:
 8018              	# sieve_extend.c:916:  }
 916:sieve_extend.c **** 
 8019              		.loc 1 916 2 is_stmt 0 view .LVU2761
 8020 31e3 488D65D8 		lea	rsp, -40[rbp]	#,
 8021              	.LVL394:
 916:sieve_extend.c **** 
 8022              		.loc 1 916 2 view .LVU2762
 8023 31e7 5B       		pop	rbx	#
 8024 31e8 415C     		pop	r12	#
 8025 31ea 415D     		pop	r13	#
 8026 31ec 415E     		pop	r14	#
 8027 31ee 415F     		pop	r15	#
 8028 31f0 5D       		pop	rbp	#
 8029              		.cfi_remember_state
 8030              		.cfi_def_cfa 7, 8
 8031              	.LVL395:
 916:sieve_extend.c **** 
 8032              		.loc 1 916 2 view .LVU2763
 8033 31f1 C3       		ret	
 8034              	.LVL396:
 8035              		.p2align 4,,7
 8036 31f2 660F1F44 		.p2align 3
 8036      0000
 8037              	.L561:
 8038              		.cfi_restore_state
 916:sieve_extend.c **** 
 8039              		.loc 1 916 2 view .LVU2764
 8040 31f8 488B7424 		mov	rsi, QWORD PTR 80[rsp]	# destination_stop_word, %sfp
 8040      50
 8041 31fd 4E8D243B 		lea	r12, [rbx+r15]	# ivtmp.411,
 8042              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8043              		.loc 1 913 39 view .LVU2765
 8044 3201 4929C5   		sub	r13, rax	# tmp791, ivtmp.425
 8045              	.LVL397:
 913:sieve_extend.c **** 
 8046              		.loc 1 913 39 view .LVU2766
 8047 3204 488D5CF3 		lea	rbx, 8[rbx+rsi*8]	# _701,
 8047      08
 8048 3209 4989D9   		mov	r9, rbx	# tmp799, _701
 8049 320c 4D29E1   		sub	r9, r12	# tmp799, ivtmp.411
 8050 320f 4983E908 		sub	r9, 8	# tmp800,
 8051 3213 49C1E903 		shr	r9, 3	# tmp798,
 8052 3217 4983C101 		add	r9, 1	# tmp801,
 8053 321b 4183E107 		and	r9d, 7	# tmp802,
 8054 321f 0F849B00 		je	.L567	#,
 8054      0000
 8055 3225 4983F901 		cmp	r9, 1	# tmp802,
 8056 3229 746C     		je	.L720	#,
 8057 322b 4983F902 		cmp	r9, 2	# tmp802,
 8058 322f 7459     		je	.L721	#,
 8059 3231 4983F903 		cmp	r9, 3	# tmp802,
 8060 3235 7446     		je	.L722	#,
GAS LISTING /tmp/ccBvFgp2.s 			page 226


 8061 3237 4983F904 		cmp	r9, 4	# tmp802,
 8062 323b 7433     		je	.L723	#,
 8063 323d 4983F905 		cmp	r9, 5	# tmp802,
 8064 3241 7420     		je	.L724	#,
 8065 3243 4983F906 		cmp	r9, 6	# tmp802,
 8066 3247 740D     		je	.L725	#,
 913:sieve_extend.c **** 
 8067              		.loc 1 913 9 is_stmt 1 view .LVU2767
 8068              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8069              		.loc 1 913 39 is_stmt 0 view .LVU2768
 8070 3249 4F8B1CEC 		mov	r11, QWORD PTR [r12+r13*8]	# _170, MEM[base: _604, index: _696, step: 8, offset: 0B]
 8071 324d 4983C408 		add	r12, 8	# ivtmp.411,
 8072              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8073              		.loc 1 913 29 view .LVU2769
 8074 3251 4D895C24 		mov	QWORD PTR -8[r12], r11	# MEM[base: _604, offset: 0B], _170
 8074      F8
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8075              		.loc 1 912 48 is_stmt 1 view .LVU2770
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8076              		.loc 1 912 11 view .LVU2771
 8077              	.L725:
 913:sieve_extend.c **** 
 8078              		.loc 1 913 9 view .LVU2772
 8079              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8080              		.loc 1 913 39 is_stmt 0 view .LVU2773
 8081 3256 4B8B04EC 		mov	rax, QWORD PTR [r12+r13*8]	# _170, MEM[base: _604, index: _696, step: 8, offset: 0B]
 8082 325a 4983C408 		add	r12, 8	# ivtmp.411,
 8083              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8084              		.loc 1 913 29 view .LVU2774
 8085 325e 49894424 		mov	QWORD PTR -8[r12], rax	# MEM[base: _604, offset: 0B], _170
 8085      F8
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8086              		.loc 1 912 48 is_stmt 1 view .LVU2775
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8087              		.loc 1 912 11 view .LVU2776
 8088              	.L724:
 913:sieve_extend.c **** 
 8089              		.loc 1 913 9 view .LVU2777
 8090              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8091              		.loc 1 913 39 is_stmt 0 view .LVU2778
 8092 3263 4B8B14EC 		mov	rdx, QWORD PTR [r12+r13*8]	# _170, MEM[base: _604, index: _696, step: 8, offset: 0B]
 8093 3267 4983C408 		add	r12, 8	# ivtmp.411,
 8094              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8095              		.loc 1 913 29 view .LVU2779
 8096 326b 49895424 		mov	QWORD PTR -8[r12], rdx	# MEM[base: _604, offset: 0B], _170
 8096      F8
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8097              		.loc 1 912 48 is_stmt 1 view .LVU2780
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8098              		.loc 1 912 11 view .LVU2781
 8099              	.L723:
GAS LISTING /tmp/ccBvFgp2.s 			page 227


 913:sieve_extend.c **** 
 8100              		.loc 1 913 9 view .LVU2782
 8101              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8102              		.loc 1 913 39 is_stmt 0 view .LVU2783
 8103 3270 4F8B14EC 		mov	r10, QWORD PTR [r12+r13*8]	# _170, MEM[base: _604, index: _696, step: 8, offset: 0B]
 8104 3274 4983C408 		add	r12, 8	# ivtmp.411,
 8105              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8106              		.loc 1 913 29 view .LVU2784
 8107 3278 4D895424 		mov	QWORD PTR -8[r12], r10	# MEM[base: _604, offset: 0B], _170
 8107      F8
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8108              		.loc 1 912 48 is_stmt 1 view .LVU2785
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8109              		.loc 1 912 11 view .LVU2786
 8110              	.L722:
 913:sieve_extend.c **** 
 8111              		.loc 1 913 9 view .LVU2787
 8112              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8113              		.loc 1 913 39 is_stmt 0 view .LVU2788
 8114 327d 4F8B04EC 		mov	r8, QWORD PTR [r12+r13*8]	# _170, MEM[base: _604, index: _696, step: 8, offset: 0B]
 8115 3281 4983C408 		add	r12, 8	# ivtmp.411,
 8116              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8117              		.loc 1 913 29 view .LVU2789
 8118 3285 4D894424 		mov	QWORD PTR -8[r12], r8	# MEM[base: _604, offset: 0B], _170
 8118      F8
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8119              		.loc 1 912 48 is_stmt 1 view .LVU2790
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8120              		.loc 1 912 11 view .LVU2791
 8121              	.L721:
 913:sieve_extend.c **** 
 8122              		.loc 1 913 9 view .LVU2792
 8123              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8124              		.loc 1 913 39 is_stmt 0 view .LVU2793
 8125 328a 4F8B3CEC 		mov	r15, QWORD PTR [r12+r13*8]	# _170, MEM[base: _604, index: _696, step: 8, offset: 0B]
 8126 328e 4983C408 		add	r12, 8	# ivtmp.411,
 8127              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8128              		.loc 1 913 29 view .LVU2794
 8129 3292 4D897C24 		mov	QWORD PTR -8[r12], r15	# MEM[base: _604, offset: 0B], _170
 8129      F8
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8130              		.loc 1 912 48 is_stmt 1 view .LVU2795
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8131              		.loc 1 912 11 view .LVU2796
 8132              	.L720:
 913:sieve_extend.c **** 
 8133              		.loc 1 913 9 view .LVU2797
 8134              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8135              		.loc 1 913 39 is_stmt 0 view .LVU2798
 8136 3297 4B8B0CEC 		mov	rcx, QWORD PTR [r12+r13*8]	# _170, MEM[base: _604, index: _696, step: 8, offset: 0B]
GAS LISTING /tmp/ccBvFgp2.s 			page 228


 8137 329b 4983C408 		add	r12, 8	# ivtmp.411,
 8138              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8139              		.loc 1 913 29 view .LVU2799
 8140 329f 49894C24 		mov	QWORD PTR -8[r12], rcx	# MEM[base: _604, offset: 0B], _170
 8140      F8
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8141              		.loc 1 912 48 is_stmt 1 view .LVU2800
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8142              		.loc 1 912 11 view .LVU2801
 8143              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8144              		.loc 1 912 5 is_stmt 0 view .LVU2802
 8145 32a4 4939DC   		cmp	r12, rbx	# ivtmp.411, _701
 8146 32a7 7517     		jne	.L567	#,
 8147              	.LVL398:
 8148              	.L804:
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8149              		.loc 1 912 5 view .LVU2803
 8150 32a9 C5F877   		vzeroupper
 8151              	# sieve_extend.c:916:  }
 916:sieve_extend.c **** 
 8152              		.loc 1 916 2 view .LVU2804
 8153 32ac 488D65D8 		lea	rsp, -40[rbp]	#,
 8154              	.LVL399:
 916:sieve_extend.c **** 
 8155              		.loc 1 916 2 view .LVU2805
 8156 32b0 5B       		pop	rbx	#
 8157 32b1 415C     		pop	r12	#
 8158 32b3 415D     		pop	r13	#
 8159 32b5 415E     		pop	r14	#
 8160 32b7 415F     		pop	r15	#
 8161 32b9 5D       		pop	rbp	#
 8162              		.cfi_remember_state
 8163              		.cfi_def_cfa 7, 8
 8164              	.LVL400:
 916:sieve_extend.c **** 
 8165              		.loc 1 916 2 view .LVU2806
 8166 32ba C3       		ret	
 8167              	.LVL401:
 8168 32bb 0F1F4400 		.p2align 4,,7
 8168      00
 8169              		.p2align 3
 8170              	.L567:
 8171              		.cfi_restore_state
 913:sieve_extend.c **** 
 8172              		.loc 1 913 9 is_stmt 1 view .LVU2807
 8173              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8174              		.loc 1 913 39 is_stmt 0 view .LVU2808
 8175 32c0 4F8B34EC 		mov	r14, QWORD PTR [r12+r13*8]	# _170, MEM[base: _604, index: _696, step: 8, offset: 0B]
 8176              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8177              		.loc 1 913 29 view .LVU2809
 8178 32c4 4D893424 		mov	QWORD PTR [r12], r14	# MEM[base: _604, offset: 0B], _170
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8179              		.loc 1 912 48 is_stmt 1 view .LVU2810
GAS LISTING /tmp/ccBvFgp2.s 			page 229


 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8180              		.loc 1 912 11 view .LVU2811
 913:sieve_extend.c **** 
 8181              		.loc 1 913 9 view .LVU2812
 8182              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8183              		.loc 1 913 39 is_stmt 0 view .LVU2813
 8184 32c8 4B8B7CEC 		mov	rdi, QWORD PTR 8[r12+r13*8]	# _170, MEM[base: _604, index: _696, step: 8, offset: 0B]
 8184      08
 8185              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8186              		.loc 1 913 29 view .LVU2814
 8187 32cd 49897C24 		mov	QWORD PTR 8[r12], rdi	# MEM[base: _604, offset: 0B], _170
 8187      08
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8188              		.loc 1 912 48 is_stmt 1 view .LVU2815
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8189              		.loc 1 912 11 view .LVU2816
 913:sieve_extend.c **** 
 8190              		.loc 1 913 9 view .LVU2817
 8191              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8192              		.loc 1 913 39 is_stmt 0 view .LVU2818
 8193 32d2 4B8B74EC 		mov	rsi, QWORD PTR 16[r12+r13*8]	# _170, MEM[base: _604, index: _696, step: 8, offset: 0B]
 8193      10
 8194              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8195              		.loc 1 913 29 view .LVU2819
 8196 32d7 49897424 		mov	QWORD PTR 16[r12], rsi	# MEM[base: _604, offset: 0B], _170
 8196      10
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8197              		.loc 1 912 48 is_stmt 1 view .LVU2820
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8198              		.loc 1 912 11 view .LVU2821
 913:sieve_extend.c **** 
 8199              		.loc 1 913 9 view .LVU2822
 8200              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8201              		.loc 1 913 39 is_stmt 0 view .LVU2823
 8202 32dc 4F8B4CEC 		mov	r9, QWORD PTR 24[r12+r13*8]	# _170, MEM[base: _604, index: _696, step: 8, offset: 0B]
 8202      18
 8203              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8204              		.loc 1 913 29 view .LVU2824
 8205 32e1 4D894C24 		mov	QWORD PTR 24[r12], r9	# MEM[base: _604, offset: 0B], _170
 8205      18
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8206              		.loc 1 912 48 is_stmt 1 view .LVU2825
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8207              		.loc 1 912 11 view .LVU2826
 913:sieve_extend.c **** 
 8208              		.loc 1 913 9 view .LVU2827
 8209              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8210              		.loc 1 913 39 is_stmt 0 view .LVU2828
 8211 32e6 4F8B5CEC 		mov	r11, QWORD PTR 32[r12+r13*8]	# _170, MEM[base: _604, index: _696, step: 8, offset: 0B]
 8211      20
GAS LISTING /tmp/ccBvFgp2.s 			page 230


 8212              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8213              		.loc 1 913 29 view .LVU2829
 8214 32eb 4D895C24 		mov	QWORD PTR 32[r12], r11	# MEM[base: _604, offset: 0B], _170
 8214      20
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8215              		.loc 1 912 48 is_stmt 1 view .LVU2830
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8216              		.loc 1 912 11 view .LVU2831
 913:sieve_extend.c **** 
 8217              		.loc 1 913 9 view .LVU2832
 8218              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8219              		.loc 1 913 39 is_stmt 0 view .LVU2833
 8220 32f0 4B8B44EC 		mov	rax, QWORD PTR 40[r12+r13*8]	# _170, MEM[base: _604, index: _696, step: 8, offset: 0B]
 8220      28
 8221              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8222              		.loc 1 913 29 view .LVU2834
 8223 32f5 49894424 		mov	QWORD PTR 40[r12], rax	# MEM[base: _604, offset: 0B], _170
 8223      28
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8224              		.loc 1 912 48 is_stmt 1 view .LVU2835
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8225              		.loc 1 912 11 view .LVU2836
 913:sieve_extend.c **** 
 8226              		.loc 1 913 9 view .LVU2837
 8227              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8228              		.loc 1 913 39 is_stmt 0 view .LVU2838
 8229 32fa 4B8B54EC 		mov	rdx, QWORD PTR 48[r12+r13*8]	# _170, MEM[base: _604, index: _696, step: 8, offset: 0B]
 8229      30
 8230              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8231              		.loc 1 913 29 view .LVU2839
 8232 32ff 49895424 		mov	QWORD PTR 48[r12], rdx	# MEM[base: _604, offset: 0B], _170
 8232      30
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8233              		.loc 1 912 48 is_stmt 1 view .LVU2840
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8234              		.loc 1 912 11 view .LVU2841
 913:sieve_extend.c **** 
 8235              		.loc 1 913 9 view .LVU2842
 8236              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8237              		.loc 1 913 39 is_stmt 0 view .LVU2843
 8238 3304 4F8B54EC 		mov	r10, QWORD PTR 56[r12+r13*8]	# _170, MEM[base: _604, index: _696, step: 8, offset: 0B]
 8238      38
 8239 3309 4983C440 		add	r12, 64	# ivtmp.411,
 8240              	# sieve_extend.c:913:         bitarray[copy_word] = bitarray[source_word];
 913:sieve_extend.c **** 
 8241              		.loc 1 913 29 view .LVU2844
 8242 330d 4D895424 		mov	QWORD PTR -8[r12], r10	# MEM[base: _604, offset: 0B], _170
 8242      F8
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8243              		.loc 1 912 48 is_stmt 1 view .LVU2845
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/ccBvFgp2.s 			page 231


 8244              		.loc 1 912 11 view .LVU2846
 8245              	# sieve_extend.c:912:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8246              		.loc 1 912 5 is_stmt 0 view .LVU2847
 8247 3312 4939DC   		cmp	r12, rbx	# ivtmp.411, _701
 8248 3315 75A9     		jne	.L567	#,
 8249 3317 EB90     		jmp	.L804	#
 8250              	.LVL402:
 8251 3319 0F1F8000 		.p2align 4,,7
 8251      000000
 8252              		.p2align 3
 8253              	.L544:
 912:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 8254              		.loc 1 912 5 view .LVU2848
 8255 3320 4C8B7424 		mov	r14, QWORD PTR 48[rsp]	# fast_loop_stop_word, %sfp
 8255      30
 8256 3325 4989C1   		mov	r9, rax	# tmp823, ivtmp.425
 8257 3328 49F7D1   		not	r9	# tmp823
 8258 332b 4801D9   		add	rcx, rbx	# ivtmp.456, bitarray
 8259              	.LBB400:
 8260              	.LBB381:
 8261              	.LBB370:
 8262              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8263              		.loc 1 737 63 view .LVU2849
 8264 332e 4489FE   		mov	esi, r15d	# tmp1324, _18
 8265              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8266              		.loc 1 737 42 view .LVU2850
 8267 3331 C4E29BF7 		shrx	rdx, QWORD PTR [rcx], r12	# tmp681, MEM[base: _743, offset: 0B], _12
 8267      11
 8268 3336 4D01F1   		add	r9, r14	# tmp824, fast_loop_stop_word
 8269              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8270              		.loc 1 737 63 view .LVU2851
 8271 3339 4589FA   		mov	r10d, r15d	# _18, shift_flipped
 8272              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 8273              		.loc 1 736 19 view .LVU2852
 8274 333c 4C8B4108 		mov	r8, QWORD PTR 8[rcx]	# source1, MEM[base: _743, offset: 8B]
 8275              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8276              		.loc 1 737 63 view .LVU2853
 8277 3340 C4C2C9F7 		shlx	rdi, r8, rsi	# tmp683, source1, tmp1324
 8277      F8
 8278 3345 49D1E9   		shr	r9	# tmp822
 8279              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8280              		.loc 1 737 52 view .LVU2854
 8281 3348 4809FA   		or	rdx, rdi	# tmp684, tmp683
 8282              	# sieve_extend.c:740:         copy_word += 2;
 740:sieve_extend.c ****         source_word += 2;
 8283              		.loc 1 740 19 view .LVU2855
 8284 334b 488D7802 		lea	rdi, 2[rax]	# copy_word,
 8285 334f 49F7D3   		not	r11	# tmp794
 8286              	.LVL403:
 8287              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
GAS LISTING /tmp/ccBvFgp2.s 			page 232


 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8288              		.loc 1 737 52 view .LVU2856
 8289 3352 488914C3 		mov	QWORD PTR [rbx+rax*8], rdx	# MEM[base: bitarray_67(D), index: copy_word_412, step: 8, offset: 
 8290 3356 4183E103 		and	r9d, 3	# tmp825,
 8291              	.LVL404:
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 8292              		.loc 1 735 9 is_stmt 1 view .LVU2857
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 8293              		.loc 1 736 9 view .LVU2858
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8294              		.loc 1 737 9 view .LVU2859
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 8295              		.loc 1 738 9 view .LVU2860
 739:sieve_extend.c ****         copy_word += 2;
 8296              		.loc 1 739 9 view .LVU2861
 8297              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8298              		.loc 1 739 42 is_stmt 0 view .LVU2862
 8299 335a C4429BF7 		shrx	r8, r8, r12	# tmp687, source1, _12
 8299      C0
 8300              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8301              		.loc 1 739 63 view .LVU2863
 8302 335f C4E2A9F7 		shlx	rdx, QWORD PTR 16[rcx], r10	# tmp685, MEM[base: _743, offset: 16B], tmp1325
 8302      5110
 8303              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8304              		.loc 1 739 52 view .LVU2864
 8305 3365 4909D0   		or	r8, rdx	# tmp688, tmp685
 8306              	.LBE370:
 8307              	# sieve_extend.c:734:     while (copy_word < fast_loop_stop_word) {
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 8308              		.loc 1 734 11 view .LVU2865
 8309 3368 4939FE   		cmp	r14, rdi	# fast_loop_stop_word, copy_word
 8310 336b 4D8D143B 		lea	r10, [r11+rdi]	# distance,
 8311 336f 488D5110 		lea	rdx, 16[rcx]	# ivtmp.456,
 8312              	.LBB371:
 8313              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8314              		.loc 1 739 52 view .LVU2866
 8315 3373 4C8944C3 		mov	QWORD PTR 8[rbx+rax*8], r8	# MEM[base: bitarray_67(D), index: copy_word_412, step: 8, offset: 
 8315      08
 8316              	.LVL405:
 740:sieve_extend.c ****         source_word += 2;
 8317              		.loc 1 740 9 is_stmt 1 view .LVU2867
 741:sieve_extend.c ****         distance += 2;
 8318              		.loc 1 741 9 view .LVU2868
 742:sieve_extend.c ****     }
 8319              		.loc 1 742 9 view .LVU2869
 742:sieve_extend.c ****     }
 8320              		.loc 1 742 9 is_stmt 0 view .LVU2870
 8321              	.LBE371:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 8322              		.loc 1 734 11 is_stmt 1 view .LVU2871
 8323 3378 0F8644F6 		jbe	.L548	#,
 8323      FFFF
 8324 337e 4D85C9   		test	r9, r9	# tmp825
GAS LISTING /tmp/ccBvFgp2.s 			page 233


 8325 3381 0F848B00 		je	.L798	#,
 8325      0000
 8326 3387 4983F901 		cmp	r9, 1	# tmp825,
 8327 338b 7440     		je	.L732	#,
 8328 338d 4983F902 		cmp	r9, 2	# tmp825,
 8329 3391 0F857403 		jne	.L807	#,
 8329      0000
 8330              	.LVL406:
 8331              	.L733:
 8332              	.LBB372:
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 8333              		.loc 1 735 9 view .LVU2872
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 8334              		.loc 1 736 9 view .LVU2873
 8335              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 8336              		.loc 1 736 19 is_stmt 0 view .LVU2874
 8337 3397 488B7208 		mov	rsi, QWORD PTR 8[rdx]	# source1, MEM[base: _743, offset: 8B]
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8338              		.loc 1 737 9 is_stmt 1 view .LVU2875
 8339              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8340              		.loc 1 737 42 is_stmt 0 view .LVU2876
 8341 339b C4E29BF7 		shrx	rcx, QWORD PTR [rdx], r12	# tmp1171, MEM[base: _743, offset: 0B], _12
 8341      0A
 8342              	.LVL407:
 8343              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8344              		.loc 1 737 63 view .LVU2877
 8345 33a0 4589F8   		mov	r8d, r15d	# tmp1427, _18
 8346 33a3 C462B9F7 		shlx	r10, rsi, r8	# tmp1172, source1, tmp1427
 8346      D6
 8347              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8348              		.loc 1 737 52 view .LVU2878
 8349 33a8 4C09D1   		or	rcx, r10	# tmp1173, tmp1172
 8350              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8351              		.loc 1 737 63 view .LVU2879
 8352 33ab 4589FE   		mov	r14d, r15d	# _18, shift_flipped
 8353              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8354              		.loc 1 739 42 view .LVU2880
 8355 33ae C4E29BF7 		shrx	rsi, rsi, r12	# tmp1176, source1, _12
 8355      F6
 8356              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8357              		.loc 1 737 52 view .LVU2881
 8358 33b3 48890CFB 		mov	QWORD PTR [rbx+rdi*8], rcx	# MEM[base: bitarray_67(D), index: copy_word_412, step: 8, offset: 
 8359              	.LVL408:
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 8360              		.loc 1 738 9 is_stmt 1 view .LVU2882
 739:sieve_extend.c ****         copy_word += 2;
 8361              		.loc 1 739 9 view .LVU2883
 8362              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8363              		.loc 1 739 63 is_stmt 0 view .LVU2884
GAS LISTING /tmp/ccBvFgp2.s 			page 234


 8364 33b7 C46289F7 		shlx	r9, QWORD PTR 16[rdx], r14	# tmp1175, MEM[base: _743, offset: 16B], tmp1428
 8364      4A10
 8365              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8366              		.loc 1 739 52 view .LVU2885
 8367 33bd 4C09CE   		or	rsi, r9	# tmp1177, tmp1175
 8368 33c0 488974FB 		mov	QWORD PTR 8[rbx+rdi*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_412, step: 8, offset:
 8368      08
 8369              	.LVL409:
 740:sieve_extend.c ****         source_word += 2;
 8370              		.loc 1 740 9 is_stmt 1 view .LVU2886
 8371 33c5 4883C210 		add	rdx, 16	# ivtmp.456,
 8372              	# sieve_extend.c:740:         copy_word += 2;
 740:sieve_extend.c ****         source_word += 2;
 8373              		.loc 1 740 19 is_stmt 0 view .LVU2887
 8374 33c9 4883C702 		add	rdi, 2	# copy_word,
 741:sieve_extend.c ****         distance += 2;
 8375              		.loc 1 741 9 is_stmt 1 view .LVU2888
 742:sieve_extend.c ****     }
 8376              		.loc 1 742 9 view .LVU2889
 742:sieve_extend.c ****     }
 8377              		.loc 1 742 9 is_stmt 0 view .LVU2890
 8378              	.LBE372:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 8379              		.loc 1 734 11 is_stmt 1 view .LVU2891
 8380              	.LVL410:
 8381              	.L732:
 8382              	.LBB373:
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 8383              		.loc 1 735 9 view .LVU2892
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 8384              		.loc 1 736 9 view .LVU2893
 8385              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 8386              		.loc 1 736 19 is_stmt 0 view .LVU2894
 8387 33cd 4C8B4A08 		mov	r9, QWORD PTR 8[rdx]	# source1, MEM[base: _743, offset: 8B]
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8388              		.loc 1 737 9 is_stmt 1 view .LVU2895
 8389              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8390              		.loc 1 737 42 is_stmt 0 view .LVU2896
 8391 33d1 C4E29BF7 		shrx	rcx, QWORD PTR [rdx], r12	# tmp1181, MEM[base: _743, offset: 0B], _12
 8391      0A
 8392              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8393              		.loc 1 737 63 view .LVU2897
 8394 33d6 4589F8   		mov	r8d, r15d	# tmp1429, _18
 8395 33d9 C442B9F7 		shlx	r10, r9, r8	# tmp1182, source1, tmp1429
 8395      D1
 8396              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8397              		.loc 1 737 52 view .LVU2898
 8398 33de 4C09D1   		or	rcx, r10	# tmp1183, tmp1182
 8399              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8400              		.loc 1 737 63 view .LVU2899
 8401 33e1 4589FE   		mov	r14d, r15d	# _18, shift_flipped
GAS LISTING /tmp/ccBvFgp2.s 			page 235


 8402              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8403              		.loc 1 739 42 view .LVU2900
 8404 33e4 C4C29BF7 		shrx	rsi, r9, r12	# tmp1186, source1, _12
 8404      F1
 8405              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8406              		.loc 1 737 52 view .LVU2901
 8407 33e9 48890CFB 		mov	QWORD PTR [rbx+rdi*8], rcx	# MEM[base: bitarray_67(D), index: copy_word_412, step: 8, offset: 
 8408              	.LVL411:
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 8409              		.loc 1 738 9 is_stmt 1 view .LVU2902
 739:sieve_extend.c ****         copy_word += 2;
 8410              		.loc 1 739 9 view .LVU2903
 8411              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8412              		.loc 1 739 63 is_stmt 0 view .LVU2904
 8413 33ed C4E289F7 		shlx	rcx, QWORD PTR 16[rdx], r14	# tmp1185, MEM[base: _743, offset: 16B], tmp1430
 8413      4A10
 8414              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8415              		.loc 1 739 52 view .LVU2905
 8416 33f3 4809CE   		or	rsi, rcx	# tmp1187, tmp1185
 8417 33f6 488974FB 		mov	QWORD PTR 8[rbx+rdi*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_412, step: 8, offset:
 8417      08
 8418              	.LVL412:
 740:sieve_extend.c ****         source_word += 2;
 8419              		.loc 1 740 9 is_stmt 1 view .LVU2906
 8420              	# sieve_extend.c:740:         copy_word += 2;
 740:sieve_extend.c ****         source_word += 2;
 8421              		.loc 1 740 19 is_stmt 0 view .LVU2907
 8422 33fb 4883C702 		add	rdi, 2	# copy_word,
 741:sieve_extend.c ****         distance += 2;
 8423              		.loc 1 741 9 is_stmt 1 view .LVU2908
 742:sieve_extend.c ****     }
 8424              		.loc 1 742 9 view .LVU2909
 8425 33ff 4883C210 		add	rdx, 16	# ivtmp.456,
 8426              	.LBE373:
 8427              	# sieve_extend.c:734:     while (copy_word < fast_loop_stop_word) {
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 8428              		.loc 1 734 11 is_stmt 0 view .LVU2910
 8429 3403 48397C24 		cmp	QWORD PTR 48[rsp], rdi	# %sfp, copy_word
 8429      30
 8430 3408 4D8D143B 		lea	r10, [r11+rdi]	# distance,
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 8431              		.loc 1 734 11 is_stmt 1 view .LVU2911
 8432 340c 0F86B0F5 		jbe	.L548	#,
 8432      FFFF
 8433              	.LVL413:
 8434              	.L798:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 8435              		.loc 1 734 11 is_stmt 0 view .LVU2912
 8436 3412 4489F9   		mov	ecx, r15d	# _18, shift_flipped
 8437              	.L547:
 8438              	.LVL414:
 8439              	.LBB374:
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
GAS LISTING /tmp/ccBvFgp2.s 			page 236


 8440              		.loc 1 735 9 is_stmt 1 view .LVU2913
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 8441              		.loc 1 736 9 view .LVU2914
 8442              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 8443              		.loc 1 736 19 is_stmt 0 view .LVU2915
 8444 3415 4C8B4A08 		mov	r9, QWORD PTR 8[rdx]	# source1, MEM[base: _743, offset: 8B]
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8445              		.loc 1 737 9 is_stmt 1 view .LVU2916
 8446              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8447              		.loc 1 737 42 is_stmt 0 view .LVU2917
 8448 3419 C4629BF7 		shrx	r8, QWORD PTR [rdx], r12	# tmp897, MEM[base: _743, offset: 0B], _12
 8448      02
 8449              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8450              		.loc 1 737 63 view .LVU2918
 8451 341e C442F1F7 		shlx	r14, r9, rcx	# tmp898, source1, _18
 8451      F1
 8452              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8453              		.loc 1 737 52 view .LVU2919
 8454 3423 4D09F0   		or	r8, r14	# tmp899, tmp898
 8455              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8456              		.loc 1 739 42 view .LVU2920
 8457 3426 C4429BF7 		shrx	r10, r9, r12	# tmp902, source1, _12
 8457      D1
 8458              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8459              		.loc 1 737 52 view .LVU2921
 8460 342b 4C8904FB 		mov	QWORD PTR [rbx+rdi*8], r8	# MEM[base: bitarray_67(D), index: copy_word_412, step: 8, offset: 0
 8461              	.LVL415:
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 8462              		.loc 1 738 9 is_stmt 1 view .LVU2922
 739:sieve_extend.c ****         copy_word += 2;
 8463              		.loc 1 739 9 view .LVU2923
 8464              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8465              		.loc 1 739 63 is_stmt 0 view .LVU2924
 8466 342f C4E2F1F7 		shlx	rsi, QWORD PTR 16[rdx], rcx	# tmp901, MEM[base: _743, offset: 16B], _18
 8466      7210
 8467              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8468              		.loc 1 739 52 view .LVU2925
 8469 3435 4C09D6   		or	rsi, r10	# tmp903, tmp902
 8470 3438 488974FB 		mov	QWORD PTR 8[rbx+rdi*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_412, step: 8, offset:
 8470      08
 8471              	.LVL416:
 740:sieve_extend.c ****         source_word += 2;
 8472              		.loc 1 740 9 is_stmt 1 view .LVU2926
 8473              	# sieve_extend.c:740:         copy_word += 2;
 740:sieve_extend.c ****         source_word += 2;
 8474              		.loc 1 740 19 is_stmt 0 view .LVU2927
 8475 343d 4C8D4F02 		lea	r9, 2[rdi]	# tmp826,
 741:sieve_extend.c ****         distance += 2;
 8476              		.loc 1 741 9 is_stmt 1 view .LVU2928
GAS LISTING /tmp/ccBvFgp2.s 			page 237


 742:sieve_extend.c ****     }
 8477              		.loc 1 742 9 view .LVU2929
 742:sieve_extend.c ****     }
 8478              		.loc 1 742 9 is_stmt 0 view .LVU2930
 8479              	.LBE374:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 8480              		.loc 1 734 11 is_stmt 1 view .LVU2931
 8481              	.LBB375:
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 8482              		.loc 1 735 9 view .LVU2932
 8483              	.LVL417:
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 8484              		.loc 1 736 9 view .LVU2933
 8485              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 8486              		.loc 1 736 19 is_stmt 0 view .LVU2934
 8487 3441 4C8B4218 		mov	r8, QWORD PTR 24[rdx]	# source1, MEM[base: _743, offset: 8B]
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8488              		.loc 1 737 9 is_stmt 1 view .LVU2935
 8489              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8490              		.loc 1 737 42 is_stmt 0 view .LVU2936
 8491 3445 C4E29BF7 		shrx	rsi, QWORD PTR 16[rdx], r12	# tmp909, MEM[base: _743, offset: 0B], _12
 8491      7210
 8492              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8493              		.loc 1 737 63 view .LVU2937
 8494 344b C442F1F7 		shlx	r14, r8, rcx	# tmp910, source1, _18
 8494      F0
 8495              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8496              		.loc 1 737 52 view .LVU2938
 8497 3450 4C09F6   		or	rsi, r14	# tmp911, tmp910
 8498 3453 4A8934CB 		mov	QWORD PTR [rbx+r9*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_412, step: 8, offset: 0
 8499              	.LVL418:
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 8500              		.loc 1 738 9 is_stmt 1 view .LVU2939
 739:sieve_extend.c ****         copy_word += 2;
 8501              		.loc 1 739 9 view .LVU2940
 8502              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8503              		.loc 1 739 42 is_stmt 0 view .LVU2941
 8504 3457 C4429BF7 		shrx	r8, r8, r12	# tmp914, source1, _12
 8504      C0
 8505              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8506              		.loc 1 739 63 view .LVU2942
 8507 345c 4C8B5220 		mov	r10, QWORD PTR 32[rdx]	# MEM[base: _743, offset: 16B], MEM[base: _743, offset: 16B]
 8508 3460 C4C2F1F7 		shlx	rsi, r10, rcx	# tmp913, MEM[base: _743, offset: 16B], _18
 8508      F2
 8509              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8510              		.loc 1 739 52 view .LVU2943
 8511 3465 4909F0   		or	r8, rsi	# tmp915, tmp913
 8512 3468 4883C240 		add	rdx, 64	# ivtmp.456,
 8513 346c 4E8944CB 		mov	QWORD PTR 8[rbx+r9*8], r8	# MEM[base: bitarray_67(D), index: copy_word_412, step: 8, offset: 8
 8513      08
GAS LISTING /tmp/ccBvFgp2.s 			page 238


 8514              	.LVL419:
 740:sieve_extend.c ****         source_word += 2;
 8515              		.loc 1 740 9 is_stmt 1 view .LVU2944
 8516              	# sieve_extend.c:740:         copy_word += 2;
 740:sieve_extend.c ****         source_word += 2;
 8517              		.loc 1 740 19 is_stmt 0 view .LVU2945
 8518 3471 4C8D4F04 		lea	r9, 4[rdi]	# copy_word,
 741:sieve_extend.c ****         distance += 2;
 8519              		.loc 1 741 9 is_stmt 1 view .LVU2946
 742:sieve_extend.c ****     }
 8520              		.loc 1 742 9 view .LVU2947
 742:sieve_extend.c ****     }
 8521              		.loc 1 742 9 is_stmt 0 view .LVU2948
 8522              	.LBE375:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 8523              		.loc 1 734 11 is_stmt 1 view .LVU2949
 8524              	.LBB376:
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 8525              		.loc 1 735 9 view .LVU2950
 8526              	.LVL420:
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 8527              		.loc 1 736 9 view .LVU2951
 8528              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 8529              		.loc 1 736 19 is_stmt 0 view .LVU2952
 8530 3475 4C8B52E8 		mov	r10, QWORD PTR -24[rdx]	# source1, MEM[base: _743, offset: 8B]
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8531              		.loc 1 737 9 is_stmt 1 view .LVU2953
 8532              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8533              		.loc 1 737 42 is_stmt 0 view .LVU2954
 8534 3479 C4E29BF7 		shrx	rsi, QWORD PTR -32[rdx], r12	# tmp921, MEM[base: _743, offset: 0B], _12
 8534      72E0
 8535              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8536              		.loc 1 737 63 view .LVU2955
 8537 347f C442F1F7 		shlx	r14, r10, rcx	# tmp922, source1, _18
 8537      F2
 8538              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8539              		.loc 1 737 52 view .LVU2956
 8540 3484 4C09F6   		or	rsi, r14	# tmp923, tmp922
 8541 3487 4A8934CB 		mov	QWORD PTR [rbx+r9*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_412, step: 8, offset: 0
 8542              	.LVL421:
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 8543              		.loc 1 738 9 is_stmt 1 view .LVU2957
 739:sieve_extend.c ****         copy_word += 2;
 8544              		.loc 1 739 9 view .LVU2958
 8545              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8546              		.loc 1 739 42 is_stmt 0 view .LVU2959
 8547 348b C4429BF7 		shrx	r10, r10, r12	# tmp926, source1, _12
 8547      D2
 8548              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8549              		.loc 1 739 63 view .LVU2960
 8550 3490 4C8B42F0 		mov	r8, QWORD PTR -16[rdx]	# MEM[base: _743, offset: 16B], MEM[base: _743, offset: 16B]
GAS LISTING /tmp/ccBvFgp2.s 			page 239


 8551 3494 C4C2F1F7 		shlx	rsi, r8, rcx	# tmp925, MEM[base: _743, offset: 16B], _18
 8551      F0
 8552              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8553              		.loc 1 739 52 view .LVU2961
 8554 3499 4909F2   		or	r10, rsi	# tmp927, tmp925
 8555 349c 4E8954CB 		mov	QWORD PTR 8[rbx+r9*8], r10	# MEM[base: bitarray_67(D), index: copy_word_412, step: 8, offset: 
 8555      08
 8556              	.LVL422:
 740:sieve_extend.c ****         source_word += 2;
 8557              		.loc 1 740 9 is_stmt 1 view .LVU2962
 8558              	# sieve_extend.c:740:         copy_word += 2;
 740:sieve_extend.c ****         source_word += 2;
 8559              		.loc 1 740 19 is_stmt 0 view .LVU2963
 8560 34a1 4C8D4F06 		lea	r9, 6[rdi]	# copy_word,
 741:sieve_extend.c ****         distance += 2;
 8561              		.loc 1 741 9 is_stmt 1 view .LVU2964
 742:sieve_extend.c ****     }
 8562              		.loc 1 742 9 view .LVU2965
 742:sieve_extend.c ****     }
 8563              		.loc 1 742 9 is_stmt 0 view .LVU2966
 8564              	.LBE376:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 8565              		.loc 1 734 11 is_stmt 1 view .LVU2967
 8566              	.LBB377:
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 8567              		.loc 1 735 9 view .LVU2968
 8568              	.LVL423:
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 8569              		.loc 1 736 9 view .LVU2969
 8570              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 8571              		.loc 1 736 19 is_stmt 0 view .LVU2970
 8572 34a5 4C8B42F8 		mov	r8, QWORD PTR -8[rdx]	# source1, MEM[base: _743, offset: 8B]
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8573              		.loc 1 737 9 is_stmt 1 view .LVU2971
 8574              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8575              		.loc 1 737 42 is_stmt 0 view .LVU2972
 8576 34a9 C4E29BF7 		shrx	rsi, QWORD PTR -16[rdx], r12	# tmp933, MEM[base: _743, offset: 0B], _12
 8576      72F0
 8577              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8578              		.loc 1 737 63 view .LVU2973
 8579 34af C442F1F7 		shlx	r14, r8, rcx	# tmp934, source1, _18
 8579      F0
 8580              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8581              		.loc 1 737 52 view .LVU2974
 8582 34b4 4C09F6   		or	rsi, r14	# tmp935, tmp934
 8583 34b7 4A8934CB 		mov	QWORD PTR [rbx+r9*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_412, step: 8, offset: 0
 8584              	.LVL424:
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 8585              		.loc 1 738 9 is_stmt 1 view .LVU2975
 739:sieve_extend.c ****         copy_word += 2;
 8586              		.loc 1 739 9 view .LVU2976
 8587              	# sieve_extend.c:740:         copy_word += 2;
GAS LISTING /tmp/ccBvFgp2.s 			page 240


 740:sieve_extend.c ****         source_word += 2;
 8588              		.loc 1 740 19 is_stmt 0 view .LVU2977
 8589 34bb 4883C708 		add	rdi, 8	# copy_word,
 8590              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8591              		.loc 1 739 42 view .LVU2978
 8592 34bf C4429BF7 		shrx	r8, r8, r12	# tmp938, source1, _12
 8592      C0
 8593              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8594              		.loc 1 739 63 view .LVU2979
 8595 34c4 4C8B12   		mov	r10, QWORD PTR [rdx]	# MEM[base: _743, offset: 16B], MEM[base: _743, offset: 16B]
 8596 34c7 C4C2F1F7 		shlx	rsi, r10, rcx	# tmp937, MEM[base: _743, offset: 16B], _18
 8596      F2
 8597              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8598              		.loc 1 739 52 view .LVU2980
 8599 34cc 4909F0   		or	r8, rsi	# tmp939, tmp937
 8600              	.LBE377:
 8601              	# sieve_extend.c:734:     while (copy_word < fast_loop_stop_word) {
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 8602              		.loc 1 734 11 view .LVU2981
 8603 34cf 48397C24 		cmp	QWORD PTR 48[rsp], rdi	# %sfp, copy_word
 8603      30
 8604 34d4 4D8D143B 		lea	r10, [r11+rdi]	# distance,
 8605              	.LBB378:
 8606              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8607              		.loc 1 739 52 view .LVU2982
 8608 34d8 4E8944CB 		mov	QWORD PTR 8[rbx+r9*8], r8	# MEM[base: bitarray_67(D), index: copy_word_412, step: 8, offset: 8
 8608      08
 8609              	.LVL425:
 740:sieve_extend.c ****         source_word += 2;
 8610              		.loc 1 740 9 is_stmt 1 view .LVU2983
 741:sieve_extend.c ****         distance += 2;
 8611              		.loc 1 741 9 view .LVU2984
 742:sieve_extend.c ****     }
 8612              		.loc 1 742 9 view .LVU2985
 742:sieve_extend.c ****     }
 8613              		.loc 1 742 9 is_stmt 0 view .LVU2986
 8614              	.LBE378:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 8615              		.loc 1 734 11 is_stmt 1 view .LVU2987
 8616 34dd 0F8732FF 		ja	.L547	#,
 8616      FFFF
 8617 34e3 E9DAF4FF 		jmp	.L548	#
 8617      FF
 8618              	.LVL426:
 8619              		.p2align 4,,7
 8620              		.p2align 3
 8621              	.L569:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 8622              		.loc 1 734 11 is_stmt 0 view .LVU2988
 8623              	.LBE381:
 8624              	.LBE400:
 8625              	# sieve_extend.c:898:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
GAS LISTING /tmp/ccBvFgp2.s 			page 241


 8626              		.loc 1 898 5 view .LVU2989
 8627 34e8 4889C6   		mov	rsi, rax	# copy_word, ivtmp.425
 8628              	# sieve_extend.c:892:     source_word += distance;
 892:sieve_extend.c ****     copy_word += distance;
 8629              		.loc 1 892 17 view .LVU2990
 8630 34eb 4C89D9   		mov	rcx, r11	# source_word, _183
 8631 34ee 4D8D4301 		lea	r8, 1[r11]	# tmp793,
 8632 34f2 E9CDF5FF 		jmp	.L551	#
 8632      FF
 8633              		.p2align 4,,7
 8634 34f7 90       		.p2align 3
 8635              	.L550:
 892:sieve_extend.c ****     copy_word += distance;
 8636              		.loc 1 892 17 view .LVU2991
 8637 34f8 488B7C24 		mov	rdi, QWORD PTR 88[rsp]	# _183, %sfp
 8637      58
 8638 34fd 4801DA   		add	rdx, rbx	# ivtmp.433, bitarray
 8639 3500 4C8B5424 		mov	r10, QWORD PTR 64[rsp]	# tmp749, %sfp
 8639      40
 8640              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8641              		.loc 1 899 29 view .LVU2992
 8642 3505 4829F8   		sub	rax, rdi	# tmp753, _183
 8643 3508 4901FA   		add	r10, rdi	# tmp749, _183
 8644 350b 4E8D4CD3 		lea	r9, 8[rbx+r10*8]	# tmp752,
 8644      08
 8645 3510 4929F1   		sub	r9, rsi	# tmp752, _220
 8646 3513 4C89CE   		mov	rsi, r9	# _729, tmp752
 8647 3516 4929D1   		sub	r9, rdx	# tmp811, ivtmp.433
 8648 3519 4983E908 		sub	r9, 8	# tmp812,
 8649 351d 49C1E903 		shr	r9, 3	# tmp810,
 8650 3521 4983C101 		add	r9, 1	# tmp813,
 8651 3525 4183E107 		and	r9d, 7	# tmp814,
 8652 3529 0F84F900 		je	.L795	#,
 8652      0000
 8653 352f 4983F901 		cmp	r9, 1	# tmp814,
 8654 3533 0F84CA00 		je	.L707	#,
 8654      0000
 8655 3539 4983F902 		cmp	r9, 2	# tmp814,
 8656 353d 0F84A500 		je	.L708	#,
 8656      0000
 8657 3543 4983F903 		cmp	r9, 3	# tmp814,
 8658 3547 0F848000 		je	.L709	#,
 8658      0000
 8659 354d 4983F904 		cmp	r9, 4	# tmp814,
 8660 3551 745E     		je	.L710	#,
 8661 3553 4983F905 		cmp	r9, 5	# tmp814,
 8662 3557 743D     		je	.L711	#,
 8663 3559 4983F906 		cmp	r9, 6	# tmp814,
 8664 355d 741C     		je	.L712	#,
 899:sieve_extend.c ****     }
 8665              		.loc 1 899 9 is_stmt 1 view .LVU2993
 8666              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8667              		.loc 1 899 56 is_stmt 0 view .LVU2994
 8668 355f C4629BF7 		shrx	r8, QWORD PTR [rdx], r12	# tmp1090, MEM[base: _720, offset: 0B], _12
 8668      02
GAS LISTING /tmp/ccBvFgp2.s 			page 242


 8669              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8670              		.loc 1 899 94 view .LVU2995
 8671 3564 440FB65C 		movzx	r11d, BYTE PTR 72[rsp]	# tmp1404, %sfp
 8671      2448
 8672 356a C462A1F7 		shlx	r14, QWORD PTR 8[rdx], r11	# tmp1092, MEM[base: _720, offset: 8B], tmp1404
 8672      7208
 8673              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8674              		.loc 1 899 66 view .LVU2996
 8675 3570 4D09F0   		or	r8, r14	# tmp1093, tmp1092
 8676 3573 4C8904C2 		mov	QWORD PTR [rdx+rax*8], r8	# MEM[base: _720, index: _722, step: 8, offset: 0B], tmp1093
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8677              		.loc 1 898 43 is_stmt 1 view .LVU2997
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8678              		.loc 1 898 11 view .LVU2998
 8679 3577 4883C208 		add	rdx, 8	# ivtmp.433,
 8680              	.L712:
 899:sieve_extend.c ****     }
 8681              		.loc 1 899 9 view .LVU2999
 8682              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8683              		.loc 1 899 56 is_stmt 0 view .LVU3000
 8684 357b C4629BF7 		shrx	r15, QWORD PTR [rdx], r12	# tmp1095, MEM[base: _720, offset: 0B], _12
 8684      3A
 8685              	.LVL427:
 8686              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8687              		.loc 1 899 94 view .LVU3001
 8688 3580 0FB64C24 		movzx	ecx, BYTE PTR 72[rsp]	# tmp1405, %sfp
 8688      48
 8689 3585 C462F1F7 		shlx	r13, QWORD PTR 8[rdx], rcx	# tmp1097, MEM[base: _720, offset: 8B], tmp1405
 8689      6A08
 8690              	.LVL428:
 8691              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8692              		.loc 1 899 66 view .LVU3002
 8693 358b 4D09EF   		or	r15, r13	# tmp1098, tmp1097
 8694 358e 4C893CC2 		mov	QWORD PTR [rdx+rax*8], r15	# MEM[base: _720, index: _722, step: 8, offset: 0B], tmp1098
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8695              		.loc 1 898 43 is_stmt 1 view .LVU3003
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8696              		.loc 1 898 11 view .LVU3004
 8697 3592 4883C208 		add	rdx, 8	# ivtmp.433,
 8698              	.L711:
 899:sieve_extend.c ****     }
 8699              		.loc 1 899 9 view .LVU3005
 8700              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8701              		.loc 1 899 56 is_stmt 0 view .LVU3006
 8702 3596 C4629BF7 		shrx	r10, QWORD PTR [rdx], r12	# tmp1100, MEM[base: _720, offset: 0B], _12
 8702      12
 8703              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8704              		.loc 1 899 94 view .LVU3007
 8705 359b 0FB67C24 		movzx	edi, BYTE PTR 72[rsp]	# tmp1406, %sfp
 8705      48
GAS LISTING /tmp/ccBvFgp2.s 			page 243


 8706 35a0 C462C1F7 		shlx	r9, QWORD PTR 8[rdx], rdi	# tmp1102, MEM[base: _720, offset: 8B], tmp1406
 8706      4A08
 8707              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8708              		.loc 1 899 66 view .LVU3008
 8709 35a6 4D09CA   		or	r10, r9	# tmp1103, tmp1102
 8710 35a9 4C8914C2 		mov	QWORD PTR [rdx+rax*8], r10	# MEM[base: _720, index: _722, step: 8, offset: 0B], tmp1103
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8711              		.loc 1 898 43 is_stmt 1 view .LVU3009
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8712              		.loc 1 898 11 view .LVU3010
 8713 35ad 4883C208 		add	rdx, 8	# ivtmp.433,
 8714              	.L710:
 899:sieve_extend.c ****     }
 8715              		.loc 1 899 9 view .LVU3011
 8716              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8717              		.loc 1 899 56 is_stmt 0 view .LVU3012
 8718 35b1 C4629BF7 		shrx	r8, QWORD PTR [rdx], r12	# tmp1105, MEM[base: _720, offset: 0B], _12
 8718      02
 8719              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8720              		.loc 1 899 94 view .LVU3013
 8721 35b6 440FB65C 		movzx	r11d, BYTE PTR 72[rsp]	# tmp1407, %sfp
 8721      2448
 8722 35bc C462A1F7 		shlx	r14, QWORD PTR 8[rdx], r11	# tmp1107, MEM[base: _720, offset: 8B], tmp1407
 8722      7208
 8723              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8724              		.loc 1 899 66 view .LVU3014
 8725 35c2 4D09F0   		or	r8, r14	# tmp1108, tmp1107
 8726 35c5 4C8904C2 		mov	QWORD PTR [rdx+rax*8], r8	# MEM[base: _720, index: _722, step: 8, offset: 0B], tmp1108
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8727              		.loc 1 898 43 is_stmt 1 view .LVU3015
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8728              		.loc 1 898 11 view .LVU3016
 8729 35c9 4883C208 		add	rdx, 8	# ivtmp.433,
 8730              	.L709:
 899:sieve_extend.c ****     }
 8731              		.loc 1 899 9 view .LVU3017
 8732              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8733              		.loc 1 899 56 is_stmt 0 view .LVU3018
 8734 35cd C4629BF7 		shrx	r15, QWORD PTR [rdx], r12	# tmp1110, MEM[base: _720, offset: 0B], _12
 8734      3A
 8735              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8736              		.loc 1 899 94 view .LVU3019
 8737 35d2 0FB64C24 		movzx	ecx, BYTE PTR 72[rsp]	# tmp1408, %sfp
 8737      48
 8738 35d7 C462F1F7 		shlx	r13, QWORD PTR 8[rdx], rcx	# tmp1112, MEM[base: _720, offset: 8B], tmp1408
 8738      6A08
 8739              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8740              		.loc 1 899 66 view .LVU3020
 8741 35dd 4D09EF   		or	r15, r13	# tmp1113, tmp1112
 8742 35e0 4C893CC2 		mov	QWORD PTR [rdx+rax*8], r15	# MEM[base: _720, index: _722, step: 8, offset: 0B], tmp1113
GAS LISTING /tmp/ccBvFgp2.s 			page 244


 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8743              		.loc 1 898 43 is_stmt 1 view .LVU3021
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8744              		.loc 1 898 11 view .LVU3022
 8745 35e4 4883C208 		add	rdx, 8	# ivtmp.433,
 8746              	.L708:
 899:sieve_extend.c ****     }
 8747              		.loc 1 899 9 view .LVU3023
 8748              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8749              		.loc 1 899 56 is_stmt 0 view .LVU3024
 8750 35e8 C4629BF7 		shrx	r10, QWORD PTR [rdx], r12	# tmp1115, MEM[base: _720, offset: 0B], _12
 8750      12
 8751              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8752              		.loc 1 899 94 view .LVU3025
 8753 35ed 0FB67C24 		movzx	edi, BYTE PTR 72[rsp]	# tmp1409, %sfp
 8753      48
 8754 35f2 C462C1F7 		shlx	r9, QWORD PTR 8[rdx], rdi	# tmp1117, MEM[base: _720, offset: 8B], tmp1409
 8754      4A08
 8755              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8756              		.loc 1 899 66 view .LVU3026
 8757 35f8 4D09CA   		or	r10, r9	# tmp1118, tmp1117
 8758 35fb 4C8914C2 		mov	QWORD PTR [rdx+rax*8], r10	# MEM[base: _720, index: _722, step: 8, offset: 0B], tmp1118
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8759              		.loc 1 898 43 is_stmt 1 view .LVU3027
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8760              		.loc 1 898 11 view .LVU3028
 8761 35ff 4883C208 		add	rdx, 8	# ivtmp.433,
 8762              	.L707:
 899:sieve_extend.c ****     }
 8763              		.loc 1 899 9 view .LVU3029
 8764              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8765              		.loc 1 899 56 is_stmt 0 view .LVU3030
 8766 3603 C4629BF7 		shrx	r8, QWORD PTR [rdx], r12	# tmp1120, MEM[base: _720, offset: 0B], _12
 8766      02
 8767              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8768              		.loc 1 899 94 view .LVU3031
 8769 3608 440FB65C 		movzx	r11d, BYTE PTR 72[rsp]	# tmp1410, %sfp
 8769      2448
 8770 360e C462A1F7 		shlx	r14, QWORD PTR 8[rdx], r11	# tmp1122, MEM[base: _720, offset: 8B], tmp1410
 8770      7208
 8771              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8772              		.loc 1 899 66 view .LVU3032
 8773 3614 4D09F0   		or	r8, r14	# tmp1123, tmp1122
 8774 3617 4C8904C2 		mov	QWORD PTR [rdx+rax*8], r8	# MEM[base: _720, index: _722, step: 8, offset: 0B], tmp1123
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8775              		.loc 1 898 43 is_stmt 1 view .LVU3033
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8776              		.loc 1 898 11 view .LVU3034
 8777 361b 4883C208 		add	rdx, 8	# ivtmp.433,
 8778              	# sieve_extend.c:898:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
GAS LISTING /tmp/ccBvFgp2.s 			page 245


 8779              		.loc 1 898 5 is_stmt 0 view .LVU3035
 8780 361f 4839F2   		cmp	rdx, rsi	# ivtmp.433, _729
 8781 3622 0F84C600 		je	.L781	#,
 8781      0000
 8782              	.L795:
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8783              		.loc 1 898 5 view .LVU3036
 8784 3628 448B7C24 		mov	r15d, DWORD PTR 72[rsp]	# _18, %sfp
 8784      48
 8785              	.L555:
 899:sieve_extend.c ****     }
 8786              		.loc 1 899 9 is_stmt 1 view .LVU3037
 8787              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8788              		.loc 1 899 94 is_stmt 0 view .LVU3038
 8789 362d C46281F7 		shlx	r13, QWORD PTR 8[rdx], r15	# tmp756, MEM[base: _720, offset: 8B], _18
 8789      6A08
 8790              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8791              		.loc 1 899 56 view .LVU3039
 8792 3633 C4E29BF7 		shrx	rcx, QWORD PTR [rdx], r12	# tmp754, MEM[base: _720, offset: 0B], _12
 8792      0A
 8793              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8794              		.loc 1 899 66 view .LVU3040
 8795 3638 4C09E9   		or	rcx, r13	# tmp758, tmp756
 8796 363b 4C8D5208 		lea	r10, 8[rdx]	# tmp815,
 8797 363f 48890CC2 		mov	QWORD PTR [rdx+rax*8], rcx	# MEM[base: _720, index: _722, step: 8, offset: 0B], tmp758
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8798              		.loc 1 898 43 is_stmt 1 view .LVU3041
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8799              		.loc 1 898 11 view .LVU3042
 899:sieve_extend.c ****     }
 8800              		.loc 1 899 9 view .LVU3043
 8801              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8802              		.loc 1 899 94 is_stmt 0 view .LVU3044
 8803 3643 C44281F7 		shlx	r9, QWORD PTR 8[r10], r15	# tmp988, MEM[base: _720, offset: 8B], _18
 8803      4A08
 8804              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8805              		.loc 1 899 56 view .LVU3045
 8806 3649 C4E29BF7 		shrx	rdi, QWORD PTR 8[rdx], r12	# tmp986, MEM[base: _720, offset: 0B], _12
 8806      7A08
 8807              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8808              		.loc 1 899 66 view .LVU3046
 8809 364f 4C09CF   		or	rdi, r9	# tmp989, tmp988
 8810 3652 4C8D5A10 		lea	r11, 16[rdx]	# ivtmp.433,
 8811 3656 488D4A18 		lea	rcx, 24[rdx]	# ivtmp.433,
 8812 365a 49893CC2 		mov	QWORD PTR [r10+rax*8], rdi	# MEM[base: _720, index: _722, step: 8, offset: 0B], tmp989
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8813              		.loc 1 898 43 is_stmt 1 view .LVU3047
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8814              		.loc 1 898 11 view .LVU3048
 899:sieve_extend.c ****     }
 8815              		.loc 1 899 9 view .LVU3049
GAS LISTING /tmp/ccBvFgp2.s 			page 246


 8816              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8817              		.loc 1 899 56 is_stmt 0 view .LVU3050
 8818 365e C4629BF7 		shrx	r14, QWORD PTR 16[rdx], r12	# tmp992, MEM[base: _720, offset: 0B], _12
 8818      7210
 8819              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8820              		.loc 1 899 94 view .LVU3051
 8821 3664 C44281F7 		shlx	r8, QWORD PTR 8[r11], r15	# tmp994, MEM[base: _720, offset: 8B], _18
 8821      4308
 8822              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8823              		.loc 1 899 66 view .LVU3052
 8824 366a 4D09C6   		or	r14, r8	# tmp995, tmp994
 8825 366d 4D8934C3 		mov	QWORD PTR [r11+rax*8], r14	# MEM[base: _720, index: _722, step: 8, offset: 0B], tmp995
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8826              		.loc 1 898 43 is_stmt 1 view .LVU3053
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8827              		.loc 1 898 11 view .LVU3054
 899:sieve_extend.c ****     }
 8828              		.loc 1 899 9 view .LVU3055
 8829              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8830              		.loc 1 899 56 is_stmt 0 view .LVU3056
 8831 3671 C4629BF7 		shrx	r13, QWORD PTR 24[rdx], r12	# tmp998, MEM[base: _720, offset: 0B], _12
 8831      6A18
 8832              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8833              		.loc 1 899 94 view .LVU3057
 8834 3677 C46281F7 		shlx	r10, QWORD PTR 8[rcx], r15	# tmp1000, MEM[base: _720, offset: 8B], _18
 8834      5108
 8835              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8836              		.loc 1 899 66 view .LVU3058
 8837 367d 4D09D5   		or	r13, r10	# tmp1001, tmp1000
 8838 3680 4C8D4A20 		lea	r9, 32[rdx]	# ivtmp.433,
 8839 3684 4C8D7228 		lea	r14, 40[rdx]	# ivtmp.433,
 8840 3688 4C892CC1 		mov	QWORD PTR [rcx+rax*8], r13	# MEM[base: _720, index: _722, step: 8, offset: 0B], tmp1001
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8841              		.loc 1 898 43 is_stmt 1 view .LVU3059
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8842              		.loc 1 898 11 view .LVU3060
 899:sieve_extend.c ****     }
 8843              		.loc 1 899 9 view .LVU3061
 8844              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8845              		.loc 1 899 94 is_stmt 0 view .LVU3062
 8846 368c C44281F7 		shlx	r11, QWORD PTR 8[r9], r15	# tmp1006, MEM[base: _720, offset: 8B], _18
 8846      5908
 8847              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8848              		.loc 1 899 56 view .LVU3063
 8849 3692 C4E29BF7 		shrx	rdi, QWORD PTR 32[rdx], r12	# tmp1004, MEM[base: _720, offset: 0B], _12
 8849      7A20
 8850              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8851              		.loc 1 899 66 view .LVU3064
GAS LISTING /tmp/ccBvFgp2.s 			page 247


 8852 3698 4C09DF   		or	rdi, r11	# tmp1007, tmp1006
 8853 369b 49893CC1 		mov	QWORD PTR [r9+rax*8], rdi	# MEM[base: _720, index: _722, step: 8, offset: 0B], tmp1007
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8854              		.loc 1 898 43 is_stmt 1 view .LVU3065
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8855              		.loc 1 898 11 view .LVU3066
 899:sieve_extend.c ****     }
 8856              		.loc 1 899 9 view .LVU3067
 8857              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8858              		.loc 1 899 56 is_stmt 0 view .LVU3068
 8859 369f C4E29BF7 		shrx	rcx, QWORD PTR 40[rdx], r12	# tmp1010, MEM[base: _720, offset: 0B], _12
 8859      4A28
 8860              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8861              		.loc 1 899 94 view .LVU3069
 8862 36a5 C44281F7 		shlx	r8, QWORD PTR 8[r14], r15	# tmp1012, MEM[base: _720, offset: 8B], _18
 8862      4608
 8863              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8864              		.loc 1 899 66 view .LVU3070
 8865 36ab 4C09C1   		or	rcx, r8	# tmp1013, tmp1012
 8866 36ae 4C8D6A30 		lea	r13, 48[rdx]	# ivtmp.433,
 8867 36b2 4C8D5A38 		lea	r11, 56[rdx]	# ivtmp.433,
 8868 36b6 49890CC6 		mov	QWORD PTR [r14+rax*8], rcx	# MEM[base: _720, index: _722, step: 8, offset: 0B], tmp1013
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8869              		.loc 1 898 43 is_stmt 1 view .LVU3071
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8870              		.loc 1 898 11 view .LVU3072
 899:sieve_extend.c ****     }
 8871              		.loc 1 899 9 view .LVU3073
 8872              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8873              		.loc 1 899 56 is_stmt 0 view .LVU3074
 8874 36ba C4629BF7 		shrx	r10, QWORD PTR 48[rdx], r12	# tmp1016, MEM[base: _720, offset: 0B], _12
 8874      5230
 8875              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8876              		.loc 1 899 94 view .LVU3075
 8877 36c0 C44281F7 		shlx	r9, QWORD PTR 8[r13], r15	# tmp1018, MEM[base: _720, offset: 8B], _18
 8877      4D08
 8878              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8879              		.loc 1 899 66 view .LVU3076
 8880 36c6 4D09CA   		or	r10, r9	# tmp1019, tmp1018
 8881 36c9 4D8954C5 		mov	QWORD PTR 0[r13+rax*8], r10	# MEM[base: _720, index: _722, step: 8, offset: 0B], tmp1019
 8881      00
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8882              		.loc 1 898 43 is_stmt 1 view .LVU3077
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8883              		.loc 1 898 11 view .LVU3078
 899:sieve_extend.c ****     }
 8884              		.loc 1 899 9 view .LVU3079
 8885 36ce 4883C240 		add	rdx, 64	# ivtmp.433,
 8886              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8887              		.loc 1 899 56 is_stmt 0 view .LVU3080
GAS LISTING /tmp/ccBvFgp2.s 			page 248


 8888 36d2 C4E29BF7 		shrx	rdi, QWORD PTR -8[rdx], r12	# tmp1022, MEM[base: _720, offset: 0B], _12
 8888      7AF8
 8889              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8890              		.loc 1 899 94 view .LVU3081
 8891 36d8 C44281F7 		shlx	r14, QWORD PTR 8[r11], r15	# tmp1024, MEM[base: _720, offset: 8B], _18
 8891      7308
 8892              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8893              		.loc 1 899 66 view .LVU3082
 8894 36de 4C09F7   		or	rdi, r14	# tmp1025, tmp1024
 8895              	# sieve_extend.c:898:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8896              		.loc 1 898 5 view .LVU3083
 8897 36e1 4839F2   		cmp	rdx, rsi	# ivtmp.433, _729
 8898              	# sieve_extend.c:899:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 899:sieve_extend.c ****     }
 8899              		.loc 1 899 66 view .LVU3084
 8900 36e4 49893CC3 		mov	QWORD PTR [r11+rax*8], rdi	# MEM[base: _720, index: _722, step: 8, offset: 0B], tmp1025
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8901              		.loc 1 898 43 is_stmt 1 view .LVU3085
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8902              		.loc 1 898 11 view .LVU3086
 8903              	# sieve_extend.c:898:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8904              		.loc 1 898 5 is_stmt 0 view .LVU3087
 8905 36e8 0F853FFF 		jne	.L555	#,
 8905      FFFF
 8906              	.L781:
 898:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 8907              		.loc 1 898 5 view .LVU3088
 8908 36ee 488B5424 		mov	rdx, QWORD PTR 64[rsp]	# aligned_copy_word, %sfp
 8908      40
 8909 36f3 4C8D5201 		lea	r10, 1[rdx]	# ivtmp.425,
 8910 36f7 E9E9F6FF 		jmp	.L556	#
 8910      FF
 8911              	.LVL429:
 8912 36fc 0F1F4000 		.p2align 4,,7
 8913              		.p2align 3
 8914              	.L570:
 8915              	# sieve_extend.c:892:     source_word += distance;
 892:sieve_extend.c ****     copy_word += distance;
 8916              		.loc 1 892 17 view .LVU3089
 8917 3700 4889C6   		mov	rsi, rax	# copy_word, ivtmp.425
 8918              	# sieve_extend.c:904:     source_word = copy_word - size; // recalibrate
 904:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 8919              		.loc 1 904 17 view .LVU3090
 8920 3703 4D89EE   		mov	r14, r13	# source_word, source_word
 8921 3706 E906F9FF 		jmp	.L562	#
 8921      FF
 8922              	.LVL430:
 8923              	.L807:
 8924              	.LBB401:
 8925              	.LBB382:
 8926              	.LBB379:
 735:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 8927              		.loc 1 735 9 is_stmt 1 view .LVU3091
GAS LISTING /tmp/ccBvFgp2.s 			page 249


 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 8928              		.loc 1 736 9 view .LVU3092
 8929              	# sieve_extend.c:736:         bitword_t source1 = bitarray[source_word+1];
 736:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 8930              		.loc 1 736 19 is_stmt 0 view .LVU3093
 8931 370b 4C8B4A08 		mov	r9, QWORD PTR 8[rdx]	# source1, MEM[base: _743, offset: 8B]
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8932              		.loc 1 737 9 is_stmt 1 view .LVU3094
 8933              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8934              		.loc 1 737 42 is_stmt 0 view .LVU3095
 8935 370f C4E29BF7 		shrx	rsi, QWORD PTR [rdx], r12	# tmp1161, MEM[base: _743, offset: 0B], _12
 8935      32
 8936              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8937              		.loc 1 737 63 view .LVU3096
 8938 3714 4589FA   		mov	r10d, r15d	# tmp1425, _18
 8939 3717 C442A9F7 		shlx	r8, r9, r10	# tmp1162, source1, tmp1425
 8939      C1
 8940              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8941              		.loc 1 737 52 view .LVU3097
 8942 371c 4C09C6   		or	rsi, r8	# tmp1163, tmp1162
 8943              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8944              		.loc 1 737 63 view .LVU3098
 8945 371f 4589FE   		mov	r14d, r15d	# _18, shift_flipped
 8946              	# sieve_extend.c:737:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 737:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 8947              		.loc 1 737 52 view .LVU3099
 8948 3722 488934FB 		mov	QWORD PTR [rbx+rdi*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_412, step: 8, offset: 
 8949              	.LVL431:
 738:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 8950              		.loc 1 738 9 is_stmt 1 view .LVU3100
 739:sieve_extend.c ****         copy_word += 2;
 8951              		.loc 1 739 9 view .LVU3101
 8952              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8953              		.loc 1 739 42 is_stmt 0 view .LVU3102
 8954 3726 C4429BF7 		shrx	r9, r9, r12	# tmp1166, source1, _12
 8954      C9
 8955              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8956              		.loc 1 739 63 view .LVU3103
 8957 372b 488B5210 		mov	rdx, QWORD PTR 16[rdx]	# MEM[base: _743, offset: 16B], MEM[base: _743, offset: 16B]
 8958 372f C46289F7 		shlx	r10, rdx, r14	# tmp1165, MEM[base: _743, offset: 16B], tmp1426
 8958      D2
 8959              	# sieve_extend.c:739:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 739:sieve_extend.c ****         copy_word += 2;
 8960              		.loc 1 739 52 view .LVU3104
 8961 3734 4D09CA   		or	r10, r9	# tmp1167, tmp1166
 8962 3737 488D5120 		lea	rdx, 32[rcx]	# ivtmp.456,
 8963 373b 4C8954FB 		mov	QWORD PTR 8[rbx+rdi*8], r10	# MEM[base: bitarray_67(D), index: copy_word_412, step: 8, offset:
 8963      08
 8964              	.LVL432:
 740:sieve_extend.c ****         source_word += 2;
 8965              		.loc 1 740 9 is_stmt 1 view .LVU3105
GAS LISTING /tmp/ccBvFgp2.s 			page 250


 8966              	# sieve_extend.c:740:         copy_word += 2;
 740:sieve_extend.c ****         source_word += 2;
 8967              		.loc 1 740 19 is_stmt 0 view .LVU3106
 8968 3740 488D7804 		lea	rdi, 4[rax]	# copy_word,
 741:sieve_extend.c ****         distance += 2;
 8969              		.loc 1 741 9 is_stmt 1 view .LVU3107
 742:sieve_extend.c ****     }
 8970              		.loc 1 742 9 view .LVU3108
 742:sieve_extend.c ****     }
 8971              		.loc 1 742 9 is_stmt 0 view .LVU3109
 8972              	.LBE379:
 734:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 8973              		.loc 1 734 11 is_stmt 1 view .LVU3110
 8974 3744 E94EFCFF 		jmp	.L733	#
 8974      FF
 8975              	.LBE382:
 8976              	.LBE401:
 8977              		.cfi_endproc
 8978              	.LFE72:
 8980              		.section	.rodata.str1.1,"aMS",@progbits,1
 8981              	.LC4:
 8982 0000 25336A75 		.string	"%3ju "
 8982      2000
 8983              	.LC5:
 8984 0006 0A466F75 		.string	"\nFound %ju primes until %ju\n"
 8984      6E642025 
 8984      6A752070 
 8984      72696D65 
 8984      7320756E 
 8985              		.text
 8986 3749 0F1F8000 		.p2align 4
 8986      000000
 8988              	show_primes.isra.0:
 8989              	.LVL433:
 8990              	.LFB87:
1075:sieve_extend.c ****     counter_t primeCount = 1;    // We already have 2
 8991              		.loc 1 1075 13 view -0
 8992              		.cfi_startproc
 8993              	.LBB402:
1077:sieve_extend.c ****         primeCount++;
 8994              		.loc 1 1077 30 view .LVU3112
 8995              	.LBE402:
 8996              	# sieve_extend.c:1075: static void show_primes(struct sieve_state *sieve, counter_t maxFactor) {
1075:sieve_extend.c ****     counter_t primeCount = 1;    // We already have 2
 8997              		.loc 1 1075 13 is_stmt 0 view .LVU3113
 8998 3750 4157     		push	r15	#
 8999              		.cfi_def_cfa_offset 16
 9000              		.cfi_offset 15, -16
 9001 3752 4156     		push	r14	#
 9002              		.cfi_def_cfa_offset 24
 9003              		.cfi_offset 14, -24
 9004 3754 4155     		push	r13	#
 9005              		.cfi_def_cfa_offset 32
 9006              		.cfi_offset 13, -32
 9007 3756 4154     		push	r12	#
 9008              		.cfi_def_cfa_offset 40
 9009              		.cfi_offset 12, -40
GAS LISTING /tmp/ccBvFgp2.s 			page 251


 9010 3758 4989F4   		mov	r12, rsi	# ISRA.72, tmp168
 9011 375b 55       		push	rbp	#
 9012              		.cfi_def_cfa_offset 48
 9013              		.cfi_offset 6, -48
 9014 375c 53       		push	rbx	#
 9015              		.cfi_def_cfa_offset 56
 9016              		.cfi_offset 3, -56
 9017 375d 488D6424 		lea	rsp, -8[rsp]	#,
 9017      F8
 9018              		.cfi_def_cfa_offset 64
 9019              	.LBB419:
 9020              	# sieve_extend.c:1077:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(s
1077:sieve_extend.c ****         primeCount++;
 9021              		.loc 1 1077 44 view .LVU3114
 9022 3762 488B36   		mov	rsi, QWORD PTR [rsi]	# prephitmp_86, *ISRA.72_32(D)
 9023              	# sieve_extend.c:1077:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(s
1077:sieve_extend.c ****         primeCount++;
 9024              		.loc 1 1077 5 view .LVU3115
 9025 3765 4883FE01 		cmp	rsi, 1	# prephitmp_86,
 9026 3769 0F867501 		jbe	.L815	#,
 9026      0000
 9027              	# sieve_extend.c:1079:         if (factor < maxFactor/2) {
1079:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 9028              		.loc 1 1079 31 view .LVU3116
 9029 376f 48D1EA   		shr	rdx	# maxFactor
 9030              	.LVL434:
1079:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 9031              		.loc 1 1079 31 view .LVU3117
 9032 3772 4989FD   		mov	r13, rdi	# ISRA.71, tmp167
 9033              	# sieve_extend.c:1077:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(s
1077:sieve_extend.c ****         primeCount++;
 9034              		.loc 1 1077 20 view .LVU3118
 9035 3775 BB010000 		mov	ebx, 1	# factor,
 9035      00
 9036              	# sieve_extend.c:1079:         if (factor < maxFactor/2) {
1079:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 9037              		.loc 1 1079 31 view .LVU3119
 9038 377a 4889D5   		mov	rbp, rdx	# _4, maxFactor
 9039              	.LBE419:
 9040              	# sieve_extend.c:1076:     counter_t primeCount = 1;    // We already have 2
1076:sieve_extend.c ****     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(sieve->bitarray, factor+
 9041              		.loc 1 1076 15 view .LVU3120
 9042 377d 41BF0100 		mov	r15d, 1	# primeCount,
 9042      0000
 9043              	.LBB420:
 9044              	.LBB403:
 9045              	.LBB404:
 9046              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 9047              		.file 3 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2020 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
GAS LISTING /tmp/ccBvFgp2.s 			page 252


   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <https://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _BITS_STDIO2_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #define _BITS_STDIO2_H 1
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __gnuc_va_list __ap) __THROW;
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 __gnuc_va_list __ap))
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_ISOC99 || defined __USE_UNIX98
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __gnuc_va_list __ap) __THROW;
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
GAS LISTING /tmp/ccBvFgp2.s 			page 253


  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, __gnuc_va_list __ap))
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, __gnuc_va_list __ap);
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  __gnuc_va_list __ap);
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 106:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 107:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
 9048              		.loc 3 107 10 view .LVU3121
 9049 3783 49BECDCC 		movabs	r14, -3689348814741910323	# tmp136,
 9049      CCCCCCCC 
 9049      CCCC
 9050              	.LVL435:
 9051 378d 0F1F00   		.p2align 4
 9052              		.p2align 3
 9053              	.L814:
 9054              		.loc 3 107 10 view .LVU3122
 9055              	.LBE404:
 9056              	.LBE403:
1078:sieve_extend.c ****         if (factor < maxFactor/2) {
 9057              		.loc 1 1078 9 is_stmt 1 view .LVU3123
 9058              	# sieve_extend.c:1078:         primeCount++;
1078:sieve_extend.c ****         if (factor < maxFactor/2) {
GAS LISTING /tmp/ccBvFgp2.s 			page 254


 9059              		.loc 1 1078 19 is_stmt 0 view .LVU3124
 9060 3790 4983C701 		add	r15, 1	# primeCount,
 9061              	.LVL436:
1079:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 9062              		.loc 1 1079 9 is_stmt 1 view .LVU3125
 9063              	# sieve_extend.c:1079:         if (factor < maxFactor/2) {
1079:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 9064              		.loc 1 1079 12 is_stmt 0 view .LVU3126
 9065 3794 4839DD   		cmp	rbp, rbx	# _4, factor
 9066 3797 0F87FB00 		ja	.L838	#,
 9066      0000
 9067              	.L810:
1077:sieve_extend.c ****         primeCount++;
 9068              		.loc 1 1077 52 is_stmt 1 view .LVU3127
 9069              	.LVL437:
 9070              	# sieve_extend.c:1077:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(s
1077:sieve_extend.c ****         primeCount++;
 9071              		.loc 1 1077 61 is_stmt 0 view .LVU3128
 9072 379d 4D8B4500 		mov	r8, QWORD PTR 0[r13]	# _11, *ISRA.71_33(D)
 9073 37a1 4883C301 		add	rbx, 1	# factor,
 9074              	.LVL438:
 9075              	.L837:
 9076              	.LBB409:
 9077              	.LBI409:
 122:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 9078              		.loc 1 122 25 is_stmt 1 view .LVU3129
 9079              	.LBB410:
 123:sieve_extend.c ****     return index;
 9080              		.loc 1 123 5 view .LVU3130
 123:sieve_extend.c ****     return index;
 9081              		.loc 1 123 11 view .LVU3131
 9082              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9083              		.loc 1 123 21 is_stmt 0 view .LVU3132
 9084 37a5 4889D9   		mov	rcx, rbx	# tmp124, factor
 9085 37a8 48C1E906 		shr	rcx, 6	# tmp124,
 9086              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9087              		.loc 1 123 12 view .LVU3133
 9088 37ac 4D8B0CC8 		mov	r9, QWORD PTR [r8+rcx*8]	# *_39,* _11
 9089              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9090              		.loc 1 123 11 view .LVU3134
 9091 37b0 490FA3D9 		bt	r9, rbx	# *_39, factor
 9092 37b4 0F83A600 		jnc	.L812	#,
 9092      0000
 123:sieve_extend.c ****     return index;
 9093              		.loc 1 123 58 is_stmt 1 view .LVU3135
 9094              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9095              		.loc 1 123 63 is_stmt 0 view .LVU3136
 9096 37ba 4C8D5301 		lea	r10, 1[rbx]	# tmp138,
 9097              	.LVL439:
 9098              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9099              		.loc 1 123 21 view .LVU3137
 9100 37be 4D89D3   		mov	r11, r10	# tmp129, factor
GAS LISTING /tmp/ccBvFgp2.s 			page 255


 9101              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9102              		.loc 1 123 63 view .LVU3138
 9103 37c1 4C89D3   		mov	rbx, r10	# factor, tmp138
 123:sieve_extend.c ****     return index;
 9104              		.loc 1 123 11 is_stmt 1 view .LVU3139
 9105              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9106              		.loc 1 123 21 is_stmt 0 view .LVU3140
 9107 37c4 49C1EB06 		shr	r11, 6	# tmp129,
 9108              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9109              		.loc 1 123 12 view .LVU3141
 9110 37c8 4B8B04D8 		mov	rax, QWORD PTR [r8+r11*8]	# *_16, *_16
 9111              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9112              		.loc 1 123 11 view .LVU3142
 9113 37cc 4C0FA3D0 		bt	rax, r10	# *_16, factor
 9114 37d0 0F838A00 		jnc	.L812	#,
 9114      0000
 123:sieve_extend.c ****     return index;
 9115              		.loc 1 123 58 is_stmt 1 view .LVU3143
 9116              	.LVL440:
 9117              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9118              		.loc 1 123 63 is_stmt 0 view .LVU3144
 9119 37d6 4883C301 		add	rbx, 1	# factor,
 9120              	.LVL441:
 123:sieve_extend.c ****     return index;
 9121              		.loc 1 123 11 is_stmt 1 view .LVU3145
 9122              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9123              		.loc 1 123 21 is_stmt 0 view .LVU3146
 9124 37da 4889DA   		mov	rdx, rbx	# tmp139, factor
 9125 37dd 48C1EA06 		shr	rdx, 6	# tmp139,
 9126              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9127              		.loc 1 123 12 view .LVU3147
 9128 37e1 498B3CD0 		mov	rdi, QWORD PTR [r8+rdx*8]	# *_16, *_16
 9129              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9130              		.loc 1 123 11 view .LVU3148
 9131 37e5 480FA3DF 		bt	rdi, rbx	# *_16, factor
 9132 37e9 7375     		jnc	.L812	#,
 123:sieve_extend.c ****     return index;
 9133              		.loc 1 123 58 is_stmt 1 view .LVU3149
 9134              	.LVL442:
 9135              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9136              		.loc 1 123 63 is_stmt 0 view .LVU3150
 9137 37eb 498D5A02 		lea	rbx, 2[r10]	# factor,
 9138              	.LVL443:
 123:sieve_extend.c ****     return index;
 9139              		.loc 1 123 11 is_stmt 1 view .LVU3151
 9140              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9141              		.loc 1 123 21 is_stmt 0 view .LVU3152
GAS LISTING /tmp/ccBvFgp2.s 			page 256


 9142 37ef 4889D9   		mov	rcx, rbx	# tmp143, factor
 9143 37f2 48C1E906 		shr	rcx, 6	# tmp143,
 9144              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9145              		.loc 1 123 12 view .LVU3153
 9146 37f6 4D8B0CC8 		mov	r9, QWORD PTR [r8+rcx*8]	# *_16, *_16
 9147              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9148              		.loc 1 123 11 view .LVU3154
 9149 37fa 490FA3D9 		bt	r9, rbx	# *_16, factor
 9150 37fe 7360     		jnc	.L812	#,
 123:sieve_extend.c ****     return index;
 9151              		.loc 1 123 58 is_stmt 1 view .LVU3155
 9152              	.LVL444:
 9153              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9154              		.loc 1 123 63 is_stmt 0 view .LVU3156
 9155 3800 498D5A03 		lea	rbx, 3[r10]	# factor,
 9156              	.LVL445:
 123:sieve_extend.c ****     return index;
 9157              		.loc 1 123 11 is_stmt 1 view .LVU3157
 9158              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9159              		.loc 1 123 21 is_stmt 0 view .LVU3158
 9160 3804 4989DB   		mov	r11, rbx	# tmp147, factor
 9161 3807 49C1EB06 		shr	r11, 6	# tmp147,
 9162              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9163              		.loc 1 123 12 view .LVU3159
 9164 380b 4B8B04D8 		mov	rax, QWORD PTR [r8+r11*8]	# *_16, *_16
 9165              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9166              		.loc 1 123 11 view .LVU3160
 9167 380f 480FA3D8 		bt	rax, rbx	# *_16, factor
 9168 3813 734B     		jnc	.L812	#,
 123:sieve_extend.c ****     return index;
 9169              		.loc 1 123 58 is_stmt 1 view .LVU3161
 9170              	.LVL446:
 9171              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9172              		.loc 1 123 63 is_stmt 0 view .LVU3162
 9173 3815 498D5A04 		lea	rbx, 4[r10]	# factor,
 9174              	.LVL447:
 123:sieve_extend.c ****     return index;
 9175              		.loc 1 123 11 is_stmt 1 view .LVU3163
 9176              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9177              		.loc 1 123 21 is_stmt 0 view .LVU3164
 9178 3819 4889DA   		mov	rdx, rbx	# tmp151, factor
 9179 381c 48C1EA06 		shr	rdx, 6	# tmp151,
 9180              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9181              		.loc 1 123 12 view .LVU3165
 9182 3820 498B3CD0 		mov	rdi, QWORD PTR [r8+rdx*8]	# *_16, *_16
 9183              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9184              		.loc 1 123 11 view .LVU3166
GAS LISTING /tmp/ccBvFgp2.s 			page 257


 9185 3824 480FA3DF 		bt	rdi, rbx	# *_16, factor
 9186 3828 7336     		jnc	.L812	#,
 123:sieve_extend.c ****     return index;
 9187              		.loc 1 123 58 is_stmt 1 view .LVU3167
 9188              	.LVL448:
 9189              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9190              		.loc 1 123 63 is_stmt 0 view .LVU3168
 9191 382a 498D5A05 		lea	rbx, 5[r10]	# factor,
 9192              	.LVL449:
 123:sieve_extend.c ****     return index;
 9193              		.loc 1 123 11 is_stmt 1 view .LVU3169
 9194              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9195              		.loc 1 123 21 is_stmt 0 view .LVU3170
 9196 382e 4889D9   		mov	rcx, rbx	# tmp155, factor
 9197 3831 48C1E906 		shr	rcx, 6	# tmp155,
 9198              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9199              		.loc 1 123 12 view .LVU3171
 9200 3835 4D8B0CC8 		mov	r9, QWORD PTR [r8+rcx*8]	# *_16, *_16
 9201              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9202              		.loc 1 123 11 view .LVU3172
 9203 3839 490FA3D9 		bt	r9, rbx	# *_16, factor
 9204 383d 7321     		jnc	.L812	#,
 123:sieve_extend.c ****     return index;
 9205              		.loc 1 123 58 is_stmt 1 view .LVU3173
 9206              	.LVL450:
 9207              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9208              		.loc 1 123 63 is_stmt 0 view .LVU3174
 9209 383f 498D5A06 		lea	rbx, 6[r10]	# factor,
 9210              	.LVL451:
 123:sieve_extend.c ****     return index;
 9211              		.loc 1 123 11 is_stmt 1 view .LVU3175
 9212              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9213              		.loc 1 123 21 is_stmt 0 view .LVU3176
 9214 3843 4989DB   		mov	r11, rbx	# tmp159, factor
 9215 3846 49C1EB06 		shr	r11, 6	# tmp159,
 9216              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9217              		.loc 1 123 12 view .LVU3177
 9218 384a 4B8B04D8 		mov	rax, QWORD PTR [r8+r11*8]	# *_16, *_16
 9219              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9220              		.loc 1 123 11 view .LVU3178
 9221 384e 480FA3D8 		bt	rax, rbx	# *_16, factor
 9222 3852 730C     		jnc	.L812	#,
 123:sieve_extend.c ****     return index;
 9223              		.loc 1 123 58 is_stmt 1 view .LVU3179
 9224              	.LVL452:
 9225              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9226              		.loc 1 123 63 is_stmt 0 view .LVU3180
 9227 3854 498D5A07 		lea	rbx, 7[r10]	# factor,
GAS LISTING /tmp/ccBvFgp2.s 			page 258


 9228              	.LVL453:
 123:sieve_extend.c ****     return index;
 9229              		.loc 1 123 11 is_stmt 1 view .LVU3181
 9230 3858 E948FFFF 		jmp	.L837	#
 9230      FF
 9231 385d 0F1F00   		.p2align 4,,7
 9232              		.p2align 3
 9233              	.L812:
 9234              	.LVL454:
 123:sieve_extend.c ****     return index;
 9235              		.loc 1 123 11 is_stmt 0 view .LVU3182
 9236              	.LBE410:
 9237              	.LBE409:
1077:sieve_extend.c ****         primeCount++;
 9238              		.loc 1 1077 30 is_stmt 1 view .LVU3183
 9239              	# sieve_extend.c:1077:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(s
1077:sieve_extend.c ****         primeCount++;
 9240              		.loc 1 1077 5 is_stmt 0 view .LVU3184
 9241 3860 4839F3   		cmp	rbx, rsi	# factor, prephitmp_86
 9242 3863 0F8227FF 		jb	.L814	#,
 9242      FFFF
 9243              	.LVL455:
 9244              	.L809:
1077:sieve_extend.c ****         primeCount++;
 9245              		.loc 1 1077 5 view .LVU3185
 9246              	.LBE420:
1084:sieve_extend.c **** }
 9247              		.loc 1 1084 5 is_stmt 1 view .LVU3186
 9248              	.LBB421:
 9249              	.LBI421:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 9250              		.loc 3 105 1 view .LVU3187
 9251              	.LBB422:
 9252              		.loc 3 107 3 view .LVU3188
 9253              	.LBE422:
 9254              	.LBE421:
 9255              	# sieve_extend.c:1085: }
1085:sieve_extend.c **** 
 9256              		.loc 1 1085 1 is_stmt 0 view .LVU3189
 9257 3869 488D6424 		lea	rsp, 8[rsp]	#,
 9257      08
 9258              		.cfi_remember_state
 9259              		.cfi_def_cfa_offset 56
 9260              	.LBB426:
 9261              	.LBB423:
 9262              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 9263              		.loc 3 107 10 view .LVU3190
 9264 386e 4C89FA   		mov	rdx, r15	#, primeCount
 9265              	.LBE423:
 9266              	.LBE426:
 9267              	# sieve_extend.c:1085: }
1085:sieve_extend.c **** 
 9268              		.loc 1 1085 1 view .LVU3191
 9269 3871 5B       		pop	rbx	#
 9270              		.cfi_def_cfa_offset 48
 9271              	# sieve_extend.c:1084:     printf("\nFound %ju primes until %ju\n",(uintmax_t)primeCount, (uintmax_
1084:sieve_extend.c **** }
GAS LISTING /tmp/ccBvFgp2.s 			page 259


 9272              		.loc 1 1084 5 view .LVU3192
 9273 3872 488D4C36 		lea	rcx, 1[rsi+rsi]	# tmp135,
 9273      01
 9274              	.LBB427:
 9275              	.LBB424:
 9276              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 9277              		.loc 3 107 10 view .LVU3193
 9278 3877 BF010000 		mov	edi, 1	#,
 9278      00
 9279 387c 31C0     		xor	eax, eax	#
 9280 387e 488D3500 		lea	rsi, .LC5[rip]	#,
 9280      000000
 9281              	.LBE424:
 9282              	.LBE427:
 9283              	# sieve_extend.c:1085: }
1085:sieve_extend.c **** 
 9284              		.loc 1 1085 1 view .LVU3194
 9285 3885 5D       		pop	rbp	#
 9286              		.cfi_def_cfa_offset 40
 9287 3886 415C     		pop	r12	#
 9288              		.cfi_def_cfa_offset 32
 9289 3888 415D     		pop	r13	#
 9290              		.cfi_def_cfa_offset 24
 9291 388a 415E     		pop	r14	#
 9292              		.cfi_def_cfa_offset 16
 9293 388c 415F     		pop	r15	#
 9294              		.cfi_def_cfa_offset 8
 9295              	.LBB428:
 9296              	.LBB425:
 9297              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 9298              		.loc 3 107 10 view .LVU3195
 9299 388e E9000000 		jmp	__printf_chk@PLT	#
 9299      00
 9300              	.LVL456:
 9301              		.p2align 4,,7
 9302 3893 0F1F4400 		.p2align 3
 9302      00
 9303              	.L838:
 9304              		.cfi_restore_state
 9305              		.loc 3 107 10 view .LVU3196
 9306              	.LBE425:
 9307              	.LBE428:
 9308              	.LBB429:
1080:sieve_extend.c ****             if (primeCount % 10 == 0) printf("\n");
 9309              		.loc 1 1080 13 is_stmt 1 view .LVU3197
 9310              	.LBB411:
 9311              	.LBI403:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 9312              		.loc 3 105 1 view .LVU3198
 9313              	.LBB405:
 9314              		.loc 3 107 3 view .LVU3199
 9315              	.LBE405:
 9316              	.LBE411:
 9317              	# sieve_extend.c:1080:             printf("%3ju ",(uintmax_t)factor*2+1);
1080:sieve_extend.c ****             if (primeCount % 10 == 0) printf("\n");
 9318              		.loc 1 1080 13 is_stmt 0 view .LVU3200
 9319 3898 488D541B 		lea	rdx, 1[rbx+rbx]	# tmp111,
GAS LISTING /tmp/ccBvFgp2.s 			page 260


 9319      01
 9320              	.LBB412:
 9321              	.LBB406:
 9322              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 9323              		.loc 3 107 10 view .LVU3201
 9324 389d BF010000 		mov	edi, 1	#,
 9324      00
 9325 38a2 31C0     		xor	eax, eax	#
 9326 38a4 488D3500 		lea	rsi, .LC4[rip]	#,
 9326      000000
 9327 38ab E8000000 		call	__printf_chk@PLT	#
 9327      00
 9328              	.LVL457:
 9329              		.loc 3 107 10 view .LVU3202
 9330              	.LBE406:
 9331              	.LBE412:
1081:sieve_extend.c ****         }
 9332              		.loc 1 1081 13 is_stmt 1 view .LVU3203
 9333              	.LBB413:
 9334              	.LBB407:
 9335              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 9336              		.loc 3 107 10 is_stmt 0 view .LVU3204
 9337 38b0 4C89F8   		mov	rax, r15	# tmp120, primeCount
 9338              	.LBE407:
 9339              	.LBE413:
 9340              	# sieve_extend.c:1081:             if (primeCount % 10 == 0) printf("\n");
1081:sieve_extend.c ****         }
 9341              		.loc 1 1081 16 view .LVU3205
 9342 38b3 48BF9999 		movabs	rdi, 1844674407370955161	# tmp172,
 9342      99999999 
 9342      9919
 9343              	.LBB414:
 9344              	.LBB408:
 9345              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 9346              		.loc 3 107 10 view .LVU3206
 9347 38bd 490FAFC6 		imul	rax, r14	# tmp120, tmp136
 9348 38c1 C4E3FBF0 		rorx	rdx, rax, 1	# tmp122, tmp120,
 9348      D001
 9349              	.LBE408:
 9350              	.LBE414:
 9351              	# sieve_extend.c:1081:             if (primeCount % 10 == 0) printf("\n");
1081:sieve_extend.c ****         }
 9352              		.loc 1 1081 16 view .LVU3207
 9353 38c7 4839FA   		cmp	rdx, rdi	# tmp122, tmp172
 9354 38ca 760C     		jbe	.L811	#,
 9355              	.L836:
 9356 38cc 498B3424 		mov	rsi, QWORD PTR [r12]	# prephitmp_86, *ISRA.72_32(D)
 9357              	.LBB415:
 9358              	.LBB416:
 9359              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 9360              		.loc 3 107 10 view .LVU3208
 9361 38d0 E9C8FEFF 		jmp	.L810	#
 9361      FF
 9362              		.p2align 4,,7
 9363 38d5 0F1F00   		.p2align 3
 9364              	.L811:
 9365              	.LBE416:
GAS LISTING /tmp/ccBvFgp2.s 			page 261


 9366              	.LBE415:
1081:sieve_extend.c ****         }
 9367              		.loc 1 1081 39 is_stmt 1 view .LVU3209
 9368              	.LVL458:
 9369              	.LBB418:
 9370              	.LBI415:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 9371              		.loc 3 105 1 view .LVU3210
 9372              	.LBB417:
 9373              		.loc 3 107 3 view .LVU3211
 9374              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 9375              		.loc 3 107 10 is_stmt 0 view .LVU3212
 9376 38d8 BF0A0000 		mov	edi, 10	#,
 9376      00
 9377 38dd E8000000 		call	putchar@PLT	#
 9377      00
 9378              	.LVL459:
 9379 38e2 EBE8     		jmp	.L836	#
 9380              	.LVL460:
 9381              	.L815:
 9382              		.loc 3 107 10 view .LVU3213
 9383              	.LBE417:
 9384              	.LBE418:
 9385              	.LBE429:
 9386              	# sieve_extend.c:1076:     counter_t primeCount = 1;    // We already have 2
1076:sieve_extend.c ****     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(sieve->bitarray, factor+
 9387              		.loc 1 1076 15 view .LVU3214
 9388 38e4 41BF0100 		mov	r15d, 1	# primeCount,
 9388      0000
 9389 38ea E97AFFFF 		jmp	.L809	#
 9389      FF
 9390              		.cfi_endproc
 9391              	.LFE87:
 9393 38ef 90       		.p2align 4
 9395              	sieve:
 9396              	.LVL461:
 9397              	.LFB76:
1053:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 9398              		.loc 1 1053 86 is_stmt 1 view -0
 9399              		.cfi_startproc
1054:sieve_extend.c ****     counter_t prime     = 0;
 9400              		.loc 1 1054 5 view .LVU3216
 9401              	# sieve_extend.c:1053: static struct sieve_state *sieve(const counter_t maxints, const counter_t bl
1053:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 9402              		.loc 1 1053 86 is_stmt 0 view .LVU3217
 9403 38f0 4157     		push	r15	#
 9404              		.cfi_def_cfa_offset 16
 9405              		.cfi_offset 15, -16
 9406 38f2 4156     		push	r14	#
 9407              		.cfi_def_cfa_offset 24
 9408              		.cfi_offset 14, -24
 9409 38f4 4155     		push	r13	#
 9410              		.cfi_def_cfa_offset 32
 9411              		.cfi_offset 13, -32
 9412 38f6 4154     		push	r12	#
 9413              		.cfi_def_cfa_offset 40
 9414              		.cfi_offset 12, -40
GAS LISTING /tmp/ccBvFgp2.s 			page 262


 9415 38f8 55       		push	rbp	#
 9416              		.cfi_def_cfa_offset 48
 9417              		.cfi_offset 6, -48
 9418 38f9 53       		push	rbx	#
 9419              		.cfi_def_cfa_offset 56
 9420              		.cfi_offset 3, -56
 9421 38fa 4889FB   		mov	rbx, rdi	# maxints, tmp601
 9422              	.LVL462:
 9423              	.LBB464:
 9424              	.LBI464:
 103:sieve_extend.c ****     struct sieve_state *sieve = aligned_alloc(8, sizeof(struct sieve_state));
 9425              		.loc 1 103 28 is_stmt 1 view .LVU3218
 9426              	.LBB465:
 104:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 9427              		.loc 1 104 5 view .LVU3219
 9428              	# sieve_extend.c:104:     struct sieve_state *sieve = aligned_alloc(8, sizeof(struct sieve_state));
 104:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 9429              		.loc 1 104 33 is_stmt 0 view .LVU3220
 9430 38fd BF080000 		mov	edi, 8	#,
 9430      00
 9431              	.LVL463:
 104:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 9432              		.loc 1 104 33 view .LVU3221
 9433              	.LBE465:
 9434              	.LBE464:
 9435              	# sieve_extend.c:1053: static struct sieve_state *sieve(const counter_t maxints, const counter_t bl
1053:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 9436              		.loc 1 1053 86 view .LVU3222
 9437 3902 488D6424 		lea	rsp, -88[rsp]	#,
 9437      A8
 9438              		.cfi_def_cfa_offset 144
 9439              	.LBB469:
 9440              	.LBB466:
 9441              	# sieve_extend.c:105:     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesiz
 105:sieve_extend.c **** 
 9442              		.loc 1 105 22 view .LVU3223
 9443 3907 4989DF   		mov	r15, rbx	# prephitmp_743, maxints
 9444 390a 49D1EF   		shr	r15	# prephitmp_743
 9445              	.LBE466:
 9446              	.LBE469:
 9447              	# sieve_extend.c:1053: static struct sieve_state *sieve(const counter_t maxints, const counter_t bl
1053:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 9448              		.loc 1 1053 86 view .LVU3224
 9449 390d 48897424 		mov	QWORD PTR 64[rsp], rsi	# %sfp, tmp602
 9449      40
 9450              	.LBB470:
 9451              	.LBB467:
 9452              	# sieve_extend.c:104:     struct sieve_state *sieve = aligned_alloc(8, sizeof(struct sieve_state));
 104:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 9453              		.loc 1 104 33 view .LVU3225
 9454 3912 BE180000 		mov	esi, 24	#,
 9454      00
 9455              	.LVL464:
 104:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 9456              		.loc 1 104 33 view .LVU3226
 9457 3917 E8000000 		call	aligned_alloc@PLT	#
 9457      00
GAS LISTING /tmp/ccBvFgp2.s 			page 263


 9458              	.LVL465:
 9459              	# sieve_extend.c:105:     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesiz
 105:sieve_extend.c **** 
 9460              		.loc 1 105 22 view .LVU3227
 9461 391c 498DB700 		lea	rsi, 1024[r15]	# tmp317,
 9461      040000
 9462              	# sieve_extend.c:107:     sieve->bitarray = aligned_alloc((size_t)anticiped_cache_line_bytesize, (s
 107:sieve_extend.c ****     sieve->bits     = size >> 1;
 9463              		.loc 1 107 23 view .LVU3228
 9464 3923 BF800000 		mov	edi, 128	#,
 9464      00
 9465              	# sieve_extend.c:104:     struct sieve_state *sieve = aligned_alloc(8, sizeof(struct sieve_state));
 104:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 9466              		.loc 1 104 33 view .LVU3229
 9467 3928 48894424 		mov	QWORD PTR 48[rsp], rax	# %sfp, <retval>
 9467      30
 9468 392d 4989C6   		mov	r14, rax	# <retval>, tmp603
 9469              	.LVL466:
 105:sieve_extend.c **** 
 9470              		.loc 1 105 5 is_stmt 1 view .LVU3230
 9471              	# sieve_extend.c:105:     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesiz
 105:sieve_extend.c **** 
 9472              		.loc 1 105 22 is_stmt 0 view .LVU3231
 9473 3930 48C1EE0A 		shr	rsi, 10	# tmp318,
 9474              	# sieve_extend.c:105:     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesiz
 105:sieve_extend.c **** 
 9475              		.loc 1 105 12 view .LVU3232
 9476 3934 48C1E607 		sal	rsi, 7	# memSize,
 9477              	# sieve_extend.c:105:     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesiz
 105:sieve_extend.c **** 
 9478              		.loc 1 105 22 view .LVU3233
 9479 3938 4C897C24 		mov	QWORD PTR 8[rsp], r15	# %sfp, prephitmp_743
 9479      08
 9480              	.LVL467:
 107:sieve_extend.c ****     sieve->bits     = size >> 1;
 9481              		.loc 1 107 5 is_stmt 1 view .LVU3234
 9482              	# sieve_extend.c:107:     sieve->bitarray = aligned_alloc((size_t)anticiped_cache_line_bytesize, (s
 107:sieve_extend.c ****     sieve->bits     = size >> 1;
 9483              		.loc 1 107 23 is_stmt 0 view .LVU3235
 9484 393d E8000000 		call	aligned_alloc@PLT	#
 9484      00
 9485              	.LVL468:
 107:sieve_extend.c ****     sieve->bits     = size >> 1;
 9486              		.loc 1 107 23 view .LVU3236
 9487 3942 48894424 		mov	QWORD PTR 56[rsp], rax	# %sfp, _96
 9487      38
 9488              	.LBE467:
 9489              	.LBE470:
 9490              	.LBB471:
 9491              	.LBB472:
 9492              	# sieve_extend.c:1024:     for (;range_stop < block_stop;) {
1024:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 9493              		.loc 1 1024 5 view .LVU3237
 9494 3947 4D85FF   		test	r15, r15	# prephitmp_743
 9495              	.LBE472:
 9496              	.LBE471:
 9497              	.LBB509:
GAS LISTING /tmp/ccBvFgp2.s 			page 264


 9498              	.LBB468:
 9499              	# sieve_extend.c:107:     sieve->bitarray = aligned_alloc((size_t)anticiped_cache_line_bytesize, (s
 107:sieve_extend.c ****     sieve->bits     = size >> 1;
 9500              		.loc 1 107 21 view .LVU3238
 9501 394a 498906   		mov	QWORD PTR [r14], rax	# sieve_91->bitarray, _96
 108:sieve_extend.c ****     sieve->size     = size;
 9502              		.loc 1 108 5 is_stmt 1 view .LVU3239
 9503              	# sieve_extend.c:108:     sieve->bits     = size >> 1;
 108:sieve_extend.c ****     sieve->size     = size;
 9504              		.loc 1 108 21 is_stmt 0 view .LVU3240
 9505 394d 4D897E08 		mov	QWORD PTR 8[r14], r15	# sieve_91->bits, prephitmp_743
 109:sieve_extend.c **** 
 9506              		.loc 1 109 5 is_stmt 1 view .LVU3241
 9507              	# sieve_extend.c:109:     sieve->size     = size;
 109:sieve_extend.c **** 
 9508              		.loc 1 109 21 is_stmt 0 view .LVU3242
 9509 3951 49895E10 		mov	QWORD PTR 16[r14], rbx	# sieve_91->size, maxints
 113:sieve_extend.c **** }
 9510              		.loc 1 113 5 is_stmt 1 view .LVU3243
 9511              	.LVL469:
 113:sieve_extend.c **** }
 9512              		.loc 1 113 5 is_stmt 0 view .LVU3244
 9513              	.LBE468:
 9514              	.LBE509:
1055:sieve_extend.c ****     bitword_t* bitarray = sieve->bitarray;
 9515              		.loc 1 1055 5 is_stmt 1 view .LVU3245
1056:sieve_extend.c **** 
 9516              		.loc 1 1056 5 view .LVU3246
1058:sieve_extend.c **** 
 9517              		.loc 1 1058 5 view .LVU3247
1061:sieve_extend.c ****     extendSieve(bitarray, block.pattern_start, block.pattern_size, sieve->bits);
 9518              		.loc 1 1061 5 view .LVU3248
 9519              	.LBB510:
 9520              	.LBI471:
1014:sieve_extend.c ****     register counter_t prime   = 0;
 9521              		.loc 1 1014 21 view .LVU3249
 9522              	.LBB502:
1015:sieve_extend.c ****     counter_t patternsize_bits = 1;
 9523              		.loc 1 1015 5 view .LVU3250
1016:sieve_extend.c ****     counter_t pattern_start    = 0;
 9524              		.loc 1 1016 5 view .LVU3251
1017:sieve_extend.c ****     counter_t range_stop       = block_start;
 9525              		.loc 1 1017 5 view .LVU3252
1018:sieve_extend.c ****     bitword_t* bitarray        = sieve->bitarray;
 9526              		.loc 1 1018 5 view .LVU3253
1019:sieve_extend.c ****     struct block block = { .prime = 0, .pattern_start = 0, .pattern_size = 0 };
 9527              		.loc 1 1019 5 view .LVU3254
1020:sieve_extend.c **** 
 9528              		.loc 1 1020 5 view .LVU3255
1022:sieve_extend.c ****     
 9529              		.loc 1 1022 5 view .LVU3256
 9530              	# sieve_extend.c:1022:     sieve->bitarray[0] = SAFE_ZERO; // only the first word has to be cleared
1022:sieve_extend.c ****     
 9531              		.loc 1 1022 24 is_stmt 0 view .LVU3257
 9532 3955 48C70000 		mov	QWORD PTR [rax], 0	# MEM[(uint64_t *)_96],
 9532      000000
1024:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
GAS LISTING /tmp/ccBvFgp2.s 			page 265


 9533              		.loc 1 1024 5 is_stmt 1 view .LVU3258
1024:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 9534              		.loc 1 1024 11 view .LVU3259
 9535              	# sieve_extend.c:1024:     for (;range_stop < block_stop;) {
1024:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 9536              		.loc 1 1024 5 is_stmt 0 view .LVU3260
 9537 395c 0F84230C 		je	.L1078	#,
 9537      0000
 9538 3962 4989C6   		mov	r14, rax	# _96, _96
 9539              	# sieve_extend.c:1020:     struct block block = { .prime = 0, .pattern_start = 0, .pattern_size = 0
1020:sieve_extend.c **** 
 9540              		.loc 1 1020 18 view .LVU3261
 9541 3965 31F6     		xor	esi, esi	# block$pattern_start
 9542              	# sieve_extend.c:1016:     counter_t patternsize_bits = 1;
1016:sieve_extend.c ****     counter_t pattern_start    = 0;
 9543              		.loc 1 1016 15 view .LVU3262
 9544 3967 41BF0100 		mov	r15d, 1	# patternsize_bits,
 9544      0000
 9545              	.LVL470:
 9546              	# sieve_extend.c:1015:     register counter_t prime   = 0;
1015:sieve_extend.c ****     counter_t patternsize_bits = 1;
 9547              		.loc 1 1015 24 view .LVU3263
 9548 396d 31C9     		xor	ecx, ecx	# prime
 9549              	# sieve_extend.c:1017:     counter_t pattern_start    = 0;
1017:sieve_extend.c ****     counter_t range_stop       = block_start;
 9550              		.loc 1 1017 15 view .LVU3264
 9551 396f 48C74424 		mov	QWORD PTR 24[rsp], 0	# %sfp,
 9551      18000000 
 9551      00
 9552              	# sieve_extend.c:1020:     struct block block = { .prime = 0, .pattern_start = 0, .pattern_size = 0
1020:sieve_extend.c **** 
 9553              		.loc 1 1020 18 view .LVU3265
 9554 3978 31D2     		xor	edx, edx	# block$pattern_size
 9555              	.LBB473:
 9556              	# sieve_extend.c:1025:         prime = searchBitFalse(bitarray, prime+1);
1025:sieve_extend.c ****         counter_t start = prime * prime * 2 + prime * 2;
 9557              		.loc 1 1025 17 view .LVU3266
 9558 397a 41BD0100 		mov	r13d, 1	# index,
 9558      0000
 9559              	.LVL471:
 9560              		.p2align 4
 9561              		.p2align 3
 9562              	.L840:
 9563              	.LBB474:
 9564              	.LBB475:
 124:sieve_extend.c **** }
 9565              		.loc 1 124 5 is_stmt 1 view .LVU3267
 124:sieve_extend.c **** }
 9566              		.loc 1 124 5 is_stmt 0 view .LVU3268
 9567              	.LBE475:
 9568              	.LBE474:
1026:sieve_extend.c ****         if unlikely(start > block_stop) break;
 9569              		.loc 1 1026 9 is_stmt 1 view .LVU3269
 9570              	# sieve_extend.c:1026:         counter_t start = prime * prime * 2 + prime * 2;
1026:sieve_extend.c ****         if unlikely(start > block_stop) break;
 9571              		.loc 1 1026 45 is_stmt 0 view .LVU3270
 9572 3980 498D5D01 		lea	rbx, 1[r13]	# index,
GAS LISTING /tmp/ccBvFgp2.s 			page 266


 9573 3984 4F8D642D 		lea	r12, [r13+r13]	# _361,
 9573      00
 9574              	# sieve_extend.c:1026:         counter_t start = prime * prime * 2 + prime * 2;
1026:sieve_extend.c ****         if unlikely(start > block_stop) break;
 9575              		.loc 1 1026 19 view .LVU3271
 9576 3989 4889DD   		mov	rbp, rbx	# index, index
 9577 398c 490FAFEC 		imul	rbp, r12	# index, _361
 9578              	.LVL472:
1027:sieve_extend.c **** 
 9579              		.loc 1 1027 9 is_stmt 1 view .LVU3272
 9580              	# sieve_extend.c:1027:         if unlikely(start > block_stop) break;
1027:sieve_extend.c **** 
 9581              		.loc 1 1027 12 is_stmt 0 view .LVU3273
 9582 3990 483B6C24 		cmp	rbp, QWORD PTR 8[rsp]	# index, %sfp
 9582      08
 9583 3995 0F870A04 		ja	.L1079	#,
 9583      0000
1029:sieve_extend.c ****         if (block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start + prime
 9584              		.loc 1 1029 9 is_stmt 1 view .LVU3274
 9585              	# sieve_extend.c:1029:         const counter_t step  = prime * 2 + 1;
1029:sieve_extend.c ****         if (block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start + prime
 9586              		.loc 1 1029 25 is_stmt 0 view .LVU3275
 9587 399b 4983C401 		add	r12, 1	# step,
 9588              	.LVL473:
1030:sieve_extend.c **** 
 9589              		.loc 1 1030 9 is_stmt 1 view .LVU3276
 9590              	# sieve_extend.c:1030:         if (block_start >= (prime + 1)) start = block_start + prime + prime 
1030:sieve_extend.c **** 
 9591              		.loc 1 1030 12 is_stmt 0 view .LVU3277
 9592 399f 4885DB   		test	rbx, rbx	# index
 9593 39a2 7516     		jne	.L846	#,
1030:sieve_extend.c **** 
 9594              		.loc 1 1030 41 is_stmt 1 view .LVU3278
 9595              	# sieve_extend.c:1030:         if (block_start >= (prime + 1)) start = block_start + prime + prime 
1030:sieve_extend.c **** 
 9596              		.loc 1 1030 102 is_stmt 0 view .LVU3279
 9597 39a4 48C7C0FF 		mov	rax, -1	# tmp334,
 9597      FFFFFF
 9598 39ab 31D2     		xor	edx, edx	# tmp333
 9599 39ad 49F7F4   		div	r12	# step
 9600              	# sieve_extend.c:1030:         if (block_start >= (prime + 1)) start = block_start + prime + prime 
1030:sieve_extend.c **** 
 9601              		.loc 1 1030 47 view .LVU3280
 9602 39b0 48C7C5FE 		mov	rbp, -2	# tmp335,
 9602      FFFFFF
 9603              	.LVL474:
1030:sieve_extend.c **** 
 9604              		.loc 1 1030 47 view .LVU3281
 9605 39b7 4829D5   		sub	rbp, rdx	# index, tmp333
 9606              	.LVL475:
 9607              	.L846:
1032:sieve_extend.c ****         block.pattern_size = patternsize_bits;
 9608              		.loc 1 1032 9 is_stmt 1 view .LVU3282
 9609              	# sieve_extend.c:1032:         range_stop = block_start + patternsize_bits * step * 2;  // range is
1032:sieve_extend.c ****         block.pattern_size = patternsize_bits;
 9610              		.loc 1 1032 53 is_stmt 0 view .LVU3283
 9611 39ba 4C89FE   		mov	rsi, r15	# _68, patternsize_bits
GAS LISTING /tmp/ccBvFgp2.s 			page 267


 9612 39bd 490FAFF4 		imul	rsi, r12	# _68, step
 9613 39c1 48897424 		mov	QWORD PTR 40[rsp], rsi	# %sfp, _68
 9613      28
 9614              	# sieve_extend.c:1032:         range_stop = block_start + patternsize_bits * step * 2;  // range is
1032:sieve_extend.c ****         block.pattern_size = patternsize_bits;
 9615              		.loc 1 1032 60 view .LVU3284
 9616 39c6 4801F6   		add	rsi, rsi	# _69
 9617 39c9 48897424 		mov	QWORD PTR 16[rsp], rsi	# %sfp, _69
 9617      10
 9618              	.LVL476:
1033:sieve_extend.c ****         block.pattern_start = pattern_start;
 9619              		.loc 1 1033 9 is_stmt 1 view .LVU3285
1034:sieve_extend.c ****         if (range_stop > block_stop) return block; //range_stop = block_stop;
 9620              		.loc 1 1034 9 view .LVU3286
1035:sieve_extend.c **** 
 9621              		.loc 1 1035 9 view .LVU3287
 9622              	# sieve_extend.c:1035:         if (range_stop > block_stop) return block; //range_stop = block_stop
1035:sieve_extend.c **** 
 9623              		.loc 1 1035 12 is_stmt 0 view .LVU3288
 9624 39ce 483B7424 		cmp	rsi, QWORD PTR 8[rsp]	# _69, %sfp
 9624      08
 9625 39d3 0F878C0B 		ja	.L1080	#,
 9625      0000
1037:sieve_extend.c ****             pattern_start = block_start | patternsize_bits;
 9626              		.loc 1 1037 9 is_stmt 1 view .LVU3289
 9627 39d9 488B7C24 		mov	rdi, QWORD PTR 24[rsp]	# pattern_start, %sfp
 9627      18
 9628              	# sieve_extend.c:1037:         if (patternsize_bits>1) {
1037:sieve_extend.c ****             pattern_start = block_start | patternsize_bits;
 9629              		.loc 1 1037 12 is_stmt 0 view .LVU3290
 9630 39de 4983FF01 		cmp	r15, 1	# patternsize_bits,
 9631 39e2 48897C24 		mov	QWORD PTR 32[rsp], rdi	# %sfp, pattern_start
 9631      20
 9632 39e7 0F877303 		ja	.L1081	#,
 9632      0000
 9633              	.LVL477:
 9634              	.L849:
1041:sieve_extend.c **** 
 9635              		.loc 1 1041 9 is_stmt 1 view .LVU3291
1045:sieve_extend.c ****         else                              setBitsTrue_largeRange(bitarray, start, step, range_stop)
 9636              		.loc 1 1045 9 view .LVU3292
 9637              	# sieve_extend.c:1045:         if (step < VECTORSTEP_FASTER)     setBitsTrue_largeRange_vector(bita
1045:sieve_extend.c ****         else                              setBitsTrue_largeRange(bitarray, start, step, range_stop)
 9638              		.loc 1 1045 12 is_stmt 0 view .LVU3293
 9639 39ed 4C3B2500 		cmp	r12, QWORD PTR global_VECTORSTEP_FASTER[rip]	# step, global_VECTORSTEP_FASTER
 9639      000000
 9640 39f4 0F830601 		jnb	.L853	#,
 9640      0000
1045:sieve_extend.c ****         else                              setBitsTrue_largeRange(bitarray, start, step, range_stop)
 9641              		.loc 1 1045 43 is_stmt 1 view .LVU3294
 9642 39fa 488B4C24 		mov	rcx, QWORD PTR 16[rsp]	#, %sfp
 9642      10
 9643 39ff 4C89E2   		mov	rdx, r12	#, step
 9644 3a02 4889EE   		mov	rsi, rbp	#, index
 9645 3a05 4C89F7   		mov	rdi, r14	#, _96
 9646 3a08 E803DBFF 		call	setBitsTrue_largeRange_vector	#
 9646      FF
GAS LISTING /tmp/ccBvFgp2.s 			page 268


 9647              	.LVL478:
 9648              	.L854:
1045:sieve_extend.c ****         else                              setBitsTrue_largeRange(bitarray, start, step, range_stop)
 9649              		.loc 1 1045 43 is_stmt 0 view .LVU3295
 9650              	.LBE473:
1024:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 9651              		.loc 1 1024 11 is_stmt 1 view .LVU3296
 9652              	# sieve_extend.c:1024:     for (;range_stop < block_stop;) {
1024:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 9653              		.loc 1 1024 5 is_stmt 0 view .LVU3297
 9654 3a0d 4C8B6424 		mov	r12, QWORD PTR 8[rsp]	# prephitmp_743, %sfp
 9654      08
 9655              	.LVL479:
1024:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 9656              		.loc 1 1024 5 view .LVU3298
 9657 3a12 4C396424 		cmp	QWORD PTR 16[rsp], r12	# %sfp, prephitmp_743
 9657      10
 9658 3a17 0F83F402 		jnb	.L1082	#,
 9658      0000
 9659              	.LVL480:
 9660              	.L863:
 9661              	.LBB496:
1025:sieve_extend.c ****         counter_t start = prime * prime * 2 + prime * 2;
 9662              		.loc 1 1025 9 is_stmt 1 view .LVU3299
 9663              	.LBB477:
 9664              	.LBI474:
 122:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 9665              		.loc 1 122 25 view .LVU3300
 9666              	.LBB476:
 123:sieve_extend.c ****     return index;
 9667              		.loc 1 123 5 view .LVU3301
 123:sieve_extend.c ****     return index;
 9668              		.loc 1 123 11 view .LVU3302
 9669              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9670              		.loc 1 123 21 is_stmt 0 view .LVU3303
 9671 3a1d 4889DD   		mov	rbp, rbx	# tmp321, index
 9672 3a20 48C1ED06 		shr	rbp, 6	# tmp321,
 9673              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9674              		.loc 1 123 12 view .LVU3304
 9675 3a24 4D8B04EE 		mov	r8, QWORD PTR [r14+rbp*8]	# *_481,* _96
 9676              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9677              		.loc 1 123 11 view .LVU3305
 9678 3a28 490FA3D8 		bt	r8, rbx	# *_481, index
 9679 3a2c 0F83A600 		jnc	.L842	#,
 9679      0000
 123:sieve_extend.c ****     return index;
 9680              		.loc 1 123 58 is_stmt 1 view .LVU3306
 9681              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9682              		.loc 1 123 63 is_stmt 0 view .LVU3307
 9683 3a32 488D7B01 		lea	rdi, 1[rbx]	# tmp466,
 9684              	.LVL481:
 9685              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
GAS LISTING /tmp/ccBvFgp2.s 			page 269


 9686              		.loc 1 123 21 view .LVU3308
 9687 3a36 4889FA   		mov	rdx, rdi	# tmp326, index
 9688              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9689              		.loc 1 123 63 view .LVU3309
 9690 3a39 4889FB   		mov	rbx, rdi	# index, tmp466
 123:sieve_extend.c ****     return index;
 9691              		.loc 1 123 11 is_stmt 1 view .LVU3310
 9692              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9693              		.loc 1 123 21 is_stmt 0 view .LVU3311
 9694 3a3c 48C1EA06 		shr	rdx, 6	# tmp326,
 9695              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9696              		.loc 1 123 12 view .LVU3312
 9697 3a40 4D8B0CD6 		mov	r9, QWORD PTR [r14+rdx*8]	# *_49, *_49
 9698              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9699              		.loc 1 123 11 view .LVU3313
 9700 3a44 490FA3F9 		bt	r9, rdi	# *_49, index
 9701 3a48 0F838A00 		jnc	.L842	#,
 9701      0000
 123:sieve_extend.c ****     return index;
 9702              		.loc 1 123 58 is_stmt 1 view .LVU3314
 9703              	.LVL482:
 9704              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9705              		.loc 1 123 63 is_stmt 0 view .LVU3315
 9706 3a4e 4883C301 		add	rbx, 1	# index,
 9707              	.LVL483:
 123:sieve_extend.c ****     return index;
 9708              		.loc 1 123 11 is_stmt 1 view .LVU3316
 9709              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9710              		.loc 1 123 21 is_stmt 0 view .LVU3317
 9711 3a52 4989DA   		mov	r10, rbx	# tmp567, index
 9712 3a55 49C1EA06 		shr	r10, 6	# tmp567,
 9713              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9714              		.loc 1 123 12 view .LVU3318
 9715 3a59 4F8B1CD6 		mov	r11, QWORD PTR [r14+r10*8]	# *_49, *_49
 9716              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9717              		.loc 1 123 11 view .LVU3319
 9718 3a5d 490FA3DB 		bt	r11, rbx	# *_49, index
 9719 3a61 7375     		jnc	.L842	#,
 123:sieve_extend.c ****     return index;
 9720              		.loc 1 123 58 is_stmt 1 view .LVU3320
 9721              	.LVL484:
 9722              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9723              		.loc 1 123 63 is_stmt 0 view .LVU3321
 9724 3a63 488D5F02 		lea	rbx, 2[rdi]	# index,
 9725              	.LVL485:
 123:sieve_extend.c ****     return index;
 9726              		.loc 1 123 11 is_stmt 1 view .LVU3322
 9727              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
GAS LISTING /tmp/ccBvFgp2.s 			page 270


 123:sieve_extend.c ****     return index;
 9728              		.loc 1 123 21 is_stmt 0 view .LVU3323
 9729 3a67 4889D9   		mov	rcx, rbx	# tmp571, index
 9730 3a6a 48C1E906 		shr	rcx, 6	# tmp571,
 9731              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9732              		.loc 1 123 12 view .LVU3324
 9733 3a6e 498B04CE 		mov	rax, QWORD PTR [r14+rcx*8]	# *_49, *_49
 9734              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9735              		.loc 1 123 11 view .LVU3325
 9736 3a72 480FA3D8 		bt	rax, rbx	# *_49, index
 9737 3a76 7360     		jnc	.L842	#,
 123:sieve_extend.c ****     return index;
 9738              		.loc 1 123 58 is_stmt 1 view .LVU3326
 9739              	.LVL486:
 9740              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9741              		.loc 1 123 63 is_stmt 0 view .LVU3327
 9742 3a78 488D5F03 		lea	rbx, 3[rdi]	# index,
 9743              	.LVL487:
 123:sieve_extend.c ****     return index;
 9744              		.loc 1 123 11 is_stmt 1 view .LVU3328
 9745              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9746              		.loc 1 123 21 is_stmt 0 view .LVU3329
 9747 3a7c 4889DE   		mov	rsi, rbx	# tmp575, index
 9748 3a7f 48C1EE06 		shr	rsi, 6	# tmp575,
 9749              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9750              		.loc 1 123 12 view .LVU3330
 9751 3a83 4D8B24F6 		mov	r12, QWORD PTR [r14+rsi*8]	# *_49, *_49
 9752              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9753              		.loc 1 123 11 view .LVU3331
 9754 3a87 490FA3DC 		bt	r12, rbx	# *_49, index
 9755 3a8b 734B     		jnc	.L842	#,
 123:sieve_extend.c ****     return index;
 9756              		.loc 1 123 58 is_stmt 1 view .LVU3332
 9757              	.LVL488:
 9758              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9759              		.loc 1 123 63 is_stmt 0 view .LVU3333
 9760 3a8d 488D5F04 		lea	rbx, 4[rdi]	# index,
 9761              	.LVL489:
 123:sieve_extend.c ****     return index;
 9762              		.loc 1 123 11 is_stmt 1 view .LVU3334
 9763              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9764              		.loc 1 123 21 is_stmt 0 view .LVU3335
 9765 3a91 4889DD   		mov	rbp, rbx	# tmp579, index
 9766 3a94 48C1ED06 		shr	rbp, 6	# tmp579,
 9767              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9768              		.loc 1 123 12 view .LVU3336
 9769 3a98 4D8B04EE 		mov	r8, QWORD PTR [r14+rbp*8]	# *_49, *_49
 9770              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
GAS LISTING /tmp/ccBvFgp2.s 			page 271


 123:sieve_extend.c ****     return index;
 9771              		.loc 1 123 11 view .LVU3337
 9772 3a9c 490FA3D8 		bt	r8, rbx	# *_49, index
 9773 3aa0 7336     		jnc	.L842	#,
 123:sieve_extend.c ****     return index;
 9774              		.loc 1 123 58 is_stmt 1 view .LVU3338
 9775              	.LVL490:
 9776              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9777              		.loc 1 123 63 is_stmt 0 view .LVU3339
 9778 3aa2 488D5F05 		lea	rbx, 5[rdi]	# index,
 9779              	.LVL491:
 123:sieve_extend.c ****     return index;
 9780              		.loc 1 123 11 is_stmt 1 view .LVU3340
 9781              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9782              		.loc 1 123 21 is_stmt 0 view .LVU3341
 9783 3aa6 4889DA   		mov	rdx, rbx	# tmp583, index
 9784 3aa9 48C1EA06 		shr	rdx, 6	# tmp583,
 9785              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9786              		.loc 1 123 12 view .LVU3342
 9787 3aad 4D8B0CD6 		mov	r9, QWORD PTR [r14+rdx*8]	# *_49, *_49
 9788              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9789              		.loc 1 123 11 view .LVU3343
 9790 3ab1 490FA3D9 		bt	r9, rbx	# *_49, index
 9791 3ab5 7321     		jnc	.L842	#,
 123:sieve_extend.c ****     return index;
 9792              		.loc 1 123 58 is_stmt 1 view .LVU3344
 9793              	.LVL492:
 9794              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9795              		.loc 1 123 63 is_stmt 0 view .LVU3345
 9796 3ab7 488D5F06 		lea	rbx, 6[rdi]	# index,
 9797              	.LVL493:
 123:sieve_extend.c ****     return index;
 9798              		.loc 1 123 11 is_stmt 1 view .LVU3346
 9799              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9800              		.loc 1 123 21 is_stmt 0 view .LVU3347
 9801 3abb 4989DA   		mov	r10, rbx	# tmp587, index
 9802 3abe 49C1EA06 		shr	r10, 6	# tmp587,
 9803              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9804              		.loc 1 123 12 view .LVU3348
 9805 3ac2 4F8B1CD6 		mov	r11, QWORD PTR [r14+r10*8]	# *_49, *_49
 9806              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 9807              		.loc 1 123 11 view .LVU3349
 9808 3ac6 490FA3DB 		bt	r11, rbx	# *_49, index
 9809 3aca 730C     		jnc	.L842	#,
 123:sieve_extend.c ****     return index;
 9810              		.loc 1 123 58 is_stmt 1 view .LVU3350
 9811              	.LVL494:
 9812              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
GAS LISTING /tmp/ccBvFgp2.s 			page 272


 9813              		.loc 1 123 63 is_stmt 0 view .LVU3351
 9814 3acc 488D5F07 		lea	rbx, 7[rdi]	# index,
 9815              	.LVL495:
 123:sieve_extend.c ****     return index;
 9816              		.loc 1 123 11 is_stmt 1 view .LVU3352
 9817 3ad0 E948FFFF 		jmp	.L863	#
 9817      FF
 9818              		.p2align 4,,7
 9819 3ad5 0F1F00   		.p2align 3
 9820              	.L842:
 123:sieve_extend.c ****     return index;
 9821              		.loc 1 123 11 is_stmt 0 view .LVU3353
 9822              	.LBE476:
 9823              	.LBE477:
 9824              	.LBE496:
 9825              	.LBE502:
 9826              	.LBE510:
 9827              	# sieve_extend.c:1053: static struct sieve_state *sieve(const counter_t maxints, const counter_t bl
1053:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 9828              		.loc 1 1053 86 view .LVU3354
 9829 3ad8 488B7C24 		mov	rdi, QWORD PTR 32[rsp]	# pattern_start, %sfp
 9829      20
 9830 3add 4C89E9   		mov	rcx, r13	# prime, index
 9831 3ae0 488B7424 		mov	rsi, QWORD PTR 24[rsp]	# block$pattern_start, %sfp
 9831      18
 9832              	.LVL496:
1053:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 9833              		.loc 1 1053 86 view .LVU3355
 9834 3ae5 4C89FA   		mov	rdx, r15	# block$pattern_size, patternsize_bits
 9835 3ae8 4C8B7C24 		mov	r15, QWORD PTR 40[rsp]	# patternsize_bits, %sfp
 9835      28
 9836 3aed 4989DD   		mov	r13, rbx	# index, index
 9837              	.LVL497:
1053:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 9838              		.loc 1 1053 86 view .LVU3356
 9839 3af0 48897C24 		mov	QWORD PTR 24[rsp], rdi	# %sfp, pattern_start
 9839      18
 9840              	.LVL498:
1053:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 9841              		.loc 1 1053 86 view .LVU3357
 9842 3af5 E986FEFF 		jmp	.L840	#
 9842      FF
 9843              	.LVL499:
 9844 3afa 660F1F44 		.p2align 4,,7
 9844      0000
 9845              		.p2align 3
 9846              	.L853:
 9847              	.LBB511:
 9848              	.LBB503:
 9849              	.LBB497:
1046:sieve_extend.c ****         block.prime = prime;
 9850              		.loc 1 1046 43 is_stmt 1 view .LVU3358
 9851              	.LBB478:
 9852              	.LBI478:
 412:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange (%ju occurances
 9853              		.loc 1 412 20 view .LVU3359
 9854              	.LBB479:
GAS LISTING /tmp/ccBvFgp2.s 			page 273


 413:sieve_extend.c ****     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * step;
 9855              		.loc 1 413 5 view .LVU3360
 414:sieve_extend.c **** 
 9856              		.loc 1 414 5 view .LVU3361
 9857              	# sieve_extend.c:414:     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * st
 414:sieve_extend.c **** 
 9858              		.loc 1 414 74 is_stmt 0 view .LVU3362
 9859 3b00 4D89E2   		mov	r10, r12	# tmp337, step
 9860 3b03 49C1E206 		sal	r10, 6	# tmp337,
 9861              	# sieve_extend.c:414:     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * st
 414:sieve_extend.c **** 
 9862              		.loc 1 414 21 view .LVU3363
 9863 3b07 4D8D042A 		lea	r8, [r10+rbp]	# range_stop_unique,
 9864              	.LVL500:
 418:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 9865              		.loc 1 418 5 is_stmt 1 view .LVU3364
 9866              	.LBB480:
 418:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 9867              		.loc 1 418 10 view .LVU3365
 418:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 9868              		.loc 1 418 50 view .LVU3366
 9869              	# sieve_extend.c:418:     for (register counter_t index = range_start; index < range_stop_unique; i
 418:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 9870              		.loc 1 418 5 is_stmt 0 view .LVU3367
 9871 3b0b 4C39C5   		cmp	rbp, r8	# index, range_stop_unique
 9872 3b0e 0F83F9FE 		jnb	.L854	#,
 9872      FFFF
 9873              	.LBB481:
 9874              	.LBB482:
 9875              	# sieve_extend.c:175:    const counter_t range_stop_word = wordindex(range_stop);
 175:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 9876              		.loc 1 175 20 view .LVU3368
 9877 3b14 488B4C24 		mov	rcx, QWORD PTR 16[rsp]	# _69, %sfp
 9877      10
 9878              	# sieve_extend.c:177:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 177:sieve_extend.c **** 
 9879              		.loc 1 177 110 view .LVU3369
 9880 3b19 4B8D3CA4 		lea	rdi, [r12+r12*4]	# tmp340,
 9881              	# sieve_extend.c:201:       *index_ptr |= (mask & chopmask(range_stop));
 201:sieve_extend.c ****    }
 9882              		.loc 1 201 29 view .LVU3370
 9883 3b1d 48C7C6FF 		mov	rsi, -1	# tmp753,
 9883      FFFFFF
 9884              	# sieve_extend.c:183:        index_ptr+=step;
 183:sieve_extend.c ****        *index_ptr |= mask;
 9885              		.loc 1 183 17 view .LVU3371
 9886 3b24 4A8D14E5 		lea	rdx, 0[0+r12*8]	# _121,
 9886      00000000 
 9887              	# sieve_extend.c:175:    const counter_t range_stop_word = wordindex(range_stop);
 175:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 9888              		.loc 1 175 20 view .LVU3372
 9889 3b2c 4989CB   		mov	r11, rcx	# range_stop_word, _69
 9890              	# sieve_extend.c:201:       *index_ptr |= (mask & chopmask(range_stop));
 201:sieve_extend.c ****    }
 9891              		.loc 1 201 29 view .LVU3373
 9892 3b2f 89C8     		mov	eax, ecx	# tmp342, _69
 9893              	# sieve_extend.c:175:    const counter_t range_stop_word = wordindex(range_stop);
GAS LISTING /tmp/ccBvFgp2.s 			page 274


 175:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 9894              		.loc 1 175 20 view .LVU3374
 9895 3b31 49C1EB06 		shr	r11, 6	# range_stop_word,
 9896              	# sieve_extend.c:201:       *index_ptr |= (mask & chopmask(range_stop));
 201:sieve_extend.c ****    }
 9897              		.loc 1 201 29 view .LVU3375
 9898 3b35 F7D0     		not	eax	# tmp342
 9899              	# sieve_extend.c:177:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 177:sieve_extend.c **** 
 9900              		.loc 1 177 133 view .LVU3376
 9901 3b37 4C89D9   		mov	rcx, r11	# tmp346, range_stop_word
 9902              	# sieve_extend.c:201:       *index_ptr |= (mask & chopmask(range_stop));
 201:sieve_extend.c ****    }
 9903              		.loc 1 201 29 view .LVU3377
 9904 3b3a C462FBF7 		shrx	r10, rsi, rax	# _153, tmp753, tmp342
 9904      D6
 9905              	# sieve_extend.c:177:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 177:sieve_extend.c **** 
 9906              		.loc 1 177 133 view .LVU3378
 9907 3b3f 4829F9   		sub	rcx, rdi	# tmp346, tmp340
 9908              	# sieve_extend.c:177:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 177:sieve_extend.c **** 
 9909              		.loc 1 177 53 view .LVU3379
 9910 3b42 4939FB   		cmp	r11, rdi	# range_stop_word, tmp340
 9911              	# sieve_extend.c:201:       *index_ptr |= (mask & chopmask(range_stop));
 201:sieve_extend.c ****    }
 9912              		.loc 1 201 29 view .LVU3380
 9913 3b45 4C895424 		mov	QWORD PTR 72[rsp], r10	# %sfp, _153
 9913      48
 9914              	# sieve_extend.c:194:    const register bitword_t* __restrict range_stop_ptr = &bitarray[(range_sto
 194:sieve_extend.c ****    while likely(index_ptr < range_stop_ptr) {
 9915              		.loc 1 194 41 view .LVU3381
 9916 3b4a 4F8D0CDE 		lea	r9, [r14+r11*8]	# range_stop_ptr,
 9917              	# sieve_extend.c:177:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 177:sieve_extend.c **** 
 9918              		.loc 1 177 53 view .LVU3382
 9919 3b4e 4D8D14CE 		lea	r10, [r14+rcx*8]	# tmp348,
 9920 3b52 4D89E3   		mov	r11, r12	# _708, step
 9921 3b55 4D0F46D6 		cmovbe	r10, r14	# _96,, fast_loop_ptr
 9922 3b59 48C1E703 		sal	rdi, 3	# tmp352,
 9923 3b5d 49C1E304 		sal	r11, 4	# _708,
 9924              	.LVL501:
 9925 3b61 66662E0F 		.p2align 4
 9925      1F840000 
 9925      0000000F 
 9925      1F4000
 9926              		.p2align 3
 9927              	.L861:
 177:sieve_extend.c **** 
 9928              		.loc 1 177 53 view .LVU3383
 9929              	.LBE482:
 9930              	.LBE481:
 419:sieve_extend.c ****     }
 9931              		.loc 1 419 9 is_stmt 1 view .LVU3384
 9932 3b70 4889EE   		mov	rsi, rbp	# tmp355, index
 9933 3b73 B8010000 		mov	eax, 1	# tmp756,
 9933      00
GAS LISTING /tmp/ccBvFgp2.s 			page 275


 9934 3b78 48C1EE06 		shr	rsi, 6	# tmp355,
 9935 3b7c C4E2D1F7 		shlx	rcx, rax, rbp	# _106, tmp756, index
 9935      C8
 9936              	.LVL502:
 9937              	.LBB485:
 9938              	.LBI481:
 147:sieve_extend.c **** //#if __APPLE__
 9939              		.loc 1 147 20 view .LVU3385
 9940              	.LBB483:
 175:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 9941              		.loc 1 175 4 view .LVU3386
 176:sieve_extend.c ****    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_stop
 9942              		.loc 1 176 4 view .LVU3387
 9943              	# sieve_extend.c:176:    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(
 176:sieve_extend.c ****    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_stop
 9944              		.loc 1 176 78 is_stmt 0 view .LVU3388
 9945 3b81 498D04F6 		lea	rax, [r14+rsi*8]	# index_ptr,
 9946              	.LVL503:
 177:sieve_extend.c **** 
 9947              		.loc 1 177 4 is_stmt 1 view .LVU3389
 181:sieve_extend.c ****        *index_ptr |= mask;
 9948              		.loc 1 181 4 view .LVU3390
 181:sieve_extend.c ****        *index_ptr |= mask;
 9949              		.loc 1 181 10 view .LVU3391
 9950 3b85 4C39D0   		cmp	rax, r10	# index_ptr, fast_loop_ptr
 9951 3b88 0F830201 		jnb	.L856	#,
 9951      0000
 181:sieve_extend.c ****        *index_ptr |= mask;
 9952              		.loc 1 181 10 is_stmt 0 view .LVU3392
 9953 3b8e 4A8D3418 		lea	rsi, [rax+r11]	# ivtmp.571,
 9954              	.LVL504:
 9955              	.L857:
 182:sieve_extend.c ****        index_ptr+=step;
 9956              		.loc 1 182 8 is_stmt 1 view .LVU3393
 9957              	# sieve_extend.c:182:        *index_ptr |= mask;
 182:sieve_extend.c ****        index_ptr+=step;
 9958              		.loc 1 182 19 is_stmt 0 view .LVU3394
 9959 3b92 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_467, offset: 0B], _106
 183:sieve_extend.c ****        *index_ptr |= mask;
 9960              		.loc 1 183 8 is_stmt 1 view .LVU3395
 9961              	.LVL505:
 184:sieve_extend.c ****        index_ptr+=step;
 9962              		.loc 1 184 8 view .LVU3396
 9963              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 9964              		.loc 1 184 19 is_stmt 0 view .LVU3397
 9965 3b95 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_467, index: _121, offset: 0B], _106
 185:sieve_extend.c ****        *index_ptr |= mask;
 9966              		.loc 1 185 8 is_stmt 1 view .LVU3398
 9967              	.LVL506:
 186:sieve_extend.c ****        index_ptr+=step;
 9968              		.loc 1 186 8 view .LVU3399
 9969              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 9970              		.loc 1 186 19 is_stmt 0 view .LVU3400
 9971 3b99 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _702, offset: 0B], _106
 187:sieve_extend.c ****        *index_ptr |= mask;
GAS LISTING /tmp/ccBvFgp2.s 			page 276


 9972              		.loc 1 187 8 is_stmt 1 view .LVU3401
 9973              	.LVL507:
 188:sieve_extend.c ****        index_ptr+=step;
 9974              		.loc 1 188 8 view .LVU3402
 9975              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 9976              		.loc 1 188 19 is_stmt 0 view .LVU3403
 9977 3b9c 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _702, index: _121, offset: 0B], _106
 189:sieve_extend.c ****        *index_ptr |= mask;
 9978              		.loc 1 189 8 is_stmt 1 view .LVU3404
 9979              	.LVL508:
 190:sieve_extend.c ****        index_ptr+=step;
 9980              		.loc 1 190 8 view .LVU3405
 9981 3ba0 4801FE   		add	rsi, rdi	# ivtmp.571, tmp352
 9982              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 9983              		.loc 1 190 19 is_stmt 0 view .LVU3406
 9984 3ba3 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_467, index: _121, step: 4, offset: 0B], _106
 191:sieve_extend.c ****    }
 9985              		.loc 1 191 8 is_stmt 1 view .LVU3407
 9986 3ba7 4801F8   		add	rax, rdi	# index_ptr, tmp352
 9987              	.LVL509:
 181:sieve_extend.c ****        *index_ptr |= mask;
 9988              		.loc 1 181 10 view .LVU3408
 9989 3baa 4939C2   		cmp	r10, rax	# fast_loop_ptr, index_ptr
 9990 3bad 0F86DD00 		jbe	.L856	#,
 9990      0000
 182:sieve_extend.c ****        index_ptr+=step;
 9991              		.loc 1 182 8 view .LVU3409
 9992              	# sieve_extend.c:182:        *index_ptr |= mask;
 182:sieve_extend.c ****        index_ptr+=step;
 9993              		.loc 1 182 19 is_stmt 0 view .LVU3410
 9994 3bb3 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_467, offset: 0B], _106
 183:sieve_extend.c ****        *index_ptr |= mask;
 9995              		.loc 1 183 8 is_stmt 1 view .LVU3411
 9996              	.LVL510:
 184:sieve_extend.c ****        index_ptr+=step;
 9997              		.loc 1 184 8 view .LVU3412
 9998              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 9999              		.loc 1 184 19 is_stmt 0 view .LVU3413
 10000 3bb6 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_467, index: _121, offset: 0B], _106
 185:sieve_extend.c ****        *index_ptr |= mask;
 10001              		.loc 1 185 8 is_stmt 1 view .LVU3414
 10002              	.LVL511:
 186:sieve_extend.c ****        index_ptr+=step;
 10003              		.loc 1 186 8 view .LVU3415
 10004              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 10005              		.loc 1 186 19 is_stmt 0 view .LVU3416
 10006 3bba 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _702, offset: 0B], _106
 187:sieve_extend.c ****        *index_ptr |= mask;
 10007              		.loc 1 187 8 is_stmt 1 view .LVU3417
 10008              	.LVL512:
 188:sieve_extend.c ****        index_ptr+=step;
 10009              		.loc 1 188 8 view .LVU3418
 10010              	# sieve_extend.c:188:        *index_ptr |= mask;
GAS LISTING /tmp/ccBvFgp2.s 			page 277


 188:sieve_extend.c ****        index_ptr+=step;
 10011              		.loc 1 188 19 is_stmt 0 view .LVU3419
 10012 3bbd 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _702, index: _121, offset: 0B], _106
 189:sieve_extend.c ****        *index_ptr |= mask;
 10013              		.loc 1 189 8 is_stmt 1 view .LVU3420
 10014              	.LVL513:
 190:sieve_extend.c ****        index_ptr+=step;
 10015              		.loc 1 190 8 view .LVU3421
 10016 3bc1 4801FE   		add	rsi, rdi	# ivtmp.571, tmp352
 10017              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 10018              		.loc 1 190 19 is_stmt 0 view .LVU3422
 10019 3bc4 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_467, index: _121, step: 4, offset: 0B], _106
 191:sieve_extend.c ****    }
 10020              		.loc 1 191 8 is_stmt 1 view .LVU3423
 10021 3bc8 4801F8   		add	rax, rdi	# index_ptr, tmp352
 10022              	.LVL514:
 181:sieve_extend.c ****        *index_ptr |= mask;
 10023              		.loc 1 181 10 view .LVU3424
 10024 3bcb 4939C2   		cmp	r10, rax	# fast_loop_ptr, index_ptr
 10025 3bce 0F86BC00 		jbe	.L856	#,
 10025      0000
 182:sieve_extend.c ****        index_ptr+=step;
 10026              		.loc 1 182 8 view .LVU3425
 10027              	# sieve_extend.c:182:        *index_ptr |= mask;
 182:sieve_extend.c ****        index_ptr+=step;
 10028              		.loc 1 182 19 is_stmt 0 view .LVU3426
 10029 3bd4 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_467, offset: 0B], _106
 183:sieve_extend.c ****        *index_ptr |= mask;
 10030              		.loc 1 183 8 is_stmt 1 view .LVU3427
 10031              	.LVL515:
 184:sieve_extend.c ****        index_ptr+=step;
 10032              		.loc 1 184 8 view .LVU3428
 10033              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 10034              		.loc 1 184 19 is_stmt 0 view .LVU3429
 10035 3bd7 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_467, index: _121, offset: 0B], _106
 185:sieve_extend.c ****        *index_ptr |= mask;
 10036              		.loc 1 185 8 is_stmt 1 view .LVU3430
 10037              	.LVL516:
 186:sieve_extend.c ****        index_ptr+=step;
 10038              		.loc 1 186 8 view .LVU3431
 10039              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 10040              		.loc 1 186 19 is_stmt 0 view .LVU3432
 10041 3bdb 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _702, offset: 0B], _106
 187:sieve_extend.c ****        *index_ptr |= mask;
 10042              		.loc 1 187 8 is_stmt 1 view .LVU3433
 10043              	.LVL517:
 188:sieve_extend.c ****        index_ptr+=step;
 10044              		.loc 1 188 8 view .LVU3434
 10045              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 10046              		.loc 1 188 19 is_stmt 0 view .LVU3435
 10047 3bde 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _702, index: _121, offset: 0B], _106
 189:sieve_extend.c ****        *index_ptr |= mask;
 10048              		.loc 1 189 8 is_stmt 1 view .LVU3436
GAS LISTING /tmp/ccBvFgp2.s 			page 278


 10049              	.LVL518:
 190:sieve_extend.c ****        index_ptr+=step;
 10050              		.loc 1 190 8 view .LVU3437
 10051 3be2 4801FE   		add	rsi, rdi	# ivtmp.571, tmp352
 10052              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 10053              		.loc 1 190 19 is_stmt 0 view .LVU3438
 10054 3be5 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_467, index: _121, step: 4, offset: 0B], _106
 191:sieve_extend.c ****    }
 10055              		.loc 1 191 8 is_stmt 1 view .LVU3439
 10056 3be9 4801F8   		add	rax, rdi	# index_ptr, tmp352
 10057              	.LVL519:
 181:sieve_extend.c ****        *index_ptr |= mask;
 10058              		.loc 1 181 10 view .LVU3440
 10059 3bec 4939C2   		cmp	r10, rax	# fast_loop_ptr, index_ptr
 10060 3bef 0F869B00 		jbe	.L856	#,
 10060      0000
 182:sieve_extend.c ****        index_ptr+=step;
 10061              		.loc 1 182 8 view .LVU3441
 10062              	# sieve_extend.c:182:        *index_ptr |= mask;
 182:sieve_extend.c ****        index_ptr+=step;
 10063              		.loc 1 182 19 is_stmt 0 view .LVU3442
 10064 3bf5 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_467, offset: 0B], _106
 183:sieve_extend.c ****        *index_ptr |= mask;
 10065              		.loc 1 183 8 is_stmt 1 view .LVU3443
 10066              	.LVL520:
 184:sieve_extend.c ****        index_ptr+=step;
 10067              		.loc 1 184 8 view .LVU3444
 10068              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 10069              		.loc 1 184 19 is_stmt 0 view .LVU3445
 10070 3bf8 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_467, index: _121, offset: 0B], _106
 185:sieve_extend.c ****        *index_ptr |= mask;
 10071              		.loc 1 185 8 is_stmt 1 view .LVU3446
 10072              	.LVL521:
 186:sieve_extend.c ****        index_ptr+=step;
 10073              		.loc 1 186 8 view .LVU3447
 10074              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 10075              		.loc 1 186 19 is_stmt 0 view .LVU3448
 10076 3bfc 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _702, offset: 0B], _106
 187:sieve_extend.c ****        *index_ptr |= mask;
 10077              		.loc 1 187 8 is_stmt 1 view .LVU3449
 10078              	.LVL522:
 188:sieve_extend.c ****        index_ptr+=step;
 10079              		.loc 1 188 8 view .LVU3450
 10080              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 10081              		.loc 1 188 19 is_stmt 0 view .LVU3451
 10082 3bff 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _702, index: _121, offset: 0B], _106
 189:sieve_extend.c ****        *index_ptr |= mask;
 10083              		.loc 1 189 8 is_stmt 1 view .LVU3452
 10084              	.LVL523:
 190:sieve_extend.c ****        index_ptr+=step;
 10085              		.loc 1 190 8 view .LVU3453
 10086 3c03 4801FE   		add	rsi, rdi	# ivtmp.571, tmp352
 10087              	# sieve_extend.c:190:        *index_ptr |= mask;
GAS LISTING /tmp/ccBvFgp2.s 			page 279


 190:sieve_extend.c ****        index_ptr+=step;
 10088              		.loc 1 190 19 is_stmt 0 view .LVU3454
 10089 3c06 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_467, index: _121, step: 4, offset: 0B], _106
 191:sieve_extend.c ****    }
 10090              		.loc 1 191 8 is_stmt 1 view .LVU3455
 10091 3c0a 4801F8   		add	rax, rdi	# index_ptr, tmp352
 10092              	.LVL524:
 181:sieve_extend.c ****        *index_ptr |= mask;
 10093              		.loc 1 181 10 view .LVU3456
 10094 3c0d 4939C2   		cmp	r10, rax	# fast_loop_ptr, index_ptr
 10095 3c10 767E     		jbe	.L856	#,
 182:sieve_extend.c ****        index_ptr+=step;
 10096              		.loc 1 182 8 view .LVU3457
 10097              	# sieve_extend.c:182:        *index_ptr |= mask;
 182:sieve_extend.c ****        index_ptr+=step;
 10098              		.loc 1 182 19 is_stmt 0 view .LVU3458
 10099 3c12 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_467, offset: 0B], _106
 183:sieve_extend.c ****        *index_ptr |= mask;
 10100              		.loc 1 183 8 is_stmt 1 view .LVU3459
 10101              	.LVL525:
 184:sieve_extend.c ****        index_ptr+=step;
 10102              		.loc 1 184 8 view .LVU3460
 10103              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 10104              		.loc 1 184 19 is_stmt 0 view .LVU3461
 10105 3c15 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_467, index: _121, offset: 0B], _106
 185:sieve_extend.c ****        *index_ptr |= mask;
 10106              		.loc 1 185 8 is_stmt 1 view .LVU3462
 10107              	.LVL526:
 186:sieve_extend.c ****        index_ptr+=step;
 10108              		.loc 1 186 8 view .LVU3463
 10109              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 10110              		.loc 1 186 19 is_stmt 0 view .LVU3464
 10111 3c19 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _702, offset: 0B], _106
 187:sieve_extend.c ****        *index_ptr |= mask;
 10112              		.loc 1 187 8 is_stmt 1 view .LVU3465
 10113              	.LVL527:
 188:sieve_extend.c ****        index_ptr+=step;
 10114              		.loc 1 188 8 view .LVU3466
 10115              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 10116              		.loc 1 188 19 is_stmt 0 view .LVU3467
 10117 3c1c 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _702, index: _121, offset: 0B], _106
 189:sieve_extend.c ****        *index_ptr |= mask;
 10118              		.loc 1 189 8 is_stmt 1 view .LVU3468
 10119              	.LVL528:
 190:sieve_extend.c ****        index_ptr+=step;
 10120              		.loc 1 190 8 view .LVU3469
 10121 3c20 4801FE   		add	rsi, rdi	# ivtmp.571, tmp352
 10122              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 10123              		.loc 1 190 19 is_stmt 0 view .LVU3470
 10124 3c23 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_467, index: _121, step: 4, offset: 0B], _106
 191:sieve_extend.c ****    }
 10125              		.loc 1 191 8 is_stmt 1 view .LVU3471
 10126 3c27 4801F8   		add	rax, rdi	# index_ptr, tmp352
GAS LISTING /tmp/ccBvFgp2.s 			page 280


 10127              	.LVL529:
 181:sieve_extend.c ****        *index_ptr |= mask;
 10128              		.loc 1 181 10 view .LVU3472
 10129 3c2a 4939C2   		cmp	r10, rax	# fast_loop_ptr, index_ptr
 10130 3c2d 7661     		jbe	.L856	#,
 182:sieve_extend.c ****        index_ptr+=step;
 10131              		.loc 1 182 8 view .LVU3473
 10132              	# sieve_extend.c:182:        *index_ptr |= mask;
 182:sieve_extend.c ****        index_ptr+=step;
 10133              		.loc 1 182 19 is_stmt 0 view .LVU3474
 10134 3c2f 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_467, offset: 0B], _106
 183:sieve_extend.c ****        *index_ptr |= mask;
 10135              		.loc 1 183 8 is_stmt 1 view .LVU3475
 10136              	.LVL530:
 184:sieve_extend.c ****        index_ptr+=step;
 10137              		.loc 1 184 8 view .LVU3476
 10138              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 10139              		.loc 1 184 19 is_stmt 0 view .LVU3477
 10140 3c32 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_467, index: _121, offset: 0B], _106
 185:sieve_extend.c ****        *index_ptr |= mask;
 10141              		.loc 1 185 8 is_stmt 1 view .LVU3478
 10142              	.LVL531:
 186:sieve_extend.c ****        index_ptr+=step;
 10143              		.loc 1 186 8 view .LVU3479
 10144              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 10145              		.loc 1 186 19 is_stmt 0 view .LVU3480
 10146 3c36 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _702, offset: 0B], _106
 187:sieve_extend.c ****        *index_ptr |= mask;
 10147              		.loc 1 187 8 is_stmt 1 view .LVU3481
 10148              	.LVL532:
 188:sieve_extend.c ****        index_ptr+=step;
 10149              		.loc 1 188 8 view .LVU3482
 10150              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 10151              		.loc 1 188 19 is_stmt 0 view .LVU3483
 10152 3c39 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _702, index: _121, offset: 0B], _106
 189:sieve_extend.c ****        *index_ptr |= mask;
 10153              		.loc 1 189 8 is_stmt 1 view .LVU3484
 10154              	.LVL533:
 190:sieve_extend.c ****        index_ptr+=step;
 10155              		.loc 1 190 8 view .LVU3485
 10156 3c3d 4801FE   		add	rsi, rdi	# ivtmp.571, tmp352
 10157              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 10158              		.loc 1 190 19 is_stmt 0 view .LVU3486
 10159 3c40 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_467, index: _121, step: 4, offset: 0B], _106
 191:sieve_extend.c ****    }
 10160              		.loc 1 191 8 is_stmt 1 view .LVU3487
 10161 3c44 4801F8   		add	rax, rdi	# index_ptr, tmp352
 10162              	.LVL534:
 181:sieve_extend.c ****        *index_ptr |= mask;
 10163              		.loc 1 181 10 view .LVU3488
 10164 3c47 4939C2   		cmp	r10, rax	# fast_loop_ptr, index_ptr
 10165 3c4a 7644     		jbe	.L856	#,
 182:sieve_extend.c ****        index_ptr+=step;
GAS LISTING /tmp/ccBvFgp2.s 			page 281


 10166              		.loc 1 182 8 view .LVU3489
 10167              	# sieve_extend.c:182:        *index_ptr |= mask;
 182:sieve_extend.c ****        index_ptr+=step;
 10168              		.loc 1 182 19 is_stmt 0 view .LVU3490
 10169 3c4c 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_467, offset: 0B], _106
 183:sieve_extend.c ****        *index_ptr |= mask;
 10170              		.loc 1 183 8 is_stmt 1 view .LVU3491
 10171              	.LVL535:
 184:sieve_extend.c ****        index_ptr+=step;
 10172              		.loc 1 184 8 view .LVU3492
 10173              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 10174              		.loc 1 184 19 is_stmt 0 view .LVU3493
 10175 3c4f 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_467, index: _121, offset: 0B], _106
 185:sieve_extend.c ****        *index_ptr |= mask;
 10176              		.loc 1 185 8 is_stmt 1 view .LVU3494
 10177              	.LVL536:
 186:sieve_extend.c ****        index_ptr+=step;
 10178              		.loc 1 186 8 view .LVU3495
 10179              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 10180              		.loc 1 186 19 is_stmt 0 view .LVU3496
 10181 3c53 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _702, offset: 0B], _106
 187:sieve_extend.c ****        *index_ptr |= mask;
 10182              		.loc 1 187 8 is_stmt 1 view .LVU3497
 10183              	.LVL537:
 188:sieve_extend.c ****        index_ptr+=step;
 10184              		.loc 1 188 8 view .LVU3498
 10185              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 10186              		.loc 1 188 19 is_stmt 0 view .LVU3499
 10187 3c56 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _702, index: _121, offset: 0B], _106
 189:sieve_extend.c ****        *index_ptr |= mask;
 10188              		.loc 1 189 8 is_stmt 1 view .LVU3500
 10189              	.LVL538:
 190:sieve_extend.c ****        index_ptr+=step;
 10190              		.loc 1 190 8 view .LVU3501
 10191 3c5a 4801FE   		add	rsi, rdi	# ivtmp.571, tmp352
 10192              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 10193              		.loc 1 190 19 is_stmt 0 view .LVU3502
 10194 3c5d 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_467, index: _121, step: 4, offset: 0B], _106
 191:sieve_extend.c ****    }
 10195              		.loc 1 191 8 is_stmt 1 view .LVU3503
 10196 3c61 4801F8   		add	rax, rdi	# index_ptr, tmp352
 10197              	.LVL539:
 181:sieve_extend.c ****        *index_ptr |= mask;
 10198              		.loc 1 181 10 view .LVU3504
 10199 3c64 4939C2   		cmp	r10, rax	# fast_loop_ptr, index_ptr
 10200 3c67 7627     		jbe	.L856	#,
 182:sieve_extend.c ****        index_ptr+=step;
 10201              		.loc 1 182 8 view .LVU3505
 10202              	# sieve_extend.c:182:        *index_ptr |= mask;
 182:sieve_extend.c ****        index_ptr+=step;
 10203              		.loc 1 182 19 is_stmt 0 view .LVU3506
 10204 3c69 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_467, offset: 0B], _106
 183:sieve_extend.c ****        *index_ptr |= mask;
GAS LISTING /tmp/ccBvFgp2.s 			page 282


 10205              		.loc 1 183 8 is_stmt 1 view .LVU3507
 10206              	.LVL540:
 184:sieve_extend.c ****        index_ptr+=step;
 10207              		.loc 1 184 8 view .LVU3508
 10208              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 10209              		.loc 1 184 19 is_stmt 0 view .LVU3509
 10210 3c6c 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_467, index: _121, offset: 0B], _106
 185:sieve_extend.c ****        *index_ptr |= mask;
 10211              		.loc 1 185 8 is_stmt 1 view .LVU3510
 10212              	.LVL541:
 186:sieve_extend.c ****        index_ptr+=step;
 10213              		.loc 1 186 8 view .LVU3511
 10214              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 10215              		.loc 1 186 19 is_stmt 0 view .LVU3512
 10216 3c70 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _702, offset: 0B], _106
 187:sieve_extend.c ****        *index_ptr |= mask;
 10217              		.loc 1 187 8 is_stmt 1 view .LVU3513
 10218              	.LVL542:
 188:sieve_extend.c ****        index_ptr+=step;
 10219              		.loc 1 188 8 view .LVU3514
 10220              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 10221              		.loc 1 188 19 is_stmt 0 view .LVU3515
 10222 3c73 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _702, index: _121, offset: 0B], _106
 189:sieve_extend.c ****        *index_ptr |= mask;
 10223              		.loc 1 189 8 is_stmt 1 view .LVU3516
 10224              	.LVL543:
 190:sieve_extend.c ****        index_ptr+=step;
 10225              		.loc 1 190 8 view .LVU3517
 10226 3c77 4801FE   		add	rsi, rdi	# ivtmp.571, tmp352
 10227              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 10228              		.loc 1 190 19 is_stmt 0 view .LVU3518
 10229 3c7a 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_467, index: _121, step: 4, offset: 0B], _106
 191:sieve_extend.c ****    }
 10230              		.loc 1 191 8 is_stmt 1 view .LVU3519
 10231 3c7e 4801F8   		add	rax, rdi	# index_ptr, tmp352
 10232              	.LVL544:
 181:sieve_extend.c ****        *index_ptr |= mask;
 10233              		.loc 1 181 10 view .LVU3520
 10234 3c81 4939C2   		cmp	r10, rax	# fast_loop_ptr, index_ptr
 10235 3c84 0F8708FF 		ja	.L857	#,
 10235      FFFF
 10236 3c8a 660F1F44 		.p2align 4
 10236      0000
 10237              		.p2align 3
 10238              	.L856:
 194:sieve_extend.c ****    while likely(index_ptr < range_stop_ptr) {
 10239              		.loc 1 194 4 view .LVU3521
 195:sieve_extend.c ****        *index_ptr |= mask;
 10240              		.loc 1 195 4 view .LVU3522
 195:sieve_extend.c ****        *index_ptr |= mask;
 10241              		.loc 1 195 10 view .LVU3523
 10242 3c90 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 10243 3c93 765B     		jbe	.L858	#,
GAS LISTING /tmp/ccBvFgp2.s 			page 283


 10244              	.L859:
 196:sieve_extend.c ****        index_ptr+=step;
 10245              		.loc 1 196 8 view .LVU3524
 10246              	# sieve_extend.c:196:        *index_ptr |= mask;
 196:sieve_extend.c ****        index_ptr+=step;
 10247              		.loc 1 196 19 is_stmt 0 view .LVU3525
 10248 3c95 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_465, offset: 0B], _106
 197:sieve_extend.c ****    }
 10249              		.loc 1 197 8 is_stmt 1 view .LVU3526
 10250              	# sieve_extend.c:197:        index_ptr+=step;
 197:sieve_extend.c ****    }
 10251              		.loc 1 197 17 is_stmt 0 view .LVU3527
 10252 3c98 4801D0   		add	rax, rdx	# index_ptr, _121
 10253              	.LVL545:
 195:sieve_extend.c ****        *index_ptr |= mask;
 10254              		.loc 1 195 10 is_stmt 1 view .LVU3528
 10255 3c9b 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 10256 3c9e 7650     		jbe	.L858	#,
 196:sieve_extend.c ****        index_ptr+=step;
 10257              		.loc 1 196 8 view .LVU3529
 10258              	# sieve_extend.c:196:        *index_ptr |= mask;
 196:sieve_extend.c ****        index_ptr+=step;
 10259              		.loc 1 196 19 is_stmt 0 view .LVU3530
 10260 3ca0 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_465, offset: 0B], _106
 197:sieve_extend.c ****    }
 10261              		.loc 1 197 8 is_stmt 1 view .LVU3531
 10262              	# sieve_extend.c:197:        index_ptr+=step;
 197:sieve_extend.c ****    }
 10263              		.loc 1 197 17 is_stmt 0 view .LVU3532
 10264 3ca3 4801D0   		add	rax, rdx	# index_ptr, _121
 10265              	.LVL546:
 195:sieve_extend.c ****        *index_ptr |= mask;
 10266              		.loc 1 195 10 is_stmt 1 view .LVU3533
 10267 3ca6 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 10268 3ca9 7645     		jbe	.L858	#,
 196:sieve_extend.c ****        index_ptr+=step;
 10269              		.loc 1 196 8 view .LVU3534
 10270              	# sieve_extend.c:196:        *index_ptr |= mask;
 196:sieve_extend.c ****        index_ptr+=step;
 10271              		.loc 1 196 19 is_stmt 0 view .LVU3535
 10272 3cab 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_465, offset: 0B], _106
 197:sieve_extend.c ****    }
 10273              		.loc 1 197 8 is_stmt 1 view .LVU3536
 10274              	# sieve_extend.c:197:        index_ptr+=step;
 197:sieve_extend.c ****    }
 10275              		.loc 1 197 17 is_stmt 0 view .LVU3537
 10276 3cae 4801D0   		add	rax, rdx	# index_ptr, _121
 10277              	.LVL547:
 195:sieve_extend.c ****        *index_ptr |= mask;
 10278              		.loc 1 195 10 is_stmt 1 view .LVU3538
 10279 3cb1 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 10280 3cb4 763A     		jbe	.L858	#,
 196:sieve_extend.c ****        index_ptr+=step;
 10281              		.loc 1 196 8 view .LVU3539
 10282              	# sieve_extend.c:196:        *index_ptr |= mask;
 196:sieve_extend.c ****        index_ptr+=step;
 10283              		.loc 1 196 19 is_stmt 0 view .LVU3540
GAS LISTING /tmp/ccBvFgp2.s 			page 284


 10284 3cb6 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_465, offset: 0B], _106
 197:sieve_extend.c ****    }
 10285              		.loc 1 197 8 is_stmt 1 view .LVU3541
 10286              	# sieve_extend.c:197:        index_ptr+=step;
 197:sieve_extend.c ****    }
 10287              		.loc 1 197 17 is_stmt 0 view .LVU3542
 10288 3cb9 4801D0   		add	rax, rdx	# index_ptr, _121
 10289              	.LVL548:
 195:sieve_extend.c ****        *index_ptr |= mask;
 10290              		.loc 1 195 10 is_stmt 1 view .LVU3543
 10291 3cbc 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 10292 3cbf 762F     		jbe	.L858	#,
 196:sieve_extend.c ****        index_ptr+=step;
 10293              		.loc 1 196 8 view .LVU3544
 10294              	# sieve_extend.c:196:        *index_ptr |= mask;
 196:sieve_extend.c ****        index_ptr+=step;
 10295              		.loc 1 196 19 is_stmt 0 view .LVU3545
 10296 3cc1 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_465, offset: 0B], _106
 197:sieve_extend.c ****    }
 10297              		.loc 1 197 8 is_stmt 1 view .LVU3546
 10298              	# sieve_extend.c:197:        index_ptr+=step;
 197:sieve_extend.c ****    }
 10299              		.loc 1 197 17 is_stmt 0 view .LVU3547
 10300 3cc4 4801D0   		add	rax, rdx	# index_ptr, _121
 10301              	.LVL549:
 195:sieve_extend.c ****        *index_ptr |= mask;
 10302              		.loc 1 195 10 is_stmt 1 view .LVU3548
 10303 3cc7 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 10304 3cca 7624     		jbe	.L858	#,
 196:sieve_extend.c ****        index_ptr+=step;
 10305              		.loc 1 196 8 view .LVU3549
 10306              	# sieve_extend.c:196:        *index_ptr |= mask;
 196:sieve_extend.c ****        index_ptr+=step;
 10307              		.loc 1 196 19 is_stmt 0 view .LVU3550
 10308 3ccc 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_465, offset: 0B], _106
 197:sieve_extend.c ****    }
 10309              		.loc 1 197 8 is_stmt 1 view .LVU3551
 10310              	# sieve_extend.c:197:        index_ptr+=step;
 197:sieve_extend.c ****    }
 10311              		.loc 1 197 17 is_stmt 0 view .LVU3552
 10312 3ccf 4801D0   		add	rax, rdx	# index_ptr, _121
 10313              	.LVL550:
 195:sieve_extend.c ****        *index_ptr |= mask;
 10314              		.loc 1 195 10 is_stmt 1 view .LVU3553
 10315 3cd2 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 10316 3cd5 7619     		jbe	.L858	#,
 196:sieve_extend.c ****        index_ptr+=step;
 10317              		.loc 1 196 8 view .LVU3554
 10318              	# sieve_extend.c:196:        *index_ptr |= mask;
 196:sieve_extend.c ****        index_ptr+=step;
 10319              		.loc 1 196 19 is_stmt 0 view .LVU3555
 10320 3cd7 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_465, offset: 0B], _106
 197:sieve_extend.c ****    }
 10321              		.loc 1 197 8 is_stmt 1 view .LVU3556
 10322              	# sieve_extend.c:197:        index_ptr+=step;
 197:sieve_extend.c ****    }
 10323              		.loc 1 197 17 is_stmt 0 view .LVU3557
GAS LISTING /tmp/ccBvFgp2.s 			page 285


 10324 3cda 4801D0   		add	rax, rdx	# index_ptr, _121
 10325              	.LVL551:
 195:sieve_extend.c ****        *index_ptr |= mask;
 10326              		.loc 1 195 10 is_stmt 1 view .LVU3558
 10327 3cdd 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 10328 3ce0 760E     		jbe	.L858	#,
 196:sieve_extend.c ****        index_ptr+=step;
 10329              		.loc 1 196 8 view .LVU3559
 10330              	# sieve_extend.c:196:        *index_ptr |= mask;
 196:sieve_extend.c ****        index_ptr+=step;
 10331              		.loc 1 196 19 is_stmt 0 view .LVU3560
 10332 3ce2 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_465, offset: 0B], _106
 197:sieve_extend.c ****    }
 10333              		.loc 1 197 8 is_stmt 1 view .LVU3561
 10334              	# sieve_extend.c:197:        index_ptr+=step;
 197:sieve_extend.c ****    }
 10335              		.loc 1 197 17 is_stmt 0 view .LVU3562
 10336 3ce5 4801D0   		add	rax, rdx	# index_ptr, _121
 10337              	.LVL552:
 195:sieve_extend.c ****        *index_ptr |= mask;
 10338              		.loc 1 195 10 is_stmt 1 view .LVU3563
 10339 3ce8 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 10340 3ceb 77A8     		ja	.L859	#,
 10341 3ced 0F1F00   		.p2align 4
 10342              		.p2align 3
 10343              	.L858:
 200:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 10344              		.loc 1 200 4 view .LVU3564
 10345              	# sieve_extend.c:200:    if (index_ptr == range_stop_ptr) { // index_ptr could also end above range
 200:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 10346              		.loc 1 200 7 is_stmt 0 view .LVU3565
 10347 3cf0 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 10348 3cf3 745B     		je	.L1083	#,
 10349              	.LVL553:
 10350              	.L860:
 200:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 10351              		.loc 1 200 7 view .LVU3566
 10352              	.LBE483:
 10353              	.LBE485:
 418:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 10354              		.loc 1 418 77 is_stmt 1 view .LVU3567
 10355              	# sieve_extend.c:418:     for (register counter_t index = range_start; index < range_stop_unique; i
 418:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 10356              		.loc 1 418 83 is_stmt 0 view .LVU3568
 10357 3cf5 4C01E5   		add	rbp, r12	# index, step
 10358              	.LVL554:
 418:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 10359              		.loc 1 418 50 is_stmt 1 view .LVU3569
 10360              	# sieve_extend.c:418:     for (register counter_t index = range_start; index < range_stop_unique; i
 418:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 10361              		.loc 1 418 5 is_stmt 0 view .LVU3570
 10362 3cf8 4939E8   		cmp	r8, rbp	# range_stop_unique, index
 10363 3cfb 0F876FFE 		ja	.L861	#,
 10363      FFFF
 10364              	.LVL555:
 418:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 10365              		.loc 1 418 5 view .LVU3571
GAS LISTING /tmp/ccBvFgp2.s 			page 286


 10366              	.LBE480:
 10367              	.LBE479:
 10368              	.LBE478:
 10369              	.LBE497:
1024:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 10370              		.loc 1 1024 11 is_stmt 1 view .LVU3572
 10371              	# sieve_extend.c:1024:     for (;range_stop < block_stop;) {
1024:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 10372              		.loc 1 1024 5 is_stmt 0 view .LVU3573
 10373 3d01 4C8B6424 		mov	r12, QWORD PTR 8[rsp]	# prephitmp_743, %sfp
 10373      08
 10374              	.LVL556:
1024:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 10375              		.loc 1 1024 5 view .LVU3574
 10376 3d06 4C396424 		cmp	QWORD PTR 16[rsp], r12	# %sfp, prephitmp_743
 10376      10
 10377 3d0b 0F820CFD 		jb	.L863	#,
 10377      FFFF
 10378              	.L1082:
1024:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 10379              		.loc 1 1024 5 view .LVU3575
 10380 3d11 488B5C24 		mov	rbx, QWORD PTR 48[rsp]	# <retval>, %sfp
 10380      30
 10381 3d16 4C89FA   		mov	rdx, r15	# block$pattern_size, patternsize_bits
 10382 3d19 488B7424 		mov	rsi, QWORD PTR 24[rsp]	# block$pattern_start, %sfp
 10382      18
 10383              	.LBE503:
 10384              	.LBE511:
 10385              	.LBB512:
 10386              	.LBB513:
 10387              	# sieve_extend.c:919:     if (size < WORD_SIZE_counter)   {
 919:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 10388              		.loc 1 919 8 view .LVU3576
 10389 3d1e 4883FA3F 		cmp	rdx, 63	# block$pattern_size,
 10390              	.LBE513:
 10391              	.LBE512:
 10392              	.LBB518:
 10393              	.LBB504:
 10394              	# sieve_extend.c:1024:     for (;range_stop < block_stop;) {
1024:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 10395              		.loc 1 1024 5 view .LVU3577
 10396 3d22 4C896C24 		mov	QWORD PTR 40[rsp], r13	# %sfp, index
 10396      28
 10397              	.LVL557:
1050:sieve_extend.c **** }
 10398              		.loc 1 1050 5 is_stmt 1 view .LVU3578
1050:sieve_extend.c **** }
 10399              		.loc 1 1050 5 is_stmt 0 view .LVU3579
 10400              	.LBE504:
 10401              	.LBE518:
1062:sieve_extend.c ****     prime = block.prime;
 10402              		.loc 1 1062 5 is_stmt 1 view .LVU3580
 10403              	.LBB519:
 10404              	.LBI512:
 918:sieve_extend.c ****     if (size < WORD_SIZE_counter)   {
 10405              		.loc 1 918 20 view .LVU3581
 10406              	.LBB514:
GAS LISTING /tmp/ccBvFgp2.s 			page 287


 919:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 10407              		.loc 1 919 5 view .LVU3582
 10408 3d27 4C8B7308 		mov	r14, QWORD PTR 8[rbx]	# prephitmp_743, sieve_91->bits
 10409              	.LVL558:
 919:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 10410              		.loc 1 919 5 is_stmt 0 view .LVU3583
 10411 3d2b 4C897424 		mov	QWORD PTR 8[rsp], r14	# %sfp, prephitmp_743
 10411      08
 10412              	# sieve_extend.c:919:     if (size < WORD_SIZE_counter)   {
 919:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 10413              		.loc 1 919 8 view .LVU3584
 10414 3d30 0F878C00 		ja	.L864	#,
 10414      0000
 10415              	.LVL559:
 10416              	.L841:
 920:sieve_extend.c ****         return; // rapid exit for small sizes
 10417              		.loc 1 920 9 is_stmt 1 view .LVU3585
 10418 3d36 488B4C24 		mov	rcx, QWORD PTR 8[rsp]	#, %sfp
 10418      08
 10419 3d3b 488B7C24 		mov	rdi, QWORD PTR 56[rsp]	#, %sfp
 10419      38
 10420 3d40 E8BBC2FF 		call	extendSieve_smallSize	#
 10420      FF
 10421              	.LVL560:
 921:sieve_extend.c ****     }
 10422              		.loc 1 921 9 view .LVU3586
 10423 3d45 E9A40000 		jmp	.L865	#
 10423      00
 10424              	.LVL561:
 10425 3d4a 660F1F44 		.p2align 4,,7
 10425      0000
 10426              		.p2align 3
 10427              	.L1083:
 921:sieve_extend.c ****     }
 10428              		.loc 1 921 9 is_stmt 0 view .LVU3587
 10429              	.LBE514:
 10430              	.LBE519:
 10431              	.LBB520:
 10432              	.LBB505:
 10433              	.LBB498:
 10434              	.LBB489:
 10435              	.LBB488:
 10436              	.LBB487:
 10437              	.LBB486:
 10438              	.LBB484:
 201:sieve_extend.c ****    }
 10439              		.loc 1 201 7 is_stmt 1 view .LVU3588
 10440              	# sieve_extend.c:201:       *index_ptr |= (mask & chopmask(range_stop));
 201:sieve_extend.c ****    }
 10441              		.loc 1 201 27 is_stmt 0 view .LVU3589
 10442 3d50 48234C24 		and	rcx, QWORD PTR 72[rsp]	# tmp357, %sfp
 10442      48
 10443              	.LVL562:
 10444              	# sieve_extend.c:201:       *index_ptr |= (mask & chopmask(range_stop));
 201:sieve_extend.c ****    }
 10445              		.loc 1 201 18 view .LVU3590
 10446 3d55 490909   		or	QWORD PTR [r9], rcx	# *index_ptr_464, tmp357
GAS LISTING /tmp/ccBvFgp2.s 			page 288


 10447 3d58 EB9B     		jmp	.L860	#
 10448              	.LVL563:
 10449 3d5a 660F1F44 		.p2align 4,,7
 10449      0000
 10450              		.p2align 3
 10451              	.L1081:
 201:sieve_extend.c ****    }
 10452              		.loc 1 201 18 view .LVU3591
 10453              	.LBE484:
 10454              	.LBE486:
 10455              	.LBE487:
 10456              	.LBE488:
 10457              	.LBE489:
1038:sieve_extend.c ****             extendSieve(bitarray, pattern_start, patternsize_bits, range_stop);
 10458              		.loc 1 1038 13 is_stmt 1 view .LVU3592
1039:sieve_extend.c ****         }
 10459              		.loc 1 1039 13 view .LVU3593
 10460              	.LBB490:
 10461              	.LBI490:
 918:sieve_extend.c ****     if (size < WORD_SIZE_counter)   {
 10462              		.loc 1 918 20 view .LVU3594
 10463              	.LBB491:
 919:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 10464              		.loc 1 919 5 view .LVU3595
 10465              	# sieve_extend.c:919:     if (size < WORD_SIZE_counter)   {
 919:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 10466              		.loc 1 919 8 is_stmt 0 view .LVU3596
 10467 3d60 4983FF3F 		cmp	r15, 63	# patternsize_bits,
 10468 3d64 0F86D307 		jbe	.L1084	#,
 10468      0000
 924:sieve_extend.c ****     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 10469              		.loc 1 924 5 is_stmt 1 view .LVU3597
 10470              	.LVL564:
 925:sieve_extend.c ****     const bitshift_t source_bit = bitindex_calc(source_start);
 10471              		.loc 1 925 5 view .LVU3598
 10472              	# sieve_extend.c:924:     const counter_t copy_start  = source_start + size;
 924:sieve_extend.c ****     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 10473              		.loc 1 924 21 is_stmt 0 view .LVU3599
 10474 3d6a 4F8D043F 		lea	r8, [r15+r15]	# copy_start,
 10475              	# sieve_extend.c:926:     const bitshift_t source_bit = bitindex_calc(source_start);
 926:sieve_extend.c **** 
 10476              		.loc 1 926 22 view .LVU3600
 10477 3d6e 4D89F9   		mov	r9, r15	# source_bit, patternsize_bits
 10478              	# sieve_extend.c:925:     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 925:sieve_extend.c ****     const bitshift_t source_bit = bitindex_calc(source_start);
 10479              		.loc 1 925 22 view .LVU3601
 10480 3d71 4183E03F 		and	r8d, 63	# copy_bit,
 10481              	.LVL565:
 926:sieve_extend.c **** 
 10482              		.loc 1 926 5 is_stmt 1 view .LVU3602
 10483              	# sieve_extend.c:926:     const bitshift_t source_bit = bitindex_calc(source_start);
 926:sieve_extend.c **** 
 10484              		.loc 1 926 22 is_stmt 0 view .LVU3603
 10485 3d75 4183E13F 		and	r9d, 63	# source_bit,
 10486              	.LVL566:
 928:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
 10487              		.loc 1 928 5 is_stmt 1 view .LVU3604
GAS LISTING /tmp/ccBvFgp2.s 			page 289


 10488              	# sieve_extend.c:928:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 928:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
 10489              		.loc 1 928 13 is_stmt 0 view .LVU3605
 10490 3d79 4D39C8   		cmp	r8, r9	# copy_bit, source_bit
 10491              	# sieve_extend.c:928:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 928:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
 10492              		.loc 1 928 37 view .LVU3606
 10493 3d7c 4C89FA   		mov	rdx, r15	#, patternsize_bits
 10494 3d7f 488B4C24 		mov	rcx, QWORD PTR 16[rsp]	#, %sfp
 10494      10
 10495 3d84 4C89FE   		mov	rsi, r15	#, patternsize_bits
 10496              	.LVL567:
 928:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
 10497              		.loc 1 928 37 view .LVU3607
 10498 3d87 4C89F7   		mov	rdi, r14	#, _96
 10499              	# sieve_extend.c:928:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 928:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
 10500              		.loc 1 928 13 view .LVU3608
 10501 3d8a 0F82A201 		jb	.L1085	#,
 10501      0000
 10502              	.LVL568:
 929:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 10503              		.loc 1 929 10 is_stmt 1 view .LVU3609
 10504              	# sieve_extend.c:929:     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, so
 929:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 10505              		.loc 1 929 13 is_stmt 0 view .LVU3610
 10506 3d90 0F868D01 		jbe	.L852	#,
 10506      0000
 929:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 10507              		.loc 1 929 37 is_stmt 1 view .LVU3611
 10508 3d96 E825C9FF 		call	extendSieve_shiftright_ivdep	#
 10508      FF
 10509              	.LVL569:
 929:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 10510              		.loc 1 929 37 is_stmt 0 view .LVU3612
 10511 3d9b 4C897C24 		mov	QWORD PTR 32[rsp], r15	# %sfp, patternsize_bits
 10511      20
 10512              		.p2align 4,,3
 10513 3da0 E948FCFF 		jmp	.L849	#
 10513      FF
 10514              	.LVL570:
 10515              	.L1079:
 929:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 10516              		.loc 1 929 37 view .LVU3613
 10517 3da5 4C8B7C24 		mov	r15, QWORD PTR 48[rsp]	# <retval>, %sfp
 10517      30
 10518 3daa 48894C24 		mov	QWORD PTR 40[rsp], rcx	# %sfp, prime
 10518      28
 10519 3daf 498B4F08 		mov	rcx, QWORD PTR 8[r15]	# prephitmp_743, sieve_91->bits
 10520 3db3 48894C24 		mov	QWORD PTR 8[rsp], rcx	# %sfp, prephitmp_743
 10520      08
 10521              	.LVL571:
 10522              	.L848:
 929:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 10523              		.loc 1 929 37 view .LVU3614
 10524              	.LBE491:
 10525              	.LBE490:
GAS LISTING /tmp/ccBvFgp2.s 			page 290


 10526              	.LBE498:
 10527              	.LBE505:
 10528              	.LBE520:
1062:sieve_extend.c ****     prime = block.prime;
 10529              		.loc 1 1062 5 is_stmt 1 view .LVU3615
 10530              	.LBB521:
 918:sieve_extend.c ****     if (size < WORD_SIZE_counter)   {
 10531              		.loc 1 918 20 view .LVU3616
 10532              	.LBB515:
 919:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 10533              		.loc 1 919 5 view .LVU3617
 10534              	# sieve_extend.c:919:     if (size < WORD_SIZE_counter)   {
 919:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 10535              		.loc 1 919 8 is_stmt 0 view .LVU3618
 10536 3db8 4883FA3F 		cmp	rdx, 63	# block$pattern_size,
 10537 3dbc 0F8674FF 		jbe	.L841	#,
 10537      FFFF
 10538              	.LVL572:
 10539              	.L864:
 924:sieve_extend.c ****     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 10540              		.loc 1 924 5 is_stmt 1 view .LVU3619
 925:sieve_extend.c ****     const bitshift_t source_bit = bitindex_calc(source_start);
 10541              		.loc 1 925 5 view .LVU3620
 10542              	# sieve_extend.c:924:     const counter_t copy_start  = source_start + size;
 924:sieve_extend.c ****     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 10543              		.loc 1 924 21 is_stmt 0 view .LVU3621
 10544 3dc2 488D0416 		lea	rax, [rsi+rdx]	# copy_start,
 10545              	.LVL573:
 10546              	# sieve_extend.c:926:     const bitshift_t source_bit = bitindex_calc(source_start);
 926:sieve_extend.c **** 
 10547              		.loc 1 926 22 view .LVU3622
 10548 3dc6 4989F4   		mov	r12, rsi	# source_bit, block$pattern_start
 10549              	# sieve_extend.c:925:     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 925:sieve_extend.c ****     const bitshift_t source_bit = bitindex_calc(source_start);
 10550              		.loc 1 925 22 view .LVU3623
 10551 3dc9 83E03F   		and	eax, 63	# copy_bit,
 10552              	.LVL574:
 926:sieve_extend.c **** 
 10553              		.loc 1 926 5 is_stmt 1 view .LVU3624
 10554              	# sieve_extend.c:926:     const bitshift_t source_bit = bitindex_calc(source_start);
 926:sieve_extend.c **** 
 10555              		.loc 1 926 22 is_stmt 0 view .LVU3625
 10556 3dcc 4183E43F 		and	r12d, 63	# source_bit,
 10557              	.LVL575:
 928:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
 10558              		.loc 1 928 5 is_stmt 1 view .LVU3626
 10559              	# sieve_extend.c:928:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 928:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
 10560              		.loc 1 928 37 is_stmt 0 view .LVU3627
 10561 3dd0 488B4C24 		mov	rcx, QWORD PTR 8[rsp]	#, %sfp
 10561      08
 10562              	# sieve_extend.c:928:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 928:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
 10563              		.loc 1 928 13 view .LVU3628
 10564 3dd5 4C39E0   		cmp	rax, r12	# copy_bit, source_bit
 10565              	# sieve_extend.c:928:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 928:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
GAS LISTING /tmp/ccBvFgp2.s 			page 291


 10566              		.loc 1 928 37 view .LVU3629
 10567 3dd8 488B7C24 		mov	rdi, QWORD PTR 56[rsp]	#, %sfp
 10567      38
 10568              	# sieve_extend.c:928:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 928:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
 10569              		.loc 1 928 13 view .LVU3630
 10570 3ddd 0F827707 		jb	.L1086	#,
 10570      0000
 929:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 10571              		.loc 1 929 10 is_stmt 1 view .LVU3631
 10572              	# sieve_extend.c:929:     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, so
 929:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 10573              		.loc 1 929 13 is_stmt 0 view .LVU3632
 10574 3de3 0F875801 		ja	.L1087	#,
 10574      0000
 930:sieve_extend.c **** }
 10575              		.loc 1 930 37 is_stmt 1 view .LVU3633
 10576 3de9 E8E2E0FF 		call	extendSieve_aligned	#
 10576      FF
 10577              	.LVL576:
 10578              	.L865:
 930:sieve_extend.c **** }
 10579              		.loc 1 930 37 is_stmt 0 view .LVU3634
 10580              	.LBE515:
 10581              	.LBE521:
1063:sieve_extend.c **** 
 10582              		.loc 1 1063 5 is_stmt 1 view .LVU3635
1066:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10583              		.loc 1 1066 5 view .LVU3636
 10584              	.LBB522:
1066:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10585              		.loc 1 1066 10 view .LVU3637
1066:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10586              		.loc 1 1066 10 is_stmt 0 view .LVU3638
 10587 3dee 4C8B4C24 		mov	r9, QWORD PTR 40[rsp]	# prime, %sfp
 10587      28
 10588              	# sieve_extend.c:1066:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <=
1066:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10589              		.loc 1 1066 20 view .LVU3639
 10590 3df3 4531FF   		xor	r15d, r15d	# block_start
 10591              	# sieve_extend.c:1066:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <=
1066:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10592              		.loc 1 1066 38 view .LVU3640
 10593 3df6 488B7424 		mov	rsi, QWORD PTR 64[rsp]	# blocksize, %sfp
 10593      40
 10594              	.LBB523:
 10595              	.LBB524:
 10596              	.LBB525:
 10597              	.LBB526:
 10598              	.LBB527:
 10599              	# sieve_extend.c:419:         applyMask(bitarray, step, range_stop, markmask(index), wordindex(inde
 419:sieve_extend.c ****     }
 10600              		.loc 1 419 9 view .LVU3641
 10601 3dfb 41BD0100 		mov	r13d, 1	# tmp461,
 10601      0000
 10602              	.LBE527:
 10603              	.LBE526:
GAS LISTING /tmp/ccBvFgp2.s 			page 292


 10604              	.LBE525:
 10605              	.LBE524:
 10606              	.LBE523:
 10607              	# sieve_extend.c:1066:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <=
1066:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10608              		.loc 1 1066 83 view .LVU3642
 10609 3e01 4C8B4424 		mov	r8, QWORD PTR 48[rsp]	# <retval>, %sfp
 10609      30
 10610 3e06 4D8D5101 		lea	r10, 1[r9]	# tmp456,
 10611 3e0a 4C895424 		mov	QWORD PTR 32[rsp], r10	# %sfp, tmp456
 10611      20
 10612              	# sieve_extend.c:1066:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <=
1066:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10613              		.loc 1 1066 38 view .LVU3643
 10614 3e0f 488D6EFF 		lea	rbp, -1[rsi]	# block_stop,
 10615              	.LVL577:
1066:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10616              		.loc 1 1066 63 is_stmt 1 view .LVU3644
 10617              	# sieve_extend.c:1066:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <=
1066:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10618              		.loc 1 1066 83 is_stmt 0 view .LVU3645
 10619 3e13 498B5008 		mov	rdx, QWORD PTR 8[r8]	# _8, sieve_91->bits
 10620              	.LVL578:
 10621 3e17 660F1F84 		.p2align 4
 10621      00000000 
 10621      00
 10622              		.p2align 3
 10623              	.L871:
1067:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime);
 10624              		.loc 1 1067 9 is_stmt 1 view .LVU3646
 10625              	.LBB567:
 10626              	.LBB568:
 10627              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10628              		.loc 1 123 21 is_stmt 0 view .LVU3647
 10629 3e20 4C8B5C24 		mov	r11, QWORD PTR 40[rsp]	# prime, %sfp
 10629      28
 10630 3e25 4839D5   		cmp	rbp, rdx	# block_stop, _8
 10631              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10632              		.loc 1 123 12 view .LVU3648
 10633 3e28 488B5C24 		mov	rbx, QWORD PTR 56[rsp]	# _96, %sfp
 10633      38
 10634 3e2d 480F47EA 		cmova	rbp, rdx	# block_stop,, block_stop, _8
 10635              	.LVL579:
 123:sieve_extend.c ****     return index;
 10636              		.loc 1 123 12 view .LVU3649
 10637              	.LBE568:
 10638              	.LBE567:
1068:sieve_extend.c ****         sieve_block_stripe(sieve, block_start, block_stop, prime);
 10639              		.loc 1 1068 9 is_stmt 1 view .LVU3650
 10640              	.LBB571:
 10641              	.LBI567:
 122:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 10642              		.loc 1 122 25 view .LVU3651
 10643              	.LBB569:
 123:sieve_extend.c ****     return index;
GAS LISTING /tmp/ccBvFgp2.s 			page 293


 10644              		.loc 1 123 5 view .LVU3652
 123:sieve_extend.c ****     return index;
 10645              		.loc 1 123 11 view .LVU3653
 10646              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10647              		.loc 1 123 21 is_stmt 0 view .LVU3654
 10648 3e31 4C89DF   		mov	rdi, r11	# tmp359, prime
 10649 3e34 48C1EF06 		shr	rdi, 6	# tmp359,
 10650              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10651              		.loc 1 123 12 view .LVU3655
 10652 3e38 4C8B34FB 		mov	r14, QWORD PTR [rbx+rdi*8]	# *_206, *_206
 10653              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10654              		.loc 1 123 11 view .LVU3656
 10655 3e3c 4D0FA3DE 		bt	r14, r11	# *_206, tmp770
 10656 3e40 0F831D01 		jnc	.L868	#,
 10656      0000
 10657 3e46 488B4424 		mov	rax, QWORD PTR 32[rsp]	# tmp456, %sfp
 10657      20
 10658              	.L869:
 123:sieve_extend.c ****     return index;
 10659              		.loc 1 123 58 is_stmt 1 view .LVU3657
 10660              	.LVL580:
 10661              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10662              		.loc 1 123 21 is_stmt 0 view .LVU3658
 10663 3e4b 4889C1   		mov	rcx, rax	# tmp364, tmp456
 10664              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10665              		.loc 1 123 63 view .LVU3659
 10666 3e4e 4889C6   		mov	rsi, rax	# prime, tmp456
 123:sieve_extend.c ****     return index;
 10667              		.loc 1 123 11 is_stmt 1 view .LVU3660
 10668              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10669              		.loc 1 123 21 is_stmt 0 view .LVU3661
 10670 3e51 48C1E906 		shr	rcx, 6	# tmp364,
 10671              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10672              		.loc 1 123 12 view .LVU3662
 10673 3e55 4C8B24CB 		mov	r12, QWORD PTR [rbx+rcx*8]	# *_34, *_34
 10674              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10675              		.loc 1 123 11 view .LVU3663
 10676 3e59 490FA3C4 		bt	r12, rax	# *_34, tmp456
 10677 3e5d 0F83ED00 		jnc	.L1055	#,
 10677      0000
 10678 3e63 4C8D4801 		lea	r9, 1[rax]	# tmp465,
 10679              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10680              		.loc 1 123 21 view .LVU3664
 10681 3e67 4D89C8   		mov	r8, r9	# tmp468, tmp456
 10682 3e6a 4C89C8   		mov	rax, r9	# tmp456, tmp465
 10683              	.LVL581:
 123:sieve_extend.c ****     return index;
 10684              		.loc 1 123 58 is_stmt 1 view .LVU3665
GAS LISTING /tmp/ccBvFgp2.s 			page 294


 10685              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10686              		.loc 1 123 21 is_stmt 0 view .LVU3666
 10687 3e6d 49C1E806 		shr	r8, 6	# tmp468,
 10688              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10689              		.loc 1 123 63 view .LVU3667
 10690 3e71 4C89CE   		mov	rsi, r9	# prime, tmp456
 123:sieve_extend.c ****     return index;
 10691              		.loc 1 123 11 is_stmt 1 view .LVU3668
 10692              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10693              		.loc 1 123 12 is_stmt 0 view .LVU3669
 10694 3e74 4E8B14C3 		mov	r10, QWORD PTR [rbx+r8*8]	# *_34, *_34
 10695              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10696              		.loc 1 123 11 view .LVU3670
 10697 3e78 4D0FA3CA 		bt	r10, r9	# *_34, tmp456
 10698 3e7c 0F83CE00 		jnc	.L1055	#,
 10698      0000
 10699 3e82 498D4101 		lea	rax, 1[r9]	# tmp456,
 10700              	.LVL582:
 123:sieve_extend.c ****     return index;
 10701              		.loc 1 123 58 is_stmt 1 view .LVU3671
 10702              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10703              		.loc 1 123 21 is_stmt 0 view .LVU3672
 10704 3e86 4989C3   		mov	r11, rax	# tmp543, tmp456
 10705              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10706              		.loc 1 123 63 view .LVU3673
 10707 3e89 4889C6   		mov	rsi, rax	# prime, tmp456
 123:sieve_extend.c ****     return index;
 10708              		.loc 1 123 11 is_stmt 1 view .LVU3674
 10709              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10710              		.loc 1 123 21 is_stmt 0 view .LVU3675
 10711 3e8c 49C1EB06 		shr	r11, 6	# tmp543,
 10712              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10713              		.loc 1 123 12 view .LVU3676
 10714 3e90 4A8B3CDB 		mov	rdi, QWORD PTR [rbx+r11*8]	# *_34, *_34
 10715              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10716              		.loc 1 123 11 view .LVU3677
 10717 3e94 480FA3C7 		bt	rdi, rax	# *_34, tmp456
 10718 3e98 0F83B200 		jnc	.L1055	#,
 10718      0000
 10719 3e9e 498D4102 		lea	rax, 2[r9]	# tmp456,
 10720              	.LVL583:
 123:sieve_extend.c ****     return index;
 10721              		.loc 1 123 58 is_stmt 1 view .LVU3678
 10722              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10723              		.loc 1 123 21 is_stmt 0 view .LVU3679
 10724 3ea2 4989C6   		mov	r14, rax	# tmp547, tmp456
 10725              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
GAS LISTING /tmp/ccBvFgp2.s 			page 295


 123:sieve_extend.c ****     return index;
 10726              		.loc 1 123 63 view .LVU3680
 10727 3ea5 4889C6   		mov	rsi, rax	# prime, tmp456
 123:sieve_extend.c ****     return index;
 10728              		.loc 1 123 11 is_stmt 1 view .LVU3681
 10729              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10730              		.loc 1 123 21 is_stmt 0 view .LVU3682
 10731 3ea8 49C1EE06 		shr	r14, 6	# tmp547,
 10732              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10733              		.loc 1 123 12 view .LVU3683
 10734 3eac 4A8B0CF3 		mov	rcx, QWORD PTR [rbx+r14*8]	# *_34, *_34
 10735              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10736              		.loc 1 123 11 view .LVU3684
 10737 3eb0 480FA3C1 		bt	rcx, rax	# *_34, tmp456
 10738 3eb4 0F839600 		jnc	.L1055	#,
 10738      0000
 10739 3eba 498D4103 		lea	rax, 3[r9]	# tmp456,
 10740              	.LVL584:
 123:sieve_extend.c ****     return index;
 10741              		.loc 1 123 58 is_stmt 1 view .LVU3685
 10742              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10743              		.loc 1 123 21 is_stmt 0 view .LVU3686
 10744 3ebe 4989C4   		mov	r12, rax	# tmp551, tmp456
 10745              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10746              		.loc 1 123 63 view .LVU3687
 10747 3ec1 4889C6   		mov	rsi, rax	# prime, tmp456
 123:sieve_extend.c ****     return index;
 10748              		.loc 1 123 11 is_stmt 1 view .LVU3688
 10749              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10750              		.loc 1 123 21 is_stmt 0 view .LVU3689
 10751 3ec4 49C1EC06 		shr	r12, 6	# tmp551,
 10752              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10753              		.loc 1 123 12 view .LVU3690
 10754 3ec8 4E8B04E3 		mov	r8, QWORD PTR [rbx+r12*8]	# *_34, *_34
 10755              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10756              		.loc 1 123 11 view .LVU3691
 10757 3ecc 490FA3C0 		bt	r8, rax	# *_34, tmp456
 10758 3ed0 737E     		jnc	.L1055	#,
 10759 3ed2 498D4104 		lea	rax, 4[r9]	# tmp456,
 10760              	.LVL585:
 123:sieve_extend.c ****     return index;
 10761              		.loc 1 123 58 is_stmt 1 view .LVU3692
 10762              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10763              		.loc 1 123 21 is_stmt 0 view .LVU3693
 10764 3ed6 4989C2   		mov	r10, rax	# tmp555, tmp456
 10765              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10766              		.loc 1 123 63 view .LVU3694
GAS LISTING /tmp/ccBvFgp2.s 			page 296


 10767 3ed9 4889C6   		mov	rsi, rax	# prime, tmp456
 123:sieve_extend.c ****     return index;
 10768              		.loc 1 123 11 is_stmt 1 view .LVU3695
 10769              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10770              		.loc 1 123 21 is_stmt 0 view .LVU3696
 10771 3edc 49C1EA06 		shr	r10, 6	# tmp555,
 10772              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10773              		.loc 1 123 12 view .LVU3697
 10774 3ee0 4E8B1CD3 		mov	r11, QWORD PTR [rbx+r10*8]	# *_34, *_34
 10775              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10776              		.loc 1 123 11 view .LVU3698
 10777 3ee4 490FA3C3 		bt	r11, rax	# *_34, tmp456
 10778 3ee8 7366     		jnc	.L1055	#,
 10779 3eea 498D4105 		lea	rax, 5[r9]	# tmp456,
 10780              	.LVL586:
 123:sieve_extend.c ****     return index;
 10781              		.loc 1 123 58 is_stmt 1 view .LVU3699
 10782              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10783              		.loc 1 123 21 is_stmt 0 view .LVU3700
 10784 3eee 4889C7   		mov	rdi, rax	# tmp559, tmp456
 10785              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10786              		.loc 1 123 63 view .LVU3701
 10787 3ef1 4889C6   		mov	rsi, rax	# prime, tmp456
 123:sieve_extend.c ****     return index;
 10788              		.loc 1 123 11 is_stmt 1 view .LVU3702
 10789              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10790              		.loc 1 123 21 is_stmt 0 view .LVU3703
 10791 3ef4 48C1EF06 		shr	rdi, 6	# tmp559,
 10792              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10793              		.loc 1 123 12 view .LVU3704
 10794 3ef8 4C8B34FB 		mov	r14, QWORD PTR [rbx+rdi*8]	# *_34, *_34
 10795              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10796              		.loc 1 123 11 view .LVU3705
 10797 3efc 490FA3C6 		bt	r14, rax	# *_34, tmp456
 10798 3f00 734E     		jnc	.L1055	#,
 10799 3f02 498D4106 		lea	rax, 6[r9]	# tmp456,
 10800              	.LVL587:
 123:sieve_extend.c ****     return index;
 10801              		.loc 1 123 58 is_stmt 1 view .LVU3706
 10802              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10803              		.loc 1 123 21 is_stmt 0 view .LVU3707
 10804 3f06 4889C1   		mov	rcx, rax	# tmp563, tmp456
 10805              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10806              		.loc 1 123 63 view .LVU3708
 10807 3f09 4889C6   		mov	rsi, rax	# prime, tmp456
 123:sieve_extend.c ****     return index;
 10808              		.loc 1 123 11 is_stmt 1 view .LVU3709
GAS LISTING /tmp/ccBvFgp2.s 			page 297


 10809              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10810              		.loc 1 123 21 is_stmt 0 view .LVU3710
 10811 3f0c 48C1E906 		shr	rcx, 6	# tmp563,
 10812              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10813              		.loc 1 123 12 view .LVU3711
 10814 3f10 4C8B24CB 		mov	r12, QWORD PTR [rbx+rcx*8]	# *_34, *_34
 10815              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10816              		.loc 1 123 11 view .LVU3712
 10817 3f14 490FA3C4 		bt	r12, rax	# *_34, tmp456
 10818 3f18 7336     		jnc	.L1055	#,
 10819 3f1a 498D4107 		lea	rax, 7[r9]	# tmp456,
 10820              	.LVL588:
 123:sieve_extend.c ****     return index;
 10821              		.loc 1 123 11 view .LVU3713
 10822 3f1e E928FFFF 		jmp	.L869	#
 10822      FF
 10823              	.LVL589:
 10824              	.L852:
 123:sieve_extend.c ****     return index;
 10825              		.loc 1 123 11 view .LVU3714
 10826              	.LBE569:
 10827              	.LBE571:
 10828              	.LBE522:
 10829              	.LBB577:
 10830              	.LBB506:
 10831              	.LBB499:
 10832              	.LBB494:
 10833              	.LBB492:
 930:sieve_extend.c **** }
 10834              		.loc 1 930 37 is_stmt 1 view .LVU3715
 10835 3f23 E8A8DFFF 		call	extendSieve_aligned	#
 10835      FF
 10836              	.LVL590:
 930:sieve_extend.c **** }
 10837              		.loc 1 930 37 is_stmt 0 view .LVU3716
 10838 3f28 4C897C24 		mov	QWORD PTR 32[rsp], r15	# %sfp, patternsize_bits
 10838      20
 10839 3f2d E9BBFAFF 		jmp	.L849	#
 10839      FF
 10840              	.LVL591:
 10841              	.L1085:
 928:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
 10842              		.loc 1 928 37 is_stmt 1 view .LVU3717
 10843 3f32 E819E5FF 		call	extendSieve_shiftleft	#
 10843      FF
 10844              	.LVL592:
 928:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
 10845              		.loc 1 928 37 is_stmt 0 view .LVU3718
 10846 3f37 4C897C24 		mov	QWORD PTR 32[rsp], r15	# %sfp, patternsize_bits
 10846      20
 10847 3f3c E9ACFAFF 		jmp	.L849	#
 10847      FF
 10848              	.LVL593:
 10849              	.L1087:
GAS LISTING /tmp/ccBvFgp2.s 			page 298


 928:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
 10850              		.loc 1 928 37 view .LVU3719
 10851              	.LBE492:
 10852              	.LBE494:
 10853              	.LBE499:
 10854              	.LBE506:
 10855              	.LBE577:
 10856              	.LBB578:
 10857              	.LBB516:
 929:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 10858              		.loc 1 929 37 is_stmt 1 view .LVU3720
 10859 3f41 E87AC7FF 		call	extendSieve_shiftright_ivdep	#
 10859      FF
 10860              	.LVL594:
 929:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 10861              		.loc 1 929 37 is_stmt 0 view .LVU3721
 10862              		.p2align 4,,3
 10863 3f46 E9A3FEFF 		jmp	.L865	#
 10863      FF
 10864              	.LVL595:
 10865 3f4b 0F1F4400 		.p2align 4,,7
 10865      00
 10866              		.p2align 3
 10867              	.L1055:
 929:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 10868              		.loc 1 929 37 view .LVU3722
 10869 3f50 48894424 		mov	QWORD PTR 32[rsp], rax	# %sfp, tmp456
 10869      20
 10870 3f55 488D4001 		lea	rax, 1[rax]	# tmp456,
 10871              	.LVL596:
 929:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 10872              		.loc 1 929 37 view .LVU3723
 10873 3f59 48897424 		mov	QWORD PTR 40[rsp], rsi	# %sfp, prime
 10873      28
 10874 3f5e 48894424 		mov	QWORD PTR 32[rsp], rax	# %sfp, tmp456
 10874      20
 10875              	.LVL597:
 10876              	.L868:
 929:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 10877              		.loc 1 929 37 view .LVU3724
 10878              	.LBE516:
 10879              	.LBE578:
 10880              	.LBB579:
 10881              	.LBB572:
 10882              	.LBB570:
 124:sieve_extend.c **** }
 10883              		.loc 1 124 5 is_stmt 1 view .LVU3725
 124:sieve_extend.c **** }
 10884              		.loc 1 124 5 is_stmt 0 view .LVU3726
 10885              	.LBE570:
 10886              	.LBE572:
1069:sieve_extend.c ****     } 
 10887              		.loc 1 1069 9 is_stmt 1 view .LVU3727
 10888              	.LBB573:
 10889              	.LBB563:
 10890              	# sieve_extend.c:935:     counter_t start = prime * prime * 2 + prime * 2;
 935:sieve_extend.c ****     counter_t step  = prime * 2 + 1;
GAS LISTING /tmp/ccBvFgp2.s 			page 299


 10891              		.loc 1 935 15 is_stmt 0 view .LVU3728
 10892 3f63 488B7424 		mov	rsi, QWORD PTR 32[rsp]	# tmp370, %sfp
 10892      20
 10893 3f68 488B4C24 		mov	rcx, QWORD PTR 40[rsp]	# prime, %sfp
 10893      28
 10894              	.LBE563:
 10895              	.LBE573:
 10896              	# sieve_extend.c:1069:         sieve_block_stripe(sieve, block_start, block_stop, prime);
1069:sieve_extend.c ****     } 
 10897              		.loc 1 1069 9 view .LVU3729
 10898 3f6d 488B5C24 		mov	rbx, QWORD PTR 48[rsp]	# <retval>, %sfp
 10898      30
 10899              	.LBB574:
 10900              	.LBB564:
 10901              	# sieve_extend.c:935:     counter_t start = prime * prime * 2 + prime * 2;
 935:sieve_extend.c ****     counter_t step  = prime * 2 + 1;
 10902              		.loc 1 935 15 view .LVU3730
 10903 3f72 480FAFF1 		imul	rsi, rcx	# tmp370, prime
 10904              	.LBE564:
 10905              	.LBE574:
 10906              	# sieve_extend.c:1069:         sieve_block_stripe(sieve, block_start, block_stop, prime);
1069:sieve_extend.c ****     } 
 10907              		.loc 1 1069 9 view .LVU3731
 10908 3f76 488B1B   		mov	rbx, QWORD PTR [rbx]	# _30, MEM[(uint64_t * *)sieve_91]
 10909              	.LVL598:
 10910              	.LBB575:
 10911              	.LBI523:
 933:sieve_extend.c ****     counter_t prime = prime_start;
 10912              		.loc 1 933 13 is_stmt 1 view .LVU3732
 10913              	.LBB565:
 934:sieve_extend.c ****     counter_t start = prime * prime * 2 + prime * 2;
 10914              		.loc 1 934 5 view .LVU3733
 935:sieve_extend.c ****     counter_t step  = prime * 2 + 1;
 10915              		.loc 1 935 5 view .LVU3734
 10916              	# sieve_extend.c:935:     counter_t start = prime * prime * 2 + prime * 2;
 935:sieve_extend.c ****     counter_t step  = prime * 2 + 1;
 10917              		.loc 1 935 15 is_stmt 0 view .LVU3735
 10918 3f79 4801F6   		add	rsi, rsi	# index
 10919              	.LVL599:
 936:sieve_extend.c ****     bitword_t* bitarray = sieve->bitarray;
 10920              		.loc 1 936 5 is_stmt 1 view .LVU3736
 937:sieve_extend.c **** 
 10921              		.loc 1 937 5 view .LVU3737
 939:sieve_extend.c ****     
 10922              		.loc 1 939 5 view .LVU3738
 977:sieve_extend.c ****         step  = prime * 2 + 1;
 10923              		.loc 1 977 5 view .LVU3739
 977:sieve_extend.c ****         step  = prime * 2 + 1;
 10924              		.loc 1 977 11 view .LVU3740
 10925 3f7c 4839F5   		cmp	rbp, rsi	# block_stop, index
 10926 3f7f 0F823801 		jb	.L875	#,
 10926      0000
 10927 3f85 66662E0F 		.p2align 4
 10927      1F840000 
 10927      000000
 10928              		.p2align 3
 10929              	.L870:
GAS LISTING /tmp/ccBvFgp2.s 			page 300


 978:sieve_extend.c ****         if unlikely(step > VECTORSTEP_FASTER) break;
 10930              		.loc 1 978 9 view .LVU3741
 10931              	# sieve_extend.c:978:         step  = prime * 2 + 1;
 978:sieve_extend.c ****         if unlikely(step > VECTORSTEP_FASTER) break;
 10932              		.loc 1 978 15 is_stmt 0 view .LVU3742
 10933 3f90 4C8D4C09 		lea	r9, 1[rcx+rcx]	# step,
 10933      01
 10934              	.LVL600:
 979:sieve_extend.c ****         if likely(block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start +
 10935              		.loc 1 979 9 is_stmt 1 view .LVU3743
 10936              	# sieve_extend.c:979:         if unlikely(step > VECTORSTEP_FASTER) break;
 979:sieve_extend.c ****         if likely(block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start +
 10937              		.loc 1 979 12 is_stmt 0 view .LVU3744
 10938 3f95 4C3B0D00 		cmp	r9, QWORD PTR global_VECTORSTEP_FASTER[rip]	# step, global_VECTORSTEP_FASTER
 10938      000000
 10939 3f9c 0F874601 		ja	.L1088	#,
 10939      0000
 980:sieve_extend.c ****         setBitsTrue_largeRange_vector(bitarray, start, step, block_stop);
 10940              		.loc 1 980 9 is_stmt 1 view .LVU3745
 10941              	# sieve_extend.c:980:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 980:sieve_extend.c ****         setBitsTrue_largeRange_vector(bitarray, start, step, block_stop);
 10942              		.loc 1 980 12 is_stmt 0 view .LVU3746
 10943 3fa2 4C8D7101 		lea	r14, 1[rcx]	# _168,
 10944 3fa6 4D39FE   		cmp	r14, r15	# _168, block_start
 10945 3fa9 7710     		ja	.L876	#,
 980:sieve_extend.c ****         setBitsTrue_largeRange_vector(bitarray, start, step, block_stop);
 10946              		.loc 1 980 47 is_stmt 1 view .LVU3747
 10947              	# sieve_extend.c:980:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 980:sieve_extend.c ****         setBitsTrue_largeRange_vector(bitarray, start, step, block_stop);
 10948              		.loc 1 980 67 is_stmt 0 view .LVU3748
 10949 3fab 498D040F 		lea	rax, [r15+rcx]	# _172,
 10950              	# sieve_extend.c:980:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 980:sieve_extend.c ****         setBitsTrue_largeRange_vector(bitarray, start, step, block_stop);
 10951              		.loc 1 980 108 view .LVU3749
 10952 3faf 31D2     		xor	edx, edx	# tmp374
 10953              	# sieve_extend.c:980:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 980:sieve_extend.c ****         setBitsTrue_largeRange_vector(bitarray, start, step, block_stop);
 10954              		.loc 1 980 75 view .LVU3750
 10955 3fb1 488D3408 		lea	rsi, [rax+rcx]	# tmp372,
 10956              	.LVL601:
 10957              	# sieve_extend.c:980:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 980:sieve_extend.c ****         setBitsTrue_largeRange_vector(bitarray, start, step, block_stop);
 10958              		.loc 1 980 108 view .LVU3751
 10959 3fb5 49F7F1   		div	r9	# step
 10960              	.LVL602:
 10961              	# sieve_extend.c:980:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 980:sieve_extend.c ****         setBitsTrue_largeRange_vector(bitarray, start, step, block_stop);
 10962              		.loc 1 980 53 view .LVU3752
 10963 3fb8 4829D6   		sub	rsi, rdx	# index, tmp374
 10964              	.LVL603:
 10965              	.L876:
 981:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1 );
 10966              		.loc 1 981 9 is_stmt 1 view .LVU3753
 10967 3fbb 4889E9   		mov	rcx, rbp	#, block_stop
 10968 3fbe 4C89CA   		mov	rdx, r9	#, step
 10969 3fc1 4889DF   		mov	rdi, rbx	#, _30
 10970 3fc4 E847D5FF 		call	setBitsTrue_largeRange_vector	#
GAS LISTING /tmp/ccBvFgp2.s 			page 301


 10970      FF
 10971              	.LVL604:
 982:sieve_extend.c ****         start = prime * prime * 2 + prime * 2;
 10972              		.loc 1 982 9 view .LVU3754
 10973              	.LBB544:
 10974              	.LBI544:
 122:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 10975              		.loc 1 122 25 view .LVU3755
 10976              	.LBB545:
 123:sieve_extend.c ****     return index;
 10977              		.loc 1 123 5 view .LVU3756
 123:sieve_extend.c ****     return index;
 10978              		.loc 1 123 11 view .LVU3757
 10979              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10980              		.loc 1 123 21 is_stmt 0 view .LVU3758
 10981 3fc9 4D89F0   		mov	r8, r14	# tmp376, _168
 10982              	.LBE545:
 10983              	.LBE544:
 10984              	# sieve_extend.c:980:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 980:sieve_extend.c ****         setBitsTrue_largeRange_vector(bitarray, start, step, block_stop);
 10985              		.loc 1 980 12 view .LVU3759
 10986 3fcc 4C89F1   		mov	rcx, r14	# prime, _168
 10987              	.LBB547:
 10988              	.LBB546:
 10989              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10990              		.loc 1 123 21 view .LVU3760
 10991 3fcf 49C1E806 		shr	r8, 6	# tmp376,
 10992              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10993              		.loc 1 123 12 view .LVU3761
 10994 3fd3 4E8B14C3 		mov	r10, QWORD PTR [rbx+r8*8]	# *_70, *_70
 10995              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 10996              		.loc 1 123 11 view .LVU3762
 10997 3fd7 4D0FA3F2 		bt	r10, r14	# *_70, _168
 10998 3fdb 0F83BF00 		jnc	.L877	#,
 10998      0000
 10999              	.LVL605:
 11000              	.L878:
 123:sieve_extend.c ****     return index;
 11001              		.loc 1 123 58 is_stmt 1 view .LVU3763
 11002              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11003              		.loc 1 123 63 is_stmt 0 view .LVU3764
 11004 3fe1 4C8D5901 		lea	r11, 1[rcx]	# tmp464,
 11005              	.LVL606:
 11006              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11007              		.loc 1 123 21 view .LVU3765
 11008 3fe5 4C89DF   		mov	rdi, r11	# tmp381, prime
 11009              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11010              		.loc 1 123 63 view .LVU3766
 11011 3fe8 4C89D9   		mov	rcx, r11	# prime, tmp464
 123:sieve_extend.c ****     return index;
GAS LISTING /tmp/ccBvFgp2.s 			page 302


 11012              		.loc 1 123 11 is_stmt 1 view .LVU3767
 11013              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11014              		.loc 1 123 21 is_stmt 0 view .LVU3768
 11015 3feb 48C1EF06 		shr	rdi, 6	# tmp381,
 11016              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11017              		.loc 1 123 12 view .LVU3769
 11018 3fef 488B34FB 		mov	rsi, QWORD PTR [rbx+rdi*8]	# *_181, *_181
 11019              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11020              		.loc 1 123 11 view .LVU3770
 11021 3ff3 4C0FA3DE 		bt	rsi, r11	# *_181, prime
 11022 3ff7 0F83A300 		jnc	.L877	#,
 11022      0000
 123:sieve_extend.c ****     return index;
 11023              		.loc 1 123 58 is_stmt 1 view .LVU3771
 11024              	.LVL607:
 11025              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11026              		.loc 1 123 63 is_stmt 0 view .LVU3772
 11027 3ffd 4883C101 		add	rcx, 1	# prime,
 11028              	.LVL608:
 123:sieve_extend.c ****     return index;
 11029              		.loc 1 123 11 is_stmt 1 view .LVU3773
 11030              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11031              		.loc 1 123 21 is_stmt 0 view .LVU3774
 11032 4001 4989CC   		mov	r12, rcx	# tmp515, prime
 11033 4004 49C1EC06 		shr	r12, 6	# tmp515,
 11034              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11035              		.loc 1 123 12 view .LVU3775
 11036 4008 4E8B0CE3 		mov	r9, QWORD PTR [rbx+r12*8]	# *_181, *_181
 11037              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11038              		.loc 1 123 11 view .LVU3776
 11039 400c 490FA3C9 		bt	r9, rcx	# *_181, prime
 11040 4010 0F838A00 		jnc	.L877	#,
 11040      0000
 123:sieve_extend.c ****     return index;
 11041              		.loc 1 123 58 is_stmt 1 view .LVU3777
 11042              	.LVL609:
 11043              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11044              		.loc 1 123 63 is_stmt 0 view .LVU3778
 11045 4016 498D4B02 		lea	rcx, 2[r11]	# prime,
 11046              	.LVL610:
 123:sieve_extend.c ****     return index;
 11047              		.loc 1 123 11 is_stmt 1 view .LVU3779
 11048              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11049              		.loc 1 123 21 is_stmt 0 view .LVU3780
 11050 401a 4989CE   		mov	r14, rcx	# tmp519, prime
 11051 401d 49C1EE06 		shr	r14, 6	# tmp519,
 11052              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
GAS LISTING /tmp/ccBvFgp2.s 			page 303


 11053              		.loc 1 123 12 view .LVU3781
 11054 4021 4A8B04F3 		mov	rax, QWORD PTR [rbx+r14*8]	# *_181, *_181
 11055              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11056              		.loc 1 123 11 view .LVU3782
 11057 4025 480FA3C8 		bt	rax, rcx	# *_181, prime
 11058 4029 7375     		jnc	.L877	#,
 123:sieve_extend.c ****     return index;
 11059              		.loc 1 123 58 is_stmt 1 view .LVU3783
 11060              	.LVL611:
 11061              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11062              		.loc 1 123 63 is_stmt 0 view .LVU3784
 11063 402b 498D4B03 		lea	rcx, 3[r11]	# prime,
 11064              	.LVL612:
 123:sieve_extend.c ****     return index;
 11065              		.loc 1 123 11 is_stmt 1 view .LVU3785
 11066              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11067              		.loc 1 123 21 is_stmt 0 view .LVU3786
 11068 402f 4889CA   		mov	rdx, rcx	# tmp523, prime
 11069 4032 48C1EA06 		shr	rdx, 6	# tmp523,
 11070              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11071              		.loc 1 123 12 view .LVU3787
 11072 4036 4C8B04D3 		mov	r8, QWORD PTR [rbx+rdx*8]	# *_181, *_181
 11073              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11074              		.loc 1 123 11 view .LVU3788
 11075 403a 490FA3C8 		bt	r8, rcx	# *_181, prime
 11076 403e 7360     		jnc	.L877	#,
 123:sieve_extend.c ****     return index;
 11077              		.loc 1 123 58 is_stmt 1 view .LVU3789
 11078              	.LVL613:
 11079              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11080              		.loc 1 123 63 is_stmt 0 view .LVU3790
 11081 4040 498D4B04 		lea	rcx, 4[r11]	# prime,
 11082              	.LVL614:
 123:sieve_extend.c ****     return index;
 11083              		.loc 1 123 11 is_stmt 1 view .LVU3791
 11084              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11085              		.loc 1 123 21 is_stmt 0 view .LVU3792
 11086 4044 4989CA   		mov	r10, rcx	# tmp527, prime
 11087 4047 49C1EA06 		shr	r10, 6	# tmp527,
 11088              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11089              		.loc 1 123 12 view .LVU3793
 11090 404b 4A8B3CD3 		mov	rdi, QWORD PTR [rbx+r10*8]	# *_181, *_181
 11091              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11092              		.loc 1 123 11 view .LVU3794
 11093 404f 480FA3CF 		bt	rdi, rcx	# *_181, prime
 11094 4053 734B     		jnc	.L877	#,
 123:sieve_extend.c ****     return index;
 11095              		.loc 1 123 58 is_stmt 1 view .LVU3795
GAS LISTING /tmp/ccBvFgp2.s 			page 304


 11096              	.LVL615:
 11097              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11098              		.loc 1 123 63 is_stmt 0 view .LVU3796
 11099 4055 498D4B05 		lea	rcx, 5[r11]	# prime,
 11100              	.LVL616:
 123:sieve_extend.c ****     return index;
 11101              		.loc 1 123 11 is_stmt 1 view .LVU3797
 11102              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11103              		.loc 1 123 21 is_stmt 0 view .LVU3798
 11104 4059 4889CE   		mov	rsi, rcx	# tmp531, prime
 11105 405c 48C1EE06 		shr	rsi, 6	# tmp531,
 11106              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11107              		.loc 1 123 12 view .LVU3799
 11108 4060 4C8B24F3 		mov	r12, QWORD PTR [rbx+rsi*8]	# *_181, *_181
 11109              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11110              		.loc 1 123 11 view .LVU3800
 11111 4064 490FA3CC 		bt	r12, rcx	# *_181, prime
 11112 4068 7336     		jnc	.L877	#,
 123:sieve_extend.c ****     return index;
 11113              		.loc 1 123 58 is_stmt 1 view .LVU3801
 11114              	.LVL617:
 11115              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11116              		.loc 1 123 63 is_stmt 0 view .LVU3802
 11117 406a 498D4B06 		lea	rcx, 6[r11]	# prime,
 11118              	.LVL618:
 123:sieve_extend.c ****     return index;
 11119              		.loc 1 123 11 is_stmt 1 view .LVU3803
 11120              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11121              		.loc 1 123 21 is_stmt 0 view .LVU3804
 11122 406e 4989C9   		mov	r9, rcx	# tmp535, prime
 11123 4071 49C1E906 		shr	r9, 6	# tmp535,
 11124              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11125              		.loc 1 123 12 view .LVU3805
 11126 4075 4E8B34CB 		mov	r14, QWORD PTR [rbx+r9*8]	# *_181, *_181
 11127              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11128              		.loc 1 123 11 view .LVU3806
 11129 4079 490FA3CE 		bt	r14, rcx	# *_181, prime
 11130 407d 7321     		jnc	.L877	#,
 123:sieve_extend.c ****     return index;
 11131              		.loc 1 123 58 is_stmt 1 view .LVU3807
 11132              	.LVL619:
 11133              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11134              		.loc 1 123 63 is_stmt 0 view .LVU3808
 11135 407f 498D4B07 		lea	rcx, 7[r11]	# prime,
 11136              	.LVL620:
 123:sieve_extend.c ****     return index;
 11137              		.loc 1 123 11 is_stmt 1 view .LVU3809
 11138              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
GAS LISTING /tmp/ccBvFgp2.s 			page 305


 123:sieve_extend.c ****     return index;
 11139              		.loc 1 123 21 is_stmt 0 view .LVU3810
 11140 4083 4989CB   		mov	r11, rcx	# tmp539, prime
 11141 4086 49C1EB06 		shr	r11, 6	# tmp539,
 11142              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11143              		.loc 1 123 12 view .LVU3811
 11144 408a 4A8B04DB 		mov	rax, QWORD PTR [rbx+r11*8]	# *_181, *_181
 11145              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 11146              		.loc 1 123 11 view .LVU3812
 11147 408e 480FA3C8 		bt	rax, rcx	# *_181, prime
 11148 4092 0F8249FF 		jc	.L878	#,
 11148      FFFF
 11149              	.LVL621:
 11150 4098 0F1F8400 		.p2align 4
 11150      00000000 
 11151              		.p2align 3
 11152              	.L877:
 124:sieve_extend.c **** }
 11153              		.loc 1 124 5 is_stmt 1 view .LVU3813
 124:sieve_extend.c **** }
 11154              		.loc 1 124 5 is_stmt 0 view .LVU3814
 11155              	.LBE546:
 11156              	.LBE547:
 983:sieve_extend.c ****     }
 11157              		.loc 1 983 9 is_stmt 1 view .LVU3815
 11158              	# sieve_extend.c:983:         start = prime * prime * 2 + prime * 2;
 983:sieve_extend.c ****     }
 11159              		.loc 1 983 35 is_stmt 0 view .LVU3816
 11160 40a0 488D7101 		lea	rsi, 1[rcx]	# _216,
 11161              	# sieve_extend.c:983:         start = prime * prime * 2 + prime * 2;
 983:sieve_extend.c ****     }
 11162              		.loc 1 983 15 view .LVU3817
 11163 40a4 480FAFF1 		imul	rsi, rcx	# tmp387, prime
 11164              	.LVL622:
 983:sieve_extend.c ****     }
 11165              		.loc 1 983 15 view .LVU3818
 11166 40a8 4801F6   		add	rsi, rsi	# index
 11167              	.LVL623:
 977:sieve_extend.c ****         step  = prime * 2 + 1;
 11168              		.loc 1 977 11 is_stmt 1 view .LVU3819
 11169 40ab 4839F5   		cmp	rbp, rsi	# block_stop, index
 11170 40ae 0F83DCFE 		jnb	.L870	#,
 11170      FFFF
 11171              	.LVL624:
 11172              	.L1076:
 977:sieve_extend.c ****         step  = prime * 2 + 1;
 11173              		.loc 1 977 11 is_stmt 0 view .LVU3820
 11174 40b4 488B5C24 		mov	rbx, QWORD PTR 48[rsp]	# <retval>, %sfp
 11174      30
 11175              	.LVL625:
 977:sieve_extend.c ****         step  = prime * 2 + 1;
 11176              		.loc 1 977 11 view .LVU3821
 11177 40b9 488B5308 		mov	rdx, QWORD PTR 8[rbx]	# _8, sieve_91->bits
 11178              	.L875:
 11179              	.LVL626:
GAS LISTING /tmp/ccBvFgp2.s 			page 306


 977:sieve_extend.c ****         step  = prime * 2 + 1;
 11180              		.loc 1 977 11 view .LVU3822
 11181              	.LBE565:
 11182              	.LBE575:
1066:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 11183              		.loc 1 1066 91 is_stmt 1 view .LVU3823
 11184              	# sieve_extend.c:1066:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <=
1066:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 11185              		.loc 1 1066 103 is_stmt 0 view .LVU3824
 11186 40bd 4C8B4C24 		mov	r9, QWORD PTR 64[rsp]	# blocksize, %sfp
 11186      40
 11187 40c2 4D01CF   		add	r15, r9	# block_start, blocksize
 11188              	.LVL627:
 11189              	# sieve_extend.c:1066:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <=
1066:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 11190              		.loc 1 1066 128 view .LVU3825
 11191 40c5 4C01CD   		add	rbp, r9	# block_stop, blocksize
 11192              	.LVL628:
1066:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 11193              		.loc 1 1066 63 is_stmt 1 view .LVU3826
 11194              	# sieve_extend.c:1066:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <=
1066:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 11195              		.loc 1 1066 5 is_stmt 0 view .LVU3827
 11196 40c8 4C39FA   		cmp	rdx, r15	# _8, block_start
 11197 40cb 0F834FFD 		jnb	.L871	#,
 11197      FFFF
 11198              	.LBE579:
 11199              	# sieve_extend.c:1073: }
1073:sieve_extend.c **** 
 11200              		.loc 1 1073 1 view .LVU3828
 11201 40d1 488B4424 		mov	rax, QWORD PTR 48[rsp]	#, %sfp
 11201      30
 11202 40d6 488D6424 		lea	rsp, 88[rsp]	#,
 11202      58
 11203              		.cfi_remember_state
 11204              		.cfi_def_cfa_offset 56
 11205 40db 5B       		pop	rbx	#
 11206              		.cfi_def_cfa_offset 48
 11207 40dc 5D       		pop	rbp	#
 11208              		.cfi_def_cfa_offset 40
 11209              	.LVL629:
1073:sieve_extend.c **** 
 11210              		.loc 1 1073 1 view .LVU3829
 11211 40dd 415C     		pop	r12	#
 11212              		.cfi_def_cfa_offset 32
 11213 40df 415D     		pop	r13	#
 11214              		.cfi_def_cfa_offset 24
 11215 40e1 415E     		pop	r14	#
 11216              		.cfi_def_cfa_offset 16
 11217 40e3 415F     		pop	r15	#
 11218              		.cfi_def_cfa_offset 8
 11219              	.LVL630:
1073:sieve_extend.c **** 
 11220              		.loc 1 1073 1 view .LVU3830
 11221 40e5 C3       		ret	
 11222              	.LVL631:
 11223              		.p2align 4,,7
GAS LISTING /tmp/ccBvFgp2.s 			page 307


 11224 40e6 6690     		.p2align 3
 11225              	.L1088:
 11226              		.cfi_restore_state
 11227              	.LBB580:
 11228              	.LBB576:
 11229              	.LBB566:
 986:sieve_extend.c ****         step  = prime * 2 + 1;
 11230              		.loc 1 986 11 is_stmt 1 view .LVU3831
 11231 40e8 4839F5   		cmp	rbp, rsi	# block_stop, index
 11232 40eb 72C7     		jb	.L1076	#,
 11233              	.LBB548:
 11234              	.LBB541:
 11235              	.LBB538:
 11236              	.LBB528:
 11237              	.LBB529:
 11238              	# sieve_extend.c:175:    const counter_t range_stop_word = wordindex(range_stop);
 175:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 11239              		.loc 1 175 20 is_stmt 0 view .LVU3832
 11240 40ed 4889EA   		mov	rdx, rbp	# range_stop_word, block_stop
 11241              	# sieve_extend.c:201:       *index_ptr |= (mask & chopmask(range_stop));
 201:sieve_extend.c ****    }
 11242              		.loc 1 201 29 view .LVU3833
 11243 40f0 4189E8   		mov	r8d, ebp	# tmp389, block_stop
 11244              	# sieve_extend.c:175:    const counter_t range_stop_word = wordindex(range_stop);
 175:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 11245              		.loc 1 175 20 view .LVU3834
 11246 40f3 48C1EA06 		shr	rdx, 6	# range_stop_word,
 11247              	# sieve_extend.c:201:       *index_ptr |= (mask & chopmask(range_stop));
 201:sieve_extend.c ****    }
 11248              		.loc 1 201 29 view .LVU3835
 11249 40f7 41F7D0   		not	r8d	# tmp389
 11250 40fa 49C7C2FF 		mov	r10, -1	# tmp788,
 11250      FFFFFF
 11251              	# sieve_extend.c:194:    const register bitword_t* __restrict range_stop_ptr = &bitarray[(range_sto
 194:sieve_extend.c ****    while likely(index_ptr < range_stop_ptr) {
 11252              		.loc 1 194 41 view .LVU3836
 11253 4101 4C8D0CD3 		lea	r9, [rbx+rdx*8]	# range_stop_ptr,
 11254              	.LVL632:
 11255              	# sieve_extend.c:175:    const counter_t range_stop_word = wordindex(range_stop);
 175:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 11256              		.loc 1 175 20 view .LVU3837
 11257 4105 48895424 		mov	QWORD PTR 24[rsp], rdx	# %sfp, range_stop_word
 11257      18
 11258              	# sieve_extend.c:201:       *index_ptr |= (mask & chopmask(range_stop));
 201:sieve_extend.c ****    }
 11259              		.loc 1 201 29 view .LVU3838
 11260 410a C4C2BBF7 		shrx	rdi, r10, r8	# _325, tmp788, tmp389
 11260      FA
 11261 410f 48897C24 		mov	QWORD PTR 16[rsp], rdi	# %sfp, _325
 11261      10
 11262 4114 4C8D5901 		lea	r11, 1[rcx]	# _216,
 11263              	.LVL633:
 11264 4118 0F1F8400 		.p2align 4
 11264      00000000 
 11265              		.p2align 3
 11266              	.L893:
 201:sieve_extend.c ****    }
GAS LISTING /tmp/ccBvFgp2.s 			page 308


 11267              		.loc 1 201 29 view .LVU3839
 11268              	.LBE529:
 11269              	.LBE528:
 11270              	.LBE538:
 11271              	.LBE541:
 11272              	.LBE548:
 987:sieve_extend.c ****         if likely(block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start +
 11273              		.loc 1 987 9 is_stmt 1 view .LVU3840
 11274              	# sieve_extend.c:988:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 988:sieve_extend.c ****         if unlikely(start + step * WORD_SIZE_counter > block_stop) break;
 11275              		.loc 1 988 12 is_stmt 0 view .LVU3841
 11276 4120 4D39FB   		cmp	r11, r15	# _216, block_start
 11277              	# sieve_extend.c:987:         step  = prime * 2 + 1;
 987:sieve_extend.c ****         if likely(block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start +
 11278              		.loc 1 987 15 view .LVU3842
 11279 4123 4C8D5409 		lea	r10, 1[rcx+rcx]	# step,
 11279      01
 11280              	.LVL634:
 988:sieve_extend.c ****         if unlikely(start + step * WORD_SIZE_counter > block_stop) break;
 11281              		.loc 1 988 9 is_stmt 1 view .LVU3843
 11282              	# sieve_extend.c:988:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 988:sieve_extend.c ****         if unlikely(start + step * WORD_SIZE_counter > block_stop) break;
 11283              		.loc 1 988 12 is_stmt 0 view .LVU3844
 11284 4128 7710     		ja	.L879	#,
 988:sieve_extend.c ****         if unlikely(start + step * WORD_SIZE_counter > block_stop) break;
 11285              		.loc 1 988 47 is_stmt 1 view .LVU3845
 11286              	# sieve_extend.c:988:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 988:sieve_extend.c ****         if unlikely(start + step * WORD_SIZE_counter > block_stop) break;
 11287              		.loc 1 988 67 is_stmt 0 view .LVU3846
 11288 412a 498D040F 		lea	rax, [r15+rcx]	# _198,
 11289              	# sieve_extend.c:988:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 988:sieve_extend.c ****         if unlikely(start + step * WORD_SIZE_counter > block_stop) break;
 11290              		.loc 1 988 108 view .LVU3847
 11291 412e 31D2     		xor	edx, edx	# tmp395
 11292              	# sieve_extend.c:988:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 988:sieve_extend.c ****         if unlikely(start + step * WORD_SIZE_counter > block_stop) break;
 11293              		.loc 1 988 75 view .LVU3848
 11294 4130 488D3408 		lea	rsi, [rax+rcx]	# tmp393,
 11295              	.LVL635:
 11296              	# sieve_extend.c:988:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 988:sieve_extend.c ****         if unlikely(start + step * WORD_SIZE_counter > block_stop) break;
 11297              		.loc 1 988 108 view .LVU3849
 11298 4134 49F7F2   		div	r10	# step
 11299              	.LVL636:
 11300              	# sieve_extend.c:988:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 988:sieve_extend.c ****         if unlikely(start + step * WORD_SIZE_counter > block_stop) break;
 11301              		.loc 1 988 53 view .LVU3850
 11302 4137 4829D6   		sub	rsi, rdx	# index, tmp395
 11303              	.LVL637:
 11304              	.L879:
 989:sieve_extend.c ****         setBitsTrue_largeRange(bitarray, start, step, block_stop);
 11305              		.loc 1 989 9 is_stmt 1 view .LVU3851
 11306              	# sieve_extend.c:989:         if unlikely(start + step * WORD_SIZE_counter > block_stop) break;
 989:sieve_extend.c ****         setBitsTrue_largeRange(bitarray, start, step, block_stop);
 11307              		.loc 1 989 12 is_stmt 0 view .LVU3852
 11308 413a 4D89D6   		mov	r14, r10	# tmp397, step
 11309 413d 49C1E606 		sal	r14, 6	# tmp397,
GAS LISTING /tmp/ccBvFgp2.s 			page 309


 11310 4141 4901F6   		add	r14, rsi	# _204, index
 11311 4144 4C39F5   		cmp	rbp, r14	# block_stop, _204
 11312 4147 0F828902 		jb	.L1077	#,
 11312      0000
 11313              	.LVL638:
 11314              	.LBB549:
 11315              	.LBB542:
 11316              	.LBB539:
 418:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 11317              		.loc 1 418 50 is_stmt 1 view .LVU3853
 11318              	# sieve_extend.c:418:     for (register counter_t index = range_start; index < range_stop_unique; i
 418:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 11319              		.loc 1 418 5 is_stmt 0 view .LVU3854
 11320 414d 4C39F6   		cmp	rsi, r14	# index, _204
 11321 4150 0F83CF01 		jnb	.L891	#,
 11321      0000
 11322              	.LBB534:
 11323              	.LBB530:
 11324              	# sieve_extend.c:177:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 177:sieve_extend.c **** 
 11325              		.loc 1 177 133 view .LVU3855
 11326 4156 488B4C24 		mov	rcx, QWORD PTR 24[rsp]	# range_stop_word, %sfp
 11326      18
 11327              	# sieve_extend.c:177:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 177:sieve_extend.c **** 
 11328              		.loc 1 177 110 view .LVU3856
 11329 415b 4F8D0492 		lea	r8, [r10+r10*4]	# tmp407,
 11330 415f 4C89D7   		mov	rdi, r10	# _729, step
 11331              	# sieve_extend.c:183:        index_ptr+=step;
 183:sieve_extend.c ****        *index_ptr |= mask;
 11332              		.loc 1 183 17 view .LVU3857
 11333 4162 4A8D14D5 		lea	rdx, 0[0+r10*8]	# _293,
 11333      00000000 
 11334              	# sieve_extend.c:177:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 177:sieve_extend.c **** 
 11335              		.loc 1 177 133 view .LVU3858
 11336 416a 4989CC   		mov	r12, rcx	# tmp409, range_stop_word
 11337 416d 4D29C4   		sub	r12, r8	# tmp409, tmp407
 11338              	# sieve_extend.c:177:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 177:sieve_extend.c **** 
 11339              		.loc 1 177 53 view .LVU3859
 11340 4170 4C39C1   		cmp	rcx, r8	# range_stop_word, tmp407
 11341 4173 4E8D24E3 		lea	r12, [rbx+r12*8]	# tmp411,
 11342 4177 4C0F46E3 		cmovbe	r12, rbx	# _30,, fast_loop_ptr
 11343 417b 48C1E704 		sal	rdi, 4	# _729,
 11344 417f 49C1E003 		sal	r8, 3	# tmp415,
 11345 4183 48897C24 		mov	QWORD PTR 8[rsp], rdi	# %sfp, _729
 11345      08
 11346 4188 0F1F8400 		.p2align 4
 11346      00000000 
 11347              		.p2align 3
 11348              	.L890:
 177:sieve_extend.c **** 
 11349              		.loc 1 177 53 view .LVU3860
 11350              	.LBE530:
 11351              	.LBE534:
 419:sieve_extend.c ****     }
GAS LISTING /tmp/ccBvFgp2.s 			page 310


 11352              		.loc 1 419 9 is_stmt 1 view .LVU3861
 11353 4190 4889F0   		mov	rax, rsi	# tmp418, index
 11354 4193 C4C2C9F7 		shlx	rcx, r13, rsi	# _278, tmp461, index
 11354      CD
 11355              	.LVL639:
 11356              	.LBB535:
 11357              	.LBI528:
 147:sieve_extend.c **** //#if __APPLE__
 11358              		.loc 1 147 20 view .LVU3862
 11359              	.LBB531:
 175:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 11360              		.loc 1 175 4 view .LVU3863
 176:sieve_extend.c ****    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_stop
 11361              		.loc 1 176 4 view .LVU3864
 11362              	.LBE531:
 11363              	.LBE535:
 11364              	# sieve_extend.c:419:         applyMask(bitarray, step, range_stop, markmask(index), wordindex(inde
 419:sieve_extend.c ****     }
 11365              		.loc 1 419 9 is_stmt 0 view .LVU3865
 11366 4198 48C1E806 		shr	rax, 6	# tmp418,
 11367              	.LBB536:
 11368              	.LBB532:
 11369              	# sieve_extend.c:176:    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(
 176:sieve_extend.c ****    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_stop
 11370              		.loc 1 176 78 view .LVU3866
 11371 419c 488D04C3 		lea	rax, [rbx+rax*8]	# index_ptr,
 11372              	.LVL640:
 177:sieve_extend.c **** 
 11373              		.loc 1 177 4 is_stmt 1 view .LVU3867
 181:sieve_extend.c ****        *index_ptr |= mask;
 11374              		.loc 1 181 4 view .LVU3868
 181:sieve_extend.c ****        *index_ptr |= mask;
 11375              		.loc 1 181 10 view .LVU3869
 11376 41a0 4C39E0   		cmp	rax, r12	# index_ptr, fast_loop_ptr
 11377 41a3 0F830701 		jnb	.L885	#,
 11377      0000
 181:sieve_extend.c ****        *index_ptr |= mask;
 11378              		.loc 1 181 10 is_stmt 0 view .LVU3870
 11379 41a9 488B7C24 		mov	rdi, QWORD PTR 8[rsp]	# _729, %sfp
 11379      08
 11380 41ae 4801C7   		add	rdi, rax	# ivtmp.528, index_ptr
 11381              	.L886:
 182:sieve_extend.c ****        index_ptr+=step;
 11382              		.loc 1 182 8 is_stmt 1 view .LVU3871
 11383              	# sieve_extend.c:182:        *index_ptr |= mask;
 182:sieve_extend.c ****        index_ptr+=step;
 11384              		.loc 1 182 19 is_stmt 0 view .LVU3872
 11385 41b1 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_445, offset: 0B], _278
 183:sieve_extend.c ****        *index_ptr |= mask;
 11386              		.loc 1 183 8 is_stmt 1 view .LVU3873
 11387              	.LVL641:
 184:sieve_extend.c ****        index_ptr+=step;
 11388              		.loc 1 184 8 view .LVU3874
 11389              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 11390              		.loc 1 184 19 is_stmt 0 view .LVU3875
 11391 41b4 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_445, index: _293, offset: 0B], _278
GAS LISTING /tmp/ccBvFgp2.s 			page 311


 185:sieve_extend.c ****        *index_ptr |= mask;
 11392              		.loc 1 185 8 is_stmt 1 view .LVU3876
 11393              	.LVL642:
 186:sieve_extend.c ****        index_ptr+=step;
 11394              		.loc 1 186 8 view .LVU3877
 11395              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 11396              		.loc 1 186 19 is_stmt 0 view .LVU3878
 11397 41b8 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _723, offset: 0B], _278
 187:sieve_extend.c ****        *index_ptr |= mask;
 11398              		.loc 1 187 8 is_stmt 1 view .LVU3879
 11399              	.LVL643:
 188:sieve_extend.c ****        index_ptr+=step;
 11400              		.loc 1 188 8 view .LVU3880
 11401              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 11402              		.loc 1 188 19 is_stmt 0 view .LVU3881
 11403 41bb 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _723, index: _293, offset: 0B], _278
 189:sieve_extend.c ****        *index_ptr |= mask;
 11404              		.loc 1 189 8 is_stmt 1 view .LVU3882
 11405              	.LVL644:
 190:sieve_extend.c ****        index_ptr+=step;
 11406              		.loc 1 190 8 view .LVU3883
 11407 41bf 4C01C7   		add	rdi, r8	# ivtmp.528, tmp415
 11408              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 11409              		.loc 1 190 19 is_stmt 0 view .LVU3884
 11410 41c2 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_445, index: _293, step: 4, offset: 0B], _278
 191:sieve_extend.c ****    }
 11411              		.loc 1 191 8 is_stmt 1 view .LVU3885
 11412 41c6 4C01C0   		add	rax, r8	# index_ptr, tmp415
 11413              	.LVL645:
 181:sieve_extend.c ****        *index_ptr |= mask;
 11414              		.loc 1 181 10 view .LVU3886
 11415 41c9 4939C4   		cmp	r12, rax	# fast_loop_ptr, index_ptr
 11416 41cc 0F86DE00 		jbe	.L885	#,
 11416      0000
 182:sieve_extend.c ****        index_ptr+=step;
 11417              		.loc 1 182 8 view .LVU3887
 11418              	# sieve_extend.c:182:        *index_ptr |= mask;
 182:sieve_extend.c ****        index_ptr+=step;
 11419              		.loc 1 182 19 is_stmt 0 view .LVU3888
 11420 41d2 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_445, offset: 0B], _278
 183:sieve_extend.c ****        *index_ptr |= mask;
 11421              		.loc 1 183 8 is_stmt 1 view .LVU3889
 11422              	.LVL646:
 184:sieve_extend.c ****        index_ptr+=step;
 11423              		.loc 1 184 8 view .LVU3890
 11424              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 11425              		.loc 1 184 19 is_stmt 0 view .LVU3891
 11426 41d5 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_445, index: _293, offset: 0B], _278
 185:sieve_extend.c ****        *index_ptr |= mask;
 11427              		.loc 1 185 8 is_stmt 1 view .LVU3892
 11428              	.LVL647:
 186:sieve_extend.c ****        index_ptr+=step;
 11429              		.loc 1 186 8 view .LVU3893
GAS LISTING /tmp/ccBvFgp2.s 			page 312


 11430              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 11431              		.loc 1 186 19 is_stmt 0 view .LVU3894
 11432 41d9 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _723, offset: 0B], _278
 187:sieve_extend.c ****        *index_ptr |= mask;
 11433              		.loc 1 187 8 is_stmt 1 view .LVU3895
 11434              	.LVL648:
 188:sieve_extend.c ****        index_ptr+=step;
 11435              		.loc 1 188 8 view .LVU3896
 11436              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 11437              		.loc 1 188 19 is_stmt 0 view .LVU3897
 11438 41dc 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _723, index: _293, offset: 0B], _278
 189:sieve_extend.c ****        *index_ptr |= mask;
 11439              		.loc 1 189 8 is_stmt 1 view .LVU3898
 11440              	.LVL649:
 190:sieve_extend.c ****        index_ptr+=step;
 11441              		.loc 1 190 8 view .LVU3899
 11442 41e0 4C01C7   		add	rdi, r8	# ivtmp.528, tmp415
 11443              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 11444              		.loc 1 190 19 is_stmt 0 view .LVU3900
 11445 41e3 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_445, index: _293, step: 4, offset: 0B], _278
 191:sieve_extend.c ****    }
 11446              		.loc 1 191 8 is_stmt 1 view .LVU3901
 11447 41e7 4C01C0   		add	rax, r8	# index_ptr, tmp415
 11448              	.LVL650:
 181:sieve_extend.c ****        *index_ptr |= mask;
 11449              		.loc 1 181 10 view .LVU3902
 11450 41ea 4939C4   		cmp	r12, rax	# fast_loop_ptr, index_ptr
 11451 41ed 0F86BD00 		jbe	.L885	#,
 11451      0000
 182:sieve_extend.c ****        index_ptr+=step;
 11452              		.loc 1 182 8 view .LVU3903
 11453              	# sieve_extend.c:182:        *index_ptr |= mask;
 182:sieve_extend.c ****        index_ptr+=step;
 11454              		.loc 1 182 19 is_stmt 0 view .LVU3904
 11455 41f3 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_445, offset: 0B], _278
 183:sieve_extend.c ****        *index_ptr |= mask;
 11456              		.loc 1 183 8 is_stmt 1 view .LVU3905
 11457              	.LVL651:
 184:sieve_extend.c ****        index_ptr+=step;
 11458              		.loc 1 184 8 view .LVU3906
 11459              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 11460              		.loc 1 184 19 is_stmt 0 view .LVU3907
 11461 41f6 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_445, index: _293, offset: 0B], _278
 185:sieve_extend.c ****        *index_ptr |= mask;
 11462              		.loc 1 185 8 is_stmt 1 view .LVU3908
 11463              	.LVL652:
 186:sieve_extend.c ****        index_ptr+=step;
 11464              		.loc 1 186 8 view .LVU3909
 11465              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 11466              		.loc 1 186 19 is_stmt 0 view .LVU3910
 11467 41fa 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _723, offset: 0B], _278
 187:sieve_extend.c ****        *index_ptr |= mask;
GAS LISTING /tmp/ccBvFgp2.s 			page 313


 11468              		.loc 1 187 8 is_stmt 1 view .LVU3911
 11469              	.LVL653:
 188:sieve_extend.c ****        index_ptr+=step;
 11470              		.loc 1 188 8 view .LVU3912
 11471              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 11472              		.loc 1 188 19 is_stmt 0 view .LVU3913
 11473 41fd 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _723, index: _293, offset: 0B], _278
 189:sieve_extend.c ****        *index_ptr |= mask;
 11474              		.loc 1 189 8 is_stmt 1 view .LVU3914
 11475              	.LVL654:
 190:sieve_extend.c ****        index_ptr+=step;
 11476              		.loc 1 190 8 view .LVU3915
 11477 4201 4C01C7   		add	rdi, r8	# ivtmp.528, tmp415
 11478              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 11479              		.loc 1 190 19 is_stmt 0 view .LVU3916
 11480 4204 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_445, index: _293, step: 4, offset: 0B], _278
 191:sieve_extend.c ****    }
 11481              		.loc 1 191 8 is_stmt 1 view .LVU3917
 11482 4208 4C01C0   		add	rax, r8	# index_ptr, tmp415
 11483              	.LVL655:
 181:sieve_extend.c ****        *index_ptr |= mask;
 11484              		.loc 1 181 10 view .LVU3918
 11485 420b 4939C4   		cmp	r12, rax	# fast_loop_ptr, index_ptr
 11486 420e 0F869C00 		jbe	.L885	#,
 11486      0000
 182:sieve_extend.c ****        index_ptr+=step;
 11487              		.loc 1 182 8 view .LVU3919
 11488              	# sieve_extend.c:182:        *index_ptr |= mask;
 182:sieve_extend.c ****        index_ptr+=step;
 11489              		.loc 1 182 19 is_stmt 0 view .LVU3920
 11490 4214 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_445, offset: 0B], _278
 183:sieve_extend.c ****        *index_ptr |= mask;
 11491              		.loc 1 183 8 is_stmt 1 view .LVU3921
 11492              	.LVL656:
 184:sieve_extend.c ****        index_ptr+=step;
 11493              		.loc 1 184 8 view .LVU3922
 11494              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 11495              		.loc 1 184 19 is_stmt 0 view .LVU3923
 11496 4217 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_445, index: _293, offset: 0B], _278
 185:sieve_extend.c ****        *index_ptr |= mask;
 11497              		.loc 1 185 8 is_stmt 1 view .LVU3924
 11498              	.LVL657:
 186:sieve_extend.c ****        index_ptr+=step;
 11499              		.loc 1 186 8 view .LVU3925
 11500              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 11501              		.loc 1 186 19 is_stmt 0 view .LVU3926
 11502 421b 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _723, offset: 0B], _278
 187:sieve_extend.c ****        *index_ptr |= mask;
 11503              		.loc 1 187 8 is_stmt 1 view .LVU3927
 11504              	.LVL658:
 188:sieve_extend.c ****        index_ptr+=step;
 11505              		.loc 1 188 8 view .LVU3928
 11506              	# sieve_extend.c:188:        *index_ptr |= mask;
GAS LISTING /tmp/ccBvFgp2.s 			page 314


 188:sieve_extend.c ****        index_ptr+=step;
 11507              		.loc 1 188 19 is_stmt 0 view .LVU3929
 11508 421e 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _723, index: _293, offset: 0B], _278
 189:sieve_extend.c ****        *index_ptr |= mask;
 11509              		.loc 1 189 8 is_stmt 1 view .LVU3930
 11510              	.LVL659:
 190:sieve_extend.c ****        index_ptr+=step;
 11511              		.loc 1 190 8 view .LVU3931
 11512 4222 4C01C7   		add	rdi, r8	# ivtmp.528, tmp415
 11513              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 11514              		.loc 1 190 19 is_stmt 0 view .LVU3932
 11515 4225 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_445, index: _293, step: 4, offset: 0B], _278
 191:sieve_extend.c ****    }
 11516              		.loc 1 191 8 is_stmt 1 view .LVU3933
 11517 4229 4C01C0   		add	rax, r8	# index_ptr, tmp415
 11518              	.LVL660:
 181:sieve_extend.c ****        *index_ptr |= mask;
 11519              		.loc 1 181 10 view .LVU3934
 11520 422c 4939C4   		cmp	r12, rax	# fast_loop_ptr, index_ptr
 11521 422f 767F     		jbe	.L885	#,
 182:sieve_extend.c ****        index_ptr+=step;
 11522              		.loc 1 182 8 view .LVU3935
 11523              	# sieve_extend.c:182:        *index_ptr |= mask;
 182:sieve_extend.c ****        index_ptr+=step;
 11524              		.loc 1 182 19 is_stmt 0 view .LVU3936
 11525 4231 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_445, offset: 0B], _278
 183:sieve_extend.c ****        *index_ptr |= mask;
 11526              		.loc 1 183 8 is_stmt 1 view .LVU3937
 11527              	.LVL661:
 184:sieve_extend.c ****        index_ptr+=step;
 11528              		.loc 1 184 8 view .LVU3938
 11529              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 11530              		.loc 1 184 19 is_stmt 0 view .LVU3939
 11531 4234 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_445, index: _293, offset: 0B], _278
 185:sieve_extend.c ****        *index_ptr |= mask;
 11532              		.loc 1 185 8 is_stmt 1 view .LVU3940
 11533              	.LVL662:
 186:sieve_extend.c ****        index_ptr+=step;
 11534              		.loc 1 186 8 view .LVU3941
 11535              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 11536              		.loc 1 186 19 is_stmt 0 view .LVU3942
 11537 4238 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _723, offset: 0B], _278
 187:sieve_extend.c ****        *index_ptr |= mask;
 11538              		.loc 1 187 8 is_stmt 1 view .LVU3943
 11539              	.LVL663:
 188:sieve_extend.c ****        index_ptr+=step;
 11540              		.loc 1 188 8 view .LVU3944
 11541              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 11542              		.loc 1 188 19 is_stmt 0 view .LVU3945
 11543 423b 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _723, index: _293, offset: 0B], _278
 189:sieve_extend.c ****        *index_ptr |= mask;
 11544              		.loc 1 189 8 is_stmt 1 view .LVU3946
 11545              	.LVL664:
GAS LISTING /tmp/ccBvFgp2.s 			page 315


 190:sieve_extend.c ****        index_ptr+=step;
 11546              		.loc 1 190 8 view .LVU3947
 11547 423f 4C01C7   		add	rdi, r8	# ivtmp.528, tmp415
 11548              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 11549              		.loc 1 190 19 is_stmt 0 view .LVU3948
 11550 4242 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_445, index: _293, step: 4, offset: 0B], _278
 191:sieve_extend.c ****    }
 11551              		.loc 1 191 8 is_stmt 1 view .LVU3949
 11552 4246 4C01C0   		add	rax, r8	# index_ptr, tmp415
 11553              	.LVL665:
 181:sieve_extend.c ****        *index_ptr |= mask;
 11554              		.loc 1 181 10 view .LVU3950
 11555 4249 4939C4   		cmp	r12, rax	# fast_loop_ptr, index_ptr
 11556 424c 7662     		jbe	.L885	#,
 182:sieve_extend.c ****        index_ptr+=step;
 11557              		.loc 1 182 8 view .LVU3951
 11558              	# sieve_extend.c:182:        *index_ptr |= mask;
 182:sieve_extend.c ****        index_ptr+=step;
 11559              		.loc 1 182 19 is_stmt 0 view .LVU3952
 11560 424e 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_445, offset: 0B], _278
 183:sieve_extend.c ****        *index_ptr |= mask;
 11561              		.loc 1 183 8 is_stmt 1 view .LVU3953
 11562              	.LVL666:
 184:sieve_extend.c ****        index_ptr+=step;
 11563              		.loc 1 184 8 view .LVU3954
 11564              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 11565              		.loc 1 184 19 is_stmt 0 view .LVU3955
 11566 4251 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_445, index: _293, offset: 0B], _278
 185:sieve_extend.c ****        *index_ptr |= mask;
 11567              		.loc 1 185 8 is_stmt 1 view .LVU3956
 11568              	.LVL667:
 186:sieve_extend.c ****        index_ptr+=step;
 11569              		.loc 1 186 8 view .LVU3957
 11570              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 11571              		.loc 1 186 19 is_stmt 0 view .LVU3958
 11572 4255 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _723, offset: 0B], _278
 187:sieve_extend.c ****        *index_ptr |= mask;
 11573              		.loc 1 187 8 is_stmt 1 view .LVU3959
 11574              	.LVL668:
 188:sieve_extend.c ****        index_ptr+=step;
 11575              		.loc 1 188 8 view .LVU3960
 11576              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 11577              		.loc 1 188 19 is_stmt 0 view .LVU3961
 11578 4258 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _723, index: _293, offset: 0B], _278
 189:sieve_extend.c ****        *index_ptr |= mask;
 11579              		.loc 1 189 8 is_stmt 1 view .LVU3962
 11580              	.LVL669:
 190:sieve_extend.c ****        index_ptr+=step;
 11581              		.loc 1 190 8 view .LVU3963
 11582 425c 4C01C7   		add	rdi, r8	# ivtmp.528, tmp415
 11583              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 11584              		.loc 1 190 19 is_stmt 0 view .LVU3964
GAS LISTING /tmp/ccBvFgp2.s 			page 316


 11585 425f 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_445, index: _293, step: 4, offset: 0B], _278
 191:sieve_extend.c ****    }
 11586              		.loc 1 191 8 is_stmt 1 view .LVU3965
 11587 4263 4C01C0   		add	rax, r8	# index_ptr, tmp415
 11588              	.LVL670:
 181:sieve_extend.c ****        *index_ptr |= mask;
 11589              		.loc 1 181 10 view .LVU3966
 11590 4266 4939C4   		cmp	r12, rax	# fast_loop_ptr, index_ptr
 11591 4269 7645     		jbe	.L885	#,
 182:sieve_extend.c ****        index_ptr+=step;
 11592              		.loc 1 182 8 view .LVU3967
 11593              	# sieve_extend.c:182:        *index_ptr |= mask;
 182:sieve_extend.c ****        index_ptr+=step;
 11594              		.loc 1 182 19 is_stmt 0 view .LVU3968
 11595 426b 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_445, offset: 0B], _278
 183:sieve_extend.c ****        *index_ptr |= mask;
 11596              		.loc 1 183 8 is_stmt 1 view .LVU3969
 11597              	.LVL671:
 184:sieve_extend.c ****        index_ptr+=step;
 11598              		.loc 1 184 8 view .LVU3970
 11599              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 11600              		.loc 1 184 19 is_stmt 0 view .LVU3971
 11601 426e 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_445, index: _293, offset: 0B], _278
 185:sieve_extend.c ****        *index_ptr |= mask;
 11602              		.loc 1 185 8 is_stmt 1 view .LVU3972
 11603              	.LVL672:
 186:sieve_extend.c ****        index_ptr+=step;
 11604              		.loc 1 186 8 view .LVU3973
 11605              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 11606              		.loc 1 186 19 is_stmt 0 view .LVU3974
 11607 4272 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _723, offset: 0B], _278
 187:sieve_extend.c ****        *index_ptr |= mask;
 11608              		.loc 1 187 8 is_stmt 1 view .LVU3975
 11609              	.LVL673:
 188:sieve_extend.c ****        index_ptr+=step;
 11610              		.loc 1 188 8 view .LVU3976
 11611              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 11612              		.loc 1 188 19 is_stmt 0 view .LVU3977
 11613 4275 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _723, index: _293, offset: 0B], _278
 189:sieve_extend.c ****        *index_ptr |= mask;
 11614              		.loc 1 189 8 is_stmt 1 view .LVU3978
 11615              	.LVL674:
 190:sieve_extend.c ****        index_ptr+=step;
 11616              		.loc 1 190 8 view .LVU3979
 11617 4279 4C01C7   		add	rdi, r8	# ivtmp.528, tmp415
 11618              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 11619              		.loc 1 190 19 is_stmt 0 view .LVU3980
 11620 427c 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_445, index: _293, step: 4, offset: 0B], _278
 191:sieve_extend.c ****    }
 11621              		.loc 1 191 8 is_stmt 1 view .LVU3981
 11622 4280 4C01C0   		add	rax, r8	# index_ptr, tmp415
 11623              	.LVL675:
 181:sieve_extend.c ****        *index_ptr |= mask;
GAS LISTING /tmp/ccBvFgp2.s 			page 317


 11624              		.loc 1 181 10 view .LVU3982
 11625 4283 4939C4   		cmp	r12, rax	# fast_loop_ptr, index_ptr
 11626 4286 7628     		jbe	.L885	#,
 182:sieve_extend.c ****        index_ptr+=step;
 11627              		.loc 1 182 8 view .LVU3983
 11628              	# sieve_extend.c:182:        *index_ptr |= mask;
 182:sieve_extend.c ****        index_ptr+=step;
 11629              		.loc 1 182 19 is_stmt 0 view .LVU3984
 11630 4288 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_445, offset: 0B], _278
 183:sieve_extend.c ****        *index_ptr |= mask;
 11631              		.loc 1 183 8 is_stmt 1 view .LVU3985
 11632              	.LVL676:
 184:sieve_extend.c ****        index_ptr+=step;
 11633              		.loc 1 184 8 view .LVU3986
 11634              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 11635              		.loc 1 184 19 is_stmt 0 view .LVU3987
 11636 428b 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_445, index: _293, offset: 0B], _278
 185:sieve_extend.c ****        *index_ptr |= mask;
 11637              		.loc 1 185 8 is_stmt 1 view .LVU3988
 11638              	.LVL677:
 186:sieve_extend.c ****        index_ptr+=step;
 11639              		.loc 1 186 8 view .LVU3989
 11640              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 11641              		.loc 1 186 19 is_stmt 0 view .LVU3990
 11642 428f 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _723, offset: 0B], _278
 187:sieve_extend.c ****        *index_ptr |= mask;
 11643              		.loc 1 187 8 is_stmt 1 view .LVU3991
 11644              	.LVL678:
 188:sieve_extend.c ****        index_ptr+=step;
 11645              		.loc 1 188 8 view .LVU3992
 11646              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 11647              		.loc 1 188 19 is_stmt 0 view .LVU3993
 11648 4292 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _723, index: _293, offset: 0B], _278
 189:sieve_extend.c ****        *index_ptr |= mask;
 11649              		.loc 1 189 8 is_stmt 1 view .LVU3994
 11650              	.LVL679:
 190:sieve_extend.c ****        index_ptr+=step;
 11651              		.loc 1 190 8 view .LVU3995
 11652 4296 4C01C7   		add	rdi, r8	# ivtmp.528, tmp415
 11653              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 11654              		.loc 1 190 19 is_stmt 0 view .LVU3996
 11655 4299 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_445, index: _293, step: 4, offset: 0B], _278
 191:sieve_extend.c ****    }
 11656              		.loc 1 191 8 is_stmt 1 view .LVU3997
 11657 429d 4C01C0   		add	rax, r8	# index_ptr, tmp415
 11658              	.LVL680:
 181:sieve_extend.c ****        *index_ptr |= mask;
 11659              		.loc 1 181 10 view .LVU3998
 11660 42a0 4939C4   		cmp	r12, rax	# fast_loop_ptr, index_ptr
 11661 42a3 0F8708FF 		ja	.L886	#,
 11661      FFFF
 11662 42a9 0F1F8000 		.p2align 4
 11662      000000
GAS LISTING /tmp/ccBvFgp2.s 			page 318


 11663              		.p2align 3
 11664              	.L885:
 194:sieve_extend.c ****    while likely(index_ptr < range_stop_ptr) {
 11665              		.loc 1 194 4 view .LVU3999
 195:sieve_extend.c ****        *index_ptr |= mask;
 11666              		.loc 1 195 4 view .LVU4000
 195:sieve_extend.c ****        *index_ptr |= mask;
 11667              		.loc 1 195 10 view .LVU4001
 11668 42b0 4C39C8   		cmp	rax, r9	# index_ptr, range_stop_ptr
 11669 42b3 735B     		jnb	.L887	#,
 11670              	.L888:
 196:sieve_extend.c ****        index_ptr+=step;
 11671              		.loc 1 196 8 view .LVU4002
 11672              	# sieve_extend.c:196:        *index_ptr |= mask;
 196:sieve_extend.c ****        index_ptr+=step;
 11673              		.loc 1 196 19 is_stmt 0 view .LVU4003
 11674 42b5 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_447, offset: 0B], _278
 197:sieve_extend.c ****    }
 11675              		.loc 1 197 8 is_stmt 1 view .LVU4004
 11676              	# sieve_extend.c:197:        index_ptr+=step;
 197:sieve_extend.c ****    }
 11677              		.loc 1 197 17 is_stmt 0 view .LVU4005
 11678 42b8 4801D0   		add	rax, rdx	# index_ptr, _293
 11679              	.LVL681:
 195:sieve_extend.c ****        *index_ptr |= mask;
 11680              		.loc 1 195 10 is_stmt 1 view .LVU4006
 11681 42bb 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 11682 42be 7650     		jbe	.L887	#,
 196:sieve_extend.c ****        index_ptr+=step;
 11683              		.loc 1 196 8 view .LVU4007
 11684              	# sieve_extend.c:196:        *index_ptr |= mask;
 196:sieve_extend.c ****        index_ptr+=step;
 11685              		.loc 1 196 19 is_stmt 0 view .LVU4008
 11686 42c0 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_447, offset: 0B], _278
 197:sieve_extend.c ****    }
 11687              		.loc 1 197 8 is_stmt 1 view .LVU4009
 11688              	# sieve_extend.c:197:        index_ptr+=step;
 197:sieve_extend.c ****    }
 11689              		.loc 1 197 17 is_stmt 0 view .LVU4010
 11690 42c3 4801D0   		add	rax, rdx	# index_ptr, _293
 11691              	.LVL682:
 195:sieve_extend.c ****        *index_ptr |= mask;
 11692              		.loc 1 195 10 is_stmt 1 view .LVU4011
 11693 42c6 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 11694 42c9 7645     		jbe	.L887	#,
 196:sieve_extend.c ****        index_ptr+=step;
 11695              		.loc 1 196 8 view .LVU4012
 11696              	# sieve_extend.c:196:        *index_ptr |= mask;
 196:sieve_extend.c ****        index_ptr+=step;
 11697              		.loc 1 196 19 is_stmt 0 view .LVU4013
 11698 42cb 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_447, offset: 0B], _278
 197:sieve_extend.c ****    }
 11699              		.loc 1 197 8 is_stmt 1 view .LVU4014
 11700              	# sieve_extend.c:197:        index_ptr+=step;
 197:sieve_extend.c ****    }
 11701              		.loc 1 197 17 is_stmt 0 view .LVU4015
 11702 42ce 4801D0   		add	rax, rdx	# index_ptr, _293
GAS LISTING /tmp/ccBvFgp2.s 			page 319


 11703              	.LVL683:
 195:sieve_extend.c ****        *index_ptr |= mask;
 11704              		.loc 1 195 10 is_stmt 1 view .LVU4016
 11705 42d1 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 11706 42d4 763A     		jbe	.L887	#,
 196:sieve_extend.c ****        index_ptr+=step;
 11707              		.loc 1 196 8 view .LVU4017
 11708              	# sieve_extend.c:196:        *index_ptr |= mask;
 196:sieve_extend.c ****        index_ptr+=step;
 11709              		.loc 1 196 19 is_stmt 0 view .LVU4018
 11710 42d6 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_447, offset: 0B], _278
 197:sieve_extend.c ****    }
 11711              		.loc 1 197 8 is_stmt 1 view .LVU4019
 11712              	# sieve_extend.c:197:        index_ptr+=step;
 197:sieve_extend.c ****    }
 11713              		.loc 1 197 17 is_stmt 0 view .LVU4020
 11714 42d9 4801D0   		add	rax, rdx	# index_ptr, _293
 11715              	.LVL684:
 195:sieve_extend.c ****        *index_ptr |= mask;
 11716              		.loc 1 195 10 is_stmt 1 view .LVU4021
 11717 42dc 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 11718 42df 762F     		jbe	.L887	#,
 196:sieve_extend.c ****        index_ptr+=step;
 11719              		.loc 1 196 8 view .LVU4022
 11720              	# sieve_extend.c:196:        *index_ptr |= mask;
 196:sieve_extend.c ****        index_ptr+=step;
 11721              		.loc 1 196 19 is_stmt 0 view .LVU4023
 11722 42e1 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_447, offset: 0B], _278
 197:sieve_extend.c ****    }
 11723              		.loc 1 197 8 is_stmt 1 view .LVU4024
 11724              	# sieve_extend.c:197:        index_ptr+=step;
 197:sieve_extend.c ****    }
 11725              		.loc 1 197 17 is_stmt 0 view .LVU4025
 11726 42e4 4801D0   		add	rax, rdx	# index_ptr, _293
 11727              	.LVL685:
 195:sieve_extend.c ****        *index_ptr |= mask;
 11728              		.loc 1 195 10 is_stmt 1 view .LVU4026
 11729 42e7 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 11730 42ea 7624     		jbe	.L887	#,
 196:sieve_extend.c ****        index_ptr+=step;
 11731              		.loc 1 196 8 view .LVU4027
 11732              	# sieve_extend.c:196:        *index_ptr |= mask;
 196:sieve_extend.c ****        index_ptr+=step;
 11733              		.loc 1 196 19 is_stmt 0 view .LVU4028
 11734 42ec 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_447, offset: 0B], _278
 197:sieve_extend.c ****    }
 11735              		.loc 1 197 8 is_stmt 1 view .LVU4029
 11736              	# sieve_extend.c:197:        index_ptr+=step;
 197:sieve_extend.c ****    }
 11737              		.loc 1 197 17 is_stmt 0 view .LVU4030
 11738 42ef 4801D0   		add	rax, rdx	# index_ptr, _293
 11739              	.LVL686:
 195:sieve_extend.c ****        *index_ptr |= mask;
 11740              		.loc 1 195 10 is_stmt 1 view .LVU4031
 11741 42f2 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 11742 42f5 7619     		jbe	.L887	#,
 196:sieve_extend.c ****        index_ptr+=step;
GAS LISTING /tmp/ccBvFgp2.s 			page 320


 11743              		.loc 1 196 8 view .LVU4032
 11744              	# sieve_extend.c:196:        *index_ptr |= mask;
 196:sieve_extend.c ****        index_ptr+=step;
 11745              		.loc 1 196 19 is_stmt 0 view .LVU4033
 11746 42f7 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_447, offset: 0B], _278
 197:sieve_extend.c ****    }
 11747              		.loc 1 197 8 is_stmt 1 view .LVU4034
 11748              	# sieve_extend.c:197:        index_ptr+=step;
 197:sieve_extend.c ****    }
 11749              		.loc 1 197 17 is_stmt 0 view .LVU4035
 11750 42fa 4801D0   		add	rax, rdx	# index_ptr, _293
 11751              	.LVL687:
 195:sieve_extend.c ****        *index_ptr |= mask;
 11752              		.loc 1 195 10 is_stmt 1 view .LVU4036
 11753 42fd 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 11754 4300 760E     		jbe	.L887	#,
 196:sieve_extend.c ****        index_ptr+=step;
 11755              		.loc 1 196 8 view .LVU4037
 11756              	# sieve_extend.c:196:        *index_ptr |= mask;
 196:sieve_extend.c ****        index_ptr+=step;
 11757              		.loc 1 196 19 is_stmt 0 view .LVU4038
 11758 4302 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_447, offset: 0B], _278
 197:sieve_extend.c ****    }
 11759              		.loc 1 197 8 is_stmt 1 view .LVU4039
 11760              	# sieve_extend.c:197:        index_ptr+=step;
 197:sieve_extend.c ****    }
 11761              		.loc 1 197 17 is_stmt 0 view .LVU4040
 11762 4305 4801D0   		add	rax, rdx	# index_ptr, _293
 11763              	.LVL688:
 195:sieve_extend.c ****        *index_ptr |= mask;
 11764              		.loc 1 195 10 is_stmt 1 view .LVU4041
 11765 4308 4939C1   		cmp	r9, rax	# range_stop_ptr, index_ptr
 11766 430b 77A8     		ja	.L888	#,
 11767 430d 0F1F00   		.p2align 4
 11768              		.p2align 3
 11769              	.L887:
 200:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 11770              		.loc 1 200 4 view .LVU4042
 11771              	# sieve_extend.c:200:    if (index_ptr == range_stop_ptr) { // index_ptr could also end above range
 200:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 11772              		.loc 1 200 7 is_stmt 0 view .LVU4043
 11773 4310 4C39C8   		cmp	rax, r9	# index_ptr, range_stop_ptr
 11774 4313 0F84CF01 		je	.L1089	#,
 11774      0000
 11775              	.LVL689:
 11776              	.L889:
 200:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 11777              		.loc 1 200 7 view .LVU4044
 11778              	.LBE532:
 11779              	.LBE536:
 418:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 11780              		.loc 1 418 77 is_stmt 1 view .LVU4045
 11781              	# sieve_extend.c:418:     for (register counter_t index = range_start; index < range_stop_unique; i
 418:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 11782              		.loc 1 418 83 is_stmt 0 view .LVU4046
 11783 4319 4C01D6   		add	rsi, r10	# index, step
 11784              	.LVL690:
GAS LISTING /tmp/ccBvFgp2.s 			page 321


 418:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 11785              		.loc 1 418 50 is_stmt 1 view .LVU4047
 11786              	# sieve_extend.c:418:     for (register counter_t index = range_start; index < range_stop_unique; i
 418:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 11787              		.loc 1 418 5 is_stmt 0 view .LVU4048
 11788 431c 4939F6   		cmp	r14, rsi	# _204, index
 11789 431f 0F876BFE 		ja	.L890	#,
 11789      FFFF
 11790              	.L891:
 11791              	.LVL691:
 418:sieve_extend.c ****         applyMask(bitarray, step, range_stop, markmask(index), wordindex(index));
 11792              		.loc 1 418 5 view .LVU4049
 11793              	.LBE539:
 11794              	.LBE542:
 11795              	.LBE549:
 991:sieve_extend.c ****         start = prime * prime * 2 + prime * 2;
 11796              		.loc 1 991 9 is_stmt 1 view .LVU4050
 11797              	.LBB550:
 11798              	.LBI550:
 128:sieve_extend.c ****     // return searchBitFalse(bitarray, index);
 11799              		.loc 1 128 25 view .LVU4051
 11800              	.LBB551:
 131:sieve_extend.c ****    bitshift_t index_bit  = bitindex_calc(index);
 11801              		.loc 1 131 4 view .LVU4052
 132:sieve_extend.c ****    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[index_word] >> index_bi
 11802              		.loc 1 132 4 view .LVU4053
 11803              	# sieve_extend.c:131:    register counter_t index_word = wordindex(index);
 131:sieve_extend.c ****    bitshift_t index_bit  = bitindex_calc(index);
 11804              		.loc 1 131 23 is_stmt 0 view .LVU4054
 11805 4325 4D89DE   		mov	r14, r11	# index_word, _216
 11806              	# sieve_extend.c:132:    bitshift_t index_bit  = bitindex_calc(index);
 132:sieve_extend.c ****    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[index_word] >> index_bi
 11807              		.loc 1 132 15 view .LVU4055
 11808 4328 4D89DA   		mov	r10, r11	# index_bit, _216
 11809              	.LVL692:
 11810              	# sieve_extend.c:131:    register counter_t index_word = wordindex(index);
 131:sieve_extend.c ****    bitshift_t index_bit  = bitindex_calc(index);
 11811              		.loc 1 131 23 view .LVU4056
 11812 432b 49C1EE06 		shr	r14, 6	# index_word,
 11813              	# sieve_extend.c:132:    bitshift_t index_bit  = bitindex_calc(index);
 132:sieve_extend.c ****    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[index_word] >> index_bi
 11814              		.loc 1 132 15 view .LVU4057
 11815 432f 4183E23F 		and	r10d, 63	# index_bit,
 11816              	.LVL693:
 133:sieve_extend.c ****    index += distance;
 11817              		.loc 1 133 4 is_stmt 1 view .LVU4058
 11818              	# sieve_extend.c:133:    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[i
 133:sieve_extend.c ****    index += distance;
 11819              		.loc 1 133 89 is_stmt 0 view .LVU4059
 11820 4333 4E8B04F3 		mov	r8, QWORD PTR [rbx+r14*8]	# *_249, *_249
 11821 4337 C4C2ABF7 		shrx	rdx, r8, r10	# tmp400, *_249, index_bit
 11821      D0
 11822              	# sieve_extend.c:133:    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[i
 133:sieve_extend.c ****    index += distance;
 11823              		.loc 1 133 66 view .LVU4060
 11824 433c 48F7D2   		not	rdx	# tmp402
 11825              	# sieve_extend.c:133:    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[i
GAS LISTING /tmp/ccBvFgp2.s 			page 322


 133:sieve_extend.c ****    index += distance;
 11826              		.loc 1 133 76 view .LVU4061
 11827 433f 4A8D34F5 		lea	rsi, 0[0+r14*8]	# _248,
 11827      00000000 
 11828              	.LVL694:
 11829              	# sieve_extend.c:133:    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[i
 133:sieve_extend.c ****    index += distance;
 11830              		.loc 1 133 25 view .LVU4062
 11831 4347 F34C0FBC 		tzcnt	r12, rdx	# distance, tmp402
 11831      E2
 11832              	.LVL695:
 134:sieve_extend.c ****    distance += index_bit;
 11833              		.loc 1 134 4 is_stmt 1 view .LVU4063
 11834              	# sieve_extend.c:134:    index += distance;
 134:sieve_extend.c ****    distance += index_bit;
 11835              		.loc 1 134 10 is_stmt 0 view .LVU4064
 11836 434c 4B8D0C23 		lea	rcx, [r11+r12]	# prime,
 11837              	.LVL696:
 135:sieve_extend.c **** 
 11838              		.loc 1 135 4 is_stmt 1 view .LVU4065
 137:sieve_extend.c ****        index_word++;
 11839              		.loc 1 137 4 view .LVU4066
 137:sieve_extend.c ****        index_word++;
 11840              		.loc 1 137 10 view .LVU4067
 11841              	# sieve_extend.c:135:    distance += index_bit;
 135:sieve_extend.c **** 
 11842              		.loc 1 135 13 is_stmt 0 view .LVU4068
 11843 4350 4D01D4   		add	r12, r10	# distance, index_bit
 11844              	.LVL697:
 11845              	# sieve_extend.c:137:    while unlikely(distance == WORD_SIZE_bitshift) { // to prevent a bug from 
 137:sieve_extend.c ****        index_word++;
 11846              		.loc 1 137 10 view .LVU4069
 11847 4353 4983FC40 		cmp	r12, 64	# distance,
 11848 4357 0F84CB01 		je	.L1090	#,
 11848      0000
 11849              	.LVL698:
 11850              	.L1034:
 143:sieve_extend.c **** }
 11851              		.loc 1 143 4 is_stmt 1 view .LVU4070
 143:sieve_extend.c **** }
 11852              		.loc 1 143 4 is_stmt 0 view .LVU4071
 11853              	.LBE551:
 11854              	.LBE550:
 992:sieve_extend.c ****     }
 11855              		.loc 1 992 9 is_stmt 1 view .LVU4072
 11856              	# sieve_extend.c:992:         start = prime * prime * 2 + prime * 2;
 992:sieve_extend.c ****     }
 11857              		.loc 1 992 35 is_stmt 0 view .LVU4073
 11858 435d 4C8D5901 		lea	r11, 1[rcx]	# _216,
 11859              	# sieve_extend.c:992:         start = prime * prime * 2 + prime * 2;
 992:sieve_extend.c ****     }
 11860              		.loc 1 992 15 view .LVU4074
 11861 4361 4C89DE   		mov	rsi, r11	# tmp428, _216
 11862 4364 480FAFF1 		imul	rsi, rcx	# tmp428, prime
 11863              	.LVL699:
 992:sieve_extend.c ****     }
 11864              		.loc 1 992 15 view .LVU4075
GAS LISTING /tmp/ccBvFgp2.s 			page 323


 11865 4368 4801F6   		add	rsi, rsi	# index
 11866              	.LVL700:
 986:sieve_extend.c ****         step  = prime * 2 + 1;
 11867              		.loc 1 986 11 is_stmt 1 view .LVU4076
 11868 436b 4839F5   		cmp	rbp, rsi	# block_stop, index
 11869 436e 0F83ACFD 		jnb	.L893	#,
 11869      FFFF
 986:sieve_extend.c ****         step  = prime * 2 + 1;
 11870              		.loc 1 986 11 is_stmt 0 view .LVU4077
 11871 4374 E93BFDFF 		jmp	.L1076	#
 11871      FF
 11872              	.LVL701:
 11873 4379 0F1F8000 		.p2align 4,,7
 11873      000000
 11874              		.p2align 3
 11875              	.L894:
 11876              	.LBB553:
 11877              	.LBB554:
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 11878              		.loc 1 343 41 is_stmt 1 view .LVU4078
 11879              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 11880              		.loc 1 343 5 is_stmt 0 view .LVU4079
 11881 4380 4839F5   		cmp	rbp, rsi	# block_stop, index
 11882 4383 7379     		jnb	.L898	#,
 11883 4385 66662E0F 		.p2align 4
 11883      1F840000 
 11883      000000
 11884              		.p2align 3
 11885              	.L899:
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 11886              		.loc 1 343 5 view .LVU4080
 11887              	.LBE554:
 11888              	.LBE553:
1000:sieve_extend.c ****         start = prime * prime * 2 + prime * 2;
 11889              		.loc 1 1000 9 is_stmt 1 view .LVU4081
 11890              	.LVL702:
 11891              	.LBB556:
 11892              	.LBI556:
 128:sieve_extend.c ****     // return searchBitFalse(bitarray, index);
 11893              		.loc 1 128 25 view .LVU4082
 11894              	.LBB557:
 131:sieve_extend.c ****    bitshift_t index_bit  = bitindex_calc(index);
 11895              		.loc 1 131 4 view .LVU4083
 132:sieve_extend.c ****    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[index_word] >> index_bi
 11896              		.loc 1 132 4 view .LVU4084
 11897              	# sieve_extend.c:131:    register counter_t index_word = wordindex(index);
 131:sieve_extend.c ****    bitshift_t index_bit  = bitindex_calc(index);
 11898              		.loc 1 131 23 is_stmt 0 view .LVU4085
 11899 4390 4C89D9   		mov	rcx, r11	# index_word, _216
 11900              	# sieve_extend.c:132:    bitshift_t index_bit  = bitindex_calc(index);
 132:sieve_extend.c ****    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[index_word] >> index_bi
 11901              		.loc 1 132 15 view .LVU4086
 11902 4393 4D89D9   		mov	r9, r11	# index_bit, _216
 11903              	.LVL703:
 11904              	# sieve_extend.c:131:    register counter_t index_word = wordindex(index);
 131:sieve_extend.c ****    bitshift_t index_bit  = bitindex_calc(index);
GAS LISTING /tmp/ccBvFgp2.s 			page 324


 11905              		.loc 1 131 23 view .LVU4087
 11906 4396 48C1E906 		shr	rcx, 6	# index_word,
 11907              	# sieve_extend.c:132:    bitshift_t index_bit  = bitindex_calc(index);
 132:sieve_extend.c ****    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[index_word] >> index_bi
 11908              		.loc 1 132 15 view .LVU4088
 11909 439a 4183E13F 		and	r9d, 63	# index_bit,
 11910              	.LVL704:
 133:sieve_extend.c ****    index += distance;
 11911              		.loc 1 133 4 is_stmt 1 view .LVU4089
 11912              	# sieve_extend.c:133:    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[i
 133:sieve_extend.c ****    index += distance;
 11913              		.loc 1 133 89 is_stmt 0 view .LVU4090
 11914 439e 488B3CCB 		mov	rdi, QWORD PTR [rbx+rcx*8]	# *_332, *_332
 11915 43a2 C462B3F7 		shrx	r10, rdi, r9	# tmp436, *_332, index_bit
 11915      D7
 11916              	# sieve_extend.c:133:    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[i
 133:sieve_extend.c ****    index += distance;
 11917              		.loc 1 133 66 view .LVU4091
 11918 43a7 49F7D2   		not	r10	# tmp438
 11919              	# sieve_extend.c:133:    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[i
 133:sieve_extend.c ****    index += distance;
 11920              		.loc 1 133 76 view .LVU4092
 11921 43aa 488D34CD 		lea	rsi, 0[0+rcx*8]	# _331,
 11921      00000000 
 11922              	# sieve_extend.c:133:    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[i
 133:sieve_extend.c ****    index += distance;
 11923              		.loc 1 133 25 view .LVU4093
 11924 43b2 F34D0FBC 		tzcnt	r14, r10	# distance, tmp438
 11924      F2
 11925              	.LVL705:
 134:sieve_extend.c ****    distance += index_bit;
 11926              		.loc 1 134 4 is_stmt 1 view .LVU4094
 11927              	# sieve_extend.c:134:    index += distance;
 134:sieve_extend.c ****    distance += index_bit;
 11928              		.loc 1 134 10 is_stmt 0 view .LVU4095
 11929 43b7 4B8D0C33 		lea	rcx, [r11+r14]	# prime,
 11930              	.LVL706:
 135:sieve_extend.c **** 
 11931              		.loc 1 135 4 is_stmt 1 view .LVU4096
 137:sieve_extend.c ****        index_word++;
 11932              		.loc 1 137 4 view .LVU4097
 137:sieve_extend.c ****        index_word++;
 11933              		.loc 1 137 10 view .LVU4098
 11934              	# sieve_extend.c:135:    distance += index_bit;
 135:sieve_extend.c **** 
 11935              		.loc 1 135 13 is_stmt 0 view .LVU4099
 11936 43bb 4D01CE   		add	r14, r9	# distance, index_bit
 11937              	.LVL707:
 11938              	# sieve_extend.c:137:    while unlikely(distance == WORD_SIZE_bitshift) { // to prevent a bug from 
 137:sieve_extend.c ****        index_word++;
 11939              		.loc 1 137 10 view .LVU4100
 11940 43be 4983FE40 		cmp	r14, 64	# distance,
 11941 43c2 0F843001 		je	.L1091	#,
 11941      0000
 143:sieve_extend.c **** }
 11942              		.loc 1 143 4 is_stmt 1 view .LVU4101
 11943              	.LVL708:
GAS LISTING /tmp/ccBvFgp2.s 			page 325


 143:sieve_extend.c **** }
 11944              		.loc 1 143 4 is_stmt 0 view .LVU4102
 11945              	.LBE557:
 11946              	.LBE556:
1001:sieve_extend.c ****     }
 11947              		.loc 1 1001 9 is_stmt 1 view .LVU4103
 11948              	# sieve_extend.c:1001:         start = prime * prime * 2 + prime * 2;
1001:sieve_extend.c ****     }
 11949              		.loc 1 1001 35 is_stmt 0 view .LVU4104
 11950 43c8 4C8D5901 		lea	r11, 1[rcx]	# _216,
 11951              	# sieve_extend.c:1001:         start = prime * prime * 2 + prime * 2;
1001:sieve_extend.c ****     }
 11952              		.loc 1 1001 15 view .LVU4105
 11953 43cc 4C89DE   		mov	rsi, r11	# tmp453, _216
 11954 43cf 480FAFF1 		imul	rsi, rcx	# tmp453, prime
 11955 43d3 4801F6   		add	rsi, rsi	# index
 11956              	.LVL709:
 11957              	.L1077:
 995:sieve_extend.c ****         step  = prime * 2 + 1;
 11958              		.loc 1 995 11 is_stmt 1 view .LVU4106
 11959 43d6 4839F5   		cmp	rbp, rsi	# block_stop, index
 11960 43d9 0F82D5FC 		jb	.L1076	#,
 11960      FFFF
 11961              	.LVL710:
 11962              	.L884:
 996:sieve_extend.c ****         if likely(block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start +
 11963              		.loc 1 996 9 view .LVU4107
 11964              	# sieve_extend.c:997:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 997:sieve_extend.c ****         if likely(start <= block_stop)
 11965              		.loc 1 997 12 is_stmt 0 view .LVU4108
 11966 43df 4D39DF   		cmp	r15, r11	# block_start, _216
 11967              	# sieve_extend.c:996:         step  = prime * 2 + 1;
 996:sieve_extend.c ****         if likely(block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start +
 11968              		.loc 1 996 15 view .LVU4109
 11969 43e2 4C8D4C09 		lea	r9, 1[rcx+rcx]	# step,
 11969      01
 11970              	.LVL711:
 997:sieve_extend.c ****         if likely(start <= block_stop)
 11971              		.loc 1 997 9 is_stmt 1 view .LVU4110
 11972              	# sieve_extend.c:997:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 997:sieve_extend.c ****         if likely(start <= block_stop)
 11973              		.loc 1 997 12 is_stmt 0 view .LVU4111
 11974 43e7 7297     		jb	.L894	#,
 997:sieve_extend.c ****         if likely(start <= block_stop)
 11975              		.loc 1 997 47 is_stmt 1 view .LVU4112
 11976              	# sieve_extend.c:997:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 997:sieve_extend.c ****         if likely(start <= block_stop)
 11977              		.loc 1 997 67 is_stmt 0 view .LVU4113
 11978 43e9 498D040F 		lea	rax, [r15+rcx]	# _220,
 11979              	# sieve_extend.c:997:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 997:sieve_extend.c ****         if likely(start <= block_stop)
 11980              		.loc 1 997 108 view .LVU4114
 11981 43ed 31D2     		xor	edx, edx	# tmp432
 11982              	# sieve_extend.c:997:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 997:sieve_extend.c ****         if likely(start <= block_stop)
 11983              		.loc 1 997 75 view .LVU4115
 11984 43ef 488D3408 		lea	rsi, [rax+rcx]	# tmp430,
GAS LISTING /tmp/ccBvFgp2.s 			page 326


 11985              	# sieve_extend.c:997:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 997:sieve_extend.c ****         if likely(start <= block_stop)
 11986              		.loc 1 997 108 view .LVU4116
 11987 43f3 49F7F1   		div	r9	# step
 11988              	.LVL712:
 11989              	# sieve_extend.c:997:         if likely(block_start >= (prime + 1)) start = block_start + prime + p
 997:sieve_extend.c ****         if likely(start <= block_stop)
 11990              		.loc 1 997 53 view .LVU4117
 11991 43f6 4829D6   		sub	rsi, rdx	# index, tmp432
 11992              	.LVL713:
 998:sieve_extend.c ****             setBitsTrue_largeSteps(bitarray, start, step, block_stop);
 11993              		.loc 1 998 9 is_stmt 1 view .LVU4118
 11994              	# sieve_extend.c:998:         if likely(start <= block_stop)
 998:sieve_extend.c ****             setBitsTrue_largeSteps(bitarray, start, step, block_stop);
 11995              		.loc 1 998 12 is_stmt 0 view .LVU4119
 11996 43f9 4839F5   		cmp	rbp, rsi	# block_stop, index
 11997 43fc 7292     		jb	.L899	#,
 11998              	.LVL714:
 11999              	.L898:
 12000              	.LBB559:
 12001              	.LBB555:
 344:sieve_extend.c ****     }
 12002              		.loc 1 344 9 is_stmt 1 view .LVU4120
 12003              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12004              		.loc 1 344 36 is_stmt 0 view .LVU4121
 12005 43fe 4889F1   		mov	rcx, rsi	# tmp441, index
 12006              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12007              		.loc 1 344 39 view .LVU4122
 12008 4401 C4C2C9F7 		shlx	rdi, r13, rsi	# tmp444, tmp461, index
 12008      FD
 12009              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12010              		.loc 1 344 36 view .LVU4123
 12011 4406 48C1E906 		shr	rcx, 6	# tmp441,
 12012              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12013              		.loc 1 343 68 view .LVU4124
 12014 440a 4C01CE   		add	rsi, r9	# index, step
 12015              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12016              		.loc 1 344 36 view .LVU4125
 12017 440d 48093CCB 		or	QWORD PTR [rbx+rcx*8], rdi	# *_231, tmp444
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12018              		.loc 1 343 62 is_stmt 1 view .LVU4126
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12019              		.loc 1 343 41 view .LVU4127
 12020              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12021              		.loc 1 343 5 is_stmt 0 view .LVU4128
 12022 4411 4839F5   		cmp	rbp, rsi	# block_stop, index
 12023 4414 0F8276FF 		jb	.L899	#,
 12023      FFFF
 344:sieve_extend.c ****     }
 12024              		.loc 1 344 9 is_stmt 1 view .LVU4129
 12025              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
GAS LISTING /tmp/ccBvFgp2.s 			page 327


 344:sieve_extend.c ****     }
 12026              		.loc 1 344 36 is_stmt 0 view .LVU4130
 12027 441a 4989F2   		mov	r10, rsi	# tmp475, index
 12028              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12029              		.loc 1 344 39 view .LVU4131
 12030 441d C442C9F7 		shlx	r14, r13, rsi	# tmp478, tmp461, index
 12030      F5
 12031              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12032              		.loc 1 344 36 view .LVU4132
 12033 4422 49C1EA06 		shr	r10, 6	# tmp475,
 12034              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12035              		.loc 1 343 68 view .LVU4133
 12036 4426 4C01CE   		add	rsi, r9	# index, step
 12037              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12038              		.loc 1 344 36 view .LVU4134
 12039 4429 4E0934D3 		or	QWORD PTR [rbx+r10*8], r14	# *_231, tmp478
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12040              		.loc 1 343 62 is_stmt 1 view .LVU4135
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12041              		.loc 1 343 41 view .LVU4136
 12042              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12043              		.loc 1 343 5 is_stmt 0 view .LVU4137
 12044 442d 4839F5   		cmp	rbp, rsi	# block_stop, index
 12045 4430 0F825AFF 		jb	.L899	#,
 12045      FFFF
 344:sieve_extend.c ****     }
 12046              		.loc 1 344 9 is_stmt 1 view .LVU4138
 12047              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12048              		.loc 1 344 36 is_stmt 0 view .LVU4139
 12049 4436 4989F0   		mov	r8, rsi	# tmp480, index
 12050              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12051              		.loc 1 344 39 view .LVU4140
 12052 4439 C442C9F7 		shlx	r12, r13, rsi	# tmp483, tmp461, index
 12052      E5
 12053              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12054              		.loc 1 344 36 view .LVU4141
 12055 443e 49C1E806 		shr	r8, 6	# tmp480,
 12056              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12057              		.loc 1 343 68 view .LVU4142
 12058 4442 4C01CE   		add	rsi, r9	# index, step
 12059              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12060              		.loc 1 344 36 view .LVU4143
 12061 4445 4E0924C3 		or	QWORD PTR [rbx+r8*8], r12	# *_231, tmp483
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12062              		.loc 1 343 62 is_stmt 1 view .LVU4144
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12063              		.loc 1 343 41 view .LVU4145
GAS LISTING /tmp/ccBvFgp2.s 			page 328


 12064              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12065              		.loc 1 343 5 is_stmt 0 view .LVU4146
 12066 4449 4839F5   		cmp	rbp, rsi	# block_stop, index
 12067 444c 0F823EFF 		jb	.L899	#,
 12067      FFFF
 344:sieve_extend.c ****     }
 12068              		.loc 1 344 9 is_stmt 1 view .LVU4147
 12069              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12070              		.loc 1 344 36 is_stmt 0 view .LVU4148
 12071 4452 4889F0   		mov	rax, rsi	# tmp485, index
 12072              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12073              		.loc 1 344 39 view .LVU4149
 12074 4455 C4C2C9F7 		shlx	rdx, r13, rsi	# tmp488, tmp461, index
 12074      D5
 12075              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12076              		.loc 1 344 36 view .LVU4150
 12077 445a 48C1E806 		shr	rax, 6	# tmp485,
 12078              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12079              		.loc 1 343 68 view .LVU4151
 12080 445e 4C01CE   		add	rsi, r9	# index, step
 12081              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12082              		.loc 1 344 36 view .LVU4152
 12083 4461 480914C3 		or	QWORD PTR [rbx+rax*8], rdx	# *_231, tmp488
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12084              		.loc 1 343 62 is_stmt 1 view .LVU4153
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12085              		.loc 1 343 41 view .LVU4154
 12086              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12087              		.loc 1 343 5 is_stmt 0 view .LVU4155
 12088 4465 4839F5   		cmp	rbp, rsi	# block_stop, index
 12089 4468 0F8222FF 		jb	.L899	#,
 12089      FFFF
 344:sieve_extend.c ****     }
 12090              		.loc 1 344 9 is_stmt 1 view .LVU4156
 12091              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12092              		.loc 1 344 36 is_stmt 0 view .LVU4157
 12093 446e 4889F1   		mov	rcx, rsi	# tmp490, index
 12094              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12095              		.loc 1 344 39 view .LVU4158
 12096 4471 C4C2C9F7 		shlx	rdi, r13, rsi	# tmp493, tmp461, index
 12096      FD
 12097              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12098              		.loc 1 344 36 view .LVU4159
 12099 4476 48C1E906 		shr	rcx, 6	# tmp490,
 12100              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12101              		.loc 1 343 68 view .LVU4160
GAS LISTING /tmp/ccBvFgp2.s 			page 329


 12102 447a 4C01CE   		add	rsi, r9	# index, step
 12103              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12104              		.loc 1 344 36 view .LVU4161
 12105 447d 48093CCB 		or	QWORD PTR [rbx+rcx*8], rdi	# *_231, tmp493
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12106              		.loc 1 343 62 is_stmt 1 view .LVU4162
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12107              		.loc 1 343 41 view .LVU4163
 12108              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12109              		.loc 1 343 5 is_stmt 0 view .LVU4164
 12110 4481 4839F5   		cmp	rbp, rsi	# block_stop, index
 12111 4484 0F8206FF 		jb	.L899	#,
 12111      FFFF
 344:sieve_extend.c ****     }
 12112              		.loc 1 344 9 is_stmt 1 view .LVU4165
 12113              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12114              		.loc 1 344 36 is_stmt 0 view .LVU4166
 12115 448a 4989F2   		mov	r10, rsi	# tmp495, index
 12116              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12117              		.loc 1 344 39 view .LVU4167
 12118 448d C442C9F7 		shlx	r14, r13, rsi	# tmp498, tmp461, index
 12118      F5
 12119              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12120              		.loc 1 344 36 view .LVU4168
 12121 4492 49C1EA06 		shr	r10, 6	# tmp495,
 12122              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12123              		.loc 1 343 68 view .LVU4169
 12124 4496 4C01CE   		add	rsi, r9	# index, step
 12125              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12126              		.loc 1 344 36 view .LVU4170
 12127 4499 4E0934D3 		or	QWORD PTR [rbx+r10*8], r14	# *_231, tmp498
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12128              		.loc 1 343 62 is_stmt 1 view .LVU4171
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12129              		.loc 1 343 41 view .LVU4172
 12130              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12131              		.loc 1 343 5 is_stmt 0 view .LVU4173
 12132 449d 4839F5   		cmp	rbp, rsi	# block_stop, index
 12133 44a0 0F82EAFE 		jb	.L899	#,
 12133      FFFF
 344:sieve_extend.c ****     }
 12134              		.loc 1 344 9 is_stmt 1 view .LVU4174
 12135              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12136              		.loc 1 344 36 is_stmt 0 view .LVU4175
 12137 44a6 4989F0   		mov	r8, rsi	# tmp500, index
 12138              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12139              		.loc 1 344 39 view .LVU4176
GAS LISTING /tmp/ccBvFgp2.s 			page 330


 12140 44a9 C442C9F7 		shlx	r12, r13, rsi	# tmp503, tmp461, index
 12140      E5
 12141              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12142              		.loc 1 344 36 view .LVU4177
 12143 44ae 49C1E806 		shr	r8, 6	# tmp500,
 12144              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12145              		.loc 1 343 68 view .LVU4178
 12146 44b2 4C01CE   		add	rsi, r9	# index, step
 12147              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12148              		.loc 1 344 36 view .LVU4179
 12149 44b5 4E0924C3 		or	QWORD PTR [rbx+r8*8], r12	# *_231, tmp503
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12150              		.loc 1 343 62 is_stmt 1 view .LVU4180
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12151              		.loc 1 343 41 view .LVU4181
 12152              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12153              		.loc 1 343 5 is_stmt 0 view .LVU4182
 12154 44b9 4839F5   		cmp	rbp, rsi	# block_stop, index
 12155 44bc 0F82CEFE 		jb	.L899	#,
 12155      FFFF
 344:sieve_extend.c ****     }
 12156              		.loc 1 344 9 is_stmt 1 view .LVU4183
 12157              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12158              		.loc 1 344 36 is_stmt 0 view .LVU4184
 12159 44c2 4889F0   		mov	rax, rsi	# tmp505, index
 12160              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12161              		.loc 1 344 39 view .LVU4185
 12162 44c5 C4C2C9F7 		shlx	rdx, r13, rsi	# tmp508, tmp461, index
 12162      D5
 12163              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12164              		.loc 1 344 36 view .LVU4186
 12165 44ca 48C1E806 		shr	rax, 6	# tmp505,
 12166              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12167              		.loc 1 343 68 view .LVU4187
 12168 44ce 4C01CE   		add	rsi, r9	# index, step
 12169              	# sieve_extend.c:344:         bitarray[wordindex(index)] |= markmask(index);
 344:sieve_extend.c ****     }
 12170              		.loc 1 344 36 view .LVU4188
 12171 44d1 480914C3 		or	QWORD PTR [rbx+rax*8], rdx	# *_231, tmp508
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12172              		.loc 1 343 62 is_stmt 1 view .LVU4189
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12173              		.loc 1 343 41 view .LVU4190
 12174              	# sieve_extend.c:343:     for (counter_t index = range_start; index <= range_stop; index += step) {
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12175              		.loc 1 343 5 is_stmt 0 view .LVU4191
 12176 44d5 4839F5   		cmp	rbp, rsi	# block_stop, index
 12177 44d8 0F8320FF 		jnb	.L898	#,
 12177      FFFF
GAS LISTING /tmp/ccBvFgp2.s 			page 331


 12178 44de E9ADFEFF 		jmp	.L899	#
 12178      FF
 12179              	.LVL715:
 12180              		.p2align 4,,7
 12181 44e3 0F1F4400 		.p2align 3
 12181      00
 12182              	.L1089:
 343:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 12183              		.loc 1 343 5 view .LVU4192
 12184              	.LBE555:
 12185              	.LBE559:
 12186              	.LBB560:
 12187              	.LBB543:
 12188              	.LBB540:
 12189              	.LBB537:
 12190              	.LBB533:
 201:sieve_extend.c ****    }
 12191              		.loc 1 201 7 is_stmt 1 view .LVU4193
 12192              	# sieve_extend.c:201:       *index_ptr |= (mask & chopmask(range_stop));
 201:sieve_extend.c ****    }
 12193              		.loc 1 201 27 is_stmt 0 view .LVU4194
 12194 44e8 48234C24 		and	rcx, QWORD PTR 16[rsp]	# tmp420, %sfp
 12194      10
 12195              	.LVL716:
 12196              	# sieve_extend.c:201:       *index_ptr |= (mask & chopmask(range_stop));
 201:sieve_extend.c ****    }
 12197              		.loc 1 201 18 view .LVU4195
 12198 44ed 490909   		or	QWORD PTR [r9], rcx	# MEM[(uint64_t *)range_stop_ptr_311], tmp420
 12199 44f0 E924FEFF 		jmp	.L889	#
 12199      FF
 12200              	.LVL717:
 12201              		.p2align 4,,7
 12202 44f5 0F1F00   		.p2align 3
 12203              	.L1091:
 201:sieve_extend.c ****    }
 12204              		.loc 1 201 18 view .LVU4196
 12205              	.LBE533:
 12206              	.LBE537:
 12207              	.LBE540:
 12208              	.LBE543:
 12209              	.LBE560:
 12210              	.LBB561:
 12211              	.LBB558:
 138:sieve_extend.c ****        distance = (bitshift_t) __builtin_ctzll(~(bitarray[index_word]));
 12212              		.loc 1 138 8 is_stmt 1 view .LVU4197
 139:sieve_extend.c ****        index += distance;
 12213              		.loc 1 139 8 view .LVU4198
 12214              	# sieve_extend.c:139:        distance = (bitshift_t) __builtin_ctzll(~(bitarray[index_word]));
 139:sieve_extend.c ****        index += distance;
 12215              		.loc 1 139 48 is_stmt 0 view .LVU4199
 12216 44f8 4C8B4433 		mov	r8, QWORD PTR 8[rbx+rsi]	# *_344, *_344
 12216      08
 12217 44fd 49F7D0   		not	r8	# tmp446
 12218              	.LVL718:
 140:sieve_extend.c ****    }
 12219              		.loc 1 140 8 is_stmt 1 view .LVU4200
 12220              	# sieve_extend.c:139:        distance = (bitshift_t) __builtin_ctzll(~(bitarray[index_word]));
GAS LISTING /tmp/ccBvFgp2.s 			page 332


 139:sieve_extend.c ****        index += distance;
 12221              		.loc 1 139 17 is_stmt 0 view .LVU4201
 12222 4500 F34D0FBC 		tzcnt	r12, r8	# distance, tmp446
 12222      E0
 12223              	.LVL719:
 12224              	# sieve_extend.c:140:        index += distance;
 140:sieve_extend.c ****    }
 12225              		.loc 1 140 14 view .LVU4202
 12226 4505 4C01E1   		add	rcx, r12	# prime, distance
 12227              	.LVL720:
 137:sieve_extend.c ****        index_word++;
 12228              		.loc 1 137 10 is_stmt 1 view .LVU4203
 143:sieve_extend.c **** }
 12229              		.loc 1 143 4 view .LVU4204
 143:sieve_extend.c **** }
 12230              		.loc 1 143 4 is_stmt 0 view .LVU4205
 12231              	.LBE558:
 12232              	.LBE561:
1001:sieve_extend.c ****     }
 12233              		.loc 1 1001 9 is_stmt 1 view .LVU4206
 12234              	# sieve_extend.c:1001:         start = prime * prime * 2 + prime * 2;
1001:sieve_extend.c ****     }
 12235              		.loc 1 1001 35 is_stmt 0 view .LVU4207
 12236 4508 4C8D5901 		lea	r11, 1[rcx]	# _216,
 12237              	# sieve_extend.c:1001:         start = prime * prime * 2 + prime * 2;
1001:sieve_extend.c ****     }
 12238              		.loc 1 1001 15 view .LVU4208
 12239 450c 4C89D8   		mov	rax, r11	# tmp451, _216
 12240 450f 480FAFC1 		imul	rax, rcx	# tmp451, prime
 12241 4513 488D3400 		lea	rsi, [rax+rax]	# index,
 12242              	.LVL721:
 995:sieve_extend.c ****         step  = prime * 2 + 1;
 12243              		.loc 1 995 11 is_stmt 1 view .LVU4209
 12244 4517 4839F5   		cmp	rbp, rsi	# block_stop, index
 12245 451a 0F83BFFE 		jnb	.L884	#,
 12245      FFFF
 12246 4520 E98FFBFF 		jmp	.L1076	#
 12246      FF
 12247              	.LVL722:
 12248              		.p2align 4,,7
 12249 4525 0F1F00   		.p2align 3
 12250              	.L1090:
 12251              	.LBB562:
 12252              	.LBB552:
 138:sieve_extend.c ****        distance = (bitshift_t) __builtin_ctzll(~(bitarray[index_word]));
 12253              		.loc 1 138 8 view .LVU4210
 139:sieve_extend.c ****        index += distance;
 12254              		.loc 1 139 8 view .LVU4211
 12255              	# sieve_extend.c:139:        distance = (bitshift_t) __builtin_ctzll(~(bitarray[index_word]));
 139:sieve_extend.c ****        index += distance;
 12256              		.loc 1 139 48 is_stmt 0 view .LVU4212
 12257 4528 4C8B5C33 		mov	r11, QWORD PTR 8[rbx+rsi]	# *_261, *_261
 12257      08
 12258 452d 49F7D3   		not	r11	# tmp421
 12259              	.LVL723:
 140:sieve_extend.c ****    }
 12260              		.loc 1 140 8 is_stmt 1 view .LVU4213
GAS LISTING /tmp/ccBvFgp2.s 			page 333


 12261              	# sieve_extend.c:139:        distance = (bitshift_t) __builtin_ctzll(~(bitarray[index_word]));
 139:sieve_extend.c ****        index += distance;
 12262              		.loc 1 139 17 is_stmt 0 view .LVU4214
 12263 4530 F3490FBC 		tzcnt	rax, r11	# distance, tmp421
 12263      C3
 12264              	.LVL724:
 12265              	# sieve_extend.c:140:        index += distance;
 140:sieve_extend.c ****    }
 12266              		.loc 1 140 14 view .LVU4215
 12267 4535 4801C1   		add	rcx, rax	# prime, distance
 12268              	.LVL725:
 137:sieve_extend.c ****        index_word++;
 12269              		.loc 1 137 10 is_stmt 1 view .LVU4216
 143:sieve_extend.c **** }
 12270              		.loc 1 143 4 view .LVU4217
 143:sieve_extend.c **** }
 12271              		.loc 1 143 4 is_stmt 0 view .LVU4218
 12272              	.LBE552:
 12273              	.LBE562:
 992:sieve_extend.c ****     }
 12274              		.loc 1 992 9 is_stmt 1 view .LVU4219
 12275 4538 E920FEFF 		jmp	.L1034	#
 12275      FF
 12276              	.LVL726:
 12277              	.L1084:
 992:sieve_extend.c ****     }
 12278              		.loc 1 992 9 is_stmt 0 view .LVU4220
 12279              	.LBE566:
 12280              	.LBE576:
 12281              	.LBE580:
 12282              	.LBB581:
 12283              	.LBB507:
 12284              	.LBB500:
 12285              	.LBB495:
 12286              	.LBB493:
 920:sieve_extend.c ****         return; // rapid exit for small sizes
 12287              		.loc 1 920 9 is_stmt 1 view .LVU4221
 12288 453d 488B4C24 		mov	rcx, QWORD PTR 16[rsp]	#, %sfp
 12288      10
 12289 4542 4C89FA   		mov	rdx, r15	#, patternsize_bits
 12290 4545 4C89FE   		mov	rsi, r15	#, patternsize_bits
 12291              	.LVL727:
 920:sieve_extend.c ****         return; // rapid exit for small sizes
 12292              		.loc 1 920 9 is_stmt 0 view .LVU4222
 12293 4548 4C89F7   		mov	rdi, r14	#, _96
 12294 454b E8B0BAFF 		call	extendSieve_smallSize	#
 12294      FF
 12295              	.LVL728:
 921:sieve_extend.c ****     }
 12296              		.loc 1 921 9 is_stmt 1 view .LVU4223
 12297 4550 4C897C24 		mov	QWORD PTR 32[rsp], r15	# %sfp, patternsize_bits
 12297      20
 12298 4555 E993F4FF 		jmp	.L849	#
 12298      FF
 12299              	.LVL729:
 12300              	.L1086:
 921:sieve_extend.c ****     }
GAS LISTING /tmp/ccBvFgp2.s 			page 334


 12301              		.loc 1 921 9 is_stmt 0 view .LVU4224
 12302              	.LBE493:
 12303              	.LBE495:
 12304              	.LBE500:
 12305              	.LBE507:
 12306              	.LBE581:
 12307              	.LBB582:
 12308              	.LBB517:
 928:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
 12309              		.loc 1 928 37 is_stmt 1 view .LVU4225
 12310 455a E8F1DEFF 		call	extendSieve_shiftleft	#
 12310      FF
 12311              	.LVL730:
 928:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
 12312              		.loc 1 928 37 is_stmt 0 view .LVU4226
 12313 455f 90       		.p2align 4,,3
 12314 4560 E989F8FF 		jmp	.L865	#
 12314      FF
 12315              	.LVL731:
 12316              	.L1080:
 928:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_ivdep(bitarray, source_start, size, dest
 12317              		.loc 1 928 37 view .LVU4227
 12318 4565 4C8B6C24 		mov	r13, QWORD PTR 48[rsp]	# <retval>, %sfp
 12318      30
 12319              	.LBE517:
 12320              	.LBE582:
 12321              	.LBB583:
 12322              	.LBB508:
 12323              	.LBB501:
 12324              	# sieve_extend.c:1035:         if (range_stop > block_stop) return block; //range_stop = block_stop
1035:sieve_extend.c **** 
 12325              		.loc 1 1035 12 view .LVU4228
 12326 456a 4C89FA   		mov	rdx, r15	# block$pattern_size, patternsize_bits
 12327 456d 488B7424 		mov	rsi, QWORD PTR 24[rsp]	# block$pattern_start, %sfp
 12327      18
 12328              	.LVL732:
1035:sieve_extend.c **** 
 12329              		.loc 1 1035 12 view .LVU4229
 12330 4572 48894C24 		mov	QWORD PTR 40[rsp], rcx	# %sfp, prime
 12330      28
 12331 4577 4D8B7508 		mov	r14, QWORD PTR 8[r13]	# prephitmp_743, sieve_91->bits
 12332              	.LVL733:
1035:sieve_extend.c **** 
 12333              		.loc 1 1035 12 view .LVU4230
 12334 457b 4C897424 		mov	QWORD PTR 8[rsp], r14	# %sfp, prephitmp_743
 12334      08
 12335              	.LVL734:
1035:sieve_extend.c **** 
 12336              		.loc 1 1035 12 view .LVU4231
 12337 4580 E933F8FF 		jmp	.L848	#
 12337      FF
 12338              	.LVL735:
 12339              	.L1078:
1035:sieve_extend.c **** 
 12340              		.loc 1 1035 12 view .LVU4232
 12341              	.LBE501:
 12342              	# sieve_extend.c:1020:     struct block block = { .prime = 0, .pattern_start = 0, .pattern_size = 0
GAS LISTING /tmp/ccBvFgp2.s 			page 335


1020:sieve_extend.c **** 
 12343              		.loc 1 1020 18 view .LVU4233
 12344 4585 31D2     		xor	edx, edx	# block$pattern_size
 12345 4587 31F6     		xor	esi, esi	# block$pattern_start
 12346              	# sieve_extend.c:1015:     register counter_t prime   = 0;
1015:sieve_extend.c ****     counter_t patternsize_bits = 1;
 12347              		.loc 1 1015 24 view .LVU4234
 12348 4589 48C74424 		mov	QWORD PTR 40[rsp], 0	# %sfp,
 12348      28000000 
 12348      00
 12349 4592 E99FF7FF 		jmp	.L841	#
 12349      FF
 12350              	.LBE508:
 12351              	.LBE583:
 12352              		.cfi_endproc
 12353              	.LFE76:
 12355 4597 660F1F84 		.p2align 4
 12355      00000000 
 12355      00
 12357              	tune_benchmark:
 12358              	.LVL736:
 12359              	.LFB83:
1179:sieve_extend.c **** 
1180:sieve_extend.c **** static void tune_benchmark(tuning_result_type* tuning_result, counter_t tuning_result_index) {
 12360              		.loc 1 1180 94 is_stmt 1 view -0
 12361              		.cfi_startproc
 12362              		.loc 1 1180 94 is_stmt 0 view .LVU4236
 12363 45a0 4154     		push	r12	#
 12364              		.cfi_def_cfa_offset 16
 12365              		.cfi_offset 12, -16
 12366 45a2 4989F8   		mov	r8, rdi	# tmp149, tuning_result
 12367              	# sieve_extend.c:1186:     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_f
1181:sieve_extend.c ****     counter_t passes = 0;
1182:sieve_extend.c ****     double elapsed_time = 0;
1183:sieve_extend.c ****     struct timespec start_time,end_time;
1184:sieve_extend.c ****     struct sieve_state *sieve_instance;
1185:sieve_extend.c **** 
1186:sieve_extend.c ****     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_faster;
 12368              		.loc 1 1186 44 view .LVU4237
 12369 45a5 488D3C76 		lea	rdi, [rsi+rsi*2]	# tmp114,
 12370              	.LVL737:
 12371              	# sieve_extend.c:1180: static void tune_benchmark(tuning_result_type* tuning_result, counter_t tuni
1180:sieve_extend.c ****     counter_t passes = 0;
 12372              		.loc 1 1180 94 view .LVU4238
 12373 45a9 55       		push	rbp	#
 12374              		.cfi_def_cfa_offset 24
 12375              		.cfi_offset 6, -24
 12376              	# sieve_extend.c:1186:     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_f
 12377              		.loc 1 1186 44 view .LVU4239
 12378 45aa 48C1E705 		sal	rdi, 5	# tmp115,
 12379              	# sieve_extend.c:1181:     counter_t passes = 0;
1181:sieve_extend.c ****     counter_t passes = 0;
 12380              		.loc 1 1181 15 view .LVU4240
 12381 45ae 4531E4   		xor	r12d, r12d	# passes
 12382              	# sieve_extend.c:1180: static void tune_benchmark(tuning_result_type* tuning_result, counter_t tuni
1180:sieve_extend.c ****     counter_t passes = 0;
 12383              		.loc 1 1180 94 view .LVU4241
GAS LISTING /tmp/ccBvFgp2.s 			page 336


 12384 45b1 53       		push	rbx	#
 12385              		.cfi_def_cfa_offset 32
 12386              		.cfi_offset 3, -32
 12387              	# sieve_extend.c:1186:     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_f
 12388              		.loc 1 1186 44 view .LVU4242
 12389 45b2 498D1C38 		lea	rbx, [r8+rdi]	# _2,
 12390              	# sieve_extend.c:1190:     clock_gettime(CLOCK_MONOTONIC,&start_time);
1187:sieve_extend.c ****     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep_faster;
1188:sieve_extend.c ****     global_VECTORSTEP_FASTER = tuning_result[tuning_result_index].vectorstep_faster;
1189:sieve_extend.c **** 
1190:sieve_extend.c ****     clock_gettime(CLOCK_MONOTONIC,&start_time);
 12391              		.loc 1 1190 5 view .LVU4243
 12392 45b6 BF010000 		mov	edi, 1	#,
 12392      00
 12393              	# sieve_extend.c:1180: static void tune_benchmark(tuning_result_type* tuning_result, counter_t tuni
1180:sieve_extend.c ****     counter_t passes = 0;
 12394              		.loc 1 1180 94 view .LVU4244
 12395 45bb 488D6424 		lea	rsp, -48[rsp]	#,
 12395      D0
 12396              		.cfi_def_cfa_offset 80
 12397              	# sieve_extend.c:1187:     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep
1187:sieve_extend.c ****     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep_faster;
 12398              		.loc 1 1187 30 view .LVU4245
 12399 45c0 488B5328 		mov	rdx, QWORD PTR 40[rbx]	# _2->mediumstep_faster, _2->mediumstep_faster
 12400              	# sieve_extend.c:1190:     clock_gettime(CLOCK_MONOTONIC,&start_time);
 12401              		.loc 1 1190 5 view .LVU4246
 12402 45c4 4889E6   		mov	rsi, rsp	# tmp119,
 12403              	.LVL738:
 12404              	# sieve_extend.c:1188:     global_VECTORSTEP_FASTER = tuning_result[tuning_result_index].vectorstep
1188:sieve_extend.c **** 
 12405              		.loc 1 1188 30 view .LVU4247
 12406 45c7 488B4B30 		mov	rcx, QWORD PTR 48[rbx]	# _2->vectorstep_faster, _2->vectorstep_faster
 12407              	# sieve_extend.c:1180: static void tune_benchmark(tuning_result_type* tuning_result, counter_t tuni
1180:sieve_extend.c ****     counter_t passes = 0;
 12408              		.loc 1 1180 94 view .LVU4248
 12409 45cb 64488B04 		mov	rax, QWORD PTR fs:40	# tmp160, MEM[(<address-space-1> long unsigned int *)40B]
 12409      25280000 
 12409      00
 12410 45d4 48894424 		mov	QWORD PTR 40[rsp], rax	# D.7030, tmp160
 12410      28
 12411 45d9 31C0     		xor	eax, eax	# tmp160
1181:sieve_extend.c ****     double elapsed_time = 0;
 12412              		.loc 1 1181 5 is_stmt 1 view .LVU4249
 12413              	.LVL739:
1182:sieve_extend.c ****     struct timespec start_time,end_time;
 12414              		.loc 1 1182 5 view .LVU4250
1183:sieve_extend.c ****     struct sieve_state *sieve_instance;
 12415              		.loc 1 1183 5 view .LVU4251
1184:sieve_extend.c **** 
 12416              		.loc 1 1184 5 view .LVU4252
1186:sieve_extend.c ****     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep_faster;
 12417              		.loc 1 1186 5 view .LVU4253
 12418              	# sieve_extend.c:1186:     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_f
1186:sieve_extend.c ****     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep_faster;
 12419              		.loc 1 1186 29 is_stmt 0 view .LVU4254
 12420 45db 488B4320 		mov	rax, QWORD PTR 32[rbx]	# _2->smallstep_faster, _2->smallstep_faster
 12421              	# sieve_extend.c:1187:     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep
GAS LISTING /tmp/ccBvFgp2.s 			page 337


1187:sieve_extend.c ****     global_VECTORSTEP_FASTER = tuning_result[tuning_result_index].vectorstep_faster;
 12422              		.loc 1 1187 30 view .LVU4255
 12423 45df 48891500 		mov	QWORD PTR global_MEDIUMSTEP_FASTER[rip], rdx	# global_MEDIUMSTEP_FASTER, _2->mediumstep_faster
 12423      000000
 12424              	# sieve_extend.c:1188:     global_VECTORSTEP_FASTER = tuning_result[tuning_result_index].vectorstep
1188:sieve_extend.c **** 
 12425              		.loc 1 1188 30 view .LVU4256
 12426 45e6 48890D00 		mov	QWORD PTR global_VECTORSTEP_FASTER[rip], rcx	# global_VECTORSTEP_FASTER, _2->vectorstep_faster
 12426      000000
 12427              	# sieve_extend.c:1186:     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_f
1186:sieve_extend.c ****     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep_faster;
 12428              		.loc 1 1186 29 view .LVU4257
 12429 45ed 48890500 		mov	QWORD PTR global_SMALLSTEP_FASTER[rip], rax	# global_SMALLSTEP_FASTER, _2->smallstep_faster
 12429      000000
1187:sieve_extend.c ****     global_VECTORSTEP_FASTER = tuning_result[tuning_result_index].vectorstep_faster;
 12430              		.loc 1 1187 5 is_stmt 1 view .LVU4258
1188:sieve_extend.c **** 
 12431              		.loc 1 1188 5 view .LVU4259
 12432              		.loc 1 1190 5 view .LVU4260
 12433 45f4 E8000000 		call	clock_gettime@PLT	#
 12433      00
 12434              	.LVL740:
1191:sieve_extend.c ****     while (elapsed_time <= tuning_result[tuning_result_index].sample_duration && passes < tuning_re
 12435              		.loc 1 1191 5 view .LVU4261
 12436              		.loc 1 1191 11 view .LVU4262
 12437 45f9 C5D957E4 		vxorpd	xmm4, xmm4, xmm4	# elapsed_time
 12438 45fd C5F92F63 		vcomisd	xmm4, QWORD PTR 64[rbx]	# elapsed_time, _2->sample_duration
 12438      40
 12439 4602 C5FB103D 		vmovsd	xmm7, QWORD PTR .LC7[rip]	# _58,
 12439      00000000 
 12440 460a 7676     		jbe	.L1093	#,
 12441 460c E99E0000 		jmp	.L1094	#
 12441      00
 12442              	.LVL741:
 12443              		.p2align 4,,7
 12444 4611 0F1F8000 		.p2align 3
 12444      000000
 12445              	.L1097:
1192:sieve_extend.c ****         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, tuning_result[tuning_res
 12446              		.loc 1 1192 9 view .LVU4263
 12447              	# sieve_extend.c:1192:         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, t
 12448              		.loc 1 1192 26 is_stmt 0 view .LVU4264
 12449 4618 488B7308 		mov	rsi, QWORD PTR 8[rbx]	# _2->blocksize_bits, _2->blocksize_bits
 12450              	# sieve_extend.c:1194:         passes++;
1193:sieve_extend.c ****         delete_sieve(sieve_instance);
1194:sieve_extend.c ****         passes++;
 12451              		.loc 1 1194 15 view .LVU4265
 12452 461c 4983C401 		add	r12, 1	# passes,
 12453              	.LVL742:
 12454              	# sieve_extend.c:1192:         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, t
1192:sieve_extend.c ****         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, tuning_result[tuning_res
 12455              		.loc 1 1192 26 view .LVU4266
 12456 4620 488B3B   		mov	rdi, QWORD PTR [rbx]	#, _2->maxints
 12457 4623 E8C8F2FF 		call	sieve	#
 12457      FF
 12458              	.LVL743:
 12459              	.LBB584:
GAS LISTING /tmp/ccBvFgp2.s 			page 338


 12460              	.LBB585:
 12461              	# sieve_extend.c:117:     free(sieve->bitarray);
 117:sieve_extend.c ****     free(sieve);
 12462              		.loc 1 117 5 view .LVU4267
 12463 4628 488B38   		mov	rdi, QWORD PTR [rax]	#, sieve_instance_37->bitarray
 12464              	.LBE585:
 12465              	.LBE584:
 12466              	# sieve_extend.c:1192:         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, t
1192:sieve_extend.c ****         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, tuning_result[tuning_res
 12467              		.loc 1 1192 26 view .LVU4268
 12468 462b 4889C5   		mov	rbp, rax	# sieve_instance, tmp151
 12469              	.LVL744:
1193:sieve_extend.c ****         delete_sieve(sieve_instance);
 12470              		.loc 1 1193 9 is_stmt 1 view .LVU4269
 12471              	.LBB587:
 12472              	.LBI584:
 116:sieve_extend.c ****     free(sieve->bitarray);
 12473              		.loc 1 116 13 view .LVU4270
 12474              	.LBB586:
 117:sieve_extend.c ****     free(sieve);
 12475              		.loc 1 117 5 view .LVU4271
 12476 462e E8000000 		call	free@PLT	#
 12476      00
 12477              	.LVL745:
 118:sieve_extend.c **** }
 12478              		.loc 1 118 5 view .LVU4272
 12479 4633 4889EF   		mov	rdi, rbp	#, sieve_instance
 12480 4636 E8000000 		call	free@PLT	#
 12480      00
 12481              	.LVL746:
 118:sieve_extend.c **** }
 12482              		.loc 1 118 5 is_stmt 0 view .LVU4273
 12483              	.LBE586:
 12484              	.LBE587:
 12485              		.loc 1 1194 9 is_stmt 1 view .LVU4274
1195:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 12486              		.loc 1 1195 9 view .LVU4275
 12487 463b 488D7424 		lea	rsi, 16[rsp]	# tmp122,
 12487      10
 12488 4640 BF010000 		mov	edi, 1	#,
 12488      00
 12489 4645 E8000000 		call	clock_gettime@PLT	#
 12489      00
 12490              	.LVL747:
1196:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 12491              		.loc 1 1196 9 view .LVU4276
 12492              	# sieve_extend.c:1196:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 12493              		.loc 1 1196 58 is_stmt 0 view .LVU4277
 12494 464a C4E1FB2A 		vcvtsi2sd	xmm0, xmm0, QWORD PTR 24[rsp]	# tmp123, end_time.tv_nsec
 12494      442418
 12495              	# sieve_extend.c:1196:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 12496              		.loc 1 1196 64 view .LVU4278
 12497 4651 C4E1F32A 		vcvtsi2sd	xmm1, xmm1, QWORD PTR [rsp]	# tmp124, start_time.tv_sec
 12497      0C24
 12498              	# sieve_extend.c:1196:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 12499              		.loc 1 1196 104 view .LVU4279
 12500 4657 C4E1E32A 		vcvtsi2sd	xmm3, xmm3, QWORD PTR 8[rsp]	# tmp126, start_time.tv_nsec
GAS LISTING /tmp/ccBvFgp2.s 			page 339


 12500      5C2408
 12501              	# sieve_extend.c:1196:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 12502              		.loc 1 1196 40 view .LVU4280
 12503 465e C4E1EB2A 		vcvtsi2sd	xmm2, xmm2, QWORD PTR 16[rsp]	# tmp127, end_time.tv_sec
 12503      542410
 12504 4665 C4E2F19B 		vfmsub132sd	xmm0, xmm1, QWORD PTR .LC8[rip]	# _60, tmp124,
 12504      05000000 
 12504      00
 12505 466e C4E2E99D 		vfnmadd132sd	xmm3, xmm2, QWORD PTR .LC8[rip]	# _61, tmp127,
 12505      1D000000 
 12505      00
 12506              	# sieve_extend.c:1196:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 12507              		.loc 1 1196 22 view .LVU4281
 12508 4677 C5FB58E3 		vaddsd	xmm4, xmm0, xmm3	# elapsed_time, _60, _61
 12509              	.LVL748:
1191:sieve_extend.c ****         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, tuning_result[tuning_res
 12510              		.loc 1 1191 11 is_stmt 1 view .LVU4282
 12511 467b C5F92F63 		vcomisd	xmm4, QWORD PTR 64[rbx]	# elapsed_time, _2->sample_duration
 12511      40
 12512 4680 7706     		ja	.L1108	#,
 12513              	.LVL749:
 12514              	.L1093:
 12515              	# sieve_extend.c:1191:     while (elapsed_time <= tuning_result[tuning_result_index].sample_duratio
1191:sieve_extend.c ****         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, tuning_result[tuning_res
 12516              		.loc 1 1191 79 is_stmt 0 discriminator 1 view .LVU4283
 12517 4682 4C396338 		cmp	QWORD PTR 56[rbx], r12	# _2->sample_max, passes
 12518 4686 7790     		ja	.L1097	#,
 12519              	.L1108:
1191:sieve_extend.c ****         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, tuning_result[tuning_res
 12520              		.loc 1 1191 79 discriminator 1 view .LVU4284
 12521 4688 C4C1CB2A 		vcvtsi2sd	xmm6, xmm6, r12	# tmp133, passes
 12521      F4
 12522 468d 4D85E4   		test	r12, r12	# passes
 12523 4690 7919     		jns	.L1099	#,
1191:sieve_extend.c ****         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, tuning_result[tuning_res
 12524              		.loc 1 1191 79 discriminator 1 view .LVU4285
 12525 4692 4C89E6   		mov	rsi, r12	# tmp135, passes
 12526 4695 4D89E1   		mov	r9, r12	# tmp136, passes
 12527 4698 48D1EE   		shr	rsi	# tmp135
 12528 469b 4183E101 		and	r9d, 1	# tmp136,
 12529 469f 4C09CE   		or	rsi, r9	# tmp148, tmp136
 12530 46a2 C4E1D32A 		vcvtsi2sd	xmm5, xmm5, rsi	# tmp134, tmp148
 12530      EE
 12531 46a7 C5D358F5 		vaddsd	xmm6, xmm5, xmm5	# tmp133, tmp134, tmp134
 12532              	.L1099:
1191:sieve_extend.c ****         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, tuning_result[tuning_res
 12533              		.loc 1 1191 79 discriminator 1 view .LVU4286
 12534 46ab C5CB5EFC 		vdivsd	xmm7, xmm6, xmm4	# _58, tmp133, elapsed_time
 12535              	.LVL750:
 12536              	.L1094:
1197:sieve_extend.c ****     }
1198:sieve_extend.c ****     tuning_result[tuning_result_index].passes = passes;
 12537              		.loc 1 1198 5 is_stmt 1 view .LVU4287
 12538              	# sieve_extend.c:1198:     tuning_result[tuning_result_index].passes = passes;
 12539              		.loc 1 1198 47 is_stmt 0 view .LVU4288
 12540 46af 4C896348 		mov	QWORD PTR 72[rbx], r12	# _2->passes, passes
1199:sieve_extend.c ****     tuning_result[tuning_result_index].elapsed_time = elapsed_time;
GAS LISTING /tmp/ccBvFgp2.s 			page 340


 12541              		.loc 1 1199 5 is_stmt 1 view .LVU4289
 12542              	# sieve_extend.c:1199:     tuning_result[tuning_result_index].elapsed_time = elapsed_time;
 12543              		.loc 1 1199 53 is_stmt 0 view .LVU4290
 12544 46b3 C5FB1163 		vmovsd	QWORD PTR 80[rbx], xmm4	# _2->elapsed_time, elapsed_time
 12544      50
1200:sieve_extend.c ****     tuning_result[tuning_result_index].avg = passes/elapsed_time;
 12545              		.loc 1 1200 5 is_stmt 1 view .LVU4291
 12546              	# sieve_extend.c:1200:     tuning_result[tuning_result_index].avg = passes/elapsed_time;
 12547              		.loc 1 1200 44 is_stmt 0 view .LVU4292
 12548 46b8 C5FB117B 		vmovsd	QWORD PTR 88[rbx], xmm7	# _2->avg, _58
 12548      58
 12549              	# sieve_extend.c:1201: }
1201:sieve_extend.c **** }
 12550              		.loc 1 1201 1 view .LVU4293
 12551 46bd 488B4424 		mov	rax, QWORD PTR 40[rsp]	# tmp161, D.7030
 12551      28
 12552 46c2 64483304 		xor	rax, QWORD PTR fs:40	# tmp161, MEM[(<address-space-1> long unsigned int *)40B]
 12552      25280000 
 12552      00
 12553 46cb 750A     		jne	.L1109	#,
 12554 46cd 488D6424 		lea	rsp, 48[rsp]	#,
 12554      30
 12555              		.cfi_remember_state
 12556              		.cfi_def_cfa_offset 32
 12557 46d2 5B       		pop	rbx	#
 12558              		.cfi_def_cfa_offset 24
 12559 46d3 5D       		pop	rbp	#
 12560              		.cfi_def_cfa_offset 16
 12561 46d4 415C     		pop	r12	#
 12562              		.cfi_def_cfa_offset 8
 12563 46d6 C3       		ret	
 12564              	.L1109:
 12565              		.cfi_restore_state
 12566 46d7 E8000000 		call	__stack_chk_fail@PLT	#
 12566      00
 12567              	.LVL751:
 12568              		.cfi_endproc
 12569              	.LFE83:
 12571 46dc 0F1F4000 		.p2align 4
 12572              		.globl	shiftvec
 12574              	shiftvec:
 12575              	.LVL752:
 12576              	.LFB67:
 640:sieve_extend.c ****     int i = 0;
 12577              		.loc 1 640 1 is_stmt 1 view -0
 12578              		.cfi_startproc
 640:sieve_extend.c ****     int i = 0;
 12579              		.loc 1 640 1 is_stmt 0 view .LVU4295
 12580 46e0 F30F1EFA 		endbr64	
 641:sieve_extend.c ****     // MSVC: use steps of 2 for SSE, 4 for AVX2, 8 for AVX512
 12581              		.loc 1 641 5 is_stmt 1 view .LVU4296
 12582              	.LVL753:
 643:sieve_extend.c ****     {
 12583              		.loc 1 643 5 view .LVU4297
 643:sieve_extend.c ****     {
 12584              		.loc 1 643 12 view .LVU4298
 12585              	# sieve_extend.c:643:     for (; i+4 < size; i+=4,dst+=4,src+=4)
GAS LISTING /tmp/ccBvFgp2.s 			page 341


 643:sieve_extend.c ****     {
 12586              		.loc 1 643 5 is_stmt 0 view .LVU4299
 12587 46e4 83FA04   		cmp	edx, 4	# size,
 12588 46e7 0F8E9D03 		jle	.L1155	#,
 12588      0000
 12589 46ed 41BB4000 		mov	r11d, 64	# tmp130,
 12589      0000
 12590 46f3 448D42FB 		lea	r8d, -5[rdx]	# tmp131,
 12591 46f7 4489D8   		mov	eax, r11d	# _4, tmp130
 12592 46fa C5F96EC9 		vmovd	xmm1, ecx	# shift, shift
 12593 46fe 29C8     		sub	eax, ecx	# _4, shift
 12594              	.LBB588:
 12595              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12596              		.loc 1 646 25 view .LVU4300
 12597 4700 C4E3FD00 		vpermq	ymm2, YMMWORD PTR [rsi], 85	# vect__102.596, MEM[base: src_35(D), index: ivtmp.610_114, off
 12597      1655
 12598              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12599              		.loc 1 646 34 view .LVU4301
 12600 4706 C5FE6F26 		vmovdqu	ymm4, YMMWORD PTR [rsi]	# tmp269, MEM[base: src_35(D), index: ivtmp.610_114, offset: 0B]
 12601 470a C4E1F96E 		vmovq	xmm0, rax	# _4, _4
 12601      C0
 12602 470f 41C1E802 		shr	r8d, 2	# _25,
 12603 4713 41B90100 		mov	r9d, 1	# ivtmp.607,
 12603      0000
 12604              	.LBE588:
 12605              	.LBB589:
 12606              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 12607              		.loc 1 648 34 view .LVU4302
 12608 4719 C5EDD3E8 		vpsrlq	ymm5, ymm2, xmm0	# vect__57.597, vect__102.596, _4
 12609              	.LBE589:
 12610              	.LBB590:
 12611              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12612              		.loc 1 646 34 view .LVU4303
 12613 471d C5DDF3D9 		vpsllq	ymm3, ymm4, xmm1	# vect__104.601, tmp269, shift
 12614 4721 458D5001 		lea	r10d, 1[r8]	# tmp164,
 12615 4725 4589C3   		mov	r11d, r8d	# tmp169, _25
 12616              	.LBE590:
 12617              	.LBB591:
 12618              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 12619              		.loc 1 648 22 view .LVU4304
 12620 4728 C5D5EBF3 		vpor	ymm6, ymm5, ymm3	# vect__58.602, vect__57.597, vect__104.601
 12621 472c 4183E307 		and	r11d, 7	# tmp169,
 12622              	.LVL754:
 648:sieve_extend.c ****     }
 12623              		.loc 1 648 22 view .LVU4305
 12624              	.LBE591:
 12625              	.LBB592:
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12626              		.loc 1 645 25 is_stmt 1 view .LVU4306
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12627              		.loc 1 646 13 view .LVU4307
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
GAS LISTING /tmp/ccBvFgp2.s 			page 342


 12628              		.loc 1 645 32 view .LVU4308
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12629              		.loc 1 645 25 view .LVU4309
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12630              		.loc 1 646 13 view .LVU4310
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12631              		.loc 1 645 32 view .LVU4311
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12632              		.loc 1 645 25 view .LVU4312
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12633              		.loc 1 646 13 view .LVU4313
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12634              		.loc 1 645 32 view .LVU4314
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12635              		.loc 1 645 25 view .LVU4315
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12636              		.loc 1 646 13 view .LVU4316
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12637              		.loc 1 645 32 view .LVU4317
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12638              		.loc 1 645 25 view .LVU4318
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12639              		.loc 1 645 25 is_stmt 0 view .LVU4319
 12640              	.LBE592:
 12641              	.LBB593:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12642              		.loc 1 647 25 is_stmt 1 view .LVU4320
 648:sieve_extend.c ****     }
 12643              		.loc 1 648 13 view .LVU4321
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12644              		.loc 1 647 32 view .LVU4322
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12645              		.loc 1 647 25 view .LVU4323
 648:sieve_extend.c ****     }
 12646              		.loc 1 648 13 view .LVU4324
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12647              		.loc 1 647 32 view .LVU4325
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12648              		.loc 1 647 25 view .LVU4326
 648:sieve_extend.c ****     }
 12649              		.loc 1 648 13 view .LVU4327
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12650              		.loc 1 647 32 view .LVU4328
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12651              		.loc 1 647 25 view .LVU4329
 648:sieve_extend.c ****     }
 12652              		.loc 1 648 13 view .LVU4330
 12653 4730 4183FA01 		cmp	r10d, 1	# tmp164,
 12654 4734 B8200000 		mov	eax, 32	# ivtmp.610,
 12654      00
 12655              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 12656              		.loc 1 648 22 is_stmt 0 view .LVU4331
 12657 4739 C5FE7F37 		vmovdqu	YMMWORD PTR [rdi], ymm6	# MEM[base: dst_34(D), index: ivtmp.610_114, offset: 0B], vect__58
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12658              		.loc 1 647 32 is_stmt 1 view .LVU4332
 12659              	.LVL755:
GAS LISTING /tmp/ccBvFgp2.s 			page 343


 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12660              		.loc 1 647 25 view .LVU4333
 12661              	.LBE593:
 643:sieve_extend.c ****     {
 12662              		.loc 1 643 24 view .LVU4334
 643:sieve_extend.c ****     {
 12663              		.loc 1 643 12 view .LVU4335
 12664 473d 0F866002 		jbe	.L1153	#,
 12664      0000
 12665 4743 4585DB   		test	r11d, r11d	# tmp169
 12666 4746 0F841E01 		je	.L1113	#,
 12666      0000
 12667 474c 4183FB01 		cmp	r11d, 1	# tmp169,
 12668 4750 0F84E500 		je	.L1140	#,
 12668      0000
 12669 4756 4183FB02 		cmp	r11d, 2	# tmp169,
 12670 475a 0F84B600 		je	.L1141	#,
 12670      0000
 12671 4760 4183FB03 		cmp	r11d, 3	# tmp169,
 12672 4764 0F848700 		je	.L1142	#,
 12672      0000
 12673 476a 4183FB04 		cmp	r11d, 4	# tmp169,
 12674 476e 745B     		je	.L1143	#,
 12675 4770 4183FB05 		cmp	r11d, 5	# tmp169,
 12676 4774 7430     		je	.L1144	#,
 12677 4776 4183FB06 		cmp	r11d, 6	# tmp169,
 12678 477a 0F85DC02 		jne	.L1156	#,
 12678      0000
 12679              	.L1145:
 12680              	.LVL756:
 12681              	.LBB594:
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12682              		.loc 1 645 25 view .LVU4336
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12683              		.loc 1 646 13 view .LVU4337
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12684              		.loc 1 645 32 view .LVU4338
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12685              		.loc 1 645 25 view .LVU4339
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12686              		.loc 1 646 13 view .LVU4340
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12687              		.loc 1 645 32 view .LVU4341
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12688              		.loc 1 645 25 view .LVU4342
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12689              		.loc 1 646 13 view .LVU4343
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12690              		.loc 1 645 32 view .LVU4344
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12691              		.loc 1 645 25 view .LVU4345
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12692              		.loc 1 646 13 view .LVU4346
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12693              		.loc 1 645 32 view .LVU4347
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12694              		.loc 1 645 25 view .LVU4348
GAS LISTING /tmp/ccBvFgp2.s 			page 344


 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12695              		.loc 1 645 25 is_stmt 0 view .LVU4349
 12696              	.LBE594:
 12697              	.LBB595:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12698              		.loc 1 647 25 is_stmt 1 view .LVU4350
 648:sieve_extend.c ****     }
 12699              		.loc 1 648 13 view .LVU4351
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12700              		.loc 1 647 32 view .LVU4352
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12701              		.loc 1 647 25 view .LVU4353
 648:sieve_extend.c ****     }
 12702              		.loc 1 648 13 view .LVU4354
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12703              		.loc 1 647 32 view .LVU4355
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12704              		.loc 1 647 25 view .LVU4356
 648:sieve_extend.c ****     }
 12705              		.loc 1 648 13 view .LVU4357
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12706              		.loc 1 647 32 view .LVU4358
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12707              		.loc 1 647 25 view .LVU4359
 648:sieve_extend.c ****     }
 12708              		.loc 1 648 13 view .LVU4360
 12709              	.LBE595:
 12710              	.LBB596:
 12711              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12712              		.loc 1 646 25 is_stmt 0 view .LVU4361
 12713 4780 C463FD00 		vpermq	ymm12, YMMWORD PTR [rsi+rax], 85	# vect__102.596, MEM[base: src_35(D), index: ivtmp.610_114
 12713      240655
 12714 4787 4183C101 		add	r9d, 1	# ivtmp.607,
 12715              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12716              		.loc 1 646 34 view .LVU4362
 12717 478b C57E6F34 		vmovdqu	ymm14, YMMWORD PTR [rsi+rax]	# tmp279, MEM[base: src_35(D), index: ivtmp.610_114, offset: 
 12717      06
 12718              	.LBE596:
 12719              	.LBB597:
 12720              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 12721              		.loc 1 648 34 view .LVU4363
 12722 4790 C51DD3E8 		vpsrlq	ymm13, ymm12, xmm0	# vect__57.597, vect__102.596, _4
 12723              	.LBE597:
 12724              	.LBB598:
 12725              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12726              		.loc 1 646 34 view .LVU4364
 12727 4794 C50DF3F9 		vpsllq	ymm15, ymm14, xmm1	# vect__104.601, tmp279, shift
 12728              	.LBE598:
 12729              	.LBB599:
 12730              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 12731              		.loc 1 648 22 view .LVU4365
 12732 4798 C4C115EB 		vpor	ymm2, ymm13, ymm15	# vect__58.602, vect__57.597, vect__104.601
GAS LISTING /tmp/ccBvFgp2.s 			page 345


 12732      D7
 12733 479d C5FE7F14 		vmovdqu	YMMWORD PTR [rdi+rax], ymm2	# MEM[base: dst_34(D), index: ivtmp.610_114, offset: 0B], vect
 12733      07
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12734              		.loc 1 647 32 is_stmt 1 view .LVU4366
 12735              	.LVL757:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12736              		.loc 1 647 25 view .LVU4367
 12737              	.LBE599:
 643:sieve_extend.c ****     {
 12738              		.loc 1 643 24 view .LVU4368
 643:sieve_extend.c ****     {
 12739              		.loc 1 643 12 view .LVU4369
 12740 47a2 4883C020 		add	rax, 32	# ivtmp.610,
 12741              	.L1144:
 12742              	.LVL758:
 12743              	.LBB600:
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12744              		.loc 1 645 25 view .LVU4370
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12745              		.loc 1 646 13 view .LVU4371
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12746              		.loc 1 645 32 view .LVU4372
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12747              		.loc 1 645 25 view .LVU4373
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12748              		.loc 1 646 13 view .LVU4374
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12749              		.loc 1 645 32 view .LVU4375
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12750              		.loc 1 645 25 view .LVU4376
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12751              		.loc 1 646 13 view .LVU4377
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12752              		.loc 1 645 32 view .LVU4378
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12753              		.loc 1 645 25 view .LVU4379
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12754              		.loc 1 646 13 view .LVU4380
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12755              		.loc 1 645 32 view .LVU4381
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12756              		.loc 1 645 25 view .LVU4382
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12757              		.loc 1 645 25 is_stmt 0 view .LVU4383
 12758              	.LBE600:
 12759              	.LBB601:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12760              		.loc 1 647 25 is_stmt 1 view .LVU4384
 648:sieve_extend.c ****     }
 12761              		.loc 1 648 13 view .LVU4385
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12762              		.loc 1 647 32 view .LVU4386
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12763              		.loc 1 647 25 view .LVU4387
 648:sieve_extend.c ****     }
 12764              		.loc 1 648 13 view .LVU4388
GAS LISTING /tmp/ccBvFgp2.s 			page 346


 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12765              		.loc 1 647 32 view .LVU4389
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12766              		.loc 1 647 25 view .LVU4390
 648:sieve_extend.c ****     }
 12767              		.loc 1 648 13 view .LVU4391
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12768              		.loc 1 647 32 view .LVU4392
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12769              		.loc 1 647 25 view .LVU4393
 648:sieve_extend.c ****     }
 12770              		.loc 1 648 13 view .LVU4394
 12771              	.LBE601:
 12772              	.LBB602:
 12773              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12774              		.loc 1 646 25 is_stmt 0 view .LVU4395
 12775 47a6 C4E3FD00 		vpermq	ymm5, YMMWORD PTR [rsi+rax], 85	# vect__102.596, MEM[base: src_35(D), index: ivtmp.610_114,
 12775      2C0655
 12776 47ad 4183C101 		add	r9d, 1	# ivtmp.607,
 12777              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12778              		.loc 1 646 34 view .LVU4396
 12779 47b1 C5FE6F1C 		vmovdqu	ymm3, YMMWORD PTR [rsi+rax]	# tmp280, MEM[base: src_35(D), index: ivtmp.610_114, offset: 0
 12779      06
 12780              	.LBE602:
 12781              	.LBB603:
 12782              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 12783              		.loc 1 648 34 view .LVU4397
 12784 47b6 C5D5D3E0 		vpsrlq	ymm4, ymm5, xmm0	# vect__57.597, vect__102.596, _4
 12785              	.LBE603:
 12786              	.LBB604:
 12787              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12788              		.loc 1 646 34 view .LVU4398
 12789 47ba C5E5F3F1 		vpsllq	ymm6, ymm3, xmm1	# vect__104.601, tmp280, shift
 12790              	.LBE604:
 12791              	.LBB605:
 12792              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 12793              		.loc 1 648 22 view .LVU4399
 12794 47be C5DDEBFE 		vpor	ymm7, ymm4, ymm6	# vect__58.602, vect__57.597, vect__104.601
 12795 47c2 C5FE7F3C 		vmovdqu	YMMWORD PTR [rdi+rax], ymm7	# MEM[base: dst_34(D), index: ivtmp.610_114, offset: 0B], vect
 12795      07
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12796              		.loc 1 647 32 is_stmt 1 view .LVU4400
 12797              	.LVL759:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12798              		.loc 1 647 25 view .LVU4401
 12799              	.LBE605:
 643:sieve_extend.c ****     {
 12800              		.loc 1 643 24 view .LVU4402
 643:sieve_extend.c ****     {
 12801              		.loc 1 643 12 view .LVU4403
 12802 47c7 4883C020 		add	rax, 32	# ivtmp.610,
 12803              	.L1143:
GAS LISTING /tmp/ccBvFgp2.s 			page 347


 12804              	.LVL760:
 12805              	.LBB606:
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12806              		.loc 1 645 25 view .LVU4404
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12807              		.loc 1 646 13 view .LVU4405
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12808              		.loc 1 645 32 view .LVU4406
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12809              		.loc 1 645 25 view .LVU4407
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12810              		.loc 1 646 13 view .LVU4408
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12811              		.loc 1 645 32 view .LVU4409
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12812              		.loc 1 645 25 view .LVU4410
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12813              		.loc 1 646 13 view .LVU4411
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12814              		.loc 1 645 32 view .LVU4412
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12815              		.loc 1 645 25 view .LVU4413
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12816              		.loc 1 646 13 view .LVU4414
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12817              		.loc 1 645 32 view .LVU4415
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12818              		.loc 1 645 25 view .LVU4416
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12819              		.loc 1 645 25 is_stmt 0 view .LVU4417
 12820              	.LBE606:
 12821              	.LBB607:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12822              		.loc 1 647 25 is_stmt 1 view .LVU4418
 648:sieve_extend.c ****     }
 12823              		.loc 1 648 13 view .LVU4419
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12824              		.loc 1 647 32 view .LVU4420
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12825              		.loc 1 647 25 view .LVU4421
 648:sieve_extend.c ****     }
 12826              		.loc 1 648 13 view .LVU4422
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12827              		.loc 1 647 32 view .LVU4423
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12828              		.loc 1 647 25 view .LVU4424
 648:sieve_extend.c ****     }
 12829              		.loc 1 648 13 view .LVU4425
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12830              		.loc 1 647 32 view .LVU4426
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12831              		.loc 1 647 25 view .LVU4427
 648:sieve_extend.c ****     }
 12832              		.loc 1 648 13 view .LVU4428
 12833              	.LBE607:
 12834              	.LBB608:
 12835              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
GAS LISTING /tmp/ccBvFgp2.s 			page 348


 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12836              		.loc 1 646 25 is_stmt 0 view .LVU4429
 12837 47cb C463FD00 		vpermq	ymm8, YMMWORD PTR [rsi+rax], 85	# vect__102.596, MEM[base: src_35(D), index: ivtmp.610_114,
 12837      040655
 12838 47d2 4183C101 		add	r9d, 1	# ivtmp.607,
 12839              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12840              		.loc 1 646 34 view .LVU4430
 12841 47d6 C57E6F14 		vmovdqu	ymm10, YMMWORD PTR [rsi+rax]	# tmp281, MEM[base: src_35(D), index: ivtmp.610_114, offset: 
 12841      06
 12842              	.LBE608:
 12843              	.LBB609:
 12844              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 12845              		.loc 1 648 34 view .LVU4431
 12846 47db C53DD3C8 		vpsrlq	ymm9, ymm8, xmm0	# vect__57.597, vect__102.596, _4
 12847              	.LBE609:
 12848              	.LBB610:
 12849              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12850              		.loc 1 646 34 view .LVU4432
 12851 47df C52DF3D9 		vpsllq	ymm11, ymm10, xmm1	# vect__104.601, tmp281, shift
 12852              	.LBE610:
 12853              	.LBB611:
 12854              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 12855              		.loc 1 648 22 view .LVU4433
 12856 47e3 C44135EB 		vpor	ymm12, ymm9, ymm11	# vect__58.602, vect__57.597, vect__104.601
 12856      E3
 12857 47e8 C57E7F24 		vmovdqu	YMMWORD PTR [rdi+rax], ymm12	# MEM[base: dst_34(D), index: ivtmp.610_114, offset: 0B], vec
 12857      07
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12858              		.loc 1 647 32 is_stmt 1 view .LVU4434
 12859              	.LVL761:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12860              		.loc 1 647 25 view .LVU4435
 12861              	.LBE611:
 643:sieve_extend.c ****     {
 12862              		.loc 1 643 24 view .LVU4436
 643:sieve_extend.c ****     {
 12863              		.loc 1 643 12 view .LVU4437
 12864 47ed 4883C020 		add	rax, 32	# ivtmp.610,
 12865              	.L1142:
 12866              	.LVL762:
 12867              	.LBB612:
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12868              		.loc 1 645 25 view .LVU4438
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12869              		.loc 1 646 13 view .LVU4439
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12870              		.loc 1 645 32 view .LVU4440
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12871              		.loc 1 645 25 view .LVU4441
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12872              		.loc 1 646 13 view .LVU4442
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12873              		.loc 1 645 32 view .LVU4443
GAS LISTING /tmp/ccBvFgp2.s 			page 349


 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12874              		.loc 1 645 25 view .LVU4444
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12875              		.loc 1 646 13 view .LVU4445
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12876              		.loc 1 645 32 view .LVU4446
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12877              		.loc 1 645 25 view .LVU4447
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12878              		.loc 1 646 13 view .LVU4448
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12879              		.loc 1 645 32 view .LVU4449
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12880              		.loc 1 645 25 view .LVU4450
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12881              		.loc 1 645 25 is_stmt 0 view .LVU4451
 12882              	.LBE612:
 12883              	.LBB613:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12884              		.loc 1 647 25 is_stmt 1 view .LVU4452
 648:sieve_extend.c ****     }
 12885              		.loc 1 648 13 view .LVU4453
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12886              		.loc 1 647 32 view .LVU4454
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12887              		.loc 1 647 25 view .LVU4455
 648:sieve_extend.c ****     }
 12888              		.loc 1 648 13 view .LVU4456
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12889              		.loc 1 647 32 view .LVU4457
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12890              		.loc 1 647 25 view .LVU4458
 648:sieve_extend.c ****     }
 12891              		.loc 1 648 13 view .LVU4459
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12892              		.loc 1 647 32 view .LVU4460
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12893              		.loc 1 647 25 view .LVU4461
 648:sieve_extend.c ****     }
 12894              		.loc 1 648 13 view .LVU4462
 12895              	.LBE613:
 12896              	.LBB614:
 12897              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12898              		.loc 1 646 25 is_stmt 0 view .LVU4463
 12899 47f1 C463FD00 		vpermq	ymm13, YMMWORD PTR [rsi+rax], 85	# vect__102.596, MEM[base: src_35(D), index: ivtmp.610_114
 12899      2C0655
 12900 47f8 4183C101 		add	r9d, 1	# ivtmp.607,
 12901              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12902              		.loc 1 646 34 view .LVU4464
 12903 47fc C57E6F3C 		vmovdqu	ymm15, YMMWORD PTR [rsi+rax]	# tmp282, MEM[base: src_35(D), index: ivtmp.610_114, offset: 
 12903      06
 12904              	.LBE614:
 12905              	.LBB615:
 12906              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
GAS LISTING /tmp/ccBvFgp2.s 			page 350


 12907              		.loc 1 648 34 view .LVU4465
 12908 4801 C515D3F0 		vpsrlq	ymm14, ymm13, xmm0	# vect__57.597, vect__102.596, _4
 12909              	.LBE615:
 12910              	.LBB616:
 12911              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12912              		.loc 1 646 34 view .LVU4466
 12913 4805 C585F3D1 		vpsllq	ymm2, ymm15, xmm1	# vect__104.601, tmp282, shift
 12914              	.LBE616:
 12915              	.LBB617:
 12916              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 12917              		.loc 1 648 22 view .LVU4467
 12918 4809 C58DEBEA 		vpor	ymm5, ymm14, ymm2	# vect__58.602, vect__57.597, vect__104.601
 12919 480d C5FE7F2C 		vmovdqu	YMMWORD PTR [rdi+rax], ymm5	# MEM[base: dst_34(D), index: ivtmp.610_114, offset: 0B], vect
 12919      07
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12920              		.loc 1 647 32 is_stmt 1 view .LVU4468
 12921              	.LVL763:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12922              		.loc 1 647 25 view .LVU4469
 12923              	.LBE617:
 643:sieve_extend.c ****     {
 12924              		.loc 1 643 24 view .LVU4470
 643:sieve_extend.c ****     {
 12925              		.loc 1 643 12 view .LVU4471
 12926 4812 4883C020 		add	rax, 32	# ivtmp.610,
 12927              	.L1141:
 12928              	.LVL764:
 12929              	.LBB618:
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12930              		.loc 1 645 25 view .LVU4472
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12931              		.loc 1 646 13 view .LVU4473
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12932              		.loc 1 645 32 view .LVU4474
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12933              		.loc 1 645 25 view .LVU4475
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12934              		.loc 1 646 13 view .LVU4476
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12935              		.loc 1 645 32 view .LVU4477
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12936              		.loc 1 645 25 view .LVU4478
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12937              		.loc 1 646 13 view .LVU4479
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12938              		.loc 1 645 32 view .LVU4480
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12939              		.loc 1 645 25 view .LVU4481
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12940              		.loc 1 646 13 view .LVU4482
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12941              		.loc 1 645 32 view .LVU4483
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12942              		.loc 1 645 25 view .LVU4484
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
GAS LISTING /tmp/ccBvFgp2.s 			page 351


 12943              		.loc 1 645 25 is_stmt 0 view .LVU4485
 12944              	.LBE618:
 12945              	.LBB619:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12946              		.loc 1 647 25 is_stmt 1 view .LVU4486
 648:sieve_extend.c ****     }
 12947              		.loc 1 648 13 view .LVU4487
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12948              		.loc 1 647 32 view .LVU4488
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12949              		.loc 1 647 25 view .LVU4489
 648:sieve_extend.c ****     }
 12950              		.loc 1 648 13 view .LVU4490
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12951              		.loc 1 647 32 view .LVU4491
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12952              		.loc 1 647 25 view .LVU4492
 648:sieve_extend.c ****     }
 12953              		.loc 1 648 13 view .LVU4493
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12954              		.loc 1 647 32 view .LVU4494
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12955              		.loc 1 647 25 view .LVU4495
 648:sieve_extend.c ****     }
 12956              		.loc 1 648 13 view .LVU4496
 12957              	.LBE619:
 12958              	.LBB620:
 12959              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12960              		.loc 1 646 25 is_stmt 0 view .LVU4497
 12961 4816 C4E3FD00 		vpermq	ymm4, YMMWORD PTR [rsi+rax], 85	# vect__102.596, MEM[base: src_35(D), index: ivtmp.610_114,
 12961      240655
 12962 481d 4183C101 		add	r9d, 1	# ivtmp.607,
 12963              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12964              		.loc 1 646 34 view .LVU4498
 12965 4821 C5FE6F1C 		vmovdqu	ymm3, YMMWORD PTR [rsi+rax]	# tmp283, MEM[base: src_35(D), index: ivtmp.610_114, offset: 0
 12965      06
 12966              	.LBE620:
 12967              	.LBB621:
 12968              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 12969              		.loc 1 648 34 view .LVU4499
 12970 4826 C5DDD3F0 		vpsrlq	ymm6, ymm4, xmm0	# vect__57.597, vect__102.596, _4
 12971              	.LBE621:
 12972              	.LBB622:
 12973              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12974              		.loc 1 646 34 view .LVU4500
 12975 482a C5E5F3F9 		vpsllq	ymm7, ymm3, xmm1	# vect__104.601, tmp283, shift
 12976              	.LBE622:
 12977              	.LBB623:
 12978              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 12979              		.loc 1 648 22 view .LVU4501
 12980 482e C54DEBC7 		vpor	ymm8, ymm6, ymm7	# vect__58.602, vect__57.597, vect__104.601
 12981 4832 C57E7F04 		vmovdqu	YMMWORD PTR [rdi+rax], ymm8	# MEM[base: dst_34(D), index: ivtmp.610_114, offset: 0B], vect
GAS LISTING /tmp/ccBvFgp2.s 			page 352


 12981      07
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12982              		.loc 1 647 32 is_stmt 1 view .LVU4502
 12983              	.LVL765:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 12984              		.loc 1 647 25 view .LVU4503
 12985              	.LBE623:
 643:sieve_extend.c ****     {
 12986              		.loc 1 643 24 view .LVU4504
 643:sieve_extend.c ****     {
 12987              		.loc 1 643 12 view .LVU4505
 12988 4837 4883C020 		add	rax, 32	# ivtmp.610,
 12989              	.L1140:
 12990              	.LVL766:
 12991              	.LBB624:
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12992              		.loc 1 645 25 view .LVU4506
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12993              		.loc 1 646 13 view .LVU4507
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12994              		.loc 1 645 32 view .LVU4508
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12995              		.loc 1 645 25 view .LVU4509
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12996              		.loc 1 646 13 view .LVU4510
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12997              		.loc 1 645 32 view .LVU4511
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 12998              		.loc 1 645 25 view .LVU4512
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 12999              		.loc 1 646 13 view .LVU4513
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13000              		.loc 1 645 32 view .LVU4514
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13001              		.loc 1 645 25 view .LVU4515
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13002              		.loc 1 646 13 view .LVU4516
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13003              		.loc 1 645 32 view .LVU4517
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13004              		.loc 1 645 25 view .LVU4518
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13005              		.loc 1 645 25 is_stmt 0 view .LVU4519
 13006              	.LBE624:
 13007              	.LBB625:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13008              		.loc 1 647 25 is_stmt 1 view .LVU4520
 648:sieve_extend.c ****     }
 13009              		.loc 1 648 13 view .LVU4521
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13010              		.loc 1 647 32 view .LVU4522
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13011              		.loc 1 647 25 view .LVU4523
 648:sieve_extend.c ****     }
 13012              		.loc 1 648 13 view .LVU4524
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13013              		.loc 1 647 32 view .LVU4525
GAS LISTING /tmp/ccBvFgp2.s 			page 353


 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13014              		.loc 1 647 25 view .LVU4526
 648:sieve_extend.c ****     }
 13015              		.loc 1 648 13 view .LVU4527
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13016              		.loc 1 647 32 view .LVU4528
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13017              		.loc 1 647 25 view .LVU4529
 648:sieve_extend.c ****     }
 13018              		.loc 1 648 13 view .LVU4530
 13019              	.LBE625:
 13020              	.LBB626:
 13021              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13022              		.loc 1 646 25 is_stmt 0 view .LVU4531
 13023 483b C463FD00 		vpermq	ymm9, YMMWORD PTR [rsi+rax], 85	# vect__102.596, MEM[base: src_35(D), index: ivtmp.610_114,
 13023      0C0655
 13024 4842 4183C101 		add	r9d, 1	# ivtmp.607,
 13025              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13026              		.loc 1 646 34 view .LVU4532
 13027 4846 C57E6F1C 		vmovdqu	ymm11, YMMWORD PTR [rsi+rax]	# tmp284, MEM[base: src_35(D), index: ivtmp.610_114, offset: 
 13027      06
 13028              	.LBE626:
 13029              	.LBB627:
 13030              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13031              		.loc 1 648 34 view .LVU4533
 13032 484b C535D3D0 		vpsrlq	ymm10, ymm9, xmm0	# vect__57.597, vect__102.596, _4
 13033              	.LBE627:
 13034              	.LBB628:
 13035              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13036              		.loc 1 646 34 view .LVU4534
 13037 484f C525F3E1 		vpsllq	ymm12, ymm11, xmm1	# vect__104.601, tmp284, shift
 13038              	.LBE628:
 13039              	.LBB629:
 13040              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13041              		.loc 1 648 22 view .LVU4535
 13042 4853 C4412DEB 		vpor	ymm13, ymm10, ymm12	# vect__58.602, vect__57.597, vect__104.601
 13042      EC
 13043 4858 C57E7F2C 		vmovdqu	YMMWORD PTR [rdi+rax], ymm13	# MEM[base: dst_34(D), index: ivtmp.610_114, offset: 0B], vec
 13043      07
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13044              		.loc 1 647 32 is_stmt 1 view .LVU4536
 13045              	.LVL767:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13046              		.loc 1 647 25 view .LVU4537
 13047              	.LBE629:
 643:sieve_extend.c ****     {
 13048              		.loc 1 643 24 view .LVU4538
 643:sieve_extend.c ****     {
 13049              		.loc 1 643 12 view .LVU4539
 13050 485d 4883C020 		add	rax, 32	# ivtmp.610,
 13051 4861 4539CA   		cmp	r10d, r9d	# tmp164, ivtmp.607
 13052 4864 0F863901 		jbe	.L1153	#,
GAS LISTING /tmp/ccBvFgp2.s 			page 354


 13052      0000
 13053              	.L1113:
 13054              	.LVL768:
 13055              	.LBB630:
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13056              		.loc 1 645 25 view .LVU4540
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13057              		.loc 1 646 13 view .LVU4541
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13058              		.loc 1 645 32 view .LVU4542
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13059              		.loc 1 645 25 view .LVU4543
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13060              		.loc 1 646 13 view .LVU4544
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13061              		.loc 1 645 32 view .LVU4545
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13062              		.loc 1 645 25 view .LVU4546
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13063              		.loc 1 646 13 view .LVU4547
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13064              		.loc 1 645 32 view .LVU4548
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13065              		.loc 1 645 25 view .LVU4549
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13066              		.loc 1 646 13 view .LVU4550
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13067              		.loc 1 645 32 view .LVU4551
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13068              		.loc 1 645 25 view .LVU4552
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13069              		.loc 1 645 25 is_stmt 0 view .LVU4553
 13070              	.LBE630:
 13071              	.LBB631:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13072              		.loc 1 647 25 is_stmt 1 view .LVU4554
 648:sieve_extend.c ****     }
 13073              		.loc 1 648 13 view .LVU4555
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13074              		.loc 1 647 32 view .LVU4556
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13075              		.loc 1 647 25 view .LVU4557
 648:sieve_extend.c ****     }
 13076              		.loc 1 648 13 view .LVU4558
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13077              		.loc 1 647 32 view .LVU4559
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13078              		.loc 1 647 25 view .LVU4560
 648:sieve_extend.c ****     }
 13079              		.loc 1 648 13 view .LVU4561
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13080              		.loc 1 647 32 view .LVU4562
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13081              		.loc 1 647 25 view .LVU4563
 648:sieve_extend.c ****     }
 13082              		.loc 1 648 13 view .LVU4564
 13083              	.LBE631:
GAS LISTING /tmp/ccBvFgp2.s 			page 355


 13084              	.LBB632:
 13085              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13086              		.loc 1 646 25 is_stmt 0 view .LVU4565
 13087 486a C463FD00 		vpermq	ymm14, YMMWORD PTR [rsi+rax], 85	# vect__102.596, MEM[base: src_35(D), index: ivtmp.610_114
 13087      340655
 13088 4871 C4E3FD00 		vpermq	ymm6, YMMWORD PTR 32[rsi+rax], 85	# vect__102.596, MEM[base: src_35(D), index: ivtmp.610_11
 13088      74062055 
 13089              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13090              		.loc 1 646 34 view .LVU4566
 13091 4879 C5FE6F14 		vmovdqu	ymm2, YMMWORD PTR [rsi+rax]	# tmp270, MEM[base: src_35(D), index: ivtmp.610_114, offset: 0
 13091      06
 13092              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13093              		.loc 1 646 25 view .LVU4567
 13094 487e C463FD00 		vpermq	ymm10, YMMWORD PTR 64[rsi+rax], 85	# vect__102.596, MEM[base: src_35(D), index: ivtmp.610_1
 13094      54064055 
 13095              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13096              		.loc 1 646 34 view .LVU4568
 13097 4886 C5FE6F5C 		vmovdqu	ymm3, YMMWORD PTR 32[rsi+rax]	# tmp271, MEM[base: src_35(D), index: ivtmp.610_114, offset:
 13097      0620
 13098 488c 4183C108 		add	r9d, 8	# ivtmp.607,
 13099              	.LBE632:
 13100              	.LBB633:
 13101              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13102              		.loc 1 648 34 view .LVU4569
 13103 4890 C50DD3F8 		vpsrlq	ymm15, ymm14, xmm0	# vect__57.597, vect__102.596, _4
 13104 4894 C5CDD3F8 		vpsrlq	ymm7, ymm6, xmm0	# vect__57.597, vect__102.596, _4
 13105              	.LBE633:
 13106              	.LBB634:
 13107              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13108              		.loc 1 646 34 view .LVU4570
 13109 4898 C5EDF3E9 		vpsllq	ymm5, ymm2, xmm1	# vect__104.601, tmp270, shift
 13110 489c C565F3C1 		vpsllq	ymm8, ymm3, xmm1	# vect__104.601, tmp271, shift
 13111 48a0 C57E6F64 		vmovdqu	ymm12, YMMWORD PTR 64[rsi+rax]	# tmp272, MEM[base: src_35(D), index: ivtmp.610_114, offset
 13111      0640
 13112              	.LBE634:
 13113              	.LBB635:
 13114              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13115              		.loc 1 648 22 view .LVU4571
 13116 48a6 C585EBE5 		vpor	ymm4, ymm15, ymm5	# vect__58.602, vect__57.597, vect__104.601
 13117              	.LBE635:
 13118              	.LBB636:
 13119              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13120              		.loc 1 646 34 view .LVU4572
 13121 48aa C5FE6F9C 		vmovdqu	ymm3, YMMWORD PTR 128[rsi+rax]	# tmp274, MEM[base: src_35(D), index: ivtmp.610_114, offset
 13121      06800000 
 13121      00
 13122              	.LBE636:
 13123              	.LBB637:
 13124              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
GAS LISTING /tmp/ccBvFgp2.s 			page 356


 648:sieve_extend.c ****     }
 13125              		.loc 1 648 22 view .LVU4573
 13126 48b3 C44145EB 		vpor	ymm9, ymm7, ymm8	# vect__58.602, vect__57.597, vect__104.601
 13126      C8
 13127              	.LBE637:
 13128              	.LBB638:
 13129              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13130              		.loc 1 646 25 view .LVU4574
 13131 48b8 C463FD00 		vpermq	ymm15, YMMWORD PTR 96[rsi+rax], 85	# vect__102.596, MEM[base: src_35(D), index: ivtmp.610_1
 13131      7C066055 
 13132 48c0 C4E3FD00 		vpermq	ymm7, YMMWORD PTR 128[rsi+rax], 85	# vect__102.596, MEM[base: src_35(D), index: ivtmp.610_1
 13132      BC068000 
 13132      000055
 13133              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13134              		.loc 1 646 34 view .LVU4575
 13135 48cb C5FE6F6C 		vmovdqu	ymm5, YMMWORD PTR 96[rsi+rax]	# tmp273, MEM[base: src_35(D), index: ivtmp.610_114, offset:
 13135      0660
 13136              	.LBE638:
 13137              	.LBB639:
 13138              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13139              		.loc 1 648 34 view .LVU4576
 13140 48d1 C52DD3D8 		vpsrlq	ymm11, ymm10, xmm0	# vect__57.597, vect__102.596, _4
 13141              	.LBE639:
 13142              	.LBB640:
 13143              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13144              		.loc 1 646 34 view .LVU4577
 13145 48d5 C51DF3E9 		vpsllq	ymm13, ymm12, xmm1	# vect__104.601, tmp272, shift
 13146              	.LBE640:
 13147              	.LBB641:
 13148              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13149              		.loc 1 648 34 view .LVU4578
 13150 48d9 C585D3D0 		vpsrlq	ymm2, ymm15, xmm0	# vect__57.597, vect__102.596, _4
 13151              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13152              		.loc 1 648 22 view .LVU4579
 13153 48dd C5FE7F24 		vmovdqu	YMMWORD PTR [rdi+rax], ymm4	# MEM[base: dst_34(D), index: ivtmp.610_114, offset: 0B], vect
 13153      07
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13154              		.loc 1 647 32 is_stmt 1 view .LVU4580
 13155              	.LVL769:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13156              		.loc 1 647 25 view .LVU4581
 13157              	.LBE641:
 643:sieve_extend.c ****     {
 13158              		.loc 1 643 24 view .LVU4582
 643:sieve_extend.c ****     {
 13159              		.loc 1 643 12 view .LVU4583
 13160              	.LBB642:
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13161              		.loc 1 645 25 view .LVU4584
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13162              		.loc 1 646 13 view .LVU4585
GAS LISTING /tmp/ccBvFgp2.s 			page 357


 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13163              		.loc 1 645 32 view .LVU4586
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13164              		.loc 1 645 25 view .LVU4587
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13165              		.loc 1 646 13 view .LVU4588
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13166              		.loc 1 645 32 view .LVU4589
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13167              		.loc 1 645 25 view .LVU4590
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13168              		.loc 1 646 13 view .LVU4591
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13169              		.loc 1 645 32 view .LVU4592
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13170              		.loc 1 645 25 view .LVU4593
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13171              		.loc 1 646 13 view .LVU4594
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13172              		.loc 1 645 32 view .LVU4595
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13173              		.loc 1 645 25 view .LVU4596
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13174              		.loc 1 645 25 is_stmt 0 view .LVU4597
 13175              	.LBE642:
 13176              	.LBB643:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13177              		.loc 1 647 25 is_stmt 1 view .LVU4598
 648:sieve_extend.c ****     }
 13178              		.loc 1 648 13 view .LVU4599
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13179              		.loc 1 647 32 view .LVU4600
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13180              		.loc 1 647 25 view .LVU4601
 648:sieve_extend.c ****     }
 13181              		.loc 1 648 13 view .LVU4602
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13182              		.loc 1 647 32 view .LVU4603
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13183              		.loc 1 647 25 view .LVU4604
 648:sieve_extend.c ****     }
 13184              		.loc 1 648 13 view .LVU4605
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13185              		.loc 1 647 32 view .LVU4606
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13186              		.loc 1 647 25 view .LVU4607
 648:sieve_extend.c ****     }
 13187              		.loc 1 648 13 view .LVU4608
 13188              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13189              		.loc 1 648 22 is_stmt 0 view .LVU4609
 13190 48e2 C44125EB 		vpor	ymm14, ymm11, ymm13	# vect__58.602, vect__57.597, vect__104.601
 13190      F5
 13191              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13192              		.loc 1 648 34 view .LVU4610
 13193 48e7 C545D3C0 		vpsrlq	ymm8, ymm7, xmm0	# vect__57.597, vect__102.596, _4
GAS LISTING /tmp/ccBvFgp2.s 			page 358


 13194              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13195              		.loc 1 648 22 view .LVU4611
 13196 48eb C57E7F4C 		vmovdqu	YMMWORD PTR 32[rdi+rax], ymm9	# MEM[base: dst_34(D), index: ivtmp.610_114, offset: 0B], ve
 13196      0720
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13197              		.loc 1 647 32 is_stmt 1 view .LVU4612
 13198              	.LVL770:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13199              		.loc 1 647 25 view .LVU4613
 13200              	.LBE643:
 643:sieve_extend.c ****     {
 13201              		.loc 1 643 24 view .LVU4614
 643:sieve_extend.c ****     {
 13202              		.loc 1 643 12 view .LVU4615
 13203              	.LBB644:
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13204              		.loc 1 645 25 view .LVU4616
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13205              		.loc 1 646 13 view .LVU4617
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13206              		.loc 1 645 32 view .LVU4618
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13207              		.loc 1 645 25 view .LVU4619
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13208              		.loc 1 646 13 view .LVU4620
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13209              		.loc 1 645 32 view .LVU4621
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13210              		.loc 1 645 25 view .LVU4622
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13211              		.loc 1 646 13 view .LVU4623
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13212              		.loc 1 645 32 view .LVU4624
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13213              		.loc 1 645 25 view .LVU4625
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13214              		.loc 1 646 13 view .LVU4626
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13215              		.loc 1 645 32 view .LVU4627
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13216              		.loc 1 645 25 view .LVU4628
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13217              		.loc 1 645 25 is_stmt 0 view .LVU4629
 13218              	.LBE644:
 13219              	.LBB645:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13220              		.loc 1 647 25 is_stmt 1 view .LVU4630
 648:sieve_extend.c ****     }
 13221              		.loc 1 648 13 view .LVU4631
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13222              		.loc 1 647 32 view .LVU4632
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13223              		.loc 1 647 25 view .LVU4633
 648:sieve_extend.c ****     }
 13224              		.loc 1 648 13 view .LVU4634
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
GAS LISTING /tmp/ccBvFgp2.s 			page 359


 13225              		.loc 1 647 32 view .LVU4635
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13226              		.loc 1 647 25 view .LVU4636
 648:sieve_extend.c ****     }
 13227              		.loc 1 648 13 view .LVU4637
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13228              		.loc 1 647 32 view .LVU4638
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13229              		.loc 1 647 25 view .LVU4639
 648:sieve_extend.c ****     }
 13230              		.loc 1 648 13 view .LVU4640
 13231              	.LBE645:
 13232              	.LBB646:
 13233              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13234              		.loc 1 646 25 is_stmt 0 view .LVU4641
 13235 48f1 C463FD00 		vpermq	ymm11, YMMWORD PTR 160[rsi+rax], 85	# vect__102.596, MEM[base: src_35(D), index: ivtmp.610_
 13235      9C06A000 
 13235      000055
 13236              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13237              		.loc 1 646 34 view .LVU4642
 13238 48fc C5D5F3E1 		vpsllq	ymm4, ymm5, xmm1	# vect__104.601, tmp273, shift
 13239 4900 C565F3C9 		vpsllq	ymm9, ymm3, xmm1	# vect__104.601, tmp274, shift
 13240 4904 C57E6FAC 		vmovdqu	ymm13, YMMWORD PTR 160[rsi+rax]	# tmp275, MEM[base: src_35(D), index: ivtmp.610_114, offse
 13240      06A00000 
 13240      00
 13241              	.LBE646:
 13242              	.LBB647:
 13243              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13244              		.loc 1 648 22 view .LVU4643
 13245 490d C5EDEBF4 		vpor	ymm6, ymm2, ymm4	# vect__58.602, vect__57.597, vect__104.601
 13246              	.LBE647:
 13247              	.LBB648:
 13248              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13249              		.loc 1 646 34 view .LVU4644
 13250 4911 C5FE6F9C 		vmovdqu	ymm3, YMMWORD PTR 224[rsi+rax]	# tmp277, MEM[base: src_35(D), index: ivtmp.610_114, offset
 13250      06E00000 
 13250      00
 13251              	.LBE648:
 13252              	.LBB649:
 13253              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13254              		.loc 1 648 22 view .LVU4645
 13255 491a C4413DEB 		vpor	ymm10, ymm8, ymm9	# vect__58.602, vect__57.597, vect__104.601
 13255      D1
 13256              	.LBE649:
 13257              	.LBB650:
 13258              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13259              		.loc 1 646 25 view .LVU4646
 13260 491f C4E3FD00 		vpermq	ymm2, YMMWORD PTR 192[rsi+rax], 85	# vect__102.596, MEM[base: src_35(D), index: ivtmp.610_1
 13260      9406C000 
 13260      000055
 13261 492a C463FD00 		vpermq	ymm8, YMMWORD PTR 224[rsi+rax], 85	# vect__102.596, MEM[base: src_35(D), index: ivtmp.610_1
GAS LISTING /tmp/ccBvFgp2.s 			page 360


 13261      8406E000 
 13261      000055
 13262              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13263              		.loc 1 646 34 view .LVU4647
 13264 4935 C5FE6FA4 		vmovdqu	ymm4, YMMWORD PTR 192[rsi+rax]	# tmp276, MEM[base: src_35(D), index: ivtmp.610_114, offset
 13264      06C00000 
 13264      00
 13265              	.LBE650:
 13266              	.LBB651:
 13267              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13268              		.loc 1 648 22 view .LVU4648
 13269 493e C57E7F74 		vmovdqu	YMMWORD PTR 64[rdi+rax], ymm14	# MEM[base: dst_34(D), index: ivtmp.610_114, offset: 0B], v
 13269      0740
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13270              		.loc 1 647 32 is_stmt 1 view .LVU4649
 13271              	.LVL771:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13272              		.loc 1 647 25 view .LVU4650
 13273              	.LBE651:
 643:sieve_extend.c ****     {
 13274              		.loc 1 643 24 view .LVU4651
 643:sieve_extend.c ****     {
 13275              		.loc 1 643 12 view .LVU4652
 13276              	.LBB652:
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13277              		.loc 1 645 25 view .LVU4653
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13278              		.loc 1 646 13 view .LVU4654
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13279              		.loc 1 645 32 view .LVU4655
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13280              		.loc 1 645 25 view .LVU4656
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13281              		.loc 1 646 13 view .LVU4657
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13282              		.loc 1 645 32 view .LVU4658
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13283              		.loc 1 645 25 view .LVU4659
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13284              		.loc 1 646 13 view .LVU4660
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13285              		.loc 1 645 32 view .LVU4661
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13286              		.loc 1 645 25 view .LVU4662
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13287              		.loc 1 646 13 view .LVU4663
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13288              		.loc 1 645 32 view .LVU4664
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13289              		.loc 1 645 25 view .LVU4665
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13290              		.loc 1 645 25 is_stmt 0 view .LVU4666
 13291              	.LBE652:
 13292              	.LBB653:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
GAS LISTING /tmp/ccBvFgp2.s 			page 361


 13293              		.loc 1 647 25 is_stmt 1 view .LVU4667
 648:sieve_extend.c ****     }
 13294              		.loc 1 648 13 view .LVU4668
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13295              		.loc 1 647 32 view .LVU4669
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13296              		.loc 1 647 25 view .LVU4670
 648:sieve_extend.c ****     }
 13297              		.loc 1 648 13 view .LVU4671
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13298              		.loc 1 647 32 view .LVU4672
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13299              		.loc 1 647 25 view .LVU4673
 648:sieve_extend.c ****     }
 13300              		.loc 1 648 13 view .LVU4674
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13301              		.loc 1 647 32 view .LVU4675
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13302              		.loc 1 647 25 view .LVU4676
 648:sieve_extend.c ****     }
 13303              		.loc 1 648 13 view .LVU4677
 13304              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13305              		.loc 1 648 34 is_stmt 0 view .LVU4678
 13306 4944 C525D3E0 		vpsrlq	ymm12, ymm11, xmm0	# vect__57.597, vect__102.596, _4
 13307              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13308              		.loc 1 648 22 view .LVU4679
 13309 4948 C5FE7F74 		vmovdqu	YMMWORD PTR 96[rdi+rax], ymm6	# MEM[base: dst_34(D), index: ivtmp.610_114, offset: 0B], ve
 13309      0760
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13310              		.loc 1 647 32 is_stmt 1 view .LVU4680
 13311              	.LVL772:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13312              		.loc 1 647 25 view .LVU4681
 13313              	.LBE653:
 643:sieve_extend.c ****     {
 13314              		.loc 1 643 24 view .LVU4682
 643:sieve_extend.c ****     {
 13315              		.loc 1 643 12 view .LVU4683
 13316              	.LBB654:
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13317              		.loc 1 645 25 view .LVU4684
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13318              		.loc 1 646 13 view .LVU4685
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13319              		.loc 1 645 32 view .LVU4686
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13320              		.loc 1 645 25 view .LVU4687
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13321              		.loc 1 646 13 view .LVU4688
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13322              		.loc 1 645 32 view .LVU4689
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13323              		.loc 1 645 25 view .LVU4690
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13324              		.loc 1 646 13 view .LVU4691
GAS LISTING /tmp/ccBvFgp2.s 			page 362


 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13325              		.loc 1 645 32 view .LVU4692
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13326              		.loc 1 645 25 view .LVU4693
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13327              		.loc 1 646 13 view .LVU4694
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13328              		.loc 1 645 32 view .LVU4695
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13329              		.loc 1 645 25 view .LVU4696
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13330              		.loc 1 645 25 is_stmt 0 view .LVU4697
 13331              	.LBE654:
 13332              	.LBB655:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13333              		.loc 1 647 25 is_stmt 1 view .LVU4698
 648:sieve_extend.c ****     }
 13334              		.loc 1 648 13 view .LVU4699
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13335              		.loc 1 647 32 view .LVU4700
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13336              		.loc 1 647 25 view .LVU4701
 648:sieve_extend.c ****     }
 13337              		.loc 1 648 13 view .LVU4702
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13338              		.loc 1 647 32 view .LVU4703
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13339              		.loc 1 647 25 view .LVU4704
 648:sieve_extend.c ****     }
 13340              		.loc 1 648 13 view .LVU4705
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13341              		.loc 1 647 32 view .LVU4706
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13342              		.loc 1 647 25 view .LVU4707
 648:sieve_extend.c ****     }
 13343              		.loc 1 648 13 view .LVU4708
 13344              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13345              		.loc 1 648 22 is_stmt 0 view .LVU4709
 13346 494e C57E7F94 		vmovdqu	YMMWORD PTR 128[rdi+rax], ymm10	# MEM[base: dst_34(D), index: ivtmp.610_114, offset: 0B], 
 13346      07800000 
 13346      00
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13347              		.loc 1 647 32 is_stmt 1 view .LVU4710
 13348              	.LVL773:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13349              		.loc 1 647 25 view .LVU4711
 13350              	.LBE655:
 643:sieve_extend.c ****     {
 13351              		.loc 1 643 24 view .LVU4712
 643:sieve_extend.c ****     {
 13352              		.loc 1 643 12 view .LVU4713
 13353              	.LBB656:
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13354              		.loc 1 645 25 view .LVU4714
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13355              		.loc 1 646 13 view .LVU4715
GAS LISTING /tmp/ccBvFgp2.s 			page 363


 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13356              		.loc 1 645 32 view .LVU4716
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13357              		.loc 1 645 25 view .LVU4717
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13358              		.loc 1 646 13 view .LVU4718
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13359              		.loc 1 645 32 view .LVU4719
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13360              		.loc 1 645 25 view .LVU4720
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13361              		.loc 1 646 13 view .LVU4721
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13362              		.loc 1 645 32 view .LVU4722
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13363              		.loc 1 645 25 view .LVU4723
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13364              		.loc 1 646 13 view .LVU4724
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13365              		.loc 1 645 32 view .LVU4725
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13366              		.loc 1 645 25 view .LVU4726
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13367              		.loc 1 645 25 is_stmt 0 view .LVU4727
 13368              	.LBE656:
 13369              	.LBB657:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13370              		.loc 1 647 25 is_stmt 1 view .LVU4728
 648:sieve_extend.c ****     }
 13371              		.loc 1 648 13 view .LVU4729
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13372              		.loc 1 647 32 view .LVU4730
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13373              		.loc 1 647 25 view .LVU4731
 648:sieve_extend.c ****     }
 13374              		.loc 1 648 13 view .LVU4732
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13375              		.loc 1 647 32 view .LVU4733
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13376              		.loc 1 647 25 view .LVU4734
 648:sieve_extend.c ****     }
 13377              		.loc 1 648 13 view .LVU4735
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13378              		.loc 1 647 32 view .LVU4736
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13379              		.loc 1 647 25 view .LVU4737
 648:sieve_extend.c ****     }
 13380              		.loc 1 648 13 view .LVU4738
 13381              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13382              		.loc 1 648 34 is_stmt 0 view .LVU4739
 13383 4957 C5EDD3E8 		vpsrlq	ymm5, ymm2, xmm0	# vect__57.597, vect__102.596, _4
 13384              	.LBE657:
 13385              	.LBB658:
 13386              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13387              		.loc 1 646 34 view .LVU4740
GAS LISTING /tmp/ccBvFgp2.s 			page 364


 13388 495b C515F3F1 		vpsllq	ymm14, ymm13, xmm1	# vect__104.601, tmp275, shift
 13389              	.LBE658:
 13390              	.LBB659:
 13391              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13392              		.loc 1 648 34 view .LVU4741
 13393 495f C53DD3C8 		vpsrlq	ymm9, ymm8, xmm0	# vect__57.597, vect__102.596, _4
 13394              	.LBE659:
 13395              	.LBB660:
 13396              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13397              		.loc 1 646 34 view .LVU4742
 13398 4963 C5DDF3F1 		vpsllq	ymm6, ymm4, xmm1	# vect__104.601, tmp276, shift
 13399 4967 C565F3D1 		vpsllq	ymm10, ymm3, xmm1	# vect__104.601, tmp277, shift
 13400              	.LBE660:
 13401              	.LBB661:
 13402              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13403              		.loc 1 648 22 view .LVU4743
 13404 496b C4411DEB 		vpor	ymm15, ymm12, ymm14	# vect__58.602, vect__57.597, vect__104.601
 13404      FE
 13405 4970 C5D5EBFE 		vpor	ymm7, ymm5, ymm6	# vect__58.602, vect__57.597, vect__104.601
 13406 4974 C57E7FBC 		vmovdqu	YMMWORD PTR 160[rdi+rax], ymm15	# MEM[base: dst_34(D), index: ivtmp.610_114, offset: 0B], 
 13406      07A00000 
 13406      00
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13407              		.loc 1 647 32 is_stmt 1 view .LVU4744
 13408              	.LVL774:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13409              		.loc 1 647 25 view .LVU4745
 13410              	.LBE661:
 643:sieve_extend.c ****     {
 13411              		.loc 1 643 24 view .LVU4746
 643:sieve_extend.c ****     {
 13412              		.loc 1 643 12 view .LVU4747
 13413              	.LBB662:
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13414              		.loc 1 645 25 view .LVU4748
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13415              		.loc 1 646 13 view .LVU4749
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13416              		.loc 1 645 32 view .LVU4750
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13417              		.loc 1 645 25 view .LVU4751
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13418              		.loc 1 646 13 view .LVU4752
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13419              		.loc 1 645 32 view .LVU4753
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13420              		.loc 1 645 25 view .LVU4754
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13421              		.loc 1 646 13 view .LVU4755
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13422              		.loc 1 645 32 view .LVU4756
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13423              		.loc 1 645 25 view .LVU4757
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
GAS LISTING /tmp/ccBvFgp2.s 			page 365


 13424              		.loc 1 646 13 view .LVU4758
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13425              		.loc 1 645 32 view .LVU4759
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13426              		.loc 1 645 25 view .LVU4760
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13427              		.loc 1 645 25 is_stmt 0 view .LVU4761
 13428              	.LBE662:
 13429              	.LBB663:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13430              		.loc 1 647 25 is_stmt 1 view .LVU4762
 648:sieve_extend.c ****     }
 13431              		.loc 1 648 13 view .LVU4763
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13432              		.loc 1 647 32 view .LVU4764
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13433              		.loc 1 647 25 view .LVU4765
 648:sieve_extend.c ****     }
 13434              		.loc 1 648 13 view .LVU4766
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13435              		.loc 1 647 32 view .LVU4767
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13436              		.loc 1 647 25 view .LVU4768
 648:sieve_extend.c ****     }
 13437              		.loc 1 648 13 view .LVU4769
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13438              		.loc 1 647 32 view .LVU4770
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13439              		.loc 1 647 25 view .LVU4771
 648:sieve_extend.c ****     }
 13440              		.loc 1 648 13 view .LVU4772
 13441              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13442              		.loc 1 648 22 is_stmt 0 view .LVU4773
 13443 497d C44135EB 		vpor	ymm11, ymm9, ymm10	# vect__58.602, vect__57.597, vect__104.601
 13443      DA
 13444 4982 C5FE7FBC 		vmovdqu	YMMWORD PTR 192[rdi+rax], ymm7	# MEM[base: dst_34(D), index: ivtmp.610_114, offset: 0B], v
 13444      07C00000 
 13444      00
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13445              		.loc 1 647 32 is_stmt 1 view .LVU4774
 13446              	.LVL775:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13447              		.loc 1 647 25 view .LVU4775
 13448              	.LBE663:
 643:sieve_extend.c ****     {
 13449              		.loc 1 643 24 view .LVU4776
 643:sieve_extend.c ****     {
 13450              		.loc 1 643 12 view .LVU4777
 13451              	.LBB664:
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13452              		.loc 1 645 25 view .LVU4778
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13453              		.loc 1 646 13 view .LVU4779
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13454              		.loc 1 645 32 view .LVU4780
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
GAS LISTING /tmp/ccBvFgp2.s 			page 366


 13455              		.loc 1 645 25 view .LVU4781
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13456              		.loc 1 646 13 view .LVU4782
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13457              		.loc 1 645 32 view .LVU4783
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13458              		.loc 1 645 25 view .LVU4784
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13459              		.loc 1 646 13 view .LVU4785
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13460              		.loc 1 645 32 view .LVU4786
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13461              		.loc 1 645 25 view .LVU4787
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13462              		.loc 1 646 13 view .LVU4788
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13463              		.loc 1 645 32 view .LVU4789
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13464              		.loc 1 645 25 view .LVU4790
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13465              		.loc 1 645 25 is_stmt 0 view .LVU4791
 13466              	.LBE664:
 13467              	.LBB665:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13468              		.loc 1 647 25 is_stmt 1 view .LVU4792
 648:sieve_extend.c ****     }
 13469              		.loc 1 648 13 view .LVU4793
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13470              		.loc 1 647 32 view .LVU4794
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13471              		.loc 1 647 25 view .LVU4795
 648:sieve_extend.c ****     }
 13472              		.loc 1 648 13 view .LVU4796
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13473              		.loc 1 647 32 view .LVU4797
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13474              		.loc 1 647 25 view .LVU4798
 648:sieve_extend.c ****     }
 13475              		.loc 1 648 13 view .LVU4799
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13476              		.loc 1 647 32 view .LVU4800
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13477              		.loc 1 647 25 view .LVU4801
 648:sieve_extend.c ****     }
 13478              		.loc 1 648 13 view .LVU4802
 13479              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13480              		.loc 1 648 22 is_stmt 0 view .LVU4803
 13481 498b C57E7F9C 		vmovdqu	YMMWORD PTR 224[rdi+rax], ymm11	# MEM[base: dst_34(D), index: ivtmp.610_114, offset: 0B], 
 13481      07E00000 
 13481      00
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13482              		.loc 1 647 32 is_stmt 1 view .LVU4804
 13483              	.LVL776:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13484              		.loc 1 647 25 view .LVU4805
 13485              	.LBE665:
GAS LISTING /tmp/ccBvFgp2.s 			page 367


 643:sieve_extend.c ****     {
 13486              		.loc 1 643 24 view .LVU4806
 643:sieve_extend.c ****     {
 13487              		.loc 1 643 12 view .LVU4807
 13488 4994 48050001 		add	rax, 256	# ivtmp.610,
 13488      0000
 13489 499a 4539CA   		cmp	r10d, r9d	# tmp164, ivtmp.607
 13490 499d 0F87C7FE 		ja	.L1113	#,
 13490      FFFF
 13491              	.L1153:
 13492 49a3 4589C3   		mov	r11d, r8d	# _25, _25
 13493 49a6 428D0495 		lea	eax, 0[0+r10*4]	# i,
 13493      00000000 
 13494 49ae 4983C301 		add	r11, 1	# tmp140,
 13495 49b2 49C1E305 		sal	r11, 5	# _105,
 13496 49b6 4C01DF   		add	rdi, r11	# dst, _105
 13497 49b9 4C01DE   		add	rsi, r11	# src, _105
 13498 49bc C5F877   		vzeroupper
 13499              	.LVL777:
 13500              	.L1114:
 650:sieve_extend.c ****     {
 13501              		.loc 1 650 12 view .LVU4808
 13502              	# sieve_extend.c:650:     for (; i < size; ++i,++src,++dst)
 650:sieve_extend.c ****     {
 13503              		.loc 1 650 5 is_stmt 0 view .LVU4809
 13504 49bf 39C2     		cmp	edx, eax	# size, i
 13505 49c1 0F8E9400 		jle	.L1157	#,
 13505      0000
 13506              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13507              		.loc 1 652 35 view .LVU4810
 13508 49c7 4C8B5608 		mov	r10, QWORD PTR 8[rsi]	# _57, MEM[(const uint64_t *)src_30 + 8B]
 13509 49cb 41B84000 		mov	r8d, 64	# tmp142,
 13509      0000
 13510              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13511              		.loc 1 652 23 view .LVU4811
 13512 49d1 C462F3F7 		shrx	r9, QWORD PTR [rsi], rcx	# tmp143, *src_30, shift
 13512      0E
 13513 49d6 4129C8   		sub	r8d, ecx	# _97, shift
 652:sieve_extend.c ****     }    
 13514              		.loc 1 652 9 is_stmt 1 view .LVU4812
 13515              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13516              		.loc 1 652 43 is_stmt 0 view .LVU4813
 13517 49d9 C442B9F7 		shlx	r11, r10, r8	# tmp145, _57, _97
 13517      DA
 13518              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13519              		.loc 1 652 32 view .LVU4814
 13520 49de 4D09D9   		or	r9, r11	# tmp146, tmp145
 13521 49e1 4C890F   		mov	QWORD PTR [rdi], r9	# *dst_86, tmp146
 650:sieve_extend.c ****     {
 13522              		.loc 1 650 22 is_stmt 1 view .LVU4815
 13523              	.LVL778:
 650:sieve_extend.c ****     {
 13524              		.loc 1 650 12 view .LVU4816
GAS LISTING /tmp/ccBvFgp2.s 			page 368


 13525              	# sieve_extend.c:650:     for (; i < size; ++i,++src,++dst)
 650:sieve_extend.c ****     {
 13526              		.loc 1 650 22 is_stmt 0 view .LVU4817
 13527 49e4 448D4801 		lea	r9d, 1[rax]	# i,
 13528              	.LVL779:
 13529              	# sieve_extend.c:650:     for (; i < size; ++i,++src,++dst)
 650:sieve_extend.c ****     {
 13530              		.loc 1 650 5 view .LVU4818
 13531 49e8 4439CA   		cmp	edx, r9d	# size, i
 13532 49eb 7E6D     		jle	.L1154	#,
 652:sieve_extend.c ****     }    
 13533              		.loc 1 652 9 is_stmt 1 view .LVU4819
 13534              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13535              		.loc 1 652 35 is_stmt 0 view .LVU4820
 13536 49ed 4C8B4E10 		mov	r9, QWORD PTR 16[rsi]	# _109, MEM[(const uint64_t *)src_30 + 16B]
 13537              	.LVL780:
 13538              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13539              		.loc 1 652 23 view .LVU4821
 13540 49f1 C442F3F7 		shrx	r10, r10, rcx	# tmp148, _57, shift
 13540      D2
 13541              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13542              		.loc 1 652 43 view .LVU4822
 13543 49f6 C442B9F7 		shlx	r11, r9, r8	# tmp149, _109, _97
 13543      D9
 13544              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13545              		.loc 1 652 32 view .LVU4823
 13546 49fb 4D09DA   		or	r10, r11	# tmp150, tmp149
 13547 49fe 4C895708 		mov	QWORD PTR 8[rdi], r10	# MEM[(uint64_t *)dst_86 + 8B], tmp150
 650:sieve_extend.c ****     {
 13548              		.loc 1 650 22 is_stmt 1 view .LVU4824
 13549              	.LVL781:
 650:sieve_extend.c ****     {
 13550              		.loc 1 650 12 view .LVU4825
 13551              	# sieve_extend.c:650:     for (; i < size; ++i,++src,++dst)
 650:sieve_extend.c ****     {
 13552              		.loc 1 650 22 is_stmt 0 view .LVU4826
 13553 4a02 448D5002 		lea	r10d, 2[rax]	# i,
 13554              	.LVL782:
 13555              	# sieve_extend.c:650:     for (; i < size; ++i,++src,++dst)
 650:sieve_extend.c ****     {
 13556              		.loc 1 650 5 view .LVU4827
 13557 4a06 4439D2   		cmp	edx, r10d	# size, i
 13558 4a09 7E4F     		jle	.L1154	#,
 652:sieve_extend.c ****     }    
 13559              		.loc 1 652 9 is_stmt 1 view .LVU4828
 13560              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13561              		.loc 1 652 35 is_stmt 0 view .LVU4829
 13562 4a0b 4C8B5618 		mov	r10, QWORD PTR 24[rsi]	# _54, MEM[(const uint64_t *)src_30 + 24B]
 13563              	.LVL783:
 13564              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13565              		.loc 1 652 23 view .LVU4830
GAS LISTING /tmp/ccBvFgp2.s 			page 369


 13566 4a0f C442F3F7 		shrx	r9, r9, rcx	# tmp152, _109, shift
 13566      C9
 13567              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13568              		.loc 1 652 43 view .LVU4831
 13569 4a14 C442B9F7 		shlx	r11, r10, r8	# tmp153, _54, _97
 13569      DA
 13570              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13571              		.loc 1 652 32 view .LVU4832
 13572 4a19 4D09D9   		or	r9, r11	# tmp154, tmp153
 13573 4a1c 4C894F10 		mov	QWORD PTR 16[rdi], r9	# MEM[(uint64_t *)dst_86 + 16B], tmp154
 650:sieve_extend.c ****     {
 13574              		.loc 1 650 22 is_stmt 1 view .LVU4833
 13575              	.LVL784:
 650:sieve_extend.c ****     {
 13576              		.loc 1 650 12 view .LVU4834
 13577              	# sieve_extend.c:650:     for (; i < size; ++i,++src,++dst)
 650:sieve_extend.c ****     {
 13578              		.loc 1 650 22 is_stmt 0 view .LVU4835
 13579 4a20 448D4803 		lea	r9d, 3[rax]	# i,
 13580              	.LVL785:
 13581              	# sieve_extend.c:650:     for (; i < size; ++i,++src,++dst)
 650:sieve_extend.c ****     {
 13582              		.loc 1 650 5 view .LVU4836
 13583 4a24 4439CA   		cmp	edx, r9d	# size, i
 13584 4a27 7E31     		jle	.L1154	#,
 652:sieve_extend.c ****     }    
 13585              		.loc 1 652 9 is_stmt 1 view .LVU4837
 13586              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13587              		.loc 1 652 35 is_stmt 0 view .LVU4838
 13588 4a29 4C8B4E20 		mov	r9, QWORD PTR 32[rsi]	# _77, MEM[(const uint64_t *)src_30 + 32B]
 13589              	.LVL786:
 13590              	# sieve_extend.c:650:     for (; i < size; ++i,++src,++dst)
 650:sieve_extend.c ****     {
 13591              		.loc 1 650 22 view .LVU4839
 13592 4a2d 83C004   		add	eax, 4	# i,
 13593              	.LVL787:
 13594              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13595              		.loc 1 652 23 view .LVU4840
 13596 4a30 C442F3F7 		shrx	r10, r10, rcx	# tmp156, _54, shift
 13596      D2
 13597              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13598              		.loc 1 652 43 view .LVU4841
 13599 4a35 C442B9F7 		shlx	r11, r9, r8	# tmp157, _77, _97
 13599      D9
 13600              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13601              		.loc 1 652 32 view .LVU4842
 13602 4a3a 4D09DA   		or	r10, r11	# tmp158, tmp157
 13603              	# sieve_extend.c:650:     for (; i < size; ++i,++src,++dst)
 650:sieve_extend.c ****     {
 13604              		.loc 1 650 5 view .LVU4843
 13605 4a3d 39C2     		cmp	edx, eax	# size, i
GAS LISTING /tmp/ccBvFgp2.s 			page 370


 13606              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13607              		.loc 1 652 32 view .LVU4844
 13608 4a3f 4C895718 		mov	QWORD PTR 24[rdi], r10	# MEM[(uint64_t *)dst_86 + 24B], tmp158
 650:sieve_extend.c ****     {
 13609              		.loc 1 650 22 is_stmt 1 view .LVU4845
 13610              	.LVL788:
 650:sieve_extend.c ****     {
 13611              		.loc 1 650 12 view .LVU4846
 13612              	# sieve_extend.c:650:     for (; i < size; ++i,++src,++dst)
 650:sieve_extend.c ****     {
 13613              		.loc 1 650 5 is_stmt 0 view .LVU4847
 13614 4a43 7E15     		jle	.L1154	#,
 652:sieve_extend.c ****     }    
 13615              		.loc 1 652 9 is_stmt 1 discriminator 2 view .LVU4848
 13616              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13617              		.loc 1 652 43 is_stmt 0 discriminator 2 view .LVU4849
 13618 4a45 488B5628 		mov	rdx, QWORD PTR 40[rsi]	# MEM[(const uint64_t *)src_30 + 40B], MEM[(const uint64_t *)src_30 + 4
 13619              	.LVL789:
 13620              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13621              		.loc 1 652 23 discriminator 2 view .LVU4850
 13622 4a49 C4C2F3F7 		shrx	rcx, r9, rcx	# tmp162, _77, shift
 13622      C9
 13623              	.LVL790:
 13624              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13625              		.loc 1 652 43 discriminator 2 view .LVU4851
 13626 4a4e C4E2B9F7 		shlx	rsi, rdx, r8	# tmp160, MEM[(const uint64_t *)src_30 + 40B], _97
 13626      F2
 13627              	.LVL791:
 13628              	# sieve_extend.c:652:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 652:sieve_extend.c ****     }    
 13629              		.loc 1 652 32 discriminator 2 view .LVU4852
 13630 4a53 4809F1   		or	rcx, rsi	# tmp163, tmp160
 13631 4a56 48894F20 		mov	QWORD PTR 32[rdi], rcx	# MEM[(uint64_t *)dst_86 + 32B], tmp163
 650:sieve_extend.c ****     {
 13632              		.loc 1 650 22 is_stmt 1 discriminator 2 view .LVU4853
 13633              	.LVL792:
 650:sieve_extend.c ****     {
 13634              		.loc 1 650 12 discriminator 2 view .LVU4854
 13635              	.L1154:
 13636              	# sieve_extend.c:654: }
 654:sieve_extend.c **** 
 13637              		.loc 1 654 1 is_stmt 0 view .LVU4855
 13638 4a5a C3       		ret	
 13639              	.LVL793:
 13640              	.L1157:
 654:sieve_extend.c **** 
 13641              		.loc 1 654 1 view .LVU4856
 13642 4a5b C3       		ret	
 13643              	.LVL794:
 13644              	.L1156:
 13645              	.LBB666:
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13646              		.loc 1 645 25 is_stmt 1 view .LVU4857
GAS LISTING /tmp/ccBvFgp2.s 			page 371


 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13647              		.loc 1 646 13 view .LVU4858
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13648              		.loc 1 645 32 view .LVU4859
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13649              		.loc 1 645 25 view .LVU4860
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13650              		.loc 1 646 13 view .LVU4861
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13651              		.loc 1 645 32 view .LVU4862
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13652              		.loc 1 645 25 view .LVU4863
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13653              		.loc 1 646 13 view .LVU4864
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13654              		.loc 1 645 32 view .LVU4865
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13655              		.loc 1 645 25 view .LVU4866
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13656              		.loc 1 646 13 view .LVU4867
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13657              		.loc 1 645 32 view .LVU4868
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13658              		.loc 1 645 25 view .LVU4869
 645:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13659              		.loc 1 645 25 is_stmt 0 view .LVU4870
 13660              	.LBE666:
 13661              	.LBB667:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13662              		.loc 1 647 25 is_stmt 1 view .LVU4871
 648:sieve_extend.c ****     }
 13663              		.loc 1 648 13 view .LVU4872
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13664              		.loc 1 647 32 view .LVU4873
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13665              		.loc 1 647 25 view .LVU4874
 648:sieve_extend.c ****     }
 13666              		.loc 1 648 13 view .LVU4875
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13667              		.loc 1 647 32 view .LVU4876
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13668              		.loc 1 647 25 view .LVU4877
 648:sieve_extend.c ****     }
 13669              		.loc 1 648 13 view .LVU4878
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13670              		.loc 1 647 32 view .LVU4879
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13671              		.loc 1 647 25 view .LVU4880
 648:sieve_extend.c ****     }
 13672              		.loc 1 648 13 view .LVU4881
 13673              	.LBE667:
 13674              	.LBB668:
 13675              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13676              		.loc 1 646 25 is_stmt 0 view .LVU4882
 13677 4a5c C4E3FD00 		vpermq	ymm7, YMMWORD PTR 32[rsi], 85	# vect__102.596, MEM[base: src_35(D), index: ivtmp.610_114, o
 13677      7E2055
GAS LISTING /tmp/ccBvFgp2.s 			page 372


 13678 4a63 41B90200 		mov	r9d, 2	# ivtmp.607,
 13678      0000
 13679              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13680              		.loc 1 646 34 view .LVU4883
 13681 4a69 C57E6F4E 		vmovdqu	ymm9, YMMWORD PTR 32[rsi]	# tmp278, MEM[base: src_35(D), index: ivtmp.610_114, offset: 0B]
 13681      20
 13682 4a6e B8400000 		mov	eax, 64	# ivtmp.610,
 13682      00
 13683              	.LBE668:
 13684              	.LBB669:
 13685              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13686              		.loc 1 648 34 view .LVU4884
 13687 4a73 C545D3C0 		vpsrlq	ymm8, ymm7, xmm0	# vect__57.597, vect__102.596, _4
 13688              	.LBE669:
 13689              	.LBB670:
 13690              	# sieve_extend.c:646:             *(dst+j) = (*(src+j))<<shift;
 646:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13691              		.loc 1 646 34 view .LVU4885
 13692 4a77 C535F3D1 		vpsllq	ymm10, ymm9, xmm1	# vect__104.601, tmp278, shift
 13693              	.LBE670:
 13694              	.LBB671:
 13695              	# sieve_extend.c:648:             *(dst+j) |= (*(src+1)>>(64-shift));
 648:sieve_extend.c ****     }
 13696              		.loc 1 648 22 view .LVU4886
 13697 4a7b C4413DEB 		vpor	ymm11, ymm8, ymm10	# vect__58.602, vect__57.597, vect__104.601
 13697      DA
 13698 4a80 C57E7F5F 		vmovdqu	YMMWORD PTR 32[rdi], ymm11	# MEM[base: dst_34(D), index: ivtmp.610_114, offset: 0B], vect_
 13698      20
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13699              		.loc 1 647 32 is_stmt 1 view .LVU4887
 13700              	.LVL795:
 647:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13701              		.loc 1 647 25 view .LVU4888
 13702              	.LBE671:
 643:sieve_extend.c ****     {
 13703              		.loc 1 643 24 view .LVU4889
 643:sieve_extend.c ****     {
 13704              		.loc 1 643 12 view .LVU4890
 13705 4a85 E9F6FCFF 		jmp	.L1145	#
 13705      FF
 13706              	.LVL796:
 13707              	.L1155:
 13708              	# sieve_extend.c:641:     int i = 0;
 641:sieve_extend.c ****     // MSVC: use steps of 2 for SSE, 4 for AVX2, 8 for AVX512
 13709              		.loc 1 641 9 is_stmt 0 view .LVU4891
 13710 4a8a 31C0     		xor	eax, eax	# i
 13711 4a8c E92EFFFF 		jmp	.L1114	#
 13711      FF
 13712              		.cfi_endproc
 13713              	.LFE67:
 13715              		.section	.rodata.str1.8,"aMS",@progbits,1
 13716              		.align 8
 13717              	.LC9:
 13718 0000 52657375 		.string	"Result: Sievesize %ju is expected to have %ju primes. algorithm produced %ju primes\n"
 13718      6C743A20 
GAS LISTING /tmp/ccBvFgp2.s 			page 373


 13718      53696576 
 13718      6573697A 
 13718      6520256A 
 13719 0055 000000   		.align 8
 13720              	.LC10:
 13721 0058 4E6F2076 		.string	"No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produced %j
 13721      616C6964 
 13721      20726573 
 13721      756C742E 
 13721      20536965 
 13722              		.section	.rodata.str1.1
 13723              	.LC11:
 13724 0023 44656570 		.string	"DeepAnalyzing"
 13724      416E616C 
 13724      797A696E 
 13724      6700
 13725              		.section	.rodata.str1.8
 13726 00bb 00000000 		.align 8
 13726      00
 13727              	.LC12:
 13728 00c0 4E756D62 		.string	"Number %ju (%ju) was marked prime, but %ju * %ju = %ju\n"
 13728      65722025 
 13728      6A752028 
 13728      256A7529 
 13728      20776173 
 13729              		.align 8
 13730              	.LC13:
 13731 00f8 4E756D62 		.string	"Number %ju (%ju) was marked non-prime, but no factors found. So it is prime\n"
 13731      65722025 
 13731      6A752028 
 13731      256A7529 
 13731      20776173 
 13732              		.text
 13733 4a91 66662E0F 		.p2align 4
 13733      1F840000 
 13733      0000000F 
 13733      1F4000
 13734              		.globl	validatePrimeCount
 13736              	validatePrimeCount:
 13737              	.LVL797:
 13738              	.LFB80:
1116:sieve_extend.c **** 
 13739              		.loc 1 1116 76 is_stmt 1 view -0
 13740              		.cfi_startproc
1116:sieve_extend.c **** 
 13741              		.loc 1 1116 76 is_stmt 0 view .LVU4893
 13742 4aa0 F30F1EFA 		endbr64	
1118:sieve_extend.c ****     counter_t valid_primes = 0;
 13743              		.loc 1 1118 5 is_stmt 1 view .LVU4894
 13744              	# sieve_extend.c:1116: int validatePrimeCount(struct sieve_state *sieve, int option_verboselevel) {
1116:sieve_extend.c **** 
 13745              		.loc 1 1116 76 is_stmt 0 view .LVU4895
 13746 4aa4 4157     		push	r15	#
 13747              		.cfi_def_cfa_offset 16
 13748              		.cfi_offset 15, -16
 13749 4aa6 4156     		push	r14	#
 13750              		.cfi_def_cfa_offset 24
GAS LISTING /tmp/ccBvFgp2.s 			page 374


 13751              		.cfi_offset 14, -24
 13752 4aa8 4155     		push	r13	#
 13753              		.cfi_def_cfa_offset 32
 13754              		.cfi_offset 13, -32
 13755 4aaa 4154     		push	r12	#
 13756              		.cfi_def_cfa_offset 40
 13757              		.cfi_offset 12, -40
 13758 4aac 55       		push	rbp	#
 13759              		.cfi_def_cfa_offset 48
 13760              		.cfi_offset 6, -48
 13761 4aad 4889FD   		mov	rbp, rdi	# sieve, tmp307
 13762 4ab0 53       		push	rbx	#
 13763              		.cfi_def_cfa_offset 56
 13764              		.cfi_offset 3, -56
 13765 4ab1 89F3     		mov	ebx, esi	# option_verboselevel, tmp308
 13766 4ab3 488D6424 		lea	rsp, -56[rsp]	#,
 13766      C8
 13767              		.cfi_def_cfa_offset 112
 13768              	# sieve_extend.c:1118:     counter_t primecount = count_primes(sieve);
1118:sieve_extend.c ****     counter_t valid_primes = 0;
 13769              		.loc 1 1118 28 view .LVU4896
 13770 4ab8 488B17   		mov	rdx, QWORD PTR [rdi]	# _24, MEM[(uint64_t * *)sieve_18(D)]
 13771 4abb 488B7F08 		mov	rdi, QWORD PTR 8[rdi]	# _25, MEM[(long unsigned int *)sieve_18(D) + 8B]
 13772              	.LVL798:
 13773              	.LBB693:
 13774              	.LBI693:
1087:sieve_extend.c ****     counter_t primeCount = 1;
 13775              		.loc 1 1087 18 is_stmt 1 view .LVU4897
 13776              	.LBB694:
 13777              	.LBB695:
1089:sieve_extend.c ****     return primeCount;
 13778              		.loc 1 1089 30 view .LVU4898
 13779 4abf 4C8B4D10 		mov	r9, QWORD PTR 16[rbp]	# pretmp_199, sieve_18(D)->size
 13780              	# sieve_extend.c:1089:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(s
1089:sieve_extend.c ****     return primeCount;
 13781              		.loc 1 1089 5 is_stmt 0 view .LVU4899
 13782 4ac3 4883FF01 		cmp	rdi, 1	# _25,
 13783 4ac7 0F860B05 		jbe	.L1159	#,
 13783      0000
 13784              	# sieve_extend.c:1089:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(s
1089:sieve_extend.c ****     return primeCount;
 13785              		.loc 1 1089 20 view .LVU4900
 13786 4acd B8010000 		mov	eax, 1	# factor,
 13786      00
 13787              	.LBE695:
 13788              	# sieve_extend.c:1088:     counter_t primeCount = 1;
1088:sieve_extend.c ****     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(sieve->bitarray, factor+
 13789              		.loc 1 1088 15 view .LVU4901
 13790 4ad2 41B80100 		mov	r8d, 1	# primeCount,
 13790      0000
 13791              	.LVL799:
 13792 4ad8 0F1F8400 		.p2align 4
 13792      00000000 
 13793              		.p2align 3
 13794              	.L1162:
 13795              	.LBB698:
1089:sieve_extend.c ****     return primeCount;
GAS LISTING /tmp/ccBvFgp2.s 			page 375


 13796              		.loc 1 1089 104 is_stmt 1 view .LVU4902
 13797              	# sieve_extend.c:1089:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(s
1089:sieve_extend.c ****     return primeCount;
 13798              		.loc 1 1089 114 is_stmt 0 view .LVU4903
 13799 4ae0 4983C001 		add	r8, 1	# primeCount,
 13800              	.LVL800:
1089:sieve_extend.c ****     return primeCount;
 13801              		.loc 1 1089 52 is_stmt 1 view .LVU4904
 13802              	# sieve_extend.c:1089:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(s
1089:sieve_extend.c ****     return primeCount;
 13803              		.loc 1 1089 61 is_stmt 0 view .LVU4905
 13804 4ae4 4883C001 		add	rax, 1	# factor,
 13805              	.LVL801:
 13806              	.L1302:
 13807              	.LBB696:
 13808              	.LBI696:
 122:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 13809              		.loc 1 122 25 is_stmt 1 view .LVU4906
 13810              	.LBB697:
 123:sieve_extend.c ****     return index;
 13811              		.loc 1 123 5 view .LVU4907
 123:sieve_extend.c ****     return index;
 13812              		.loc 1 123 11 view .LVU4908
 13813              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13814              		.loc 1 123 21 is_stmt 0 view .LVU4909
 13815 4ae8 4889C1   		mov	rcx, rax	# tmp162, factor
 13816 4aeb 48C1E906 		shr	rcx, 6	# tmp162,
 13817              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13818              		.loc 1 123 12 view .LVU4910
 13819 4aef 4C8B1CCA 		mov	r11, QWORD PTR [rdx+rcx*8]	# *_106,* _24
 13820              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13821              		.loc 1 123 11 view .LVU4911
 13822 4af3 490FA3C3 		bt	r11, rax	# *_106, factor
 13823 4af7 0F83AB00 		jnc	.L1160	#,
 13823      0000
 123:sieve_extend.c ****     return index;
 13824              		.loc 1 123 58 is_stmt 1 view .LVU4912
 13825              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13826              		.loc 1 123 63 is_stmt 0 view .LVU4913
 13827 4afd 4C8D6001 		lea	r12, 1[rax]	# tmp235,
 13828              	.LVL802:
 13829              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13830              		.loc 1 123 21 view .LVU4914
 13831 4b01 4D89E5   		mov	r13, r12	# tmp167, factor
 13832              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13833              		.loc 1 123 63 view .LVU4915
 13834 4b04 4C89E0   		mov	rax, r12	# factor, tmp235
 123:sieve_extend.c ****     return index;
 13835              		.loc 1 123 11 is_stmt 1 view .LVU4916
 13836              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
GAS LISTING /tmp/ccBvFgp2.s 			page 376


 13837              		.loc 1 123 21 is_stmt 0 view .LVU4917
 13838 4b07 49C1ED06 		shr	r13, 6	# tmp167,
 13839              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13840              		.loc 1 123 12 view .LVU4918
 13841 4b0b 4E8B3CEA 		mov	r15, QWORD PTR [rdx+r13*8]	# *_35, *_35
 13842              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13843              		.loc 1 123 11 view .LVU4919
 13844 4b0f 4D0FA3E7 		bt	r15, r12	# *_35, factor
 13845 4b13 0F838F00 		jnc	.L1160	#,
 13845      0000
 123:sieve_extend.c ****     return index;
 13846              		.loc 1 123 58 is_stmt 1 view .LVU4920
 13847              	.LVL803:
 13848              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13849              		.loc 1 123 63 is_stmt 0 view .LVU4921
 13850 4b19 4883C001 		add	rax, 1	# factor,
 13851              	.LVL804:
 123:sieve_extend.c ****     return index;
 13852              		.loc 1 123 11 is_stmt 1 view .LVU4922
 13853              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13854              		.loc 1 123 21 is_stmt 0 view .LVU4923
 13855 4b1d 4989C6   		mov	r14, rax	# tmp279, factor
 13856 4b20 49C1EE06 		shr	r14, 6	# tmp279,
 13857              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13858              		.loc 1 123 12 view .LVU4924
 13859 4b24 4A8B34F2 		mov	rsi, QWORD PTR [rdx+r14*8]	# *_35, *_35
 13860              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13861              		.loc 1 123 11 view .LVU4925
 13862 4b28 480FA3C6 		bt	rsi, rax	# *_35, factor
 13863 4b2c 737A     		jnc	.L1160	#,
 123:sieve_extend.c ****     return index;
 13864              		.loc 1 123 58 is_stmt 1 view .LVU4926
 13865              	.LVL805:
 13866              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13867              		.loc 1 123 63 is_stmt 0 view .LVU4927
 13868 4b2e 498D4424 		lea	rax, 2[r12]	# factor,
 13868      02
 13869              	.LVL806:
 123:sieve_extend.c ****     return index;
 13870              		.loc 1 123 11 is_stmt 1 view .LVU4928
 13871              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13872              		.loc 1 123 21 is_stmt 0 view .LVU4929
 13873 4b33 4989C2   		mov	r10, rax	# tmp283, factor
 13874 4b36 49C1EA06 		shr	r10, 6	# tmp283,
 13875              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13876              		.loc 1 123 12 view .LVU4930
 13877 4b3a 4A8B0CD2 		mov	rcx, QWORD PTR [rdx+r10*8]	# *_35, *_35
 13878              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
GAS LISTING /tmp/ccBvFgp2.s 			page 377


 123:sieve_extend.c ****     return index;
 13879              		.loc 1 123 11 view .LVU4931
 13880 4b3e 480FA3C1 		bt	rcx, rax	# *_35, factor
 13881 4b42 7364     		jnc	.L1160	#,
 123:sieve_extend.c ****     return index;
 13882              		.loc 1 123 58 is_stmt 1 view .LVU4932
 13883              	.LVL807:
 13884              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13885              		.loc 1 123 63 is_stmt 0 view .LVU4933
 13886 4b44 498D4424 		lea	rax, 3[r12]	# factor,
 13886      03
 13887              	.LVL808:
 123:sieve_extend.c ****     return index;
 13888              		.loc 1 123 11 is_stmt 1 view .LVU4934
 13889              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13890              		.loc 1 123 21 is_stmt 0 view .LVU4935
 13891 4b49 4989C3   		mov	r11, rax	# tmp287, factor
 13892 4b4c 49C1EB06 		shr	r11, 6	# tmp287,
 13893              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13894              		.loc 1 123 12 view .LVU4936
 13895 4b50 4E8B2CDA 		mov	r13, QWORD PTR [rdx+r11*8]	# *_35, *_35
 13896              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13897              		.loc 1 123 11 view .LVU4937
 13898 4b54 490FA3C5 		bt	r13, rax	# *_35, factor
 13899 4b58 734E     		jnc	.L1160	#,
 123:sieve_extend.c ****     return index;
 13900              		.loc 1 123 58 is_stmt 1 view .LVU4938
 13901              	.LVL809:
 13902              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13903              		.loc 1 123 63 is_stmt 0 view .LVU4939
 13904 4b5a 498D4424 		lea	rax, 4[r12]	# factor,
 13904      04
 13905              	.LVL810:
 123:sieve_extend.c ****     return index;
 13906              		.loc 1 123 11 is_stmt 1 view .LVU4940
 13907              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13908              		.loc 1 123 21 is_stmt 0 view .LVU4941
 13909 4b5f 4989C7   		mov	r15, rax	# tmp291, factor
 13910 4b62 49C1EF06 		shr	r15, 6	# tmp291,
 13911              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13912              		.loc 1 123 12 view .LVU4942
 13913 4b66 4E8B34FA 		mov	r14, QWORD PTR [rdx+r15*8]	# *_35, *_35
 13914              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13915              		.loc 1 123 11 view .LVU4943
 13916 4b6a 490FA3C6 		bt	r14, rax	# *_35, factor
 13917 4b6e 7338     		jnc	.L1160	#,
 123:sieve_extend.c ****     return index;
 13918              		.loc 1 123 58 is_stmt 1 view .LVU4944
 13919              	.LVL811:
GAS LISTING /tmp/ccBvFgp2.s 			page 378


 13920              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13921              		.loc 1 123 63 is_stmt 0 view .LVU4945
 13922 4b70 498D4424 		lea	rax, 5[r12]	# factor,
 13922      05
 13923              	.LVL812:
 123:sieve_extend.c ****     return index;
 13924              		.loc 1 123 11 is_stmt 1 view .LVU4946
 13925              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13926              		.loc 1 123 21 is_stmt 0 view .LVU4947
 13927 4b75 4889C6   		mov	rsi, rax	# tmp295, factor
 13928 4b78 48C1EE06 		shr	rsi, 6	# tmp295,
 13929              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13930              		.loc 1 123 12 view .LVU4948
 13931 4b7c 4C8B14F2 		mov	r10, QWORD PTR [rdx+rsi*8]	# *_35, *_35
 13932              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13933              		.loc 1 123 11 view .LVU4949
 13934 4b80 490FA3C2 		bt	r10, rax	# *_35, factor
 13935 4b84 7322     		jnc	.L1160	#,
 123:sieve_extend.c ****     return index;
 13936              		.loc 1 123 58 is_stmt 1 view .LVU4950
 13937              	.LVL813:
 13938              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13939              		.loc 1 123 63 is_stmt 0 view .LVU4951
 13940 4b86 498D4424 		lea	rax, 6[r12]	# factor,
 13940      06
 13941              	.LVL814:
 123:sieve_extend.c ****     return index;
 13942              		.loc 1 123 11 is_stmt 1 view .LVU4952
 13943              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13944              		.loc 1 123 21 is_stmt 0 view .LVU4953
 13945 4b8b 4889C1   		mov	rcx, rax	# tmp299, factor
 13946 4b8e 48C1E906 		shr	rcx, 6	# tmp299,
 13947              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13948              		.loc 1 123 12 view .LVU4954
 13949 4b92 4C8B1CCA 		mov	r11, QWORD PTR [rdx+rcx*8]	# *_35, *_35
 13950              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13951              		.loc 1 123 11 view .LVU4955
 13952 4b96 490FA3C3 		bt	r11, rax	# *_35, factor
 13953 4b9a 730C     		jnc	.L1160	#,
 123:sieve_extend.c ****     return index;
 13954              		.loc 1 123 58 is_stmt 1 view .LVU4956
 13955              	.LVL815:
 13956              	# sieve_extend.c:123:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 123:sieve_extend.c ****     return index;
 13957              		.loc 1 123 63 is_stmt 0 view .LVU4957
 13958 4b9c 498D4424 		lea	rax, 7[r12]	# factor,
 13958      07
 13959              	.LVL816:
 123:sieve_extend.c ****     return index;
GAS LISTING /tmp/ccBvFgp2.s 			page 379


 13960              		.loc 1 123 11 is_stmt 1 view .LVU4958
 13961 4ba1 E942FFFF 		jmp	.L1302	#
 13961      FF
 13962              		.p2align 4,,7
 13963 4ba6 6690     		.p2align 3
 13964              	.L1160:
 13965              	.LVL817:
 123:sieve_extend.c ****     return index;
 13966              		.loc 1 123 11 is_stmt 0 view .LVU4959
 13967              	.LBE697:
 13968              	.LBE696:
1089:sieve_extend.c ****     return primeCount;
 13969              		.loc 1 1089 30 is_stmt 1 view .LVU4960
 13970              	# sieve_extend.c:1089:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(s
1089:sieve_extend.c ****     return primeCount;
 13971              		.loc 1 1089 5 is_stmt 0 view .LVU4961
 13972 4ba8 4839C7   		cmp	rdi, rax	# _25, factor
 13973 4bab 0F872FFF 		ja	.L1162	#,
 13973      FFFF
1089:sieve_extend.c ****     return primeCount;
 13974              		.loc 1 1089 5 view .LVU4962
 13975              	.LBE698:
1090:sieve_extend.c **** }
 13976              		.loc 1 1090 5 is_stmt 1 view .LVU4963
 13977              	.LVL818:
1090:sieve_extend.c **** }
 13978              		.loc 1 1090 5 is_stmt 0 view .LVU4964
 13979              	.LBE694:
 13980              	.LBE693:
1119:sieve_extend.c ****     switch(sieve->size) {
 13981              		.loc 1 1119 5 is_stmt 1 view .LVU4965
1120:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 13982              		.loc 1 1120 5 view .LVU4966
 13983 4bb1 83FB03   		cmp	ebx, 3	# option_verboselevel,
 13984 4bb4 0F9FC2   		setg	dl	#, tmp172
 13985 4bb7 4981F9A0 		cmp	r9, 100000	# pretmp_199,
 13985      860100
 13986 4bbe 0F842D06 		je	.L1163	#,
 13986      0000
 13987 4bc4 0F86CC02 		jbe	.L1303	#,
 13987      0000
 13988 4bca 4981F900 		cmp	r9, 100000000	# pretmp_199,
 13988      E1F505
 13989 4bd1 0F84D905 		je	.L1171	#,
 13989      0000
 13990              		.p2align 4,,4
 13991 4bd7 0F863303 		jbe	.L1304	#,
 13991      0000
 13992 4bdd 4981F900 		cmp	r9, 1000000000	# pretmp_199,
 13992      CA9A3B
 13993 4be4 0F85EB05 		jne	.L1169	#,
 13993      0000
 13994 4bea 4981F82E 		cmp	r8, 50847534	# primeCount,
 13994      DF0703
 13995              	# sieve_extend.c:1129:         case 1000000000:    valid_primes = 50847534; break;
1129:sieve_extend.c ****         default:            valid_primes= 0;
 13996              		.loc 1 1129 42 is_stmt 0 view .LVU4967
GAS LISTING /tmp/ccBvFgp2.s 			page 380


 13997 4bf1 B92EDF07 		mov	ecx, 50847534	# valid_primes,
 13997      03
 13998 4bf6 410F94C4 		sete	r12b	#, tmp189
 13999 4bfa 4421E2   		and	edx, r12d	# _251, tmp189
 14000 4bfd 4981F82E 		cmp	r8, 50847534	# primeCount,
 14000      DF0703
 14001 4c04 450FB6EC 		movzx	r13d, r12b	# <retval>, tmp189
 14002 4c08 410F95C6 		setne	r14b	#, _135
1129:sieve_extend.c ****         default:            valid_primes= 0;
 14003              		.loc 1 1129 29 is_stmt 1 view .LVU4968
 14004              	.LVL819:
1129:sieve_extend.c ****         default:            valid_primes= 0;
 14005              		.loc 1 1129 54 view .LVU4969
 14006 4c0c 0F1F4000 		.p2align 4
 14007              		.p2align 3
 14008              	.L1176:
1133:sieve_extend.c ****     if (valid  && option_verboselevel >= 4) printf("Result: Sievesize %ju is expected to have %ju p
 14009              		.loc 1 1133 5 view .LVU4970
1134:sieve_extend.c ****     if (!valid && option_verboselevel >= 1) {
 14010              		.loc 1 1134 5 view .LVU4971
 14011              	# sieve_extend.c:1134:     if (valid  && option_verboselevel >= 4) printf("Result: Sievesize %ju is
1134:sieve_extend.c ****     if (!valid && option_verboselevel >= 1) {
 14012              		.loc 1 1134 8 is_stmt 0 view .LVU4972
 14013 4c10 84D2     		test	dl, dl	# _251
 14014 4c12 0F841704 		je	.L1177	#,
 14014      0000
1134:sieve_extend.c ****     if (!valid && option_verboselevel >= 1) {
 14015              		.loc 1 1134 45 is_stmt 1 discriminator 1 view .LVU4973
 14016              	.LVL820:
 14017              	.LBB700:
 14018              	.LBI700:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 14019              		.loc 3 105 1 discriminator 1 view .LVU4974
 14020              	.LBB701:
 14021              		.loc 3 107 3 discriminator 1 view .LVU4975
 14022              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 14023              		.loc 3 107 10 is_stmt 0 discriminator 1 view .LVU4976
 14024 4c18 4C89CA   		mov	rdx, r9	#, pretmp_199
 14025 4c1b 488D3500 		lea	rsi, .LC9[rip]	#,
 14025      000000
 14026 4c22 BF010000 		mov	edi, 1	#,
 14026      00
 14027 4c27 31C0     		xor	eax, eax	#
 14028 4c29 E8000000 		call	__printf_chk@PLT	#
 14028      00
 14029              	.LVL821:
 14030              		.loc 3 107 10 discriminator 1 view .LVU4977
 14031              	.LBE701:
 14032              	.LBE700:
1135:sieve_extend.c ****         printf("No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produ
 14033              		.loc 1 1135 5 is_stmt 1 discriminator 1 view .LVU4978
 14034              	.L1178:
1139:sieve_extend.c ****     return (valid);
 14035              		.loc 1 1139 5 view .LVU4979
 14036              	# sieve_extend.c:1139:     if (!valid && option_verboselevel >= 3) deepAnalyzePrimes(sieve);
1139:sieve_extend.c ****     return (valid);
 14037              		.loc 1 1139 8 is_stmt 0 view .LVU4980
GAS LISTING /tmp/ccBvFgp2.s 			page 381


 14038 4c2e 83FB02   		cmp	ebx, 2	# option_verboselevel,
 14039 4c31 0F8E4C02 		jle	.L1158	#,
 14039      0000
 14040 4c37 4584F6   		test	r14b, r14b	# _135
 14041 4c3a 0F844302 		je	.L1158	#,
 14041      0000
1139:sieve_extend.c ****     return (valid);
 14042              		.loc 1 1139 45 is_stmt 1 discriminator 1 view .LVU4981
 14043              	.LBB702:
 14044              	.LBI702:
1093:sieve_extend.c ****     printf("DeepAnalyzing\n");
 14045              		.loc 1 1093 13 discriminator 1 view .LVU4982
 14046              	.LVL822:
 14047              	.LBB703:
1094:sieve_extend.c ****     counter_t warn_prime = 0;
 14048              		.loc 1 1094 5 discriminator 1 view .LVU4983
 14049              	.LBB704:
 14050              	.LBI704:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 14051              		.loc 3 105 1 discriminator 1 view .LVU4984
 14052              	.LBB705:
 14053              		.loc 3 107 3 discriminator 1 view .LVU4985
 14054              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 14055              		.loc 3 107 10 is_stmt 0 discriminator 1 view .LVU4986
 14056 4c40 488D3D00 		lea	rdi, .LC11[rip]	#,
 14056      000000
 14057 4c47 E8000000 		call	puts@PLT	#
 14057      00
 14058              	.LVL823:
 14059              		.loc 3 107 10 discriminator 1 view .LVU4987
 14060              	.LBE705:
 14061              	.LBE704:
1095:sieve_extend.c ****     counter_t warn_nonprime = 0;
 14062              		.loc 1 1095 5 is_stmt 1 discriminator 1 view .LVU4988
1096:sieve_extend.c ****     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 14063              		.loc 1 1096 5 discriminator 1 view .LVU4989
1097:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 14064              		.loc 1 1097 5 discriminator 1 view .LVU4990
 14065              	.LBB706:
1097:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 14066              		.loc 1 1097 10 discriminator 1 view .LVU4991
1097:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 14067              		.loc 1 1097 31 discriminator 1 view .LVU4992
 14068              	# sieve_extend.c:1097:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
1097:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 14069              		.loc 1 1097 44 is_stmt 0 discriminator 1 view .LVU4993
 14070 4c4c 488B7D08 		mov	rdi, QWORD PTR 8[rbp]	# _137, MEM[(uint64_t *)sieve_18(D) + 8B]
 14071              	# sieve_extend.c:1097:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
1097:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 14072              		.loc 1 1097 5 discriminator 1 view .LVU4994
 14073 4c50 4883FF01 		cmp	rdi, 1	# _137,
 14074 4c54 0F862902 		jbe	.L1158	#,
 14074      0000
 14075              	.LBB707:
 14076              	.LBB708:
 14077              	.LBB709:
 14078              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
GAS LISTING /tmp/ccBvFgp2.s 			page 382


 14079              		.loc 3 107 10 view .LVU4995
 14080 4c5a 44896C24 		mov	DWORD PTR 36[rsp], r13d	# %sfp, <retval>
 14080      24
 14081              	.LBE709:
 14082              	.LBE708:
 14083              	.LBE707:
 14084              	# sieve_extend.c:1097:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
1097:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 14085              		.loc 1 1097 5 view .LVU4996
 14086 4c5f 41BE0200 		mov	r14d, 2	# ivtmp.643,
 14086      0000
 14087 4c65 41BC0300 		mov	r12d, 3	# ivtmp.641,
 14087      0000
 14088              	.LBE706:
 14089              	# sieve_extend.c:1095:     counter_t warn_prime = 0;
1095:sieve_extend.c ****     counter_t warn_nonprime = 0;
 14090              		.loc 1 1095 15 view .LVU4997
 14091 4c6b 4531C0   		xor	r8d, r8d	# warn_prime
 14092              	# sieve_extend.c:1096:     counter_t warn_nonprime = 0;
1096:sieve_extend.c ****     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 14093              		.loc 1 1096 15 view .LVU4998
 14094 4c6e 48C74424 		mov	QWORD PTR 24[rsp], 0	# %sfp,
 14094      18000000 
 14094      00
 14095              	.LBB728:
 14096              	# sieve_extend.c:1097:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
1097:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 14097              		.loc 1 1097 20 view .LVU4999
 14098 4c77 41BF0100 		mov	r15d, 1	# prime,
 14098      0000
 14099              	.LBB716:
 14100              	.LBB713:
 14101              	.LBB710:
 14102              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 14103              		.loc 3 107 10 view .LVU5000
 14104 4c7d 4989ED   		mov	r13, rbp	# sieve, sieve
 14105              	.LVL824:
 14106              		.p2align 4
 14107              		.p2align 3
 14108              	.L1188:
 14109              		.loc 3 107 10 view .LVU5001
 14110              	.LBE710:
 14111              	.LBE713:
 14112              	.LBE716:
1098:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 14113              		.loc 1 1098 9 is_stmt 1 view .LVU5002
 14114              	# sieve_extend.c:1098:         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) {
1098:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 14115              		.loc 1 1098 29 is_stmt 0 view .LVU5003
 14116 4c80 498B6D00 		mov	rbp, QWORD PTR 0[r13]	# MEM[(uint64_t * *)sieve_18(D)], MEM[(uint64_t * *)sieve_18(D)]
 14117              	# sieve_extend.c:1098:         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) {
1098:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 14118              		.loc 1 1098 30 view .LVU5004
 14119 4c84 4C89FB   		mov	rbx, r15	# tmp198, prime
 14120 4c87 48C1EB06 		shr	rbx, 6	# tmp198,
 14121              	# sieve_extend.c:1098:         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) {
1098:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
GAS LISTING /tmp/ccBvFgp2.s 			page 383


 14122              		.loc 1 1098 71 view .LVU5005
 14123 4c8b 4C8B4CDD 		mov	r9, QWORD PTR 0[rbp+rbx*8]	# *_47, *_47
 14123      00
 14124 4c90 C4C283F7 		shrx	rcx, r9, r15	# tmp201, *_47, prime
 14124      C9
 14125              	# sieve_extend.c:1098:         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) {
1098:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 14126              		.loc 1 1098 12 view .LVU5006
 14127 4c95 83E101   		and	ecx, 1	# c,
 14128 4c98 0F84BA02 		je	.L1180	#,
 14128      0000
 14129              	.LVL825:
 14130              	.LBB717:
 14131              	.LBB718:
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14132              		.loc 1 1107 32 is_stmt 1 view .LVU5007
 14133              	.LBE718:
 14134              	# sieve_extend.c:1106:             counter_t c_prime = 0;
1106:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 14135              		.loc 1 1106 23 is_stmt 0 view .LVU5008
 14136 4c9e 31ED     		xor	ebp, ebp	# c_prime
 14137              	.LBB719:
 14138              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14139              		.loc 1 1107 13 view .LVU5009
 14140 4ca0 4885FF   		test	rdi, rdi	# _137
 14141 4ca3 BE030000 		mov	esi, 3	# ivtmp.633,
 14141      00
 14142 4ca8 0F84E103 		je	.L1292	#,
 14142      0000
 14143 4cae 4989FB   		mov	r11, rdi	# tmp231, _137
 14144 4cb1 4929CB   		sub	r11, rcx	# tmp231, c
 14145 4cb4 4183E303 		and	r11d, 3	# tmp231,
 14146 4cb8 4D89DA   		mov	r10, r11	# tmp232, tmp231
 14147 4cbb 0F84BF00 		je	.L1181	#,
 14147      0000
 14148              	.LVL826:
1108:sieve_extend.c ****             }
 14149              		.loc 1 1108 17 is_stmt 1 view .LVU5010
 14150              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14151              		.loc 1 1108 48 is_stmt 0 view .LVU5011
 14152 4cc1 488D0409 		lea	rax, [rcx+rcx]	# tmp239,
 14153 4cc5 4C39F0   		cmp	rax, r14	# tmp239, ivtmp.643
 14154 4cc8 7411     		je	.L1233	#,
 14155              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14156              		.loc 1 1108 33 view .LVU5012
 14157 4cca 31D2     		xor	edx, edx	# tmp241
 14158 4ccc 4C89E0   		mov	rax, r12	# tmp242, ivtmp.641
 14159 4ccf 48F7F6   		div	rsi	# ivtmp.633
 14160              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14161              		.loc 1 1108 82 view .LVU5013
 14162 4cd2 31ED     		xor	ebp, ebp	# c_prime
1108:sieve_extend.c ****             }
 14163              		.loc 1 1108 82 view .LVU5014
GAS LISTING /tmp/ccBvFgp2.s 			page 384


 14164 4cd4 4885D2   		test	rdx, rdx	# tmp241
 14165 4cd7 400F94C5 		sete	bpl	#, c_prime
 14166              	.LVL827:
 14167              	.L1233:
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14168              		.loc 1 1107 68 is_stmt 1 view .LVU5015
 14169              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14170              		.loc 1 1107 69 is_stmt 0 view .LVU5016
 14171 4cdb 4883C101 		add	rcx, 1	# c,
 14172              	.LVL828:
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14173              		.loc 1 1107 32 is_stmt 1 view .LVU5017
 14174              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14175              		.loc 1 1107 13 is_stmt 0 view .LVU5018
 14176 4cdf 4839F9   		cmp	rcx, rdi	# c, _137
 14177 4ce2 0F877801 		ja	.L1187	#,
 14177      0000
 14178              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14179              		.loc 1 1107 51 view .LVU5019
 14180 4ce8 4989C9   		mov	r9, rcx	# tmp244, c
 14181 4ceb BE050000 		mov	esi, 5	# ivtmp.633,
 14181      00
 14182 4cf0 4C0FAFC9 		imul	r9, rcx	# tmp244, c
 14183              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14184              		.loc 1 1107 47 view .LVU5020
 14185 4cf4 4D39E1   		cmp	r9, r12	# tmp244, ivtmp.641
 14186 4cf7 0F876301 		ja	.L1187	#,
 14186      0000
 14187 4cfd 4983FA01 		cmp	r10, 1	# tmp232,
 14188 4d01 747D     		je	.L1181	#,
 14189 4d03 4983FA02 		cmp	r10, 2	# tmp232,
 14190 4d07 7438     		je	.L1264	#,
1108:sieve_extend.c ****             }
 14191              		.loc 1 1108 17 is_stmt 1 view .LVU5021
 14192              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14193              		.loc 1 1108 48 is_stmt 0 view .LVU5022
 14194 4d09 488D1C09 		lea	rbx, [rcx+rcx]	# tmp245,
 14195 4d0d 4C39F3   		cmp	rbx, r14	# tmp245, ivtmp.643
 14196 4d10 7417     		je	.L1235	#,
 14197              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14198              		.loc 1 1108 33 view .LVU5023
 14199 4d12 31D2     		xor	edx, edx	# tmp247
 14200 4d14 4C89E0   		mov	rax, r12	# tmp248, ivtmp.641
 14201 4d17 48F7F6   		div	rsi	# ivtmp.633
 14202              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14203              		.loc 1 1108 20 view .LVU5024
 14204 4d1a 4885D2   		test	rdx, rdx	# tmp247
 14205 4d1d 410F94C3 		sete	r11b	#, tmp249
 14206              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
GAS LISTING /tmp/ccBvFgp2.s 			page 385


 14207              		.loc 1 1108 82 view .LVU5025
 14208 4d21 4180FB01 		cmp	r11b, 1	# tmp249,
 14209 4d25 4883DDFF 		sbb	rbp, -1	# c_prime,
 14210              	.LVL829:
 14211              	.L1235:
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14212              		.loc 1 1107 68 is_stmt 1 view .LVU5026
 14213              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14214              		.loc 1 1107 69 is_stmt 0 view .LVU5027
 14215 4d29 4883C101 		add	rcx, 1	# c,
 14216              	.LVL830:
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14217              		.loc 1 1107 32 is_stmt 1 view .LVU5028
 14218 4d2d 4883C602 		add	rsi, 2	# ivtmp.633,
 14219              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14220              		.loc 1 1107 51 is_stmt 0 view .LVU5029
 14221 4d31 4989CA   		mov	r10, rcx	# tmp250, c
 14222 4d34 4C0FAFD1 		imul	r10, rcx	# tmp250, c
 14223              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14224              		.loc 1 1107 47 view .LVU5030
 14225 4d38 4D39E2   		cmp	r10, r12	# tmp250, ivtmp.641
 14226 4d3b 0F871F01 		ja	.L1187	#,
 14226      0000
 14227              	.L1264:
1108:sieve_extend.c ****             }
 14228              		.loc 1 1108 17 is_stmt 1 view .LVU5031
 14229              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14230              		.loc 1 1108 48 is_stmt 0 view .LVU5032
 14231 4d41 4C8D0C09 		lea	r9, [rcx+rcx]	# tmp251,
 14232 4d45 4D39F1   		cmp	r9, r14	# tmp251, ivtmp.643
 14233 4d48 7415     		je	.L1238	#,
 14234              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14235              		.loc 1 1108 33 view .LVU5033
 14236 4d4a 31D2     		xor	edx, edx	# tmp253
 14237 4d4c 4C89E0   		mov	rax, r12	# tmp254, ivtmp.641
 14238 4d4f 48F7F6   		div	rsi	# ivtmp.633
 14239              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14240              		.loc 1 1108 20 view .LVU5034
 14241 4d52 4885D2   		test	rdx, rdx	# tmp253
 14242 4d55 0F94C3   		sete	bl	#, tmp255
 14243              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14244              		.loc 1 1108 82 view .LVU5035
 14245 4d58 80FB01   		cmp	bl, 1	# tmp255,
 14246 4d5b 4883DDFF 		sbb	rbp, -1	# c_prime,
 14247              	.LVL831:
 14248              	.L1238:
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14249              		.loc 1 1107 68 is_stmt 1 view .LVU5036
 14250              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
GAS LISTING /tmp/ccBvFgp2.s 			page 386


 14251              		.loc 1 1107 69 is_stmt 0 view .LVU5037
 14252 4d5f 4883C101 		add	rcx, 1	# c,
 14253              	.LVL832:
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14254              		.loc 1 1107 32 is_stmt 1 view .LVU5038
 14255 4d63 4883C602 		add	rsi, 2	# ivtmp.633,
 14256              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14257              		.loc 1 1107 51 is_stmt 0 view .LVU5039
 14258 4d67 4989CB   		mov	r11, rcx	# tmp256, c
 14259 4d6a 4C0FAFD9 		imul	r11, rcx	# tmp256, c
 14260              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14261              		.loc 1 1107 47 view .LVU5040
 14262 4d6e 4D39E3   		cmp	r11, r12	# tmp256, ivtmp.641
 14263 4d71 0F87E900 		ja	.L1187	#,
 14263      0000
 14264              	.LVL833:
 14265 4d77 660F1F84 		.p2align 4
 14265      00000000 
 14265      00
 14266              		.p2align 3
 14267              	.L1181:
1108:sieve_extend.c ****             }
 14268              		.loc 1 1108 17 is_stmt 1 view .LVU5041
 14269              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14270              		.loc 1 1108 48 is_stmt 0 view .LVU5042
 14271 4d80 4C8D1409 		lea	r10, [rcx+rcx]	# tmp210,
 14272 4d84 4D39F2   		cmp	r10, r14	# tmp210, ivtmp.643
 14273 4d87 7417     		je	.L1186	#,
 14274              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14275              		.loc 1 1108 33 view .LVU5043
 14276 4d89 31D2     		xor	edx, edx	# tmp214
 14277 4d8b 4C89E0   		mov	rax, r12	# tmp215, ivtmp.641
 14278 4d8e 48F7F6   		div	rsi	# ivtmp.633
 14279              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14280              		.loc 1 1108 20 view .LVU5044
 14281 4d91 4885D2   		test	rdx, rdx	# tmp214
 14282 4d94 410F94C1 		sete	r9b	#, tmp217
 14283              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14284              		.loc 1 1108 82 view .LVU5045
 14285 4d98 4180F901 		cmp	r9b, 1	# tmp217,
 14286 4d9c 4883DDFF 		sbb	rbp, -1	# c_prime,
 14287              	.LVL834:
 14288              	.L1186:
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14289              		.loc 1 1107 68 is_stmt 1 view .LVU5046
 14290              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14291              		.loc 1 1107 69 is_stmt 0 view .LVU5047
 14292 4da0 4883C101 		add	rcx, 1	# tmp234,
 14293              	.LVL835:
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
GAS LISTING /tmp/ccBvFgp2.s 			page 387


 14294              		.loc 1 1107 32 is_stmt 1 view .LVU5048
 14295              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14296              		.loc 1 1107 13 is_stmt 0 view .LVU5049
 14297 4da4 4839F9   		cmp	rcx, rdi	# tmp234, _137
 14298 4da7 0F87B300 		ja	.L1187	#,
 14298      0000
 14299              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14300              		.loc 1 1107 51 view .LVU5050
 14301 4dad 4889CB   		mov	rbx, rcx	# tmp218, tmp234
 14302 4db0 4883C602 		add	rsi, 2	# tmp233,
 14303 4db4 480FAFD9 		imul	rbx, rcx	# tmp218, tmp234
 14304              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14305              		.loc 1 1107 47 view .LVU5051
 14306 4db8 4C39E3   		cmp	rbx, r12	# tmp218, ivtmp.641
 14307 4dbb 0F879F00 		ja	.L1187	#,
 14307      0000
1108:sieve_extend.c ****             }
 14308              		.loc 1 1108 17 is_stmt 1 view .LVU5052
 14309              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14310              		.loc 1 1108 48 is_stmt 0 view .LVU5053
 14311 4dc1 4C8D1C09 		lea	r11, [rcx+rcx]	# tmp257,
 14312 4dc5 4D39F3   		cmp	r11, r14	# tmp257, ivtmp.643
 14313 4dc8 7417     		je	.L1242	#,
 14314              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14315              		.loc 1 1108 33 view .LVU5054
 14316 4dca 31D2     		xor	edx, edx	# tmp259
 14317 4dcc 4C89E0   		mov	rax, r12	# tmp260, ivtmp.641
 14318 4dcf 48F7F6   		div	rsi	# tmp233
 14319              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14320              		.loc 1 1108 20 view .LVU5055
 14321 4dd2 4885D2   		test	rdx, rdx	# tmp259
 14322 4dd5 410F94C2 		sete	r10b	#, tmp261
 14323              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14324              		.loc 1 1108 82 view .LVU5056
 14325 4dd9 4180FA01 		cmp	r10b, 1	# tmp261,
 14326 4ddd 4883DDFF 		sbb	rbp, -1	# c_prime,
 14327              	.LVL836:
 14328              	.L1242:
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14329              		.loc 1 1107 68 is_stmt 1 view .LVU5057
 14330              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14331              		.loc 1 1107 69 is_stmt 0 view .LVU5058
 14332 4de1 4C8D4901 		lea	r9, 1[rcx]	# c,
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14333              		.loc 1 1107 32 is_stmt 1 view .LVU5059
 14334 4de5 488D5E02 		lea	rbx, 2[rsi]	# ivtmp.633,
 14335              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14336              		.loc 1 1107 51 is_stmt 0 view .LVU5060
GAS LISTING /tmp/ccBvFgp2.s 			page 388


 14337 4de9 4D89CB   		mov	r11, r9	# tmp264, c
 14338 4dec 4D0FAFD9 		imul	r11, r9	# tmp264, c
 14339              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14340              		.loc 1 1107 47 view .LVU5061
 14341 4df0 4D39E3   		cmp	r11, r12	# tmp264, ivtmp.641
 14342 4df3 776B     		ja	.L1187	#,
1108:sieve_extend.c ****             }
 14343              		.loc 1 1108 17 is_stmt 1 view .LVU5062
 14344              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14345              		.loc 1 1108 48 is_stmt 0 view .LVU5063
 14346 4df5 4D01C9   		add	r9, r9	# tmp265
 14347 4df8 4D39F1   		cmp	r9, r14	# tmp265, ivtmp.643
 14348 4dfb 7417     		je	.L1244	#,
 14349              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14350              		.loc 1 1108 33 view .LVU5064
 14351 4dfd 31D2     		xor	edx, edx	# tmp267
 14352 4dff 4C89E0   		mov	rax, r12	# tmp268, ivtmp.641
 14353 4e02 48F7F3   		div	rbx	# ivtmp.633
 14354              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14355              		.loc 1 1108 20 view .LVU5065
 14356 4e05 4885D2   		test	rdx, rdx	# tmp267
 14357 4e08 410F94C2 		sete	r10b	#, tmp269
 14358              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14359              		.loc 1 1108 82 view .LVU5066
 14360 4e0c 4180FA01 		cmp	r10b, 1	# tmp269,
 14361 4e10 4883DDFF 		sbb	rbp, -1	# c_prime,
 14362              	.LVL837:
 14363              	.L1244:
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14364              		.loc 1 1107 68 is_stmt 1 view .LVU5067
 14365              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14366              		.loc 1 1107 69 is_stmt 0 view .LVU5068
 14367 4e14 4C8D4902 		lea	r9, 2[rcx]	# c,
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14368              		.loc 1 1107 32 is_stmt 1 view .LVU5069
 14369 4e18 488D5E04 		lea	rbx, 4[rsi]	# ivtmp.633,
 14370              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14371              		.loc 1 1107 51 is_stmt 0 view .LVU5070
 14372 4e1c 4D89CB   		mov	r11, r9	# tmp272, c
 14373 4e1f 4D0FAFD9 		imul	r11, r9	# tmp272, c
 14374              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14375              		.loc 1 1107 47 view .LVU5071
 14376 4e23 4D39E3   		cmp	r11, r12	# tmp272, ivtmp.641
 14377 4e26 7738     		ja	.L1187	#,
1108:sieve_extend.c ****             }
 14378              		.loc 1 1108 17 is_stmt 1 view .LVU5072
 14379              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14380              		.loc 1 1108 48 is_stmt 0 view .LVU5073
GAS LISTING /tmp/ccBvFgp2.s 			page 389


 14381 4e28 4D01C9   		add	r9, r9	# tmp273
 14382 4e2b 4D39F1   		cmp	r9, r14	# tmp273, ivtmp.643
 14383 4e2e 7417     		je	.L1246	#,
 14384              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14385              		.loc 1 1108 33 view .LVU5074
 14386 4e30 31D2     		xor	edx, edx	# tmp275
 14387 4e32 4C89E0   		mov	rax, r12	# tmp276, ivtmp.641
 14388 4e35 48F7F3   		div	rbx	# ivtmp.633
 14389              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14390              		.loc 1 1108 20 view .LVU5075
 14391 4e38 4885D2   		test	rdx, rdx	# tmp275
 14392 4e3b 410F94C2 		sete	r10b	#, tmp277
 14393              	# sieve_extend.c:1108:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1108:sieve_extend.c ****             }
 14394              		.loc 1 1108 82 view .LVU5076
 14395 4e3f 4180FA01 		cmp	r10b, 1	# tmp277,
 14396 4e43 4883DDFF 		sbb	rbp, -1	# c_prime,
 14397              	.LVL838:
 14398              	.L1246:
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14399              		.loc 1 1107 68 is_stmt 1 view .LVU5077
 14400              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14401              		.loc 1 1107 69 is_stmt 0 view .LVU5078
 14402 4e47 4883C103 		add	rcx, 3	# c,
 14403              	.LVL839:
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14404              		.loc 1 1107 32 is_stmt 1 view .LVU5079
 14405 4e4b 4883C606 		add	rsi, 6	# ivtmp.633,
 14406              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14407              		.loc 1 1107 51 is_stmt 0 view .LVU5080
 14408 4e4f 4989C9   		mov	r9, rcx	# tmp278, c
 14409 4e52 4C0FAFC9 		imul	r9, rcx	# tmp278, c
 14410              	# sieve_extend.c:1107:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14411              		.loc 1 1107 47 view .LVU5081
 14412 4e56 4D39E1   		cmp	r9, r12	# tmp278, ivtmp.641
 14413 4e59 0F8621FF 		jbe	.L1181	#,
 14413      FFFF
 14414              	.LVL840:
 14415 4e5f 90       		.p2align 4
 14416              		.p2align 3
 14417              	.L1187:
1107:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 14418              		.loc 1 1107 47 view .LVU5082
 14419              	.LBE719:
1110:sieve_extend.c ****         }
 14420              		.loc 1 1110 13 is_stmt 1 view .LVU5083
 14421              	# sieve_extend.c:1110:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1110:sieve_extend.c ****         }
 14422              		.loc 1 1110 16 is_stmt 0 view .LVU5084
 14423 4e60 4885ED   		test	rbp, rbp	# c_prime
 14424 4e63 0F840D02 		je	.L1305	#,
 14424      0000
GAS LISTING /tmp/ccBvFgp2.s 			page 390


 14425              	.LVL841:
 14426              	.L1184:
1110:sieve_extend.c ****         }
 14427              		.loc 1 1110 16 view .LVU5085
 14428              	.LBE717:
1097:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 14429              		.loc 1 1097 52 is_stmt 1 view .LVU5086
 14430              	# sieve_extend.c:1097:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
1097:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 14431              		.loc 1 1097 57 is_stmt 0 view .LVU5087
 14432 4e69 4983C701 		add	r15, 1	# prime,
 14433              	.LVL842:
1097:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 14434              		.loc 1 1097 31 is_stmt 1 view .LVU5088
 14435 4e6d 4983C402 		add	r12, 2	# ivtmp.641,
 14436 4e71 4983C602 		add	r14, 2	# ivtmp.643,
 14437              	# sieve_extend.c:1097:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
1097:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 14438              		.loc 1 1097 5 is_stmt 0 view .LVU5089
 14439 4e75 4939FF   		cmp	r15, rdi	# prime, _137
 14440 4e78 0F8202FE 		jb	.L1188	#,
 14440      FFFF
 14441              	.LVL843:
 14442              	.L1294:
1097:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 14443              		.loc 1 1097 5 view .LVU5090
 14444 4e7e 448B6C24 		mov	r13d, DWORD PTR 36[rsp]	# <retval>, %sfp
 14444      24
 14445              	.LVL844:
 14446              	.L1158:
1097:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 14447              		.loc 1 1097 5 view .LVU5091
 14448              	.LBE728:
 14449              	.LBE703:
 14450              	.LBE702:
 14451              	# sieve_extend.c:1141: }
1141:sieve_extend.c **** 
 14452              		.loc 1 1141 1 view .LVU5092
 14453 4e83 488D6424 		lea	rsp, 56[rsp]	#,
 14453      38
 14454              		.cfi_remember_state
 14455              		.cfi_def_cfa_offset 56
 14456 4e88 4489E8   		mov	eax, r13d	#, <retval>
 14457 4e8b 5B       		pop	rbx	#
 14458              		.cfi_def_cfa_offset 48
 14459 4e8c 5D       		pop	rbp	#
 14460              		.cfi_def_cfa_offset 40
 14461 4e8d 415C     		pop	r12	#
 14462              		.cfi_def_cfa_offset 32
 14463 4e8f 415D     		pop	r13	#
 14464              		.cfi_def_cfa_offset 24
 14465 4e91 415E     		pop	r14	#
 14466              		.cfi_def_cfa_offset 16
 14467 4e93 415F     		pop	r15	#
 14468              		.cfi_def_cfa_offset 8
 14469 4e95 C3       		ret	
 14470              	.LVL845:
GAS LISTING /tmp/ccBvFgp2.s 			page 391


 14471              	.L1303:
 14472              		.cfi_restore_state
 14473              	# sieve_extend.c:1120:     switch(sieve->size) {
1120:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 14474              		.loc 1 1120 5 view .LVU5093
 14475 4e96 4981F9E8 		cmp	r9, 1000	# pretmp_199,
 14475      030000
 14476 4e9d 0F84E602 		je	.L1165	#,
 14476      0000
 14477 4ea3 7633     		jbe	.L1306	#,
 14478 4ea5 4981F910 		cmp	r9, 10000	# pretmp_199,
 14478      270000
 14479 4eac 0F852303 		jne	.L1169	#,
 14479      0000
 14480 4eb2 4981F8CD 		cmp	r8, 1229	# primeCount,
 14480      040000
 14481              	# sieve_extend.c:1124:         case 10000:         valid_primes = 1229;     break;
1124:sieve_extend.c ****         case 100000:        valid_primes = 9592;     break;
 14482              		.loc 1 1124 42 view .LVU5094
 14483 4eb9 B9CD0400 		mov	ecx, 1229	# valid_primes,
 14483      00
 14484 4ebe 400F94C6 		sete	sil	#, tmp179
 14485 4ec2 21F2     		and	edx, esi	# _251, tmp179
 14486 4ec4 4981F8CD 		cmp	r8, 1229	# primeCount,
 14486      040000
 14487 4ecb 440FB6EE 		movzx	r13d, sil	# <retval>, tmp179
 14488 4ecf 410F95C6 		setne	r14b	#, _135
1124:sieve_extend.c ****         case 100000:        valid_primes = 9592;     break;
 14489              		.loc 1 1124 29 is_stmt 1 view .LVU5095
 14490              	.LVL846:
1124:sieve_extend.c ****         case 100000:        valid_primes = 9592;     break;
 14491              		.loc 1 1124 54 view .LVU5096
 14492              	# sieve_extend.c:1124:         case 10000:         valid_primes = 1229;     break;
1124:sieve_extend.c ****         case 100000:        valid_primes = 9592;     break;
 14493              		.loc 1 1124 9 is_stmt 0 view .LVU5097
 14494 4ed3 E938FDFF 		jmp	.L1176	#
 14494      FF
 14495              	.LVL847:
 14496              	.L1306:
 14497              	# sieve_extend.c:1120:     switch(sieve->size) {
1120:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 14498              		.loc 1 1120 5 view .LVU5098
 14499 4ed8 4983F90A 		cmp	r9, 10	# pretmp_199,
 14500 4edc 0F841A02 		je	.L1167	#,
 14500      0000
 14501 4ee2 4983F964 		cmp	r9, 100	# pretmp_199,
 14502 4ee6 0F85E902 		jne	.L1169	#,
 14502      0000
 14503 4eec 4983F819 		cmp	r8, 25	# primeCount,
 14504 4ef0 0F94C1   		sete	cl	#, tmp173
 14505 4ef3 21CA     		and	edx, ecx	# _251, tmp173
 14506 4ef5 4983F819 		cmp	r8, 25	# primeCount,
 14507 4ef9 440FB6E9 		movzx	r13d, cl	# <retval>, tmp173
 14508 4efd 410F95C6 		setne	r14b	#, _135
 14509              	# sieve_extend.c:1122:         case 100:           valid_primes = 25;       break;
1122:sieve_extend.c ****         case 1000:          valid_primes = 168;      break;
 14510              		.loc 1 1122 42 view .LVU5099
GAS LISTING /tmp/ccBvFgp2.s 			page 392


 14511 4f01 B9190000 		mov	ecx, 25	# valid_primes,
 14511      00
 14512 4f06 E905FDFF 		jmp	.L1176	#
 14512      FF
 14513 4f0b 0F1F4400 		.p2align 4,,7
 14513      00
 14514              		.p2align 3
 14515              	.L1304:
 14516              	# sieve_extend.c:1120:     switch(sieve->size) {
1120:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 14517              		.loc 1 1120 5 view .LVU5100
 14518 4f10 4981F940 		cmp	r9, 1000000	# pretmp_199,
 14518      420F00
 14519 4f17 0F84B801 		je	.L1173	#,
 14519      0000
 14520 4f1d 4981F980 		cmp	r9, 10000000	# pretmp_199,
 14520      969800
 14521 4f24 0F85AB02 		jne	.L1169	#,
 14521      0000
 14522 4f2a 4981F803 		cmp	r8, 664579	# primeCount,
 14522      240A00
 14523              	# sieve_extend.c:1127:         case 10000000:      valid_primes = 664579;   break;
1127:sieve_extend.c ****         case 100000000:     valid_primes = 5761455;  break;
 14524              		.loc 1 1127 42 view .LVU5101
 14525 4f31 B903240A 		mov	ecx, 664579	# valid_primes,
 14525      00
 14526 4f36 410F94C7 		sete	r15b	#, tmp185
 14527 4f3a 4421FA   		and	edx, r15d	# _251, tmp185
 14528 4f3d 4981F803 		cmp	r8, 664579	# primeCount,
 14528      240A00
 14529 4f44 450FB6EF 		movzx	r13d, r15b	# <retval>, tmp185
 14530 4f48 410F95C6 		setne	r14b	#, _135
1127:sieve_extend.c ****         case 100000000:     valid_primes = 5761455;  break;
 14531              		.loc 1 1127 29 is_stmt 1 view .LVU5102
 14532              	.LVL848:
1127:sieve_extend.c ****         case 100000000:     valid_primes = 5761455;  break;
 14533              		.loc 1 1127 54 view .LVU5103
 14534              	# sieve_extend.c:1127:         case 10000000:      valid_primes = 664579;   break;
1127:sieve_extend.c ****         case 100000000:     valid_primes = 5761455;  break;
 14535              		.loc 1 1127 9 is_stmt 0 view .LVU5104
 14536 4f4c E9BFFCFF 		jmp	.L1176	#
 14536      FF
 14537              	.LVL849:
 14538              		.p2align 4,,7
 14539 4f51 0F1F8000 		.p2align 3
 14539      000000
 14540              	.L1180:
 14541              	.LBB733:
 14542              	.LBB731:
 14543              	.LBB729:
 14544              	.LBB726:
1099:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 14545              		.loc 1 1099 32 is_stmt 1 view .LVU5105
 14546              	# sieve_extend.c:1099:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1099:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 14547              		.loc 1 1099 13 is_stmt 0 view .LVU5106
 14548 4f58 4885FF   		test	rdi, rdi	# _137
GAS LISTING /tmp/ccBvFgp2.s 			page 393


 14549 4f5b 0F841DFF 		je	.L1294	#,
 14549      FFFF
 14550              	# sieve_extend.c:1099:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1099:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 14551              		.loc 1 1099 27 view .LVU5107
 14552 4f61 BB010000 		mov	ebx, 1	# c,
 14552      00
 14553 4f66 EB20     		jmp	.L1185	#
 14554              	.LVL850:
 14555              		.p2align 4,,7
 14556              		.p2align 3
 14557              	.L1194:
 14558              	# sieve_extend.c:1101:                     if (warn_prime++ < 30) printf("Number %ju (%ju) was mark
1101:sieve_extend.c ****                 }
 14559              		.loc 1 1101 35 view .LVU5108
 14560 4f68 4989E8   		mov	r8, rbp	# warn_prime, warn_prime
 14561              	.LVL851:
 14562              	.L1183:
1099:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 14563              		.loc 1 1099 68 is_stmt 1 view .LVU5109
 14564              	# sieve_extend.c:1099:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1099:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 14565              		.loc 1 1099 69 is_stmt 0 view .LVU5110
 14566 4f6b 4883C301 		add	rbx, 1	# c,
 14567              	.LVL852:
1099:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 14568              		.loc 1 1099 32 is_stmt 1 view .LVU5111
 14569              	# sieve_extend.c:1099:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1099:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 14570              		.loc 1 1099 13 is_stmt 0 view .LVU5112
 14571 4f6f 4839FB   		cmp	rbx, rdi	# c, _137
 14572 4f72 0F87F1FE 		ja	.L1184	#,
 14572      FFFF
 14573              	# sieve_extend.c:1099:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1099:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 14574              		.loc 1 1099 51 view .LVU5113
 14575 4f78 4989DB   		mov	r11, rbx	# tmp209, c
 14576 4f7b 4C0FAFDB 		imul	r11, rbx	# tmp209, c
 14577              	# sieve_extend.c:1099:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1099:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 14578              		.loc 1 1099 47 view .LVU5114
 14579 4f7f 4D39E3   		cmp	r11, r12	# tmp209, ivtmp.641
 14580 4f82 0F87E1FE 		ja	.L1184	#,
 14580      FFFF
 14581              	.LVL853:
 14582              	.L1185:
1100:sieve_extend.c ****                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marked prime, but %ju * %ju
 14583              		.loc 1 1100 17 is_stmt 1 view .LVU5115
 14584 4f88 488D2C1B 		lea	rbp, [rbx+rbx]	# _216,
 14585 4f8c 31D2     		xor	edx, edx	# tmp204
 14586 4f8e 4C89E0   		mov	rax, r12	# tmp203, ivtmp.641
 14587              	# sieve_extend.c:1100:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
1100:sieve_extend.c ****                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marked prime, but %ju * %ju
 14588              		.loc 1 1100 39 is_stmt 0 view .LVU5116
 14589 4f91 488D7501 		lea	rsi, 1[rbp]	# _55,
 14590 4f95 48F7F6   		div	rsi	# _55
 14591              	# sieve_extend.c:1100:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
GAS LISTING /tmp/ccBvFgp2.s 			page 394


1100:sieve_extend.c ****                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marked prime, but %ju * %ju
 14592              		.loc 1 1100 48 view .LVU5117
 14593 4f98 4885D2   		test	rdx, rdx	# tmp204
 14594 4f9b 75CE     		jne	.L1183	#,
1100:sieve_extend.c ****                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marked prime, but %ju * %ju
 14595              		.loc 1 1100 48 view .LVU5118
 14596 4f9d 4939EE   		cmp	r14, rbp	# ivtmp.643, _216
 14597 4fa0 74C9     		je	.L1183	#,
1101:sieve_extend.c ****                 }
 14598              		.loc 1 1101 21 is_stmt 1 view .LVU5119
 14599              	# sieve_extend.c:1101:                     if (warn_prime++ < 30) printf("Number %ju (%ju) was mark
1101:sieve_extend.c ****                 }
 14600              		.loc 1 1101 24 is_stmt 0 view .LVU5120
 14601 4fa2 4983F81D 		cmp	r8, 29	# warn_prime,
 14602              	# sieve_extend.c:1101:                     if (warn_prime++ < 30) printf("Number %ju (%ju) was mark
1101:sieve_extend.c ****                 }
 14603              		.loc 1 1101 35 view .LVU5121
 14604 4fa6 498D6801 		lea	rbp, 1[r8]	# warn_prime,
 14605              	.LVL854:
 14606              	# sieve_extend.c:1101:                     if (warn_prime++ < 30) printf("Number %ju (%ju) was mark
1101:sieve_extend.c ****                 }
 14607              		.loc 1 1101 24 view .LVU5122
 14608 4faa 77BC     		ja	.L1194	#,
1101:sieve_extend.c ****                 }
 14609              		.loc 1 1101 44 is_stmt 1 view .LVU5123
 14610              	.LVL855:
 14611              	.LBB714:
 14612              	.LBI708:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 14613              		.loc 3 105 1 view .LVU5124
 14614              	.LBB711:
 14615              		.loc 3 107 3 view .LVU5125
 14616              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 14617              		.loc 3 107 10 is_stmt 0 view .LVU5126
 14618 4fac 4989F0   		mov	r8, rsi	#, _55
 14619 4faf 4989C1   		mov	r9, rax	#, tmp203
 14620 4fb2 BF010000 		mov	edi, 1	#,
 14620      00
 14621 4fb7 4C89F9   		mov	rcx, r15	#, prime
 14622 4fba 4C892424 		mov	QWORD PTR [rsp], r12	#, ivtmp.641
 14623 4fbe 4C89E2   		mov	rdx, r12	#, ivtmp.641
 14624 4fc1 488D3500 		lea	rsi, .LC12[rip]	#,
 14624      000000
 14625 4fc8 31C0     		xor	eax, eax	#
 14626 4fca E8000000 		call	__printf_chk@PLT	#
 14626      00
 14627              	.LVL856:
 14628 4fcf 498B7D08 		mov	rdi, QWORD PTR 8[r13]	# _137, MEM[(uint64_t *)sieve_18(D) + 8B]
 14629              	.LBE711:
 14630              	.LBE714:
 14631              	# sieve_extend.c:1101:                     if (warn_prime++ < 30) printf("Number %ju (%ju) was mark
1101:sieve_extend.c ****                 }
 14632              		.loc 1 1101 35 view .LVU5127
 14633 4fd3 4989E8   		mov	r8, rbp	# warn_prime, warn_prime
 14634              	.LBB715:
 14635              	.LBB712:
 14636              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
GAS LISTING /tmp/ccBvFgp2.s 			page 395


 14637              		.loc 3 107 10 view .LVU5128
 14638 4fd6 EB93     		jmp	.L1183	#
 14639              	.LVL857:
 14640              	.L1159:
 14641              		.loc 3 107 10 view .LVU5129
 14642              	.LBE712:
 14643              	.LBE715:
 14644              	.LBE726:
 14645              	.LBE729:
 14646              	.LBE731:
 14647              	.LBE733:
 14648              	.LBB734:
 14649              	.LBB699:
1090:sieve_extend.c **** }
 14650              		.loc 1 1090 5 is_stmt 1 view .LVU5130
1090:sieve_extend.c **** }
 14651              		.loc 1 1090 5 is_stmt 0 view .LVU5131
 14652              	.LBE699:
 14653              	.LBE734:
1119:sieve_extend.c ****     switch(sieve->size) {
 14654              		.loc 1 1119 5 is_stmt 1 view .LVU5132
1120:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 14655              		.loc 1 1120 5 view .LVU5133
 14656 4fd8 4531ED   		xor	r13d, r13d	# <retval>
 14657 4fdb 4981F9A0 		cmp	r9, 100000	# pretmp_199,
 14657      860100
 14658 4fe2 41BE0100 		mov	r14d, 1	# _135,
 14658      0000
 14659 4fe8 41B80100 		mov	r8d, 1	# primeCount,
 14659      0000
 14660 4fee 0F842302 		je	.L1197	#,
 14660      0000
 14661 4ff4 0F872301 		ja	.L1189	#,
 14661      0000
 14662 4ffa 4983F964 		cmp	r9, 100	# pretmp_199,
 14663 4ffe B9190000 		mov	ecx, 25	# valid_primes,
 14663      00
 14664 5003 742A     		je	.L1177	#,
 14665              		.p2align 4,,2
 14666 5005 0F864001 		jbe	.L1307	#,
 14666      0000
 14667 500b 4981F9E8 		cmp	r9, 1000	# pretmp_199,
 14667      030000
 14668              	# sieve_extend.c:1123:         case 1000:          valid_primes = 168;      break;
1123:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 14669              		.loc 1 1123 42 is_stmt 0 view .LVU5134
 14670 5012 B9A80000 		mov	ecx, 168	# valid_primes,
 14670      00
 14671              	# sieve_extend.c:1120:     switch(sieve->size) {
1120:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 14672              		.loc 1 1120 5 view .LVU5135
 14673 5017 7416     		je	.L1177	#,
 14674 5019 4981F910 		cmp	r9, 10000	# pretmp_199,
 14674      270000
 14675 5020 B9CD0400 		mov	ecx, 1229	# tmp223,
 14675      00
 14676 5025 41BA0000 		mov	r10d, 0	# tmp224,
GAS LISTING /tmp/ccBvFgp2.s 			page 396


 14676      0000
 14677 502b 490F45CA 		cmovne	rcx, r10	# tmp223,, valid_primes, tmp224
 14678              	.LVL858:
 14679              	.L1177:
1135:sieve_extend.c ****         printf("No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produ
 14680              		.loc 1 1135 5 is_stmt 1 view .LVU5136
 14681              	# sieve_extend.c:1135:     if (!valid && option_verboselevel >= 1) {
1135:sieve_extend.c ****         printf("No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produ
 14682              		.loc 1 1135 39 is_stmt 0 view .LVU5137
 14683 502f 85DB     		test	ebx, ebx	# option_verboselevel
 14684 5031 410F9FC4 		setg	r12b	#, tmp194
 14685              	# sieve_extend.c:1135:     if (!valid && option_verboselevel >= 1) {
1135:sieve_extend.c ****         printf("No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produ
 14686              		.loc 1 1135 8 view .LVU5138
 14687 5035 4520F4   		and	r12b, r14b	# _7, _135
 14688 5038 0F84F0FB 		je	.L1178	#,
 14688      FFFF
1136:sieve_extend.c ****         if (!valid && option_verboselevel >= 2) show_primes(sieve, default_show_primes_on_error);
 14689              		.loc 1 1136 9 is_stmt 1 view .LVU5139
 14690              	.LVL859:
 14691              	.LBB735:
 14692              	.LBI735:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 14693              		.loc 3 105 1 view .LVU5140
 14694              	.LBB736:
 14695              		.loc 3 107 3 view .LVU5141
 14696              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 14697              		.loc 3 107 10 is_stmt 0 view .LVU5142
 14698 503e 31C0     		xor	eax, eax	#
 14699 5040 4C89CA   		mov	rdx, r9	#, pretmp_199
 14700 5043 488D3500 		lea	rsi, .LC10[rip]	#,
 14700      000000
 14701 504a BF010000 		mov	edi, 1	#,
 14701      00
 14702 504f E8000000 		call	__printf_chk@PLT	#
 14702      00
 14703              	.LVL860:
 14704              		.loc 3 107 10 view .LVU5143
 14705              	.LBE736:
 14706              	.LBE735:
1137:sieve_extend.c ****     }
 14707              		.loc 1 1137 9 is_stmt 1 view .LVU5144
 14708              	# sieve_extend.c:1137:         if (!valid && option_verboselevel >= 2) show_primes(sieve, default_s
1137:sieve_extend.c ****     }
 14709              		.loc 1 1137 12 is_stmt 0 view .LVU5145
 14710 5054 83FB01   		cmp	ebx, 1	# option_verboselevel,
 14711 5057 0F8426FE 		je	.L1158	#,
 14711      FFFF
1137:sieve_extend.c ****     }
 14712              		.loc 1 1137 49 is_stmt 1 discriminator 1 view .LVU5146
 14713 505d 488D7508 		lea	rsi, 8[rbp]	# tmp195,
 14714 5061 BA640000 		mov	edx, 100	#,
 14714      00
 14715 5066 4889EF   		mov	rdi, rbp	#, sieve
 14716              	# sieve_extend.c:1135:     if (!valid && option_verboselevel >= 1) {
1135:sieve_extend.c ****         printf("No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produ
 14717              		.loc 1 1135 9 is_stmt 0 discriminator 1 view .LVU5147
GAS LISTING /tmp/ccBvFgp2.s 			page 397


 14718 5069 4589E6   		mov	r14d, r12d	# _135, _7
 14719              	# sieve_extend.c:1137:         if (!valid && option_verboselevel >= 2) show_primes(sieve, default_s
1137:sieve_extend.c ****     }
 14720              		.loc 1 1137 49 discriminator 1 view .LVU5148
 14721 506c E8DFE6FF 		call	show_primes.isra.0	#
 14721      FF
 14722              	.LVL861:
 14723 5071 E9B8FBFF 		jmp	.L1178	#
 14723      FF
 14724              	.LVL862:
 14725              	.L1305:
 14726              	.LBB737:
 14727              	.LBB732:
 14728              	.LBB730:
 14729              	.LBB727:
 14730              	# sieve_extend.c:1110:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1110:sieve_extend.c ****         }
 14731              		.loc 1 1110 44 view .LVU5149
 14732 5076 488B4C24 		mov	rcx, QWORD PTR 24[rsp]	# warn_nonprime, %sfp
 14732      18
 14733              	# sieve_extend.c:1110:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1110:sieve_extend.c ****         }
 14734              		.loc 1 1110 28 view .LVU5150
 14735 507b 4883F91D 		cmp	rcx, 29	# warn_nonprime,
 14736              	# sieve_extend.c:1110:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1110:sieve_extend.c ****         }
 14737              		.loc 1 1110 44 view .LVU5151
 14738 507f 488D5901 		lea	rbx, 1[rcx]	# warn_nonprime,
 14739              	.LVL863:
 14740              	# sieve_extend.c:1110:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1110:sieve_extend.c ****         }
 14741              		.loc 1 1110 28 view .LVU5152
 14742 5083 761D     		jbe	.L1192	#,
 14743              	# sieve_extend.c:1110:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1110:sieve_extend.c ****         }
 14744              		.loc 1 1110 44 view .LVU5153
 14745 5085 48895C24 		mov	QWORD PTR 24[rsp], rbx	# %sfp, warn_nonprime
 14745      18
 14746 508a E9DAFDFF 		jmp	.L1184	#
 14746      FF
 14747              	.LVL864:
 14748              	.L1292:
1110:sieve_extend.c ****         }
 14749              		.loc 1 1110 44 view .LVU5154
 14750 508f 488B5424 		mov	rdx, QWORD PTR 24[rsp]	# warn_nonprime, %sfp
 14750      18
 14751              	# sieve_extend.c:1110:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1110:sieve_extend.c ****         }
 14752              		.loc 1 1110 28 view .LVU5155
 14753 5094 4883FA1D 		cmp	rdx, 29	# warn_nonprime,
 14754              	# sieve_extend.c:1110:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1110:sieve_extend.c ****         }
 14755              		.loc 1 1110 44 view .LVU5156
 14756 5098 488D5A01 		lea	rbx, 1[rdx]	# warn_nonprime,
 14757              	.LVL865:
 14758              	# sieve_extend.c:1110:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1110:sieve_extend.c ****         }
GAS LISTING /tmp/ccBvFgp2.s 			page 398


 14759              		.loc 1 1110 28 view .LVU5157
 14760 509c 0F87DCFD 		ja	.L1294	#,
 14760      FFFF
 14761              	.LVL866:
 14762              	.L1192:
 14763              	.LBB720:
 14764              	.LBB721:
 14765              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 14766              		.loc 3 107 10 view .LVU5158
 14767 50a2 BF010000 		mov	edi, 1	#,
 14767      00
 14768              	.LBE721:
 14769              	.LBE720:
 14770              	# sieve_extend.c:1110:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1110:sieve_extend.c ****         }
 14771              		.loc 1 1110 53 view .LVU5159
 14772 50a7 4B8D543F 		lea	rdx, 1[r15+r15]	# tmp220,
 14772      01
 14773              	.LBB724:
 14774              	.LBB722:
 14775              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 14776              		.loc 3 107 10 view .LVU5160
 14777 50ac 4C89F9   		mov	rcx, r15	#, prime
 14778 50af 488D3500 		lea	rsi, .LC13[rip]	#,
 14778      000000
 14779 50b6 4C894424 		mov	QWORD PTR 40[rsp], r8	# %sfp, warn_prime
 14779      28
 14780              	.LBE722:
 14781              	.LBE724:
1110:sieve_extend.c ****         }
 14782              		.loc 1 1110 53 is_stmt 1 view .LVU5161
 14783              	.LVL867:
 14784              	.LBB725:
 14785              	.LBI720:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 14786              		.loc 3 105 1 view .LVU5162
 14787              	.LBB723:
 14788              		.loc 3 107 3 view .LVU5163
 14789              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 14790              		.loc 3 107 10 is_stmt 0 view .LVU5164
 14791 50bb 31C0     		xor	eax, eax	#
 14792 50bd E8000000 		call	__printf_chk@PLT	#
 14792      00
 14793              	.LVL868:
 14794              		.loc 3 107 10 view .LVU5165
 14795 50c2 498B7D08 		mov	rdi, QWORD PTR 8[r13]	# _137, MEM[(uint64_t *)sieve_18(D) + 8B]
 14796 50c6 4C8B4424 		mov	r8, QWORD PTR 40[rsp]	# warn_prime, %sfp
 14796      28
 14797 50cb 48895C24 		mov	QWORD PTR 24[rsp], rbx	# %sfp, warn_nonprime
 14797      18
 14798 50d0 E994FDFF 		jmp	.L1184	#
 14798      FF
 14799              	.LVL869:
 14800              	.L1173:
 14801              		.loc 3 107 10 view .LVU5166
 14802 50d5 4981F8A2 		cmp	r8, 78498	# primeCount,
 14802      320100
GAS LISTING /tmp/ccBvFgp2.s 			page 399


 14803              	.LBE723:
 14804              	.LBE725:
 14805              	.LBE727:
 14806              	.LBE730:
 14807              	.LBE732:
 14808              	.LBE737:
 14809              	# sieve_extend.c:1126:         case 1000000:       valid_primes = 78498;    break;
1126:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 14810              		.loc 1 1126 42 view .LVU5167
 14811 50dc B9A23201 		mov	ecx, 78498	# valid_primes,
 14811      00
 14812 50e1 410F94C5 		sete	r13b	#, tmp183
 14813 50e5 4421EA   		and	edx, r13d	# _251, tmp183
 14814 50e8 4981F8A2 		cmp	r8, 78498	# primeCount,
 14814      320100
 14815 50ef 450FB6ED 		movzx	r13d, r13b	# <retval>, tmp183
 14816 50f3 410F95C6 		setne	r14b	#, _135
1126:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 14817              		.loc 1 1126 29 is_stmt 1 view .LVU5168
 14818              	.LVL870:
1126:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 14819              		.loc 1 1126 54 view .LVU5169
 14820              	# sieve_extend.c:1126:         case 1000000:       valid_primes = 78498;    break;
1126:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 14821              		.loc 1 1126 9 is_stmt 0 view .LVU5170
 14822 50f7 E914FBFF 		jmp	.L1176	#
 14822      FF
 14823              	.LVL871:
 14824              	.L1167:
1126:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 14825              		.loc 1 1126 9 view .LVU5171
 14826 50fc 4983F804 		cmp	r8, 4	# primeCount,
 14827              	# sieve_extend.c:1121:         case 10:            valid_primes = 4;        break;
1121:sieve_extend.c ****         case 100:           valid_primes = 25;       break;
 14828              		.loc 1 1121 42 view .LVU5172
 14829 5100 B9040000 		mov	ecx, 4	# valid_primes,
 14829      00
 14830 5105 410F94C2 		sete	r10b	#, tmp175
 14831 5109 4421D2   		and	edx, r10d	# _251, tmp175
 14832 510c 4983F804 		cmp	r8, 4	# primeCount,
 14833 5110 450FB6EA 		movzx	r13d, r10b	# <retval>, tmp175
 14834 5114 410F95C6 		setne	r14b	#, _135
 14835 5118 E9F3FAFF 		jmp	.L1176	#
 14835      FF
 14836              	.LVL872:
 14837              	.L1189:
 14838              	# sieve_extend.c:1120:     switch(sieve->size) {
1120:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 14839              		.loc 1 1120 5 view .LVU5173
 14840 511d 4981F900 		cmp	r9, 100000000	# pretmp_199,
 14840      E1F505
 14841              	# sieve_extend.c:1128:         case 100000000:     valid_primes = 5761455;  break;
1128:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 14842              		.loc 1 1128 42 view .LVU5174
 14843 5124 B9AFE957 		mov	ecx, 5761455	# valid_primes,
 14843      00
 14844              	# sieve_extend.c:1120:     switch(sieve->size) {
GAS LISTING /tmp/ccBvFgp2.s 			page 400


1120:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 14845              		.loc 1 1120 5 view .LVU5175
 14846 5129 0F8400FF 		je	.L1177	#,
 14846      FFFF
 14847 512f 762C     		jbe	.L1308	#,
 14848 5131 4981F900 		cmp	r9, 1000000000	# pretmp_199,
 14848      CA9A3B
 14849 5138 B92EDF07 		mov	ecx, 50847534	# tmp227,
 14849      03
 14850 513d B8000000 		mov	eax, 0	# tmp228,
 14850      00
 14851 5142 480F45C8 		cmovne	rcx, rax	# tmp227,, valid_primes, tmp228
 14852 5146 E9E4FEFF 		jmp	.L1177	#
 14852      FF
 14853              	.L1307:
 14854 514b 31C9     		xor	ecx, ecx	# valid_primes
 14855 514d 4983F90A 		cmp	r9, 10	# pretmp_199,
 14856 5151 0F94C1   		sete	cl	#, valid_primes
 14857 5154 48C1E102 		sal	rcx, 2	# valid_primes,
 14858 5158 E9D2FEFF 		jmp	.L1177	#
 14858      FF
 14859              	.L1308:
 14860 515d 4981F940 		cmp	r9, 1000000	# pretmp_199,
 14860      420F00
 14861              	# sieve_extend.c:1126:         case 1000000:       valid_primes = 78498;    break;
1126:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 14862              		.loc 1 1126 42 view .LVU5176
 14863 5164 B9A23201 		mov	ecx, 78498	# valid_primes,
 14863      00
 14864              	# sieve_extend.c:1120:     switch(sieve->size) {
1120:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 14865              		.loc 1 1120 5 view .LVU5177
 14866 5169 0F84C0FE 		je	.L1177	#,
 14866      FFFF
 14867 516f 4981F980 		cmp	r9, 10000000	# pretmp_199,
 14867      969800
 14868 5176 B903240A 		mov	ecx, 664579	# tmp225,
 14868      00
 14869 517b BE000000 		mov	esi, 0	# tmp226,
 14869      00
 14870 5180 480F45CE 		cmovne	rcx, rsi	# tmp225,, valid_primes, tmp226
 14871 5184 E9A6FEFF 		jmp	.L1177	#
 14871      FF
 14872              	.LVL873:
 14873              	.L1165:
1120:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 14874              		.loc 1 1120 5 view .LVU5178
 14875 5189 4981F8A8 		cmp	r8, 168	# primeCount,
 14875      000000
 14876              	# sieve_extend.c:1123:         case 1000:          valid_primes = 168;      break;
1123:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 14877              		.loc 1 1123 42 view .LVU5179
 14878 5190 B9A80000 		mov	ecx, 168	# valid_primes,
 14878      00
 14879 5195 410F94C6 		sete	r14b	#, tmp177
 14880 5199 4421F2   		and	edx, r14d	# _251, tmp177
 14881 519c 4981F8A8 		cmp	r8, 168	# primeCount,
GAS LISTING /tmp/ccBvFgp2.s 			page 401


 14881      000000
 14882 51a3 450FB6EE 		movzx	r13d, r14b	# <retval>, tmp177
 14883 51a7 410F95C6 		setne	r14b	#, _135
1123:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 14884              		.loc 1 1123 29 is_stmt 1 view .LVU5180
 14885              	.LVL874:
1123:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 14886              		.loc 1 1123 54 view .LVU5181
 14887              	# sieve_extend.c:1123:         case 1000:          valid_primes = 168;      break;
1123:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 14888              		.loc 1 1123 9 is_stmt 0 view .LVU5182
 14889 51ab E960FAFF 		jmp	.L1176	#
 14889      FF
 14890              	.LVL875:
 14891              	.L1171:
1123:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 14892              		.loc 1 1123 9 view .LVU5183
 14893 51b0 4981F8AF 		cmp	r8, 5761455	# primeCount,
 14893      E95700
 14894              	# sieve_extend.c:1128:         case 100000000:     valid_primes = 5761455;  break;
1128:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 14895              		.loc 1 1128 42 view .LVU5184
 14896 51b7 B9AFE957 		mov	ecx, 5761455	# valid_primes,
 14896      00
 14897 51bc 0F94C0   		sete	al	#, tmp187
 14898 51bf 21C2     		and	edx, eax	# _251, tmp187
 14899 51c1 4981F8AF 		cmp	r8, 5761455	# primeCount,
 14899      E95700
 14900 51c8 440FB6E8 		movzx	r13d, al	# <retval>, tmp187
 14901 51cc 410F95C6 		setne	r14b	#, _135
1128:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 14902              		.loc 1 1128 29 is_stmt 1 view .LVU5185
 14903              	.LVL876:
1128:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 14904              		.loc 1 1128 54 view .LVU5186
 14905              	# sieve_extend.c:1128:         case 100000000:     valid_primes = 5761455;  break;
1128:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 14906              		.loc 1 1128 9 is_stmt 0 view .LVU5187
 14907 51d0 E93BFAFF 		jmp	.L1176	#
 14907      FF
 14908              	.LVL877:
 14909              	.L1169:
1128:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 14910              		.loc 1 1128 9 view .LVU5188
 14911 51d5 4D85C0   		test	r8, r8	# primeCount
 14912 51d8 410F94C3 		sete	r11b	#, tmp191
 14913 51dc 4421DA   		and	edx, r11d	# _251, tmp191
 14914 51df 4D85C0   		test	r8, r8	# primeCount
 14915 51e2 450FB6EB 		movzx	r13d, r11b	# <retval>, tmp191
 14916 51e6 410F95C6 		setne	r14b	#, _135
1130:sieve_extend.c ****     }
 14917              		.loc 1 1130 29 is_stmt 1 view .LVU5189
 14918              	# sieve_extend.c:1130:         default:            valid_primes= 0;
1130:sieve_extend.c ****     }
 14919              		.loc 1 1130 41 is_stmt 0 view .LVU5190
 14920 51ea 31C9     		xor	ecx, ecx	# valid_primes
 14921 51ec E91FFAFF 		jmp	.L1176	#
GAS LISTING /tmp/ccBvFgp2.s 			page 402


 14921      FF
 14922              	.L1163:
1130:sieve_extend.c ****     }
 14923              		.loc 1 1130 41 view .LVU5191
 14924 51f1 4981F878 		cmp	r8, 9592	# primeCount,
 14924      250000
 14925              	# sieve_extend.c:1125:         case 100000:        valid_primes = 9592;     break;
1125:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
 14926              		.loc 1 1125 42 view .LVU5192
 14927 51f8 B9782500 		mov	ecx, 9592	# valid_primes,
 14927      00
 14928 51fd 400F94C7 		sete	dil	#, tmp181
 14929 5201 21FA     		and	edx, edi	# _251, tmp181
 14930 5203 4981F878 		cmp	r8, 9592	# primeCount,
 14930      250000
 14931 520a 440FB6EF 		movzx	r13d, dil	# <retval>, tmp181
 14932 520e 410F95C6 		setne	r14b	#, _135
1125:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
 14933              		.loc 1 1125 29 is_stmt 1 view .LVU5193
 14934              	.LVL878:
1125:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
 14935              		.loc 1 1125 54 view .LVU5194
 14936              	# sieve_extend.c:1125:         case 100000:        valid_primes = 9592;     break;
1125:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
 14937              		.loc 1 1125 9 is_stmt 0 view .LVU5195
 14938 5212 E9F9F9FF 		jmp	.L1176	#
 14938      FF
 14939              	.LVL879:
 14940              	.L1197:
 14941              	# sieve_extend.c:1125:         case 100000:        valid_primes = 9592;     break;
1125:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
 14942              		.loc 1 1125 42 view .LVU5196
 14943 5217 B9782500 		mov	ecx, 9592	# valid_primes,
 14943      00
 14944 521c E90EFEFF 		jmp	.L1177	#
 14944      FF
 14945              		.cfi_endproc
 14946              	.LFE80:
 14948              		.section	.rodata.str1.8
 14949 0145 000000   		.align 8
 14950              	.LC14:
 14951 0148 55736167 		.string	"Usage: %s [options] [maximum]\n"
 14951      653A2025 
 14951      73205B6F 
 14951      7074696F 
 14951      6E735D20 
 14952              		.section	.rodata.str1.1
 14953              	.LC15:
 14954 0031 4F707469 		.string	"Options:\n"
 14954      6F6E733A 
 14954      0A00
 14955              		.section	.rodata.str1.8
 14956 0167 00       		.align 8
 14957              	.LC16:
 14958 0168 20202D2D 		.string	"  --verbose <level>  Show more output to a certain level:\n"
 14958      76657262 
 14958      6F736520 
GAS LISTING /tmp/ccBvFgp2.s 			page 403


 14958      3C6C6576 
 14958      656C3E20 
 14959 01a3 00000000 		.align 8
 14959      00
 14960              	.LC17:
 14961 01a8 20202020 		.string	"                     1 - show phase progress\n"
 14961      20202020 
 14961      20202020 
 14961      20202020 
 14961      20202020 
 14962 01d6 0000     		.align 8
 14963              	.LC18:
 14964 01d8 20202020 		.string	"                     2 - show general progress within the phase\n"
 14964      20202020 
 14964      20202020 
 14964      20202020 
 14964      20202020 
 14965 0219 00000000 		.align 8
 14965      000000
 14966              	.LC19:
 14967 0220 20202020 		.string	"                     3 - show actual work\n"
 14967      20202020 
 14967      20202020 
 14967      20202020 
 14967      20202020 
 14968 024b 00000000 		.align 8
 14968      00
 14969              	.LC20:
 14970 0250 20202D2D 		.string	"  --check            check the correctness of the algorithm\n"
 14970      63686563 
 14970      6B202020 
 14970      20202020 
 14970      20202020 
 14971 028d 000000   		.align 8
 14972              	.LC21:
 14973 0290 20202D2D 		.string	"  --show <maximum>   Show the primes found up to the maximum\n"
 14973      73686F77 
 14973      203C6D61 
 14973      78696D75 
 14973      6D3E2020 
 14974 02ce 0000     		.align 8
 14975              	.LC22:
 14976 02d0 20202D2D 		.string	"  --tune  <level>    find the best settings for the current os and hardware\n"
 14976      74756E65 
 14976      20203C6C 
 14976      6576656C 
 14976      3E202020 
 14977 031d 000000   		.align 8
 14978              	.LC23:
 14979 0320 20202020 		.string	"                     1 - fast tuning\n"
 14979      20202020 
 14979      20202020 
 14979      20202020 
 14979      20202020 
 14980 0346 0000     		.align 8
 14981              	.LC24:
 14982 0348 20202020 		.string	"                     2 - refined tuning\n"
GAS LISTING /tmp/ccBvFgp2.s 			page 404


 14982      20202020 
 14982      20202020 
 14982      20202020 
 14982      20202020 
 14983 0371 00000000 		.align 8
 14983      000000
 14984              	.LC25:
 14985 0378 20202020 		.string	"                     3 - maximum tuning (takes long)\n"
 14985      20202020 
 14985      20202020 
 14985      20202020 
 14985      20202020 
 14986              		.text
 14987 5221 66662E0F 		.p2align 4
 14987      1F840000 
 14987      0000000F 
 14987      1F4000
 14988              		.globl	usage
 14990              	usage:
 14991              	.LVL880:
 14992              	.LFB81:
1143:sieve_extend.c ****     fprintf(stderr, "Usage: %s [options] [maximum]\n", name);
 14993              		.loc 1 1143 24 is_stmt 1 view -0
 14994              		.cfi_startproc
1143:sieve_extend.c ****     fprintf(stderr, "Usage: %s [options] [maximum]\n", name);
 14995              		.loc 1 1143 24 is_stmt 0 view .LVU5198
 14996 5230 F30F1EFA 		endbr64	
 14997 5234 50       		push	rax	#
 14998              		.cfi_def_cfa_offset 16
 14999 5235 58       		pop	rax	#
 15000              		.cfi_def_cfa_offset 8
1144:sieve_extend.c ****     fprintf(stderr, "Options:\n");
 15001              		.loc 1 1144 5 is_stmt 1 view .LVU5199
 15002              	.LVL881:
 15003              	.LBB738:
 15004              	.LBI738:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15005              		.loc 3 98 1 view .LVU5200
 15006              	.LBB739:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15007              		.loc 3 100 3 view .LVU5201
 15008              	.LBE739:
 15009              	.LBE738:
 15010              	# sieve_extend.c:1143: void usage(char *name) {
1143:sieve_extend.c ****     fprintf(stderr, "Usage: %s [options] [maximum]\n", name);
 15011              		.loc 1 1143 24 is_stmt 0 view .LVU5202
 15012 5236 488D6424 		lea	rsp, -8[rsp]	#,
 15012      F8
 15013              		.cfi_def_cfa_offset 16
 15014              	# sieve_extend.c:1143: void usage(char *name) {
1143:sieve_extend.c ****     fprintf(stderr, "Usage: %s [options] [maximum]\n", name);
 15015              		.loc 1 1143 24 view .LVU5203
 15016 523b 4889F9   		mov	rcx, rdi	# name, tmp107
 15017              	.LBB741:
 15018              	.LBB740:
 15019              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
GAS LISTING /tmp/ccBvFgp2.s 			page 405


 15020              		.loc 3 100 10 view .LVU5204
 15021 523e 488B3D00 		mov	rdi, QWORD PTR stderr[rip]	#, stderr
 15021      000000
 15022              	.LVL882:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15023              		.loc 3 100 10 view .LVU5205
 15024 5245 488D1500 		lea	rdx, .LC14[rip]	#,
 15024      000000
 15025 524c BE010000 		mov	esi, 1	#,
 15025      00
 15026 5251 31C0     		xor	eax, eax	#
 15027 5253 E8000000 		call	__fprintf_chk@PLT	#
 15027      00
 15028              	.LVL883:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15029              		.loc 3 100 10 view .LVU5206
 15030              	.LBE740:
 15031              	.LBE741:
1145:sieve_extend.c ****     fprintf(stderr, "  --verbose <level>  Show more output to a certain level:\n");
 15032              		.loc 1 1145 5 is_stmt 1 view .LVU5207
 15033              	.LBB742:
 15034              	.LBI742:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15035              		.loc 3 98 1 view .LVU5208
 15036              	.LBB743:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15037              		.loc 3 100 3 view .LVU5209
 15038              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15039              		.loc 3 100 10 is_stmt 0 view .LVU5210
 15040 5258 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 15040      000000
 15041 525f BA090000 		mov	edx, 9	#,
 15041      00
 15042 5264 BE010000 		mov	esi, 1	#,
 15042      00
 15043 5269 488D3D00 		lea	rdi, .LC15[rip]	#,
 15043      000000
 15044 5270 E8000000 		call	fwrite@PLT	#
 15044      00
 15045              	.LVL884:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15046              		.loc 3 100 10 view .LVU5211
 15047              	.LBE743:
 15048              	.LBE742:
1146:sieve_extend.c ****     fprintf(stderr, "                     1 - show phase progress\n");
 15049              		.loc 1 1146 5 is_stmt 1 view .LVU5212
 15050              	.LBB744:
 15051              	.LBI744:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15052              		.loc 3 98 1 view .LVU5213
 15053              	.LBB745:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15054              		.loc 3 100 3 view .LVU5214
 15055              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15056              		.loc 3 100 10 is_stmt 0 view .LVU5215
GAS LISTING /tmp/ccBvFgp2.s 			page 406


 15057 5275 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 15057      000000
 15058 527c BA3A0000 		mov	edx, 58	#,
 15058      00
 15059 5281 BE010000 		mov	esi, 1	#,
 15059      00
 15060 5286 488D3D00 		lea	rdi, .LC16[rip]	#,
 15060      000000
 15061 528d E8000000 		call	fwrite@PLT	#
 15061      00
 15062              	.LVL885:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15063              		.loc 3 100 10 view .LVU5216
 15064              	.LBE745:
 15065              	.LBE744:
1147:sieve_extend.c ****     fprintf(stderr, "                     2 - show general progress within the phase\n");
 15066              		.loc 1 1147 5 is_stmt 1 view .LVU5217
 15067              	.LBB746:
 15068              	.LBI746:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15069              		.loc 3 98 1 view .LVU5218
 15070              	.LBB747:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15071              		.loc 3 100 3 view .LVU5219
 15072              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15073              		.loc 3 100 10 is_stmt 0 view .LVU5220
 15074 5292 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 15074      000000
 15075 5299 BA2D0000 		mov	edx, 45	#,
 15075      00
 15076 529e BE010000 		mov	esi, 1	#,
 15076      00
 15077 52a3 488D3D00 		lea	rdi, .LC17[rip]	#,
 15077      000000
 15078 52aa E8000000 		call	fwrite@PLT	#
 15078      00
 15079              	.LVL886:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15080              		.loc 3 100 10 view .LVU5221
 15081              	.LBE747:
 15082              	.LBE746:
1148:sieve_extend.c ****     fprintf(stderr, "                     3 - show actual work\n");
 15083              		.loc 1 1148 5 is_stmt 1 view .LVU5222
 15084              	.LBB748:
 15085              	.LBI748:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15086              		.loc 3 98 1 view .LVU5223
 15087              	.LBB749:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15088              		.loc 3 100 3 view .LVU5224
 15089              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15090              		.loc 3 100 10 is_stmt 0 view .LVU5225
 15091 52af 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 15091      000000
 15092 52b6 BA400000 		mov	edx, 64	#,
GAS LISTING /tmp/ccBvFgp2.s 			page 407


 15092      00
 15093 52bb BE010000 		mov	esi, 1	#,
 15093      00
 15094 52c0 488D3D00 		lea	rdi, .LC18[rip]	#,
 15094      000000
 15095 52c7 E8000000 		call	fwrite@PLT	#
 15095      00
 15096              	.LVL887:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15097              		.loc 3 100 10 view .LVU5226
 15098              	.LBE749:
 15099              	.LBE748:
1149:sieve_extend.c ****     fprintf(stderr, "  --check            check the correctness of the algorithm\n");
 15100              		.loc 1 1149 5 is_stmt 1 view .LVU5227
 15101              	.LBB750:
 15102              	.LBI750:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15103              		.loc 3 98 1 view .LVU5228
 15104              	.LBB751:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15105              		.loc 3 100 3 view .LVU5229
 15106              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15107              		.loc 3 100 10 is_stmt 0 view .LVU5230
 15108 52cc 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 15108      000000
 15109 52d3 BA2A0000 		mov	edx, 42	#,
 15109      00
 15110 52d8 BE010000 		mov	esi, 1	#,
 15110      00
 15111 52dd 488D3D00 		lea	rdi, .LC19[rip]	#,
 15111      000000
 15112 52e4 E8000000 		call	fwrite@PLT	#
 15112      00
 15113              	.LVL888:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15114              		.loc 3 100 10 view .LVU5231
 15115              	.LBE751:
 15116              	.LBE750:
1150:sieve_extend.c ****     fprintf(stderr, "  --show <maximum>   Show the primes found up to the maximum\n");
 15117              		.loc 1 1150 5 is_stmt 1 view .LVU5232
 15118              	.LBB752:
 15119              	.LBI752:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15120              		.loc 3 98 1 view .LVU5233
 15121              	.LBB753:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15122              		.loc 3 100 3 view .LVU5234
 15123              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15124              		.loc 3 100 10 is_stmt 0 view .LVU5235
 15125 52e9 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 15125      000000
 15126 52f0 BA3C0000 		mov	edx, 60	#,
 15126      00
 15127 52f5 BE010000 		mov	esi, 1	#,
 15127      00
GAS LISTING /tmp/ccBvFgp2.s 			page 408


 15128 52fa 488D3D00 		lea	rdi, .LC20[rip]	#,
 15128      000000
 15129 5301 E8000000 		call	fwrite@PLT	#
 15129      00
 15130              	.LVL889:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15131              		.loc 3 100 10 view .LVU5236
 15132              	.LBE753:
 15133              	.LBE752:
1151:sieve_extend.c ****     fprintf(stderr, "  --tune  <level>    find the best settings for the current os and hardware\n"
 15134              		.loc 1 1151 5 is_stmt 1 view .LVU5237
 15135              	.LBB754:
 15136              	.LBI754:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15137              		.loc 3 98 1 view .LVU5238
 15138              	.LBB755:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15139              		.loc 3 100 3 view .LVU5239
 15140              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15141              		.loc 3 100 10 is_stmt 0 view .LVU5240
 15142 5306 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 15142      000000
 15143 530d BA3D0000 		mov	edx, 61	#,
 15143      00
 15144 5312 BE010000 		mov	esi, 1	#,
 15144      00
 15145 5317 488D3D00 		lea	rdi, .LC21[rip]	#,
 15145      000000
 15146 531e E8000000 		call	fwrite@PLT	#
 15146      00
 15147              	.LVL890:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15148              		.loc 3 100 10 view .LVU5241
 15149              	.LBE755:
 15150              	.LBE754:
1152:sieve_extend.c ****     fprintf(stderr, "                     1 - fast tuning\n");
 15151              		.loc 1 1152 5 is_stmt 1 view .LVU5242
 15152              	.LBB756:
 15153              	.LBI756:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15154              		.loc 3 98 1 view .LVU5243
 15155              	.LBB757:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15156              		.loc 3 100 3 view .LVU5244
 15157              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15158              		.loc 3 100 10 is_stmt 0 view .LVU5245
 15159 5323 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 15159      000000
 15160 532a BA4C0000 		mov	edx, 76	#,
 15160      00
 15161 532f BE010000 		mov	esi, 1	#,
 15161      00
 15162 5334 488D3D00 		lea	rdi, .LC22[rip]	#,
 15162      000000
 15163 533b E8000000 		call	fwrite@PLT	#
GAS LISTING /tmp/ccBvFgp2.s 			page 409


 15163      00
 15164              	.LVL891:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15165              		.loc 3 100 10 view .LVU5246
 15166              	.LBE757:
 15167              	.LBE756:
1153:sieve_extend.c ****     fprintf(stderr, "                     2 - refined tuning\n");
 15168              		.loc 1 1153 5 is_stmt 1 view .LVU5247
 15169              	.LBB758:
 15170              	.LBI758:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15171              		.loc 3 98 1 view .LVU5248
 15172              	.LBB759:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15173              		.loc 3 100 3 view .LVU5249
 15174              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15175              		.loc 3 100 10 is_stmt 0 view .LVU5250
 15176 5340 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 15176      000000
 15177 5347 BA250000 		mov	edx, 37	#,
 15177      00
 15178 534c BE010000 		mov	esi, 1	#,
 15178      00
 15179 5351 488D3D00 		lea	rdi, .LC23[rip]	#,
 15179      000000
 15180 5358 E8000000 		call	fwrite@PLT	#
 15180      00
 15181              	.LVL892:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15182              		.loc 3 100 10 view .LVU5251
 15183              	.LBE759:
 15184              	.LBE758:
1154:sieve_extend.c ****     fprintf(stderr, "                     3 - maximum tuning (takes long)\n");
 15185              		.loc 1 1154 5 is_stmt 1 view .LVU5252
 15186              	.LBB760:
 15187              	.LBI760:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15188              		.loc 3 98 1 view .LVU5253
 15189              	.LBB761:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15190              		.loc 3 100 3 view .LVU5254
 15191              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15192              		.loc 3 100 10 is_stmt 0 view .LVU5255
 15193 535d 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 15193      000000
 15194 5364 BA280000 		mov	edx, 40	#,
 15194      00
 15195 5369 BE010000 		mov	esi, 1	#,
 15195      00
 15196 536e 488D3D00 		lea	rdi, .LC24[rip]	#,
 15196      000000
 15197 5375 E8000000 		call	fwrite@PLT	#
 15197      00
 15198              	.LVL893:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
GAS LISTING /tmp/ccBvFgp2.s 			page 410


 15199              		.loc 3 100 10 view .LVU5256
 15200              	.LBE761:
 15201              	.LBE760:
1155:sieve_extend.c ****     exit(1);
 15202              		.loc 1 1155 5 is_stmt 1 view .LVU5257
 15203              	.LBB762:
 15204              	.LBI762:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15205              		.loc 3 98 1 view .LVU5258
 15206              	.LBB763:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15207              		.loc 3 100 3 view .LVU5259
 15208              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15209              		.loc 3 100 10 is_stmt 0 view .LVU5260
 15210 537a 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 15210      000000
 15211 5381 488D3D00 		lea	rdi, .LC25[rip]	#,
 15211      000000
 15212 5388 BA350000 		mov	edx, 53	#,
 15212      00
 15213 538d BE010000 		mov	esi, 1	#,
 15213      00
 15214 5392 E8000000 		call	fwrite@PLT	#
 15214      00
 15215              	.LVL894:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15216              		.loc 3 100 10 view .LVU5261
 15217              	.LBE763:
 15218              	.LBE762:
1156:sieve_extend.c **** }
 15219              		.loc 1 1156 5 is_stmt 1 view .LVU5262
 15220 5397 BF010000 		mov	edi, 1	#,
 15220      00
 15221 539c E8000000 		call	exit@PLT	#
 15221      00
 15222              	.LVL895:
 15223              		.cfi_endproc
 15224              	.LFE81:
 15226              		.section	.rodata.str1.1
 15227              	.LC27:
 15228 003b 56616C69 		.string	"Validating... "
 15228      64617469 
 15228      6E672E2E 
 15228      2E2000
 15229              	.LC28:
 15230 004a 2D2D6865 		.string	"--help"
 15230      6C7000
 15231              	.LC29:
 15232 0051 2D2D7665 		.string	"--verbose"
 15232      72626F73 
 15232      6500
 15233              	.LC30:
 15234 005b 4E6F2076 		.string	"No verbose level specified\n"
 15234      6572626F 
 15234      7365206C 
 15234      6576656C 
GAS LISTING /tmp/ccBvFgp2.s 			page 411


 15234      20737065 
 15235              	.LC31:
 15236 0077 256400   		.string	"%d"
 15237              		.section	.rodata.str1.8
 15238 03ae 0000     		.align 8
 15239              	.LC32:
 15240 03b0 4572726F 		.string	"Error: Invalid measurement time: %s\n"
 15240      723A2049 
 15240      6E76616C 
 15240      6964206D 
 15240      65617375 
 15241              		.section	.rodata.str1.1
 15242              	.LC33:
 15243 007a 56657262 		.string	"Verbose level set to %d\n"
 15243      6F736520 
 15243      6C657665 
 15243      6C207365 
 15243      7420746F 
 15244              	.LC34:
 15245 0093 2D2D6368 		.string	"--check"
 15245      65636B00 
 15246              	.LC35:
 15247 009b 2D2D7475 		.string	"--tune"
 15247      6E6500
 15248              	.LC36:
 15249 00a2 4E6F2074 		.string	"No tune level specified\n"
 15249      756E6520 
 15249      6C657665 
 15249      6C207370 
 15249      65636966 
 15250              		.section	.rodata.str1.8
 15251 03d5 000000   		.align 8
 15252              	.LC37:
 15253 03d8 4572726F 		.string	"Error: Invalid tune level: %s\n"
 15253      723A2049 
 15253      6E76616C 
 15253      69642074 
 15253      756E6520 
 15254              		.section	.rodata.str1.1
 15255              	.LC38:
 15256 00bb 54756E65 		.string	"Tune level set to %d\n"
 15256      206C6576 
 15256      656C2073 
 15256      65742074 
 15256      6F202564 
 15257              	.LC39:
 15258 00d1 2D2D7368 		.string	"--show"
 15258      6F7700
 15259              	.LC40:
 15260 00d8 4E6F2073 		.string	"No show maximum specified\n"
 15260      686F7720 
 15260      6D617869 
 15260      6D756D20 
 15260      73706563 
 15261              	.LC41:
 15262 00f3 256A7500 		.string	"%ju"
 15263              		.section	.rodata.str1.8
GAS LISTING /tmp/ccBvFgp2.s 			page 412


 15264 03f7 00       		.align 8
 15265              	.LC42:
 15266 03f8 4572726F 		.string	"Error: Invalid show maximum: %s\n"
 15266      723A2049 
 15266      6E76616C 
 15266      69642073 
 15266      686F7720 
 15267              		.section	.rodata.str1.1
 15268              	.LC43:
 15269 00f7 53686F77 		.string	"Show maximum set to %ju\n"
 15269      206D6178 
 15269      696D756D 
 15269      20736574 
 15269      20746F20 
 15270              	.LC44:
 15271 0110 496E7661 		.string	"Invalid size %s\n"
 15271      6C696420 
 15271      73697A65 
 15271      2025730A 
 15271      00
 15272              	.LC45:
 15273 0121 2E2E2E43 		.string	"...Checking size %ju ..."
 15273      6865636B 
 15273      696E6720 
 15273      73697A65 
 15273      20256A75 
 15274              	.LC46:
 15275 013a 2E626C6F 		.string	".blocksize %ju-"
 15275      636B7369 
 15275      7A652025 
 15275      6A752D00 
 15276              	.LC47:
 15277 014a 76616C69 		.string	"valid;"
 15277      643B00
 15278              	.LC48:
 15279 0151 2E2E2E56 		.string	"...Valid algorithm"
 15279      616C6964 
 15279      20616C67 
 15279      6F726974 
 15279      686D00
 15280              	.LC49:
 15281 0164 54756E69 		.string	"Tuning..."
 15281      6E672E2E 
 15281      2E00
 15282              	.LC50:
 15283 016e 2E283E29 		.string	".(>)"
 15283      00
 15284              		.section	.rodata.str1.8
 15285 0419 00000000 		.align 8
 15285      000000
 15286              	.LC51:
 15287 0420 626C6F63 		.string	"blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector %
 15287      6B73697A 
 15287      655F6269 
 15287      74732025 
 15287      31306A75 
 15288              		.section	.rodata.str1.1
GAS LISTING /tmp/ccBvFgp2.s 			page 413


 15289              	.LC52:
 15290 0173 2E2E2E2E 		.string	"...."
 15290      00
 15291              		.section	.rodata.str1.8
 15292 04a7 00       		.align 8
 15293              	.LC53:
 15294 04a8 256A7520 		.string	"%ju results. Inital best blocksize: %ju; best smallstep %ju; best mediumstep %ju\n"
 15294      72657375 
 15294      6C74732E 
 15294      20496E69 
 15294      74616C20 
 15295              		.section	.rodata.str1.1
 15296              	.LC54:
 15297 0178 42657374 		.string	"Best options"
 15297      206F7074 
 15297      696F6E73 
 15297      00
 15298              	.LC55:
 15299 0185 28256A75 		.string	"(%ju) "
 15299      292000
 15300              	.LC56:
 15301 018c 2E2E2E00 		.string	"..."
 15302              	.LC57:
 15303 0190 2E426573 		.string	".Best result:"
 15303      74207265 
 15303      73756C74 
 15303      3A00
 15304              		.section	.rodata.str1.8
 15305 04fa 00000000 		.align 8
 15305      0000
 15306              	.LC58:
 15307 0500 42656E63 		.string	"Benchmarking... with blocksize %ju steps: %ju/%ju/%ju\n"
 15307      686D6172 
 15307      6B696E67 
 15307      2E2E2E20 
 15307      77697468 
 15308 0537 00       		.align 8
 15309              	.LC60:
 15310 0538 726F6769 		.string	"rogiervandam_extend;%ju;%f;1;algorithm=other,faithful=yes,bits=1\n"
 15310      65727661 
 15310      6E64616D 
 15310      5F657874 
 15310      656E643B 
 15311 057a 00000000 		.align 8
 15311      0000
 15312              	.LC61:
 15313 0580 50617373 		.string	"Passes - per 5 seconds: %f - per second %f\n"
 15313      6573202D 
 15313      20706572 
 15313      20352073 
 15313      65636F6E 
 15314              		.section	.rodata.str1.1
 15315              	.LC62:
 15316 019e 53686F77 		.string	"Show result set:"
 15316      20726573 
 15316      756C7420 
 15316      7365743A 
GAS LISTING /tmp/ccBvFgp2.s 			page 414


 15316      00
 15317              		.section	.text.startup,"ax",@progbits
 15318              		.p2align 4
 15319              		.globl	main
 15321              	main:
 15322              	.LVL896:
 15323              	.LFB86:
1202:sieve_extend.c **** 
1203:sieve_extend.c **** static inline void tuning_result_print(tuning_result_type tuning_result) {
1204:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
1205:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
1206:sieve_extend.c ****                             (uintmax_t)tuning_result.smallstep_faster,(uintmax_t)tuning_result.medi
1207:sieve_extend.c ****                             (uintmax_t)tuning_result.passes, (uintmax_t) tuning_result.sample_max,
1208:sieve_extend.c ****                             tuning_result.elapsed_time, tuning_result.sample_duration, tuning_resul
1209:sieve_extend.c **** }
1210:sieve_extend.c **** 
1211:sieve_extend.c **** static tuning_result_type tune(int tune_level, counter_t maxints, int option_verboselevel) {
1212:sieve_extend.c ****     counter_t best_blocksize_bits = default_blocksize;
1213:sieve_extend.c **** 
1214:sieve_extend.c ****     double best_avg = 0;
1215:sieve_extend.c ****     best_blocksize_bits = 0;
1216:sieve_extend.c ****     counter_t best_smallstep_faster = 0;
1217:sieve_extend.c ****     counter_t best_mediumstep_faster = 0;
1218:sieve_extend.c ****     counter_t best_vectorstep_faster = 0;
1219:sieve_extend.c ****     counter_t smallstep_faster_steps = 4;
1220:sieve_extend.c ****     counter_t mediumstep_faster_steps = 4;
1221:sieve_extend.c ****     counter_t vectorstep_faster_steps = 32;
1222:sieve_extend.c ****     counter_t freebits_steps = anticiped_cache_line_bytesize;
1223:sieve_extend.c ****     counter_t sample_max = default_sample_max;
1224:sieve_extend.c ****     double sample_duration = default_sample_duration;
1225:sieve_extend.c **** 
1226:sieve_extend.c ****     // determines the size of the resultset
1227:sieve_extend.c ****     switch (tune_level) {
1228:sieve_extend.c ****         case 1:
1229:sieve_extend.c ****             smallstep_faster_steps  = WORD_SIZE/4;
1230:sieve_extend.c ****             mediumstep_faster_steps = WORD_SIZE/4;
1231:sieve_extend.c ****             vectorstep_faster_steps = WORD_SIZE/2;
1232:sieve_extend.c ****             freebits_steps = anticiped_cache_line_bytesize*8*2;
1233:sieve_extend.c ****             sample_max = 8;
1234:sieve_extend.c ****             sample_duration = 0.1;
1235:sieve_extend.c ****             break;
1236:sieve_extend.c ****         case 2:
1237:sieve_extend.c ****             smallstep_faster_steps  = WORD_SIZE/8;
1238:sieve_extend.c ****             mediumstep_faster_steps = WORD_SIZE/8;
1239:sieve_extend.c ****             vectorstep_faster_steps = WORD_SIZE/4;
1240:sieve_extend.c ****             freebits_steps = anticiped_cache_line_bytesize*8;
1241:sieve_extend.c ****             sample_max = 8;
1242:sieve_extend.c ****             sample_duration = 0.2;
1243:sieve_extend.c ****             break;
1244:sieve_extend.c ****         case 3:
1245:sieve_extend.c ****             smallstep_faster_steps  = WORD_SIZE/16;
1246:sieve_extend.c ****             mediumstep_faster_steps = WORD_SIZE/16;
1247:sieve_extend.c ****             vectorstep_faster_steps = WORD_SIZE/16;
1248:sieve_extend.c ****             freebits_steps = anticiped_cache_line_bytesize/2;
1249:sieve_extend.c ****             sample_max = 8;
1250:sieve_extend.c ****             sample_duration = 0.2;
1251:sieve_extend.c ****             break;
GAS LISTING /tmp/ccBvFgp2.s 			page 415


1252:sieve_extend.c ****     }
1253:sieve_extend.c ****     
1254:sieve_extend.c ****     if (option_verboselevel >= 1) printf("Tuning..."); if (option_verboselevel >= 2) printf("\n");
1255:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
1256:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
1257:sieve_extend.c ****     counter_t tuning_results=0;
1258:sieve_extend.c ****     counter_t tuning_result_index=0;
1259:sieve_extend.c ****     
1260:sieve_extend.c ****     for (counter_t smallstep_faster = 0; smallstep_faster <= WORD_SIZE/2; smallstep_faster += small
1261:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
1262:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
1263:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
1264:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
1265:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
1266:sieve_extend.c **** 
1267:sieve_extend.c ****                         // set variables
1268:sieve_extend.c ****                         tuning_results++;
1269:sieve_extend.c ****                         tuning_result[tuning_result_index].maxints = maxints;
1270:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_duration = sample_duration;
1271:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_max = sample_max;
1272:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_kb = blocksize_kb;
1273:sieve_extend.c ****                         tuning_result[tuning_result_index].free_bits = free_bits;
1274:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_bits = blocksize_bits;
1275:sieve_extend.c ****                         tuning_result[tuning_result_index].smallstep_faster = smallstep_faster;
1276:sieve_extend.c ****                         tuning_result[tuning_result_index].mediumstep_faster = mediumstep_faster;
1277:sieve_extend.c ****                         tuning_result[tuning_result_index].vectorstep_faster = vectorstep_faster;
1278:sieve_extend.c ****                         tune_benchmark(tuning_result, tuning_result_index);
1279:sieve_extend.c **** 
1280:sieve_extend.c ****                         if ( tuning_result[tuning_result_index].avg > best_avg) {
1281:sieve_extend.c ****                             best_avg = tuning_result[tuning_result_index].avg;
1282:sieve_extend.c ****                             best_blocksize_bits = blocksize_bits;
1283:sieve_extend.c ****                             best_smallstep_faster = smallstep_faster;
1284:sieve_extend.c ****                             best_mediumstep_faster = mediumstep_faster;
1285:sieve_extend.c ****                             best_vectorstep_faster = vectorstep_faster;
1286:sieve_extend.c ****                             if (option_verboselevel >=2) { printf(".(>)"); tuning_result_print(tuni
1287:sieve_extend.c ****                         }
1288:sieve_extend.c ****                         if (option_verboselevel >= 3) { printf("...."); tuning_result_print(tuning_
1289:sieve_extend.c ****                         tuning_result_index++;
1290:sieve_extend.c ****                     }
1291:sieve_extend.c ****                 }
1292:sieve_extend.c ****             }
1293:sieve_extend.c ****         }
1294:sieve_extend.c ****     }
1295:sieve_extend.c ****     if (option_verboselevel >= 2) {
1296:sieve_extend.c ****         printf("%ju results. Inital best blocksize: %ju; best smallstep %ju; best mediumstep %ju\n"
1297:sieve_extend.c ****         printf("Best options\n");
1298:sieve_extend.c ****     }
1299:sieve_extend.c ****     counter_t step=0;
1300:sieve_extend.c ****     while (tuning_results>4) {
1301:sieve_extend.c ****         qsort(tuning_result, (size_t)tuning_results, sizeof(tuning_result_type), compare_tuning_res
1302:sieve_extend.c ****         step++;
1303:sieve_extend.c ****         if (option_verboselevel >= 2) {
1304:sieve_extend.c ****             tuning_result_index = 0;
1305:sieve_extend.c ****             printf("(%ju) ",(uintmax_t)step); tuning_result_print(tuning_result[tuning_result_index
1306:sieve_extend.c ****             if (option_verboselevel >= 3) {
1307:sieve_extend.c ****                 for (counter_t tuning_result_index=0; tuning_result_index<min(10,tuning_results); t
1308:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
GAS LISTING /tmp/ccBvFgp2.s 			page 416


1309:sieve_extend.c ****                 }
1310:sieve_extend.c ****             }
1311:sieve_extend.c ****         }
1312:sieve_extend.c **** 
1313:sieve_extend.c ****         tuning_results = tuning_results / 2;
1314:sieve_extend.c **** 
1315:sieve_extend.c ****         for (counter_t i=0; i<tuning_results; i++) {
1316:sieve_extend.c ****             tune_benchmark(tuning_result, i);
1317:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
1318:sieve_extend.c ****         }
1319:sieve_extend.c ****         
1320:sieve_extend.c ****     }
1321:sieve_extend.c ****     tuning_result_type best_result = tuning_result[0];
1322:sieve_extend.c ****     if (option_verboselevel >= 1) {
1323:sieve_extend.c ****         tuning_result_index = 0;
1324:sieve_extend.c ****         printf(".Best result:"); tuning_result_print(tuning_result[tuning_result_index]);
1325:sieve_extend.c ****     }
1326:sieve_extend.c **** 
1327:sieve_extend.c ****     free(tuning_result);
1328:sieve_extend.c ****     return best_result;
1329:sieve_extend.c **** }
1330:sieve_extend.c **** 
1331:sieve_extend.c **** int main(int argc, char *argv[]) {
 15324              		.loc 1 1331 34 view -0
 15325              		.cfi_startproc
 15326              		.loc 1 1331 34 is_stmt 0 view .LVU5264
 15327 0000 F30F1EFA 		endbr64	
 15328 0004 4157     		push	r15	#
 15329              		.cfi_def_cfa_offset 16
 15330              		.cfi_offset 15, -16
 15331 0006 4156     		push	r14	#
 15332              		.cfi_def_cfa_offset 24
 15333              		.cfi_offset 14, -24
 15334 0008 4155     		push	r13	#
 15335              		.cfi_def_cfa_offset 32
 15336              		.cfi_offset 13, -32
 15337 000a 4154     		push	r12	#
 15338              		.cfi_def_cfa_offset 40
 15339              		.cfi_offset 12, -40
 15340 000c 55       		push	rbp	#
 15341              		.cfi_def_cfa_offset 48
 15342              		.cfi_offset 6, -48
 15343 000d 53       		push	rbx	#
 15344              		.cfi_def_cfa_offset 56
 15345              		.cfi_offset 3, -56
 15346 000e 488DA424 		lea	rsp, -232[rsp]	#,
 15346      18FFFFFF 
 15347              		.cfi_def_cfa_offset 288
 15348              	# sieve_extend.c:1331: int main(int argc, char *argv[]) {
 15349              		.loc 1 1331 34 view .LVU5265
 15350 0016 64488B04 		mov	rax, QWORD PTR fs:40	# tmp570, MEM[(<address-space-1> long unsigned int *)40B]
 15350      25280000 
 15350      00
 15351 001f 48898424 		mov	QWORD PTR 216[rsp], rax	# D.7296, tmp570
 15351      D8000000 
 15352 0027 31C0     		xor	eax, eax	# tmp570
1332:sieve_extend.c **** 
GAS LISTING /tmp/ccBvFgp2.s 			page 417


1333:sieve_extend.c ****     
1334:sieve_extend.c ****     counter_t option_maxFactor  = default_sieve_limit;
 15353              		.loc 1 1334 5 is_stmt 1 view .LVU5266
 15354              	# sieve_extend.c:1334:     counter_t option_maxFactor  = default_sieve_limit;
 15355              		.loc 1 1334 15 is_stmt 0 view .LVU5267
 15356 0029 48C78424 		mov	QWORD PTR 160[rsp], 1000000	# option_maxFactor,
 15356      A0000000 
 15356      40420F00 
1335:sieve_extend.c ****     counter_t option_showMaxFactor = default_showMaxFactor;
 15357              		.loc 1 1335 5 is_stmt 1 view .LVU5268
 15358              	.LBB870:
 15359              	# sieve_extend.c:1340:     for (int arg=1; arg < argc; arg++) {
1336:sieve_extend.c ****     int option_verboselevel = default_verbose_level;
1337:sieve_extend.c ****     int option_check = default_check_level;
1338:sieve_extend.c ****     int option_tunelevel = default_tune_level;
1339:sieve_extend.c **** 
1340:sieve_extend.c ****     for (int arg=1; arg < argc; arg++) {
 15360              		.loc 1 1340 5 is_stmt 0 view .LVU5269
 15361 0035 83FF01   		cmp	edi, 1	# argc,
 15362              	.LBE870:
 15363              	# sieve_extend.c:1335:     counter_t option_showMaxFactor = default_showMaxFactor;
1335:sieve_extend.c ****     counter_t option_showMaxFactor = default_showMaxFactor;
 15364              		.loc 1 1335 15 view .LVU5270
 15365 0038 48C78424 		mov	QWORD PTR 168[rsp], 0	# option_showMaxFactor,
 15365      A8000000 
 15365      00000000 
1336:sieve_extend.c ****     int option_verboselevel = default_verbose_level;
 15366              		.loc 1 1336 5 is_stmt 1 view .LVU5271
 15367              	# sieve_extend.c:1336:     int option_verboselevel = default_verbose_level;
1336:sieve_extend.c ****     int option_verboselevel = default_verbose_level;
 15368              		.loc 1 1336 9 is_stmt 0 view .LVU5272
 15369 0044 C7842498 		mov	DWORD PTR 152[rsp], 1	# option_verboselevel,
 15369      00000001 
 15369      000000
1337:sieve_extend.c ****     int option_tunelevel = default_tune_level;
 15370              		.loc 1 1337 5 is_stmt 1 view .LVU5273
 15371              	.LVL897:
1338:sieve_extend.c **** 
 15372              		.loc 1 1338 5 view .LVU5274
 15373              	# sieve_extend.c:1338:     int option_tunelevel = default_tune_level;
1338:sieve_extend.c **** 
 15374              		.loc 1 1338 9 is_stmt 0 view .LVU5275
 15375 004f C784249C 		mov	DWORD PTR 156[rsp], 0	# option_tunelevel,
 15375      00000000 
 15375      000000
 15376              		.loc 1 1340 5 is_stmt 1 view .LVU5276
 15377              	.LBB895:
 15378              		.loc 1 1340 10 view .LVU5277
 15379              	.LVL898:
 15380              		.loc 1 1340 21 view .LVU5278
 15381              	# sieve_extend.c:1340:     for (int arg=1; arg < argc; arg++) {
 15382              		.loc 1 1340 5 is_stmt 0 view .LVU5279
 15383 005a 0F8E1C05 		jle	.L1328	#,
 15383      0000
 15384 0060 89FD     		mov	ebp, edi	# argc, tmp524
 15385 0062 4989F4   		mov	r12, rsi	# argv, tmp525
 15386              	# sieve_extend.c:1340:     for (int arg=1; arg < argc; arg++) {
GAS LISTING /tmp/ccBvFgp2.s 			page 418


 15387              		.loc 1 1340 14 view .LVU5280
 15388 0065 BB010000 		mov	ebx, 1	# arg,
 15388      00
 15389 006a 4C8D2D00 		lea	r13, .LC28[rip]	# tmp464,
 15389      000000
 15390              	# sieve_extend.c:1342:         else if (strcmp(argv[arg], "--verbose")==0) {
1341:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1342:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15391              		.loc 1 1342 18 view .LVU5281
 15392 0071 4C8D3500 		lea	r14, .LC29[rip]	# tmp479,
 15392      000000
 15393 0078 EB66     		jmp	.L1312	#
 15394              	.LVL899:
 15395 007a 660F1F44 		.p2align 4,,7
 15395      0000
 15396              		.p2align 3
 15397              	.L1446:
1343:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No verbose level specified\n"); usage(argv[0]); }
 15398              		.loc 1 1343 13 is_stmt 1 view .LVU5282
 15399              	# sieve_extend.c:1343:             if (++arg >= argc) { fprintf(stderr, "No verbose level specified
 15400              		.loc 1 1343 16 is_stmt 0 view .LVU5283
 15401 0080 83C301   		add	ebx, 1	# arg,
 15402              	.LVL900:
 15403              		.loc 1 1343 16 view .LVU5284
 15404 0083 39DD     		cmp	ebp, ebx	# argc, arg
 15405 0085 0F8E9D0E 		jle	.L1444	#,
 15405      0000
1344:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option_verboselevel > 4) {
 15406              		.loc 1 1344 13 is_stmt 1 view .LVU5285
 15407              	# sieve_extend.c:1344:             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option
 15408              		.loc 1 1344 28 is_stmt 0 view .LVU5286
 15409 008b 4D8D7C04 		lea	r15, 8[r12+rax]	# _16,
 15409      08
 15410              	# sieve_extend.c:1344:             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option
 15411              		.loc 1 1344 17 view .LVU5287
 15412 0090 488D9424 		lea	rdx, 152[rsp]	# tmp301,
 15412      98000000 
 15413 0098 498B3F   		mov	rdi, QWORD PTR [r15]	#, *_16
 15414 009b 31C0     		xor	eax, eax	#
 15415 009d 488D3500 		lea	rsi, .LC31[rip]	#,
 15415      000000
 15416 00a4 E8000000 		call	__isoc99_sscanf@PLT	#
 15416      00
 15417              	.LVL901:
 15418              	# sieve_extend.c:1344:             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option
 15419              		.loc 1 1344 16 view .LVU5288
 15420 00a9 83F801   		cmp	eax, 1	# tmp526,
 15421 00ac 0F85E204 		jne	.L1317	#,
 15421      0000
 15422              	# sieve_extend.c:1344:             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option
 15423              		.loc 1 1344 91 discriminator 1 view .LVU5289
 15424 00b2 8B942498 		mov	edx, DWORD PTR 152[rsp]	# option_verboselevel.16_19, option_verboselevel
 15424      000000
 15425              	# sieve_extend.c:1344:             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option
 15426              		.loc 1 1344 68 discriminator 1 view .LVU5290
 15427 00b9 83FA04   		cmp	edx, 4	# option_verboselevel.16_19,
 15428 00bc 0F8FD204 		jg	.L1317	#,
GAS LISTING /tmp/ccBvFgp2.s 			page 419


 15428      0000
1345:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid measurement time: %s\n", argv[arg]); usage(argv[0])
1346:sieve_extend.c ****             }
1347:sieve_extend.c ****             printf("Verbose level set to %d\n",option_verboselevel);
 15429              		.loc 1 1347 13 is_stmt 1 view .LVU5291
 15430              	.LVL902:
 15431              	.LBB871:
 15432              	.LBI871:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15433              		.loc 3 105 1 view .LVU5292
 15434              	.LBB872:
 15435              		.loc 3 107 3 view .LVU5293
 15436              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15437              		.loc 3 107 10 is_stmt 0 view .LVU5294
 15438 00c2 488D3500 		lea	rsi, .LC33[rip]	#,
 15438      000000
 15439 00c9 BF010000 		mov	edi, 1	#,
 15439      00
 15440 00ce 31C0     		xor	eax, eax	#
 15441 00d0 E8000000 		call	__printf_chk@PLT	#
 15441      00
 15442              	.LVL903:
 15443              	.L1319:
 15444              		.loc 3 107 10 view .LVU5295
 15445              	.LBE872:
 15446              	.LBE871:
1340:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15447              		.loc 1 1340 33 is_stmt 1 discriminator 2 view .LVU5296
 15448              	# sieve_extend.c:1340:     for (int arg=1; arg < argc; arg++) {
1340:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15449              		.loc 1 1340 36 is_stmt 0 discriminator 2 view .LVU5297
 15450 00d5 83C301   		add	ebx, 1	# arg,
 15451              	.LVL904:
1340:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15452              		.loc 1 1340 21 is_stmt 1 discriminator 2 view .LVU5298
 15453              	# sieve_extend.c:1340:     for (int arg=1; arg < argc; arg++) {
1340:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15454              		.loc 1 1340 5 is_stmt 0 discriminator 2 view .LVU5299
 15455 00d8 39DD     		cmp	ebp, ebx	# argc, arg
 15456 00da 0F8E0001 		jle	.L1445	#,
 15456      0000
 15457              	.LVL905:
 15458              	.L1312:
1341:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15459              		.loc 1 1341 9 is_stmt 1 view .LVU5300
 15460              	# sieve_extend.c:1341:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1341:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15461              		.loc 1 1341 24 is_stmt 0 view .LVU5301
 15462 00e0 4863C3   		movsx	rax, ebx	# arg, arg
 15463              	# sieve_extend.c:1341:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1341:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15464              		.loc 1 1341 13 view .LVU5302
 15465 00e3 41B90700 		mov	r9d, 7	# tmp290,
 15465      0000
 15466              	# sieve_extend.c:1341:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1341:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15467              		.loc 1 1341 24 view .LVU5303
GAS LISTING /tmp/ccBvFgp2.s 			page 420


 15468 00e9 48C1E003 		sal	rax, 3	# _2,
 15469              	# sieve_extend.c:1341:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1341:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15470              		.loc 1 1341 13 view .LVU5304
 15471 00ed 4C89EF   		mov	rdi, r13	# tmp289, tmp464
 15472              	# sieve_extend.c:1341:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1341:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15473              		.loc 1 1341 24 view .LVU5305
 15474 00f0 4D8D3C04 		lea	r15, [r12+rax]	# _3,
 15475              	# sieve_extend.c:1341:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1341:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15476              		.loc 1 1341 13 view .LVU5306
 15477 00f4 4C89C9   		mov	rcx, r9	# tmp490, tmp290
 15478 00f7 4D8B07   		mov	r8, QWORD PTR [r15]	# _4, *_3
 15479 00fa 4C89C6   		mov	rsi, r8	# _4, _4
 15480 00fd F3A6     		repz cmpsb
 15481 00ff 0F97C2   		seta	dl	#, tmp291
 15482 0102 80DA00   		sbb	dl, 0	# _5
 15483              	# sieve_extend.c:1341:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1341:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15484              		.loc 1 1341 12 view .LVU5307
 15485 0105 84D2     		test	dl, dl	# _5
 15486 0107 0F84A404 		je	.L1442	#,
 15486      0000
1342:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No verbose level specified\n"); usage(argv[0]); }
 15487              		.loc 1 1342 14 is_stmt 1 view .LVU5308
 15488              	# sieve_extend.c:1342:         else if (strcmp(argv[arg], "--verbose")==0) {
1342:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No verbose level specified\n"); usage(argv[0]); }
 15489              		.loc 1 1342 18 is_stmt 0 view .LVU5309
 15490 010d B90A0000 		mov	ecx, 10	# tmp296,
 15490      00
 15491 0112 4C89C6   		mov	rsi, r8	# _4, _4
 15492 0115 4C89F7   		mov	rdi, r14	# tmp295, tmp479
 15493 0118 F3A6     		repz cmpsb
 15494 011a 410F97C2 		seta	r10b	#, tmp297
 15495 011e 4180DA00 		sbb	r10b, 0	# _11
 15496              	# sieve_extend.c:1342:         else if (strcmp(argv[arg], "--verbose")==0) {
1342:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No verbose level specified\n"); usage(argv[0]); }
 15497              		.loc 1 1342 17 view .LVU5310
 15498 0122 4584D2   		test	r10b, r10b	# _11
 15499 0125 0F8455FF 		je	.L1446	#,
 15499      FFFF
1348:sieve_extend.c ****         } 
1349:sieve_extend.c ****         else if (strcmp(argv[arg], "--check")==0) { option_check=1; }
 15500              		.loc 1 1349 14 is_stmt 1 view .LVU5311
 15501              	# sieve_extend.c:1349:         else if (strcmp(argv[arg], "--check")==0) { option_check=1; }
 15502              		.loc 1 1349 18 is_stmt 0 view .LVU5312
 15503 012b B9080000 		mov	ecx, 8	# tmp306,
 15503      00
 15504 0130 4C89C6   		mov	rsi, r8	# _4, _4
 15505 0133 488D3D00 		lea	rdi, .LC34[rip]	# tmp305,
 15505      000000
 15506 013a F3A6     		repz cmpsb
 15507 013c 410F97C3 		seta	r11b	#, tmp307
 15508 0140 4180DB00 		sbb	r11b, 0	# _23
 15509              	# sieve_extend.c:1349:         else if (strcmp(argv[arg], "--check")==0) { option_check=1; }
 15510              		.loc 1 1349 17 view .LVU5313
GAS LISTING /tmp/ccBvFgp2.s 			page 421


 15511 0144 4584DB   		test	r11b, r11b	# _23
 15512 0147 748C     		je	.L1319	#,
1350:sieve_extend.c ****         else if (strcmp(argv[arg], "--tune")==0) { option_tunelevel=0;
 15513              		.loc 1 1350 14 is_stmt 1 view .LVU5314
 15514              	# sieve_extend.c:1350:         else if (strcmp(argv[arg], "--tune")==0) { option_tunelevel=0;
 15515              		.loc 1 1350 18 is_stmt 0 view .LVU5315
 15516 0149 4C89C6   		mov	rsi, r8	# _4, _4
 15517 014c 488D3D00 		lea	rdi, .LC35[rip]	# tmp311,
 15517      000000
 15518 0153 4C89C9   		mov	rcx, r9	# tmp496, tmp290
 15519 0156 F3A6     		repz cmpsb
 15520 0158 0F97C2   		seta	dl	#, tmp313
 15521 015b 80DA00   		sbb	dl, 0	# _24
 15522              	# sieve_extend.c:1350:         else if (strcmp(argv[arg], "--tune")==0) { option_tunelevel=0;
 15523              		.loc 1 1350 17 view .LVU5316
 15524 015e 84D2     		test	dl, dl	# _24
 15525 0160 0F855A01 		jne	.L1320	#,
 15525      0000
 15526              		.loc 1 1350 52 is_stmt 1 discriminator 1 view .LVU5317
 15527              	# sieve_extend.c:1350:         else if (strcmp(argv[arg], "--tune")==0) { option_tunelevel=0;
 15528              		.loc 1 1350 68 is_stmt 0 discriminator 1 view .LVU5318
 15529 0166 C784249C 		mov	DWORD PTR 156[rsp], 0	# option_tunelevel,
 15529      00000000 
 15529      000000
1351:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No tune level specified\n"); usage(argv[0]); }
 15530              		.loc 1 1351 13 is_stmt 1 discriminator 1 view .LVU5319
 15531              	# sieve_extend.c:1351:             if (++arg >= argc) { fprintf(stderr, "No tune level specified\n"
 15532              		.loc 1 1351 16 is_stmt 0 discriminator 1 view .LVU5320
 15533 0171 83C301   		add	ebx, 1	# arg,
 15534              	.LVL906:
 15535              		.loc 1 1351 16 discriminator 1 view .LVU5321
 15536 0174 39DD     		cmp	ebp, ebx	# argc, arg
 15537 0176 0F8EEC0D 		jle	.L1447	#,
 15537      0000
1352:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tunelevel > 4) {
 15538              		.loc 1 1352 13 is_stmt 1 view .LVU5322
 15539              	# sieve_extend.c:1352:             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tu
 15540              		.loc 1 1352 28 is_stmt 0 view .LVU5323
 15541 017c 4D8D7C04 		lea	r15, 8[r12+rax]	# _29,
 15541      08
 15542              	# sieve_extend.c:1352:             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tu
 15543              		.loc 1 1352 17 view .LVU5324
 15544 0181 488D9424 		lea	rdx, 156[rsp]	# tmp317,
 15544      9C000000 
 15545 0189 498B3F   		mov	rdi, QWORD PTR [r15]	#, *_29
 15546 018c 31C0     		xor	eax, eax	#
 15547 018e 488D3500 		lea	rsi, .LC31[rip]	#,
 15547      000000
 15548 0195 E8000000 		call	__isoc99_sscanf@PLT	#
 15548      00
 15549              	.LVL907:
 15550              	# sieve_extend.c:1352:             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tu
 15551              		.loc 1 1352 16 view .LVU5325
 15552 019a 83F801   		cmp	eax, 1	# tmp527,
 15553 019d 0F85A70D 		jne	.L1322	#,
 15553      0000
 15554              	# sieve_extend.c:1352:             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tu
GAS LISTING /tmp/ccBvFgp2.s 			page 422


 15555              		.loc 1 1352 85 discriminator 1 view .LVU5326
 15556 01a3 8B94249C 		mov	edx, DWORD PTR 156[rsp]	# option_tunelevel.20_32, option_tunelevel
 15556      000000
 15557              	# sieve_extend.c:1352:             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tu
 15558              		.loc 1 1352 65 discriminator 1 view .LVU5327
 15559 01aa 83FA04   		cmp	edx, 4	# option_tunelevel.20_32,
 15560 01ad 0F8F970D 		jg	.L1322	#,
 15560      0000
1353:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid tune level: %s\n", argv[arg]); usage(argv[0]);
1354:sieve_extend.c ****             }
1355:sieve_extend.c ****             printf("Tune level set to %d\n",option_tunelevel);
 15561              		.loc 1 1355 13 is_stmt 1 view .LVU5328
 15562              	.LVL908:
 15563              	.LBB873:
 15564              	.LBI873:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15565              		.loc 3 105 1 view .LVU5329
 15566              	.LBB874:
 15567              		.loc 3 107 3 view .LVU5330
 15568              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15569              		.loc 3 107 10 is_stmt 0 view .LVU5331
 15570 01b3 31C0     		xor	eax, eax	#
 15571 01b5 488D3500 		lea	rsi, .LC38[rip]	#,
 15571      000000
 15572 01bc BF010000 		mov	edi, 1	#,
 15572      00
 15573              	.LBE874:
 15574              	.LBE873:
 15575              	# sieve_extend.c:1340:     for (int arg=1; arg < argc; arg++) {
1340:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15576              		.loc 1 1340 36 view .LVU5332
 15577 01c1 83C301   		add	ebx, 1	# arg,
 15578              	.LVL909:
 15579              	.LBB876:
 15580              	.LBB875:
 15581              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15582              		.loc 3 107 10 view .LVU5333
 15583 01c4 E8000000 		call	__printf_chk@PLT	#
 15583      00
 15584              	.LVL910:
 15585              		.loc 3 107 10 view .LVU5334
 15586              	.LBE875:
 15587              	.LBE876:
1340:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15588              		.loc 1 1340 33 is_stmt 1 view .LVU5335
1340:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15589              		.loc 1 1340 21 view .LVU5336
 15590              	# sieve_extend.c:1340:     for (int arg=1; arg < argc; arg++) {
1340:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15591              		.loc 1 1340 5 is_stmt 0 view .LVU5337
 15592 01c9 39DD     		cmp	ebp, ebx	# argc, arg
 15593 01cb 0F8F0FFF 		jg	.L1312	#,
 15593      FFFF
 15594 01d1 66662E0F 		.p2align 4
 15594      1F840000 
 15594      0000000F 
 15594      1F4000
GAS LISTING /tmp/ccBvFgp2.s 			page 423


 15595              		.p2align 3
 15596              	.L1445:
1340:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15597              		.loc 1 1340 5 view .LVU5338
 15598              	.LBE895:
1356:sieve_extend.c ****         }
1357:sieve_extend.c ****         else if (strcmp(argv[arg], "--show")==0) { option_showMaxFactor=0;
1358:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
1359:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
1360:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
1361:sieve_extend.c ****             }
1362:sieve_extend.c ****             printf("Show maximum set to %ju\n",(uintmax_t)option_showMaxFactor);
1363:sieve_extend.c ****         }
1364:sieve_extend.c ****         else if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_maxFactor) != 1) {
1365:sieve_extend.c ****             fprintf(stderr, "Invalid size %s\n",argv[arg]); usage(argv[0]); 
1366:sieve_extend.c ****             printf("Maximum set to %ju\n",(uintmax_t)option_maxFactor);
1367:sieve_extend.c ****         }
1368:sieve_extend.c ****     }
1369:sieve_extend.c **** 
1370:sieve_extend.c ****     if (option_runonce) { // used for stats and debugging
 15599              		.loc 1 1370 5 is_stmt 1 view .LVU5339
1371:sieve_extend.c ****         struct sieve_state* sieve_instance = sieve(option_maxFactor, default_blocksize);
1372:sieve_extend.c ****         printf("\nResult set:\n");
1373:sieve_extend.c ****         show_primes(sieve_instance, option_showMaxFactor);
1374:sieve_extend.c ****         int valid = validatePrimeCount(sieve_instance,3);
1375:sieve_extend.c ****         if (!valid) printf("The sieve is NOT valid\n");
1376:sieve_extend.c ****         else printf("The sieve is VALID\n");
1377:sieve_extend.c ****         delete_sieve(sieve_instance);
1378:sieve_extend.c ****         exit(0);
1379:sieve_extend.c ****     }
1380:sieve_extend.c **** 
1381:sieve_extend.c ****     struct timespec start_time,end_time;
 15600              		.loc 1 1381 5 view .LVU5340
1382:sieve_extend.c **** 
1383:sieve_extend.c ****     if (option_check) {
 15601              		.loc 1 1383 5 view .LVU5341
1384:sieve_extend.c ****         // Count the number of primes and validate the result
1385:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Validating... ");
 15602              		.loc 1 1385 9 view .LVU5342
 15603              	# sieve_extend.c:1385:         if (option_verboselevel >= 1) printf("Validating... ");
 15604              		.loc 1 1385 12 is_stmt 0 view .LVU5343
 15605 01e0 8BAC2498 		mov	ebp, DWORD PTR 152[rsp]	#, option_verboselevel
 15605      000000
 15606              	.LVL911:
 15607              		.loc 1 1385 12 view .LVU5344
 15608 01e7 85ED     		test	ebp, ebp	#
 15609 01e9 0F8F8D03 		jg	.L1328	#,
 15609      0000
 15610              	.LVL912:
 15611              	.L1313:
1386:sieve_extend.c ****         if (option_verboselevel >= 2) printf("\n");
 15612              		.loc 1 1386 9 is_stmt 1 view .LVU5345
 15613              	# sieve_extend.c:1386:         if (option_verboselevel >= 2) printf("\n");
 15614              		.loc 1 1386 12 is_stmt 0 view .LVU5346
 15615 01ef 83BC2498 		cmp	DWORD PTR 152[rsp], 1	# option_verboselevel,
 15615      00000001 
 15616 01f7 7E0A     		jle	.L1329	#,
GAS LISTING /tmp/ccBvFgp2.s 			page 424


 15617              		.loc 1 1386 39 is_stmt 1 view .LVU5347
 15618              	.LVL913:
 15619              	.LBB896:
 15620              	.LBI896:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15621              		.loc 3 105 1 view .LVU5348
 15622              	.LBB897:
 15623              		.loc 3 107 3 view .LVU5349
 15624              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15625              		.loc 3 107 10 is_stmt 0 view .LVU5350
 15626 01f9 BF0A0000 		mov	edi, 10	#,
 15626      00
 15627 01fe E8000000 		call	putchar@PLT	#
 15627      00
 15628              	.LVL914:
 15629              	.L1329:
 15630              		.loc 3 107 10 view .LVU5351
 15631              	.LBE897:
 15632              	.LBE896:
 15633              	.LBB898:
 15634              	# sieve_extend.c:1340:     for (int arg=1; arg < argc; arg++) {
1340:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15635              		.loc 1 1340 14 view .LVU5352
 15636 0203 C7442420 		mov	DWORD PTR 32[rsp], 7	# %sfp,
 15636      07000000 
 15637 020b 41BD6400 		mov	r13d, 100	# sieveSize_check,
 15637      0000
 15638              	.LBE898:
 15639              	.LBB899:
 15640              	.LBB900:
 15641              	.LBB901:
 15642              	.LBB902:
 15643              	.LBB903:
 15644              	.LBB904:
 15645              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15646              		.loc 3 107 10 view .LVU5353
 15647 0211 4C8D3500 		lea	r14, .LC46[rip]	# tmp478,
 15647      000000
 15648              	.L1336:
 15649              	.LVL915:
 15650              		.loc 3 107 10 view .LVU5354
 15651              	.LBE904:
 15652              	.LBE903:
 15653              	.LBE902:
 15654              	.LBE901:
1387:sieve_extend.c **** 
1388:sieve_extend.c ****         // validate algorithm - run one time for all sizes
1389:sieve_extend.c ****         for (counter_t sieveSize_check = 100; sieveSize_check <= 100000000; sieveSize_check *=10) {
1390:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 15655              		.loc 1 1390 13 is_stmt 1 view .LVU5355
 15656              	# sieve_extend.c:1390:             if (option_verboselevel >= 2) printf("...Checking size %ju ...",
 15657              		.loc 1 1390 37 is_stmt 0 view .LVU5356
 15658 0218 8B842498 		mov	eax, DWORD PTR 152[rsp]	# prephitmp_326, option_verboselevel
 15658      000000
 15659              	# sieve_extend.c:1390:             if (option_verboselevel >= 2) printf("...Checking size %ju ...",
 15660              		.loc 1 1390 16 view .LVU5357
 15661 021f 83F801   		cmp	eax, 1	# prephitmp_326,
GAS LISTING /tmp/ccBvFgp2.s 			page 425


 15662 0222 7E1D     		jle	.L1330	#,
 15663              		.loc 1 1390 43 is_stmt 1 view .LVU5358
 15664              	.LVL916:
 15665              	.LBB920:
 15666              	.LBI920:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15667              		.loc 3 105 1 view .LVU5359
 15668              	.LBB921:
 15669              		.loc 3 107 3 view .LVU5360
 15670              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15671              		.loc 3 107 10 is_stmt 0 view .LVU5361
 15672 0224 4C89EA   		mov	rdx, r13	#, sieveSize_check
 15673 0227 488D3500 		lea	rsi, .LC45[rip]	#,
 15673      000000
 15674 022e BF010000 		mov	edi, 1	#,
 15674      00
 15675 0233 31C0     		xor	eax, eax	#
 15676 0235 E8000000 		call	__printf_chk@PLT	#
 15676      00
 15677              	.LVL917:
 15678 023a 8B842498 		mov	eax, DWORD PTR 152[rsp]	# prephitmp_326, option_verboselevel
 15678      000000
 15679              	.LVL918:
 15680              	.L1330:
 15681              		.loc 3 107 10 view .LVU5362
 15682              	.LBE921:
 15683              	.LBE920:
 15684              	.LBE900:
 15685              	.LBE899:
 15686              	.LBB930:
 15687              	# sieve_extend.c:1340:     for (int arg=1; arg < argc; arg++) {
1340:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15688              		.loc 1 1340 14 view .LVU5363
 15689 0241 41BC0500 		mov	r12d, 5	# ivtmp_106,
 15689      0000
 15690 0247 BD000400 		mov	ebp, 1024	# blocksize_bits,
 15690      00
 15691 024c EB56     		jmp	.L1334	#
 15692              	.LVL919:
 15693 024e 6690     		.p2align 4,,7
 15694              		.p2align 3
 15695              	.L1331:
1340:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15696              		.loc 1 1340 14 view .LVU5364
 15697              	.LBE930:
 15698              	.LBB931:
 15699              	.LBB927:
 15700              	.LBB922:
 15701              	.LBB915:
1391:sieve_extend.c ****             struct sieve_state *sieve_instance_check;
1392:sieve_extend.c ****             for (counter_t blocksize_bits=1024; blocksize_bits<=2*1024*8; blocksize_bits *= 2) {
1393:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
1394:sieve_extend.c ****                 sieve_instance_check = sieve(sieveSize_check, blocksize_bits);
 15702              		.loc 1 1394 17 is_stmt 1 view .LVU5365
 15703              	# sieve_extend.c:1394:                 sieve_instance_check = sieve(sieveSize_check, blocksize_bits
 15704              		.loc 1 1394 40 is_stmt 0 view .LVU5366
 15705 0250 4889EE   		mov	rsi, rbp	#, blocksize_bits
GAS LISTING /tmp/ccBvFgp2.s 			page 426


 15706 0253 4C89EF   		mov	rdi, r13	#, sieveSize_check
 15707 0256 E8000000 		call	sieve	#
 15707      00
 15708              	.LVL920:
 15709              	# sieve_extend.c:1395:                 int valid = validatePrimeCount(sieve_instance_check,option_v
1395:sieve_extend.c ****                 int valid = validatePrimeCount(sieve_instance_check,option_verboselevel);
 15710              		.loc 1 1395 29 view .LVU5367
 15711 025b 8BB42498 		mov	esi, DWORD PTR 152[rsp]	#, option_verboselevel
 15711      000000
 15712              	# sieve_extend.c:1394:                 sieve_instance_check = sieve(sieveSize_check, blocksize_bits
1394:sieve_extend.c ****                 int valid = validatePrimeCount(sieve_instance_check,option_verboselevel);
 15713              		.loc 1 1394 40 view .LVU5368
 15714 0262 4989C7   		mov	r15, rax	# sieve_instance_check, tmp530
 15715              	.LVL921:
 15716              		.loc 1 1395 17 is_stmt 1 view .LVU5369
 15717              	# sieve_extend.c:1395:                 int valid = validatePrimeCount(sieve_instance_check,option_v
 15718              		.loc 1 1395 29 is_stmt 0 view .LVU5370
 15719 0265 4889C7   		mov	rdi, rax	#, sieve_instance_check
 15720 0268 E8000000 		call	validatePrimeCount	#
 15720      00
 15721              	.LVL922:
 15722              	.LBB906:
 15723              	.LBB907:
 15724              	# sieve_extend.c:117:     free(sieve->bitarray);
 117:sieve_extend.c ****     free(sieve);
 15725              		.loc 1 117 5 view .LVU5371
 15726 026d 498B3F   		mov	rdi, QWORD PTR [r15]	#, sieve_instance_check_128->bitarray
 15727              	.LBE907:
 15728              	.LBE906:
 15729              	# sieve_extend.c:1395:                 int valid = validatePrimeCount(sieve_instance_check,option_v
 15730              		.loc 1 1395 29 view .LVU5372
 15731 0270 89C3     		mov	ebx, eax	# valid, tmp531
 15732              	.LVL923:
1396:sieve_extend.c ****                 delete_sieve(sieve_instance_check);
 15733              		.loc 1 1396 17 is_stmt 1 view .LVU5373
 15734              	.LBB909:
 15735              	.LBI906:
 116:sieve_extend.c ****     free(sieve->bitarray);
 15736              		.loc 1 116 13 view .LVU5374
 15737              	.LBB908:
 117:sieve_extend.c ****     free(sieve);
 15738              		.loc 1 117 5 view .LVU5375
 15739 0272 E8000000 		call	free@PLT	#
 15739      00
 15740              	.LVL924:
 118:sieve_extend.c **** }
 15741              		.loc 1 118 5 view .LVU5376
 15742 0277 4C89FF   		mov	rdi, r15	#, sieve_instance_check
 15743 027a E8000000 		call	free@PLT	#
 15743      00
 15744              	.LVL925:
 118:sieve_extend.c **** }
 15745              		.loc 1 118 5 is_stmt 0 view .LVU5377
 15746              	.LBE908:
 15747              	.LBE909:
1397:sieve_extend.c ****                 if (!valid) return 0; else if (option_verboselevel >= 3) printf("valid;");
 15748              		.loc 1 1397 17 is_stmt 1 view .LVU5378
GAS LISTING /tmp/ccBvFgp2.s 			page 427


 15749              	# sieve_extend.c:1397:                 if (!valid) return 0; else if (option_verboselevel >= 3) pri
 15750              		.loc 1 1397 20 is_stmt 0 view .LVU5379
 15751 027f 85DB     		test	ebx, ebx	# valid
 15752 0281 0F84C902 		je	.L1372	#,
 15752      0000
 15753              		.loc 1 1397 44 is_stmt 1 discriminator 2 view .LVU5380
 15754              	# sieve_extend.c:1397:                 if (!valid) return 0; else if (option_verboselevel >= 3) pri
 15755              		.loc 1 1397 68 is_stmt 0 discriminator 2 view .LVU5381
 15756 0287 8B842498 		mov	eax, DWORD PTR 152[rsp]	# prephitmp_326, option_verboselevel
 15756      000000
 15757              	# sieve_extend.c:1397:                 if (!valid) return 0; else if (option_verboselevel >= 3) pri
 15758              		.loc 1 1397 47 discriminator 2 view .LVU5382
 15759 028e 83F802   		cmp	eax, 2	# prephitmp_326,
 15760 0291 0F8FE900 		jg	.L1448	#,
 15760      0000
 15761              	.LBE915:
1392:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15762              		.loc 1 1392 75 is_stmt 1 discriminator 2 view .LVU5383
 15763              	# sieve_extend.c:1392:             for (counter_t blocksize_bits=1024; blocksize_bits<=2*1024*8; bl
1392:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15764              		.loc 1 1392 90 is_stmt 0 discriminator 2 view .LVU5384
 15765 0297 4801ED   		add	rbp, rbp	# blocksize_bits
 15766              	.LVL926:
1392:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15767              		.loc 1 1392 49 is_stmt 1 discriminator 2 view .LVU5385
 15768              	# sieve_extend.c:1392:             for (counter_t blocksize_bits=1024; blocksize_bits<=2*1024*8; bl
1392:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15769              		.loc 1 1392 13 is_stmt 0 discriminator 2 view .LVU5386
 15770 029a 4183EC01 		sub	r12d, 1	# ivtmp_106,
 15771 029e 0F840301 		je	.L1449	#,
 15771      0000
 15772              	.LVL927:
 15773              	.L1334:
 15774              	.LBB916:
1393:sieve_extend.c ****                 sieve_instance_check = sieve(sieveSize_check, blocksize_bits);
 15775              		.loc 1 1393 17 is_stmt 1 view .LVU5387
 15776              	# sieve_extend.c:1393:                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uint
1393:sieve_extend.c ****                 sieve_instance_check = sieve(sieveSize_check, blocksize_bits);
 15777              		.loc 1 1393 20 is_stmt 0 view .LVU5388
 15778 02a4 83F802   		cmp	eax, 2	# prephitmp_326,
 15779 02a7 7EA7     		jle	.L1331	#,
1393:sieve_extend.c ****                 sieve_instance_check = sieve(sieveSize_check, blocksize_bits);
 15780              		.loc 1 1393 47 is_stmt 1 view .LVU5389
 15781              	.LVL928:
 15782              	.LBB910:
 15783              	.LBI903:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15784              		.loc 3 105 1 view .LVU5390
 15785              	.LBB905:
 15786              		.loc 3 107 3 view .LVU5391
 15787              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15788              		.loc 3 107 10 is_stmt 0 view .LVU5392
 15789 02a9 4889EA   		mov	rdx, rbp	#, blocksize_bits
 15790 02ac 4C89F6   		mov	rsi, r14	#, tmp478
 15791 02af BF010000 		mov	edi, 1	#,
 15791      00
 15792 02b4 31C0     		xor	eax, eax	#
GAS LISTING /tmp/ccBvFgp2.s 			page 428


 15793 02b6 E8000000 		call	__printf_chk@PLT	#
 15793      00
 15794              	.LVL929:
 15795 02bb EB93     		jmp	.L1331	#
 15796              	.LVL930:
 15797 02bd 0F1F00   		.p2align 4,,7
 15798              		.p2align 3
 15799              	.L1320:
 15800              		.loc 3 107 10 view .LVU5393
 15801              	.LBE905:
 15802              	.LBE910:
 15803              	.LBE916:
 15804              	.LBE922:
 15805              	.LBE927:
 15806              	.LBE931:
 15807              	.LBB932:
1357:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
 15808              		.loc 1 1357 14 is_stmt 1 view .LVU5394
 15809              	# sieve_extend.c:1357:         else if (strcmp(argv[arg], "--show")==0) { option_showMaxFactor=0;
1357:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
 15810              		.loc 1 1357 18 is_stmt 0 view .LVU5395
 15811 02c0 4C89C9   		mov	rcx, r9	# tmp290, tmp290
 15812 02c3 4C89C6   		mov	rsi, r8	# _4, _4
 15813 02c6 488D3D00 		lea	rdi, .LC39[rip]	# tmp321,
 15813      000000
 15814 02cd F3A6     		repz cmpsb
 15815 02cf 410F97C1 		seta	r9b	#, tmp323
 15816 02d3 4180D900 		sbb	r9b, 0	# _36
 15817              	# sieve_extend.c:1357:         else if (strcmp(argv[arg], "--show")==0) { option_showMaxFactor=0;
1357:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
 15818              		.loc 1 1357 17 view .LVU5396
 15819 02d7 4584C9   		test	r9b, r9b	# _36
 15820 02da 756C     		jne	.L1324	#,
1357:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
 15821              		.loc 1 1357 52 is_stmt 1 discriminator 1 view .LVU5397
 15822              	# sieve_extend.c:1357:         else if (strcmp(argv[arg], "--show")==0) { option_showMaxFactor=0;
1357:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
 15823              		.loc 1 1357 72 is_stmt 0 discriminator 1 view .LVU5398
 15824 02dc 48C78424 		mov	QWORD PTR 168[rsp], 0	# option_showMaxFactor,
 15824      A8000000 
 15824      00000000 
1358:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
 15825              		.loc 1 1358 13 is_stmt 1 discriminator 1 view .LVU5399
 15826              	# sieve_extend.c:1358:             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\
1358:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
 15827              		.loc 1 1358 16 is_stmt 0 discriminator 1 view .LVU5400
 15828 02e8 83C301   		add	ebx, 1	# arg,
 15829              	.LVL931:
1358:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
 15830              		.loc 1 1358 16 discriminator 1 view .LVU5401
 15831 02eb 39DD     		cmp	ebp, ebx	# argc, arg
 15832 02ed 0F8EA00C 		jle	.L1450	#,
 15832      0000
1359:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
 15833              		.loc 1 1359 13 is_stmt 1 view .LVU5402
 15834              	# sieve_extend.c:1359:             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) 
1359:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
GAS LISTING /tmp/ccBvFgp2.s 			page 429


 15835              		.loc 1 1359 28 is_stmt 0 view .LVU5403
 15836 02f3 4D8D7C04 		lea	r15, 8[r12+rax]	# _41,
 15836      08
 15837              	# sieve_extend.c:1359:             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) 
1359:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
 15838              		.loc 1 1359 17 view .LVU5404
 15839 02f8 488D9424 		lea	rdx, 168[rsp]	# tmp327,
 15839      A8000000 
 15840 0300 498B3F   		mov	rdi, QWORD PTR [r15]	#, *_41
 15841 0303 31C0     		xor	eax, eax	#
 15842 0305 488D3500 		lea	rsi, .LC41[rip]	#,
 15842      000000
 15843 030c E8000000 		call	__isoc99_sscanf@PLT	#
 15843      00
 15844              	.LVL932:
 15845              	# sieve_extend.c:1359:             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) 
1359:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
 15846              		.loc 1 1359 16 view .LVU5405
 15847 0311 83F801   		cmp	eax, 1	# tmp528,
 15848 0314 0F853F0C 		jne	.L1326	#,
 15848      0000
 15849              	# sieve_extend.c:1359:             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) 
1359:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
 15850              		.loc 1 1359 106 discriminator 1 view .LVU5406
 15851 031a 488B9424 		mov	rdx, QWORD PTR 168[rsp]	# option_showMaxFactor.24_44, option_showMaxFactor
 15851      A8000000 
 15852              	# sieve_extend.c:1359:             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) 
1359:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
 15853              		.loc 1 1359 82 discriminator 1 view .LVU5407
 15854 0322 483B9424 		cmp	rdx, QWORD PTR 160[rsp]	# option_showMaxFactor.24_44, option_maxFactor
 15854      A0000000 
 15855 032a 0F87290C 		ja	.L1326	#,
 15855      0000
1362:sieve_extend.c ****         }
 15856              		.loc 1 1362 13 is_stmt 1 view .LVU5408
 15857              	.LVL933:
 15858              	.LBB877:
 15859              	.LBI877:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15860              		.loc 3 105 1 view .LVU5409
 15861              	.LBB878:
 15862              		.loc 3 107 3 view .LVU5410
 15863              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15864              		.loc 3 107 10 is_stmt 0 view .LVU5411
 15865 0330 488D3500 		lea	rsi, .LC43[rip]	#,
 15865      000000
 15866 0337 BF010000 		mov	edi, 1	#,
 15866      00
 15867 033c 31C0     		xor	eax, eax	#
 15868 033e E8000000 		call	__printf_chk@PLT	#
 15868      00
 15869              	.LVL934:
 15870 0343 E98DFDFF 		jmp	.L1319	#
 15870      FF
 15871              	.LVL935:
 15872              		.p2align 4,,7
 15873              		.p2align 3
GAS LISTING /tmp/ccBvFgp2.s 			page 430


 15874              	.L1324:
 15875              		.loc 3 107 10 view .LVU5412
 15876              	.LBE878:
 15877              	.LBE877:
1364:sieve_extend.c ****             fprintf(stderr, "Invalid size %s\n",argv[arg]); usage(argv[0]); 
 15878              		.loc 1 1364 14 is_stmt 1 view .LVU5413
 15879              	# sieve_extend.c:1364:         else if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_maxFactor) != 
1364:sieve_extend.c ****             fprintf(stderr, "Invalid size %s\n",argv[arg]); usage(argv[0]); 
 15880              		.loc 1 1364 18 is_stmt 0 view .LVU5414
 15881 0348 31C0     		xor	eax, eax	#
 15882 034a 488D9424 		lea	rdx, 160[rsp]	# tmp329,
 15882      A0000000 
 15883 0352 488D3500 		lea	rsi, .LC41[rip]	#,
 15883      000000
 15884 0359 4C89C7   		mov	rdi, r8	#, _4
 15885 035c E8000000 		call	__isoc99_sscanf@PLT	#
 15885      00
 15886              	.LVL936:
 15887              	# sieve_extend.c:1364:         else if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_maxFactor) != 
1364:sieve_extend.c ****             fprintf(stderr, "Invalid size %s\n",argv[arg]); usage(argv[0]); 
 15888              		.loc 1 1364 17 view .LVU5415
 15889 0361 83F801   		cmp	eax, 1	# tmp529,
 15890 0364 0F846BFD 		je	.L1319	#,
 15890      FFFF
1365:sieve_extend.c ****             printf("Maximum set to %ju\n",(uintmax_t)option_maxFactor);
 15891              		.loc 1 1365 13 is_stmt 1 view .LVU5416
 15892              	.LVL937:
 15893              	.LBB879:
 15894              	.LBI879:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15895              		.loc 3 98 1 view .LVU5417
 15896              	.LBB880:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15897              		.loc 3 100 3 view .LVU5418
 15898              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15899              		.loc 3 100 10 is_stmt 0 view .LVU5419
 15900 036a 498B0F   		mov	rcx, QWORD PTR [r15]	#, *_3
 15901 036d 488D1500 		lea	rdx, .LC44[rip]	#,
 15901      000000
 15902 0374 E9250200 		jmp	.L1441	#
 15902      00
 15903              	.LVL938:
 15904 0379 0F1F8000 		.p2align 4,,7
 15904      000000
 15905              		.p2align 3
 15906              	.L1448:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15907              		.loc 3 100 10 view .LVU5420
 15908              	.LBE880:
 15909              	.LBE879:
 15910              	.LBE932:
 15911              	.LBB933:
 15912              	.LBB928:
 15913              	.LBB923:
 15914              	.LBB917:
 15915              		.loc 1 1397 74 is_stmt 1 view .LVU5421
GAS LISTING /tmp/ccBvFgp2.s 			page 431


 15916              	.LBB911:
 15917              	.LBI911:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15918              		.loc 3 105 1 view .LVU5422
 15919              	.LBB912:
 15920              		.loc 3 107 3 view .LVU5423
 15921              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15922              		.loc 3 107 10 is_stmt 0 view .LVU5424
 15923 0380 31C0     		xor	eax, eax	#
 15924 0382 488D3500 		lea	rsi, .LC47[rip]	#,
 15924      000000
 15925 0389 BF010000 		mov	edi, 1	#,
 15925      00
 15926              	.LBE912:
 15927              	.LBE911:
 15928              	.LBE917:
 15929              	# sieve_extend.c:1392:             for (counter_t blocksize_bits=1024; blocksize_bits<=2*1024*8; bl
1392:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15930              		.loc 1 1392 90 view .LVU5425
 15931 038e 4801ED   		add	rbp, rbp	# blocksize_bits
 15932              	.LVL939:
 15933              	.LBB918:
 15934              	.LBB914:
 15935              	.LBB913:
 15936              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15937              		.loc 3 107 10 view .LVU5426
 15938 0391 E8000000 		call	__printf_chk@PLT	#
 15938      00
 15939              	.LVL940:
 15940 0396 8B842498 		mov	eax, DWORD PTR 152[rsp]	# prephitmp_326, option_verboselevel
 15940      000000
 15941              	.LVL941:
 15942              		.loc 3 107 10 view .LVU5427
 15943              	.LBE913:
 15944              	.LBE914:
 15945              	.LBE918:
1392:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15946              		.loc 1 1392 75 is_stmt 1 view .LVU5428
1392:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15947              		.loc 1 1392 49 view .LVU5429
 15948              	# sieve_extend.c:1392:             for (counter_t blocksize_bits=1024; blocksize_bits<=2*1024*8; bl
1392:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15949              		.loc 1 1392 13 is_stmt 0 view .LVU5430
 15950 039d 4183EC01 		sub	r12d, 1	# ivtmp_106,
 15951 03a1 0F85FDFE 		jne	.L1334	#,
 15951      FFFF
 15952              	.L1449:
1392:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15953              		.loc 1 1392 13 view .LVU5431
 15954              	.LBE923:
1398:sieve_extend.c ****             }
1399:sieve_extend.c ****             if (option_verboselevel >= 2) printf("\n");
 15955              		.loc 1 1399 13 is_stmt 1 view .LVU5432
 15956              	# sieve_extend.c:1399:             if (option_verboselevel >= 2) printf("\n");
 15957              		.loc 1 1399 16 is_stmt 0 view .LVU5433
 15958 03a7 83F801   		cmp	eax, 1	# prephitmp_326,
 15959 03aa 7E0A     		jle	.L1335	#,
GAS LISTING /tmp/ccBvFgp2.s 			page 432


 15960              		.loc 1 1399 43 is_stmt 1 view .LVU5434
 15961              	.LVL942:
 15962              	.LBB924:
 15963              	.LBI924:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15964              		.loc 3 105 1 view .LVU5435
 15965              	.LBB925:
 15966              		.loc 3 107 3 view .LVU5436
 15967              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15968              		.loc 3 107 10 is_stmt 0 view .LVU5437
 15969 03ac BF0A0000 		mov	edi, 10	#,
 15969      00
 15970 03b1 E8000000 		call	putchar@PLT	#
 15970      00
 15971              	.LVL943:
 15972              	.L1335:
 15973              		.loc 3 107 10 view .LVU5438
 15974              	.LBE925:
 15975              	.LBE924:
 15976              	.LBE928:
1389:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 15977              		.loc 1 1389 77 is_stmt 1 discriminator 2 view .LVU5439
 15978              	# sieve_extend.c:1389:         for (counter_t sieveSize_check = 100; sieveSize_check <= 100000000; 
1389:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 15979              		.loc 1 1389 93 is_stmt 0 discriminator 2 view .LVU5440
 15980 03b6 4F8D6CAD 		lea	r13, 0[r13+r13*4]	# tmp335,
 15980      00
 15981              	.LVL944:
1389:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 15982              		.loc 1 1389 93 discriminator 2 view .LVU5441
 15983 03bb 4D01ED   		add	r13, r13	# sieveSize_check
 15984              	.LVL945:
1389:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 15985              		.loc 1 1389 47 is_stmt 1 discriminator 2 view .LVU5442
 15986              	# sieve_extend.c:1389:         for (counter_t sieveSize_check = 100; sieveSize_check <= 100000000; 
1389:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 15987              		.loc 1 1389 9 is_stmt 0 discriminator 2 view .LVU5443
 15988 03be 836C2420 		sub	DWORD PTR 32[rsp], 1	# %sfp,
 15988      01
 15989 03c3 0F854FFE 		jne	.L1336	#,
 15989      FFFF
 15990              	.LBE933:
1400:sieve_extend.c ****         }
1401:sieve_extend.c ****         if (option_verboselevel >= 1) printf("...Valid algorithm\n");
 15991              		.loc 1 1401 9 is_stmt 1 view .LVU5444
 15992              	# sieve_extend.c:1401:         if (option_verboselevel >= 1) printf("...Valid algorithm\n");
 15993              		.loc 1 1401 12 is_stmt 0 view .LVU5445
 15994 03c9 83BC2498 		cmp	DWORD PTR 152[rsp], 0	# option_verboselevel,
 15994      00000000 
 15995 03d1 0F8F4E09 		jg	.L1451	#,
 15995      0000
1402:sieve_extend.c ****     }
1403:sieve_extend.c ****     
1404:sieve_extend.c ****     counter_t best_blocksize_bits = default_blocksize;
 15996              		.loc 1 1404 5 is_stmt 1 view .LVU5446
 15997              	.LVL946:
1405:sieve_extend.c ****     if (option_tunelevel) {
GAS LISTING /tmp/ccBvFgp2.s 			page 433


 15998              		.loc 1 1405 5 view .LVU5447
 15999              	# sieve_extend.c:1405:     if (option_tunelevel) {
 16000              		.loc 1 1405 9 is_stmt 0 view .LVU5448
 16001 03d7 448B8424 		mov	r8d, DWORD PTR 156[rsp]	# option_tunelevel.40_380, option_tunelevel
 16001      9C000000 
 16002              	# sieve_extend.c:1404:     counter_t best_blocksize_bits = default_blocksize;
1404:sieve_extend.c ****     if (option_tunelevel) {
 16003              		.loc 1 1404 15 view .LVU5449
 16004 03df 41BE00FC 		mov	r14d, 261120	# best_result$blocksize_bits,
 16004      0300
 16005              	# sieve_extend.c:1405:     if (option_tunelevel) {
 16006              		.loc 1 1405 8 view .LVU5450
 16007 03e5 4585C0   		test	r8d, r8d	# option_tunelevel.40_380
 16008 03e8 0F858C02 		jne	.L1452	#,
 16008      0000
 16009              	.LVL947:
 16010              	.L1365:
 16011              	.LBB934:
1406:sieve_extend.c ****         tuning_result_type tuning_result = tune(option_tunelevel, option_maxFactor, option_verbosel
1407:sieve_extend.c ****         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
1408:sieve_extend.c ****         global_MEDIUMSTEP_FASTER = tuning_result.mediumstep_faster;
1409:sieve_extend.c ****         global_VECTORSTEP_FASTER = tuning_result.vectorstep_faster;
1410:sieve_extend.c ****         best_blocksize_bits = tuning_result.blocksize_bits;
1411:sieve_extend.c ****     }
1412:sieve_extend.c **** 
1413:sieve_extend.c ****     double max_time = default_sieve_duration;
1414:sieve_extend.c ****     if (best_blocksize_bits > 0) {
1415:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
1416:sieve_extend.c ****         counter_t passes = 0;
 16012              		.loc 1 1416 9 is_stmt 1 view .LVU5451
1417:sieve_extend.c ****         counter_t blocksize_bits = best_blocksize_bits;
 16013              		.loc 1 1417 9 view .LVU5452
1418:sieve_extend.c ****         double elapsed_time = 0;
 16014              		.loc 1 1418 9 view .LVU5453
1419:sieve_extend.c ****         struct sieve_state *sieve_instance;
 16015              		.loc 1 1419 9 view .LVU5454
1420:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&start_time);
 16016              		.loc 1 1420 9 view .LVU5455
 16017 03ee 488DB424 		lea	rsi, 176[rsp]	# tmp438,
 16017      B0000000 
 16018 03f6 BF010000 		mov	edi, 1	#,
 16018      00
 16019 03fb E8000000 		call	clock_gettime@PLT	#
 16019      00
 16020              	.LVL948:
1421:sieve_extend.c ****         while (elapsed_time <= max_time) {
 16021              		.loc 1 1421 9 view .LVU5456
 16022              		.loc 1 1421 15 view .LVU5457
 16023              	# sieve_extend.c:1416:         counter_t passes = 0;
1416:sieve_extend.c ****         counter_t blocksize_bits = best_blocksize_bits;
 16024              		.loc 1 1416 19 is_stmt 0 view .LVU5458
 16025 0400 4531FF   		xor	r15d, r15d	# passes
 16026 0403 4C8DA424 		lea	r12, 192[rsp]	# tmp465,
 16026      C0000000 
 16027              	.LVL949:
 16028              	.L1366:
1422:sieve_extend.c ****             sieve_instance = sieve(option_maxFactor, blocksize_bits);//blocksize_bits);
GAS LISTING /tmp/ccBvFgp2.s 			page 434


 16029              		.loc 1 1422 13 is_stmt 1 view .LVU5459
 16030              	# sieve_extend.c:1422:             sieve_instance = sieve(option_maxFactor, blocksize_bits);//block
 16031              		.loc 1 1422 30 is_stmt 0 view .LVU5460
 16032 040b 488BBC24 		mov	rdi, QWORD PTR 160[rsp]	#, option_maxFactor
 16032      A0000000 
 16033 0413 4C89F6   		mov	rsi, r14	#, best_result$blocksize_bits
 16034              	# sieve_extend.c:1424:             passes++;
1423:sieve_extend.c ****             delete_sieve(sieve_instance);
1424:sieve_extend.c ****             passes++;
 16035              		.loc 1 1424 19 view .LVU5461
 16036 0416 4983C701 		add	r15, 1	# passes,
 16037              	# sieve_extend.c:1422:             sieve_instance = sieve(option_maxFactor, blocksize_bits);//block
1422:sieve_extend.c ****             sieve_instance = sieve(option_maxFactor, blocksize_bits);//blocksize_bits);
 16038              		.loc 1 1422 30 view .LVU5462
 16039 041a E8000000 		call	sieve	#
 16039      00
 16040              	.LVL950:
 16041              	.LBB935:
 16042              	.LBB936:
 16043              	# sieve_extend.c:117:     free(sieve->bitarray);
 117:sieve_extend.c ****     free(sieve);
 16044              		.loc 1 117 5 view .LVU5463
 16045 041f 488B38   		mov	rdi, QWORD PTR [rax]	#, sieve_instance_146->bitarray
 16046              	.LBE936:
 16047              	.LBE935:
 16048              	# sieve_extend.c:1422:             sieve_instance = sieve(option_maxFactor, blocksize_bits);//block
1422:sieve_extend.c ****             sieve_instance = sieve(option_maxFactor, blocksize_bits);//blocksize_bits);
 16049              		.loc 1 1422 30 view .LVU5464
 16050 0422 4989C5   		mov	r13, rax	# sieve_instance, tmp533
 16051              	.LVL951:
1423:sieve_extend.c ****             delete_sieve(sieve_instance);
 16052              		.loc 1 1423 13 is_stmt 1 view .LVU5465
 16053              	.LBB940:
 16054              	.LBI935:
 116:sieve_extend.c ****     free(sieve->bitarray);
 16055              		.loc 1 116 13 view .LVU5466
 16056              	.LBB937:
 117:sieve_extend.c ****     free(sieve);
 16057              		.loc 1 117 5 view .LVU5467
 16058 0425 E8000000 		call	free@PLT	#
 16058      00
 16059              	.LVL952:
 118:sieve_extend.c **** }
 16060              		.loc 1 118 5 view .LVU5468
 16061 042a 4C89EF   		mov	rdi, r13	#, sieve_instance
 16062 042d E8000000 		call	free@PLT	#
 16062      00
 16063              	.LVL953:
 118:sieve_extend.c **** }
 16064              		.loc 1 118 5 is_stmt 0 view .LVU5469
 16065              	.LBE937:
 16066              	.LBE940:
 16067              		.loc 1 1424 13 is_stmt 1 view .LVU5470
1425:sieve_extend.c ****             clock_gettime(CLOCK_MONOTONIC,&end_time);
 16068              		.loc 1 1425 13 view .LVU5471
 16069 0432 4C89E6   		mov	rsi, r12	#, tmp465
 16070 0435 BF010000 		mov	edi, 1	#,
GAS LISTING /tmp/ccBvFgp2.s 			page 435


 16070      00
 16071 043a E8000000 		call	clock_gettime@PLT	#
 16071      00
 16072              	.LVL954:
1426:sieve_extend.c ****             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time
 16073              		.loc 1 1426 13 view .LVU5472
 16074              	# sieve_extend.c:1426:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 16075              		.loc 1 1426 62 is_stmt 0 view .LVU5473
 16076 043f C4E1D32A 		vcvtsi2sd	xmm5, xmm5, QWORD PTR 200[rsp]	# tmp441, end_time.tv_nsec
 16076      AC24C800 
 16076      0000
 16077              	# sieve_extend.c:1426:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 16078              		.loc 1 1426 68 view .LVU5474
 16079 0449 C4E1EB2A 		vcvtsi2sd	xmm2, xmm2, QWORD PTR 176[rsp]	# tmp442, start_time.tv_sec
 16079      9424B000 
 16079      0000
 16080              	# sieve_extend.c:1426:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 16081              		.loc 1 1426 108 view .LVU5475
 16082 0453 C461BB2A 		vcvtsi2sd	xmm8, xmm8, QWORD PTR 184[rsp]	# tmp444, start_time.tv_nsec
 16082      8424B800 
 16082      0000
 16083              	# sieve_extend.c:1426:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 16084              		.loc 1 1426 44 view .LVU5476
 16085 045d C461B32A 		vcvtsi2sd	xmm9, xmm9, QWORD PTR 192[rsp]	# tmp445, end_time.tv_sec
 16085      8C24C000 
 16085      0000
 16086              	# sieve_extend.c:1421:         while (elapsed_time <= max_time) {
1421:sieve_extend.c ****             sieve_instance = sieve(option_maxFactor, blocksize_bits);//blocksize_bits);
 16087              		.loc 1 1421 15 view .LVU5477
 16088 0467 C57B1015 		vmovsd	xmm10, QWORD PTR .LC59[rip]	# tmp628,
 16088      00000000 
 16089 046f C4E2E99B 		vfmsub132sd	xmm5, xmm2, QWORD PTR .LC8[rip]	# _301, tmp442,
 16089      2D000000 
 16089      00
 16090 0478 C462B19D 		vfnmadd132sd	xmm8, xmm9, QWORD PTR .LC8[rip]	# _302, tmp445,
 16090      05000000 
 16090      00
 16091              	# sieve_extend.c:1426:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 16092              		.loc 1 1426 26 view .LVU5478
 16093 0481 C4C15358 		vaddsd	xmm0, xmm5, xmm8	# elapsed_time, _301, _302
 16093      C0
 16094              	.LVL955:
1421:sieve_extend.c ****             sieve_instance = sieve(option_maxFactor, blocksize_bits);//blocksize_bits);
 16095              		.loc 1 1421 15 is_stmt 1 view .LVU5479
 16096 0486 C5792FD0 		vcomisd	xmm10, xmm0	# tmp628, elapsed_time
 16097 048a 0F828500 		jb	.L1438	#,
 16097      0000
 16098              	.LVL956:
1422:sieve_extend.c ****             delete_sieve(sieve_instance);
 16099              		.loc 1 1422 13 view .LVU5480
 16100              	# sieve_extend.c:1422:             sieve_instance = sieve(option_maxFactor, blocksize_bits);//block
1422:sieve_extend.c ****             delete_sieve(sieve_instance);
 16101              		.loc 1 1422 30 is_stmt 0 view .LVU5481
 16102 0490 488BBC24 		mov	rdi, QWORD PTR 160[rsp]	#, option_maxFactor
 16102      A0000000 
 16103 0498 4C89F6   		mov	rsi, r14	#, best_result$blocksize_bits
 16104              	# sieve_extend.c:1424:             passes++;
GAS LISTING /tmp/ccBvFgp2.s 			page 436


1424:sieve_extend.c ****             clock_gettime(CLOCK_MONOTONIC,&end_time);
 16105              		.loc 1 1424 19 view .LVU5482
 16106 049b 4983C701 		add	r15, 1	# passes,
 16107              	# sieve_extend.c:1422:             sieve_instance = sieve(option_maxFactor, blocksize_bits);//block
1422:sieve_extend.c ****             delete_sieve(sieve_instance);
 16108              		.loc 1 1422 30 view .LVU5483
 16109 049f E8000000 		call	sieve	#
 16109      00
 16110              	.LVL957:
 16111              	.LBB941:
 16112              	.LBB938:
 16113              	# sieve_extend.c:117:     free(sieve->bitarray);
 117:sieve_extend.c ****     free(sieve);
 16114              		.loc 1 117 5 view .LVU5484
 16115 04a4 488B38   		mov	rdi, QWORD PTR [rax]	#, sieve_instance_146->bitarray
 16116              	.LBE938:
 16117              	.LBE941:
 16118              	# sieve_extend.c:1422:             sieve_instance = sieve(option_maxFactor, blocksize_bits);//block
1422:sieve_extend.c ****             delete_sieve(sieve_instance);
 16119              		.loc 1 1422 30 view .LVU5485
 16120 04a7 4889C5   		mov	rbp, rax	# sieve_instance, tmp535
1423:sieve_extend.c ****             passes++;
 16121              		.loc 1 1423 13 is_stmt 1 view .LVU5486
 16122              	.LVL958:
 16123              	.LBB942:
 116:sieve_extend.c ****     free(sieve->bitarray);
 16124              		.loc 1 116 13 view .LVU5487
 16125              	.LBB939:
 117:sieve_extend.c ****     free(sieve);
 16126              		.loc 1 117 5 view .LVU5488
 16127 04aa E8000000 		call	free@PLT	#
 16127      00
 16128              	.LVL959:
 118:sieve_extend.c **** }
 16129              		.loc 1 118 5 view .LVU5489
 16130 04af 4889EF   		mov	rdi, rbp	#, sieve_instance
 16131 04b2 E8000000 		call	free@PLT	#
 16131      00
 16132              	.LVL960:
 118:sieve_extend.c **** }
 16133              		.loc 1 118 5 is_stmt 0 view .LVU5490
 16134              	.LBE939:
 16135              	.LBE942:
1424:sieve_extend.c ****             clock_gettime(CLOCK_MONOTONIC,&end_time);
 16136              		.loc 1 1424 13 is_stmt 1 view .LVU5491
1425:sieve_extend.c ****             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time
 16137              		.loc 1 1425 13 view .LVU5492
 16138 04b7 4C89E6   		mov	rsi, r12	#, tmp465
 16139 04ba BF010000 		mov	edi, 1	#,
 16139      00
 16140 04bf E8000000 		call	clock_gettime@PLT	#
 16140      00
 16141              	.LVL961:
 16142              		.loc 1 1426 13 view .LVU5493
 16143              	# sieve_extend.c:1426:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 16144              		.loc 1 1426 62 is_stmt 0 view .LVU5494
 16145 04c4 C461A32A 		vcvtsi2sd	xmm11, xmm11, QWORD PTR 200[rsp]	# tmp518, end_time.tv_nsec
GAS LISTING /tmp/ccBvFgp2.s 			page 437


 16145      9C24C800 
 16145      0000
 16146              	# sieve_extend.c:1426:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 16147              		.loc 1 1426 68 view .LVU5495
 16148 04ce C4619B2A 		vcvtsi2sd	xmm12, xmm12, QWORD PTR 176[rsp]	# tmp519, start_time.tv_sec
 16148      A424B000 
 16148      0000
 16149              	# sieve_extend.c:1426:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 16150              		.loc 1 1426 108 view .LVU5496
 16151 04d8 C461932A 		vcvtsi2sd	xmm13, xmm13, QWORD PTR 184[rsp]	# tmp521, start_time.tv_nsec
 16151      AC24B800 
 16151      0000
 16152              	# sieve_extend.c:1426:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 16153              		.loc 1 1426 44 view .LVU5497
 16154 04e2 C4618B2A 		vcvtsi2sd	xmm14, xmm14, QWORD PTR 192[rsp]	# tmp522, end_time.tv_sec
 16154      B424C000 
 16154      0000
 16155              	# sieve_extend.c:1421:         while (elapsed_time <= max_time) {
1421:sieve_extend.c ****             sieve_instance = sieve(option_maxFactor, blocksize_bits);//blocksize_bits);
 16156              		.loc 1 1421 15 view .LVU5498
 16157 04ec C57B103D 		vmovsd	xmm15, QWORD PTR .LC59[rip]	# tmp635,
 16157      00000000 
 16158 04f4 C462999B 		vfmsub132sd	xmm11, xmm12, QWORD PTR .LC8[rip]	# _301, tmp519,
 16158      1D000000 
 16158      00
 16159 04fd C462899D 		vfnmadd132sd	xmm13, xmm14, QWORD PTR .LC8[rip]	# _302, tmp522,
 16159      2D000000 
 16159      00
 16160              	# sieve_extend.c:1426:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 16161              		.loc 1 1426 26 view .LVU5499
 16162 0506 C4C12358 		vaddsd	xmm0, xmm11, xmm13	# elapsed_time, _301, _302
 16162      C5
 16163              	.LVL962:
1421:sieve_extend.c ****             sieve_instance = sieve(option_maxFactor, blocksize_bits);//blocksize_bits);
 16164              		.loc 1 1421 15 is_stmt 1 view .LVU5500
 16165 050b C5792FF8 		vcomisd	xmm15, xmm0	# tmp635, elapsed_time
 16166 050f 0F83F6FE 		jnb	.L1366	#,
 16166      FFFF
 16167              	.L1438:
1427:sieve_extend.c ****         }
1428:sieve_extend.c ****         printf("rogiervandam_extend;%ju;%f;1;algorithm=other,faithful=yes,bits=1\n", (uintmax_t)pas
 16168              		.loc 1 1428 9 view .LVU5501
 16169              	.LVL963:
 16170              	.LBB943:
 16171              	.LBI943:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16172              		.loc 3 105 1 view .LVU5502
 16173              	.LBB944:
 16174              		.loc 3 107 3 view .LVU5503
 16175              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16176              		.loc 3 107 10 is_stmt 0 view .LVU5504
 16177 0515 4C89FA   		mov	rdx, r15	#, passes
 16178 0518 488D3500 		lea	rsi, .LC60[rip]	#,
 16178      000000
 16179 051f BF010000 		mov	edi, 1	#,
 16179      00
 16180 0524 B8010000 		mov	eax, 1	#,
GAS LISTING /tmp/ccBvFgp2.s 			page 438


 16180      00
 16181 0529 C5FB1144 		vmovsd	QWORD PTR 32[rsp], xmm0	# %sfp, elapsed_time
 16181      2420
 16182 052f E8000000 		call	__printf_chk@PLT	#
 16182      00
 16183              	.LVL964:
 16184              		.loc 3 107 10 view .LVU5505
 16185              	.LBE944:
 16186              	.LBE943:
1429:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Passes - per 5 seconds: %f - per second %f\n", 5*pass
 16187              		.loc 1 1429 9 is_stmt 1 view .LVU5506
 16188              	# sieve_extend.c:1429:         if (option_verboselevel >= 1) printf("Passes - per 5 seconds: %f - p
 16189              		.loc 1 1429 12 is_stmt 0 view .LVU5507
 16190 0534 83BC2498 		cmp	DWORD PTR 152[rsp], 0	# option_verboselevel,
 16190      00000000 
 16191 053c 0F8FCA00 		jg	.L1453	#,
 16191      0000
 16192              	.LVL965:
 16193              	.L1364:
 16194              		.loc 1 1429 12 view .LVU5508
 16195              	.LBE934:
1430:sieve_extend.c ****     }
1431:sieve_extend.c ****     
1432:sieve_extend.c ****     if (option_showMaxFactor > 0) {
 16196              		.loc 1 1432 5 is_stmt 1 view .LVU5509
 16197              	# sieve_extend.c:1432:     if (option_showMaxFactor > 0) {
 16198              		.loc 1 1432 8 is_stmt 0 view .LVU5510
 16199 0542 4883BC24 		cmp	QWORD PTR 168[rsp], 0	# option_showMaxFactor,
 16199      A8000000 
 16199      00
 16200 054b 756D     		jne	.L1454	#,
 16201 054d 0F1F00   		.p2align 4
 16202              		.p2align 3
 16203              	.L1372:
 16204              	.LBB951:
 16205              	.LBB929:
 16206              	.LBB926:
 16207              	.LBB919:
1397:sieve_extend.c ****             }
 16208              		.loc 1 1397 29 is_stmt 1 discriminator 1 view .LVU5511
 16209              	.LBE919:
 16210              	.LBE926:
 16211              	.LBE929:
 16212              	.LBE951:
 16213              	# sieve_extend.c:1439: }
1433:sieve_extend.c ****         printf("Show result set:\n");
1434:sieve_extend.c ****         struct sieve_state* sieve_instance = sieve(option_maxFactor, option_maxFactor);
1435:sieve_extend.c ****         show_primes(sieve_instance, option_showMaxFactor);
1436:sieve_extend.c ****         delete_sieve(sieve_instance);
1437:sieve_extend.c ****         printf("\n");
1438:sieve_extend.c ****     }
1439:sieve_extend.c **** }
 16214              		.loc 1 1439 1 is_stmt 0 discriminator 1 view .LVU5512
 16215 0550 488B8424 		mov	rax, QWORD PTR 216[rsp]	# tmp571, D.7296
 16215      D8000000 
 16216 0558 64483304 		xor	rax, QWORD PTR fs:40	# tmp571, MEM[(<address-space-1> long unsigned int *)40B]
 16216      25280000 
GAS LISTING /tmp/ccBvFgp2.s 			page 439


 16216      00
 16217 0561 0F85270A 		jne	.L1455	#,
 16217      0000
 16218              	# sieve_extend.c:1439: }
 16219              		.loc 1 1439 1 view .LVU5513
 16220 0567 488DA424 		lea	rsp, 232[rsp]	#,
 16220      E8000000 
 16221              		.cfi_remember_state
 16222              		.cfi_def_cfa_offset 56
 16223 056f 31C0     		xor	eax, eax	#
 16224 0571 5B       		pop	rbx	#
 16225              		.cfi_def_cfa_offset 48
 16226 0572 5D       		pop	rbp	#
 16227              		.cfi_def_cfa_offset 40
 16228 0573 415C     		pop	r12	#
 16229              		.cfi_def_cfa_offset 32
 16230 0575 415D     		pop	r13	#
 16231              		.cfi_def_cfa_offset 24
 16232 0577 415E     		pop	r14	#
 16233              		.cfi_def_cfa_offset 16
 16234 0579 415F     		pop	r15	#
 16235              		.cfi_def_cfa_offset 8
 16236 057b C3       		ret	
 16237              	.L1328:
 16238              		.cfi_restore_state
1385:sieve_extend.c ****         if (option_verboselevel >= 2) printf("\n");
 16239              		.loc 1 1385 39 is_stmt 1 view .LVU5514
 16240              	.LVL966:
 16241              	.LBB952:
 16242              	.LBI952:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16243              		.loc 3 105 1 view .LVU5515
 16244              	.LBB953:
 16245              		.loc 3 107 3 view .LVU5516
 16246              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16247              		.loc 3 107 10 is_stmt 0 view .LVU5517
 16248 057c 488D3500 		lea	rsi, .LC27[rip]	#,
 16248      000000
 16249 0583 BF010000 		mov	edi, 1	#,
 16249      00
 16250 0588 31C0     		xor	eax, eax	#
 16251 058a E8000000 		call	__printf_chk@PLT	#
 16251      00
 16252              	.LVL967:
 16253 058f E95BFCFF 		jmp	.L1313	#
 16253      FF
 16254              	.LVL968:
 16255              	.L1317:
 16256              		.loc 3 107 10 view .LVU5518
 16257              	.LBE953:
 16258              	.LBE952:
 16259              	.LBB954:
1345:sieve_extend.c ****             }
 16260              		.loc 1 1345 17 is_stmt 1 view .LVU5519
 16261              	.LBB881:
 16262              	.LBI881:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
GAS LISTING /tmp/ccBvFgp2.s 			page 440


 16263              		.loc 3 98 1 view .LVU5520
 16264              	.LBB882:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16265              		.loc 3 100 3 view .LVU5521
 16266              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16267              		.loc 3 100 10 is_stmt 0 view .LVU5522
 16268 0594 498B0F   		mov	rcx, QWORD PTR [r15]	#, *_16
 16269 0597 488D1500 		lea	rdx, .LC32[rip]	#,
 16269      000000
 16270              	.LVL969:
 16271              	.L1441:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16272              		.loc 3 100 10 view .LVU5523
 16273              	.LBE882:
 16274              	.LBE881:
 16275              	.LBB883:
 16276              	.LBB884:
 16277 059e 488B3D00 		mov	rdi, QWORD PTR stderr[rip]	#, stderr
 16277      000000
 16278 05a5 BE010000 		mov	esi, 1	#,
 16278      00
 16279 05aa 31C0     		xor	eax, eax	#
 16280 05ac E8000000 		call	__fprintf_chk@PLT	#
 16280      00
 16281              	.LVL970:
 16282              	.L1442:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16283              		.loc 3 100 10 view .LVU5524
 16284              	.LBE884:
 16285              	.LBE883:
1353:sieve_extend.c ****             }
 16286              		.loc 1 1353 80 is_stmt 1 view .LVU5525
 16287 05b1 498B3C24 		mov	rdi, QWORD PTR [r12]	#, *argv_159(D)
 16288 05b5 E8000000 		call	usage	#
 16288      00
 16289              	.LVL971:
 16290              	.L1454:
1353:sieve_extend.c ****             }
 16291              		.loc 1 1353 80 is_stmt 0 view .LVU5526
 16292              	.LBE954:
 16293              	.LBB955:
1433:sieve_extend.c ****         struct sieve_state* sieve_instance = sieve(option_maxFactor, option_maxFactor);
 16294              		.loc 1 1433 9 is_stmt 1 view .LVU5527
 16295              	.LBB956:
 16296              	.LBI956:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16297              		.loc 3 105 1 view .LVU5528
 16298              	.LBB957:
 16299              		.loc 3 107 3 view .LVU5529
 16300              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16301              		.loc 3 107 10 is_stmt 0 view .LVU5530
 16302 05ba 488D3D00 		lea	rdi, .LC62[rip]	#,
 16302      000000
 16303 05c1 E8000000 		call	puts@PLT	#
 16303      00
 16304              	.LVL972:
GAS LISTING /tmp/ccBvFgp2.s 			page 441


 16305              		.loc 3 107 10 view .LVU5531
 16306              	.LBE957:
 16307              	.LBE956:
1434:sieve_extend.c ****         show_primes(sieve_instance, option_showMaxFactor);
 16308              		.loc 1 1434 9 is_stmt 1 view .LVU5532
 16309              	# sieve_extend.c:1434:         struct sieve_state* sieve_instance = sieve(option_maxFactor, option_
1434:sieve_extend.c ****         show_primes(sieve_instance, option_showMaxFactor);
 16310              		.loc 1 1434 46 is_stmt 0 view .LVU5533
 16311 05c6 488BBC24 		mov	rdi, QWORD PTR 160[rsp]	# option_maxFactor.51_93, option_maxFactor
 16311      A0000000 
 16312 05ce 4889FE   		mov	rsi, rdi	#, option_maxFactor.51_93
 16313 05d1 E8000000 		call	sieve	#
 16313      00
 16314              	.LVL973:
 16315              	# sieve_extend.c:1435:         show_primes(sieve_instance, option_showMaxFactor);
1435:sieve_extend.c ****         delete_sieve(sieve_instance);
 16316              		.loc 1 1435 9 view .LVU5534
 16317 05d6 488B9424 		mov	rdx, QWORD PTR 168[rsp]	#, option_showMaxFactor
 16317      A8000000 
 16318              	# sieve_extend.c:1434:         struct sieve_state* sieve_instance = sieve(option_maxFactor, option_
1434:sieve_extend.c ****         show_primes(sieve_instance, option_showMaxFactor);
 16319              		.loc 1 1434 46 view .LVU5535
 16320 05de 4989C6   		mov	r14, rax	# sieve_instance, tmp534
 16321              	.LVL974:
1435:sieve_extend.c ****         delete_sieve(sieve_instance);
 16322              		.loc 1 1435 9 is_stmt 1 view .LVU5536
 16323 05e1 488D7008 		lea	rsi, 8[rax]	# tmp460,
 16324 05e5 4889C7   		mov	rdi, rax	#, sieve_instance
 16325 05e8 E8000000 		call	show_primes.isra.0	#
 16325      00
 16326              	.LVL975:
1436:sieve_extend.c ****         printf("\n");
 16327              		.loc 1 1436 9 view .LVU5537
 16328              	.LBB958:
 16329              	.LBI958:
 116:sieve_extend.c ****     free(sieve->bitarray);
 16330              		.loc 1 116 13 view .LVU5538
 16331              	.LBB959:
 117:sieve_extend.c ****     free(sieve);
 16332              		.loc 1 117 5 view .LVU5539
 16333 05ed 498B3E   		mov	rdi, QWORD PTR [r14]	#, sieve_instance_151->bitarray
 16334 05f0 E8000000 		call	free@PLT	#
 16334      00
 16335              	.LVL976:
 118:sieve_extend.c **** }
 16336              		.loc 1 118 5 view .LVU5540
 16337 05f5 4C89F7   		mov	rdi, r14	#, sieve_instance
 16338 05f8 E8000000 		call	free@PLT	#
 16338      00
 16339              	.LVL977:
 118:sieve_extend.c **** }
 16340              		.loc 1 118 5 is_stmt 0 view .LVU5541
 16341              	.LBE959:
 16342              	.LBE958:
1437:sieve_extend.c ****     }
 16343              		.loc 1 1437 9 is_stmt 1 view .LVU5542
 16344              	.LBB960:
GAS LISTING /tmp/ccBvFgp2.s 			page 442


 16345              	.LBI960:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16346              		.loc 3 105 1 view .LVU5543
 16347              	.LBB961:
 16348              		.loc 3 107 3 view .LVU5544
 16349              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16350              		.loc 3 107 10 is_stmt 0 view .LVU5545
 16351 05fd BF0A0000 		mov	edi, 10	#,
 16351      00
 16352 0602 E8000000 		call	putchar@PLT	#
 16352      00
 16353              	.LVL978:
 16354 0607 E944FFFF 		jmp	.L1372	#
 16354      FF
 16355              	.LVL979:
 16356              	.L1453:
 16357              		.loc 3 107 10 view .LVU5546
 16358              	.LBE961:
 16359              	.LBE960:
 16360              	.LBE955:
 16361              	.LBB962:
1429:sieve_extend.c ****     }
 16362              		.loc 1 1429 39 is_stmt 1 discriminator 1 view .LVU5547
 16363              	.LBB945:
 16364              	.LBI945:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16365              		.loc 3 105 1 discriminator 1 view .LVU5548
 16366              	.LBB946:
 16367              		.loc 3 107 3 discriminator 1 view .LVU5549
 16368              	.LBE946:
 16369              	.LBE945:
 16370              	# sieve_extend.c:1429:         if (option_verboselevel >= 1) printf("Passes - per 5 seconds: %f - p
1429:sieve_extend.c ****     }
 16371              		.loc 1 1429 39 is_stmt 0 discriminator 1 view .LVU5550
 16372 060c C4C1FB2A 		vcvtsi2sd	xmm0, xmm0, r15	# tmp448, passes
 16372      C7
 16373 0611 4D85FF   		test	r15, r15	# passes
 16374 0614 C5FB1074 		vmovsd	xmm6, QWORD PTR 32[rsp]	# elapsed_time, %sfp
 16374      2420
 16375 061a 7918     		jns	.L1369	#,
 16376 061c 4C89F8   		mov	rax, r15	# tmp450, passes
 16377 061f 4C89FA   		mov	rdx, r15	# tmp451, passes
 16378 0622 48D1E8   		shr	rax	# tmp450
 16379 0625 83E201   		and	edx, 1	# tmp451,
 16380 0628 4809D0   		or	rax, rdx	# tmp514, tmp451
 16381 062b C4E1C32A 		vcvtsi2sd	xmm7, xmm7, rax	# tmp449, tmp514
 16381      F8
 16382 0630 C5C358C7 		vaddsd	xmm0, xmm7, xmm7	# tmp448, tmp449, tmp449
 16383              	.L1369:
1429:sieve_extend.c ****     }
 16384              		.loc 1 1429 39 discriminator 1 view .LVU5551
 16385 0634 C5FB5ECE 		vdivsd	xmm1, xmm0, xmm6	# tmp452, tmp448, elapsed_time
 16386              	# sieve_extend.c:1429:         if (option_verboselevel >= 1) printf("Passes - per 5 seconds: %f - p
1429:sieve_extend.c ****     }
 16387              		.loc 1 1429 95 discriminator 1 view .LVU5552
 16388 0638 4B8D34BF 		lea	rsi, [r15+r15*4]	# tmp453,
 16389              	# sieve_extend.c:1429:         if (option_verboselevel >= 1) printf("Passes - per 5 seconds: %f - p
GAS LISTING /tmp/ccBvFgp2.s 			page 443


1429:sieve_extend.c ****     }
 16390              		.loc 1 1429 39 discriminator 1 view .LVU5553
 16391 063c 4885F6   		test	rsi, rsi	# tmp453
 16392 063f C4E1E32A 		vcvtsi2sd	xmm3, xmm3, rsi	# tmp454, tmp453
 16392      DE
 16393 0644 7915     		jns	.L1371	#,
 16394 0646 4989F0   		mov	r8, rsi	# tmp456, tmp453
 16395 0649 83E601   		and	esi, 1	# tmp457,
 16396 064c 49D1E8   		shr	r8	# tmp456
 16397 064f 4909F0   		or	r8, rsi	# tmp515, tmp457
 16398 0652 C4C1DB2A 		vcvtsi2sd	xmm4, xmm4, r8	# tmp455, tmp515
 16398      E0
 16399 0657 C5DB58DC 		vaddsd	xmm3, xmm4, xmm4	# tmp454, tmp455, tmp455
 16400              	.L1371:
 16401 065b C5E35EC6 		vdivsd	xmm0, xmm3, xmm6	# tmp458, tmp454, elapsed_time
 16402              	.LBB948:
 16403              	.LBB947:
 16404              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16405              		.loc 3 107 10 discriminator 1 view .LVU5554
 16406 065f 488D3500 		lea	rsi, .LC61[rip]	#,
 16406      000000
 16407 0666 BF010000 		mov	edi, 1	#,
 16407      00
 16408 066b B8020000 		mov	eax, 2	#,
 16408      00
 16409 0670 E8000000 		call	__printf_chk@PLT	#
 16409      00
 16410              	.LVL980:
 16411 0675 E9C8FEFF 		jmp	.L1364	#
 16411      FF
 16412              	.LVL981:
 16413              	.L1452:
 16414              		.loc 3 107 10 discriminator 1 view .LVU5555
 16415              	.LBE947:
 16416              	.LBE948:
 16417              	.LBE962:
 16418              	.LBB963:
1406:sieve_extend.c ****         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
 16419              		.loc 1 1406 9 is_stmt 1 view .LVU5556
 16420              	# sieve_extend.c:1406:         tuning_result_type tuning_result = tune(option_tunelevel, option_max
1406:sieve_extend.c ****         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
 16421              		.loc 1 1406 44 is_stmt 0 view .LVU5557
 16422 067a 448B9424 		mov	r10d, DWORD PTR 152[rsp]	# option_verboselevel.41_63, option_verboselevel
 16422      98000000 
 16423 0682 4183E801 		sub	r8d, 1	#,
 16424 0686 4C8B9C24 		mov	r11, QWORD PTR 160[rsp]	# option_maxFactor.42_64, option_maxFactor
 16424      A0000000 
 16425 068e 4183F802 		cmp	r8d, 2	# _212,
 16426 0692 44895424 		mov	DWORD PTR 88[rsp], r10d	# %sfp, option_verboselevel.41_63
 16426      58
 16427 0697 4C895C24 		mov	QWORD PTR 120[rsp], r11	# %sfp, option_maxFactor.42_64
 16427      78
 16428              	.LVL982:
 16429              	.LBB964:
 16430              	.LBI964:
1211:sieve_extend.c ****     counter_t best_blocksize_bits = default_blocksize;
 16431              		.loc 1 1211 27 is_stmt 1 view .LVU5558
GAS LISTING /tmp/ccBvFgp2.s 			page 444


 16432              	.LBB965:
1212:sieve_extend.c **** 
 16433              		.loc 1 1212 5 view .LVU5559
1214:sieve_extend.c ****     best_blocksize_bits = 0;
 16434              		.loc 1 1214 5 view .LVU5560
1215:sieve_extend.c ****     counter_t best_smallstep_faster = 0;
 16435              		.loc 1 1215 5 view .LVU5561
1216:sieve_extend.c ****     counter_t best_mediumstep_faster = 0;
 16436              		.loc 1 1216 5 view .LVU5562
1217:sieve_extend.c ****     counter_t best_vectorstep_faster = 0;
 16437              		.loc 1 1217 5 view .LVU5563
1218:sieve_extend.c ****     counter_t smallstep_faster_steps = 4;
 16438              		.loc 1 1218 5 view .LVU5564
1219:sieve_extend.c ****     counter_t mediumstep_faster_steps = 4;
 16439              		.loc 1 1219 5 view .LVU5565
1220:sieve_extend.c ****     counter_t vectorstep_faster_steps = 32;
 16440              		.loc 1 1220 5 view .LVU5566
1221:sieve_extend.c ****     counter_t freebits_steps = anticiped_cache_line_bytesize;
 16441              		.loc 1 1221 5 view .LVU5567
1222:sieve_extend.c ****     counter_t sample_max = default_sample_max;
 16442              		.loc 1 1222 5 view .LVU5568
1223:sieve_extend.c ****     double sample_duration = default_sample_duration;
 16443              		.loc 1 1223 5 view .LVU5569
1224:sieve_extend.c **** 
 16444              		.loc 1 1224 5 view .LVU5570
1227:sieve_extend.c ****         case 1:
 16445              		.loc 1 1227 5 view .LVU5571
 16446 069c 0F869407 		jbe	.L1373	#,
 16446      0000
 16447 06a2 C5FB1035 		vmovsd	xmm6, QWORD PTR .LC26[rip]	# sample_duration,
 16447      00000000 
 16448 06aa 48C74424 		mov	QWORD PTR 104[rsp], 5	# %sfp,
 16448      68050000 
 16448      00
 16449 06b3 48C74424 		mov	QWORD PTR 96[rsp], 128	# %sfp,
 16449      60800000 
 16449      00
 16450 06bc 48C78424 		mov	QWORD PTR 128[rsp], 32	# %sfp,
 16450      80000000 
 16450      20000000 
 16451 06c8 48C78424 		mov	QWORD PTR 136[rsp], 4	# %sfp,
 16451      88000000 
 16451      04000000 
 16452 06d4 C5FB1174 		vmovsd	QWORD PTR 112[rsp], xmm6	# %sfp, sample_duration
 16452      2470
 16453              	.LVL983:
 16454              	.L1341:
1255:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 16455              		.loc 1 1255 5 view .LVU5572
 16456              	# sieve_extend.c:1255:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1255:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 16457              		.loc 1 1255 33 is_stmt 0 view .LVU5573
 16458 06da B8400000 		mov	eax, 64	# tmp348,
 16458      00
 16459 06df 31D2     		xor	edx, edx	# tmp347
 16460 06e1 48F7B424 		div	QWORD PTR 136[rsp]	# %sfp
 16460      88000000 
GAS LISTING /tmp/ccBvFgp2.s 			page 445


 16461              	# sieve_extend.c:1255:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1255:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 16462              		.loc 1 1255 254 view .LVU5574
 16463 06e9 31D2     		xor	edx, edx	# tmp355
 16464              	# sieve_extend.c:1257:     counter_t tuning_results=0;
1257:sieve_extend.c ****     counter_t tuning_result_index=0;
 16465              		.loc 1 1257 15 view .LVU5575
 16466 06eb 4531ED   		xor	r13d, r13d	# tuning_results
 16467              	# sieve_extend.c:1255:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1255:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 16468              		.loc 1 1255 83 view .LVU5576
 16469 06ee 488D7801 		lea	rdi, 1[rax]	# _229,
 16470              	.LVL984:
1256:sieve_extend.c ****     counter_t tuning_results=0;
 16471              		.loc 1 1256 5 is_stmt 1 view .LVU5577
 16472              	# sieve_extend.c:1255:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1255:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 16473              		.loc 1 1255 254 is_stmt 0 view .LVU5578
 16474 06f2 B8001000 		mov	eax, 4096	# tmp356,
 16474      00
 16475 06f7 48F77424 		div	QWORD PTR 96[rsp]	# %sfp
 16475      60
 16476              	.LVL985:
 16477              	# sieve_extend.c:1255:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1255:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 16478              		.loc 1 1255 148 view .LVU5579
 16479 06fc 31D2     		xor	edx, edx	# tmp365
 16480              	# sieve_extend.c:1256:     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_r
1256:sieve_extend.c ****     counter_t tuning_results=0;
 16481              		.loc 1 1256 41 view .LVU5580
 16482 06fe 480FAFC7 		imul	rax, rdi	# tmp361, _229
 16483              	.LVL986:
1256:sieve_extend.c ****     counter_t tuning_results=0;
 16484              		.loc 1 1256 41 view .LVU5581
 16485 0702 480FAFF8 		imul	rdi, rax	# tmp362, tmp361
 16486              	.LVL987:
 16487              	# sieve_extend.c:1255:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1255:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 16488              		.loc 1 1255 148 view .LVU5582
 16489 0706 B8000100 		mov	eax, 256	# tmp366,
 16489      00
 16490 070b 48F7B424 		div	QWORD PTR 128[rsp]	# %sfp
 16490      80000000 
 16491              	# sieve_extend.c:1255:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1255:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 16492              		.loc 1 1255 201 view .LVU5583
 16493 0713 4883C001 		add	rax, 1	# tmp371,
 16494              	# sieve_extend.c:1256:     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_r
1256:sieve_extend.c ****     counter_t tuning_results=0;
 16495              		.loc 1 1256 41 view .LVU5584
 16496 0717 480FAFF8 		imul	rdi, rax	# tmp372, tmp371
 16497 071b 48C1E708 		sal	rdi, 8	# tmp372,
 16498 071f E8000000 		call	malloc@PLT	#
 16498      00
 16499              	.LVL988:
1257:sieve_extend.c ****     counter_t tuning_result_index=0;
 16500              		.loc 1 1257 5 is_stmt 1 view .LVU5585
GAS LISTING /tmp/ccBvFgp2.s 			page 446


1258:sieve_extend.c ****     
 16501              		.loc 1 1258 5 view .LVU5586
1260:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16502              		.loc 1 1260 5 view .LVU5587
 16503              	.LBB966:
1260:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16504              		.loc 1 1260 10 view .LVU5588
1260:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16505              		.loc 1 1260 42 view .LVU5589
 16506              	.LBE966:
 16507              	# sieve_extend.c:1214:     double best_avg = 0;
1214:sieve_extend.c ****     best_blocksize_bits = 0;
 16508              		.loc 1 1214 12 is_stmt 0 view .LVU5590
 16509 0724 C5F157C9 		vxorpd	xmm1, xmm1, xmm1	# best_avg
 16510              	# sieve_extend.c:1217:     counter_t best_mediumstep_faster = 0;
1217:sieve_extend.c ****     counter_t best_vectorstep_faster = 0;
 16511              		.loc 1 1217 15 view .LVU5591
 16512 0728 48C74424 		mov	QWORD PTR 72[rsp], 0	# %sfp,
 16512      48000000 
 16512      00
 16513              	# sieve_extend.c:1216:     counter_t best_smallstep_faster = 0;
1216:sieve_extend.c ****     counter_t best_mediumstep_faster = 0;
 16514              		.loc 1 1216 15 view .LVU5592
 16515 0731 48C74424 		mov	QWORD PTR 64[rsp], 0	# %sfp,
 16515      40000000 
 16515      00
 16516              	# sieve_extend.c:1215:     best_blocksize_bits = 0;
1215:sieve_extend.c ****     counter_t best_smallstep_faster = 0;
 16517              		.loc 1 1215 25 view .LVU5593
 16518 073a 48C74424 		mov	QWORD PTR 56[rsp], 0	# %sfp,
 16518      38000000 
 16518      00
 16519              	.LBB996:
 16520              	# sieve_extend.c:1260:     for (counter_t smallstep_faster = 0; smallstep_faster <= WORD_SIZE/2; sm
1260:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16521              		.loc 1 1260 20 view .LVU5594
 16522 0743 48C74424 		mov	QWORD PTR 32[rsp], 0	# %sfp,
 16522      20000000 
 16522      00
 16523 074c 48894424 		mov	QWORD PTR 80[rsp], rax	# %sfp, tuning_result
 16523      50
 16524              	.LBE996:
 16525              	# sieve_extend.c:1214:     double best_avg = 0;
1214:sieve_extend.c ****     best_blocksize_bits = 0;
 16526              		.loc 1 1214 12 view .LVU5595
 16527 0751 C5FB114C 		vmovsd	QWORD PTR 40[rsp], xmm1	# %sfp, best_avg
 16527      2428
 16528              	.LVL989:
 16529              	.L1343:
 16530              	.LBB997:
 16531              	.LBB967:
1261:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 16532              		.loc 1 1261 62 is_stmt 1 view .LVU5596
 16533              	.LBB968:
 16534              	.LBB969:
 16535              	# sieve_extend.c:1263:                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_
1263:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
GAS LISTING /tmp/ccBvFgp2.s 			page 447


 16536              		.loc 1 1263 32 is_stmt 0 view .LVU5597
 16537 0757 4C8B7424 		mov	r14, QWORD PTR 32[rsp]	# mediumstep_faster, %sfp
 16537      20
 16538              	.LVL990:
 16539 075c 0F1F4000 		.p2align 4
 16540              		.p2align 3
 16541              	.L1355:
1263:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16542              		.loc 1 1263 32 view .LVU5598
 16543              	.LBE969:
1262:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 16544              		.loc 1 1262 67 is_stmt 1 view .LVU5599
 16545              	.LBB992:
 16546              	# sieve_extend.c:1263:                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_
1263:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16547              		.loc 1 1263 32 is_stmt 0 view .LVU5600
 16548 0760 4C897424 		mov	QWORD PTR 48[rsp], r14	# %sfp, mediumstep_faster
 16548      30
 16549              	.LVL991:
 16550 0765 66662E0F 		.p2align 4
 16550      1F840000 
 16550      000000
 16551              		.p2align 3
 16552              	.L1353:
1263:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16553              		.loc 1 1263 50 is_stmt 1 view .LVU5601
 16554              	.LBB970:
 16555              	# sieve_extend.c:1264:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1264:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16556              		.loc 1 1264 36 is_stmt 0 view .LVU5602
 16557 0770 C744245C 		mov	DWORD PTR 92[rsp], 6	# %sfp,
 16557      06000000 
 16558              	.LBE970:
 16559              	# sieve_extend.c:1263:                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_
1263:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16560              		.loc 1 1263 32 view .LVU5603
 16561 0778 41BC0001 		mov	r12d, 256	# blocksize_kb,
 16561      0000
 16562              	.LVL992:
 16563 077e 6690     		.p2align 4
 16564              		.p2align 3
 16565              	.L1351:
 16566              	.LBB990:
1264:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16567              		.loc 1 1264 49 is_stmt 1 view .LVU5604
 16568 0780 4F8D546D 		lea	r10, 0[r13+r13*2]	# tmp399,
 16568      00
 16569              	# sieve_extend.c:1264:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1264:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16570              		.loc 1 1264 134 is_stmt 0 view .LVU5605
 16571 0785 4C89E3   		mov	rbx, r12	# ivtmp.684, blocksize_kb
 16572 0788 4C8B5C24 		mov	r11, QWORD PTR 80[rsp]	# tuning_result, %sfp
 16572      50
 16573              	# sieve_extend.c:1264:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1264:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16574              		.loc 1 1264 36 view .LVU5606
 16575 078d 31ED     		xor	ebp, ebp	# free_bits
GAS LISTING /tmp/ccBvFgp2.s 			page 448


 16576 078f 49C1E205 		sal	r10, 5	# tmp400,
 16577              	# sieve_extend.c:1264:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1264:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16578              		.loc 1 1264 134 view .LVU5607
 16579 0793 48C1E30D 		sal	rbx, 13	# ivtmp.684,
 16580 0797 4F8D3C13 		lea	r15, [r11+r10]	# ivtmp.683,
 16581 079b EB44     		jmp	.L1349	#
 16582              	.LVL993:
 16583 079d 0F1F00   		.p2align 4,,7
 16584              		.p2align 3
 16585              	.L1346:
 16586              	.LBB971:
1281:sieve_extend.c ****                             best_blocksize_bits = blocksize_bits;
 16587              		.loc 1 1281 29 is_stmt 1 view .LVU5608
1282:sieve_extend.c ****                             best_smallstep_faster = smallstep_faster;
 16588              		.loc 1 1282 29 view .LVU5609
1283:sieve_extend.c ****                             best_mediumstep_faster = mediumstep_faster;
 16589              		.loc 1 1283 29 view .LVU5610
1284:sieve_extend.c ****                             best_vectorstep_faster = vectorstep_faster;
 16590              		.loc 1 1284 29 view .LVU5611
1285:sieve_extend.c ****                             if (option_verboselevel >=2) { printf(".(>)"); tuning_result_print(tuni
 16591              		.loc 1 1285 29 view .LVU5612
1286:sieve_extend.c ****                         }
 16592              		.loc 1 1286 29 view .LVU5613
 16593              	# sieve_extend.c:1286:                             if (option_verboselevel >=2) { printf(".(>)"); t
1286:sieve_extend.c ****                         }
 16594              		.loc 1 1286 32 is_stmt 0 view .LVU5614
 16595 07a0 837C2458 		cmp	DWORD PTR 88[rsp], 1	# %sfp,
 16595      01
 16596 07a5 0F8FDD03 		jg	.L1456	#,
 16596      0000
1286:sieve_extend.c ****                         }
 16597              		.loc 1 1286 32 view .LVU5615
 16598 07ab 488B7424 		mov	rsi, QWORD PTR 32[rsp]	# smallstep_faster, %sfp
 16598      20
 16599 07b0 4C897424 		mov	QWORD PTR 72[rsp], r14	# %sfp, mediumstep_faster
 16599      48
 16600              	# sieve_extend.c:1281:                             best_avg = tuning_result[tuning_result_index].av
1281:sieve_extend.c ****                             best_blocksize_bits = blocksize_bits;
 16601              		.loc 1 1281 38 view .LVU5616
 16602 07b5 C5FB115C 		vmovsd	QWORD PTR 40[rsp], xmm3	# %sfp, _253
 16602      2428
 16603              	# sieve_extend.c:1282:                             best_blocksize_bits = blocksize_bits;
1282:sieve_extend.c ****                             best_smallstep_faster = smallstep_faster;
 16604              		.loc 1 1282 49 view .LVU5617
 16605 07bb 48895C24 		mov	QWORD PTR 56[rsp], rbx	# %sfp, ivtmp.684
 16605      38
 16606 07c0 48897424 		mov	QWORD PTR 64[rsp], rsi	# %sfp, smallstep_faster
 16606      40
 16607              	.LVL994:
 16608              	.L1344:
1289:sieve_extend.c ****                     }
 16609              		.loc 1 1289 25 is_stmt 1 view .LVU5618
1289:sieve_extend.c ****                     }
 16610              		.loc 1 1289 25 is_stmt 0 view .LVU5619
 16611              	.LBE971:
1264:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
GAS LISTING /tmp/ccBvFgp2.s 			page 449


 16612              		.loc 1 1264 141 is_stmt 1 view .LVU5620
 16613              	# sieve_extend.c:1264:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1264:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16614              		.loc 1 1264 151 is_stmt 0 view .LVU5621
 16615 07c5 488B4C24 		mov	rcx, QWORD PTR 96[rsp]	# freebits_steps, %sfp
 16615      60
 16616 07ca 4983C760 		add	r15, 96	# ivtmp.683,
 16617 07ce 4801CD   		add	rbp, rcx	# free_bits, freebits_steps
 16618              	.LVL995:
1264:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16619              		.loc 1 1264 49 is_stmt 1 view .LVU5622
 16620 07d1 4829CB   		sub	rbx, rcx	# ivtmp.684, freebits_steps
 16621              	.LVL996:
 16622              	# sieve_extend.c:1264:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1264:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16623              		.loc 1 1264 21 is_stmt 0 view .LVU5623
 16624 07d4 4881FDFF 		cmp	rbp, 4095	# free_bits,
 16624      0F0000
 16625 07db 0F87E700 		ja	.L1345	#,
 16625      0000
 16626              	.LVL997:
 16627              	.L1349:
 16628              	.LBB988:
1265:sieve_extend.c **** 
 16629              		.loc 1 1265 25 is_stmt 1 view .LVU5624
1268:sieve_extend.c ****                         tuning_result[tuning_result_index].maxints = maxints;
 16630              		.loc 1 1268 25 view .LVU5625
 16631              	# sieve_extend.c:1275:                         tuning_result[tuning_result_index].smallstep_faster 
1275:sieve_extend.c ****                         tuning_result[tuning_result_index].mediumstep_faster = mediumstep_faster;
 16632              		.loc 1 1275 77 is_stmt 0 view .LVU5626
 16633 07e1 488B7C24 		mov	rdi, QWORD PTR 32[rsp]	# smallstep_faster, %sfp
 16633      20
 16634 07e6 4C89EE   		mov	rsi, r13	# tuning_results, tuning_results
 16635              	# sieve_extend.c:1269:                         tuning_result[tuning_result_index].maxints = maxints
1269:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_duration = sample_duration;
 16636              		.loc 1 1269 68 view .LVU5627
 16637 07e9 488B4C24 		mov	rcx, QWORD PTR 120[rsp]	# option_maxFactor.42_64, %sfp
 16637      78
 16638              	# sieve_extend.c:1268:                         tuning_results++;
1268:sieve_extend.c ****                         tuning_result[tuning_result_index].maxints = maxints;
 16639              		.loc 1 1268 39 view .LVU5628
 16640 07ee 4983C501 		add	r13, 1	# tuning_results,
 16641              	.LVL998:
1269:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_duration = sample_duration;
 16642              		.loc 1 1269 25 is_stmt 1 view .LVU5629
 16643              	# sieve_extend.c:1271:                         tuning_result[tuning_result_index].sample_max = samp
1271:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_kb = blocksize_kb;
 16644              		.loc 1 1271 71 is_stmt 0 view .LVU5630
 16645 07f2 4C8B4C24 		mov	r9, QWORD PTR 104[rsp]	# sample_max, %sfp
 16645      68
 16646              	# sieve_extend.c:1277:                         tuning_result[tuning_result_index].vectorstep_faster
1277:sieve_extend.c ****                         tune_benchmark(tuning_result, tuning_result_index);
 16647              		.loc 1 1277 78 view .LVU5631
 16648 07f7 488B4424 		mov	rax, QWORD PTR 48[rsp]	# vectorstep_faster, %sfp
 16648      30
 16649              	# sieve_extend.c:1275:                         tuning_result[tuning_result_index].smallstep_faster 
1275:sieve_extend.c ****                         tuning_result[tuning_result_index].mediumstep_faster = mediumstep_faster;
GAS LISTING /tmp/ccBvFgp2.s 			page 450


 16650              		.loc 1 1275 77 view .LVU5632
 16651 07fc 49897F20 		mov	QWORD PTR 32[r15], rdi	# MEM[base: _500, offset: 32B], smallstep_faster
 16652              	# sieve_extend.c:1278:                         tune_benchmark(tuning_result, tuning_result_index);
1278:sieve_extend.c **** 
 16653              		.loc 1 1278 25 view .LVU5633
 16654 0800 488B7C24 		mov	rdi, QWORD PTR 80[rsp]	#, %sfp
 16654      50
 16655              	# sieve_extend.c:1270:                         tuning_result[tuning_result_index].sample_duration =
1270:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_max = sample_max;
 16656              		.loc 1 1270 76 view .LVU5634
 16657 0805 C5FB1064 		vmovsd	xmm4, QWORD PTR 112[rsp]	# sample_duration, %sfp
 16657      2470
 16658              	# sieve_extend.c:1269:                         tuning_result[tuning_result_index].maxints = maxints
1269:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_duration = sample_duration;
 16659              		.loc 1 1269 68 view .LVU5635
 16660 080b 49890F   		mov	QWORD PTR [r15], rcx	# MEM[base: _500, offset: 0B], option_maxFactor.42_64
1270:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_max = sample_max;
 16661              		.loc 1 1270 25 is_stmt 1 view .LVU5636
 16662              	# sieve_extend.c:1271:                         tuning_result[tuning_result_index].sample_max = samp
1271:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_kb = blocksize_kb;
 16663              		.loc 1 1271 71 is_stmt 0 view .LVU5637
 16664 080e 4D894F38 		mov	QWORD PTR 56[r15], r9	# MEM[base: _500, offset: 56B], sample_max
 16665              	# sieve_extend.c:1272:                         tuning_result[tuning_result_index].blocksize_kb = bl
1272:sieve_extend.c ****                         tuning_result[tuning_result_index].free_bits = free_bits;
 16666              		.loc 1 1272 73 view .LVU5638
 16667 0812 4D896710 		mov	QWORD PTR 16[r15], r12	# MEM[base: _500, offset: 16B], blocksize_kb
 16668              	# sieve_extend.c:1273:                         tuning_result[tuning_result_index].free_bits = free_
1273:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_bits = blocksize_bits;
 16669              		.loc 1 1273 70 view .LVU5639
 16670 0816 49896F18 		mov	QWORD PTR 24[r15], rbp	# MEM[base: _500, offset: 24B], free_bits
 16671              	# sieve_extend.c:1274:                         tuning_result[tuning_result_index].blocksize_bits = 
1274:sieve_extend.c ****                         tuning_result[tuning_result_index].smallstep_faster = smallstep_faster;
 16672              		.loc 1 1274 75 view .LVU5640
 16673 081a 49895F08 		mov	QWORD PTR 8[r15], rbx	# MEM[base: _500, offset: 8B], ivtmp.684
 16674              	# sieve_extend.c:1276:                         tuning_result[tuning_result_index].mediumstep_faster
1276:sieve_extend.c ****                         tuning_result[tuning_result_index].vectorstep_faster = vectorstep_faster;
 16675              		.loc 1 1276 78 view .LVU5641
 16676 081e 4D897728 		mov	QWORD PTR 40[r15], r14	# MEM[base: _500, offset: 40B], mediumstep_faster
 16677              	# sieve_extend.c:1277:                         tuning_result[tuning_result_index].vectorstep_faster
1277:sieve_extend.c ****                         tune_benchmark(tuning_result, tuning_result_index);
 16678              		.loc 1 1277 78 view .LVU5642
 16679 0822 49894730 		mov	QWORD PTR 48[r15], rax	# MEM[base: _500, offset: 48B], vectorstep_faster
 16680              	# sieve_extend.c:1270:                         tuning_result[tuning_result_index].sample_duration =
1270:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_max = sample_max;
 16681              		.loc 1 1270 76 view .LVU5643
 16682 0826 C4C17B11 		vmovsd	QWORD PTR 64[r15], xmm4	# MEM[base: _500, offset: 64B], sample_duration
 16682      6740
1271:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_kb = blocksize_kb;
 16683              		.loc 1 1271 25 is_stmt 1 view .LVU5644
1272:sieve_extend.c ****                         tuning_result[tuning_result_index].free_bits = free_bits;
 16684              		.loc 1 1272 25 view .LVU5645
1273:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_bits = blocksize_bits;
 16685              		.loc 1 1273 25 view .LVU5646
1274:sieve_extend.c ****                         tuning_result[tuning_result_index].smallstep_faster = smallstep_faster;
 16686              		.loc 1 1274 25 view .LVU5647
1275:sieve_extend.c ****                         tuning_result[tuning_result_index].mediumstep_faster = mediumstep_faster;
 16687              		.loc 1 1275 25 view .LVU5648
GAS LISTING /tmp/ccBvFgp2.s 			page 451


1276:sieve_extend.c ****                         tuning_result[tuning_result_index].vectorstep_faster = vectorstep_faster;
 16688              		.loc 1 1276 25 view .LVU5649
1277:sieve_extend.c ****                         tune_benchmark(tuning_result, tuning_result_index);
 16689              		.loc 1 1277 25 view .LVU5650
1278:sieve_extend.c **** 
 16690              		.loc 1 1278 25 view .LVU5651
 16691 082c E8000000 		call	tune_benchmark	#
 16691      00
 16692              	.LVL999:
1280:sieve_extend.c ****                             best_avg = tuning_result[tuning_result_index].avg;
 16693              		.loc 1 1280 25 view .LVU5652
 16694              	# sieve_extend.c:1280:                         if ( tuning_result[tuning_result_index].avg > best_a
1280:sieve_extend.c ****                             best_avg = tuning_result[tuning_result_index].avg;
 16695              		.loc 1 1280 64 is_stmt 0 view .LVU5653
 16696 0831 C4C17B10 		vmovsd	xmm3, QWORD PTR 88[r15]	# _253, MEM[base: _500, offset: 88B]
 16696      5F58
 16697              	# sieve_extend.c:1280:                         if ( tuning_result[tuning_result_index].avg > best_a
1280:sieve_extend.c ****                             best_avg = tuning_result[tuning_result_index].avg;
 16698              		.loc 1 1280 28 view .LVU5654
 16699 0837 C5F92F5C 		vcomisd	xmm3, QWORD PTR 40[rsp]	# _253, %sfp
 16699      2428
 16700 083d 0F875DFF 		ja	.L1346	#,
 16700      FFFF
 16701              	.L1347:
1288:sieve_extend.c ****                         tuning_result_index++;
 16702              		.loc 1 1288 25 is_stmt 1 view .LVU5655
 16703              	# sieve_extend.c:1288:                         if (option_verboselevel >= 3) { printf("...."); tuni
1288:sieve_extend.c ****                         tuning_result_index++;
 16704              		.loc 1 1288 28 is_stmt 0 view .LVU5656
 16705 0843 837C2458 		cmp	DWORD PTR 88[rsp], 2	# %sfp,
 16705      02
 16706 0848 0F8E77FF 		jle	.L1344	#,
 16706      FFFF
1288:sieve_extend.c ****                         tuning_result_index++;
 16707              		.loc 1 1288 57 is_stmt 1 view .LVU5657
 16708              	.LVL1000:
 16709              	.LBB972:
 16710              	.LBI972:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16711              		.loc 3 105 1 view .LVU5658
 16712              	.LBB973:
 16713              		.loc 3 107 3 view .LVU5659
 16714              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16715              		.loc 3 107 10 is_stmt 0 view .LVU5660
 16716 084e 488D3500 		lea	rsi, .LC52[rip]	#,
 16716      000000
 16717 0855 BF010000 		mov	edi, 1	#,
 16717      00
 16718 085a 31C0     		xor	eax, eax	#
 16719 085c E8000000 		call	__printf_chk@PLT	#
 16719      00
 16720              	.LVL1001:
 16721              		.loc 3 107 10 view .LVU5661
 16722              	.LBE973:
 16723              	.LBE972:
1288:sieve_extend.c ****                         tuning_result_index++;
 16724              		.loc 1 1288 73 is_stmt 1 view .LVU5662
GAS LISTING /tmp/ccBvFgp2.s 			page 452


 16725              	.LBB974:
 16726              	.LBI974:
1203:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
 16727              		.loc 1 1203 20 view .LVU5663
 16728              	.LBB975:
1204:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
 16729              		.loc 1 1204 5 view .LVU5664
 16730              	.LBB976:
 16731              	.LBI976:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16732              		.loc 3 105 1 view .LVU5665
 16733              	.LBB977:
 16734              		.loc 3 107 3 view .LVU5666
 16735              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16736              		.loc 3 107 10 is_stmt 0 view .LVU5667
 16737 0861 498B7F38 		mov	rdi, QWORD PTR 56[r15]	# MEM[base: _500, offset: 56B], MEM[base: _500, offset: 56B]
 16738 0865 C4C17B10 		vmovsd	xmm0, QWORD PTR 80[r15]	# MEM[base: _500, offset: 80B], MEM[base: _500, offset: 80B]
 16738      4750
 16739 086b 498B4F10 		mov	rcx, QWORD PTR 16[r15]	# MEM[base: _500, offset: 16B], MEM[base: _500, offset: 16B]
 16740 086f 498B5708 		mov	rdx, QWORD PTR 8[r15]	# MEM[base: _500, offset: 8B], MEM[base: _500, offset: 8B]
 16741 0873 48897C24 		mov	QWORD PTR 24[rsp], rdi	#, MEM[base: _500, offset: 56B]
 16741      18
 16742 0878 BF010000 		mov	edi, 1	#,
 16742      00
 16743 087d 498B4748 		mov	rax, QWORD PTR 72[r15]	# MEM[base: _500, offset: 72B], MEM[base: _500, offset: 72B]
 16744 0881 48894424 		mov	QWORD PTR 16[rsp], rax	#, MEM[base: _500, offset: 72B]
 16744      10
 16745 0886 B8030000 		mov	eax, 3	#,
 16745      00
 16746 088b 498B7730 		mov	rsi, QWORD PTR 48[r15]	# MEM[base: _500, offset: 48B], MEM[base: _500, offset: 48B]
 16747 088f 48897424 		mov	QWORD PTR 8[rsp], rsi	#, MEM[base: _500, offset: 48B]
 16747      08
 16748 0894 488D3500 		lea	rsi, .LC51[rip]	#,
 16748      000000
 16749 089b 4D8B4728 		mov	r8, QWORD PTR 40[r15]	# MEM[base: _500, offset: 40B], MEM[base: _500, offset: 40B]
 16750 089f 4C890424 		mov	QWORD PTR [rsp], r8	#, MEM[base: _500, offset: 40B]
 16751 08a3 4D8B4F20 		mov	r9, QWORD PTR 32[r15]	#, MEM[base: _500, offset: 32B]
 16752 08a7 4D8B4718 		mov	r8, QWORD PTR 24[r15]	#, MEM[base: _500, offset: 24B]
 16753 08ab C4C17B10 		vmovsd	xmm2, QWORD PTR 88[r15]	#, MEM[base: _500, offset: 88B]
 16753      5758
 16754 08b1 C4C17B10 		vmovsd	xmm1, QWORD PTR 64[r15]	#, MEM[base: _500, offset: 64B]
 16754      4F40
 16755 08b7 E8000000 		call	__printf_chk@PLT	#
 16755      00
 16756              	.LVL1002:
 16757              		.loc 3 107 10 view .LVU5668
 16758              	.LBE977:
 16759              	.LBE976:
 16760              	# sieve_extend.c:1209: }
1209:sieve_extend.c **** 
 16761              		.loc 1 1209 1 view .LVU5669
 16762 08bc E904FFFF 		jmp	.L1344	#
 16762      FF
 16763              	.LVL1003:
 16764              		.p2align 4,,7
 16765 08c1 0F1F8000 		.p2align 3
 16765      000000
GAS LISTING /tmp/ccBvFgp2.s 			page 453


 16766              	.L1345:
1209:sieve_extend.c **** 
 16767              		.loc 1 1209 1 view .LVU5670
 16768              	.LBE975:
 16769              	.LBE974:
 16770              	.LBE988:
 16771              	.LBE990:
1263:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16772              		.loc 1 1263 67 is_stmt 1 view .LVU5671
 16773              	# sieve_extend.c:1263:                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_
1263:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16774              		.loc 1 1263 80 is_stmt 0 view .LVU5672
 16775 08c8 49D1EC   		shr	r12	# blocksize_kb
 16776              	.LVL1004:
1263:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16777              		.loc 1 1263 50 is_stmt 1 view .LVU5673
 16778              	# sieve_extend.c:1263:                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_
1263:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16779              		.loc 1 1263 17 is_stmt 0 view .LVU5674
 16780 08cb 836C245C 		sub	DWORD PTR 92[rsp], 1	# %sfp,
 16780      01
 16781 08d0 0F85AAFE 		jne	.L1351	#,
 16781      FFFF
 16782              	.LBE992:
1262:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 16783              		.loc 1 1262 101 is_stmt 1 view .LVU5675
 16784              	# sieve_extend.c:1262:             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep
1262:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 16785              		.loc 1 1262 119 is_stmt 0 view .LVU5676
 16786 08d6 4C8BA424 		mov	r12, QWORD PTR 128[rsp]	# vectorstep_faster_steps, %sfp
 16786      80000000 
 16787              	.LVL1005:
1262:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 16788              		.loc 1 1262 119 view .LVU5677
 16789 08de 4C016424 		add	QWORD PTR 48[rsp], r12	# %sfp, vectorstep_faster_steps
 16789      30
 16790              	.LVL1006:
1262:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 16791              		.loc 1 1262 119 view .LVU5678
 16792 08e3 488B5C24 		mov	rbx, QWORD PTR 48[rsp]	# vectorstep_faster, %sfp
 16792      30
 16793              	.LVL1007:
1262:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 16794              		.loc 1 1262 67 is_stmt 1 view .LVU5679
 16795              	# sieve_extend.c:1262:             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep
1262:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 16796              		.loc 1 1262 13 is_stmt 0 view .LVU5680
 16797 08e8 4881FB00 		cmp	rbx, 256	# vectorstep_faster,
 16797      010000
 16798 08ef 0F867BFE 		jbe	.L1353	#,
 16798      FFFF
 16799              	.LBE968:
1261:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 16800              		.loc 1 1261 94 is_stmt 1 view .LVU5681
 16801              	# sieve_extend.c:1261:         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_fast
1261:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 16802              		.loc 1 1261 112 is_stmt 0 view .LVU5682
GAS LISTING /tmp/ccBvFgp2.s 			page 454


 16803 08f5 4C03B424 		add	r14, QWORD PTR 136[rsp]	# mediumstep_faster, %sfp
 16803      88000000 
 16804              	.LVL1008:
1261:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 16805              		.loc 1 1261 62 is_stmt 1 view .LVU5683
 16806              	# sieve_extend.c:1261:         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_fast
1261:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 16807              		.loc 1 1261 9 is_stmt 0 view .LVU5684
 16808 08fd 4983FE40 		cmp	r14, 64	# mediumstep_faster,
 16809 0901 0F8659FE 		jbe	.L1355	#,
 16809      FFFF
 16810              	.LBE967:
1260:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16811              		.loc 1 1260 75 is_stmt 1 view .LVU5685
 16812              	# sieve_extend.c:1260:     for (counter_t smallstep_faster = 0; smallstep_faster <= WORD_SIZE/2; sm
1260:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16813              		.loc 1 1260 92 is_stmt 0 view .LVU5686
 16814 0907 4C8BB424 		mov	r14, QWORD PTR 136[rsp]	# smallstep_faster_steps, %sfp
 16814      88000000 
 16815              	.LVL1009:
1260:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16816              		.loc 1 1260 92 view .LVU5687
 16817 090f 4C017424 		add	QWORD PTR 32[rsp], r14	# %sfp, smallstep_faster_steps
 16817      20
 16818              	.LVL1010:
1260:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16819              		.loc 1 1260 92 view .LVU5688
 16820 0914 4C8B7C24 		mov	r15, QWORD PTR 32[rsp]	# smallstep_faster, %sfp
 16820      20
 16821              	.LVL1011:
1260:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16822              		.loc 1 1260 42 is_stmt 1 view .LVU5689
 16823              	# sieve_extend.c:1260:     for (counter_t smallstep_faster = 0; smallstep_faster <= WORD_SIZE/2; sm
1260:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16824              		.loc 1 1260 5 is_stmt 0 view .LVU5690
 16825 0919 4983FF20 		cmp	r15, 32	# smallstep_faster,
 16826 091d 0F8634FE 		jbe	.L1343	#,
 16826      FFFF
 16827 0923 4C8B7C24 		mov	r15, QWORD PTR 80[rsp]	# tuning_result, %sfp
 16827      50
 16828              	.LVL1012:
1260:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16829              		.loc 1 1260 5 view .LVU5691
 16830              	.LBE997:
1295:sieve_extend.c ****         printf("%ju results. Inital best blocksize: %ju; best smallstep %ju; best mediumstep %ju\n"
 16831              		.loc 1 1295 5 is_stmt 1 view .LVU5692
 16832              	# sieve_extend.c:1295:     if (option_verboselevel >= 2) {
1295:sieve_extend.c ****         printf("%ju results. Inital best blocksize: %ju; best smallstep %ju; best mediumstep %ju\n"
 16833              		.loc 1 1295 8 is_stmt 0 view .LVU5693
 16834 0928 837C2458 		cmp	DWORD PTR 88[rsp], 1	# %sfp,
 16834      01
 16835 092d 7E31     		jle	.L1356	#,
1296:sieve_extend.c ****         printf("Best options\n");
 16836              		.loc 1 1296 9 is_stmt 1 view .LVU5694
 16837              	.LVL1013:
 16838              	.LBB998:
 16839              	.LBI998:
GAS LISTING /tmp/ccBvFgp2.s 			page 455


 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16840              		.loc 3 105 1 view .LVU5695
 16841              	.LBB999:
 16842              		.loc 3 107 3 view .LVU5696
 16843              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16844              		.loc 3 107 10 is_stmt 0 view .LVU5697
 16845 092f 4C8B4C24 		mov	r9, QWORD PTR 72[rsp]	#, %sfp
 16845      48
 16846 0934 BF010000 		mov	edi, 1	#,
 16846      00
 16847 0939 4C8B4424 		mov	r8, QWORD PTR 64[rsp]	#, %sfp
 16847      40
 16848 093e 4C89EA   		mov	rdx, r13	#, tuning_results
 16849 0941 488B4C24 		mov	rcx, QWORD PTR 56[rsp]	#, %sfp
 16849      38
 16850 0946 488D3500 		lea	rsi, .LC53[rip]	#,
 16850      000000
 16851 094d 31C0     		xor	eax, eax	#
 16852 094f E8000000 		call	__printf_chk@PLT	#
 16852      00
 16853              	.LVL1014:
 16854              		.loc 3 107 10 view .LVU5698
 16855              	.LBE999:
 16856              	.LBE998:
1297:sieve_extend.c ****     }
 16857              		.loc 1 1297 9 is_stmt 1 view .LVU5699
 16858              	.LBB1000:
 16859              	.LBI1000:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16860              		.loc 3 105 1 view .LVU5700
 16861              	.LBB1001:
 16862              		.loc 3 107 3 view .LVU5701
 16863              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16864              		.loc 3 107 10 is_stmt 0 view .LVU5702
 16865 0954 488D3D00 		lea	rdi, .LC54[rip]	#,
 16865      000000
 16866 095b E8000000 		call	puts@PLT	#
 16866      00
 16867              	.LVL1015:
 16868              	.L1356:
 16869              		.loc 3 107 10 view .LVU5703
 16870              	.LBE1001:
 16871              	.LBE1000:
 16872              	.LBB1002:
 16873              	# sieve_extend.c:1307:                 for (counter_t tuning_result_index=0; tuning_result_index<mi
1307:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 16874              		.loc 1 1307 75 view .LVU5704
 16875 0960 4C8B7424 		mov	r14, QWORD PTR 104[rsp]	# sample_max, %sfp
 16875      68
 16876              	.LBE1002:
 16877              	.LBB1011:
 16878              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16879              		.loc 1 1315 24 view .LVU5705
 16880 0965 4531E4   		xor	r12d, r12d	# step
 16881              	.LVL1016:
 16882              	.L1361:
GAS LISTING /tmp/ccBvFgp2.s 			page 456


1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16883              		.loc 1 1315 24 view .LVU5706
 16884              	.LBE1011:
1300:sieve_extend.c ****         qsort(tuning_result, (size_t)tuning_results, sizeof(tuning_result_type), compare_tuning_res
 16885              		.loc 1 1300 11 is_stmt 1 view .LVU5707
 16886 0968 4983FD04 		cmp	r13, 4	# tuning_results,
 16887 096c 0F861404 		jbe	.L1457	#,
 16887      0000
1301:sieve_extend.c ****         step++;
 16888              		.loc 1 1301 9 view .LVU5708
 16889 0972 488D0D00 		lea	rcx, compare_tuning_result[rip]	#,
 16889      000000
 16890 0979 BA600000 		mov	edx, 96	#,
 16890      00
 16891 097e 4C89EE   		mov	rsi, r13	#, tuning_results
 16892 0981 4C89FF   		mov	rdi, r15	#, tuning_result
 16893 0984 E8000000 		call	qsort@PLT	#
 16893      00
 16894              	.LVL1017:
1302:sieve_extend.c ****         if (option_verboselevel >= 2) {
 16895              		.loc 1 1302 9 view .LVU5709
 16896              	# sieve_extend.c:1302:         step++;
1302:sieve_extend.c ****         if (option_verboselevel >= 2) {
 16897              		.loc 1 1302 13 is_stmt 0 view .LVU5710
 16898 0989 4983C401 		add	r12, 1	# step,
 16899              	.LVL1018:
1303:sieve_extend.c ****             tuning_result_index = 0;
 16900              		.loc 1 1303 9 is_stmt 1 view .LVU5711
 16901              	# sieve_extend.c:1303:         if (option_verboselevel >= 2) {
1303:sieve_extend.c ****             tuning_result_index = 0;
 16902              		.loc 1 1303 12 is_stmt 0 view .LVU5712
 16903 098d 837C2458 		cmp	DWORD PTR 88[rsp], 1	# %sfp,
 16903      01
 16904 0992 0F8F7D02 		jg	.L1357	#,
 16904      0000
 16905              	.L1359:
1313:sieve_extend.c **** 
 16906              		.loc 1 1313 9 is_stmt 1 view .LVU5713
 16907              	# sieve_extend.c:1313:         tuning_results = tuning_results / 2;
1313:sieve_extend.c **** 
 16908              		.loc 1 1313 24 is_stmt 0 view .LVU5714
 16909 0998 49D1ED   		shr	r13	# tuning_results
 16910              	.LVL1019:
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16911              		.loc 1 1315 9 is_stmt 1 view .LVU5715
 16912              	.LBB1012:
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16913              		.loc 1 1315 14 view .LVU5716
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16914              		.loc 1 1315 29 view .LVU5717
 16915              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16916              		.loc 1 1315 24 is_stmt 0 view .LVU5718
 16917 099b 31ED     		xor	ebp, ebp	# i
 16918 099d 4D89E8   		mov	r8, r13	# tmp487, tuning_results
 16919 09a0 498D5F38 		lea	rbx, 56[r15]	# ivtmp.665,
 16920 09a4 4183E007 		and	r8d, 7	# tmp487,
GAS LISTING /tmp/ccBvFgp2.s 			page 457


 16921 09a8 0F84D200 		je	.L1358	#,
 16921      0000
 16922 09ae 4983F801 		cmp	r8, 1	# tmp487,
 16923 09b2 0F84A900 		je	.L1416	#,
 16923      0000
 16924 09b8 4983F802 		cmp	r8, 2	# tmp487,
 16925 09bc 0F848900 		je	.L1417	#,
 16925      0000
 16926 09c2 4983F803 		cmp	r8, 3	# tmp487,
 16927 09c6 746D     		je	.L1418	#,
 16928 09c8 4983F804 		cmp	r8, 4	# tmp487,
 16929 09cc 7451     		je	.L1419	#,
 16930 09ce 4983F805 		cmp	r8, 5	# tmp487,
 16931 09d2 7435     		je	.L1420	#,
 16932 09d4 4983F806 		cmp	r8, 6	# tmp487,
 16933 09d8 7419     		je	.L1421	#,
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16934              		.loc 1 1316 13 is_stmt 1 view .LVU5719
 16935 09da 31F6     		xor	esi, esi	#
 16936 09dc 4C89FF   		mov	rdi, r15	#, tuning_result
 16937 09df E8000000 		call	tune_benchmark	#
 16937      00
 16938              	.LVL1020:
1317:sieve_extend.c ****         }
 16939              		.loc 1 1317 13 view .LVU5720
 16940              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16941              		.loc 1 1315 48 is_stmt 0 view .LVU5721
 16942 09e4 BD010000 		mov	ebp, 1	# i,
 16942      00
 16943              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 16944              		.loc 1 1317 41 view .LVU5722
 16945 09e9 4C0133   		add	QWORD PTR [rbx], r14	# MEM[base: _116, offset: 0B], sample_max
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16946              		.loc 1 1315 47 is_stmt 1 view .LVU5723
 16947              	.LVL1021:
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16948              		.loc 1 1315 29 view .LVU5724
 16949 09ec 498D9F98 		lea	rbx, 152[r15]	# ivtmp.665,
 16949      000000
 16950              	.L1421:
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16951              		.loc 1 1316 13 view .LVU5725
 16952 09f3 4889EE   		mov	rsi, rbp	#, i
 16953 09f6 4C89FF   		mov	rdi, r15	#, tuning_result
 16954 09f9 E8000000 		call	tune_benchmark	#
 16954      00
 16955              	.LVL1022:
1317:sieve_extend.c ****         }
 16956              		.loc 1 1317 13 view .LVU5726
 16957              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16958              		.loc 1 1315 48 is_stmt 0 view .LVU5727
 16959 09fe 4883C501 		add	rbp, 1	# i,
 16960              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
GAS LISTING /tmp/ccBvFgp2.s 			page 458


 16961              		.loc 1 1317 41 view .LVU5728
 16962 0a02 4C0133   		add	QWORD PTR [rbx], r14	# MEM[base: _116, offset: 0B], sample_max
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16963              		.loc 1 1315 47 is_stmt 1 view .LVU5729
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16964              		.loc 1 1315 29 view .LVU5730
 16965 0a05 4883C360 		add	rbx, 96	# ivtmp.665,
 16966              	.L1420:
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16967              		.loc 1 1316 13 view .LVU5731
 16968 0a09 4889EE   		mov	rsi, rbp	#, i
 16969 0a0c 4C89FF   		mov	rdi, r15	#, tuning_result
 16970 0a0f E8000000 		call	tune_benchmark	#
 16970      00
 16971              	.LVL1023:
1317:sieve_extend.c ****         }
 16972              		.loc 1 1317 13 view .LVU5732
 16973              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16974              		.loc 1 1315 48 is_stmt 0 view .LVU5733
 16975 0a14 4883C501 		add	rbp, 1	# i,
 16976              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 16977              		.loc 1 1317 41 view .LVU5734
 16978 0a18 4C0133   		add	QWORD PTR [rbx], r14	# MEM[base: _116, offset: 0B], sample_max
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16979              		.loc 1 1315 47 is_stmt 1 view .LVU5735
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16980              		.loc 1 1315 29 view .LVU5736
 16981 0a1b 4883C360 		add	rbx, 96	# ivtmp.665,
 16982              	.L1419:
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16983              		.loc 1 1316 13 view .LVU5737
 16984 0a1f 4889EE   		mov	rsi, rbp	#, i
 16985 0a22 4C89FF   		mov	rdi, r15	#, tuning_result
 16986 0a25 E8000000 		call	tune_benchmark	#
 16986      00
 16987              	.LVL1024:
1317:sieve_extend.c ****         }
 16988              		.loc 1 1317 13 view .LVU5738
 16989              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16990              		.loc 1 1315 48 is_stmt 0 view .LVU5739
 16991 0a2a 4883C501 		add	rbp, 1	# i,
 16992              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 16993              		.loc 1 1317 41 view .LVU5740
 16994 0a2e 4C0133   		add	QWORD PTR [rbx], r14	# MEM[base: _116, offset: 0B], sample_max
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16995              		.loc 1 1315 47 is_stmt 1 view .LVU5741
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16996              		.loc 1 1315 29 view .LVU5742
 16997 0a31 4883C360 		add	rbx, 96	# ivtmp.665,
 16998              	.L1418:
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16999              		.loc 1 1316 13 view .LVU5743
 17000 0a35 4889EE   		mov	rsi, rbp	#, i
GAS LISTING /tmp/ccBvFgp2.s 			page 459


 17001 0a38 4C89FF   		mov	rdi, r15	#, tuning_result
 17002 0a3b E8000000 		call	tune_benchmark	#
 17002      00
 17003              	.LVL1025:
1317:sieve_extend.c ****         }
 17004              		.loc 1 1317 13 view .LVU5744
 17005              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17006              		.loc 1 1315 48 is_stmt 0 view .LVU5745
 17007 0a40 4883C501 		add	rbp, 1	# i,
 17008              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17009              		.loc 1 1317 41 view .LVU5746
 17010 0a44 4C0133   		add	QWORD PTR [rbx], r14	# MEM[base: _116, offset: 0B], sample_max
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17011              		.loc 1 1315 47 is_stmt 1 view .LVU5747
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17012              		.loc 1 1315 29 view .LVU5748
 17013 0a47 4883C360 		add	rbx, 96	# ivtmp.665,
 17014              	.L1417:
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17015              		.loc 1 1316 13 view .LVU5749
 17016 0a4b 4889EE   		mov	rsi, rbp	#, i
 17017 0a4e 4C89FF   		mov	rdi, r15	#, tuning_result
 17018 0a51 E8000000 		call	tune_benchmark	#
 17018      00
 17019              	.LVL1026:
1317:sieve_extend.c ****         }
 17020              		.loc 1 1317 13 view .LVU5750
 17021              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17022              		.loc 1 1315 48 is_stmt 0 view .LVU5751
 17023 0a56 4883C501 		add	rbp, 1	# i,
 17024              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17025              		.loc 1 1317 41 view .LVU5752
 17026 0a5a 4C0133   		add	QWORD PTR [rbx], r14	# MEM[base: _116, offset: 0B], sample_max
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17027              		.loc 1 1315 47 is_stmt 1 view .LVU5753
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17028              		.loc 1 1315 29 view .LVU5754
 17029 0a5d 4883C360 		add	rbx, 96	# ivtmp.665,
 17030              	.L1416:
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17031              		.loc 1 1316 13 view .LVU5755
 17032 0a61 4889EE   		mov	rsi, rbp	#, i
 17033 0a64 4C89FF   		mov	rdi, r15	#, tuning_result
 17034              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17035              		.loc 1 1315 48 is_stmt 0 view .LVU5756
 17036 0a67 4883C501 		add	rbp, 1	# i,
 17037              	# sieve_extend.c:1316:             tune_benchmark(tuning_result, i);
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17038              		.loc 1 1316 13 view .LVU5757
 17039 0a6b E8000000 		call	tune_benchmark	#
 17039      00
 17040              	.LVL1027:
GAS LISTING /tmp/ccBvFgp2.s 			page 460


1317:sieve_extend.c ****         }
 17041              		.loc 1 1317 13 is_stmt 1 view .LVU5758
 17042              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17043              		.loc 1 1317 41 is_stmt 0 view .LVU5759
 17044 0a70 4C0133   		add	QWORD PTR [rbx], r14	# MEM[base: _116, offset: 0B], sample_max
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17045              		.loc 1 1315 47 is_stmt 1 view .LVU5760
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17046              		.loc 1 1315 29 view .LVU5761
 17047 0a73 4883C360 		add	rbx, 96	# ivtmp.665,
 17048              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17049              		.loc 1 1315 9 is_stmt 0 view .LVU5762
 17050 0a77 4939ED   		cmp	r13, rbp	# tuning_results, i
 17051 0a7a 0F84E8FE 		je	.L1361	#,
 17051      FFFF
 17052              	.L1358:
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17053              		.loc 1 1316 13 is_stmt 1 view .LVU5763
 17054 0a80 4889EE   		mov	rsi, rbp	#, i
 17055 0a83 4C89FF   		mov	rdi, r15	#, tuning_result
 17056 0a86 E8000000 		call	tune_benchmark	#
 17056      00
 17057              	.LVL1028:
1317:sieve_extend.c ****         }
 17058              		.loc 1 1317 13 view .LVU5764
 17059 0a8b 4C8D5360 		lea	r10, 96[rbx]	# tmp489,
 17060              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17061              		.loc 1 1317 41 is_stmt 0 view .LVU5765
 17062 0a8f 4C0133   		add	QWORD PTR [rbx], r14	# MEM[base: _116, offset: 0B], sample_max
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17063              		.loc 1 1315 47 is_stmt 1 view .LVU5766
 17064              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17065              		.loc 1 1315 48 is_stmt 0 view .LVU5767
 17066 0a92 488D7501 		lea	rsi, 1[rbp]	# tmp488,
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17067              		.loc 1 1315 29 is_stmt 1 view .LVU5768
 17068              	# sieve_extend.c:1316:             tune_benchmark(tuning_result, i);
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17069              		.loc 1 1316 13 is_stmt 0 view .LVU5769
 17070 0a96 4C89FF   		mov	rdi, r15	#, tuning_result
 17071 0a99 4C895424 		mov	QWORD PTR 32[rsp], r10	# %sfp, tmp489
 17071      20
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17072              		.loc 1 1316 13 is_stmt 1 view .LVU5770
 17073 0a9e E8000000 		call	tune_benchmark	#
 17073      00
 17074              	.LVL1029:
1317:sieve_extend.c ****         }
 17075              		.loc 1 1317 13 view .LVU5771
 17076              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17077              		.loc 1 1317 41 is_stmt 0 view .LVU5772
 17078 0aa3 4C8B5C24 		mov	r11, QWORD PTR 32[rsp]	# tmp489, %sfp
GAS LISTING /tmp/ccBvFgp2.s 			page 461


 17078      20
 17079 0aa8 4C8D8BC0 		lea	r9, 192[rbx]	# ivtmp.665,
 17079      000000
 17080              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17081              		.loc 1 1315 48 view .LVU5773
 17082 0aaf 488D7502 		lea	rsi, 2[rbp]	# i,
 17083              	# sieve_extend.c:1316:             tune_benchmark(tuning_result, i);
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17084              		.loc 1 1316 13 view .LVU5774
 17085 0ab3 4C89FF   		mov	rdi, r15	#, tuning_result
 17086 0ab6 4C894C24 		mov	QWORD PTR 32[rsp], r9	# %sfp, ivtmp.665
 17086      20
 17087              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17088              		.loc 1 1317 41 view .LVU5775
 17089 0abb 4D0133   		add	QWORD PTR [r11], r14	# MEM[base: _116, offset: 0B], sample_max
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17090              		.loc 1 1315 47 is_stmt 1 view .LVU5776
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17091              		.loc 1 1315 29 view .LVU5777
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17092              		.loc 1 1316 13 view .LVU5778
 17093 0abe E8000000 		call	tune_benchmark	#
 17093      00
 17094              	.LVL1030:
1317:sieve_extend.c ****         }
 17095              		.loc 1 1317 13 view .LVU5779
 17096              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17097              		.loc 1 1317 41 is_stmt 0 view .LVU5780
 17098 0ac3 488B7C24 		mov	rdi, QWORD PTR 32[rsp]	# ivtmp.665, %sfp
 17098      20
 17099 0ac8 488D8320 		lea	rax, 288[rbx]	# ivtmp.665,
 17099      010000
 17100 0acf 48894424 		mov	QWORD PTR 32[rsp], rax	# %sfp, ivtmp.665
 17100      20
 17101              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17102              		.loc 1 1315 48 view .LVU5781
 17103 0ad4 488D7503 		lea	rsi, 3[rbp]	# i,
 17104              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17105              		.loc 1 1317 41 view .LVU5782
 17106 0ad8 4C0137   		add	QWORD PTR [rdi], r14	# MEM[base: _116, offset: 0B], sample_max
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17107              		.loc 1 1315 47 is_stmt 1 view .LVU5783
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17108              		.loc 1 1315 29 view .LVU5784
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17109              		.loc 1 1316 13 view .LVU5785
 17110 0adb 4C89FF   		mov	rdi, r15	#, tuning_result
 17111 0ade E8000000 		call	tune_benchmark	#
 17111      00
 17112              	.LVL1031:
1317:sieve_extend.c ****         }
 17113              		.loc 1 1317 13 view .LVU5786
GAS LISTING /tmp/ccBvFgp2.s 			page 462


 17114              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17115              		.loc 1 1317 41 is_stmt 0 view .LVU5787
 17116 0ae3 488B5424 		mov	rdx, QWORD PTR 32[rsp]	# ivtmp.665, %sfp
 17116      20
 17117 0ae8 488D8B80 		lea	rcx, 384[rbx]	# ivtmp.665,
 17117      010000
 17118              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17119              		.loc 1 1315 48 view .LVU5788
 17120 0aef 488D7504 		lea	rsi, 4[rbp]	# i,
 17121              	# sieve_extend.c:1316:             tune_benchmark(tuning_result, i);
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17122              		.loc 1 1316 13 view .LVU5789
 17123 0af3 4C89FF   		mov	rdi, r15	#, tuning_result
 17124 0af6 48894C24 		mov	QWORD PTR 32[rsp], rcx	# %sfp, ivtmp.665
 17124      20
 17125              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17126              		.loc 1 1317 41 view .LVU5790
 17127 0afb 4C0132   		add	QWORD PTR [rdx], r14	# MEM[base: _116, offset: 0B], sample_max
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17128              		.loc 1 1315 47 is_stmt 1 view .LVU5791
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17129              		.loc 1 1315 29 view .LVU5792
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17130              		.loc 1 1316 13 view .LVU5793
 17131 0afe E8000000 		call	tune_benchmark	#
 17131      00
 17132              	.LVL1032:
1317:sieve_extend.c ****         }
 17133              		.loc 1 1317 13 view .LVU5794
 17134              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17135              		.loc 1 1317 41 is_stmt 0 view .LVU5795
 17136 0b03 488B7424 		mov	rsi, QWORD PTR 32[rsp]	# ivtmp.665, %sfp
 17136      20
 17137 0b08 4C8D83E0 		lea	r8, 480[rbx]	# ivtmp.665,
 17137      010000
 17138 0b0f 4C894424 		mov	QWORD PTR 32[rsp], r8	# %sfp, ivtmp.665
 17138      20
 17139              	# sieve_extend.c:1316:             tune_benchmark(tuning_result, i);
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17140              		.loc 1 1316 13 view .LVU5796
 17141 0b14 4C89FF   		mov	rdi, r15	#, tuning_result
 17142              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17143              		.loc 1 1317 41 view .LVU5797
 17144 0b17 4C0136   		add	QWORD PTR [rsi], r14	# MEM[base: _116, offset: 0B], sample_max
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17145              		.loc 1 1315 47 is_stmt 1 view .LVU5798
 17146              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17147              		.loc 1 1315 48 is_stmt 0 view .LVU5799
 17148 0b1a 488D7505 		lea	rsi, 5[rbp]	# i,
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17149              		.loc 1 1315 29 is_stmt 1 view .LVU5800
GAS LISTING /tmp/ccBvFgp2.s 			page 463


1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17150              		.loc 1 1316 13 view .LVU5801
 17151 0b1e E8000000 		call	tune_benchmark	#
 17151      00
 17152              	.LVL1033:
1317:sieve_extend.c ****         }
 17153              		.loc 1 1317 13 view .LVU5802
 17154              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17155              		.loc 1 1317 41 is_stmt 0 view .LVU5803
 17156 0b23 4C8B5424 		mov	r10, QWORD PTR 32[rsp]	# ivtmp.665, %sfp
 17156      20
 17157 0b28 4C8D9B40 		lea	r11, 576[rbx]	# ivtmp.665,
 17157      020000
 17158              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17159              		.loc 1 1315 48 view .LVU5804
 17160 0b2f 488D7506 		lea	rsi, 6[rbp]	# i,
 17161              	# sieve_extend.c:1316:             tune_benchmark(tuning_result, i);
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17162              		.loc 1 1316 13 view .LVU5805
 17163 0b33 4C89FF   		mov	rdi, r15	#, tuning_result
 17164 0b36 4C895C24 		mov	QWORD PTR 32[rsp], r11	# %sfp, ivtmp.665
 17164      20
 17165              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17166              		.loc 1 1317 41 view .LVU5806
 17167 0b3b 4D0132   		add	QWORD PTR [r10], r14	# MEM[base: _116, offset: 0B], sample_max
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17168              		.loc 1 1315 47 is_stmt 1 view .LVU5807
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17169              		.loc 1 1315 29 view .LVU5808
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17170              		.loc 1 1316 13 view .LVU5809
 17171 0b3e E8000000 		call	tune_benchmark	#
 17171      00
 17172              	.LVL1034:
1317:sieve_extend.c ****         }
 17173              		.loc 1 1317 13 view .LVU5810
 17174              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17175              		.loc 1 1317 41 is_stmt 0 view .LVU5811
 17176 0b43 4C8B4C24 		mov	r9, QWORD PTR 32[rsp]	# ivtmp.665, %sfp
 17176      20
 17177 0b48 488DBBA0 		lea	rdi, 672[rbx]	# ivtmp.665,
 17177      020000
 17178              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17179              		.loc 1 1315 48 view .LVU5812
 17180 0b4f 488D7507 		lea	rsi, 7[rbp]	# i,
 17181 0b53 4883C508 		add	rbp, 8	# i,
 17182 0b57 48897C24 		mov	QWORD PTR 32[rsp], rdi	# %sfp, ivtmp.665
 17182      20
 17183              	# sieve_extend.c:1316:             tune_benchmark(tuning_result, i);
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17184              		.loc 1 1316 13 view .LVU5813
 17185 0b5c 4C89FF   		mov	rdi, r15	#, tuning_result
GAS LISTING /tmp/ccBvFgp2.s 			page 464


 17186              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17187              		.loc 1 1317 41 view .LVU5814
 17188 0b5f 4D0131   		add	QWORD PTR [r9], r14	# MEM[base: _116, offset: 0B], sample_max
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17189              		.loc 1 1315 47 is_stmt 1 view .LVU5815
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17190              		.loc 1 1315 29 view .LVU5816
1316:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17191              		.loc 1 1316 13 view .LVU5817
 17192 0b62 4881C300 		add	rbx, 768	# ivtmp.665,
 17192      030000
 17193 0b69 E8000000 		call	tune_benchmark	#
 17193      00
 17194              	.LVL1035:
1317:sieve_extend.c ****         }
 17195              		.loc 1 1317 13 view .LVU5818
 17196              	# sieve_extend.c:1317:             tuning_result[i].sample_max += sample_max;
1317:sieve_extend.c ****         }
 17197              		.loc 1 1317 41 is_stmt 0 view .LVU5819
 17198 0b6e 488B4424 		mov	rax, QWORD PTR 32[rsp]	# ivtmp.665, %sfp
 17198      20
 17199 0b73 4C0130   		add	QWORD PTR [rax], r14	# MEM[base: _116, offset: 0B], sample_max
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17200              		.loc 1 1315 47 is_stmt 1 view .LVU5820
 17201              	.LVL1036:
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17202              		.loc 1 1315 29 view .LVU5821
 17203              	# sieve_extend.c:1315:         for (counter_t i=0; i<tuning_results; i++) {
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17204              		.loc 1 1315 9 is_stmt 0 view .LVU5822
 17205 0b76 4939ED   		cmp	r13, rbp	# tuning_results, i
 17206 0b79 0F8501FF 		jne	.L1358	#,
 17206      FFFF
 17207 0b7f E9E4FDFF 		jmp	.L1361	#
 17207      FF
 17208              	.LVL1037:
 17209              		.p2align 4,,7
 17210 0b84 0F1F4000 		.p2align 3
 17211              	.L1456:
1315:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17212              		.loc 1 1315 9 view .LVU5823
 17213              	.LBE1012:
 17214              	.LBB1013:
 17215              	.LBB995:
 17216              	.LBB994:
 17217              	.LBB993:
 17218              	.LBB991:
 17219              	.LBB989:
 17220              	.LBB978:
 17221              	.LBB979:
 17222              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17223              		.loc 3 107 10 view .LVU5824
 17224 0b88 488D3500 		lea	rsi, .LC50[rip]	#,
 17224      000000
 17225 0b8f BF010000 		mov	edi, 1	#,
 17225      00
GAS LISTING /tmp/ccBvFgp2.s 			page 465


 17226 0b94 C5FB115C 		vmovsd	QWORD PTR 40[rsp], xmm3	# %sfp, _253
 17226      2428
 17227              	.LBE979:
 17228              	.LBE978:
1286:sieve_extend.c ****                         }
 17229              		.loc 1 1286 60 is_stmt 1 view .LVU5825
 17230              	.LVL1038:
 17231              	.LBB981:
 17232              	.LBI978:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17233              		.loc 3 105 1 view .LVU5826
 17234              	.LBB980:
 17235              		.loc 3 107 3 view .LVU5827
 17236              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17237              		.loc 3 107 10 is_stmt 0 view .LVU5828
 17238 0b9a 31C0     		xor	eax, eax	#
 17239 0b9c E8000000 		call	__printf_chk@PLT	#
 17239      00
 17240              	.LVL1039:
 17241              		.loc 3 107 10 view .LVU5829
 17242              	.LBE980:
 17243              	.LBE981:
1286:sieve_extend.c ****                         }
 17244              		.loc 1 1286 76 is_stmt 1 view .LVU5830
 17245              	.LBB982:
 17246              	.LBI982:
1203:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
 17247              		.loc 1 1203 20 view .LVU5831
 17248              	.LBB983:
1204:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
 17249              		.loc 1 1204 5 view .LVU5832
 17250              	.LBB984:
 17251              	.LBI984:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17252              		.loc 3 105 1 view .LVU5833
 17253              	.LBB985:
 17254              		.loc 3 107 3 view .LVU5834
 17255              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17256              		.loc 3 107 10 is_stmt 0 view .LVU5835
 17257 0ba1 4D8B4738 		mov	r8, QWORD PTR 56[r15]	# MEM[base: _500, offset: 56B], MEM[base: _500, offset: 56B]
 17258 0ba5 488D3500 		lea	rsi, .LC51[rip]	#,
 17258      000000
 17259 0bac 498B5708 		mov	rdx, QWORD PTR 8[r15]	# MEM[base: _500, offset: 8B], MEM[base: _500, offset: 8B]
 17260 0bb0 BF010000 		mov	edi, 1	#,
 17260      00
 17261 0bb5 C4C17B10 		vmovsd	xmm0, QWORD PTR 80[r15]	# MEM[base: _500, offset: 80B], MEM[base: _500, offset: 80B]
 17261      4750
 17262 0bbb B8030000 		mov	eax, 3	#,
 17262      00
 17263 0bc0 498B4F10 		mov	rcx, QWORD PTR 16[r15]	# MEM[base: _500, offset: 16B], MEM[base: _500, offset: 16B]
 17264 0bc4 4C894424 		mov	QWORD PTR 24[rsp], r8	#, MEM[base: _500, offset: 56B]
 17264      18
 17265 0bc9 4D8B5748 		mov	r10, QWORD PTR 72[r15]	# MEM[base: _500, offset: 72B], MEM[base: _500, offset: 72B]
 17266 0bcd 4C895424 		mov	QWORD PTR 16[rsp], r10	#, MEM[base: _500, offset: 72B]
 17266      10
 17267 0bd2 4D8B5F30 		mov	r11, QWORD PTR 48[r15]	# MEM[base: _500, offset: 48B], MEM[base: _500, offset: 48B]
 17268 0bd6 4C895C24 		mov	QWORD PTR 8[rsp], r11	#, MEM[base: _500, offset: 48B]
GAS LISTING /tmp/ccBvFgp2.s 			page 466


 17268      08
 17269 0bdb 4D8B4F28 		mov	r9, QWORD PTR 40[r15]	# MEM[base: _500, offset: 40B], MEM[base: _500, offset: 40B]
 17270 0bdf 4C890C24 		mov	QWORD PTR [rsp], r9	#, MEM[base: _500, offset: 40B]
 17271 0be3 4D8B4F20 		mov	r9, QWORD PTR 32[r15]	#, MEM[base: _500, offset: 32B]
 17272 0be7 4D8B4718 		mov	r8, QWORD PTR 24[r15]	#, MEM[base: _500, offset: 24B]
 17273 0beb C4C17B10 		vmovsd	xmm2, QWORD PTR 88[r15]	#, MEM[base: _500, offset: 88B]
 17273      5758
 17274 0bf1 C4C17B10 		vmovsd	xmm1, QWORD PTR 64[r15]	#, MEM[base: _500, offset: 64B]
 17274      4F40
 17275 0bf7 E8000000 		call	__printf_chk@PLT	#
 17275      00
 17276              	.LVL1040:
 17277              		.loc 3 107 10 view .LVU5836
 17278              	.LBE985:
 17279              	.LBE984:
 17280              	# sieve_extend.c:1209: }
1209:sieve_extend.c **** 
 17281              		.loc 1 1209 1 view .LVU5837
 17282 0bfc 488B5424 		mov	rdx, QWORD PTR 32[rsp]	# smallstep_faster, %sfp
 17282      20
 17283 0c01 4C897424 		mov	QWORD PTR 72[rsp], r14	# %sfp, mediumstep_faster
 17283      48
 17284              	.LBE983:
 17285              	.LBE982:
 17286              	# sieve_extend.c:1282:                             best_blocksize_bits = blocksize_bits;
1282:sieve_extend.c ****                             best_smallstep_faster = smallstep_faster;
 17287              		.loc 1 1282 49 view .LVU5838
 17288 0c06 48895C24 		mov	QWORD PTR 56[rsp], rbx	# %sfp, ivtmp.684
 17288      38
 17289              	.LBB987:
 17290              	.LBB986:
 17291              	# sieve_extend.c:1209: }
1209:sieve_extend.c **** 
 17292              		.loc 1 1209 1 view .LVU5839
 17293 0c0b 48895424 		mov	QWORD PTR 64[rsp], rdx	# %sfp, smallstep_faster
 17293      40
 17294 0c10 E92EFCFF 		jmp	.L1347	#
 17294      FF
 17295              	.LVL1041:
 17296              	.L1357:
1209:sieve_extend.c **** 
 17297              		.loc 1 1209 1 view .LVU5840
 17298              	.LBE986:
 17299              	.LBE987:
 17300              	.LBE989:
 17301              	.LBE991:
 17302              	.LBE993:
 17303              	.LBE994:
 17304              	.LBE995:
 17305              	.LBE1013:
1304:sieve_extend.c ****             printf("(%ju) ",(uintmax_t)step); tuning_result_print(tuning_result[tuning_result_index
 17306              		.loc 1 1304 13 is_stmt 1 view .LVU5841
1305:sieve_extend.c ****             if (option_verboselevel >= 3) {
 17307              		.loc 1 1305 13 view .LVU5842
 17308              	.LBB1014:
 17309              	.LBI1014:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
GAS LISTING /tmp/ccBvFgp2.s 			page 467


 17310              		.loc 3 105 1 view .LVU5843
 17311              	.LBB1015:
 17312              		.loc 3 107 3 view .LVU5844
 17313              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17314              		.loc 3 107 10 is_stmt 0 view .LVU5845
 17315 0c15 4C89E2   		mov	rdx, r12	#, step
 17316 0c18 488D3500 		lea	rsi, .LC55[rip]	#,
 17316      000000
 17317 0c1f BF010000 		mov	edi, 1	#,
 17317      00
 17318 0c24 31C0     		xor	eax, eax	#
 17319 0c26 E8000000 		call	__printf_chk@PLT	#
 17319      00
 17320              	.LVL1042:
 17321              		.loc 3 107 10 view .LVU5846
 17322              	.LBE1015:
 17323              	.LBE1014:
1305:sieve_extend.c ****             if (option_verboselevel >= 3) {
 17324              		.loc 1 1305 47 is_stmt 1 view .LVU5847
 17325              	.LBB1016:
 17326              	.LBI1016:
1203:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
 17327              		.loc 1 1203 20 view .LVU5848
 17328              	.LBB1017:
1204:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
 17329              		.loc 1 1204 5 view .LVU5849
 17330              	.LBB1018:
 17331              	.LBI1018:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17332              		.loc 3 105 1 view .LVU5850
 17333              	.LBB1019:
 17334              		.loc 3 107 3 view .LVU5851
 17335              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17336              		.loc 3 107 10 is_stmt 0 view .LVU5852
 17337 0c2b 498B5F38 		mov	rbx, QWORD PTR 56[r15]	# MEM[(struct tuning_result_type *)tuning_result_239 + 56B], MEM[(struc
 17338 0c2f 488D3500 		lea	rsi, .LC51[rip]	#,
 17338      000000
 17339 0c36 C4C17B10 		vmovsd	xmm0, QWORD PTR 80[r15]	# MEM[(struct tuning_result_type *)tuning_result_239 + 80B], MEM[(s
 17339      4750
 17340 0c3c BF010000 		mov	edi, 1	#,
 17340      00
 17341 0c41 498B4F10 		mov	rcx, QWORD PTR 16[r15]	# MEM[(struct tuning_result_type *)tuning_result_239 + 16B], MEM[(struc
 17342 0c45 B8030000 		mov	eax, 3	#,
 17342      00
 17343 0c4a 498B5708 		mov	rdx, QWORD PTR 8[r15]	# MEM[(struct tuning_result_type *)tuning_result_239 + 8B], MEM[(struct 
 17344 0c4e 48895C24 		mov	QWORD PTR 24[rsp], rbx	#, MEM[(struct tuning_result_type *)tuning_result_239 + 56B]
 17344      18
 17345 0c53 4D8B5748 		mov	r10, QWORD PTR 72[r15]	# MEM[(struct tuning_result_type *)tuning_result_239 + 72B], MEM[(struc
 17346 0c57 4C895424 		mov	QWORD PTR 16[rsp], r10	#, MEM[(struct tuning_result_type *)tuning_result_239 + 72B]
 17346      10
 17347 0c5c 4D8B5F30 		mov	r11, QWORD PTR 48[r15]	# MEM[(struct tuning_result_type *)tuning_result_239 + 48B], MEM[(struc
 17348 0c60 4C895C24 		mov	QWORD PTR 8[rsp], r11	#, MEM[(struct tuning_result_type *)tuning_result_239 + 48B]
 17348      08
 17349 0c65 4D8B4F28 		mov	r9, QWORD PTR 40[r15]	# MEM[(struct tuning_result_type *)tuning_result_239 + 40B], MEM[(struct
 17350 0c69 4C890C24 		mov	QWORD PTR [rsp], r9	#, MEM[(struct tuning_result_type *)tuning_result_239 + 40B]
 17351 0c6d 4D8B4F20 		mov	r9, QWORD PTR 32[r15]	#, MEM[(struct tuning_result_type *)tuning_result_239 + 32B]
 17352 0c71 4D8B4718 		mov	r8, QWORD PTR 24[r15]	#, MEM[(struct tuning_result_type *)tuning_result_239 + 24B]
GAS LISTING /tmp/ccBvFgp2.s 			page 468


 17353 0c75 C4C17B10 		vmovsd	xmm2, QWORD PTR 88[r15]	#, MEM[(struct tuning_result_type *)tuning_result_239 + 88B]
 17353      5758
 17354 0c7b C4C17B10 		vmovsd	xmm1, QWORD PTR 64[r15]	#, MEM[(struct tuning_result_type *)tuning_result_239 + 64B]
 17354      4F40
 17355 0c81 E8000000 		call	__printf_chk@PLT	#
 17355      00
 17356              	.LVL1043:
 17357              		.loc 3 107 10 view .LVU5853
 17358              	.LBE1019:
 17359              	.LBE1018:
 17360              	.LBE1017:
 17361              	.LBE1016:
1306:sieve_extend.c ****                 for (counter_t tuning_result_index=0; tuning_result_index<min(10,tuning_results); t
 17362              		.loc 1 1306 13 is_stmt 1 view .LVU5854
 17363              	# sieve_extend.c:1306:             if (option_verboselevel >= 3) {
1306:sieve_extend.c ****                 for (counter_t tuning_result_index=0; tuning_result_index<min(10,tuning_results); t
 17364              		.loc 1 1306 16 is_stmt 0 view .LVU5855
 17365 0c86 837C2458 		cmp	DWORD PTR 88[rsp], 2	# %sfp,
 17365      02
 17366 0c8b 0F8407FD 		je	.L1359	#,
 17366      FFFF
 17367 0c91 498D5F08 		lea	rbx, 8[r15]	# ivtmp.671,
 17368              	.LBB1020:
 17369              	# sieve_extend.c:1307:                 for (counter_t tuning_result_index=0; tuning_result_index<mi
1307:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 17370              		.loc 1 1307 32 view .LVU5856
 17371 0c95 31ED     		xor	ebp, ebp	# tuning_result_index
 17372              	.L1360:
 17373              	.LVL1044:
1308:sieve_extend.c ****                 }
 17374              		.loc 1 1308 21 is_stmt 1 view .LVU5857
 17375              	.LBB1003:
 17376              	.LBI1003:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17377              		.loc 3 105 1 view .LVU5858
 17378              	.LBB1004:
 17379              		.loc 3 107 3 view .LVU5859
 17380              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17381              		.loc 3 107 10 is_stmt 0 view .LVU5860
 17382 0c97 488D3500 		lea	rsi, .LC56[rip]	#,
 17382      000000
 17383 0c9e BF010000 		mov	edi, 1	#,
 17383      00
 17384 0ca3 31C0     		xor	eax, eax	#
 17385              	.LBE1004:
 17386              	.LBE1003:
 17387              	# sieve_extend.c:1307:                 for (counter_t tuning_result_index=0; tuning_result_index<mi
1307:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 17388              		.loc 1 1307 118 view .LVU5861
 17389 0ca5 4883C501 		add	rbp, 1	# tuning_result_index,
 17390              	.LVL1045:
 17391              	.LBB1006:
 17392              	.LBB1005:
 17393              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17394              		.loc 3 107 10 view .LVU5862
 17395 0ca9 E8000000 		call	__printf_chk@PLT	#
 17395      00
GAS LISTING /tmp/ccBvFgp2.s 			page 469


 17396              	.LVL1046:
 17397              		.loc 3 107 10 view .LVU5863
 17398              	.LBE1005:
 17399              	.LBE1006:
1308:sieve_extend.c ****                 }
 17400              		.loc 1 1308 36 is_stmt 1 view .LVU5864
 17401              	.LBB1007:
 17402              	.LBI1007:
1203:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
 17403              		.loc 1 1203 20 view .LVU5865
 17404              	.LBB1008:
1204:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
 17405              		.loc 1 1204 5 view .LVU5866
 17406              	.LBB1009:
 17407              	.LBI1009:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17408              		.loc 3 105 1 view .LVU5867
 17409              	.LBB1010:
 17410              		.loc 3 107 3 view .LVU5868
 17411              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17412              		.loc 3 107 10 is_stmt 0 view .LVU5869
 17413 0cae 488B7B30 		mov	rdi, QWORD PTR 48[rbx]	# MEM[base: _158, offset: 48B], MEM[base: _158, offset: 48B]
 17414 0cb2 4883C360 		add	rbx, 96	# ivtmp.671,
 17415 0cb6 488B4BA8 		mov	rcx, QWORD PTR -88[rbx]	# MEM[base: _158, offset: 8B], MEM[base: _158, offset: 8B]
 17416 0cba C5FB1043 		vmovsd	xmm0, QWORD PTR -24[rbx]	# MEM[base: _158, offset: 72B], MEM[base: _158, offset: 72B]
 17416      E8
 17417 0cbf 48897C24 		mov	QWORD PTR 24[rsp], rdi	#, MEM[base: _158, offset: 48B]
 17417      18
 17418 0cc4 BF010000 		mov	edi, 1	#,
 17418      00
 17419 0cc9 488B43E0 		mov	rax, QWORD PTR -32[rbx]	# MEM[base: _158, offset: 64B], MEM[base: _158, offset: 64B]
 17420 0ccd 48894424 		mov	QWORD PTR 16[rsp], rax	#, MEM[base: _158, offset: 64B]
 17420      10
 17421 0cd2 B8030000 		mov	eax, 3	#,
 17421      00
 17422 0cd7 488B53C8 		mov	rdx, QWORD PTR -56[rbx]	# MEM[base: _158, offset: 40B], MEM[base: _158, offset: 40B]
 17423 0cdb 48895424 		mov	QWORD PTR 8[rsp], rdx	#, MEM[base: _158, offset: 40B]
 17423      08
 17424 0ce0 488B73C0 		mov	rsi, QWORD PTR -64[rbx]	# MEM[base: _158, offset: 32B], MEM[base: _158, offset: 32B]
 17425 0ce4 48893424 		mov	QWORD PTR [rsp], rsi	#, MEM[base: _158, offset: 32B]
 17426 0ce8 488D3500 		lea	rsi, .LC51[rip]	#,
 17426      000000
 17427 0cef 4C8B4BB8 		mov	r9, QWORD PTR -72[rbx]	#, MEM[base: _158, offset: 24B]
 17428 0cf3 4C8B43B0 		mov	r8, QWORD PTR -80[rbx]	#, MEM[base: _158, offset: 16B]
 17429 0cf7 488B53A0 		mov	rdx, QWORD PTR -96[rbx]	#, MEM[base: _158, offset: 0B]
 17430 0cfb C5FB1053 		vmovsd	xmm2, QWORD PTR -16[rbx]	#, MEM[base: _158, offset: 80B]
 17430      F0
 17431 0d00 C5FB104B 		vmovsd	xmm1, QWORD PTR -40[rbx]	#, MEM[base: _158, offset: 56B]
 17431      D8
 17432 0d05 E8000000 		call	__printf_chk@PLT	#
 17432      00
 17433              	.LVL1047:
 17434              		.loc 3 107 10 view .LVU5870
 17435              	.LBE1010:
 17436              	.LBE1009:
 17437              	.LBE1008:
 17438              	.LBE1007:
GAS LISTING /tmp/ccBvFgp2.s 			page 470


1307:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 17439              		.loc 1 1307 99 is_stmt 1 view .LVU5871
1307:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 17440              		.loc 1 1307 55 view .LVU5872
 17441              	# sieve_extend.c:1307:                 for (counter_t tuning_result_index=0; tuning_result_index<mi
1307:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 17442              		.loc 1 1307 75 is_stmt 0 view .LVU5873
 17443 0d0a 4983FD0A 		cmp	r13, 10	# tuning_results,
 17444 0d0e B90A0000 		mov	ecx, 10	# tmp422,
 17444      00
 17445 0d13 490F46CD 		cmovbe	rcx, r13	# tuning_results,, tmp422
 17446              	# sieve_extend.c:1307:                 for (counter_t tuning_result_index=0; tuning_result_index<mi
1307:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 17447              		.loc 1 1307 17 view .LVU5874
 17448 0d17 4839CD   		cmp	rbp, rcx	# tuning_result_index, tmp422
 17449 0d1a 0F8277FF 		jb	.L1360	#,
 17449      FFFF
 17450 0d20 E973FCFF 		jmp	.L1359	#
 17450      FF
 17451              	.LVL1048:
 17452              	.L1451:
1307:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 17453              		.loc 1 1307 17 view .LVU5875
 17454              	.LBE1020:
 17455              	.LBE965:
 17456              	.LBE964:
 17457              	.LBE963:
1401:sieve_extend.c ****     }
 17458              		.loc 1 1401 39 is_stmt 1 view .LVU5876
 17459              	.LBB1039:
 17460              	.LBI1039:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17461              		.loc 3 105 1 view .LVU5877
 17462              	.LBB1040:
 17463              		.loc 3 107 3 view .LVU5878
 17464              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17465              		.loc 3 107 10 is_stmt 0 view .LVU5879
 17466 0d25 488D3D00 		lea	rdi, .LC48[rip]	#,
 17466      000000
 17467              	.LBE1040:
 17468              	.LBE1039:
 17469              	# sieve_extend.c:1404:     counter_t best_blocksize_bits = default_blocksize;
1404:sieve_extend.c ****     if (option_tunelevel) {
 17470              		.loc 1 1404 15 view .LVU5880
 17471 0d2c 41BE00FC 		mov	r14d, 261120	# best_result$blocksize_bits,
 17471      0300
 17472              	.LBB1042:
 17473              	.LBB1041:
 17474              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17475              		.loc 3 107 10 view .LVU5881
 17476 0d32 E8000000 		call	puts@PLT	#
 17476      00
 17477              	.LVL1049:
 17478              		.loc 3 107 10 view .LVU5882
 17479              	.LBE1041:
 17480              	.LBE1042:
1404:sieve_extend.c ****     if (option_tunelevel) {
GAS LISTING /tmp/ccBvFgp2.s 			page 471


 17481              		.loc 1 1404 5 is_stmt 1 view .LVU5883
1405:sieve_extend.c ****         tuning_result_type tuning_result = tune(option_tunelevel, option_maxFactor, option_verbosel
 17482              		.loc 1 1405 5 view .LVU5884
 17483              	# sieve_extend.c:1405:     if (option_tunelevel) {
1405:sieve_extend.c ****         tuning_result_type tuning_result = tune(option_tunelevel, option_maxFactor, option_verbosel
 17484              		.loc 1 1405 9 is_stmt 0 view .LVU5885
 17485 0d37 448B8424 		mov	r8d, DWORD PTR 156[rsp]	# option_tunelevel.40_62, option_tunelevel
 17485      9C000000 
 17486              	# sieve_extend.c:1405:     if (option_tunelevel) {
1405:sieve_extend.c ****         tuning_result_type tuning_result = tune(option_tunelevel, option_maxFactor, option_verbosel
 17487              		.loc 1 1405 8 view .LVU5886
 17488 0d3f 4585C0   		test	r8d, r8d	# option_tunelevel.40_62
 17489 0d42 0F857D01 		jne	.L1458	#,
 17489      0000
 17490              	.LVL1050:
 17491              	.L1338:
 17492              	.LBB1043:
1415:sieve_extend.c ****         counter_t passes = 0;
 17493              		.loc 1 1415 9 is_stmt 1 view .LVU5887
 17494              	# sieve_extend.c:1415:         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize
1415:sieve_extend.c ****         counter_t passes = 0;
 17495              		.loc 1 1415 12 is_stmt 0 view .LVU5888
 17496 0d48 83BC2498 		cmp	DWORD PTR 152[rsp], 0	# option_verboselevel,
 17496      00000000 
 17497 0d50 0F8E98F6 		jle	.L1365	#,
 17497      FFFF
1415:sieve_extend.c ****         counter_t passes = 0;
 17498              		.loc 1 1415 39 is_stmt 1 discriminator 1 view .LVU5889
 17499              	.LVL1051:
 17500              	.LBB949:
 17501              	.LBI949:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17502              		.loc 3 105 1 discriminator 1 view .LVU5890
 17503              	.LBB950:
 17504              		.loc 3 107 3 discriminator 1 view .LVU5891
 17505              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17506              		.loc 3 107 10 is_stmt 0 discriminator 1 view .LVU5892
 17507 0d56 4C8B0D00 		mov	r9, QWORD PTR global_VECTORSTEP_FASTER[rip]	#, global_VECTORSTEP_FASTER
 17507      000000
 17508 0d5d 4C89F2   		mov	rdx, r14	#, best_result$blocksize_bits
 17509 0d60 4C8B0500 		mov	r8, QWORD PTR global_MEDIUMSTEP_FASTER[rip]	#, global_MEDIUMSTEP_FASTER
 17509      000000
 17510 0d67 488D3500 		lea	rsi, .LC58[rip]	#,
 17510      000000
 17511 0d6e 488B0D00 		mov	rcx, QWORD PTR global_SMALLSTEP_FASTER[rip]	#, global_SMALLSTEP_FASTER
 17511      000000
 17512 0d75 BF010000 		mov	edi, 1	#,
 17512      00
 17513 0d7a 31C0     		xor	eax, eax	#
 17514 0d7c E8000000 		call	__printf_chk@PLT	#
 17514      00
 17515              	.LVL1052:
 17516 0d81 E968F6FF 		jmp	.L1365	#
 17516      FF
 17517              	.LVL1053:
 17518              	.L1457:
 17519              		.loc 3 107 10 discriminator 1 view .LVU5893
GAS LISTING /tmp/ccBvFgp2.s 			page 472


 17520              	.LBE950:
 17521              	.LBE949:
 17522              	.LBE1043:
 17523              	.LBB1044:
 17524              	.LBB1036:
 17525              	.LBB1033:
1321:sieve_extend.c ****     if (option_verboselevel >= 1) {
 17526              		.loc 1 1321 5 is_stmt 1 view .LVU5894
 17527              	# sieve_extend.c:1321:     tuning_result_type best_result = tuning_result[0];
1321:sieve_extend.c ****     if (option_verboselevel >= 1) {
 17528              		.loc 1 1321 24 is_stmt 0 view .LVU5895
 17529 0d86 4D8B7708 		mov	r14, QWORD PTR 8[r15]	# best_result$blocksize_bits, MEM[(struct tuning_result_type *)tuning_re
 17530              	.LVL1054:
 17531              	# sieve_extend.c:1322:     if (option_verboselevel >= 1) {
1322:sieve_extend.c ****         tuning_result_index = 0;
 17532              		.loc 1 1322 8 view .LVU5896
 17533 0d8a 837C2458 		cmp	DWORD PTR 88[rsp], 0	# %sfp,
 17533      00
 17534              	# sieve_extend.c:1321:     tuning_result_type best_result = tuning_result[0];
1321:sieve_extend.c ****     if (option_verboselevel >= 1) {
 17535              		.loc 1 1321 24 view .LVU5897
 17536 0d8f 4D8B6F20 		mov	r13, QWORD PTR 32[r15]	# best_result$smallstep_faster, MEM[(struct tuning_result_type *)tuning
 17537              	.LVL1055:
1321:sieve_extend.c ****     if (option_verboselevel >= 1) {
 17538              		.loc 1 1321 24 view .LVU5898
 17539 0d93 498B6F28 		mov	rbp, QWORD PTR 40[r15]	# best_result$mediumstep_faster, MEM[(struct tuning_result_type *)tunin
 17540 0d97 498B5F30 		mov	rbx, QWORD PTR 48[r15]	# best_result$vectorstep_faster, MEM[(struct tuning_result_type *)tunin
1322:sieve_extend.c ****         tuning_result_index = 0;
 17541              		.loc 1 1322 5 is_stmt 1 view .LVU5899
 17542              	# sieve_extend.c:1322:     if (option_verboselevel >= 1) {
1322:sieve_extend.c ****         tuning_result_index = 0;
 17543              		.loc 1 1322 8 is_stmt 0 view .LVU5900
 17544 0d9b 7E6E     		jle	.L1363	#,
1323:sieve_extend.c ****         printf(".Best result:"); tuning_result_print(tuning_result[tuning_result_index]);
 17545              		.loc 1 1323 9 is_stmt 1 view .LVU5901
 17546              	.LVL1056:
1324:sieve_extend.c ****     }
 17547              		.loc 1 1324 9 view .LVU5902
 17548              	.LBB1021:
 17549              	.LBI1021:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17550              		.loc 3 105 1 view .LVU5903
 17551              	.LBB1022:
 17552              		.loc 3 107 3 view .LVU5904
 17553              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17554              		.loc 3 107 10 is_stmt 0 view .LVU5905
 17555 0d9d 488D3500 		lea	rsi, .LC57[rip]	#,
 17555      000000
 17556 0da4 BF010000 		mov	edi, 1	#,
 17556      00
 17557 0da9 31C0     		xor	eax, eax	#
 17558 0dab E8000000 		call	__printf_chk@PLT	#
 17558      00
 17559              	.LVL1057:
 17560              		.loc 3 107 10 view .LVU5906
 17561              	.LBE1022:
 17562              	.LBE1021:
GAS LISTING /tmp/ccBvFgp2.s 			page 473


1324:sieve_extend.c ****     }
 17563              		.loc 1 1324 34 is_stmt 1 view .LVU5907
 17564              	.LBB1023:
 17565              	.LBI1023:
1203:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
 17566              		.loc 1 1203 20 view .LVU5908
 17567              	.LBB1024:
1204:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
 17568              		.loc 1 1204 5 view .LVU5909
 17569              	.LBB1025:
 17570              	.LBI1025:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17571              		.loc 3 105 1 view .LVU5910
 17572              	.LBB1026:
 17573              		.loc 3 107 3 view .LVU5911
 17574              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17575              		.loc 3 107 10 is_stmt 0 view .LVU5912
 17576 0db0 4D8B5738 		mov	r10, QWORD PTR 56[r15]	# MEM[(struct tuning_result_type *)tuning_result_239 + 56B], MEM[(struc
 17577 0db4 488D3500 		lea	rsi, .LC51[rip]	#,
 17577      000000
 17578 0dbb C4C17B10 		vmovsd	xmm0, QWORD PTR 80[r15]	# MEM[(struct tuning_result_type *)tuning_result_239 + 80B], MEM[(s
 17578      4750
 17579 0dc1 B8030000 		mov	eax, 3	#,
 17579      00
 17580 0dc6 498B4F10 		mov	rcx, QWORD PTR 16[r15]	# MEM[(struct tuning_result_type *)tuning_result_239 + 16B], MEM[(struc
 17581 0dca 498B5708 		mov	rdx, QWORD PTR 8[r15]	# MEM[(struct tuning_result_type *)tuning_result_239 + 8B], MEM[(struct 
 17582 0dce 4C895424 		mov	QWORD PTR 24[rsp], r10	#, MEM[(struct tuning_result_type *)tuning_result_239 + 56B]
 17582      18
 17583 0dd3 4D8B5F48 		mov	r11, QWORD PTR 72[r15]	# MEM[(struct tuning_result_type *)tuning_result_239 + 72B], MEM[(struc
 17584 0dd7 4C895C24 		mov	QWORD PTR 16[rsp], r11	#, MEM[(struct tuning_result_type *)tuning_result_239 + 72B]
 17584      10
 17585 0ddc 4D8B4F30 		mov	r9, QWORD PTR 48[r15]	# MEM[(struct tuning_result_type *)tuning_result_239 + 48B], MEM[(struct
 17586 0de0 4C894C24 		mov	QWORD PTR 8[rsp], r9	#, MEM[(struct tuning_result_type *)tuning_result_239 + 48B]
 17586      08
 17587 0de5 498B7F28 		mov	rdi, QWORD PTR 40[r15]	# MEM[(struct tuning_result_type *)tuning_result_239 + 40B], MEM[(struc
 17588 0de9 48893C24 		mov	QWORD PTR [rsp], rdi	#, MEM[(struct tuning_result_type *)tuning_result_239 + 40B]
 17589 0ded BF010000 		mov	edi, 1	#,
 17589      00
 17590 0df2 4D8B4F20 		mov	r9, QWORD PTR 32[r15]	#, MEM[(struct tuning_result_type *)tuning_result_239 + 32B]
 17591 0df6 4D8B4718 		mov	r8, QWORD PTR 24[r15]	#, MEM[(struct tuning_result_type *)tuning_result_239 + 24B]
 17592 0dfa C4C17B10 		vmovsd	xmm2, QWORD PTR 88[r15]	#, MEM[(struct tuning_result_type *)tuning_result_239 + 88B]
 17592      5758
 17593 0e00 C4C17B10 		vmovsd	xmm1, QWORD PTR 64[r15]	#, MEM[(struct tuning_result_type *)tuning_result_239 + 64B]
 17593      4F40
 17594 0e06 E8000000 		call	__printf_chk@PLT	#
 17594      00
 17595              	.LVL1058:
 17596              	.L1363:
 17597              		.loc 3 107 10 view .LVU5913
 17598              	.LBE1026:
 17599              	.LBE1025:
 17600              	.LBE1024:
 17601              	.LBE1023:
1327:sieve_extend.c ****     return best_result;
 17602              		.loc 1 1327 5 is_stmt 1 view .LVU5914
 17603 0e0b 4C89FF   		mov	rdi, r15	#, tuning_result
 17604 0e0e E8000000 		call	free@PLT	#
GAS LISTING /tmp/ccBvFgp2.s 			page 474


 17604      00
 17605              	.LVL1059:
1328:sieve_extend.c **** }
 17606              		.loc 1 1328 5 view .LVU5915
1328:sieve_extend.c **** }
 17607              		.loc 1 1328 5 is_stmt 0 view .LVU5916
 17608              	.LBE1033:
 17609              	.LBE1036:
1407:sieve_extend.c ****         global_MEDIUMSTEP_FASTER = tuning_result.mediumstep_faster;
 17610              		.loc 1 1407 9 is_stmt 1 view .LVU5917
 17611              	# sieve_extend.c:1407:         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
1407:sieve_extend.c ****         global_MEDIUMSTEP_FASTER = tuning_result.mediumstep_faster;
 17612              		.loc 1 1407 33 is_stmt 0 view .LVU5918
 17613 0e13 4C892D00 		mov	QWORD PTR global_SMALLSTEP_FASTER[rip], r13	# global_SMALLSTEP_FASTER, best_result$smallstep_f
 17613      000000
1408:sieve_extend.c ****         global_VECTORSTEP_FASTER = tuning_result.vectorstep_faster;
 17614              		.loc 1 1408 9 is_stmt 1 view .LVU5919
 17615              	.LBE1044:
 17616              	# sieve_extend.c:1414:     if (best_blocksize_bits > 0) {
1414:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 17617              		.loc 1 1414 8 is_stmt 0 view .LVU5920
 17618 0e1a 4D85F6   		test	r14, r14	# best_result$blocksize_bits
 17619              	.LBB1045:
 17620              	# sieve_extend.c:1408:         global_MEDIUMSTEP_FASTER = tuning_result.mediumstep_faster;
1408:sieve_extend.c ****         global_VECTORSTEP_FASTER = tuning_result.vectorstep_faster;
 17621              		.loc 1 1408 34 view .LVU5921
 17622 0e1d 48892D00 		mov	QWORD PTR global_MEDIUMSTEP_FASTER[rip], rbp	# global_MEDIUMSTEP_FASTER, best_result$mediumste
 17622      000000
1409:sieve_extend.c ****         best_blocksize_bits = tuning_result.blocksize_bits;
 17623              		.loc 1 1409 9 is_stmt 1 view .LVU5922
 17624              	# sieve_extend.c:1409:         global_VECTORSTEP_FASTER = tuning_result.vectorstep_faster;
1409:sieve_extend.c ****         best_blocksize_bits = tuning_result.blocksize_bits;
 17625              		.loc 1 1409 34 is_stmt 0 view .LVU5923
 17626 0e24 48891D00 		mov	QWORD PTR global_VECTORSTEP_FASTER[rip], rbx	# global_VECTORSTEP_FASTER, best_result$vectorste
 17626      000000
1410:sieve_extend.c ****     }
 17627              		.loc 1 1410 9 is_stmt 1 view .LVU5924
 17628              	.LVL1060:
1410:sieve_extend.c ****     }
 17629              		.loc 1 1410 9 is_stmt 0 view .LVU5925
 17630              	.LBE1045:
1413:sieve_extend.c ****     if (best_blocksize_bits > 0) {
 17631              		.loc 1 1413 5 is_stmt 1 view .LVU5926
1414:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 17632              		.loc 1 1414 5 view .LVU5927
 17633              	# sieve_extend.c:1414:     if (best_blocksize_bits > 0) {
1414:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 17634              		.loc 1 1414 8 is_stmt 0 view .LVU5928
 17635 0e2b 0F8411F7 		je	.L1364	#,
 17635      FFFF
 17636 0e31 E912FFFF 		jmp	.L1338	#
 17636      FF
 17637              	.LVL1061:
 17638              	.L1373:
1414:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 17639              		.loc 1 1414 8 view .LVU5929
 17640 0e36 488D3D00 		lea	rdi, CSWTCH.121[rip]	# tmp337,
GAS LISTING /tmp/ccBvFgp2.s 			page 475


 17640      000000
 17641 0e3d 4C8D0D00 		lea	r9, CSWTCH.122[rip]	# tmp339,
 17641      000000
 17642 0e44 488D2D00 		lea	rbp, CSWTCH.123[rip]	# tmp341,
 17642      000000
 17643              	.LVL1062:
1414:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 17644              		.loc 1 1414 8 view .LVU5930
 17645 0e4b 488D1D00 		lea	rbx, CSWTCH.124[rip]	# tmp343,
 17645      000000
 17646              	.LVL1063:
1414:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 17647              		.loc 1 1414 8 view .LVU5931
 17648 0e52 4A8B0CC7 		mov	rcx, QWORD PTR [rdi+r8*8]	# smallstep_faster_steps, CSWTCH.121
 17649 0e56 4F8B24C1 		mov	r12, QWORD PTR [r9+r8*8]	# vectorstep_faster_steps, CSWTCH.122
 17650 0e5a 4E8B7CC5 		mov	r15, QWORD PTR 0[rbp+r8*8]	# freebits_steps, CSWTCH.123
 17650      00
 17651              	.LVL1064:
1414:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 17652              		.loc 1 1414 8 view .LVU5932
 17653 0e5f C4A17B10 		vmovsd	xmm7, QWORD PTR [rbx+r8*8]	# sample_duration, CSWTCH.124
 17653      3CC3
 17654 0e65 48898C24 		mov	QWORD PTR 136[rsp], rcx	# %sfp, smallstep_faster_steps
 17654      88000000 
 17655 0e6d 4C89A424 		mov	QWORD PTR 128[rsp], r12	# %sfp, vectorstep_faster_steps
 17655      80000000 
 17656 0e75 4C897C24 		mov	QWORD PTR 96[rsp], r15	# %sfp, freebits_steps
 17656      60
 17657              	.LBB1046:
 17658              	# sieve_extend.c:1340:     for (int arg=1; arg < argc; arg++) {
1340:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 17659              		.loc 1 1340 14 view .LVU5933
 17660 0e7a 48C74424 		mov	QWORD PTR 104[rsp], 8	# %sfp,
 17660      68080000 
 17660      00
 17661 0e83 C5FB117C 		vmovsd	QWORD PTR 112[rsp], xmm7	# %sfp, sample_duration
 17661      2470
 17662              	.L1339:
 17663              	.LVL1065:
1340:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 17664              		.loc 1 1340 14 view .LVU5934
 17665              	.LBE1046:
 17666              	.LBB1047:
 17667              	.LBB1037:
 17668              	.LBB1034:
1254:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
 17669              		.loc 1 1254 5 is_stmt 1 view .LVU5935
 17670              	# sieve_extend.c:1254:     if (option_verboselevel >= 1) printf("Tuning..."); if (option_verboselev
1254:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
 17671              		.loc 1 1254 8 is_stmt 0 view .LVU5936
 17672 0e89 448B6C24 		mov	r13d, DWORD PTR 88[rsp]	# option_verboselevel.41_63, %sfp
 17672      58
 17673              	.LVL1066:
1254:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
 17674              		.loc 1 1254 8 view .LVU5937
 17675 0e8e 4585ED   		test	r13d, r13d	# option_verboselevel.41_63
 17676 0e91 0F8E43F8 		jle	.L1341	#,
GAS LISTING /tmp/ccBvFgp2.s 			page 476


 17676      FFFF
1254:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
 17677              		.loc 1 1254 35 is_stmt 1 view .LVU5938
 17678              	.LVL1067:
 17679              	.LBB1027:
 17680              	.LBI1027:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17681              		.loc 3 105 1 view .LVU5939
 17682              	.LBB1028:
 17683              		.loc 3 107 3 view .LVU5940
 17684              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17685              		.loc 3 107 10 is_stmt 0 view .LVU5941
 17686 0e97 31C0     		xor	eax, eax	#
 17687 0e99 488D3500 		lea	rsi, .LC49[rip]	#,
 17687      000000
 17688 0ea0 BF010000 		mov	edi, 1	#,
 17688      00
 17689              	.LBE1028:
 17690              	.LBE1027:
 17691              	# sieve_extend.c:1254:     if (option_verboselevel >= 1) printf("Tuning..."); if (option_verboselev
1254:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
 17692              		.loc 1 1254 59 view .LVU5942
 17693 0ea5 4489EB   		mov	ebx, r13d	# option_verboselevel.41_63, option_verboselevel.41_63
 17694              	.LBB1030:
 17695              	.LBB1029:
 17696              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17697              		.loc 3 107 10 view .LVU5943
 17698 0ea8 E8000000 		call	__printf_chk@PLT	#
 17698      00
 17699              	.LVL1068:
 17700              		.loc 3 107 10 view .LVU5944
 17701              	.LBE1029:
 17702              	.LBE1030:
1254:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
 17703              		.loc 1 1254 56 is_stmt 1 view .LVU5945
 17704              	# sieve_extend.c:1254:     if (option_verboselevel >= 1) printf("Tuning..."); if (option_verboselev
1254:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
 17705              		.loc 1 1254 59 is_stmt 0 view .LVU5946
 17706 0ead 83EB01   		sub	ebx, 1	# option_verboselevel.41_63,
 17707 0eb0 0F8424F8 		je	.L1341	#,
 17707      FFFF
1254:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
 17708              		.loc 1 1254 86 is_stmt 1 view .LVU5947
 17709              	.LVL1069:
 17710              	.LBB1031:
 17711              	.LBI1031:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17712              		.loc 3 105 1 view .LVU5948
 17713              	.LBB1032:
 17714              		.loc 3 107 3 view .LVU5949
 17715              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17716              		.loc 3 107 10 is_stmt 0 view .LVU5950
 17717 0eb6 BF0A0000 		mov	edi, 10	#,
 17717      00
 17718 0ebb E8000000 		call	putchar@PLT	#
 17718      00
 17719              	.LVL1070:
GAS LISTING /tmp/ccBvFgp2.s 			page 477


 17720 0ec0 E915F8FF 		jmp	.L1341	#
 17720      FF
 17721              	.LVL1071:
 17722              	.L1458:
 17723              		.loc 3 107 10 view .LVU5951
 17724              	.LBE1032:
 17725              	.LBE1031:
 17726              	.LBE1034:
 17727              	.LBE1037:
1406:sieve_extend.c ****         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
 17728              		.loc 1 1406 9 is_stmt 1 view .LVU5952
 17729              	# sieve_extend.c:1406:         tuning_result_type tuning_result = tune(option_tunelevel, option_max
1406:sieve_extend.c ****         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
 17730              		.loc 1 1406 44 is_stmt 0 view .LVU5953
 17731 0ec5 8B942498 		mov	edx, DWORD PTR 152[rsp]	# option_verboselevel.41_63, option_verboselevel
 17731      000000
 17732 0ecc 4183E801 		sub	r8d, 1	#,
 17733 0ed0 488BB424 		mov	rsi, QWORD PTR 160[rsp]	# option_maxFactor.42_64, option_maxFactor
 17733      A0000000 
 17734 0ed8 4183F802 		cmp	r8d, 2	# _212,
 17735 0edc 89542458 		mov	DWORD PTR 88[rsp], edx	# %sfp, option_verboselevel.41_63
 17736 0ee0 48897424 		mov	QWORD PTR 120[rsp], rsi	# %sfp, option_maxFactor.42_64
 17736      78
 17737              	.LVL1072:
 17738              	.LBB1038:
1211:sieve_extend.c ****     counter_t best_blocksize_bits = default_blocksize;
 17739              		.loc 1 1211 27 is_stmt 1 view .LVU5954
 17740              	.LBB1035:
1212:sieve_extend.c **** 
 17741              		.loc 1 1212 5 view .LVU5955
1214:sieve_extend.c ****     best_blocksize_bits = 0;
 17742              		.loc 1 1214 5 view .LVU5956
1215:sieve_extend.c ****     counter_t best_smallstep_faster = 0;
 17743              		.loc 1 1215 5 view .LVU5957
1216:sieve_extend.c ****     counter_t best_mediumstep_faster = 0;
 17744              		.loc 1 1216 5 view .LVU5958
1217:sieve_extend.c ****     counter_t best_vectorstep_faster = 0;
 17745              		.loc 1 1217 5 view .LVU5959
1218:sieve_extend.c ****     counter_t smallstep_faster_steps = 4;
 17746              		.loc 1 1218 5 view .LVU5960
1219:sieve_extend.c ****     counter_t mediumstep_faster_steps = 4;
 17747              		.loc 1 1219 5 view .LVU5961
1220:sieve_extend.c ****     counter_t vectorstep_faster_steps = 32;
 17748              		.loc 1 1220 5 view .LVU5962
1221:sieve_extend.c ****     counter_t freebits_steps = anticiped_cache_line_bytesize;
 17749              		.loc 1 1221 5 view .LVU5963
1222:sieve_extend.c ****     counter_t sample_max = default_sample_max;
 17750              		.loc 1 1222 5 view .LVU5964
1223:sieve_extend.c ****     double sample_duration = default_sample_duration;
 17751              		.loc 1 1223 5 view .LVU5965
1224:sieve_extend.c **** 
 17752              		.loc 1 1224 5 view .LVU5966
1227:sieve_extend.c ****         case 1:
 17753              		.loc 1 1227 5 view .LVU5967
 17754 0ee5 0F864BFF 		jbe	.L1373	#,
 17754      FFFF
 17755 0eeb C5FB1005 		vmovsd	xmm0, QWORD PTR .LC26[rip]	# sample_duration,
GAS LISTING /tmp/ccBvFgp2.s 			page 478


 17755      00000000 
 17756 0ef3 48C74424 		mov	QWORD PTR 104[rsp], 5	# %sfp,
 17756      68050000 
 17756      00
 17757 0efc 48C74424 		mov	QWORD PTR 96[rsp], 128	# %sfp,
 17757      60800000 
 17757      00
 17758 0f05 48C78424 		mov	QWORD PTR 128[rsp], 32	# %sfp,
 17758      80000000 
 17758      20000000 
 17759 0f11 48C78424 		mov	QWORD PTR 136[rsp], 4	# %sfp,
 17759      88000000 
 17759      04000000 
 17760 0f1d C5FB1144 		vmovsd	QWORD PTR 112[rsp], xmm0	# %sfp, sample_duration
 17760      2470
 17761 0f23 E961FFFF 		jmp	.L1339	#
 17761      FF
 17762              	.LVL1073:
 17763              	.L1444:
1227:sieve_extend.c ****         case 1:
 17764              		.loc 1 1227 5 is_stmt 0 view .LVU5968
 17765              	.LBE1035:
 17766              	.LBE1038:
 17767              	.LBE1047:
 17768              	.LBB1048:
1343:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option_verboselevel > 4) {
 17769              		.loc 1 1343 34 is_stmt 1 discriminator 1 view .LVU5969
 17770              	.LBB886:
 17771              	.LBI886:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17772              		.loc 3 98 1 discriminator 1 view .LVU5970
 17773              	.LBB887:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17774              		.loc 3 100 3 discriminator 1 view .LVU5971
 17775              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17776              		.loc 3 100 10 is_stmt 0 discriminator 1 view .LVU5972
 17777 0f28 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 17777      000000
 17778 0f2f BA1B0000 		mov	edx, 27	#,
 17778      00
 17779 0f34 BE010000 		mov	esi, 1	#,
 17779      00
 17780 0f39 488D3D00 		lea	rdi, .LC30[rip]	#,
 17780      000000
 17781 0f40 E8000000 		call	fwrite@PLT	#
 17781      00
 17782              	.LVL1074:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17783              		.loc 3 100 10 discriminator 1 view .LVU5973
 17784              	.LBE887:
 17785              	.LBE886:
1343:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option_verboselevel > 4) {
 17786              		.loc 1 1343 83 is_stmt 1 discriminator 1 view .LVU5974
 17787 0f45 E967F6FF 		jmp	.L1442	#
 17787      FF
 17788              	.L1322:
GAS LISTING /tmp/ccBvFgp2.s 			page 479


1353:sieve_extend.c ****             }
 17789              		.loc 1 1353 17 view .LVU5975
 17790              	.LVL1075:
 17791              	.LBB888:
 17792              	.LBI883:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17793              		.loc 3 98 1 view .LVU5976
 17794              	.LBB885:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17795              		.loc 3 100 3 view .LVU5977
 17796              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17797              		.loc 3 100 10 is_stmt 0 view .LVU5978
 17798 0f4a 498B0F   		mov	rcx, QWORD PTR [r15]	#, *_29
 17799 0f4d 488D1500 		lea	rdx, .LC37[rip]	#,
 17799      000000
 17800 0f54 E945F6FF 		jmp	.L1441	#
 17800      FF
 17801              	.LVL1076:
 17802              	.L1326:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17803              		.loc 3 100 10 view .LVU5979
 17804              	.LBE885:
 17805              	.LBE888:
1360:sieve_extend.c ****             }
 17806              		.loc 1 1360 17 is_stmt 1 view .LVU5980
 17807              	.LBB889:
 17808              	.LBI889:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17809              		.loc 3 98 1 view .LVU5981
 17810              	.LBB890:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17811              		.loc 3 100 3 view .LVU5982
 17812              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17813              		.loc 3 100 10 is_stmt 0 view .LVU5983
 17814 0f59 498B0F   		mov	rcx, QWORD PTR [r15]	#, *_41
 17815 0f5c 488D1500 		lea	rdx, .LC42[rip]	#,
 17815      000000
 17816 0f63 E936F6FF 		jmp	.L1441	#
 17816      FF
 17817              	.LVL1077:
 17818              	.L1447:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17819              		.loc 3 100 10 view .LVU5984
 17820              	.LBE890:
 17821              	.LBE889:
1351:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tunelevel > 4) {
 17822              		.loc 1 1351 34 is_stmt 1 discriminator 1 view .LVU5985
 17823              	.LBB891:
 17824              	.LBI891:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17825              		.loc 3 98 1 discriminator 1 view .LVU5986
 17826              	.LBB892:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17827              		.loc 3 100 3 discriminator 1 view .LVU5987
 17828              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
GAS LISTING /tmp/ccBvFgp2.s 			page 480


 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17829              		.loc 3 100 10 is_stmt 0 discriminator 1 view .LVU5988
 17830 0f68 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 17830      000000
 17831 0f6f 488D3D00 		lea	rdi, .LC36[rip]	#,
 17831      000000
 17832 0f76 BA180000 		mov	edx, 24	#,
 17832      00
 17833 0f7b BE010000 		mov	esi, 1	#,
 17833      00
 17834 0f80 E8000000 		call	fwrite@PLT	#
 17834      00
 17835              	.LVL1078:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17836              		.loc 3 100 10 discriminator 1 view .LVU5989
 17837              	.LBE892:
 17838              	.LBE891:
1351:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tunelevel > 4) {
 17839              		.loc 1 1351 80 is_stmt 1 discriminator 1 view .LVU5990
 17840 0f85 498B3C24 		mov	rdi, QWORD PTR [r12]	#, *argv_159(D)
 17841 0f89 E8000000 		call	usage	#
 17841      00
 17842              	.LVL1079:
 17843              	.L1455:
1351:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tunelevel > 4) {
 17844              		.loc 1 1351 80 is_stmt 0 discriminator 1 view .LVU5991
 17845              	.LBE1048:
 17846              	# sieve_extend.c:1439: }
 17847              		.loc 1 1439 1 view .LVU5992
 17848 0f8e E8000000 		call	__stack_chk_fail@PLT	#
 17848      00
 17849              	.LVL1080:
 17850              	.L1450:
 17851              	.LBB1049:
1358:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
 17852              		.loc 1 1358 34 is_stmt 1 discriminator 1 view .LVU5993
 17853              	.LBB893:
 17854              	.LBI893:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17855              		.loc 3 98 1 discriminator 1 view .LVU5994
 17856              	.LBB894:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17857              		.loc 3 100 3 discriminator 1 view .LVU5995
 17858              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17859              		.loc 3 100 10 is_stmt 0 discriminator 1 view .LVU5996
 17860 0f93 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 17860      000000
 17861 0f9a 488D3D00 		lea	rdi, .LC40[rip]	#,
 17861      000000
 17862 0fa1 BA1A0000 		mov	edx, 26	#,
 17862      00
 17863 0fa6 BE010000 		mov	esi, 1	#,
 17863      00
 17864 0fab E8000000 		call	fwrite@PLT	#
 17864      00
 17865              	.LVL1081:
GAS LISTING /tmp/ccBvFgp2.s 			page 481


 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17866              		.loc 3 100 10 discriminator 1 view .LVU5997
 17867              	.LBE894:
 17868              	.LBE893:
1358:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
 17869              		.loc 1 1358 82 is_stmt 1 discriminator 1 view .LVU5998
 17870 0fb0 498B3C24 		mov	rdi, QWORD PTR [r12]	#, *argv_159(D)
 17871 0fb4 E8000000 		call	usage	#
 17871      00
 17872              	.LVL1082:
 17873              	.LBE1049:
 17874              		.cfi_endproc
 17875              	.LFE86:
 17877              		.section	.rodata
 17878              		.align 16
 17881              	CSWTCH.124:
 17882 0000 9A999999 		.long	2576980378
 17883 0004 9999B93F 		.long	1069128089
 17884 0008 9A999999 		.long	2576980378
 17885 000c 9999C93F 		.long	1070176665
 17886 0010 9A999999 		.long	2576980378
 17887 0014 9999C93F 		.long	1070176665
 17888 0018 00000000 		.align 16
 17888      00000000 
 17891              	CSWTCH.123:
 17892 0020 00080000 		.quad	2048
 17892      00000000 
 17893 0028 00040000 		.quad	1024
 17893      00000000 
 17894 0030 40000000 		.quad	64
 17894      00000000 
 17895 0038 00000000 		.align 16
 17895      00000000 
 17898              	CSWTCH.122:
 17899 0040 20000000 		.quad	32
 17899      00000000 
 17900 0048 10000000 		.quad	16
 17900      00000000 
 17901 0050 04000000 		.quad	4
 17901      00000000 
 17902 0058 00000000 		.align 16
 17902      00000000 
 17905              	CSWTCH.121:
 17906 0060 10000000 		.quad	16
 17906      00000000 
 17907 0068 08000000 		.quad	8
 17907      00000000 
 17908 0070 04000000 		.quad	4
 17908      00000000 
 17909              		.globl	debug_hitpoint
 17910              		.bss
 17911              		.align 32
 17914              	debug_hitpoint:
 17915 0000 00000000 		.zero	40
 17915      00000000 
 17915      00000000 
 17915      00000000 
GAS LISTING /tmp/ccBvFgp2.s 			page 482


 17915      00000000 
 17916              		.globl	global_VECTORSTEP_FASTER
 17917              		.data
 17918              		.align 8
 17921              	global_VECTORSTEP_FASTER:
 17922 0000 80000000 		.quad	128
 17922      00000000 
 17923              		.globl	global_MEDIUMSTEP_FASTER
 17924              		.bss
 17925              		.align 8
 17928              	global_MEDIUMSTEP_FASTER:
 17929 0028 00000000 		.zero	8
 17929      00000000 
 17930              		.globl	global_SMALLSTEP_FASTER
 17931              		.align 8
 17934              	global_SMALLSTEP_FASTER:
 17935 0030 00000000 		.zero	8
 17935      00000000 
 17936              		.section	.rodata.cst32,"aM",@progbits,32
 17937              		.align 32
 17938              	.LC0:
 17939 0000 00000000 		.quad	0
 17939      00000000 
 17940 0008 01000000 		.quad	1
 17940      00000000 
 17941 0010 02000000 		.quad	2
 17941      00000000 
 17942 0018 03000000 		.quad	3
 17942      00000000 
 17943              		.align 32
 17944              	.LC1:
 17945 0020 08000000 		.quad	8
 17945      00000000 
 17946 0028 08000000 		.quad	8
 17946      00000000 
 17947 0030 08000000 		.quad	8
 17947      00000000 
 17948 0038 08000000 		.quad	8
 17948      00000000 
 17949              		.align 32
 17950              	.LC2:
 17951 0040 04000000 		.quad	4
 17951      00000000 
 17952 0048 04000000 		.quad	4
 17952      00000000 
 17953 0050 04000000 		.quad	4
 17953      00000000 
 17954 0058 04000000 		.quad	4
 17954      00000000 
 17955              		.align 32
 17956              	.LC3:
 17957 0060 3F000000 		.long	63
 17958 0064 3F000000 		.long	63
 17959 0068 3F000000 		.long	63
 17960 006c 3F000000 		.long	63
 17961 0070 3F000000 		.long	63
 17962 0074 3F000000 		.long	63
GAS LISTING /tmp/ccBvFgp2.s 			page 483


 17963 0078 3F000000 		.long	63
 17964 007c 3F000000 		.long	63
 17965              		.section	.rodata.cst8,"aM",@progbits,8
 17966              		.align 8
 17967              	.LC7:
 17968 0000 00000000 		.long	0
 17969 0004 0000F87F 		.long	2146959360
 17970              		.align 8
 17971              	.LC8:
 17972 0008 95D626E8 		.long	3894859413
 17973 000c 0B2E113E 		.long	1041313291
 17974              		.align 8
 17975              	.LC26:
 17976 0010 9A999999 		.long	2576980378
 17977 0014 9999B93F 		.long	1069128089
 17978              		.align 8
 17979              	.LC59:
 17980 0018 00000000 		.long	0
 17981 001c 00001440 		.long	1075052544
 17982              		.text
 17983              	.Letext0:
 17984              		.file 4 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 17985              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types.h"
 17986              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 17987              		.file 7 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 17988              		.file 8 "/usr/include/stdio.h"
 17989              		.file 9 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 17990              		.file 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h"
 17991              		.file 11 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
 17992              		.file 12 "/usr/include/stdint.h"
 17993              		.file 13 "/usr/include/time.h"
 17994              		.file 14 "/usr/include/math.h"
 17995              		.file 15 "/usr/include/stdlib.h"
 17996              		.file 16 "<built-in>"
 42843              		.section	.note.gnu.property,"a"
 42844              		.align 8
 42845 0000 04000000 		.long	 1f - 0f
 42846 0004 10000000 		.long	 4f - 1f
 42847 0008 05000000 		.long	 5
 42848              	0:
 42849 000c 474E5500 		.string	 "GNU"
 42850              	1:
 42851              		.align 8
 42852 0010 020000C0 		.long	 0xc0000002
 42853 0014 04000000 		.long	 3f - 2f
 42854              	2:
 42855 0018 03000000 		.long	 0x3
 42856              	3:
 42857 001c 00000000 		.align 8
 42858              	4:
GAS LISTING /tmp/ccBvFgp2.s 			page 484


DEFINED SYMBOLS
                            *ABS*:0000000000000000 sieve_extend.c
     /tmp/ccBvFgp2.s:86     .text:0000000000000000 extendSieve_smallSize
     /tmp/ccBvFgp2.s:17938  .rodata.cst32:0000000000000000 .LC0
     /tmp/ccBvFgp2.s:17944  .rodata.cst32:0000000000000020 .LC1
     /tmp/ccBvFgp2.s:17950  .rodata.cst32:0000000000000040 .LC2
     /tmp/ccBvFgp2.s:17956  .rodata.cst32:0000000000000060 .LC3
     /tmp/ccBvFgp2.s:1228   .text:00000000000006c0 extendSieve_shiftright_ivdep
     /tmp/ccBvFgp2.s:3232   .text:00000000000014f0 compare_tuning_result
     /tmp/ccBvFgp2.s:3258   .text:0000000000001510 setBitsTrue_largeRange_vector
     /tmp/ccBvFgp2.s:5131   .text:0000000000001ed0 extendSieve_aligned
     /tmp/ccBvFgp2.s:6020   .text:0000000000002450 extendSieve_shiftleft
     /tmp/ccBvFgp2.s:8988   .text:0000000000003750 show_primes.isra.0
     /tmp/ccBvFgp2.s:8983   .rodata.str1.1:0000000000000006 .LC5
     /tmp/ccBvFgp2.s:8981   .rodata.str1.1:0000000000000000 .LC4
     /tmp/ccBvFgp2.s:9395   .text:00000000000038f0 sieve
     /tmp/ccBvFgp2.s:17921  .data:0000000000000000 global_VECTORSTEP_FASTER
     /tmp/ccBvFgp2.s:12357  .text:00000000000045a0 tune_benchmark
     /tmp/ccBvFgp2.s:17928  .bss:0000000000000028 global_MEDIUMSTEP_FASTER
     /tmp/ccBvFgp2.s:17934  .bss:0000000000000030 global_SMALLSTEP_FASTER
     /tmp/ccBvFgp2.s:17967  .rodata.cst8:0000000000000000 .LC7
     /tmp/ccBvFgp2.s:17971  .rodata.cst8:0000000000000008 .LC8
     /tmp/ccBvFgp2.s:12574  .text:00000000000046e0 shiftvec
     /tmp/ccBvFgp2.s:13736  .text:0000000000004aa0 validatePrimeCount
     /tmp/ccBvFgp2.s:13717  .rodata.str1.8:0000000000000000 .LC9
     /tmp/ccBvFgp2.s:13723  .rodata.str1.1:0000000000000023 .LC11
     /tmp/ccBvFgp2.s:13727  .rodata.str1.8:00000000000000c0 .LC12
     /tmp/ccBvFgp2.s:13720  .rodata.str1.8:0000000000000058 .LC10
     /tmp/ccBvFgp2.s:13730  .rodata.str1.8:00000000000000f8 .LC13
     /tmp/ccBvFgp2.s:14990  .text:0000000000005230 usage
     /tmp/ccBvFgp2.s:14950  .rodata.str1.8:0000000000000148 .LC14
     /tmp/ccBvFgp2.s:14953  .rodata.str1.1:0000000000000031 .LC15
     /tmp/ccBvFgp2.s:14957  .rodata.str1.8:0000000000000168 .LC16
     /tmp/ccBvFgp2.s:14960  .rodata.str1.8:00000000000001a8 .LC17
     /tmp/ccBvFgp2.s:14963  .rodata.str1.8:00000000000001d8 .LC18
     /tmp/ccBvFgp2.s:14966  .rodata.str1.8:0000000000000220 .LC19
     /tmp/ccBvFgp2.s:14969  .rodata.str1.8:0000000000000250 .LC20
     /tmp/ccBvFgp2.s:14972  .rodata.str1.8:0000000000000290 .LC21
     /tmp/ccBvFgp2.s:14975  .rodata.str1.8:00000000000002d0 .LC22
     /tmp/ccBvFgp2.s:14978  .rodata.str1.8:0000000000000320 .LC23
     /tmp/ccBvFgp2.s:14981  .rodata.str1.8:0000000000000348 .LC24
     /tmp/ccBvFgp2.s:14984  .rodata.str1.8:0000000000000378 .LC25
     /tmp/ccBvFgp2.s:15321  .text.startup:0000000000000000 main
     /tmp/ccBvFgp2.s:15229  .rodata.str1.1:000000000000004a .LC28
     /tmp/ccBvFgp2.s:15231  .rodata.str1.1:0000000000000051 .LC29
     /tmp/ccBvFgp2.s:15235  .rodata.str1.1:0000000000000077 .LC31
     /tmp/ccBvFgp2.s:15242  .rodata.str1.1:000000000000007a .LC33
     /tmp/ccBvFgp2.s:15244  .rodata.str1.1:0000000000000093 .LC34
     /tmp/ccBvFgp2.s:15246  .rodata.str1.1:000000000000009b .LC35
     /tmp/ccBvFgp2.s:15255  .rodata.str1.1:00000000000000bb .LC38
     /tmp/ccBvFgp2.s:15274  .rodata.str1.1:000000000000013a .LC46
     /tmp/ccBvFgp2.s:15272  .rodata.str1.1:0000000000000121 .LC45
     /tmp/ccBvFgp2.s:15257  .rodata.str1.1:00000000000000d1 .LC39
     /tmp/ccBvFgp2.s:15261  .rodata.str1.1:00000000000000f3 .LC41
     /tmp/ccBvFgp2.s:15268  .rodata.str1.1:00000000000000f7 .LC43
     /tmp/ccBvFgp2.s:15270  .rodata.str1.1:0000000000000110 .LC44
     /tmp/ccBvFgp2.s:15276  .rodata.str1.1:000000000000014a .LC47
GAS LISTING /tmp/ccBvFgp2.s 			page 485


     /tmp/ccBvFgp2.s:17979  .rodata.cst8:0000000000000018 .LC59
     /tmp/ccBvFgp2.s:15309  .rodata.str1.8:0000000000000538 .LC60
     /tmp/ccBvFgp2.s:15227  .rodata.str1.1:000000000000003b .LC27
     /tmp/ccBvFgp2.s:15239  .rodata.str1.8:00000000000003b0 .LC32
     /tmp/ccBvFgp2.s:15315  .rodata.str1.1:000000000000019e .LC62
     /tmp/ccBvFgp2.s:15312  .rodata.str1.8:0000000000000580 .LC61
     /tmp/ccBvFgp2.s:17975  .rodata.cst8:0000000000000010 .LC26
     /tmp/ccBvFgp2.s:15289  .rodata.str1.1:0000000000000173 .LC52
     /tmp/ccBvFgp2.s:15286  .rodata.str1.8:0000000000000420 .LC51
     /tmp/ccBvFgp2.s:15293  .rodata.str1.8:00000000000004a8 .LC53
     /tmp/ccBvFgp2.s:15296  .rodata.str1.1:0000000000000178 .LC54
     /tmp/ccBvFgp2.s:15282  .rodata.str1.1:000000000000016e .LC50
     /tmp/ccBvFgp2.s:15298  .rodata.str1.1:0000000000000185 .LC55
     /tmp/ccBvFgp2.s:15300  .rodata.str1.1:000000000000018c .LC56
     /tmp/ccBvFgp2.s:15278  .rodata.str1.1:0000000000000151 .LC48
     /tmp/ccBvFgp2.s:15306  .rodata.str1.8:0000000000000500 .LC58
     /tmp/ccBvFgp2.s:15302  .rodata.str1.1:0000000000000190 .LC57
     /tmp/ccBvFgp2.s:17905  .rodata:0000000000000060 CSWTCH.121
     /tmp/ccBvFgp2.s:17898  .rodata:0000000000000040 CSWTCH.122
     /tmp/ccBvFgp2.s:17891  .rodata:0000000000000020 CSWTCH.123
     /tmp/ccBvFgp2.s:17881  .rodata:0000000000000000 CSWTCH.124
     /tmp/ccBvFgp2.s:15280  .rodata.str1.1:0000000000000164 .LC49
     /tmp/ccBvFgp2.s:15233  .rodata.str1.1:000000000000005b .LC30
     /tmp/ccBvFgp2.s:15252  .rodata.str1.8:00000000000003d8 .LC37
     /tmp/ccBvFgp2.s:15265  .rodata.str1.8:00000000000003f8 .LC42
     /tmp/ccBvFgp2.s:15248  .rodata.str1.1:00000000000000a2 .LC36
     /tmp/ccBvFgp2.s:15259  .rodata.str1.1:00000000000000d8 .LC40
     /tmp/ccBvFgp2.s:17914  .bss:0000000000000000 debug_hitpoint

UNDEFINED SYMBOLS
__stack_chk_fail
_GLOBAL_OFFSET_TABLE_
memcpy
__printf_chk
putchar
aligned_alloc
clock_gettime
free
puts
stderr
__fprintf_chk
fwrite
exit
__isoc99_sscanf
malloc
qsort
