GAS LISTING /tmp/cclewcPz.s 			page 1


   1              		.file	"sieve_extend.c"
   2              		.intel_syntax noprefix
   3              	# GNU C17 (Ubuntu 9.4.0-1ubuntu1~20.04.1) version 9.4.0 (x86_64-linux-gnu)
   4              	#	compiled by GNU C version 9.4.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl ve
   5              	
   6              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   7              	# options passed:  -imultiarch x86_64-linux-gnu sieve_extend.c
   8              	# -march=skylake -mmmx -mno-3dnow -msse -msse2 -msse3 -mssse3 -mno-sse4a
   9              	# -mcx16 -msahf -mmovbe -maes -mno-sha -mpclmul -mpopcnt -mabm -mno-lwp
  10              	# -mfma -mno-fma4 -mno-xop -mbmi -mno-sgx -mbmi2 -mno-pconfig -mno-wbnoinvd
  11              	# -mno-tbm -mavx2 -msse4.2 -msse4.1 -mlzcnt -mrtm -mhle -mrdrnd -mf16c
  12              	# -mfsgsbase -mrdseed -mprfchw -madx -mfxsr -mxsave -mxsaveopt -mno-avx512f
  13              	# -mno-avx512er -mno-avx512cd -mno-avx512pf -mno-prefetchwt1 -mclflushopt
  14              	# -mxsavec -mxsaves -mno-avx512dq -mno-avx512bw -mno-avx512vl
  15              	# -mno-avx512ifma -mno-avx512vbmi -mno-avx5124fmaps -mno-avx5124vnniw
  16              	# -mno-clwb -mno-mwaitx -mno-clzero -mno-pku -mno-rdpid -mno-gfni
  17              	# -mno-shstk -mno-avx512vbmi2 -mno-avx512vnni -mno-vaes -mno-vpclmulqdq
  18              	# -mno-avx512bitalg -mno-avx512vpopcntdq -mno-movdiri -mno-movdir64b
  19              	# -mno-waitpkg -mno-cldemote -mno-ptwrite -mtune=intel -masm=intel
  20              	# -malign-data=cacheline -mavx -g -Ofast -Wextra -Wall -Wno-unused-function
  21              	# -funroll-all-loops -fno-asynchronous-unwind-tables -fno-exceptions
  22              	# -fverbose-asm -fstack-protector-strong -Wformat-security
  23              	# -fstack-clash-protection -fcf-protection
  24              	# options enabled:  -fPIC -fPIE -faggressive-loop-optimizations
  25              	# -falign-functions -falign-jumps -falign-labels -falign-loops
  26              	# -fassociative-math -fassume-phsa -fauto-inc-dec -fbranch-count-reg
  27              	# -fcaller-saves -fcode-hoisting -fcombine-stack-adjustments -fcommon
  28              	# -fcompare-elim -fcprop-registers -fcrossjumping -fcse-follow-jumps
  29              	# -fcx-limited-range -fdefer-pop -fdelete-null-pointer-checks
  30              	# -fdevirtualize -fdevirtualize-speculatively -fdwarf2-cfi-asm
  31              	# -fearly-inlining -feliminate-unused-debug-types -fexpensive-optimizations
  32              	# -ffinite-math-only -fforward-propagate -ffp-int-builtin-inexact
  33              	# -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  34              	# -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  35              	# -fif-conversion -fif-conversion2 -findirect-inlining -finline
  36              	# -finline-atomics -finline-functions -finline-functions-called-once
  37              	# -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  38              	# -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  39              	# -fipa-ra -fipa-reference -fipa-reference-addressable -fipa-sra
  40              	# -fipa-stack-alignment -fipa-vrp -fira-hoist-pressure
  41              	# -fira-share-save-slots -fira-share-spill-slots
  42              	# -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  43              	# -fleading-underscore -flifetime-dse -floop-interchange
  44              	# -floop-unroll-and-jam -flra-remat -flto-odr-type-merging
  45              	# -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  46              	# -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  47              	# -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  48              	# -fpredictive-commoning -fprefetch-loop-arrays -freciprocal-math -free
  49              	# -freg-struct-return -frename-registers -freorder-blocks
  50              	# -freorder-blocks-and-partition -freorder-functions -frerun-cse-after-loop
  51              	# -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  52              	# -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  53              	# -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  54              	# -fsched-stalled-insns-dep -fschedule-fusion -fschedule-insns2
  55              	# -fsemantic-interposition -fshow-column -fshrink-wrap
  56              	# -fshrink-wrap-separate -fsplit-ivs-in-unroller -fsplit-loops
  57              	# -fsplit-paths -fsplit-wide-types -fssa-backprop -fssa-phiopt
GAS LISTING /tmp/cclewcPz.s 			page 2


  58              	# -fstack-clash-protection -fstack-protector-strong -fstdarg-opt
  59              	# -fstore-merging -fstrict-aliasing -fstrict-volatile-bitfields
  60              	# -fsync-libcalls -fthread-jumps -ftoplevel-reorder -ftree-bit-ccp
  61              	# -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  62              	# -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  63              	# -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  64              	# -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  65              	# -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  66              	# -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  67              	# -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  68              	# -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  69              	# -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time
  70              	# -funroll-all-loops -funroll-loops -funsafe-math-optimizations
  71              	# -funswitch-loops -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  72              	# -fversion-loops-for-strides -fweb -fzero-initialized-in-bss
  73              	# -m128bit-long-double -m64 -m80387 -mabm -maccumulate-outgoing-args -madx
  74              	# -maes -malign-stringops -mavx -mavx2 -mbmi -mbmi2 -mclflushopt -mcx16
  75              	# -mf16c -mfancy-math-387 -mfma -mfp-ret-in-387 -mfsgsbase -mfxsr -mglibc
  76              	# -mhle -mlong-double-80 -mlzcnt -mmmx -mmovbe -mpclmul -mpopcnt -mprfchw
  77              	# -mpush-args -mrdrnd -mrdseed -mred-zone -mrtm -msahf -msse -msse2 -msse3
  78              	# -msse4 -msse4.1 -msse4.2 -mssse3 -mstv -mtls-direct-seg-refs -mvzeroupper
  79              	# -mxsave -mxsavec -mxsaveopt -mxsaves
  80              	
  81              		.text
  82              	.Ltext0:
  83              		.cfi_sections	.debug_frame
  84              		.p2align 4
  86              	extendSieve_smallSize:
  87              	.LVL0:
  88              	.LFB68:
  89              		.file 1 "sieve_extend.c"
   1:sieve_extend.c **** #include <stdio.h>
   2:sieve_extend.c **** #include <stdlib.h>
   3:sieve_extend.c **** #include <stdint.h>
   4:sieve_extend.c **** #include <time.h>
   5:sieve_extend.c **** #include <math.h>
   6:sieve_extend.c **** #include <string.h>
   7:sieve_extend.c **** 
   8:sieve_extend.c **** //add debug in front of a line to only compile it if the value below is set to 1 (or !=0)
   9:sieve_extend.c **** #define option_runonce 0
  10:sieve_extend.c **** #define debug if (option_runonce)
  11:sieve_extend.c **** #define debug2 if (option_runonce>=2)
  12:sieve_extend.c **** 
  13:sieve_extend.c **** #define default_sieve_limit 1000000
  14:sieve_extend.c **** #define default_blocksize (32*1024*8-1024)
  15:sieve_extend.c **** #define default_sieve_duration 5
  16:sieve_extend.c **** #define default_sample_duration 0.1
  17:sieve_extend.c **** #define default_sample_max 5
  18:sieve_extend.c **** #define default_verbose_level 2
  19:sieve_extend.c **** #define default_tune_level 2
  20:sieve_extend.c **** #define default_check_level 1
  21:sieve_extend.c **** #define default_show_primes_on_error 100
  22:sieve_extend.c **** #define default_showMaxFactor (0 || option_runonce?100:0)
  23:sieve_extend.c **** #define anticiped_cache_line_bytesize 128
  24:sieve_extend.c **** 
  25:sieve_extend.c **** // 64 bit
  26:sieve_extend.c **** #define TYPE uint64_t
GAS LISTING /tmp/cclewcPz.s 			page 3


  27:sieve_extend.c **** 
  28:sieve_extend.c **** // calculate the rest dynamically
  29:sieve_extend.c **** #define counter_t TYPE
  30:sieve_extend.c **** #define bitshift_t TYPE
  31:sieve_extend.c **** #define bitword_t uint64_t
  32:sieve_extend.c **** 
  33:sieve_extend.c **** #define WORD_SIZE (sizeof(bitword_t)*8)
  34:sieve_extend.c **** #define WORD_SIZE_counter ((counter_t)WORD_SIZE)
  35:sieve_extend.c **** #define WORD_SIZE_bitshift ((bitshift_t)WORD_SIZE)
  36:sieve_extend.c **** #define pow(base,pow) (pow*((base>>pow)&1U))
  37:sieve_extend.c **** //#define SHIFT ((bitshift_t)(pow(WORD_SIZE,1)+pow(WORD_SIZE,2)+pow(WORD_SIZE,3)+pow(WORD_SIZE,4)+p
  38:sieve_extend.c **** #define SHIFT_WORD ((bitshift_t)(pow(WORD_SIZE,1)+pow(WORD_SIZE,2)+pow(WORD_SIZE,3)+pow(WORD_SIZE,4
  39:sieve_extend.c **** 
  40:sieve_extend.c **** #define VECTOR_ELEMENTS 4
  41:sieve_extend.c **** #define VECTOR_SIZE_bytes (sizeof(bitword_t)*VECTOR_ELEMENTS)
  42:sieve_extend.c **** #define VECTOR_SIZE_counter (VECTOR_SIZE_bytes*8)
  43:sieve_extend.c **** #define VECTOR_SIZE (VECTOR_SIZE_bytes*8)
  44:sieve_extend.c **** #define SHIFT_VECTOR ((bitshift_t)(pow(VECTOR_SIZE,1)+pow(VECTOR_SIZE,2)+pow(VECTOR_SIZE,3)+pow(VEC
  45:sieve_extend.c **** 
  46:sieve_extend.c **** typedef bitword_t bitvector_t __attribute__ ((vector_size(VECTOR_SIZE_bytes)));
  47:sieve_extend.c **** 
  48:sieve_extend.c **** // globals for tuning
  49:sieve_extend.c **** counter_t global_SMALLSTEP_FASTER = 0;
  50:sieve_extend.c **** counter_t global_MEDIUMSTEP_FASTER = 0;
  51:sieve_extend.c **** counter_t global_VECTORSTEP_FASTER = VECTOR_SIZE/2;
  52:sieve_extend.c **** 
  53:sieve_extend.c **** #define SAFE_SHIFTBIT (bitshift_t)1U
  54:sieve_extend.c **** #define SAFE_ZERO  (bitword_t)0U
  55:sieve_extend.c **** #define BITWORD_SHIFTBIT (bitword_t)1U
  56:sieve_extend.c **** #define WORDMASK ((~SAFE_ZERO)>>(WORD_SIZE_bitshift-SHIFT_WORD))
  57:sieve_extend.c **** #define VECTORMASK ((~SAFE_ZERO)>>(WORD_SIZE_bitshift-SHIFT_VECTOR))
  58:sieve_extend.c **** // #define SMALLSTEP_FASTER ((counter_t)0)
  59:sieve_extend.c **** // #define MEDIUMSTEP_FASTER ((counter_t)16)
  60:sieve_extend.c **** // #define VECTORSTEP_FASTER ((counter_t)128)
  61:sieve_extend.c **** 
  62:sieve_extend.c **** #define SMALLSTEP_FASTER ((counter_t)global_SMALLSTEP_FASTER)
  63:sieve_extend.c **** #define MEDIUMSTEP_FASTER ((counter_t)global_MEDIUMSTEP_FASTER)
  64:sieve_extend.c **** #define VECTORSTEP_FASTER ((counter_t)global_VECTORSTEP_FASTER)
  65:sieve_extend.c **** 
  66:sieve_extend.c **** #define wordindex(index) (((counter_t)index) >> (bitshift_t)SHIFT_WORD)
  67:sieve_extend.c **** #define wordend(index) ((counter_t)index|WORDMASK)
  68:sieve_extend.c **** #define wordstart(index) ((counter_t)index&~WORDMASK)
  69:sieve_extend.c **** #define vectorindex(index) (((counter_t)index) >> (bitshift_t)SHIFT_VECTOR)
  70:sieve_extend.c **** #define vectorstart(index) (((counter_t)index) & (counter_t)~VECTORMASK)
  71:sieve_extend.c **** 
  72:sieve_extend.c **** // modern processors do a & over the shiftssize, so we only have to do that ourselve when using the
  73:sieve_extend.c **** #define bitindex(index) ((bitshift_t)(index))
  74:sieve_extend.c **** // #define bitindex(index) ((bitshift_t)(index)&((bitword_t)(WORD_SIZE-1)))
  75:sieve_extend.c **** //#define bitindex_calc(index) ((bitshift_t)(index)&((bitshift_t)(WORD_SIZE_bitshift-SAFE_SHIFTBIT)
  76:sieve_extend.c **** #define bitindex_calc(index) ((bitshift_t)(index)&((bitshift_t)(WORDMASK)))
  77:sieve_extend.c **** #define  markmask(index) (BITWORD_SHIFTBIT << bitindex(index))
  78:sieve_extend.c **** #define  markmask_calc(index) (BITWORD_SHIFTBIT << bitindex_calc(index))
  79:sieve_extend.c **** // #define chopmask(index) ((SAFE_SHIFTBIT << bitindex(index))-SAFE_SHIFTBIT)
  80:sieve_extend.c **** // #define chopmask2(index) (((bitword_t)2U << bitindex(index))-SAFE_SHIFTBIT)
  81:sieve_extend.c **** #define chopmask(index) (~SAFE_ZERO >> (WORD_SIZE-1-bitindex_calc(index)))
  82:sieve_extend.c **** #define keepmask(index) (~SAFE_ZERO << (bitindex_calc(index)))
  83:sieve_extend.c **** #define chopmask2(index) chopmask(index)
GAS LISTING /tmp/cclewcPz.s 			page 4


  84:sieve_extend.c **** #define real(bit) (bit*2+1)
  85:sieve_extend.c **** 
  86:sieve_extend.c **** #define min(a,b) ((a<b) ? a : b)
  87:sieve_extend.c **** #define uintsafeminus(a,b) ((a>b)?(a-b):0)
  88:sieve_extend.c **** 
  89:sieve_extend.c **** #define likely(x)       (__builtin_expect((x),1))
  90:sieve_extend.c **** #define unlikely(x)     (__builtin_expect((x),0))
  91:sieve_extend.c **** 
  92:sieve_extend.c **** counter_t debug_hitpoint[5] = { 0,0,0,0,0};
  93:sieve_extend.c **** 
  94:sieve_extend.c **** struct sieve_state {
  95:sieve_extend.c ****     bitword_t* bitarray;
  96:sieve_extend.c ****     counter_t  bits;
  97:sieve_extend.c ****     counter_t  size;
  98:sieve_extend.c **** };
  99:sieve_extend.c **** 
 100:sieve_extend.c **** #include "debugtools.h"
 101:sieve_extend.c **** 
 102:sieve_extend.c **** // use cache lines as much as possible - alignment might be key
 103:sieve_extend.c **** #define ceiling(x,y) (((x) + (y) - 1) / (y)) // Return the smallest multiple N of y such that:  x <
 104:sieve_extend.c **** static struct sieve_state *create_sieve(counter_t size) {
 105:sieve_extend.c ****     struct sieve_state *sieve = aligned_alloc(8, sizeof(struct sieve_state));
 106:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 107:sieve_extend.c **** 
 108:sieve_extend.c ****     sieve->bitarray = aligned_alloc((size_t)anticiped_cache_line_bytesize, (size_t)memSize );
 109:sieve_extend.c ****     sieve->bits     = size >> 1;
 110:sieve_extend.c ****     sieve->size     = size;
 111:sieve_extend.c **** 
 112:sieve_extend.c ****     // moved clearing the sieve with 0 to the sieve_block_extend
 113:sieve_extend.c ****     // it gave weird malloc problems at this point
 114:sieve_extend.c ****     return sieve;
 115:sieve_extend.c **** }
 116:sieve_extend.c **** 
 117:sieve_extend.c **** static void delete_sieve(struct sieve_state *sieve) {
 118:sieve_extend.c ****     free(sieve->bitarray);
 119:sieve_extend.c ****     free(sieve);
 120:sieve_extend.c **** }
 121:sieve_extend.c **** 
 122:sieve_extend.c **** // not much performance gain at smaller sieves, but its's nice to have an implementation
 123:sieve_extend.c **** static inline counter_t searchBitFalse(bitword_t* bitarray, register counter_t index) {
 124:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 126:sieve_extend.c **** }
 127:sieve_extend.c **** 
 128:sieve_extend.c **** // not much performance gain at smaller sieves, but its's nice to have an implementation
 129:sieve_extend.c **** static inline counter_t searchBitFalse_longRange(bitword_t* bitarray, register counter_t index) {
 130:sieve_extend.c ****     // return searchBitFalse(bitarray, index);
 131:sieve_extend.c **** 
 132:sieve_extend.c ****    register counter_t index_word = wordindex(index);
 133:sieve_extend.c ****    bitshift_t index_bit  = bitindex_calc(index);
 134:sieve_extend.c ****    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[index_word] >> index_bi
 135:sieve_extend.c ****    index += distance;
 136:sieve_extend.c ****    distance += index_bit;
 137:sieve_extend.c **** 
 138:sieve_extend.c ****    while unlikely(distance == WORD_SIZE_bitshift) { // to prevent a bug from optimzer
 139:sieve_extend.c ****        index_word++;
 140:sieve_extend.c ****        distance = (bitshift_t) __builtin_ctzll(~(bitarray[index_word]));
GAS LISTING /tmp/cclewcPz.s 			page 5


 141:sieve_extend.c ****        index += distance;
 142:sieve_extend.c ****    }
 143:sieve_extend.c **** 
 144:sieve_extend.c ****    return index;
 145:sieve_extend.c **** }
 146:sieve_extend.c **** 
 147:sieve_extend.c **** 
 148:sieve_extend.c **** static inline void applyMask_array(bitword_t* __restrict bitarray, const counter_t step, const coun
 149:sieve_extend.c ****     register const counter_t step_2 = step * 2;
 150:sieve_extend.c ****     register const counter_t step_3 = step * 3;
 151:sieve_extend.c ****     register const counter_t step_4 = step * 4;
 152:sieve_extend.c ****     register const counter_t range_stop_word = wordindex(range_stop);
 153:sieve_extend.c ****     const counter_t loop_stop_word = (range_stop_word > step_3) ? (range_stop_word - step_3) : (cou
 154:sieve_extend.c **** 
 155:sieve_extend.c ****     #pragma GCC ivdep
 156:sieve_extend.c ****     for (;index_word < loop_stop_word;  index_word += step_4) {
 157:sieve_extend.c ****         bitarray[index_word         ] |= mask;
 158:sieve_extend.c ****         bitarray[index_word + step  ] |= mask;
 159:sieve_extend.c ****         bitarray[index_word + step_2] |= mask;
 160:sieve_extend.c ****         bitarray[index_word + step_3] |= mask;
 161:sieve_extend.c ****     }
 162:sieve_extend.c **** 
 163:sieve_extend.c ****     #pragma GCC ivdep
 164:sieve_extend.c ****     while (index_word < range_stop_word) {
 165:sieve_extend.c ****         bitarray[index_word] |= mask;
 166:sieve_extend.c ****         index_word += step;
 167:sieve_extend.c ****     }
 168:sieve_extend.c **** 
 169:sieve_extend.c ****     if (index_word == wordindex(range_stop)) {
 170:sieve_extend.c ****         bitarray[wordindex(range_stop)] |= (mask & chopmask(range_stop)); //only needed if blocks n
 171:sieve_extend.c ****         
 172:sieve_extend.c ****     }
 173:sieve_extend.c **** }
 174:sieve_extend.c **** 
 175:sieve_extend.c **** static inline void applyMask_ptr(bitword_t* __restrict bitarray, const counter_t step, const counte
 176:sieve_extend.c ****    const counter_t range_stop_word = wordindex(range_stop);
 177:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 178:sieve_extend.c ****    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_stop
 179:sieve_extend.c **** 
 180:sieve_extend.c ****    //#pragma GCC unroll 10
 181:sieve_extend.c ****    #pragma GCC ivdep
 182:sieve_extend.c ****    while likely(index_ptr < fast_loop_ptr) {
 183:sieve_extend.c ****        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 185:sieve_extend.c ****        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 187:sieve_extend.c ****        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 189:sieve_extend.c ****        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 191:sieve_extend.c ****        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 193:sieve_extend.c ****    }
 194:sieve_extend.c **** 
 195:sieve_extend.c ****    register const bitword_t* __restrict range_stop_ptr = &bitarray[(range_stop_word)];
 196:sieve_extend.c ****    while likely(index_ptr < range_stop_ptr) {
 197:sieve_extend.c ****        *index_ptr |= mask;
GAS LISTING /tmp/cclewcPz.s 			page 6


 198:sieve_extend.c ****        index_ptr+=step;
 199:sieve_extend.c ****    }
 200:sieve_extend.c **** 
 201:sieve_extend.c ****    if (index_ptr == range_stop_ptr) { // index_ptr could also end above range_stop_ptr, depending o
 202:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 203:sieve_extend.c ****    }
 204:sieve_extend.c **** }
 205:sieve_extend.c **** 
 206:sieve_extend.c **** // set bits by creating a pattern and then extending it to word and range size
 207:sieve_extend.c **** static inline void setBitsTrue_smallStep(bitword_t* __restrict bitarray, const counter_t range_star
 208:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using smallstep (%ju occurances)
 209:sieve_extend.c **** 
 210:sieve_extend.c ****     // build the pattern in a word
 211:sieve_extend.c **** 	register bitword_t pattern = BITWORD_SHIFTBIT;
 212:sieve_extend.c ****     for (bitshift_t patternsize = step; patternsize <= WORD_SIZE_bitshift; patternsize += patternsi
 213:sieve_extend.c ****         pattern |= (pattern << patternsize);
 214:sieve_extend.c **** 
 215:sieve_extend.c ****     // debug if (step==13) { printf("Before\n"); dump_bitarray(bitarray,10); }
 216:sieve_extend.c ****     
 217:sieve_extend.c ****     // initialize loop variables and stop if this is it
 218:sieve_extend.c ****     const counter_t range_stop_word = wordindex(range_stop);
 219:sieve_extend.c ****     register counter_t range_start_word = wordindex(range_start);
 220:sieve_extend.c ****      if (range_start_word >= range_stop_word) { // shortcut
 221:sieve_extend.c ****        bitarray[range_start_word] |= (pattern << bitindex(range_start)) & chopmask(range_stop);
 222:sieve_extend.c ****         //  debug if (step==13) { printf("After\n"); dump_bitarray(bitarray,10); }
 223:sieve_extend.c ****        return;
 224:sieve_extend.c ****     }
 225:sieve_extend.c ****     
 226:sieve_extend.c ****     bitarray[range_start_word] |= (pattern << bitindex(range_start));
 227:sieve_extend.c **** 
 228:sieve_extend.c ****    // from now on, we are before range_stop_word
 229:sieve_extend.c ****    // first word is special, because it should not set bits before the range_start_bit
 230:sieve_extend.c ****    register bitshift_t pattern_size = WORD_SIZE_bitshift - (WORD_SIZE_bitshift % step);
 231:sieve_extend.c ****    register bitshift_t pattern_shift = step - (WORD_SIZE_bitshift % step);
 232:sieve_extend.c ****    register bitshift_t shift = (bitindex_calc(range_start))%step ;
 233:sieve_extend.c ****    counter_t loop_range = range_stop_word - range_start_word;
 234:sieve_extend.c ****    //#pragma GCC unroll 16
 235:sieve_extend.c ****    #pragma GCC ivdep
 236:sieve_extend.c ****    for (counter_t i=1; i <= loop_range; i++) {
 237:sieve_extend.c ****         bitshift_t totalshift = (shift+i*pattern_shift) % step;
 238:sieve_extend.c ****        bitarray[range_start_word+i] |=  (pattern >> (pattern_size-totalshift)) | (pattern << (total
 239:sieve_extend.c **** 
 240:sieve_extend.c ****         // bitarray[range_start_word+i] |=  (pattern >> (pattern_size-((shift+i*pattern_shift) % st
 241:sieve_extend.c ****    }
 242:sieve_extend.c ****    bitarray[range_stop_word] &= chopmask(range_stop);
 243:sieve_extend.c **** 
 244:sieve_extend.c **** //    for(counter_t check=range_start; check<=range_stop; check+=step) {
 245:sieve_extend.c **** //         if (!(bitarray[wordindex(check)] & markmask(check))) {
 246:sieve_extend.c **** //             printf("Bit %ju not set\n",check);
 247:sieve_extend.c **** //             dump_bitarray(bitarray,4);
 248:sieve_extend.c **** //             printWord(pattern); printf("\n");
 249:sieve_extend.c **** //             exit(0);
 250:sieve_extend.c **** //         }
 251:sieve_extend.c **** //    }
 252:sieve_extend.c **** 
 253:sieve_extend.c ****     // pattern = (pattern << (bitindex_calc(range_start) % step)); // correct for inital offset
 254:sieve_extend.c ****     // const register bitshift_t pattern_shift = WORD_SIZE_bitshift % step;
GAS LISTING /tmp/cclewcPz.s 			page 7


 255:sieve_extend.c ****     // const register bitshift_t pattern_shift_flipped = WORD_SIZE_bitshift - pattern_shift - patte
 256:sieve_extend.c ****     // const register counter_t loop_range = range_stop_word - range_start_word;
 257:sieve_extend.c ****     // //#pragma GCC unroll 16
 258:sieve_extend.c ****     // #pragma GCC ivdep
 259:sieve_extend.c ****     // for (counter_t i=1; i <= loop_range; i++) {
 260:sieve_extend.c ****     //     pattern = (pattern >> pattern_shift) | (pattern << pattern_shift_flipped);
 261:sieve_extend.c ****     //     bitarray[range_start_word+i] |= pattern;
 262:sieve_extend.c ****     // }
 263:sieve_extend.c ****     // bitarray[range_stop_word] &= chopmask(range_stop);
 264:sieve_extend.c **** }
 265:sieve_extend.c **** 
 266:sieve_extend.c **** // Medium steps could be within the same word (e.g. less than 64 bits apart).
 267:sieve_extend.c **** // By joining the masks and then writing to memory, we might save some time.
 268:sieve_extend.c **** // This is especially true for small steps over long ranges
 269:sieve_extend.c **** // but it needs tuning, because there is some overhead of checking if the next step is in the same 
 270:sieve_extend.c **** static void  setBitsTrue_mediumStep(bitword_t* __restrict bitarray, const counter_t range_start, co
 271:sieve_extend.c ****     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * step;
 272:sieve_extend.c **** 
 273:sieve_extend.c ****     if (range_stop_unique > range_stop) { // the range will not repeat itself; no need to try to re
 274:sieve_extend.c ****         debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using mediumstep-unique (%ju
 275:sieve_extend.c **** 
 276:sieve_extend.c ****         #pragma GCC ivdep
 277:sieve_extend.c ****         for (register counter_t index = range_start; index <= range_stop;) {
 278:sieve_extend.c ****             register counter_t index_word = wordindex(index);
 279:sieve_extend.c ****             register bitword_t mask = SAFE_ZERO;
 280:sieve_extend.c ****             #pragma GCC ivdep
 281:sieve_extend.c ****             do {
 282:sieve_extend.c ****                 mask |= markmask(index);
 283:sieve_extend.c ****                 index += step;
 284:sieve_extend.c ****             } while (index_word == wordindex(index));
 285:sieve_extend.c ****             // for (; index_word == wordindex(index);  index += step) 
 286:sieve_extend.c ****             //     mask |= markmask(index);
 287:sieve_extend.c ****             bitarray[index_word] |= mask;
 288:sieve_extend.c ****         }
 289:sieve_extend.c ****     }
 290:sieve_extend.c ****     else { // this mask will reoccur at a interval of step words -> fill mask and reapply as a inte
 291:sieve_extend.c ****         debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using mediumstep-repeat (%ju
 292:sieve_extend.c ****         
 293:sieve_extend.c ****         #pragma GCC ivdep
 294:sieve_extend.c ****         for (register counter_t index = range_start; index <= range_stop_unique;) {
 295:sieve_extend.c ****             register counter_t index_word = wordindex(index);
 296:sieve_extend.c ****             register bitword_t mask = SAFE_ZERO;
 297:sieve_extend.c ****             #pragma GCC ivdep
 298:sieve_extend.c ****             do {
 299:sieve_extend.c ****                 mask |= markmask(index);
 300:sieve_extend.c ****                 index += step;
 301:sieve_extend.c ****             } while (index_word == wordindex(index));
 302:sieve_extend.c ****             // #pragma GCC ivdep
 303:sieve_extend.c ****             // for (; index_word == wordindex(index);  index += step) 
 304:sieve_extend.c ****             //     mask |= markmask(index);
 305:sieve_extend.c ****             #if __APPLE__
 306:sieve_extend.c ****                applyMask_array(bitarray, step, range_stop, mask, index_word);
 307:sieve_extend.c ****             #else
 308:sieve_extend.c ****                applyMask_ptr(bitarray, step, range_stop, mask, index_word);
 309:sieve_extend.c ****             #endif
 310:sieve_extend.c ****         }
 311:sieve_extend.c ****     }
GAS LISTING /tmp/cclewcPz.s 			page 8


 312:sieve_extend.c **** }
 313:sieve_extend.c **** 
 314:sieve_extend.c **** // large steps in small ranges (< WORD_SIZE * step) mean the mask is unique
 315:sieve_extend.c **** static inline void setBitsTrue_largeSteps(bitword_t* __restrict bitarray, const counter_t range_sta
 316:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largesteps (%ju occurances
 317:sieve_extend.c ****     
 318:sieve_extend.c ****     //#pragma GCC unroll 16
 319:sieve_extend.c ****     #pragma GCC ivdep
 320:sieve_extend.c ****     for (counter_t index = range_start; index <= range_stop; index += step) {
 321:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 322:sieve_extend.c ****     }
 323:sieve_extend.c **** }
 324:sieve_extend.c **** 
 325:sieve_extend.c **** static inline void setBitsTrue_largeSteps_unroll(bitword_t* __restrict bitarray, const counter_t ra
 326:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largesteps (%ju occurances
 327:sieve_extend.c ****     
 328:sieve_extend.c ****     counter_t loop_iterations = (range_stop - range_start) / step;
 329:sieve_extend.c ****     //#pragma GCC unroll 16
 330:sieve_extend.c ****     #pragma GCC ivdep 
 331:sieve_extend.c ****     for (register counter_t i = 0; i <= loop_iterations; i++) {
 332:sieve_extend.c ****          bitarray[wordindex(range_start+i*step)] |= markmask(range_start+i*step);
 333:sieve_extend.c ****     }
 334:sieve_extend.c **** }
 335:sieve_extend.c **** 
 336:sieve_extend.c **** // small ranges (< WORD_SIZE * step) mean the mask is unique
 337:sieve_extend.c **** static void setBitsTrue_race(bitword_t* bitarray, counter_t index1, counter_t index2, const counter
 338:sieve_extend.c ****     debug printf("Setting bits step %ju and %ju in %ju bit range (%ju-%ju) using race (%ju occuranc
 339:sieve_extend.c **** 
 340:sieve_extend.c ****     counter_t index1_word = wordindex(index1);
 341:sieve_extend.c ****     counter_t index2_word = wordindex(index2);
 342:sieve_extend.c ****     
 343:sieve_extend.c ****     while (1) {
 344:sieve_extend.c ****         if (index1_word == index2_word) {
 345:sieve_extend.c ****             bitword_t mask = SAFE_ZERO;
 346:sieve_extend.c ****             counter_t index_word = index1_word;
 347:sieve_extend.c ****             do {
 348:sieve_extend.c ****                 mask |= markmask(index1);
 349:sieve_extend.c ****                 index1 += step1;
 350:sieve_extend.c ****                 index1_word = wordindex(index1);
 351:sieve_extend.c ****             } while (index1_word == index_word);
 352:sieve_extend.c ****             do {
 353:sieve_extend.c ****                 mask |= markmask(index2);
 354:sieve_extend.c ****                 index2 += step2;
 355:sieve_extend.c ****                 index2_word = wordindex(index2);
 356:sieve_extend.c ****             } while (index2_word == index_word);
 357:sieve_extend.c ****             bitarray[index_word] |= mask;
 358:sieve_extend.c ****         }
 359:sieve_extend.c **** 
 360:sieve_extend.c ****         // because step is larger, index2 is the most likely to get out of bounds first
 361:sieve_extend.c ****         if (index2 > range_stop) {
 362:sieve_extend.c ****             while (index1 <= range_stop) {
 363:sieve_extend.c ****                 bitarray[wordindex(index1)] |= markmask(index1);
 364:sieve_extend.c ****                 index1 += step1;
 365:sieve_extend.c ****             }
 366:sieve_extend.c ****             return;
 367:sieve_extend.c ****         }
 368:sieve_extend.c **** 
GAS LISTING /tmp/cclewcPz.s 			page 9


 369:sieve_extend.c ****         if (index1 > range_stop) {
 370:sieve_extend.c ****             while (index2 <= range_stop) {
 371:sieve_extend.c ****                 bitarray[wordindex(index2)] |= markmask(index2);
 372:sieve_extend.c ****                 index2 += step2;
 373:sieve_extend.c ****             }
 374:sieve_extend.c ****             return;
 375:sieve_extend.c ****         }
 376:sieve_extend.c **** 
 377:sieve_extend.c ****         while (index1_word < index2_word) {
 378:sieve_extend.c ****             bitarray[index1_word] |= markmask(index1);
 379:sieve_extend.c ****             index1 += step1;
 380:sieve_extend.c ****             index1_word = wordindex(index1);
 381:sieve_extend.c ****         }
 382:sieve_extend.c ****         
 383:sieve_extend.c ****         while (index2_word < index1_word){
 384:sieve_extend.c ****             bitarray[index2_word] |= markmask(index2);
 385:sieve_extend.c ****             index2 += step2;
 386:sieve_extend.c ****             index2_word = wordindex(index2);
 387:sieve_extend.c ****         }
 388:sieve_extend.c **** 
 389:sieve_extend.c ****     }
 390:sieve_extend.c **** }
 391:sieve_extend.c **** 
 392:sieve_extend.c **** // Large ranges (> WORD_SIZE * step) mean the same mask can be reused
 393:sieve_extend.c **** static inline void setBitsTrue_largeRange(bitword_t* __restrict bitarray, const counter_t range_sta
 394:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange (%ju occurances
 395:sieve_extend.c ****     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * step;
 396:sieve_extend.c **** 
 397:sieve_extend.c ****     //#pragma GCC unroll 16
 398:sieve_extend.c ****     #pragma GCC ivdep
 399:sieve_extend.c ****     for (register counter_t index = range_start; index < range_stop_unique; index += step) {
 400:sieve_extend.c ****         #if __APPLE__
 401:sieve_extend.c ****             applyMask_array(bitarray, step, range_stop, markmask(index), wordindex(index));
 402:sieve_extend.c ****         #else
 403:sieve_extend.c ****             applyMask_ptr(bitarray, step, range_stop, markmask(index), wordindex(index));
 404:sieve_extend.c ****         #endif
 405:sieve_extend.c ****     }
 406:sieve_extend.c **** }
 407:sieve_extend.c **** 
 408:sieve_extend.c **** 
 409:sieve_extend.c **** static inline void applyMask_vector_ptr(bitvector_t* __restrict bitarray, const counter_t step, con
 410:sieve_extend.c ****     const counter_t range_stop_vector = vectorindex(range_stop);
 411:sieve_extend.c ****     register bitvector_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_vec
 412:sieve_extend.c ****     register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_s
 413:sieve_extend.c ****     
 414:sieve_extend.c ****     //#pragma GCC unroll 16
 415:sieve_extend.c ****     #pragma GCC ivdep
 416:sieve_extend.c ****     while likely(index_ptr < fast_loop_ptr) {
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 421:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 422:sieve_extend.c ****     }
 423:sieve_extend.c ****     
 424:sieve_extend.c ****     register const bitvector_t* __restrict range_stop_ptr = &bitarray[(range_stop_vector)];
 425:sieve_extend.c ****     while likely(index_ptr <= range_stop_ptr) {
GAS LISTING /tmp/cclewcPz.s 			page 10


 426:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 427:sieve_extend.c ****     }
 428:sieve_extend.c **** }
 429:sieve_extend.c **** 
 430:sieve_extend.c **** static inline void applyMask_vector_array(bitvector_t* __restrict bitarray_word, const counter_t st
 431:sieve_extend.c **** 
 432:sieve_extend.c ****     bitvector_t* __restrict bitarray_vector = __builtin_assume_aligned( (bitvector_t*) bitarray_wor
 433:sieve_extend.c ****     counter_t current_vector = index_vector;
 434:sieve_extend.c ****     const counter_t range_stop_vector = vectorindex(range_stop);
 435:sieve_extend.c **** 
 436:sieve_extend.c ****     const counter_t step_2 = step * 2;
 437:sieve_extend.c ****     const counter_t step_3 = step * 3;
 438:sieve_extend.c ****     const counter_t step_4 = step * 4;
 439:sieve_extend.c **** 
 440:sieve_extend.c ****     if (current_vector+step_4 <= range_stop_vector) {
 441:sieve_extend.c ****         register const counter_t loop_stop_vector = (range_stop_vector > step_4) ? (range_stop_vect
 442:sieve_extend.c ****         //#pragma GCC unroll 16
 443:sieve_extend.c ****         #pragma GCC ivdep
 444:sieve_extend.c ****         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 445:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 448:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 449:sieve_extend.c ****         }
 450:sieve_extend.c ****     }
 451:sieve_extend.c ****     
 452:sieve_extend.c ****     //#pragma GCC unroll 16
 453:sieve_extend.c ****     #pragma GCC ivdep 
 454:sieve_extend.c ****     for(; current_vector <= range_stop_vector; current_vector += step) {
 455:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 456:sieve_extend.c ****     }
 457:sieve_extend.c ****     
 458:sieve_extend.c **** }
 459:sieve_extend.c **** 
 460:sieve_extend.c **** static void setBitsTrue_largeRange_vector(bitword_t* __restrict bitarray_word, counter_t range_star
 461:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange vector (%ju occ
 462:sieve_extend.c **** 
 463:sieve_extend.c ****     bitvector_t* __restrict bitarray_vector = __builtin_assume_aligned( (bitvector_t*) bitarray_wor
 464:sieve_extend.c ****     counter_t range_start_atvector = vectorstart(range_start);
 465:sieve_extend.c ****     if likely((range_start_atvector + step) < range_start) { // not the first step possible in this
 466:sieve_extend.c ****         debug { printf("Range start+step %ju not at start of vector %ju\n",(uintmax_t)range_start+(
 467:sieve_extend.c **** 
 468:sieve_extend.c ****         range_start_atvector += VECTOR_SIZE; // find next vector
 469:sieve_extend.c ****         if (unlikely(range_start_atvector > range_stop)) { // we should not be here; just handle wi
 470:sieve_extend.c ****             debug2 printf("..Marking and returning without vector\n");
 471:sieve_extend.c **** 
 472:sieve_extend.c ****             for (counter_t index = range_start; index <= range_stop; index += step) 
 473:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 474:sieve_extend.c ****             return;                 
 475:sieve_extend.c ****         }
 476:sieve_extend.c **** 
 477:sieve_extend.c ****         debug2 printf("..Marking without vector until %ju\n",(uintmax_t)range_start_atvector);
 478:sieve_extend.c ****         // register counter_t index = range_start; // outside to later adjust range_start
 479:sieve_extend.c ****         //#pragma GCC unroll 16
 480:sieve_extend.c ****         #pragma GCC ivdep 
 481:sieve_extend.c ****         for (; range_start <= range_start_atvector; range_start += step) 
 482:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
GAS LISTING /tmp/cclewcPz.s 			page 11


 483:sieve_extend.c ****     }
 484:sieve_extend.c ****     
 485:sieve_extend.c ****     const counter_t range_stop_unique =  min(range_start + VECTOR_SIZE_counter * step, range_stop);
 486:sieve_extend.c **** 
 487:sieve_extend.c ****     //#pragma GCC unroll 16
 488:sieve_extend.c ****     #pragma GCC ivdep 
 489:sieve_extend.c ****     for (counter_t index = range_start; index < range_stop_unique;) {
 490:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 491:sieve_extend.c ****         register bitvector_t quadmask = { };
 492:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 493:sieve_extend.c ****         
 494:sieve_extend.c ****         // build a quadmask
 495:sieve_extend.c ****         //#pragma GCC unroll 16
 496:sieve_extend.c ****         #pragma GCC ivdep 
 497:sieve_extend.c ****         do {
 498:sieve_extend.c ****             quadmask[word] |= markmask(index);
 499:sieve_extend.c ****             index += step;
 500:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 501:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 502:sieve_extend.c ****         
 503:sieve_extend.c ****         // use mask on all n*step multiples
 504:sieve_extend.c ****         register counter_t current_vector = current_vector_start_word >> (SHIFT_VECTOR - SHIFT_WORD
 505:sieve_extend.c ****         // const counter_t range_stop_vector = vectorindex(range_stop);
 506:sieve_extend.c **** 
 507:sieve_extend.c ****         applyMask_vector_ptr(bitarray_vector, step, range_stop, quadmask, current_vector);
 508:sieve_extend.c ****     }
 509:sieve_extend.c **** }
 510:sieve_extend.c **** 
 511:sieve_extend.c **** static void extendSieve_smallSize(bitword_t* __restrict bitarray, const counter_t source_start, con
  90              		.loc 1 511 153 view -0
  91              		.cfi_startproc
 512:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
  92              		.loc 1 512 5 view .LVU1
 513:sieve_extend.c ****     // debug { printf("...At start. "); dump_bitarray(bitarray, 4); }
 514:sieve_extend.c **** 
 515:sieve_extend.c ****     const counter_t source_word = wordindex(source_start);
  93              		.loc 1 515 5 view .LVU2
 516:sieve_extend.c ****     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_start)) | (bitarray[sou
  94              		.loc 1 516 5 view .LVU3
  95              	# sieve_extend.c:511: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 511:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
  96              		.loc 1 511 153 is_stmt 0 view .LVU4
  97 0000 55       		push	rbp	#
  98              		.cfi_def_cfa_offset 16
  99              		.cfi_offset 6, -16
 100 0001 4989D1   		mov	r9, rdx	# size, tmp576
 101              	# sieve_extend.c:515:     const counter_t source_word = wordindex(source_start);
 515:sieve_extend.c ****     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_start)) | (bitarray[sou
 102              		.loc 1 515 21 view .LVU5
 103 0004 4889F0   		mov	rax, rsi	# source_word, source_start
 104              	# sieve_extend.c:511: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 511:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 105              		.loc 1 511 153 view .LVU6
 106 0007 4889E5   		mov	rbp, rsp	#,
 107              		.cfi_def_cfa_register 6
 108              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 109              		.loc 1 516 134 view .LVU7
GAS LISTING /tmp/cclewcPz.s 			page 12


 110 000a 89F2     		mov	edx, esi	# tmp334, source_start
 111              	.LVL1:
 112              	# sieve_extend.c:511: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 511:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 113              		.loc 1 511 153 view .LVU8
 114 000c 4157     		push	r15	#
 115              	# sieve_extend.c:515:     const counter_t source_word = wordindex(source_start);
 515:sieve_extend.c ****     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_start)) | (bitarray[sou
 116              		.loc 1 515 21 view .LVU9
 117 000e 48C1E806 		shr	rax, 6	# source_word,
 118              	.LVL2:
 119              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 120              		.loc 1 516 134 view .LVU10
 121 0012 83E23F   		and	edx, 63	# tmp334,
 122              	# sieve_extend.c:511: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 511:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 123              		.loc 1 511 153 view .LVU11
 124 0015 4156     		push	r14	#
 125              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 126              		.loc 1 516 133 view .LVU12
 127 0017 41B84000 		mov	r8d, 64	# tmp336,
 127      0000
 128              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 129              		.loc 1 516 167 view .LVU13
 130 001d 4589CB   		mov	r11d, r9d	# tmp342, size
 131              	# sieve_extend.c:511: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 511:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 132              		.loc 1 511 153 view .LVU14
 133 0020 4155     		push	r13	#
 134              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 135              		.loc 1 516 133 view .LVU15
 136 0022 4129D0   		sub	r8d, edx	# tmp335, tmp334
 137              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 138              		.loc 1 516 167 view .LVU16
 139 0025 41F7D3   		not	r11d	# tmp342
 140              	# sieve_extend.c:511: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 511:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 141              		.loc 1 511 153 view .LVU17
 142 0028 4154     		push	r12	#
 143              		.cfi_offset 15, -24
 144              		.cfi_offset 14, -32
 145              		.cfi_offset 13, -40
 146              		.cfi_offset 12, -48
 147              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 148              		.loc 1 516 167 view .LVU18
 149 002a 49C7C4FF 		mov	r12, -1	# tmp345,
 149      FFFFFF
 150 0031 C442A3F7 		shrx	r13, r12, r11	# tmp344, tmp345, tmp342
 150      EC
 151              	# sieve_extend.c:511: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 511:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 152              		.loc 1 511 153 view .LVU19
 153 0036 53       		push	rbx	#
 154              		.cfi_offset 3, -56
 155 0037 4889CB   		mov	rbx, rcx	# destination_stop, tmp577
 156              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 157              		.loc 1 516 58 view .LVU20
GAS LISTING /tmp/cclewcPz.s 			page 13


 158 003a 488B0CC7 		mov	rcx, QWORD PTR [rdi+rax*8]	# *_5, *_5
 159              	.LVL3:
 160              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 161              		.loc 1 516 112 view .LVU21
 162 003e C462B9F7 		shlx	r8, QWORD PTR 8[rdi+rax*8], r8	# tmp337, *_11, tmp335
 162      44C708
 163              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 164              		.loc 1 516 58 view .LVU22
 165 0045 C462CBF7 		shrx	r10, rcx, rsi	# tmp339, *_5, source_start
 165      D1
 166              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 167              		.loc 1 516 85 view .LVU23
 168 004a 4D09D0   		or	r8, r10	# tmp341, tmp339
 169              	# sieve_extend.c:511: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 511:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 170              		.loc 1 511 153 view .LVU24
 171 004d 4883E4E0 		and	rsp, -32	#,
 172              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 173              		.loc 1 516 24 view .LVU25
 174 0051 4D21E8   		and	r8, r13	# pattern, tmp344
 175              	.LVL4:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 176              		.loc 1 517 5 is_stmt 1 view .LVU26
 177              	.LBB310:
 178              		.loc 1 517 10 view .LVU27
 179              		.loc 1 517 54 view .LVU28
 180              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 181              		.loc 1 517 5 is_stmt 0 view .LVU29
 182 0054 4983F940 		cmp	r9, 64	# size,
 183 0058 0F87C200 		ja	.L2	#,
 183      0000
 184 005e 4D89CE   		mov	r14, r9	# pattern_size, size
 185              	.LVL5:
 186              	.L3:
 518:sieve_extend.c ****         pattern |= (pattern << pattern_size);
 187              		.loc 1 518 9 is_stmt 1 discriminator 3 view .LVU30
 188              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 189              		.loc 1 517 103 is_stmt 0 discriminator 3 view .LVU31
 190 0061 4B8D0436 		lea	rax, [r14+r14]	# pattern_size,
 191              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 192              		.loc 1 518 29 discriminator 3 view .LVU32
 193 0065 C44289F7 		shlx	r15, r8, r14	# _23, pattern, pattern_size
 193      F8
 194              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 195              		.loc 1 518 17 discriminator 3 view .LVU33
 196 006a 4D09F8   		or	r8, r15	# pattern, _23
 197              	.LVL6:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 198              		.loc 1 517 90 is_stmt 1 discriminator 3 view .LVU34
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 199              		.loc 1 517 54 discriminator 3 view .LVU35
 200              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 201              		.loc 1 517 5 is_stmt 0 discriminator 3 view .LVU36
 202 006d 4883F840 		cmp	rax, 64	# pattern_size,
 203 0071 0F87A900 		ja	.L2	#,
GAS LISTING /tmp/cclewcPz.s 			page 14


 203      0000
 204              		.loc 1 518 9 is_stmt 1 view .LVU37
 205              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 206              		.loc 1 517 103 is_stmt 0 view .LVU38
 207 0077 4A8D0CB5 		lea	rcx, 0[0+r14*4]	# pattern_size,
 207      00000000 
 208              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 209              		.loc 1 518 29 view .LVU39
 210 007f C4C2F9F7 		shlx	rdx, r8, rax	# _23, pattern, pattern_size
 210      D0
 211              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 212              		.loc 1 518 17 view .LVU40
 213 0084 4909D0   		or	r8, rdx	# pattern, _23
 214              	.LVL7:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 215              		.loc 1 517 90 is_stmt 1 view .LVU41
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 216              		.loc 1 517 54 view .LVU42
 217              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 218              		.loc 1 517 5 is_stmt 0 view .LVU43
 219 0087 4883F940 		cmp	rcx, 64	# pattern_size,
 220 008b 0F878F00 		ja	.L2	#,
 220      0000
 221              		.loc 1 518 9 is_stmt 1 view .LVU44
 222              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 223              		.loc 1 517 103 is_stmt 0 view .LVU45
 224 0091 4E8D1CF5 		lea	r11, 0[0+r14*8]	# pattern_size,
 224      00000000 
 225              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 226              		.loc 1 518 29 view .LVU46
 227 0099 C442F1F7 		shlx	r10, r8, rcx	# _23, pattern, pattern_size
 227      D0
 228              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 229              		.loc 1 518 17 view .LVU47
 230 009e 4D09D0   		or	r8, r10	# pattern, _23
 231              	.LVL8:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 232              		.loc 1 517 90 is_stmt 1 view .LVU48
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 233              		.loc 1 517 54 view .LVU49
 234              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 235              		.loc 1 517 5 is_stmt 0 view .LVU50
 236 00a1 4983FB40 		cmp	r11, 64	# pattern_size,
 237 00a5 7779     		ja	.L2	#,
 238              		.loc 1 518 9 is_stmt 1 view .LVU51
 239              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 240              		.loc 1 517 103 is_stmt 0 view .LVU52
 241 00a7 4D89F5   		mov	r13, r14	# pattern_size, pattern_size
 242              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 243              		.loc 1 518 29 view .LVU53
 244 00aa C442A1F7 		shlx	r12, r8, r11	# _23, pattern, pattern_size
 244      E0
GAS LISTING /tmp/cclewcPz.s 			page 15


 245              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 246              		.loc 1 517 103 view .LVU54
 247 00af 49C1E504 		sal	r13, 4	# pattern_size,
 248              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 249              		.loc 1 518 17 view .LVU55
 250 00b3 4D09E0   		or	r8, r12	# pattern, _23
 251              	.LVL9:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 252              		.loc 1 517 90 is_stmt 1 view .LVU56
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 253              		.loc 1 517 54 view .LVU57
 254              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 255              		.loc 1 517 5 is_stmt 0 view .LVU58
 256 00b6 4983FD40 		cmp	r13, 64	# pattern_size,
 257 00ba 7764     		ja	.L2	#,
 258              		.loc 1 518 9 is_stmt 1 view .LVU59
 259              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 260              		.loc 1 517 103 is_stmt 0 view .LVU60
 261 00bc 4C89F0   		mov	rax, r14	# pattern_size, pattern_size
 262              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 263              		.loc 1 518 29 view .LVU61
 264 00bf C44291F7 		shlx	r15, r8, r13	# _23, pattern, pattern_size
 264      F8
 265              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 266              		.loc 1 517 103 view .LVU62
 267 00c4 48C1E005 		sal	rax, 5	# pattern_size,
 268              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 269              		.loc 1 518 17 view .LVU63
 270 00c8 4D09F8   		or	r8, r15	# pattern, _23
 271              	.LVL10:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 272              		.loc 1 517 90 is_stmt 1 view .LVU64
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 273              		.loc 1 517 54 view .LVU65
 274              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 275              		.loc 1 517 5 is_stmt 0 view .LVU66
 276 00cb 4883F840 		cmp	rax, 64	# pattern_size,
 277 00cf 774F     		ja	.L2	#,
 278              		.loc 1 518 9 is_stmt 1 view .LVU67
 279              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 280              		.loc 1 517 103 is_stmt 0 view .LVU68
 281 00d1 4C89F1   		mov	rcx, r14	# pattern_size, pattern_size
 282              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 283              		.loc 1 518 29 view .LVU69
 284 00d4 C4C2F9F7 		shlx	rdx, r8, rax	# _23, pattern, pattern_size
 284      D0
 285              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 286              		.loc 1 517 103 view .LVU70
 287 00d9 48C1E106 		sal	rcx, 6	# pattern_size,
 288              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
GAS LISTING /tmp/cclewcPz.s 			page 16


 289              		.loc 1 518 17 view .LVU71
 290 00dd 4909D0   		or	r8, rdx	# pattern, _23
 291              	.LVL11:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 292              		.loc 1 517 90 is_stmt 1 view .LVU72
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 293              		.loc 1 517 54 view .LVU73
 294              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 295              		.loc 1 517 5 is_stmt 0 view .LVU74
 296 00e0 4883F940 		cmp	rcx, 64	# pattern_size,
 297 00e4 773A     		ja	.L2	#,
 298              		.loc 1 518 9 is_stmt 1 view .LVU75
 299              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 300              		.loc 1 517 103 is_stmt 0 view .LVU76
 301 00e6 4D89F3   		mov	r11, r14	# pattern_size, pattern_size
 302              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 303              		.loc 1 518 29 view .LVU77
 304 00e9 C442F1F7 		shlx	r10, r8, rcx	# _23, pattern, pattern_size
 304      D0
 305              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 306              		.loc 1 517 103 view .LVU78
 307 00ee 49C1E307 		sal	r11, 7	# pattern_size,
 308              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 309              		.loc 1 518 17 view .LVU79
 310 00f2 4D09D0   		or	r8, r10	# pattern, _23
 311              	.LVL12:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 312              		.loc 1 517 90 is_stmt 1 view .LVU80
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 313              		.loc 1 517 54 view .LVU81
 314              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 315              		.loc 1 517 5 is_stmt 0 view .LVU82
 316 00f5 4983FB40 		cmp	r11, 64	# pattern_size,
 317 00f9 7725     		ja	.L2	#,
 318              		.loc 1 518 9 is_stmt 1 view .LVU83
 319              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 320              		.loc 1 517 103 is_stmt 0 view .LVU84
 321 00fb 49C1E608 		sal	r14, 8	# pattern_size,
 322              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 323              		.loc 1 518 29 view .LVU85
 324 00ff C442A1F7 		shlx	r12, r8, r11	# _23, pattern, pattern_size
 324      E0
 325              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 326              		.loc 1 518 17 view .LVU86
 327 0104 4D09E0   		or	r8, r12	# pattern, _23
 328              	.LVL13:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 329              		.loc 1 517 90 is_stmt 1 view .LVU87
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 330              		.loc 1 517 54 view .LVU88
 331              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
GAS LISTING /tmp/cclewcPz.s 			page 17


 332              		.loc 1 517 5 is_stmt 0 view .LVU89
 333 0107 4983FE40 		cmp	r14, 64	# pattern_size,
 334 010b 0F8650FF 		jbe	.L3	#,
 334      FFFF
 335              	.LVL14:
 336 0111 66662E0F 		.p2align 4
 336      1F840000 
 336      0000000F 
 336      1F4000
 337              		.p2align 3
 338              	.L2:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 339              		.loc 1 517 5 view .LVU90
 340              	.LBE310:
 519:sieve_extend.c **** 
 520:sieve_extend.c ****     const counter_t destination_start = source_start + size;
 341              		.loc 1 520 5 is_stmt 1 view .LVU91
 342              	# sieve_extend.c:520:     const counter_t destination_start = source_start + size;
 343              		.loc 1 520 21 is_stmt 0 view .LVU92
 344 0120 4A8D0C0E 		lea	rcx, [rsi+r9]	# destination_start,
 345              	.LVL15:
 521:sieve_extend.c ****     counter_t destination_start_word = wordindex(destination_start);
 346              		.loc 1 521 5 is_stmt 1 view .LVU93
 347              	# sieve_extend.c:522:     counter_t destination_stop_word = wordindex(destination_stop);
 522:sieve_extend.c ****     counter_t destination_stop_word = wordindex(destination_stop);
 348              		.loc 1 522 15 is_stmt 0 view .LVU94
 349 0124 4989DC   		mov	r12, rbx	# destination_stop_word, destination_stop
 350              	# sieve_extend.c:521:     counter_t destination_start_word = wordindex(destination_start);
 521:sieve_extend.c ****     counter_t destination_start_word = wordindex(destination_start);
 351              		.loc 1 521 15 view .LVU95
 352 0127 4989CB   		mov	r11, rcx	# destination_start_word, destination_start
 353 012a F7D3     		not	ebx	# tmp348
 354              	.LVL16:
 521:sieve_extend.c ****     counter_t destination_start_word = wordindex(destination_start);
 355              		.loc 1 521 15 view .LVU96
 356 012c 49C1EB06 		shr	r11, 6	# destination_start_word,
 357              	.LVL17:
 358              		.loc 1 522 5 is_stmt 1 view .LVU97
 359 0130 49C7C5FF 		mov	r13, -1	# tmp350,
 359      FFFFFF
 360              	# sieve_extend.c:522:     counter_t destination_stop_word = wordindex(destination_stop);
 361              		.loc 1 522 15 is_stmt 0 view .LVU98
 362 0137 49C1EC06 		shr	r12, 6	# destination_stop_word,
 363              	.LVL18:
 523:sieve_extend.c ****     if (destination_start_word >= destination_stop_word) {
 364              		.loc 1 523 5 is_stmt 1 view .LVU99
 365 013b 4A8D34DD 		lea	rsi, 0[0+r11*8]	# _116,
 365      00000000 
 366              	.LVL19:
 367              		.loc 1 523 5 is_stmt 0 view .LVU100
 368 0143 4C8D3437 		lea	r14, [rdi+rsi]	# _117,
 369              	# sieve_extend.c:523:     if (destination_start_word >= destination_stop_word) {
 370              		.loc 1 523 8 view .LVU101
 371 0147 4D39E3   		cmp	r11, r12	# destination_start_word, destination_stop_word
 372 014a C4C2F1F7 		shlx	rax, r8, rcx	# _120, pattern, destination_start
 372      C0
 373 014f 4D8B3E   		mov	r15, QWORD PTR [r14]	# pretmp_118, *_117
GAS LISTING /tmp/cclewcPz.s 			page 18


 374 0152 C4C2E3F7 		shrx	rbx, r13, rbx	# _124, tmp350, tmp348
 374      DD
 375 0157 0F833305 		jnb	.L49	#,
 375      0000
 524:sieve_extend.c ****         bitarray[destination_start_word] |= (pattern << bitindex(destination_start)) & chopmask(des
 525:sieve_extend.c ****         return;
 526:sieve_extend.c ****     }
 527:sieve_extend.c **** 
 528:sieve_extend.c ****     bitarray[destination_start_word] |= (pattern << bitindex(destination_start));
 376              		.loc 1 528 5 is_stmt 1 view .LVU102
 377              	# sieve_extend.c:528:     bitarray[destination_start_word] |= (pattern << bitindex(destination_star
 378              		.loc 1 528 38 is_stmt 0 view .LVU103
 379 015d 4C09F8   		or	rax, r15	# tmp353, pretmp_118
 380              	# sieve_extend.c:531:     register const bitshift_t pattern_shift = WORD_SIZE_counter % size;
 529:sieve_extend.c **** 
 530:sieve_extend.c ****     // TODO: refactor according to smallstep
 531:sieve_extend.c ****     register const bitshift_t pattern_shift = WORD_SIZE_counter % size;
 381              		.loc 1 531 31 view .LVU104
 382 0160 31D2     		xor	edx, edx	# tmp355
 383              	# sieve_extend.c:528:     bitarray[destination_start_word] |= (pattern << bitindex(destination_star
 528:sieve_extend.c **** 
 384              		.loc 1 528 38 view .LVU105
 385 0162 498906   		mov	QWORD PTR [r14], rax	# *_117, tmp353
 386              		.loc 1 531 5 is_stmt 1 view .LVU106
 387              	# sieve_extend.c:531:     register const bitshift_t pattern_shift = WORD_SIZE_counter % size;
 388              		.loc 1 531 31 is_stmt 0 view .LVU107
 389 0165 41BE4000 		mov	r14d, 64	# tmp354,
 389      0000
 390 016b 4C89F0   		mov	rax, r14	# tmp356, tmp354
 391 016e 488D7437 		lea	rsi, 8[rdi+rsi]	# vectp.138,
 391      08
 392 0173 49F7F1   		div	r9	# size
 393              	.LVL20:
 532:sieve_extend.c ****     register const bitshift_t pattern_size = WORD_SIZE_bitshift - pattern_shift;
 394              		.loc 1 532 5 is_stmt 1 view .LVU108
 533:sieve_extend.c ****     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destination_start)) & WORDMASK;
 395              		.loc 1 533 5 view .LVU109
 534:sieve_extend.c ****     register counter_t loop_range = destination_stop_word - destination_start_word;
 396              		.loc 1 534 5 view .LVU110
 397 0176 48C1EE03 		shr	rsi, 3	# tmp363,
 398              	# sieve_extend.c:534:     register counter_t loop_range = destination_stop_word - destination_start
 399              		.loc 1 534 24 is_stmt 0 view .LVU111
 400 017a 4D89E1   		mov	r9, r12	# loop_range, destination_stop_word
 401              	.LVL21:
 402              	# sieve_extend.c:533:     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destinati
 533:sieve_extend.c ****     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destination_start)) & WORDMASK;
 403              		.loc 1 533 89 view .LVU112
 404 017d 48F7D9   		neg	rcx	# tmp359
 405              	.LVL22:
 406              	# sieve_extend.c:534:     register counter_t loop_range = destination_stop_word - destination_start
 407              		.loc 1 534 24 view .LVU113
 408 0180 4D29D9   		sub	r9, r11	# loop_range, destination_start_word
 409              	.LVL23:
 535:sieve_extend.c ****     destination_start_word++;
 410              		.loc 1 535 5 is_stmt 1 view .LVU114
 411              	# sieve_extend.c:532:     register const bitshift_t pattern_size = WORD_SIZE_bitshift - pattern_shi
 532:sieve_extend.c ****     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destination_start)) & WORDMASK;
GAS LISTING /tmp/cclewcPz.s 			page 19


 412              		.loc 1 532 31 is_stmt 0 view .LVU115
 413 0183 4C89F0   		mov	rax, r14	# tmp354, tmp354
 414 0186 48F7DE   		neg	rsi	# tmp364
 415              	# sieve_extend.c:533:     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destinati
 533:sieve_extend.c ****     register counter_t loop_range = destination_stop_word - destination_start_word;
 416              		.loc 1 533 25 view .LVU116
 417 0189 83E13F   		and	ecx, 63	# shift,
 418              	.LVL24:
 533:sieve_extend.c ****     register counter_t loop_range = destination_stop_word - destination_start_word;
 419              		.loc 1 533 25 view .LVU117
 420 018c 83E603   		and	esi, 3	# prolog_loop_niters.139,
 421              	# sieve_extend.c:535:     destination_start_word++;
 422              		.loc 1 535 27 view .LVU118
 423 018f 4D8D5301 		lea	r10, 1[r11]	# destination_start_word,
 424              	.LVL25:
 425              	.LBB311:
 536:sieve_extend.c ****     
 537:sieve_extend.c ****     //#pragma GCC unroll 16
 538:sieve_extend.c ****     #pragma GCC ivdep
 539:sieve_extend.c ****     for (counter_t i=0; i<=loop_range; ++i ) {
 426              		.loc 1 539 10 is_stmt 1 view .LVU119
 427              		.loc 1 539 25 view .LVU120
 428 0193 4D8D6901 		lea	r13, 1[r9]	# niters.137,
 429 0197 894C24F4 		mov	DWORD PTR -12[rsp], ecx	# %sfp, shift
 430 019b 895424F8 		mov	DWORD PTR -8[rsp], edx	# %sfp, tmp355
 431              	.LBE311:
 432              	# sieve_extend.c:532:     register const bitshift_t pattern_size = WORD_SIZE_bitshift - pattern_shi
 532:sieve_extend.c ****     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destination_start)) & WORDMASK;
 433              		.loc 1 532 31 is_stmt 0 view .LVU121
 434 019f 4829D0   		sub	rax, rdx	# tmp354, tmp355
 435              	.LVL26:
 532:sieve_extend.c ****     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destination_start)) & WORDMASK;
 436              		.loc 1 532 31 view .LVU122
 437 01a2 894424FC 		mov	DWORD PTR -4[rsp], eax	# %sfp, pattern_size
 438 01a6 4983F90A 		cmp	r9, 10	# loop_range,
 439 01aa 0F860505 		jbe	.L11	#,
 439      0000
 440 01b0 4885F6   		test	rsi, rsi	# prolog_loop_niters.139
 441 01b3 0F84F404 		je	.L12	#,
 441      0000
 442              	.LBB312:
 540:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 443              		.loc 1 540 9 is_stmt 1 view .LVU123
 444              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 445              		.loc 1 540 72 is_stmt 0 view .LVU124
 446 01b9 4189C7   		mov	r15d, eax	# tmp365, pattern_size
 447 01bc 4129CF   		sub	r15d, ecx	# tmp365, shift
 448              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 449              		.loc 1 540 55 view .LVU125
 450 01bf C44281F7 		shlx	r14, r8, r15	# tmp366, pattern, tmp365
 450      F0
 451              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 452              		.loc 1 540 127 view .LVU126
 453 01c4 C442F3F7 		shrx	r15, r8, rcx	# tmp367, pattern, shift
 453      F8
 454              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 455              		.loc 1 540 116 view .LVU127
GAS LISTING /tmp/cclewcPz.s 			page 20


 456 01c9 4D09FE   		or	r14, r15	# tmp368, tmp367
 457 01cc 4E8934D7 		mov	QWORD PTR [rdi+r10*8], r14	# *_317, tmp368
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 458              		.loc 1 539 40 is_stmt 1 view .LVU128
 459              	.LVL27:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 460              		.loc 1 539 25 view .LVU129
 461 01d0 4883FE01 		cmp	rsi, 1	# prolog_loop_niters.139,
 462              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 463              		.loc 1 539 40 is_stmt 0 view .LVU130
 464 01d4 41BE0100 		mov	r14d, 1	# i,
 464      0000
 465 01da 7452     		je	.L7	#,
 466              		.loc 1 540 9 is_stmt 1 view .LVU131
 467              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 468              		.loc 1 540 81 is_stmt 0 view .LVU132
 469 01dc 448D3411 		lea	r14d, [rcx+rdx]	# tmp369,
 470              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 471              		.loc 1 540 72 view .LVU133
 472 01e0 4189C7   		mov	r15d, eax	# tmp371, pattern_size
 473              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 474              		.loc 1 540 99 view .LVU134
 475 01e3 4183E63F 		and	r14d, 63	# _328,
 476              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 477              		.loc 1 540 72 view .LVU135
 478 01e7 4529F7   		sub	r15d, r14d	# tmp371, _328
 479              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 480              		.loc 1 540 127 view .LVU136
 481 01ea C4428BF7 		shrx	r14, r8, r14	# tmp373, pattern, _328
 481      F0
 482              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 483              		.loc 1 540 55 view .LVU137
 484 01ef C44281F7 		shlx	r15, r8, r15	# tmp372, pattern, tmp371
 484      F8
 485              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 486              		.loc 1 540 116 view .LVU138
 487 01f4 4D09FE   		or	r14, r15	# tmp374, tmp372
 488 01f7 4E8974DF 		mov	QWORD PTR 16[rdi+r11*8], r14	# *_334, tmp374
 488      10
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 489              		.loc 1 539 40 is_stmt 1 view .LVU139
 490              	.LVL28:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 491              		.loc 1 539 25 view .LVU140
 492 01fc 4883FE03 		cmp	rsi, 3	# prolog_loop_niters.139,
 493              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 494              		.loc 1 539 40 is_stmt 0 view .LVU141
 495 0200 41BE0200 		mov	r14d, 2	# i,
 495      0000
 496 0206 7526     		jne	.L7	#,
 497              		.loc 1 540 9 is_stmt 1 view .LVU142
 498              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 499              		.loc 1 540 81 is_stmt 0 view .LVU143
 500 0208 448D3451 		lea	r14d, [rcx+rdx*2]	# tmp376,
 501              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
GAS LISTING /tmp/cclewcPz.s 			page 21


 502              		.loc 1 540 72 view .LVU144
 503 020c 4189C7   		mov	r15d, eax	# tmp378, pattern_size
 504              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 505              		.loc 1 540 99 view .LVU145
 506 020f 4183E63F 		and	r14d, 63	# _104,
 507              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 508              		.loc 1 540 72 view .LVU146
 509 0213 4529F7   		sub	r15d, r14d	# tmp378, _104
 510              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 511              		.loc 1 540 127 view .LVU147
 512 0216 C4428BF7 		shrx	r14, r8, r14	# tmp380, pattern, _104
 512      F0
 513              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 514              		.loc 1 540 55 view .LVU148
 515 021b C44281F7 		shlx	r15, r8, r15	# tmp379, pattern, tmp378
 515      F8
 516              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 517              		.loc 1 540 116 view .LVU149
 518 0220 4D09FE   		or	r14, r15	# tmp381, tmp379
 519 0223 4E8974DF 		mov	QWORD PTR 24[rdi+r11*8], r14	# *_94, tmp381
 519      18
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 520              		.loc 1 539 40 is_stmt 1 view .LVU150
 521              	.LVL29:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 522              		.loc 1 539 25 view .LVU151
 523              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 524              		.loc 1 539 40 is_stmt 0 view .LVU152
 525 0228 41BE0300 		mov	r14d, 3	# i,
 525      0000
 526              	.LVL30:
 527              	.L7:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 528              		.loc 1 539 40 view .LVU153
 529 022e 4929F5   		sub	r13, rsi	# niters.140, prolog_loop_niters.139
 530 0231 4C01D6   		add	rsi, r10	# tmp388, destination_start_word
 531 0234 4D89EB   		mov	r11, r13	# bnd.141, niters.140
 532 0237 C4C1F96E 		vmovq	xmm3, r14	# i, i
 532      DE
 533 023c 49C1EB03 		shr	r11, 3	# bnd.141,
 534 0240 488D34F7 		lea	rsi, [rdi+rsi*8]	# ivtmp.159,
 535 0244 49C1E306 		sal	r11, 6	# tmp391,
 536 0248 C4627D59 		vpbroadcastq	ymm9, xmm3	# tmp382, i
 536      CB
 537 024d C4C1F96E 		vmovq	xmm4, r8	# pattern, pattern
 537      E0
 538 0252 4D8D3C33 		lea	r15, [r11+rsi]	# _344,
 539 0256 4183E340 		and	r11d, 64	# tmp391,
 540 025a C535D435 		vpaddq	ymm14, ymm9, YMMWORD PTR .LC0[rip]	# vect_vec_iv_.144, tmp382,
 540      00000000 
 541 0262 C4E27D58 		vpbroadcastd	ymm6, DWORD PTR -8[rsp]	# vect_cst__146, %sfp
 541      7424F8
 542 0269 C4E27D59 		vpbroadcastq	ymm2, xmm4	# vect_cst__156, pattern
 542      D4
 543 026e C4E27D58 		vpbroadcastd	ymm5, DWORD PTR -12[rsp]	# vect_cst__148, %sfp
 543      6C24F4
GAS LISTING /tmp/cclewcPz.s 			page 22


 544 0275 C4627D58 		vpbroadcastd	ymm12, DWORD PTR -4[rsp]	# vect_cst__152, %sfp
 544      6424FC
 545 027c C57D6F05 		vmovdqa	ymm8, YMMWORD PTR .LC1[rip]	# tmp496,
 545      00000000 
 546 0284 C5FD6F3D 		vmovdqa	ymm7, YMMWORD PTR .LC2[rip]	# tmp497,
 546      00000000 
 547 028c C57D6F2D 		vmovdqa	ymm13, YMMWORD PTR .LC3[rip]	# tmp498,
 547      00000000 
 548 0294 0F849600 		je	.L9	#,
 548      0000
 549              	.LVL31:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 550              		.loc 1 539 40 view .LVU154
 551 029a C57D7FF1 		vmovdqa	ymm1, ymm14	# vect_vec_iv_.144, vect_vec_iv_.144
 552 029e 4883C640 		add	rsi, 64	# ivtmp.159,
 553              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 554              		.loc 1 540 81 view .LVU155
 555 02a2 C575D4D7 		vpaddq	ymm10, ymm1, ymm7	# vect_vec_iv_.144, vect_vec_iv_.144, tmp497
 556 02a6 C4410DD4 		vpaddq	ymm14, ymm14, ymm8	# vect_vec_iv_.144, vect_vec_iv_.144, tmp496
 556      F0
 557              		.loc 1 540 9 is_stmt 1 view .LVU156
 558              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 559              		.loc 1 540 81 is_stmt 0 view .LVU157
 560 02ab C4C37546 		vperm2i128	ymm0, ymm1, ymm10, 32	# tmp538, vect_vec_iv_.144, vect_vec_iv_.144,
 560      C220
 561 02b1 C4437546 		vperm2i128	ymm11, ymm1, ymm10, 49	# tmp539, vect_vec_iv_.144, vect_vec_iv_.144,
 561      DA31
 562 02b7 C57D70F8 		vpshufd	ymm15, ymm0, 216	# tmp540, tmp538,
 562      D8
 563 02bc C4C17D70 		vpshufd	ymm3, ymm11, 216	# tmp541, tmp539,
 563      DBD8
 564 02c2 C5056CCB 		vpunpcklqdq	ymm9, ymm15, ymm3	# tmp542, tmp540, tmp541
 565 02c6 C4C24D40 		vpmulld	ymm4, ymm6, ymm9	# vect__45.146, vect_cst__146, tmp542
 565      E1
 566              	.LVL32:
 567              		.loc 1 540 81 view .LVU158
 568 02cb C5DDFECD 		vpaddd	ymm1, ymm4, ymm5	# vect__47.147, vect__45.146, vect_cst__148
 569              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 570              		.loc 1 540 99 view .LVU159
 571 02cf C4C175DB 		vpand	ymm0, ymm1, ymm13	# vect__48.148, vect__47.147, tmp498
 571      C5
 572              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 573              		.loc 1 540 72 view .LVU160
 574 02d4 C51DFAF8 		vpsubd	ymm15, ymm12, ymm0	# vect__49.149, vect_cst__152, vect__48.148
 575              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 576              		.loc 1 540 116 view .LVU161
 577 02d8 C4627D35 		vpmovzxdq	ymm11, xmm0	#, vect__48.148
 577      D8
 578 02dd C4427D35 		vpmovzxdq	ymm10, xmm15	#, vect__49.149
 578      D7
 579 02e2 C442ED45 		vpsrlvq	ymm9, ymm2, ymm11	# vect_patt_136.153, vect_cst__156, vect_patt_137.152
 579      CB
 580 02e7 C4C2ED47 		vpsllvq	ymm3, ymm2, ymm10	# vect_patt_138.151, vect_cst__156, vect_patt_139.150
 580      DA
 581 02ec C4637D39 		vextracti128	xmm1, ymm15, 0x1	# tmp554, vect__49.149
 581      F901
 582 02f2 C4C165EB 		vpor	ymm4, ymm3, ymm9	# vect__55.154, vect_patt_138.151, vect_patt_136.153
GAS LISTING /tmp/cclewcPz.s 			page 23


 582      E1
 583 02f7 C4E37D39 		vextracti128	xmm0, ymm0, 0x1	# tmp557, vect__48.148
 583      C001
 584 02fd C4627D35 		vpmovzxdq	ymm15, xmm1	# vect_patt_139.150, tmp554
 584      F9
 585 0302 C4E27D35 		vpmovzxdq	ymm3, xmm0	# vect_patt_137.152, tmp557
 585      D8
 586 0307 C442ED47 		vpsllvq	ymm10, ymm2, ymm15	# vect_patt_138.151, vect_cst__156, vect_patt_139.150
 586      D7
 587 030c C462ED45 		vpsrlvq	ymm11, ymm2, ymm3	# vect_patt_136.153, vect_cst__156, vect_patt_137.152
 587      DB
 588              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 589              		.loc 1 540 44 view .LVU162
 590 0311 C5FD7F66 		vmovdqa	YMMWORD PTR -64[rsi], ymm4	# MEM[base: _341, offset: 0B], vect__55.154
 590      C0
 591              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 592              		.loc 1 540 116 view .LVU163
 593 0316 C4412DEB 		vpor	ymm9, ymm10, ymm11	# vect__55.154, vect_patt_138.151, vect_patt_136.153
 593      CB
 594              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 595              		.loc 1 540 44 view .LVU164
 596 031b C57D7F4E 		vmovdqa	YMMWORD PTR -32[rsi], ymm9	# MEM[base: _341, offset: 32B], vect__55.154
 596      E0
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 597              		.loc 1 539 40 is_stmt 1 view .LVU165
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 598              		.loc 1 539 25 view .LVU166
 599 0320 4C39FE   		cmp	rsi, r15	# ivtmp.159, _344
 600 0323 0F841201 		je	.L37	#,
 600      0000
 601 0329 0F1F8000 		.p2align 4
 601      000000
 602              		.p2align 3
 603              	.L9:
 604              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 605              		.loc 1 540 81 is_stmt 0 discriminator 3 view .LVU167
 606 0330 C58DD4CF 		vpaddq	ymm1, ymm14, ymm7	# vect_vec_iv_.144, vect_vec_iv_.144, tmp497
 607 0334 C4C10DD4 		vpaddq	ymm4, ymm14, ymm8	# vect_vec_iv_.144, vect_vec_iv_.144, tmp496
 607      E0
 608              		.loc 1 540 9 is_stmt 1 discriminator 3 view .LVU168
 609              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 610              		.loc 1 540 81 is_stmt 0 discriminator 3 view .LVU169
 611 0339 C4630D46 		vperm2i128	ymm15, ymm14, ymm1, 32	# tmp398, vect_vec_iv_.144, vect_vec_iv_.144,
 611      F920
 612 033f C4630D46 		vperm2i128	ymm14, ymm14, ymm1, 49	# tmp399, vect_vec_iv_.144, vect_vec_iv_.144,
 612      F131
 613 0345 C4417D70 		vpshufd	ymm10, ymm15, 216	# tmp396, tmp398,
 613      D7D8
 614 034b 4883EE80 		sub	rsi, -128	# ivtmp.159,
 615 034f C4C17D70 		vpshufd	ymm0, ymm14, 216	# tmp397, tmp399,
 615      C6D8
 616 0355 C5AD6CD8 		vpunpcklqdq	ymm3, ymm10, ymm0	# tmp400, tmp396, tmp397
 617 0359 C4624D40 		vpmulld	ymm11, ymm6, ymm3	# vect__45.146, vect_cst__146, tmp400
 617      DB
 618 035e C525FECD 		vpaddd	ymm9, ymm11, ymm5	# vect__47.147, vect__45.146, vect_cst__148
 619              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 620              		.loc 1 540 99 discriminator 3 view .LVU170
GAS LISTING /tmp/cclewcPz.s 			page 24


 621 0362 C44135DB 		vpand	ymm15, ymm9, ymm13	# vect__48.148, vect__47.147, tmp498
 621      FD
 622              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 623              		.loc 1 540 72 discriminator 3 view .LVU171
 624 0367 C4C11DFA 		vpsubd	ymm1, ymm12, ymm15	# vect__49.149, vect_cst__152, vect__48.148
 624      CF
 625              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 626              		.loc 1 540 116 discriminator 3 view .LVU172
 627 036c C4C27D35 		vpmovzxdq	ymm0, xmm15	#, vect__48.148
 627      C7
 628 0371 C4627D35 		vpmovzxdq	ymm14, xmm1	#, vect__49.149
 628      F1
 629 0376 C4E2ED45 		vpsrlvq	ymm3, ymm2, ymm0	# vect_patt_136.153, vect_cst__156, vect_patt_137.152
 629      D8
 630 037b C442ED47 		vpsllvq	ymm10, ymm2, ymm14	# vect_patt_138.151, vect_cst__156, vect_patt_139.150
 630      D6
 631 0380 C4C37D39 		vextracti128	xmm9, ymm1, 0x1	# tmp412, vect__49.149
 631      C901
 632 0386 C52DEBDB 		vpor	ymm11, ymm10, ymm3	# vect__55.154, vect_patt_138.151, vect_patt_136.153
 633 038a C4437D39 		vextracti128	xmm15, ymm15, 0x1	# tmp415, vect__48.148
 633      FF01
 634 0390 C4C27D35 		vpmovzxdq	ymm1, xmm9	# vect_patt_139.150, tmp412
 634      C9
 635 0395 C4427D35 		vpmovzxdq	ymm10, xmm15	# vect_patt_137.152, tmp415
 635      D7
 636 039a C462ED47 		vpsllvq	ymm14, ymm2, ymm1	# vect_patt_138.151, vect_cst__156, vect_patt_139.150
 636      F1
 637 039f C4C2ED45 		vpsrlvq	ymm0, ymm2, ymm10	# vect_patt_136.153, vect_cst__156, vect_patt_137.152
 637      C2
 638              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 639              		.loc 1 540 44 discriminator 3 view .LVU173
 640 03a4 C57D7F5E 		vmovdqa	YMMWORD PTR -128[rsi], ymm11	# MEM[base: _341, offset: 0B], vect__55.154
 640      80
 641              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 642              		.loc 1 540 81 discriminator 3 view .LVU174
 643 03a9 C55DD4DF 		vpaddq	ymm11, ymm4, ymm7	# vect_vec_iv_.144, vect_vec_iv_.144, tmp497
 644              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 645              		.loc 1 540 116 discriminator 3 view .LVU175
 646 03ad C58DEBD8 		vpor	ymm3, ymm14, ymm0	# vect__55.154, vect_patt_138.151, vect_patt_136.153
 647              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 648              		.loc 1 540 81 discriminator 3 view .LVU176
 649 03b1 C4435D46 		vperm2i128	ymm9, ymm4, ymm11, 32	# tmp513, vect_vec_iv_.144, vect_vec_iv_.144,
 649      CB20
 650 03b7 C4C17D70 		vpshufd	ymm1, ymm9, 216	# tmp515, tmp513,
 650      C9D8
 651 03bd C4415DD4 		vpaddq	ymm14, ymm4, ymm8	# vect_vec_iv_.144, vect_vec_iv_.144, tmp496
 651      F0
 652              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 653              		.loc 1 540 44 discriminator 3 view .LVU177
 654 03c2 C5FD7F5E 		vmovdqa	YMMWORD PTR -96[rsi], ymm3	# MEM[base: _341, offset: 32B], vect__55.154
 654      A0
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 655              		.loc 1 539 40 is_stmt 1 discriminator 3 view .LVU178
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 656              		.loc 1 539 25 discriminator 3 view .LVU179
 657              		.loc 1 540 9 discriminator 3 view .LVU180
 658              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
GAS LISTING /tmp/cclewcPz.s 			page 25


 659              		.loc 1 540 81 is_stmt 0 discriminator 3 view .LVU181
 660 03c7 C4C35D46 		vperm2i128	ymm4, ymm4, ymm11, 49	# tmp514, vect_vec_iv_.144, vect_vec_iv_.144,
 660      E331
 661 03cd C57D70FC 		vpshufd	ymm15, ymm4, 216	# tmp516, tmp514,
 661      D8
 662 03d2 C441756C 		vpunpcklqdq	ymm10, ymm1, ymm15	# tmp517, tmp515, tmp516
 662      D7
 663 03d7 C4C24D40 		vpmulld	ymm0, ymm6, ymm10	# vect__45.146, vect_cst__146, tmp517
 663      C2
 664 03dc C5FDFEDD 		vpaddd	ymm3, ymm0, ymm5	# vect__47.147, vect__45.146, vect_cst__148
 665              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 666              		.loc 1 540 99 discriminator 3 view .LVU182
 667 03e0 C44165DB 		vpand	ymm9, ymm3, ymm13	# vect__48.148, vect__47.147, tmp498
 667      CD
 668              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 669              		.loc 1 540 72 discriminator 3 view .LVU183
 670 03e5 C4C11DFA 		vpsubd	ymm4, ymm12, ymm9	# vect__49.149, vect_cst__152, vect__48.148
 670      E1
 671              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 672              		.loc 1 540 116 discriminator 3 view .LVU184
 673 03ea C4427D35 		vpmovzxdq	ymm15, xmm9	#, vect__48.148
 673      F9
 674 03ef C4627D35 		vpmovzxdq	ymm11, xmm4	#, vect__49.149
 674      DC
 675 03f4 C442ED45 		vpsrlvq	ymm10, ymm2, ymm15	# vect_patt_136.153, vect_cst__156, vect_patt_137.152
 675      D7
 676 03f9 C4C2ED47 		vpsllvq	ymm1, ymm2, ymm11	# vect_patt_138.151, vect_cst__156, vect_patt_139.150
 676      CB
 677 03fe C4E37D39 		vextracti128	xmm3, ymm4, 0x1	# tmp529, vect__49.149
 677      E301
 678 0404 C4C175EB 		vpor	ymm0, ymm1, ymm10	# vect__55.154, vect_patt_138.151, vect_patt_136.153
 678      C2
 679 0409 C4437D39 		vextracti128	xmm9, ymm9, 0x1	# tmp532, vect__48.148
 679      C901
 680 040f C4E27D35 		vpmovzxdq	ymm4, xmm3	# vect_patt_139.150, tmp529
 680      E3
 681 0414 C4C27D35 		vpmovzxdq	ymm1, xmm9	# vect_patt_137.152, tmp532
 681      C9
 682 0419 C462ED47 		vpsllvq	ymm11, ymm2, ymm4	# vect_patt_138.151, vect_cst__156, vect_patt_139.150
 682      DC
 683 041e C462ED45 		vpsrlvq	ymm15, ymm2, ymm1	# vect_patt_136.153, vect_cst__156, vect_patt_137.152
 683      F9
 684              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 685              		.loc 1 540 44 discriminator 3 view .LVU185
 686 0423 C5FD7F46 		vmovdqa	YMMWORD PTR -64[rsi], ymm0	# MEM[base: _341, offset: 0B], vect__55.154
 686      C0
 687              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 688              		.loc 1 540 116 discriminator 3 view .LVU186
 689 0428 C44125EB 		vpor	ymm10, ymm11, ymm15	# vect__55.154, vect_patt_138.151, vect_patt_136.153
 689      D7
 690              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 691              		.loc 1 540 44 discriminator 3 view .LVU187
 692 042d C57D7F56 		vmovdqa	YMMWORD PTR -32[rsi], ymm10	# MEM[base: _341, offset: 32B], vect__55.154
 692      E0
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 693              		.loc 1 539 40 is_stmt 1 discriminator 3 view .LVU188
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
GAS LISTING /tmp/cclewcPz.s 			page 26


 694              		.loc 1 539 25 discriminator 3 view .LVU189
 695 0432 4C39FE   		cmp	rsi, r15	# ivtmp.159, _344
 696 0435 0F85F5FE 		jne	.L9	#,
 696      FFFF
 697              	.L37:
 698 043b 4C89EE   		mov	rsi, r13	# niters_vector_mult_vf.142, niters.140
 699 043e 4883E6F8 		and	rsi, -8	# niters_vector_mult_vf.142,
 700 0442 4901F6   		add	r14, rsi	# tmp.143, niters_vector_mult_vf.142
 701 0445 4939F5   		cmp	r13, rsi	# niters.140, niters_vector_mult_vf.142
 702 0448 0F845A02 		je	.L50	#,
 702      0000
 703 044e C5F877   		vzeroupper
 704              	.L6:
 705              	.LVL33:
 706              		.loc 1 540 9 view .LVU190
 707              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 708              		.loc 1 540 81 is_stmt 0 view .LVU191
 709 0451 4189D7   		mov	r15d, edx	# tmp418, tmp355
 710              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 711              		.loc 1 540 72 view .LVU192
 712 0454 4189C5   		mov	r13d, eax	# tmp421, pattern_size
 713              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 714              		.loc 1 540 81 view .LVU193
 715 0457 450FAFFE 		imul	r15d, r14d	# tmp418, tmp.143
 716              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 717              		.loc 1 540 17 view .LVU194
 718 045b 4F8D1C16 		lea	r11, [r14+r10]	# tmp420,
 719              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 720              		.loc 1 540 81 view .LVU195
 721 045f 4101CF   		add	r15d, ecx	# tmp419, shift
 722              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 723              		.loc 1 540 99 view .LVU196
 724 0462 4183E73F 		and	r15d, 63	# _49,
 725              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 726              		.loc 1 540 127 view .LVU197
 727 0466 C4C283F7 		shrx	rsi, r8, r15	# tmp423, pattern, _49
 727      F0
 728              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 729              		.loc 1 540 72 view .LVU198
 730 046b 4529FD   		sub	r13d, r15d	# tmp421, _49
 731              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 732              		.loc 1 539 40 view .LVU199
 733 046e 4D8D7E01 		lea	r15, 1[r14]	# i,
 734              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 735              		.loc 1 540 55 view .LVU200
 736 0472 C44291F7 		shlx	r13, r8, r13	# tmp422, pattern, tmp421
 736      E8
 737              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 738              		.loc 1 540 116 view .LVU201
 739 0477 4C09EE   		or	rsi, r13	# tmp424, tmp422
 740 047a 4A8934DF 		mov	QWORD PTR [rdi+r11*8], rsi	# *_55, tmp424
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 741              		.loc 1 539 40 is_stmt 1 view .LVU202
 742              	.LVL34:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 743              		.loc 1 539 25 view .LVU203
GAS LISTING /tmp/cclewcPz.s 			page 27


 744              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 745              		.loc 1 539 5 is_stmt 0 view .LVU204
 746 047e 4D39CF   		cmp	r15, r9	# i, loop_range
 747 0481 0F87F101 		ja	.L10	#,
 747      0000
 748              		.loc 1 540 9 is_stmt 1 view .LVU205
 749              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 750              		.loc 1 540 81 is_stmt 0 view .LVU206
 751 0487 4189D3   		mov	r11d, edx	# tmp425, tmp355
 752              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 753              		.loc 1 540 72 view .LVU207
 754 048a 4189C5   		mov	r13d, eax	# tmp428, pattern_size
 755              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 756              		.loc 1 540 81 view .LVU208
 757 048d 450FAFDF 		imul	r11d, r15d	# tmp425, i
 758              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 759              		.loc 1 540 17 view .LVU209
 760 0491 4D01D7   		add	r15, r10	# tmp427, destination_start_word
 761              	.LVL35:
 762              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 763              		.loc 1 540 81 view .LVU210
 764 0494 4101CB   		add	r11d, ecx	# tmp426, shift
 765              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 766              		.loc 1 540 99 view .LVU211
 767 0497 4183E33F 		and	r11d, 63	# _83,
 768              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 769              		.loc 1 540 72 view .LVU212
 770 049b 4529DD   		sub	r13d, r11d	# tmp428, _83
 771              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 772              		.loc 1 540 127 view .LVU213
 773 049e C442A3F7 		shrx	r11, r8, r11	# tmp430, pattern, _83
 773      D8
 774              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 775              		.loc 1 540 55 view .LVU214
 776 04a3 C4C291F7 		shlx	rsi, r8, r13	# tmp429, pattern, tmp428
 776      F0
 777              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 778              		.loc 1 540 116 view .LVU215
 779 04a8 4C09DE   		or	rsi, r11	# tmp431, tmp430
 780 04ab 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_181, tmp431
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 781              		.loc 1 539 40 is_stmt 1 view .LVU216
 782 04af 4D8D7E02 		lea	r15, 2[r14]	# i,
 783              	.LVL36:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 784              		.loc 1 539 25 view .LVU217
 785              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 786              		.loc 1 539 5 is_stmt 0 view .LVU218
 787 04b3 4D39F9   		cmp	r9, r15	# loop_range, i
 788 04b6 0F82BC01 		jb	.L10	#,
 788      0000
 789              		.loc 1 540 9 is_stmt 1 view .LVU219
 790              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 791              		.loc 1 540 81 is_stmt 0 view .LVU220
 792 04bc 89D6     		mov	esi, edx	# tmp432, tmp355
GAS LISTING /tmp/cclewcPz.s 			page 28


 793              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 794              		.loc 1 540 72 view .LVU221
 795 04be 4189C5   		mov	r13d, eax	# tmp435, pattern_size
 796              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 797              		.loc 1 540 81 view .LVU222
 798 04c1 410FAFF7 		imul	esi, r15d	# tmp432, i
 799              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 800              		.loc 1 540 17 view .LVU223
 801 04c5 4D01D7   		add	r15, r10	# tmp434, destination_start_word
 802              	.LVL37:
 803              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 804              		.loc 1 540 81 view .LVU224
 805 04c8 01CE     		add	esi, ecx	# tmp433, shift
 806              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 807              		.loc 1 540 99 view .LVU225
 808 04ca 83E63F   		and	esi, 63	# _190,
 809              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 810              		.loc 1 540 72 view .LVU226
 811 04cd 4129F5   		sub	r13d, esi	# tmp435, _190
 812              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 813              		.loc 1 540 127 view .LVU227
 814 04d0 C4C2CBF7 		shrx	rsi, r8, rsi	# tmp437, pattern, _190
 814      F0
 815              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 816              		.loc 1 540 55 view .LVU228
 817 04d5 C44291F7 		shlx	r11, r8, r13	# tmp436, pattern, tmp435
 817      D8
 818              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 819              		.loc 1 540 116 view .LVU229
 820 04da 4C09DE   		or	rsi, r11	# tmp438, tmp436
 821 04dd 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_196, tmp438
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 822              		.loc 1 539 40 is_stmt 1 view .LVU230
 823 04e1 4D8D7E03 		lea	r15, 3[r14]	# i,
 824              	.LVL38:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 825              		.loc 1 539 25 view .LVU231
 826              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 827              		.loc 1 539 5 is_stmt 0 view .LVU232
 828 04e5 4D39F9   		cmp	r9, r15	# loop_range, i
 829 04e8 0F828A01 		jb	.L10	#,
 829      0000
 830              		.loc 1 540 9 is_stmt 1 view .LVU233
 831              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 832              		.loc 1 540 81 is_stmt 0 view .LVU234
 833 04ee 4189D3   		mov	r11d, edx	# tmp439, tmp355
 834              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 835              		.loc 1 540 72 view .LVU235
 836 04f1 4189C5   		mov	r13d, eax	# tmp442, pattern_size
 837              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 838              		.loc 1 540 81 view .LVU236
 839 04f4 450FAFDF 		imul	r11d, r15d	# tmp439, i
 840              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 841              		.loc 1 540 17 view .LVU237
 842 04f8 4D01D7   		add	r15, r10	# tmp441, destination_start_word
 843              	.LVL39:
GAS LISTING /tmp/cclewcPz.s 			page 29


 844              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 845              		.loc 1 540 81 view .LVU238
 846 04fb 4101CB   		add	r11d, ecx	# tmp440, shift
 847              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 848              		.loc 1 540 99 view .LVU239
 849 04fe 4183E33F 		and	r11d, 63	# _205,
 850              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 851              		.loc 1 540 127 view .LVU240
 852 0502 C4C2A3F7 		shrx	rsi, r8, r11	# tmp444, pattern, _205
 852      F0
 853              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 854              		.loc 1 540 72 view .LVU241
 855 0507 4529DD   		sub	r13d, r11d	# tmp442, _205
 856              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 857              		.loc 1 540 55 view .LVU242
 858 050a C44291F7 		shlx	r13, r8, r13	# tmp443, pattern, tmp442
 858      E8
 859              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 860              		.loc 1 540 116 view .LVU243
 861 050f 4C09EE   		or	rsi, r13	# tmp445, tmp443
 862 0512 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_211, tmp445
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 863              		.loc 1 539 40 is_stmt 1 view .LVU244
 864 0516 4D8D7E04 		lea	r15, 4[r14]	# i,
 865              	.LVL40:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 866              		.loc 1 539 25 view .LVU245
 867              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 868              		.loc 1 539 5 is_stmt 0 view .LVU246
 869 051a 4D39F9   		cmp	r9, r15	# loop_range, i
 870 051d 0F825501 		jb	.L10	#,
 870      0000
 871              		.loc 1 540 9 is_stmt 1 view .LVU247
 872              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 873              		.loc 1 540 81 is_stmt 0 view .LVU248
 874 0523 4189D3   		mov	r11d, edx	# tmp446, tmp355
 875              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 876              		.loc 1 540 72 view .LVU249
 877 0526 4189C5   		mov	r13d, eax	# tmp449, pattern_size
 878              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 879              		.loc 1 540 81 view .LVU250
 880 0529 450FAFDF 		imul	r11d, r15d	# tmp446, i
 881              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 882              		.loc 1 540 17 view .LVU251
 883 052d 4D01D7   		add	r15, r10	# tmp448, destination_start_word
 884              	.LVL41:
 885              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 886              		.loc 1 540 81 view .LVU252
 887 0530 4101CB   		add	r11d, ecx	# tmp447, shift
 888              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 889              		.loc 1 540 99 view .LVU253
 890 0533 4183E33F 		and	r11d, 63	# _220,
 891              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 892              		.loc 1 540 127 view .LVU254
 893 0537 C4C2A3F7 		shrx	rsi, r8, r11	# tmp451, pattern, _220
 893      F0
GAS LISTING /tmp/cclewcPz.s 			page 30


 894              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 895              		.loc 1 540 72 view .LVU255
 896 053c 4529DD   		sub	r13d, r11d	# tmp449, _220
 897              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 898              		.loc 1 540 55 view .LVU256
 899 053f C44291F7 		shlx	r13, r8, r13	# tmp450, pattern, tmp449
 899      E8
 900              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 901              		.loc 1 540 116 view .LVU257
 902 0544 4C09EE   		or	rsi, r13	# tmp452, tmp450
 903 0547 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_226, tmp452
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 904              		.loc 1 539 40 is_stmt 1 view .LVU258
 905 054b 4D8D7E05 		lea	r15, 5[r14]	# i,
 906              	.LVL42:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 907              		.loc 1 539 25 view .LVU259
 908              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 909              		.loc 1 539 5 is_stmt 0 view .LVU260
 910 054f 4D39F9   		cmp	r9, r15	# loop_range, i
 911 0552 0F822001 		jb	.L10	#,
 911      0000
 912              		.loc 1 540 9 is_stmt 1 view .LVU261
 913              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 914              		.loc 1 540 81 is_stmt 0 view .LVU262
 915 0558 4189D3   		mov	r11d, edx	# tmp453, tmp355
 916              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 917              		.loc 1 540 72 view .LVU263
 918 055b 4189C5   		mov	r13d, eax	# tmp456, pattern_size
 919              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 920              		.loc 1 540 81 view .LVU264
 921 055e 450FAFDF 		imul	r11d, r15d	# tmp453, i
 922              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 923              		.loc 1 540 17 view .LVU265
 924 0562 4D01D7   		add	r15, r10	# tmp455, destination_start_word
 925              	.LVL43:
 926              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 927              		.loc 1 540 81 view .LVU266
 928 0565 4101CB   		add	r11d, ecx	# tmp454, shift
 929              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 930              		.loc 1 540 99 view .LVU267
 931 0568 4183E33F 		and	r11d, 63	# _235,
 932              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 933              		.loc 1 540 127 view .LVU268
 934 056c C4C2A3F7 		shrx	rsi, r8, r11	# tmp458, pattern, _235
 934      F0
 935              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 936              		.loc 1 540 72 view .LVU269
 937 0571 4529DD   		sub	r13d, r11d	# tmp456, _235
 938              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 939              		.loc 1 540 55 view .LVU270
 940 0574 C44291F7 		shlx	r13, r8, r13	# tmp457, pattern, tmp456
 940      E8
 941              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 942              		.loc 1 540 116 view .LVU271
 943 0579 4C09EE   		or	rsi, r13	# tmp459, tmp457
GAS LISTING /tmp/cclewcPz.s 			page 31


 944 057c 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_241, tmp459
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 945              		.loc 1 539 40 is_stmt 1 view .LVU272
 946 0580 4D8D7E06 		lea	r15, 6[r14]	# i,
 947              	.LVL44:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 948              		.loc 1 539 25 view .LVU273
 949              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 950              		.loc 1 539 5 is_stmt 0 view .LVU274
 951 0584 4D39F9   		cmp	r9, r15	# loop_range, i
 952 0587 0F82EB00 		jb	.L10	#,
 952      0000
 953              		.loc 1 540 9 is_stmt 1 view .LVU275
 954              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 955              		.loc 1 540 81 is_stmt 0 view .LVU276
 956 058d 4189D3   		mov	r11d, edx	# tmp460, tmp355
 957              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 958              		.loc 1 540 72 view .LVU277
 959 0590 4189C5   		mov	r13d, eax	# tmp463, pattern_size
 960              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 961              		.loc 1 540 81 view .LVU278
 962 0593 450FAFDF 		imul	r11d, r15d	# tmp460, i
 963              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 964              		.loc 1 540 17 view .LVU279
 965 0597 4D01D7   		add	r15, r10	# tmp462, destination_start_word
 966              	.LVL45:
 967              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 968              		.loc 1 540 81 view .LVU280
 969 059a 4101CB   		add	r11d, ecx	# tmp461, shift
 970              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 971              		.loc 1 540 99 view .LVU281
 972 059d 4183E33F 		and	r11d, 63	# _250,
 973              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 974              		.loc 1 540 127 view .LVU282
 975 05a1 C4C2A3F7 		shrx	rsi, r8, r11	# tmp465, pattern, _250
 975      F0
 976              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 977              		.loc 1 540 72 view .LVU283
 978 05a6 4529DD   		sub	r13d, r11d	# tmp463, _250
 979              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 980              		.loc 1 540 55 view .LVU284
 981 05a9 C44291F7 		shlx	r13, r8, r13	# tmp464, pattern, tmp463
 981      E8
 982              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 983              		.loc 1 540 116 view .LVU285
 984 05ae 4C09EE   		or	rsi, r13	# tmp466, tmp464
 985 05b1 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_256, tmp466
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 986              		.loc 1 539 40 is_stmt 1 view .LVU286
 987 05b5 4D8D7E07 		lea	r15, 7[r14]	# i,
 988              	.LVL46:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 989              		.loc 1 539 25 view .LVU287
 990              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 991              		.loc 1 539 5 is_stmt 0 view .LVU288
GAS LISTING /tmp/cclewcPz.s 			page 32


 992 05b9 4D39F9   		cmp	r9, r15	# loop_range, i
 993 05bc 0F82B600 		jb	.L10	#,
 993      0000
 994              		.loc 1 540 9 is_stmt 1 view .LVU289
 995              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 996              		.loc 1 540 81 is_stmt 0 view .LVU290
 997 05c2 4189D3   		mov	r11d, edx	# tmp467, tmp355
 998              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 999              		.loc 1 540 72 view .LVU291
 1000 05c5 4189C5   		mov	r13d, eax	# tmp470, pattern_size
 1001              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1002              		.loc 1 540 81 view .LVU292
 1003 05c8 450FAFDF 		imul	r11d, r15d	# tmp467, i
 1004              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1005              		.loc 1 540 17 view .LVU293
 1006 05cc 4D01D7   		add	r15, r10	# tmp469, destination_start_word
 1007              	.LVL47:
 1008              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1009              		.loc 1 540 81 view .LVU294
 1010 05cf 4101CB   		add	r11d, ecx	# tmp468, shift
 1011              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1012              		.loc 1 540 99 view .LVU295
 1013 05d2 4183E33F 		and	r11d, 63	# _265,
 1014              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1015              		.loc 1 540 127 view .LVU296
 1016 05d6 C4C2A3F7 		shrx	rsi, r8, r11	# tmp472, pattern, _265
 1016      F0
 1017              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1018              		.loc 1 540 72 view .LVU297
 1019 05db 4529DD   		sub	r13d, r11d	# tmp470, _265
 1020              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1021              		.loc 1 540 55 view .LVU298
 1022 05de C44291F7 		shlx	r13, r8, r13	# tmp471, pattern, tmp470
 1022      E8
 1023              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1024              		.loc 1 540 116 view .LVU299
 1025 05e3 4C09EE   		or	rsi, r13	# tmp473, tmp471
 1026 05e6 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_271, tmp473
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1027              		.loc 1 539 40 is_stmt 1 view .LVU300
 1028 05ea 4D8D7E08 		lea	r15, 8[r14]	# i,
 1029              	.LVL48:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1030              		.loc 1 539 25 view .LVU301
 1031              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1032              		.loc 1 539 5 is_stmt 0 view .LVU302
 1033 05ee 4D39F9   		cmp	r9, r15	# loop_range, i
 1034 05f1 0F828100 		jb	.L10	#,
 1034      0000
 1035              		.loc 1 540 9 is_stmt 1 view .LVU303
 1036              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1037              		.loc 1 540 81 is_stmt 0 view .LVU304
 1038 05f7 4189D3   		mov	r11d, edx	# tmp474, tmp355
 1039              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1040              		.loc 1 540 72 view .LVU305
 1041 05fa 4189C5   		mov	r13d, eax	# tmp477, pattern_size
GAS LISTING /tmp/cclewcPz.s 			page 33


 1042              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1043              		.loc 1 540 81 view .LVU306
 1044 05fd 450FAFDF 		imul	r11d, r15d	# tmp474, i
 1045              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1046              		.loc 1 540 17 view .LVU307
 1047 0601 4D01D7   		add	r15, r10	# tmp476, destination_start_word
 1048              	.LVL49:
 1049              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1050              		.loc 1 540 81 view .LVU308
 1051 0604 4101CB   		add	r11d, ecx	# tmp475, shift
 1052              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1053              		.loc 1 540 99 view .LVU309
 1054 0607 4183E33F 		and	r11d, 63	# _280,
 1055              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1056              		.loc 1 540 127 view .LVU310
 1057 060b C4C2A3F7 		shrx	rsi, r8, r11	# tmp479, pattern, _280
 1057      F0
 1058              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1059              		.loc 1 540 72 view .LVU311
 1060 0610 4529DD   		sub	r13d, r11d	# tmp477, _280
 1061              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1062              		.loc 1 540 55 view .LVU312
 1063 0613 C44291F7 		shlx	r13, r8, r13	# tmp478, pattern, tmp477
 1063      E8
 1064              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1065              		.loc 1 540 116 view .LVU313
 1066 0618 4C09EE   		or	rsi, r13	# tmp480, tmp478
 1067 061b 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_286, tmp480
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1068              		.loc 1 539 40 is_stmt 1 view .LVU314
 1069 061f 4D8D7E09 		lea	r15, 9[r14]	# i,
 1070              	.LVL50:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1071              		.loc 1 539 25 view .LVU315
 1072              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1073              		.loc 1 539 5 is_stmt 0 view .LVU316
 1074 0623 4D39F9   		cmp	r9, r15	# loop_range, i
 1075 0626 7250     		jb	.L10	#,
 1076              		.loc 1 540 9 is_stmt 1 view .LVU317
 1077              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1078              		.loc 1 540 81 is_stmt 0 view .LVU318
 1079 0628 4189D3   		mov	r11d, edx	# tmp481, tmp355
 1080              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1081              		.loc 1 540 72 view .LVU319
 1082 062b 4189C5   		mov	r13d, eax	# tmp484, pattern_size
 1083              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1084              		.loc 1 540 81 view .LVU320
 1085 062e 450FAFDF 		imul	r11d, r15d	# tmp481, i
 1086              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1087              		.loc 1 539 40 view .LVU321
 1088 0632 4983C60A 		add	r14, 10	# i,
 1089              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1090              		.loc 1 540 17 view .LVU322
 1091 0636 4D01D7   		add	r15, r10	# tmp483, destination_start_word
 1092              	.LVL51:
GAS LISTING /tmp/cclewcPz.s 			page 34


 1093              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1094              		.loc 1 540 81 view .LVU323
 1095 0639 4101CB   		add	r11d, ecx	# tmp482, shift
 1096              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1097              		.loc 1 540 99 view .LVU324
 1098 063c 4183E33F 		and	r11d, 63	# _295,
 1099              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1100              		.loc 1 540 127 view .LVU325
 1101 0640 C4C2A3F7 		shrx	rsi, r8, r11	# tmp486, pattern, _295
 1101      F0
 1102              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1103              		.loc 1 540 72 view .LVU326
 1104 0645 4529DD   		sub	r13d, r11d	# tmp484, _295
 1105              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1106              		.loc 1 540 55 view .LVU327
 1107 0648 C44291F7 		shlx	r13, r8, r13	# tmp485, pattern, tmp484
 1107      E8
 1108              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1109              		.loc 1 540 116 view .LVU328
 1110 064d 4C09EE   		or	rsi, r13	# tmp487, tmp485
 1111              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1112              		.loc 1 539 5 view .LVU329
 1113 0650 4D39F1   		cmp	r9, r14	# loop_range, i
 1114              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1115              		.loc 1 540 116 view .LVU330
 1116 0653 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_301, tmp487
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1117              		.loc 1 539 40 is_stmt 1 view .LVU331
 1118              	.LVL52:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1119              		.loc 1 539 25 view .LVU332
 1120              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1121              		.loc 1 539 5 is_stmt 0 view .LVU333
 1122 0657 721F     		jb	.L10	#,
 1123              		.loc 1 540 9 is_stmt 1 view .LVU334
 1124              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1125              		.loc 1 540 81 is_stmt 0 view .LVU335
 1126 0659 410FAFD6 		imul	edx, r14d	# tmp488, i
 1127              	.LVL53:
 1128              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1129              		.loc 1 540 17 view .LVU336
 1130 065d 4D01D6   		add	r14, r10	# tmp490, destination_start_word
 1131              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1132              		.loc 1 540 81 view .LVU337
 1133 0660 01D1     		add	ecx, edx	# tmp489, tmp488
 1134              	.LVL54:
 1135              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1136              		.loc 1 540 99 view .LVU338
 1137 0662 83E13F   		and	ecx, 63	# _108,
 1138              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1139              		.loc 1 540 72 view .LVU339
 1140 0665 29C8     		sub	eax, ecx	# tmp491, _108
 1141              	.LVL55:
 1142              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1143              		.loc 1 540 55 view .LVU340
GAS LISTING /tmp/cclewcPz.s 			page 35


 1144 0667 C4C2F9F7 		shlx	rdx, r8, rax	# tmp492, pattern, tmp491
 1144      D0
 1145              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1146              		.loc 1 540 127 view .LVU341
 1147 066c C442F3F7 		shrx	r8, r8, rcx	# tmp493, pattern, _108
 1147      C0
 1148              	.LVL56:
 1149              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1150              		.loc 1 540 116 view .LVU342
 1151 0671 4909D0   		or	r8, rdx	# tmp494, tmp492
 1152 0674 4E8904F7 		mov	QWORD PTR [rdi+r14*8], r8	# *_42, tmp494
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1153              		.loc 1 539 40 is_stmt 1 view .LVU343
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1154              		.loc 1 539 25 view .LVU344
 1155              	.L10:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1156              		.loc 1 539 25 is_stmt 0 view .LVU345
 1157              	.LBE312:
 541:sieve_extend.c ****     }
 542:sieve_extend.c ****     bitarray[destination_stop_word] &= chopmask(destination_stop);
 1158              		.loc 1 542 5 is_stmt 1 view .LVU346
 1159              	# sieve_extend.c:542:     bitarray[destination_stop_word] &= chopmask(destination_stop);
 1160              		.loc 1 542 37 is_stmt 0 view .LVU347
 1161 0678 4A211CE7 		and	QWORD PTR [rdi+r12*8], rbx	# *_57, _124
 1162              	# sieve_extend.c:543: }
 543:sieve_extend.c **** }
 1163              		.loc 1 543 1 view .LVU348
 1164 067c 488D65D8 		lea	rsp, -40[rbp]	#,
 1165 0680 5B       		pop	rbx	#
 1166 0681 415C     		pop	r12	#
 1167              	.LVL57:
 1168              		.loc 1 543 1 view .LVU349
 1169 0683 415D     		pop	r13	#
 1170 0685 415E     		pop	r14	#
 1171 0687 415F     		pop	r15	#
 1172 0689 5D       		pop	rbp	#
 1173              		.cfi_remember_state
 1174              		.cfi_def_cfa 7, 8
 1175 068a C3       		ret	
 1176              	.LVL58:
 1177 068b 0F1F4400 		.p2align 4,,7
 1177      00
 1178              		.p2align 3
 1179              	.L49:
 1180              		.cfi_restore_state
 524:sieve_extend.c ****         return;
 1181              		.loc 1 524 9 is_stmt 1 view .LVU350
 1182              	# sieve_extend.c:524:         bitarray[destination_start_word] |= (pattern << bitindex(destination_
 524:sieve_extend.c ****         return;
 1183              		.loc 1 524 86 is_stmt 0 view .LVU351
 1184 0690 4821D8   		and	rax, rbx	# tmp351, _124
 1185              	# sieve_extend.c:524:         bitarray[destination_start_word] |= (pattern << bitindex(destination_
 524:sieve_extend.c ****         return;
 1186              		.loc 1 524 42 view .LVU352
 1187 0693 4C09F8   		or	rax, r15	# tmp352, pretmp_118
 1188 0696 498906   		mov	QWORD PTR [r14], rax	# *_117, tmp352
GAS LISTING /tmp/cclewcPz.s 			page 36


 525:sieve_extend.c ****     }
 1189              		.loc 1 525 9 is_stmt 1 view .LVU353
 1190              	# sieve_extend.c:543: }
 1191              		.loc 1 543 1 is_stmt 0 view .LVU354
 1192 0699 488D65D8 		lea	rsp, -40[rbp]	#,
 1193 069d 5B       		pop	rbx	#
 1194 069e 415C     		pop	r12	#
 1195              	.LVL59:
 1196              		.loc 1 543 1 view .LVU355
 1197 06a0 415D     		pop	r13	#
 1198 06a2 415E     		pop	r14	#
 1199 06a4 415F     		pop	r15	#
 1200 06a6 5D       		pop	rbp	#
 1201              		.cfi_remember_state
 1202              		.cfi_def_cfa 7, 8
 1203 06a7 C3       		ret	
 1204              	.LVL60:
 1205              	.L50:
 1206              		.cfi_restore_state
 1207              		.loc 1 543 1 view .LVU356
 1208 06a8 C5F877   		vzeroupper
 1209 06ab EBCB     		jmp	.L10	#
 1210              	.LVL61:
 1211              	.L12:
 1212              	.LBB313:
 1213              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1214              		.loc 1 539 20 view .LVU357
 1215 06ad 4531F6   		xor	r14d, r14d	# i
 1216 06b0 E979FBFF 		jmp	.L7	#
 1216      FF
 1217              	.L11:
 1218 06b5 4531F6   		xor	r14d, r14d	# tmp.143
 1219              		.p2align 4,,2
 1220 06b8 E994FDFF 		jmp	.L6	#
 1220      FF
 1221              	.LBE313:
 1222              		.cfi_endproc
 1223              	.LFE68:
 1225 06bd 0F1F00   		.p2align 4
 1227              	extendSieve_shiftright_base:
 1228              	.LVL62:
 1229              	.LFB74:
 544:sieve_extend.c **** 
 545:sieve_extend.c **** static void extendSieve_aligned(bitword_t* bitarray, const counter_t source_start, const counter_t 
 546:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using aligned (%ju copies)\n"
 547:sieve_extend.c **** 
 548:sieve_extend.c ****     const counter_t destination_stop_word = wordindex(destination_stop);
 549:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 550:sieve_extend.c ****     counter_t source_word = wordindex(source_start);
 551:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
 552:sieve_extend.c ****     
 553:sieve_extend.c ****     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 554:sieve_extend.c **** 
 555:sieve_extend.c ****     while (copy_word + size <= destination_stop_word) {
 556:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 557:sieve_extend.c ****         copy_word += size;
GAS LISTING /tmp/cclewcPz.s 			page 37


 558:sieve_extend.c ****     }
 559:sieve_extend.c **** 
 560:sieve_extend.c ****    while (copy_word < destination_stop_word) {
 561:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 562:sieve_extend.c ****         source_word++;
 563:sieve_extend.c ****         copy_word++;
 564:sieve_extend.c ****     }
 565:sieve_extend.c **** 
 566:sieve_extend.c **** }
 567:sieve_extend.c **** 
 568:sieve_extend.c **** //https://stackoverflow.com/questions/1898153/how-to-determine-if-memory-is-aligned
 569:sieve_extend.c **** #define is_unaligned(POINTER, BYTE_COUNT) (((uintptr_t)(const void *)(POINTER)) % (BYTE_COUNT))
 570:sieve_extend.c **** 
 571:sieve_extend.c **** void shiftvec(uint64_t* __restrict dst, const uint64_t* __restrict src, int size, int shift)
 572:sieve_extend.c **** {
 573:sieve_extend.c ****     int i = 0;
 574:sieve_extend.c ****     // MSVC: use steps of 2 for SSE, 4 for AVX2, 8 for AVX512
 575:sieve_extend.c ****     for (; i+4 < size; i+=4,dst+=4,src+=4)
 576:sieve_extend.c ****     {
 577:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 578:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 579:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 580:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 581:sieve_extend.c ****     }
 582:sieve_extend.c ****     for (; i < size; ++i,++src,++dst)
 583:sieve_extend.c ****     {
 584:sieve_extend.c ****         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 585:sieve_extend.c ****     }    
 586:sieve_extend.c **** }
 587:sieve_extend.c **** 
 588:sieve_extend.c **** #define forward_distance 4
 589:sieve_extend.c **** static void extendSieve_shiftright_vector(bitword_t* bitarray, const counter_t source_start, const 
 590:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 591:sieve_extend.c ****    
 592:sieve_extend.c ****     bitvector_t* bitvector = (bitvector_t*) bitarray;
 593:sieve_extend.c **** 
 594:sieve_extend.c ****     const counter_t destination_stop_word = wordindex(destination_stop);
 595:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 596:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_calc(source_start);
 597:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 598:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 599:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 600:sieve_extend.c **** 
 601:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start in to not lose data
 602:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 603:sieve_extend.c ****                                 & keepmask(copy_start);
 604:sieve_extend.c **** 
 605:sieve_extend.c ****     if (copy_word >= destination_stop_word) { 
 606:sieve_extend.c ****         return; // rapid exit for one word variant
 607:sieve_extend.c ****     }
 608:sieve_extend.c **** 
 609:sieve_extend.c ****     copy_word++;
 610:sieve_extend.c **** 
 611:sieve_extend.c ****     debug printf("..copy distance %ju\n",(uintmax_t) copy_word - (uintmax_t) source_word);
 612:sieve_extend.c ****     if (((copy_word - source_word) > forward_distance)) {
 613:sieve_extend.c ****         // shiftvec(&bitarray[copy_word], &bitarray[source_word],size_word,shift );
 614:sieve_extend.c ****         bitvector_t* __restrict copy_ptr   = (bitvector_t*) &bitarray[copy_word];
GAS LISTING /tmp/cclewcPz.s 			page 38


 615:sieve_extend.c ****         bitvector_t* __restrict source_ptr = (bitvector_t*) &bitarray[source_word];
 616:sieve_extend.c ****         bitvector_t* __restrict source_ptr1 = (bitvector_t*) &bitarray[source_word+1];
 617:sieve_extend.c ****         // bitword_t* copy_ptr   = &bitarray[copy_word];
 618:sieve_extend.c ****         // bitword_t* source_ptr = &bitarray[source_word];
 619:sieve_extend.c ****         bitword_t* __restrict dest_ptr   = &bitarray[destination_stop_word];
 620:sieve_extend.c ****         counter_t size_word   = destination_stop_word - copy_word;
 621:sieve_extend.c ****         bitvector_t mask = {};
 622:sieve_extend.c **** 
 623:sieve_extend.c ****         #pragma GCC ivdep 
 624:sieve_extend.c ****         for (counter_t i = 0; (i+forward_distance) < size_word; i+=forward_distance, copy_ptr+=forw
 625:sieve_extend.c ****             mask = *(source_ptr) >> shift_flipped;
 626:sieve_extend.c ****             mask |= *(source_ptr1) >> shift;
 627:sieve_extend.c ****             *copy_ptr |= mask;
 628:sieve_extend.c ****         }
 629:sieve_extend.c **** 
 630:sieve_extend.c ****         #pragma GCC ivdep 
 631:sieve_extend.c ****         for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 632:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 633:sieve_extend.c ****         }
 634:sieve_extend.c ****         bitarray[copy_word] &= chopmask(destination_stop);
 635:sieve_extend.c ****     }
 636:sieve_extend.c ****     else {
 637:sieve_extend.c ****         register counter_t i = 0;
 638:sieve_extend.c ****         bitword_t* copy_ptr   = &bitarray[copy_word];
 639:sieve_extend.c ****         bitword_t* source_ptr = &bitarray[source_word];
 640:sieve_extend.c ****         bitword_t* dest_ptr   = &bitarray[destination_stop_word];
 641:sieve_extend.c ****         counter_t size_word_ptr   = dest_ptr - copy_ptr;
 642:sieve_extend.c ****         for (; i <= size_word_ptr; i++)
 643:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 644:sieve_extend.c ****     }
 645:sieve_extend.c **** }
 646:sieve_extend.c **** 
 647:sieve_extend.c **** static inline counter_t extendSieve_shiftleft_unrolled(bitword_t* bitarray, const counter_t aligned
 648:sieve_extend.c ****     const counter_t fast_loop_stop_word = (aligned_copy_word>2) ? (aligned_copy_word - 2) : 0; // s
 649:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 650:sieve_extend.c ****     counter_t distance = 0;
 651:sieve_extend.c ****     while (copy_word < fast_loop_stop_word) {
 652:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 653:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 654:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 655:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 656:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 657:sieve_extend.c ****         copy_word += 2;
 658:sieve_extend.c ****         source_word += 2;
 659:sieve_extend.c ****         distance += 2;
 660:sieve_extend.c ****     }
 661:sieve_extend.c ****     return distance;
 662:sieve_extend.c **** }
 663:sieve_extend.c **** 
 664:sieve_extend.c **** 
 665:sieve_extend.c **** 
 666:sieve_extend.c **** 
 667:sieve_extend.c **** static void extendSieve_shiftright_ivdep(bitword_t* bitarray, const counter_t source_start, const c
 668:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 669:sieve_extend.c ****    
 670:sieve_extend.c ****     const counter_t destination_stop_word = wordindex(destination_stop);
 671:sieve_extend.c ****     const counter_t copy_start = source_start + size;
GAS LISTING /tmp/cclewcPz.s 			page 39


 672:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_calc(source_start);
 673:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 674:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 675:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 676:sieve_extend.c **** 
 677:sieve_extend.c ****     if (copy_word >= destination_stop_word) { 
 678:sieve_extend.c ****         bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start in to not lose da
 679:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 680:sieve_extend.c ****                                 & keepmask(copy_start) & chopmask(destination_stop);
 681:sieve_extend.c ****         return; // rapid exit for one word variant
 682:sieve_extend.c ****     }
 683:sieve_extend.c **** 
 684:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start in to not lose data
 685:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 686:sieve_extend.c ****                                 & keepmask(copy_start);
 687:sieve_extend.c **** 
 688:sieve_extend.c ****     copy_word++;
 689:sieve_extend.c **** 
 690:sieve_extend.c ****     debug { printf("...start - %ju - %ju - end\n",(uintmax_t)wordindex(copy_start), (uintmax_t)dest
 691:sieve_extend.c **** 
 692:sieve_extend.c ****     if (size >= WORD_SIZE_counter) {
 693:sieve_extend.c ****         register const counter_t loop_distance = destination_stop_word - copy_word;
 694:sieve_extend.c **** 
 695:sieve_extend.c ****         //#pragma GCC unroll 16
 696:sieve_extend.c ****         #pragma GCC ivdep
 697:sieve_extend.c ****         for (register counter_t i = 0; i <loop_distance; i++) {
 698:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 699:sieve_extend.c ****         }
 700:sieve_extend.c ****         source_word += loop_distance; copy_word+= loop_distance;
 701:sieve_extend.c ****     }
 702:sieve_extend.c **** 
 703:sieve_extend.c ****     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 704:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 705:sieve_extend.c ****     }
 706:sieve_extend.c ****     bitarray[copy_word] &= chopmask(destination_stop);
 707:sieve_extend.c **** 
 708:sieve_extend.c **** }
 709:sieve_extend.c **** 
 710:sieve_extend.c **** static void  extendSieve_shiftright_base(bitword_t* bitarray, const counter_t source_start, const c
 1230              		.loc 1 710 149 is_stmt 1 view -0
 1231              		.cfi_startproc
 711:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 1232              		.loc 1 711 5 view .LVU359
 712:sieve_extend.c ****    
 713:sieve_extend.c ****     const counter_t destination_stop_word = wordindex(destination_stop);
 1233              		.loc 1 713 5 view .LVU360
 1234              	# sieve_extend.c:710: static void  extendSieve_shiftright_base(bitword_t* bitarray, const counter_t
 710:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 1235              		.loc 1 710 149 is_stmt 0 view .LVU361
 1236 06c0 55       		push	rbp	#
 1237              		.cfi_def_cfa_offset 16
 1238              		.cfi_offset 6, -16
 1239              	# sieve_extend.c:714:     const counter_t copy_start = source_start + size;
 714:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 1240              		.loc 1 714 21 view .LVU362
 1241 06c1 4801F2   		add	rdx, rsi	# copy_start, source_start
 1242              	.LVL63:
GAS LISTING /tmp/cclewcPz.s 			page 40


 1243              	# sieve_extend.c:715:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
 715:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_calc(source_start);
 1244              		.loc 1 715 67 view .LVU363
 1245 06c4 4889F0   		mov	rax, rsi	# _5, source_start
 1246              	# sieve_extend.c:710: static void  extendSieve_shiftright_base(bitword_t* bitarray, const counter_t
 710:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 1247              		.loc 1 710 149 view .LVU364
 1248 06c7 4889E5   		mov	rbp, rsp	#,
 1249              		.cfi_def_cfa_register 6
 1250              	# sieve_extend.c:715:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
 1251              		.loc 1 715 39 view .LVU365
 1252 06ca 4989D1   		mov	r9, rdx	# _4, copy_start
 1253              	# sieve_extend.c:710: static void  extendSieve_shiftright_base(bitword_t* bitarray, const counter_t
 710:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 1254              		.loc 1 710 149 view .LVU366
 1255 06cd 4157     		push	r15	#
 1256              	# sieve_extend.c:715:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
 1257              		.loc 1 715 39 view .LVU367
 1258 06cf 4183E13F 		and	r9d, 63	# _4,
 1259              	# sieve_extend.c:715:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
 1260              		.loc 1 715 67 view .LVU368
 1261 06d3 83E03F   		and	eax, 63	# _5,
 1262              	# sieve_extend.c:710: static void  extendSieve_shiftright_base(bitword_t* bitarray, const counter_t
 710:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 1263              		.loc 1 710 149 view .LVU369
 1264 06d6 4156     		push	r14	#
 1265              	# sieve_extend.c:718:     register counter_t copy_word = wordindex(copy_start);
 716:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 717:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 718:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 1266              		.loc 1 718 24 view .LVU370
 1267 06d8 48C1EA06 		shr	rdx, 6	# copy_word,
 1268              	# sieve_extend.c:715:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
 715:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_calc(source_start);
 1269              		.loc 1 715 31 view .LVU371
 1270 06dc 4D89CB   		mov	r11, r9	# shift, _4
 1271              	# sieve_extend.c:710: static void  extendSieve_shiftright_base(bitword_t* bitarray, const counter_t
 710:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 1272              		.loc 1 710 149 view .LVU372
 1273 06df 4155     		push	r13	#
 1274              	# sieve_extend.c:717:     register counter_t source_word = wordindex(source_start);
 717:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 1275              		.loc 1 717 24 view .LVU373
 1276 06e1 48C1EE06 		shr	rsi, 6	# source_start,
 1277              	.LVL64:
 1278              		.cfi_offset 15, -24
 1279              		.cfi_offset 14, -32
 1280              		.cfi_offset 13, -40
 717:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 1281              		.loc 1 717 24 view .LVU374
 1282 06e5 4C8D2CD5 		lea	r13, 0[0+rdx*8]	# _89,
 1282      00000000 
 1283              	# sieve_extend.c:710: static void  extendSieve_shiftright_base(bitword_t* bitarray, const counter_t
 710:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 1284              		.loc 1 710 149 view .LVU375
 1285 06ed 4154     		push	r12	#
 1286              	# sieve_extend.c:715:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
GAS LISTING /tmp/cclewcPz.s 			page 41


 715:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 1287              		.loc 1 715 31 view .LVU376
 1288 06ef 4929C3   		sub	r11, rax	# shift, _5
 1289              		.cfi_offset 12, -48
 1290 06f2 4C8D24F5 		lea	r12, 0[0+rsi*8]	# _92,
 1290      00000000 
 1291              	# sieve_extend.c:710: static void  extendSieve_shiftright_base(bitword_t* bitarray, const counter_t
 710:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 1292              		.loc 1 710 149 view .LVU377
 1293 06fa 53       		push	rbx	#
 1294              		.cfi_offset 3, -56
 1295              	# sieve_extend.c:713:     const counter_t destination_stop_word = wordindex(destination_stop);
 713:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 1296              		.loc 1 713 21 view .LVU378
 1297 06fb 4889CB   		mov	rbx, rcx	# destination_stop_word, destination_stop
 1298              	# sieve_extend.c:716:     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 716:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 1299              		.loc 1 716 31 view .LVU379
 1300 06fe 4883C040 		add	rax, 64	# tmp244,
 1301              	# sieve_extend.c:710: static void  extendSieve_shiftright_base(bitword_t* bitarray, const counter_t
 710:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 1302              		.loc 1 710 149 view .LVU380
 1303 0702 4883E4E0 		and	rsp, -32	#,
 1304 0706 4E8D342F 		lea	r14, [rdi+r13]	# _90,
 1305              	# sieve_extend.c:713:     const counter_t destination_stop_word = wordindex(destination_stop);
 713:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 1306              		.loc 1 713 21 view .LVU381
 1307 070a 48C1EB06 		shr	rbx, 6	# destination_stop_word,
 1308              	.LVL65:
 714:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_calc(source_start);
 1309              		.loc 1 714 5 is_stmt 1 view .LVU382
 715:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 1310              		.loc 1 715 5 view .LVU383
 716:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 1311              		.loc 1 716 5 view .LVU384
 717:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 1312              		.loc 1 717 5 view .LVU385
 1313              	# sieve_extend.c:716:     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 716:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 1314              		.loc 1 716 31 is_stmt 0 view .LVU386
 1315 070e 4C29C8   		sub	rax, r9	# shift_flipped, _4
 1316 0711 4D8B3E   		mov	r15, QWORD PTR [r14]	# pretmp_91, *_90
 1317 0714 4E8D0427 		lea	r8, [rdi+r12]	# _93,
 1318              	# sieve_extend.c:717:     register counter_t source_word = wordindex(source_start);
 717:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 1319              		.loc 1 717 24 view .LVU387
 1320 0718 48897424 		mov	QWORD PTR -8[rsp], rsi	# %sfp, source_word
 1320      F8
 1321              	.LVL66:
 1322              		.loc 1 718 5 is_stmt 1 view .LVU388
 719:sieve_extend.c **** 
 720:sieve_extend.c ****     if (copy_word >= destination_stop_word) { 
 1323              		.loc 1 720 5 view .LVU389
 1324 071d C442FBF7 		shrx	r10, r15, rax	# tmp248, pretmp_91, shift_flipped
 1324      D7
 1325 0722 C4C2A1F7 		shlx	rsi, QWORD PTR [r8], r11	# tmp246, *_93, shift
 1325      30
GAS LISTING /tmp/cclewcPz.s 			page 42


 1326              	.LVL67:
 1327              		.loc 1 720 5 is_stmt 0 view .LVU390
 1328 0727 44895C24 		mov	DWORD PTR -12[rsp], r11d	# %sfp, shift
 1328      F4
 1329 072c 894424F0 		mov	DWORD PTR -16[rsp], eax	# %sfp, shift_flipped
 1330 0730 4C09D6   		or	rsi, r10	# _99, tmp248
 1331              	# sieve_extend.c:720:     if (copy_word >= destination_stop_word) { 
 1332              		.loc 1 720 8 view .LVU391
 1333 0733 4839D3   		cmp	rbx, rdx	# destination_stop_word, copy_word
 1334 0736 49C7C2FF 		mov	r10, -1	# tmp250,
 1334      FFFFFF
 1335 073d C442B1F7 		shlx	r9, r10, r9	# _102, tmp250, _4
 1335      CA
 1336 0742 0F862804 		jbe	.L156	#,
 1336      0000
 721:sieve_extend.c ****         bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start in to not lose da
 722:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 723:sieve_extend.c ****                                 & keepmask(copy_start) & chopmask(destination_stop);
 724:sieve_extend.c ****         return; // rapid exit for one word variant
 725:sieve_extend.c ****     }
 726:sieve_extend.c **** 
 727:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start in to not lose data
 1337              		.loc 1 727 5 is_stmt 1 view .LVU392
 1338              	# sieve_extend.c:729:                                 & keepmask(copy_start);
 728:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 729:sieve_extend.c ****                                 & keepmask(copy_start);
 1339              		.loc 1 729 33 is_stmt 0 view .LVU393
 1340 0748 4921F1   		and	r9, rsi	# tmp258, _99
 1341              	# sieve_extend.c:727:     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start
 727:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 1342              		.loc 1 727 25 view .LVU394
 1343 074b 4D09CF   		or	r15, r9	# tmp259, tmp258
 1344              	# sieve_extend.c:731:     copy_word++;
 730:sieve_extend.c ****     
 731:sieve_extend.c ****     copy_word++;
 1345              		.loc 1 731 14 view .LVU395
 1346 074e 4C8D4A01 		lea	r9, 1[rdx]	# copy_word,
 1347              	# sieve_extend.c:727:     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start
 727:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 1348              		.loc 1 727 25 view .LVU396
 1349 0752 4D893E   		mov	QWORD PTR [r14], r15	# *_90, tmp259
 1350              		.loc 1 731 5 is_stmt 1 view .LVU397
 1351              	.LVL68:
 732:sieve_extend.c **** 
 733:sieve_extend.c ****     debug { printf("...start - %ju - %ju - end\n",(uintmax_t)wordindex(copy_start), (uintmax_t)dest
 1352              		.loc 1 733 5 view .LVU398
 734:sieve_extend.c **** 
 735:sieve_extend.c ****     for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
 1353              		.loc 1 735 5 view .LVU399
 1354              		.loc 1 735 12 view .LVU400
 1355              	# sieve_extend.c:735:     for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
 1356              		.loc 1 735 5 is_stmt 0 view .LVU401
 1357 0755 4C39CB   		cmp	rbx, r9	# destination_stop_word, copy_word
 1358 0758 0F820104 		jb	.L154	#,
 1358      0000
 1359 075e 4D8D7508 		lea	r14, 8[r13]	# tmp260,
 1360 0762 498D4C24 		lea	rcx, 40[r12]	# tmp261,
GAS LISTING /tmp/cclewcPz.s 			page 43


 1360      28
 1361              	.LVL69:
 1362              		.loc 1 735 5 view .LVU402
 1363 0767 498D7528 		lea	rsi, 40[r13]	# tmp264,
 1364 076b 4939CE   		cmp	r14, rcx	# tmp260, tmp261
 1365 076e 410F9DC7 		setge	r15b	#, tmp263
 1366 0772 4939F4   		cmp	r12, rsi	# _92, tmp264
 1367 0775 410F9DC2 		setge	r10b	#, tmp266
 1368 0779 4508D7   		or	r15b, r10b	# tmp263, tmp266
 1369 077c 0F841604 		je	.L55	#,
 1369      0000
 1370 0782 4C8D73FF 		lea	r14, -1[rbx]	# tmp268,
 1371 0786 4929D6   		sub	r14, rdx	# tmp269, copy_word
 1372 0789 4983FE05 		cmp	r14, 5	# tmp269,
 1373 078d 0F860504 		jbe	.L55	#,
 1373      0000
 1374 0793 4C89C1   		mov	rcx, r8	# tmp272, _93
 1375 0796 4989DE   		mov	r14, rbx	# niters.168, destination_stop_word
 1376 0799 48C1E903 		shr	rcx, 3	# tmp272,
 1377 079d 4929D6   		sub	r14, rdx	# niters.168, copy_word
 1378 07a0 48F7D9   		neg	rcx	# tmp273
 1379 07a3 83E103   		and	ecx, 3	# prolog_loop_niters.170,
 1380 07a6 0F843406 		je	.L64	#,
 1380      0000
 736:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1381              		.loc 1 736 9 is_stmt 1 view .LVU403
 1382              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1383              		.loc 1 736 83 is_stmt 0 view .LVU404
 1384 07ac 4C8B7C24 		mov	r15, QWORD PTR -8[rsp]	# source_word, %sfp
 1384      F8
 1385              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1386              		.loc 1 736 99 view .LVU405
 1387 07b1 4E8B6C27 		mov	r13, QWORD PTR 8[rdi+r12]	# *_201, *_201
 1387      08
 1388 07b6 C442A1F7 		shlx	r12, r13, r11	# tmp274, *_201, shift
 1388      E5
 1389              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1390              		.loc 1 736 54 view .LVU406
 1391 07bb 4D8B00   		mov	r8, QWORD PTR [r8]	# *_93, *_93
 1392 07be C442FBF7 		shrx	r13, r8, rax	# tmp276, *_93, shift_flipped
 1392      E8
 1393              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1394              		.loc 1 736 83 view .LVU407
 1395 07c3 4D8D5701 		lea	r10, 1[r15]	# tmp328,
 1396              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1397              		.loc 1 736 72 view .LVU408
 1398 07c7 4D09EC   		or	r12, r13	# tmp278, tmp276
 1399 07ca 4883F901 		cmp	rcx, 1	# prolog_loop_niters.170,
 1400              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1401              		.loc 1 736 83 view .LVU409
 1402 07ce 4C89D6   		mov	rsi, r10	# source_word, tmp328
 1403              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1404              		.loc 1 736 72 view .LVU410
 1405 07d1 4E8924CF 		mov	QWORD PTR [rdi+r9*8], r12	# *_205, tmp278
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1406              		.loc 1 735 48 is_stmt 1 view .LVU411
 1407              	# sieve_extend.c:735:     for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
GAS LISTING /tmp/cclewcPz.s 			page 44


 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1408              		.loc 1 735 57 is_stmt 0 view .LVU412
 1409 07d5 4C8D4202 		lea	r8, 2[rdx]	# copy_word,
 1410              	.LVL70:
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1411              		.loc 1 735 12 is_stmt 1 view .LVU413
 1412 07d9 7454     		je	.L56	#,
 1413              		.loc 1 736 9 view .LVU414
 1414              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1415              		.loc 1 736 40 is_stmt 0 view .LVU415
 1416 07db 4E8D24D5 		lea	r12, 0[0+r10*8]	# _214,
 1416      00000000 
 1417              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1418              		.loc 1 736 99 view .LVU416
 1419 07e3 C422A1F7 		shlx	r13, QWORD PTR 8[rdi+r12], r11	# tmp279, *_220, shift
 1419      6C2708
 1420              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1421              		.loc 1 736 54 view .LVU417
 1422 07ea 4E8B2427 		mov	r12, QWORD PTR [rdi+r12]	# *_215, *_215
 1423 07ee C442FBF7 		shrx	r12, r12, rax	# tmp281, *_215, shift_flipped
 1423      E4
 1424              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1425              		.loc 1 736 72 view .LVU418
 1426 07f3 4D09EC   		or	r12, r13	# tmp283, tmp279
 1427 07f6 4883F903 		cmp	rcx, 3	# prolog_loop_niters.170,
 1428 07fa 4E8924C7 		mov	QWORD PTR [rdi+r8*8], r12	# *_224, tmp283
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1429              		.loc 1 735 48 is_stmt 1 view .LVU419
 1430              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1431              		.loc 1 736 83 is_stmt 0 view .LVU420
 1432 07fe 498D7702 		lea	rsi, 2[r15]	# source_word,
 1433              	.LVL71:
 1434              	# sieve_extend.c:735:     for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1435              		.loc 1 735 57 view .LVU421
 1436 0802 4C8D4203 		lea	r8, 3[rdx]	# copy_word,
 1437              	.LVL72:
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1438              		.loc 1 735 12 is_stmt 1 view .LVU422
 1439 0806 7527     		jne	.L56	#,
 1440              		.loc 1 736 9 view .LVU423
 1441              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1442              		.loc 1 736 40 is_stmt 0 view .LVU424
 1443 0808 4C8D24F5 		lea	r12, 0[0+rsi*8]	# _18,
 1443      00000000 
 1444              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1445              		.loc 1 736 83 view .LVU425
 1446 0810 498D7703 		lea	rsi, 3[r15]	# source_word,
 1447              	.LVL73:
 1448              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1449              		.loc 1 736 54 view .LVU426
 1450 0814 4E8B2C27 		mov	r13, QWORD PTR [rdi+r12]	# *_19, *_19
 1451              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1452              		.loc 1 736 99 view .LVU427
 1453 0818 C422A1F7 		shlx	r15, QWORD PTR 8[rdi+r12], r11	# tmp284, *_112, shift
 1453      7C2708
 1454              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
GAS LISTING /tmp/cclewcPz.s 			page 45


 1455              		.loc 1 736 54 view .LVU428
 1456 081f C442FBF7 		shrx	r12, r13, rax	# tmp286, *_19, shift_flipped
 1456      E5
 1457              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1458              		.loc 1 736 72 view .LVU429
 1459 0824 4D09FC   		or	r12, r15	# tmp288, tmp284
 1460 0827 4E8924C7 		mov	QWORD PTR [rdi+r8*8], r12	# *_116, tmp288
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1461              		.loc 1 735 48 is_stmt 1 view .LVU430
 1462              	# sieve_extend.c:735:     for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1463              		.loc 1 735 57 is_stmt 0 view .LVU431
 1464 082b 4C8D4204 		lea	r8, 4[rdx]	# copy_word,
 1465              	.LVL74:
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1466              		.loc 1 735 12 is_stmt 1 view .LVU432
 1467              	.L56:
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1468              		.loc 1 735 12 is_stmt 0 view .LVU433
 1469 082f 488B5424 		mov	rdx, QWORD PTR -8[rsp]	# source_word, %sfp
 1469      F8
 1470 0834 4929CE   		sub	r14, rcx	# niters.171, prolog_loop_niters.170
 1471 0837 4901CA   		add	r10, rcx	# tmp292, prolog_loop_niters.170
 1472              	# sieve_extend.c:735:     for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1473              		.loc 1 735 5 view .LVU434
 1474 083a 4531E4   		xor	r12d, r12d	# ivtmp.203
 1475 083d C5F96E4C 		vmovd	xmm1, DWORD PTR -16[rsp]	# _97, %sfp
 1475      24F0
 1476 0843 4E8D14D7 		lea	r10, [rdi+r10*8]	# vectp.181,
 1477 0847 C5F96E44 		vmovd	xmm0, DWORD PTR -12[rsp]	# _95, %sfp
 1477      24F4
 1478 084d 4801CA   		add	rdx, rcx	# source_word, prolog_loop_niters.170
 1479 0850 4C01C9   		add	rcx, r9	# tmp294, copy_word
 1480 0853 4D89F1   		mov	r9, r14	# bnd.172, niters.171
 1481 0856 49C1E902 		shr	r9, 2	# bnd.172,
 1482 085a 4C8D3CD7 		lea	r15, [rdi+rdx*8]	# vectp.177,
 1483 085e 49C1E105 		sal	r9, 5	# _247,
 1484 0862 488D0CCF 		lea	rcx, [rdi+rcx*8]	# vectp.186,
 1485 0866 4D8D69E0 		lea	r13, -32[r9]	# tmp339,
 1486 086a 49C1ED05 		shr	r13, 5	# tmp337,
 1487 086e 4983C501 		add	r13, 1	# tmp340,
 1488 0872 4183E507 		and	r13d, 7	# tmp341,
 1489 0876 0F842801 		je	.L58	#,
 1489      0000
 1490 087c 4983FD01 		cmp	r13, 1	# tmp341,
 1491 0880 0F84F300 		je	.L115	#,
 1491      0000
 1492 0886 4983FD02 		cmp	r13, 2	# tmp341,
 1493 088a 0F84C700 		je	.L116	#,
 1493      0000
 1494 0890 4983FD03 		cmp	r13, 3	# tmp341,
 1495 0894 0F849A00 		je	.L117	#,
 1495      0000
 1496 089a 4983FD04 		cmp	r13, 4	# tmp341,
 1497 089e 7472     		je	.L118	#,
 1498 08a0 4983FD05 		cmp	r13, 5	# tmp341,
GAS LISTING /tmp/cclewcPz.s 			page 46


 1499 08a4 7449     		je	.L119	#,
 1500 08a6 4983FD06 		cmp	r13, 6	# tmp341,
 1501 08aa 7420     		je	.L120	#,
 1502              	.LVL75:
 1503              		.loc 1 736 9 is_stmt 1 view .LVU435
 1504              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1505              		.loc 1 736 54 is_stmt 0 view .LVU436
 1506 08ac C4C17D6F 		vmovdqa	ymm6, YMMWORD PTR [r15]	# tmp568, MEM[base: vectp.177_152, index: ivtmp.203_245, offset: 0
 1506      37
 1507 08b1 41BC2000 		mov	r12d, 32	# ivtmp.203,
 1507      0000
 1508              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1509              		.loc 1 736 99 view .LVU437
 1510 08b7 C4C17E6F 		vmovdqu	ymm7, YMMWORD PTR [r10]	# tmp569, MEM[base: vectp.181_159, index: ivtmp.203_245, offset: 0
 1510      3A
 1511              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1512              		.loc 1 736 54 view .LVU438
 1513 08bc C5CDD3D1 		vpsrlq	ymm2, ymm6, xmm1	# vect__47.179, tmp568, _97
 1514              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1515              		.loc 1 736 99 view .LVU439
 1516 08c0 C5C5F3D8 		vpsllq	ymm3, ymm7, xmm0	# vect__52.183, tmp569, _95
 1517              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1518              		.loc 1 736 72 view .LVU440
 1519 08c4 C5EDEBE3 		vpor	ymm4, ymm2, ymm3	# vect__55.184, vect__47.179, vect__52.183
 1520              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1521              		.loc 1 736 29 view .LVU441
 1522 08c8 C5FE7F21 		vmovdqu	YMMWORD PTR [rcx], ymm4	# MEM[base: vectp.186_168, index: ivtmp.203_245, offset: 0B], vect
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1523              		.loc 1 735 48 is_stmt 1 view .LVU442
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1524              		.loc 1 735 12 view .LVU443
 1525              	.L120:
 1526              		.loc 1 736 9 view .LVU444
 1527              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1528              		.loc 1 736 54 is_stmt 0 view .LVU445
 1529 08cc C4817D6F 		vmovdqa	ymm5, YMMWORD PTR [r15+r12]	# tmp570, MEM[base: vectp.177_152, index: ivtmp.203_245, offse
 1529      2C27
 1530              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1531              		.loc 1 736 99 view .LVU446
 1532 08d2 C4017E6F 		vmovdqu	ymm9, YMMWORD PTR [r10+r12]	# tmp571, MEM[base: vectp.181_159, index: ivtmp.203_245, offse
 1532      0C22
 1533              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1534              		.loc 1 736 54 view .LVU447
 1535 08d8 C555D3C1 		vpsrlq	ymm8, ymm5, xmm1	# vect__47.179, tmp570, _97
 1536              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1537              		.loc 1 736 99 view .LVU448
 1538 08dc C535F3D0 		vpsllq	ymm10, ymm9, xmm0	# vect__52.183, tmp571, _95
 1539              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1540              		.loc 1 736 72 view .LVU449
 1541 08e0 C4413DEB 		vpor	ymm11, ymm8, ymm10	# vect__55.184, vect__47.179, vect__52.183
 1541      DA
 1542              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1543              		.loc 1 736 29 view .LVU450
 1544 08e5 C4217E7F 		vmovdqu	YMMWORD PTR [rcx+r12], ymm11	# MEM[base: vectp.186_168, index: ivtmp.203_245, offset: 0B],
 1544      1C21
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1545              		.loc 1 735 48 is_stmt 1 view .LVU451
GAS LISTING /tmp/cclewcPz.s 			page 47


 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1546              		.loc 1 735 12 view .LVU452
 1547 08eb 4983C420 		add	r12, 32	# ivtmp.203,
 1548              	.L119:
 1549              		.loc 1 736 9 view .LVU453
 1550              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1551              		.loc 1 736 54 is_stmt 0 view .LVU454
 1552 08ef C4017D6F 		vmovdqa	ymm12, YMMWORD PTR [r15+r12]	# tmp572, MEM[base: vectp.177_152, index: ivtmp.203_245, offs
 1552      2427
 1553              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1554              		.loc 1 736 99 view .LVU455
 1555 08f5 C4017E6F 		vmovdqu	ymm14, YMMWORD PTR [r10+r12]	# tmp573, MEM[base: vectp.181_159, index: ivtmp.203_245, offs
 1555      3422
 1556              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1557              		.loc 1 736 54 view .LVU456
 1558 08fb C51DD3E9 		vpsrlq	ymm13, ymm12, xmm1	# vect__47.179, tmp572, _97
 1559              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1560              		.loc 1 736 99 view .LVU457
 1561 08ff C50DF3F8 		vpsllq	ymm15, ymm14, xmm0	# vect__52.183, tmp573, _95
 1562              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1563              		.loc 1 736 72 view .LVU458
 1564 0903 C4C115EB 		vpor	ymm6, ymm13, ymm15	# vect__55.184, vect__47.179, vect__52.183
 1564      F7
 1565              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1566              		.loc 1 736 29 view .LVU459
 1567 0908 C4A17E7F 		vmovdqu	YMMWORD PTR [rcx+r12], ymm6	# MEM[base: vectp.186_168, index: ivtmp.203_245, offset: 0B], 
 1567      3421
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1568              		.loc 1 735 48 is_stmt 1 view .LVU460
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1569              		.loc 1 735 12 view .LVU461
 1570 090e 4983C420 		add	r12, 32	# ivtmp.203,
 1571              	.L118:
 1572              		.loc 1 736 9 view .LVU462
 1573              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1574              		.loc 1 736 54 is_stmt 0 view .LVU463
 1575 0912 C4817D6F 		vmovdqa	ymm2, YMMWORD PTR [r15+r12]	# tmp574, MEM[base: vectp.177_152, index: ivtmp.203_245, offse
 1575      1427
 1576              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1577              		.loc 1 736 99 view .LVU464
 1578 0918 C4817E6F 		vmovdqu	ymm3, YMMWORD PTR [r10+r12]	# tmp575, MEM[base: vectp.181_159, index: ivtmp.203_245, offse
 1578      1C22
 1579              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1580              		.loc 1 736 54 view .LVU465
 1581 091e C5EDD3F9 		vpsrlq	ymm7, ymm2, xmm1	# vect__47.179, tmp574, _97
 1582              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1583              		.loc 1 736 99 view .LVU466
 1584 0922 C5E5F3E0 		vpsllq	ymm4, ymm3, xmm0	# vect__52.183, tmp575, _95
 1585              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1586              		.loc 1 736 72 view .LVU467
 1587 0926 C5C5EBEC 		vpor	ymm5, ymm7, ymm4	# vect__55.184, vect__47.179, vect__52.183
 1588              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1589              		.loc 1 736 29 view .LVU468
 1590 092a C4A17E7F 		vmovdqu	YMMWORD PTR [rcx+r12], ymm5	# MEM[base: vectp.186_168, index: ivtmp.203_245, offset: 0B], 
 1590      2C21
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1591              		.loc 1 735 48 is_stmt 1 view .LVU469
GAS LISTING /tmp/cclewcPz.s 			page 48


 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1592              		.loc 1 735 12 view .LVU470
 1593 0930 4983C420 		add	r12, 32	# ivtmp.203,
 1594              	.L117:
 1595              		.loc 1 736 9 view .LVU471
 1596              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1597              		.loc 1 736 54 is_stmt 0 view .LVU472
 1598 0934 C4017D6F 		vmovdqa	ymm8, YMMWORD PTR [r15+r12]	# tmp576, MEM[base: vectp.177_152, index: ivtmp.203_245, offse
 1598      0427
 1599              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1600              		.loc 1 736 99 view .LVU473
 1601 093a C4017E6F 		vmovdqu	ymm10, YMMWORD PTR [r10+r12]	# tmp577, MEM[base: vectp.181_159, index: ivtmp.203_245, offs
 1601      1422
 1602              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1603              		.loc 1 736 54 view .LVU474
 1604 0940 C53DD3C9 		vpsrlq	ymm9, ymm8, xmm1	# vect__47.179, tmp576, _97
 1605              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1606              		.loc 1 736 99 view .LVU475
 1607 0944 C52DF3D8 		vpsllq	ymm11, ymm10, xmm0	# vect__52.183, tmp577, _95
 1608              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1609              		.loc 1 736 72 view .LVU476
 1610 0948 C44135EB 		vpor	ymm12, ymm9, ymm11	# vect__55.184, vect__47.179, vect__52.183
 1610      E3
 1611              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1612              		.loc 1 736 29 view .LVU477
 1613 094d C4217E7F 		vmovdqu	YMMWORD PTR [rcx+r12], ymm12	# MEM[base: vectp.186_168, index: ivtmp.203_245, offset: 0B],
 1613      2421
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1614              		.loc 1 735 48 is_stmt 1 view .LVU478
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1615              		.loc 1 735 12 view .LVU479
 1616 0953 4983C420 		add	r12, 32	# ivtmp.203,
 1617              	.L116:
 1618              		.loc 1 736 9 view .LVU480
 1619              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1620              		.loc 1 736 54 is_stmt 0 view .LVU481
 1621 0957 C4017D6F 		vmovdqa	ymm13, YMMWORD PTR [r15+r12]	# tmp578, MEM[base: vectp.177_152, index: ivtmp.203_245, offs
 1621      2C27
 1622              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1623              		.loc 1 736 99 view .LVU482
 1624 095d C4017E6F 		vmovdqu	ymm15, YMMWORD PTR [r10+r12]	# tmp579, MEM[base: vectp.181_159, index: ivtmp.203_245, offs
 1624      3C22
 1625              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1626              		.loc 1 736 54 view .LVU483
 1627 0963 C515D3F1 		vpsrlq	ymm14, ymm13, xmm1	# vect__47.179, tmp578, _97
 1628              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1629              		.loc 1 736 99 view .LVU484
 1630 0967 C585F3F0 		vpsllq	ymm6, ymm15, xmm0	# vect__52.183, tmp579, _95
 1631              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1632              		.loc 1 736 72 view .LVU485
 1633 096b C58DEBD6 		vpor	ymm2, ymm14, ymm6	# vect__55.184, vect__47.179, vect__52.183
 1634              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1635              		.loc 1 736 29 view .LVU486
 1636 096f C4A17E7F 		vmovdqu	YMMWORD PTR [rcx+r12], ymm2	# MEM[base: vectp.186_168, index: ivtmp.203_245, offset: 0B], 
 1636      1421
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1637              		.loc 1 735 48 is_stmt 1 view .LVU487
GAS LISTING /tmp/cclewcPz.s 			page 49


 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1638              		.loc 1 735 12 view .LVU488
 1639 0975 4983C420 		add	r12, 32	# ivtmp.203,
 1640              	.L115:
 1641              		.loc 1 736 9 view .LVU489
 1642              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1643              		.loc 1 736 54 is_stmt 0 view .LVU490
 1644 0979 C4817D6F 		vmovdqa	ymm7, YMMWORD PTR [r15+r12]	# tmp580, MEM[base: vectp.177_152, index: ivtmp.203_245, offse
 1644      3C27
 1645              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1646              		.loc 1 736 99 view .LVU491
 1647 097f C4817E6F 		vmovdqu	ymm3, YMMWORD PTR [r10+r12]	# tmp581, MEM[base: vectp.181_159, index: ivtmp.203_245, offse
 1647      1C22
 1648              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1649              		.loc 1 736 54 view .LVU492
 1650 0985 C5C5D3E1 		vpsrlq	ymm4, ymm7, xmm1	# vect__47.179, tmp580, _97
 1651              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1652              		.loc 1 736 99 view .LVU493
 1653 0989 C5E5F3E8 		vpsllq	ymm5, ymm3, xmm0	# vect__52.183, tmp581, _95
 1654              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1655              		.loc 1 736 72 view .LVU494
 1656 098d C55DEBC5 		vpor	ymm8, ymm4, ymm5	# vect__55.184, vect__47.179, vect__52.183
 1657              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1658              		.loc 1 736 29 view .LVU495
 1659 0991 C4217E7F 		vmovdqu	YMMWORD PTR [rcx+r12], ymm8	# MEM[base: vectp.186_168, index: ivtmp.203_245, offset: 0B], 
 1659      0421
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1660              		.loc 1 735 48 is_stmt 1 view .LVU496
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1661              		.loc 1 735 12 view .LVU497
 1662 0997 4983C420 		add	r12, 32	# ivtmp.203,
 1663 099b 4D39CC   		cmp	r12, r9	# ivtmp.203, _247
 1664 099e 0F843E01 		je	.L146	#,
 1664      0000
 1665              	.L58:
 1666              		.loc 1 736 9 discriminator 2 view .LVU498
 1667              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1668              		.loc 1 736 54 is_stmt 0 discriminator 2 view .LVU499
 1669 09a4 C4017D6F 		vmovdqa	ymm9, YMMWORD PTR [r15+r12]	# tmp534, MEM[base: vectp.177_152, index: ivtmp.203_245, offse
 1669      0C27
 1670              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1671              		.loc 1 736 99 discriminator 2 view .LVU500
 1672 09aa C4017E6F 		vmovdqu	ymm11, YMMWORD PTR [r10+r12]	# tmp535, MEM[base: vectp.181_159, index: ivtmp.203_245, offs
 1672      1C22
 1673              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1674              		.loc 1 736 54 discriminator 2 view .LVU501
 1675 09b0 C535D3D1 		vpsrlq	ymm10, ymm9, xmm1	# vect__47.179, tmp534, _97
 1676              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1677              		.loc 1 736 99 discriminator 2 view .LVU502
 1678 09b4 C525F3E0 		vpsllq	ymm12, ymm11, xmm0	# vect__52.183, tmp535, _95
 1679              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1680              		.loc 1 736 72 discriminator 2 view .LVU503
 1681 09b8 C4412DEB 		vpor	ymm13, ymm10, ymm12	# vect__55.184, vect__47.179, vect__52.183
 1681      EC
 1682              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1683              		.loc 1 736 29 discriminator 2 view .LVU504
 1684 09bd C4217E7F 		vmovdqu	YMMWORD PTR [rcx+r12], ymm13	# MEM[base: vectp.186_168, index: ivtmp.203_245, offset: 0B],
GAS LISTING /tmp/cclewcPz.s 			page 50


 1684      2C21
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1685              		.loc 1 735 48 is_stmt 1 discriminator 2 view .LVU505
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1686              		.loc 1 735 12 discriminator 2 view .LVU506
 1687              		.loc 1 736 9 discriminator 2 view .LVU507
 1688              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1689              		.loc 1 736 54 is_stmt 0 discriminator 2 view .LVU508
 1690 09c3 C4017D6F 		vmovdqa	ymm14, YMMWORD PTR 32[r15+r12]	# tmp536, MEM[base: vectp.177_152, index: ivtmp.203_245, of
 1690      742720
 1691              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1692              		.loc 1 736 99 discriminator 2 view .LVU509
 1693 09ca C4817E6F 		vmovdqu	ymm6, YMMWORD PTR 32[r10+r12]	# tmp537, MEM[base: vectp.181_159, index: ivtmp.203_245, off
 1693      742220
 1694              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1695              		.loc 1 736 54 discriminator 2 view .LVU510
 1696 09d1 C50DD3F9 		vpsrlq	ymm15, ymm14, xmm1	# vect__47.179, tmp536, _97
 1697              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1698              		.loc 1 736 99 discriminator 2 view .LVU511
 1699 09d5 C5CDF3D0 		vpsllq	ymm2, ymm6, xmm0	# vect__52.183, tmp537, _95
 1700              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1701              		.loc 1 736 72 discriminator 2 view .LVU512
 1702 09d9 C585EBFA 		vpor	ymm7, ymm15, ymm2	# vect__55.184, vect__47.179, vect__52.183
 1703              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1704              		.loc 1 736 29 discriminator 2 view .LVU513
 1705 09dd C4A17E7F 		vmovdqu	YMMWORD PTR 32[rcx+r12], ymm7	# MEM[base: vectp.186_168, index: ivtmp.203_245, offset: 0B]
 1705      7C2120
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1706              		.loc 1 735 48 is_stmt 1 discriminator 2 view .LVU514
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1707              		.loc 1 735 12 discriminator 2 view .LVU515
 1708              		.loc 1 736 9 discriminator 2 view .LVU516
 1709              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1710              		.loc 1 736 54 is_stmt 0 discriminator 2 view .LVU517
 1711 09e4 C4817D6F 		vmovdqa	ymm4, YMMWORD PTR 64[r15+r12]	# tmp538, MEM[base: vectp.177_152, index: ivtmp.203_245, off
 1711      642740
 1712              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1713              		.loc 1 736 99 discriminator 2 view .LVU518
 1714 09eb C4817E6F 		vmovdqu	ymm3, YMMWORD PTR 64[r10+r12]	# tmp539, MEM[base: vectp.181_159, index: ivtmp.203_245, off
 1714      5C2240
 1715              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1716              		.loc 1 736 54 discriminator 2 view .LVU519
 1717 09f2 C5DDD3E9 		vpsrlq	ymm5, ymm4, xmm1	# vect__47.179, tmp538, _97
 1718              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1719              		.loc 1 736 99 discriminator 2 view .LVU520
 1720 09f6 C565F3C0 		vpsllq	ymm8, ymm3, xmm0	# vect__52.183, tmp539, _95
 1721              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1722              		.loc 1 736 72 discriminator 2 view .LVU521
 1723 09fa C44155EB 		vpor	ymm9, ymm5, ymm8	# vect__55.184, vect__47.179, vect__52.183
 1723      C8
 1724              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1725              		.loc 1 736 29 discriminator 2 view .LVU522
 1726 09ff C4217E7F 		vmovdqu	YMMWORD PTR 64[rcx+r12], ymm9	# MEM[base: vectp.186_168, index: ivtmp.203_245, offset: 0B]
 1726      4C2140
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1727              		.loc 1 735 48 is_stmt 1 discriminator 2 view .LVU523
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
GAS LISTING /tmp/cclewcPz.s 			page 51


 1728              		.loc 1 735 12 discriminator 2 view .LVU524
 1729              		.loc 1 736 9 discriminator 2 view .LVU525
 1730              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1731              		.loc 1 736 54 is_stmt 0 discriminator 2 view .LVU526
 1732 0a06 C4017D6F 		vmovdqa	ymm10, YMMWORD PTR 96[r15+r12]	# tmp540, MEM[base: vectp.177_152, index: ivtmp.203_245, of
 1732      542760
 1733              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1734              		.loc 1 736 99 discriminator 2 view .LVU527
 1735 0a0d C4017E6F 		vmovdqu	ymm12, YMMWORD PTR 96[r10+r12]	# tmp541, MEM[base: vectp.181_159, index: ivtmp.203_245, of
 1735      642260
 1736              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1737              		.loc 1 736 54 discriminator 2 view .LVU528
 1738 0a14 C52DD3D9 		vpsrlq	ymm11, ymm10, xmm1	# vect__47.179, tmp540, _97
 1739              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1740              		.loc 1 736 99 discriminator 2 view .LVU529
 1741 0a18 C51DF3E8 		vpsllq	ymm13, ymm12, xmm0	# vect__52.183, tmp541, _95
 1742              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1743              		.loc 1 736 72 discriminator 2 view .LVU530
 1744 0a1c C44125EB 		vpor	ymm14, ymm11, ymm13	# vect__55.184, vect__47.179, vect__52.183
 1744      F5
 1745              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1746              		.loc 1 736 29 discriminator 2 view .LVU531
 1747 0a21 C4217E7F 		vmovdqu	YMMWORD PTR 96[rcx+r12], ymm14	# MEM[base: vectp.186_168, index: ivtmp.203_245, offset: 0B
 1747      742160
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1748              		.loc 1 735 48 is_stmt 1 discriminator 2 view .LVU532
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1749              		.loc 1 735 12 discriminator 2 view .LVU533
 1750              		.loc 1 736 9 discriminator 2 view .LVU534
 1751              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1752              		.loc 1 736 54 is_stmt 0 discriminator 2 view .LVU535
 1753 0a28 C4017D6F 		vmovdqa	ymm15, YMMWORD PTR 128[r15+r12]	# tmp542, MEM[base: vectp.177_152, index: ivtmp.203_245, o
 1753      BC278000 
 1753      0000
 1754              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1755              		.loc 1 736 99 discriminator 2 view .LVU536
 1756 0a32 C4817E6F 		vmovdqu	ymm2, YMMWORD PTR 128[r10+r12]	# tmp543, MEM[base: vectp.181_159, index: ivtmp.203_245, of
 1756      94228000 
 1756      0000
 1757              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1758              		.loc 1 736 54 discriminator 2 view .LVU537
 1759 0a3c C585D3F1 		vpsrlq	ymm6, ymm15, xmm1	# vect__47.179, tmp542, _97
 1760              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1761              		.loc 1 736 99 discriminator 2 view .LVU538
 1762 0a40 C5EDF3F8 		vpsllq	ymm7, ymm2, xmm0	# vect__52.183, tmp543, _95
 1763              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1764              		.loc 1 736 72 discriminator 2 view .LVU539
 1765 0a44 C5CDEBE7 		vpor	ymm4, ymm6, ymm7	# vect__55.184, vect__47.179, vect__52.183
 1766              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1767              		.loc 1 736 29 discriminator 2 view .LVU540
 1768 0a48 C4A17E7F 		vmovdqu	YMMWORD PTR 128[rcx+r12], ymm4	# MEM[base: vectp.186_168, index: ivtmp.203_245, offset: 0B
 1768      A4218000 
 1768      0000
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1769              		.loc 1 735 48 is_stmt 1 discriminator 2 view .LVU541
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1770              		.loc 1 735 12 discriminator 2 view .LVU542
GAS LISTING /tmp/cclewcPz.s 			page 52


 1771              		.loc 1 736 9 discriminator 2 view .LVU543
 1772              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1773              		.loc 1 736 54 is_stmt 0 discriminator 2 view .LVU544
 1774 0a52 C4817D6F 		vmovdqa	ymm5, YMMWORD PTR 160[r15+r12]	# tmp544, MEM[base: vectp.177_152, index: ivtmp.203_245, of
 1774      AC27A000 
 1774      0000
 1775              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1776              		.loc 1 736 99 discriminator 2 view .LVU545
 1777 0a5c C4817E6F 		vmovdqu	ymm3, YMMWORD PTR 160[r10+r12]	# tmp545, MEM[base: vectp.181_159, index: ivtmp.203_245, of
 1777      9C22A000 
 1777      0000
 1778              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1779              		.loc 1 736 54 discriminator 2 view .LVU546
 1780 0a66 C555D3C1 		vpsrlq	ymm8, ymm5, xmm1	# vect__47.179, tmp544, _97
 1781              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1782              		.loc 1 736 99 discriminator 2 view .LVU547
 1783 0a6a C565F3C8 		vpsllq	ymm9, ymm3, xmm0	# vect__52.183, tmp545, _95
 1784              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1785              		.loc 1 736 72 discriminator 2 view .LVU548
 1786 0a6e C4413DEB 		vpor	ymm10, ymm8, ymm9	# vect__55.184, vect__47.179, vect__52.183
 1786      D1
 1787              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1788              		.loc 1 736 29 discriminator 2 view .LVU549
 1789 0a73 C4217E7F 		vmovdqu	YMMWORD PTR 160[rcx+r12], ymm10	# MEM[base: vectp.186_168, index: ivtmp.203_245, offset: 0
 1789      9421A000 
 1789      0000
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1790              		.loc 1 735 48 is_stmt 1 discriminator 2 view .LVU550
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1791              		.loc 1 735 12 discriminator 2 view .LVU551
 1792              		.loc 1 736 9 discriminator 2 view .LVU552
 1793              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1794              		.loc 1 736 54 is_stmt 0 discriminator 2 view .LVU553
 1795 0a7d C4017D6F 		vmovdqa	ymm11, YMMWORD PTR 192[r15+r12]	# tmp546, MEM[base: vectp.177_152, index: ivtmp.203_245, o
 1795      9C27C000 
 1795      0000
 1796              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1797              		.loc 1 736 99 discriminator 2 view .LVU554
 1798 0a87 C4017E6F 		vmovdqu	ymm13, YMMWORD PTR 192[r10+r12]	# tmp547, MEM[base: vectp.181_159, index: ivtmp.203_245, o
 1798      AC22C000 
 1798      0000
 1799              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1800              		.loc 1 736 54 discriminator 2 view .LVU555
 1801 0a91 C525D3E1 		vpsrlq	ymm12, ymm11, xmm1	# vect__47.179, tmp546, _97
 1802              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1803              		.loc 1 736 99 discriminator 2 view .LVU556
 1804 0a95 C515F3F0 		vpsllq	ymm14, ymm13, xmm0	# vect__52.183, tmp547, _95
 1805              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1806              		.loc 1 736 72 discriminator 2 view .LVU557
 1807 0a99 C4411DEB 		vpor	ymm15, ymm12, ymm14	# vect__55.184, vect__47.179, vect__52.183
 1807      FE
 1808              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1809              		.loc 1 736 29 discriminator 2 view .LVU558
 1810 0a9e C4217E7F 		vmovdqu	YMMWORD PTR 192[rcx+r12], ymm15	# MEM[base: vectp.186_168, index: ivtmp.203_245, offset: 0
 1810      BC21C000 
 1810      0000
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
GAS LISTING /tmp/cclewcPz.s 			page 53


 1811              		.loc 1 735 48 is_stmt 1 discriminator 2 view .LVU559
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1812              		.loc 1 735 12 discriminator 2 view .LVU560
 1813              		.loc 1 736 9 discriminator 2 view .LVU561
 1814              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1815              		.loc 1 736 54 is_stmt 0 discriminator 2 view .LVU562
 1816 0aa8 C4817D6F 		vmovdqa	ymm6, YMMWORD PTR 224[r15+r12]	# tmp548, MEM[base: vectp.177_152, index: ivtmp.203_245, of
 1816      B427E000 
 1816      0000
 1817              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1818              		.loc 1 736 99 discriminator 2 view .LVU563
 1819 0ab2 C4817E6F 		vmovdqu	ymm7, YMMWORD PTR 224[r10+r12]	# tmp549, MEM[base: vectp.181_159, index: ivtmp.203_245, of
 1819      BC22E000 
 1819      0000
 1820              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1821              		.loc 1 736 54 discriminator 2 view .LVU564
 1822 0abc C5CDD3D1 		vpsrlq	ymm2, ymm6, xmm1	# vect__47.179, tmp548, _97
 1823              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1824              		.loc 1 736 99 discriminator 2 view .LVU565
 1825 0ac0 C5C5F3E0 		vpsllq	ymm4, ymm7, xmm0	# vect__52.183, tmp549, _95
 1826              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1827              		.loc 1 736 72 discriminator 2 view .LVU566
 1828 0ac4 C5EDEBEC 		vpor	ymm5, ymm2, ymm4	# vect__55.184, vect__47.179, vect__52.183
 1829              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1830              		.loc 1 736 29 discriminator 2 view .LVU567
 1831 0ac8 C4A17E7F 		vmovdqu	YMMWORD PTR 224[rcx+r12], ymm5	# MEM[base: vectp.186_168, index: ivtmp.203_245, offset: 0B
 1831      AC21E000 
 1831      0000
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1832              		.loc 1 735 48 is_stmt 1 discriminator 2 view .LVU568
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1833              		.loc 1 735 12 discriminator 2 view .LVU569
 1834 0ad2 4981C400 		add	r12, 256	# ivtmp.203,
 1834      010000
 1835 0ad9 4D39CC   		cmp	r12, r9	# ivtmp.203, _247
 1836 0adc 0F85C2FE 		jne	.L58	#,
 1836      FFFF
 1837              	.L146:
 1838 0ae2 4C89F2   		mov	rdx, r14	# niters_vector_mult_vf.173, niters.171
 1839 0ae5 4883E2FC 		and	rdx, -4	# niters_vector_mult_vf.173,
 1840 0ae9 4901D0   		add	r8, rdx	# tmp.174, niters_vector_mult_vf.173
 1841 0aec 4801D6   		add	rsi, rdx	# tmp.175, niters_vector_mult_vf.173
 1842 0aef 4939D6   		cmp	r14, rdx	# niters.171, niters_vector_mult_vf.173
 1843 0af2 0F84D002 		je	.L153	#,
 1843      0000
 1844              	.LVL76:
 1845              		.loc 1 736 9 view .LVU570
 1846              	# sieve_extend.c:735:     for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1847              		.loc 1 735 57 is_stmt 0 view .LVU571
 1848 0af8 4D8D4801 		lea	r9, 1[r8]	# copy_word,
 1849              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1850              		.loc 1 736 99 view .LVU572
 1851 0afc C462A1F7 		shlx	r15, QWORD PTR 8[rdi+rsi*8], r11	# tmp304, *_51, shift
 1851      7CF708
 1852              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1853              		.loc 1 736 54 view .LVU573
GAS LISTING /tmp/cclewcPz.s 			page 54


 1854 0b03 C462FBF7 		shrx	r10, QWORD PTR [rdi+rsi*8], rax	# tmp306, *_46, shift_flipped
 1854      14F7
 1855              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1856              		.loc 1 736 72 view .LVU574
 1857 0b09 4D09D7   		or	r15, r10	# tmp308, tmp306
 1858              	# sieve_extend.c:735:     for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1859              		.loc 1 735 5 view .LVU575
 1860 0b0c 4C39CB   		cmp	rbx, r9	# destination_stop_word, copy_word
 1861              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1862              		.loc 1 736 83 view .LVU576
 1863 0b0f 4C8D7601 		lea	r14, 1[rsi]	# _49,
 1864              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1865              		.loc 1 736 72 view .LVU577
 1866 0b13 4E893CC7 		mov	QWORD PTR [rdi+r8*8], r15	# *_55, tmp308
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1867              		.loc 1 735 48 is_stmt 1 view .LVU578
 1868              	.LVL77:
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1869              		.loc 1 735 12 view .LVU579
 1870              	# sieve_extend.c:735:     for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1871              		.loc 1 735 5 is_stmt 0 view .LVU580
 1872 0b17 0F82AB02 		jb	.L153	#,
 1872      0000
 1873              		.loc 1 736 9 is_stmt 1 view .LVU581
 1874              	# sieve_extend.c:735:     for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1875              		.loc 1 735 57 is_stmt 0 view .LVU582
 1876 0b1d 4983C002 		add	r8, 2	# copy_word,
 1877              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1878              		.loc 1 736 99 view .LVU583
 1879 0b21 C422A1F7 		shlx	r13, QWORD PTR 8[rdi+r14*8], r11	# tmp309, *_183, shift
 1879      6CF708
 1880              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1881              		.loc 1 736 54 view .LVU584
 1882 0b28 4A8B0CF7 		mov	rcx, QWORD PTR [rdi+r14*8]	# *_178, *_178
 1883              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1884              		.loc 1 736 83 view .LVU585
 1885 0b2c 4883C602 		add	rsi, 2	# _181,
 1886              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1887              		.loc 1 736 54 view .LVU586
 1888 0b30 C462FBF7 		shrx	r12, rcx, rax	# tmp311, *_178, shift_flipped
 1888      E1
 1889              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1890              		.loc 1 736 72 view .LVU587
 1891 0b35 4D09E5   		or	r13, r12	# tmp313, tmp311
 1892 0b38 4E892CCF 		mov	QWORD PTR [rdi+r9*8], r13	# *_187, tmp313
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1893              		.loc 1 735 48 is_stmt 1 view .LVU588
 1894              	.LVL78:
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1895              		.loc 1 735 12 view .LVU589
 1896              	# sieve_extend.c:735:     for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1897              		.loc 1 735 5 is_stmt 0 view .LVU590
 1898 0b3c 4C39C3   		cmp	rbx, r8	# destination_stop_word, copy_word
GAS LISTING /tmp/cclewcPz.s 			page 55


 1899 0b3f 0F828302 		jb	.L153	#,
 1899      0000
 1900              		.loc 1 736 9 is_stmt 1 view .LVU591
 1901              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1902              		.loc 1 736 99 is_stmt 0 view .LVU592
 1903 0b45 C4E2A1F7 		shlx	rbx, QWORD PTR 8[rdi+rsi*8], r11	# tmp314, *_138, shift
 1903      5CF708
 1904              	.LVL79:
 1905              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1906              		.loc 1 736 54 view .LVU593
 1907 0b4c 4C8B1CF7 		mov	r11, QWORD PTR [rdi+rsi*8]	# *_133, *_133
 1908 0b50 C4C2FBF7 		shrx	rax, r11, rax	# tmp316, *_133, shift_flipped
 1908      C3
 1909              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 1910              		.loc 1 736 72 view .LVU594
 1911 0b55 4809D8   		or	rax, rbx	# tmp318, tmp314
 1912 0b58 4A8904C7 		mov	QWORD PTR [rdi+r8*8], rax	# *_142, tmp318
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1913              		.loc 1 735 48 is_stmt 1 view .LVU595
 1914              	.LVL80:
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 1915              		.loc 1 735 12 view .LVU596
 1916 0b5c C5F877   		vzeroupper
 1917              	.LVL81:
 1918              	.L154:
 1919              	# sieve_extend.c:739: }
 737:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 738:sieve_extend.c **** 
 739:sieve_extend.c **** }
 1920              		.loc 1 739 1 is_stmt 0 view .LVU597
 1921 0b5f 488D65D8 		lea	rsp, -40[rbp]	#,
 1922 0b63 5B       		pop	rbx	#
 1923 0b64 415C     		pop	r12	#
 1924 0b66 415D     		pop	r13	#
 1925 0b68 415E     		pop	r14	#
 1926 0b6a 415F     		pop	r15	#
 1927 0b6c 5D       		pop	rbp	#
 1928              		.cfi_remember_state
 1929              		.cfi_def_cfa 7, 8
 1930 0b6d C3       		ret	
 1931              	.LVL82:
 1932 0b6e 6690     		.p2align 4,,7
 1933              		.p2align 3
 1934              	.L156:
 1935              		.cfi_restore_state
 721:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 1936              		.loc 1 721 9 is_stmt 1 view .LVU598
 1937              	# sieve_extend.c:723:                                 & keepmask(copy_start) & chopmask(destination
 723:sieve_extend.c ****         return; // rapid exit for one word variant
 1938              		.loc 1 723 58 is_stmt 0 view .LVU599
 1939 0b70 F7D1     		not	ecx	# tmp251
 1940              	.LVL83:
 723:sieve_extend.c ****         return; // rapid exit for one word variant
 1941              		.loc 1 723 58 view .LVU600
 1942 0b72 C442F3F7 		shrx	r8, r10, rcx	# tmp253, tmp250, tmp251
 1942      C2
 1943              	# sieve_extend.c:723:                                 & keepmask(copy_start) & chopmask(destination
GAS LISTING /tmp/cclewcPz.s 			page 56


 723:sieve_extend.c ****         return; // rapid exit for one word variant
 1944              		.loc 1 723 56 view .LVU601
 1945 0b77 4D21C1   		and	r9, r8	# tmp255, tmp253
 1946 0b7a 4C21CE   		and	rsi, r9	# tmp256, tmp255
 1947              	# sieve_extend.c:721:         bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the s
 721:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 1948              		.loc 1 721 29 view .LVU602
 1949 0b7d 4909F7   		or	r15, rsi	# tmp257, tmp256
 1950 0b80 4D893E   		mov	QWORD PTR [r14], r15	# *_90, tmp257
 724:sieve_extend.c ****     }
 1951              		.loc 1 724 9 is_stmt 1 view .LVU603
 1952              	# sieve_extend.c:739: }
 1953              		.loc 1 739 1 is_stmt 0 view .LVU604
 1954 0b83 488D65D8 		lea	rsp, -40[rbp]	#,
 1955              	.LVL84:
 1956              		.loc 1 739 1 view .LVU605
 1957 0b87 5B       		pop	rbx	#
 1958              	.LVL85:
 1959              		.loc 1 739 1 view .LVU606
 1960 0b88 415C     		pop	r12	#
 1961 0b8a 415D     		pop	r13	#
 1962 0b8c 415E     		pop	r14	#
 1963 0b8e 415F     		pop	r15	#
 1964 0b90 5D       		pop	rbp	#
 1965              		.cfi_remember_state
 1966              		.cfi_def_cfa 7, 8
 1967              	.LVL86:
 1968              		.loc 1 739 1 view .LVU607
 1969 0b91 C3       		ret	
 1970              	.LVL87:
 1971              		.p2align 4,,7
 1972 0b92 660F1F44 		.p2align 3
 1972      0000
 1973              	.L55:
 1974              		.cfi_restore_state
 1975              		.loc 1 739 1 view .LVU608
 1976 0b98 488B7424 		mov	rsi, QWORD PTR -8[rsp]	# source_word, %sfp
 1976      F8
 1977 0b9d 4801F3   		add	rbx, rsi	# tmp319, source_word
 1978              	.LVL88:
 1979              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 1980              		.loc 1 736 29 view .LVU609
 1981 0ba0 4829F2   		sub	rdx, rsi	# tmp322, source_word
 1982 0ba3 4C8D34DF 		lea	r14, [rdi+rbx*8]	# tmp321,
 1983 0ba7 4D29EE   		sub	r14, r13	# _243, _89
 1984 0baa 4C89F7   		mov	rdi, r14	# tmp332, _243
 1985              	.LVL89:
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 1986              		.loc 1 736 29 view .LVU610
 1987 0bad 4C29C7   		sub	rdi, r8	# tmp332, ivtmp.193
 1988 0bb0 4883EF08 		sub	rdi, 8	# tmp333,
 1989 0bb4 48C1EF03 		shr	rdi, 3	# tmp331,
 1990 0bb8 4883C701 		add	rdi, 1	# tmp334,
 1991 0bbc 83E707   		and	edi, 7	# tmp335,
 1992 0bbf 0F842601 		je	.L149	#,
 1992      0000
GAS LISTING /tmp/cclewcPz.s 			page 57


 1993 0bc5 4883FF01 		cmp	rdi, 1	# tmp335,
 1994 0bc9 0F84F100 		je	.L121	#,
 1994      0000
 1995 0bcf 4883FF02 		cmp	rdi, 2	# tmp335,
 1996 0bd3 0F84C600 		je	.L122	#,
 1996      0000
 1997 0bd9 4883FF03 		cmp	rdi, 3	# tmp335,
 1998 0bdd 0F849A00 		je	.L123	#,
 1998      0000
 1999 0be3 4883FF04 		cmp	rdi, 4	# tmp335,
 2000 0be7 7471     		je	.L124	#,
 2001 0be9 4883FF05 		cmp	rdi, 5	# tmp335,
 2002 0bed 744A     		je	.L125	#,
 2003 0bef 4883FF06 		cmp	rdi, 6	# tmp335,
 2004 0bf3 7423     		je	.L126	#,
 2005              	.LVL90:
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2006              		.loc 1 736 9 is_stmt 1 view .LVU611
 2007              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2008              		.loc 1 736 54 is_stmt 0 view .LVU612
 2009 0bf5 440FB67C 		movzx	r15d, BYTE PTR -16[rsp]	# tmp554, %sfp
 2009      24F0
 2010 0bfb C44283F7 		shrx	r10, QWORD PTR [r8], r15	# tmp428, MEM[base: _235, offset: 0B], tmp554
 2010      10
 2011              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2012              		.loc 1 736 99 view .LVU613
 2013 0c00 440FB64C 		movzx	r9d, BYTE PTR -12[rsp]	# tmp555, %sfp
 2013      24F4
 2014 0c06 C442B1F7 		shlx	r13, QWORD PTR 8[r8], r9	# tmp430, MEM[base: _235, offset: 8B], tmp555
 2014      6808
 2015              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2016              		.loc 1 736 72 view .LVU614
 2017 0c0c 4D09EA   		or	r10, r13	# tmp431, tmp430
 2018 0c0f 4D8954D0 		mov	QWORD PTR 8[r8+rdx*8], r10	# MEM[base: _235, index: _237, step: 8, offset: 8B], tmp431
 2018      08
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2019              		.loc 1 735 48 is_stmt 1 view .LVU615
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2020              		.loc 1 735 12 view .LVU616
 2021 0c14 4983C008 		add	r8, 8	# ivtmp.193,
 2022              	.L126:
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2023              		.loc 1 736 9 view .LVU617
 2024              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2025              		.loc 1 736 54 is_stmt 0 view .LVU618
 2026 0c18 0FB64C24 		movzx	ecx, BYTE PTR -16[rsp]	# tmp556, %sfp
 2026      F0
 2027 0c1d C442F3F7 		shrx	r12, QWORD PTR [r8], rcx	# tmp433, MEM[base: _235, offset: 0B], tmp556
 2027      20
 2028              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2029              		.loc 1 736 99 view .LVU619
 2030 0c22 0FB65C24 		movzx	ebx, BYTE PTR -12[rsp]	# tmp557, %sfp
GAS LISTING /tmp/cclewcPz.s 			page 58


 2030      F4
 2031 0c27 C442E1F7 		shlx	r11, QWORD PTR 8[r8], rbx	# tmp435, MEM[base: _235, offset: 8B], tmp557
 2031      5808
 2032              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2033              		.loc 1 736 72 view .LVU620
 2034 0c2d 4D09DC   		or	r12, r11	# tmp436, tmp435
 2035 0c30 4D8964D0 		mov	QWORD PTR 8[r8+rdx*8], r12	# MEM[base: _235, index: _237, step: 8, offset: 8B], tmp436
 2035      08
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2036              		.loc 1 735 48 is_stmt 1 view .LVU621
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2037              		.loc 1 735 12 view .LVU622
 2038 0c35 4983C008 		add	r8, 8	# ivtmp.193,
 2039              	.L125:
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2040              		.loc 1 736 9 view .LVU623
 2041              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2042              		.loc 1 736 54 is_stmt 0 view .LVU624
 2043 0c39 0FB64424 		movzx	eax, BYTE PTR -16[rsp]	# tmp558, %sfp
 2043      F0
 2044 0c3e C4C2FBF7 		shrx	rdi, QWORD PTR [r8], rax	# tmp438, MEM[base: _235, offset: 0B], tmp558
 2044      38
 2045              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2046              		.loc 1 736 99 view .LVU625
 2047 0c43 0FB67424 		movzx	esi, BYTE PTR -12[rsp]	# tmp559, %sfp
 2047      F4
 2048 0c48 C442C9F7 		shlx	r15, QWORD PTR 8[r8], rsi	# tmp440, MEM[base: _235, offset: 8B], tmp559
 2048      7808
 2049              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2050              		.loc 1 736 72 view .LVU626
 2051 0c4e 4C09FF   		or	rdi, r15	# tmp441, tmp440
 2052 0c51 49897CD0 		mov	QWORD PTR 8[r8+rdx*8], rdi	# MEM[base: _235, index: _237, step: 8, offset: 8B], tmp441
 2052      08
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2053              		.loc 1 735 48 is_stmt 1 view .LVU627
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2054              		.loc 1 735 12 view .LVU628
 2055 0c56 4983C008 		add	r8, 8	# ivtmp.193,
 2056              	.L124:
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2057              		.loc 1 736 9 view .LVU629
 2058              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2059              		.loc 1 736 54 is_stmt 0 view .LVU630
 2060 0c5a 440FB654 		movzx	r10d, BYTE PTR -16[rsp]	# tmp560, %sfp
 2060      24F0
 2061 0c60 C442ABF7 		shrx	r9, QWORD PTR [r8], r10	# tmp443, MEM[base: _235, offset: 0B], tmp560
 2061      08
 2062              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2063              		.loc 1 736 99 view .LVU631
 2064 0c65 440FB66C 		movzx	r13d, BYTE PTR -12[rsp]	# tmp561, %sfp
 2064      24F4
GAS LISTING /tmp/cclewcPz.s 			page 59


 2065 0c6b C4C291F7 		shlx	rcx, QWORD PTR 8[r8], r13	# tmp445, MEM[base: _235, offset: 8B], tmp561
 2065      4808
 2066              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2067              		.loc 1 736 72 view .LVU632
 2068 0c71 4909C9   		or	r9, rcx	# tmp446, tmp445
 2069 0c74 4D894CD0 		mov	QWORD PTR 8[r8+rdx*8], r9	# MEM[base: _235, index: _237, step: 8, offset: 8B], tmp446
 2069      08
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2070              		.loc 1 735 48 is_stmt 1 view .LVU633
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2071              		.loc 1 735 12 view .LVU634
 2072 0c79 4983C008 		add	r8, 8	# ivtmp.193,
 2073              	.L123:
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2074              		.loc 1 736 9 view .LVU635
 2075              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2076              		.loc 1 736 54 is_stmt 0 view .LVU636
 2077 0c7d 440FB664 		movzx	r12d, BYTE PTR -16[rsp]	# tmp562, %sfp
 2077      24F0
 2078 0c83 C4429BF7 		shrx	r11, QWORD PTR [r8], r12	# tmp448, MEM[base: _235, offset: 0B], tmp562
 2078      18
 2079              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2080              		.loc 1 736 99 view .LVU637
 2081 0c88 0FB65C24 		movzx	ebx, BYTE PTR -12[rsp]	# tmp563, %sfp
 2081      F4
 2082 0c8d C4C2E1F7 		shlx	rax, QWORD PTR 8[r8], rbx	# tmp450, MEM[base: _235, offset: 8B], tmp563
 2082      4008
 2083              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2084              		.loc 1 736 72 view .LVU638
 2085 0c93 4909C3   		or	r11, rax	# tmp451, tmp450
 2086 0c96 4D895CD0 		mov	QWORD PTR 8[r8+rdx*8], r11	# MEM[base: _235, index: _237, step: 8, offset: 8B], tmp451
 2086      08
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2087              		.loc 1 735 48 is_stmt 1 view .LVU639
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2088              		.loc 1 735 12 view .LVU640
 2089 0c9b 4983C008 		add	r8, 8	# ivtmp.193,
 2090              	.L122:
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2091              		.loc 1 736 9 view .LVU641
 2092              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2093              		.loc 1 736 54 is_stmt 0 view .LVU642
 2094 0c9f 0FB67C24 		movzx	edi, BYTE PTR -16[rsp]	# tmp564, %sfp
 2094      F0
 2095 0ca4 C442C3F7 		shrx	r15, QWORD PTR [r8], rdi	# tmp453, MEM[base: _235, offset: 0B], tmp564
 2095      38
 2096              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2097              		.loc 1 736 99 view .LVU643
 2098 0ca9 0FB67424 		movzx	esi, BYTE PTR -12[rsp]	# tmp565, %sfp
 2098      F4
 2099 0cae C442C9F7 		shlx	r10, QWORD PTR 8[r8], rsi	# tmp455, MEM[base: _235, offset: 8B], tmp565
GAS LISTING /tmp/cclewcPz.s 			page 60


 2099      5008
 2100              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2101              		.loc 1 736 72 view .LVU644
 2102 0cb4 4D09D7   		or	r15, r10	# tmp456, tmp455
 2103 0cb7 4D897CD0 		mov	QWORD PTR 8[r8+rdx*8], r15	# MEM[base: _235, index: _237, step: 8, offset: 8B], tmp456
 2103      08
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2104              		.loc 1 735 48 is_stmt 1 view .LVU645
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2105              		.loc 1 735 12 view .LVU646
 2106 0cbc 4983C008 		add	r8, 8	# ivtmp.193,
 2107              	.L121:
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2108              		.loc 1 736 9 view .LVU647
 2109              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2110              		.loc 1 736 54 is_stmt 0 view .LVU648
 2111 0cc0 440FB64C 		movzx	r9d, BYTE PTR -16[rsp]	# tmp566, %sfp
 2111      24F0
 2112 0cc6 C442B3F7 		shrx	r13, QWORD PTR [r8], r9	# tmp458, MEM[base: _235, offset: 0B], tmp566
 2112      28
 2113              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2114              		.loc 1 736 99 view .LVU649
 2115 0ccb 0FB64C24 		movzx	ecx, BYTE PTR -12[rsp]	# tmp567, %sfp
 2115      F4
 2116 0cd0 C442F1F7 		shlx	r12, QWORD PTR 8[r8], rcx	# tmp460, MEM[base: _235, offset: 8B], tmp567
 2116      6008
 2117              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2118              		.loc 1 736 72 view .LVU650
 2119 0cd6 4D09E5   		or	r13, r12	# tmp461, tmp460
 2120 0cd9 4D896CD0 		mov	QWORD PTR 8[r8+rdx*8], r13	# MEM[base: _235, index: _237, step: 8, offset: 8B], tmp461
 2120      08
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2121              		.loc 1 735 48 is_stmt 1 view .LVU651
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2122              		.loc 1 735 12 view .LVU652
 2123 0cde 4983C008 		add	r8, 8	# ivtmp.193,
 2124              	# sieve_extend.c:735:     for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2125              		.loc 1 735 5 is_stmt 0 view .LVU653
 2126 0ce2 4D39F0   		cmp	r8, r14	# ivtmp.193, _243
 2127 0ce5 0F8474FE 		je	.L154	#,
 2127      FFFF
 2128              	.L149:
 2129 0ceb 448B5C24 		mov	r11d, DWORD PTR -12[rsp]	# _95, %sfp
 2129      F4
 2130 0cf0 8B5C24F0 		mov	ebx, DWORD PTR -16[rsp]	# _97, %sfp
 2131              	.L62:
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2132              		.loc 1 736 9 is_stmt 1 view .LVU654
 2133              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2134              		.loc 1 736 99 is_stmt 0 view .LVU655
 2135 0cf4 C4C2A1F7 		shlx	rdi, QWORD PTR 8[r8], r11	# tmp325, MEM[base: _235, offset: 8B], _95
GAS LISTING /tmp/cclewcPz.s 			page 61


 2135      7808
 2136              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2137              		.loc 1 736 54 view .LVU656
 2138 0cfa C4C2E3F7 		shrx	rax, QWORD PTR [r8], rbx	# tmp323, MEM[base: _235, offset: 0B], _97
 2138      00
 2139              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2140              		.loc 1 736 72 view .LVU657
 2141 0cff 4809F8   		or	rax, rdi	# tmp327, tmp325
 2142 0d02 4D8D7808 		lea	r15, 8[r8]	# tmp336,
 2143 0d06 498944D0 		mov	QWORD PTR 8[r8+rdx*8], rax	# MEM[base: _235, index: _237, step: 8, offset: 8B], tmp327
 2143      08
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2144              		.loc 1 735 48 is_stmt 1 view .LVU658
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2145              		.loc 1 735 12 view .LVU659
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2146              		.loc 1 736 9 view .LVU660
 2147              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2148              		.loc 1 736 54 is_stmt 0 view .LVU661
 2149 0d0b C4C2E3F7 		shrx	rsi, QWORD PTR 8[r8], rbx	# tmp387, MEM[base: _235, offset: 0B], _97
 2149      7008
 2150              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2151              		.loc 1 736 99 view .LVU662
 2152 0d11 C442A1F7 		shlx	r10, QWORD PTR 8[r15], r11	# tmp389, MEM[base: _235, offset: 8B], _95
 2152      5708
 2153              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2154              		.loc 1 736 72 view .LVU663
 2155 0d17 4C09D6   		or	rsi, r10	# tmp390, tmp389
 2156 0d1a 4D8D4810 		lea	r9, 16[r8]	# ivtmp.193,
 2157 0d1e 4D8D6018 		lea	r12, 24[r8]	# ivtmp.193,
 2158 0d22 498974D0 		mov	QWORD PTR 16[r8+rdx*8], rsi	# MEM[base: _235, index: _237, step: 8, offset: 8B], tmp390
 2158      10
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2159              		.loc 1 735 48 is_stmt 1 view .LVU664
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2160              		.loc 1 735 12 view .LVU665
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2161              		.loc 1 736 9 view .LVU666
 2162              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2163              		.loc 1 736 54 is_stmt 0 view .LVU667
 2164 0d27 C442E3F7 		shrx	r13, QWORD PTR 16[r8], rbx	# tmp393, MEM[base: _235, offset: 0B], _97
 2164      6810
 2165              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2166              		.loc 1 736 99 view .LVU668
 2167 0d2d C4C2A1F7 		shlx	rcx, QWORD PTR 8[r9], r11	# tmp395, MEM[base: _235, offset: 8B], _95
 2167      4908
 2168              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2169              		.loc 1 736 72 view .LVU669
 2170 0d33 4909CD   		or	r13, rcx	# tmp396, tmp395
GAS LISTING /tmp/cclewcPz.s 			page 62


 2171 0d36 4D896CD0 		mov	QWORD PTR 24[r8+rdx*8], r13	# MEM[base: _235, index: _237, step: 8, offset: 8B], tmp396
 2171      18
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2172              		.loc 1 735 48 is_stmt 1 view .LVU670
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2173              		.loc 1 735 12 view .LVU671
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2174              		.loc 1 736 9 view .LVU672
 2175              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2176              		.loc 1 736 54 is_stmt 0 view .LVU673
 2177 0d3b C4C2E3F7 		shrx	rax, QWORD PTR 24[r8], rbx	# tmp399, MEM[base: _235, offset: 0B], _97
 2177      4018
 2178              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2179              		.loc 1 736 99 view .LVU674
 2180 0d41 C4C2A1F7 		shlx	rdi, QWORD PTR 8[r12], r11	# tmp401, MEM[base: _235, offset: 8B], _95
 2180      7C2408
 2181              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2182              		.loc 1 736 72 view .LVU675
 2183 0d48 4809F8   		or	rax, rdi	# tmp402, tmp401
 2184 0d4b 4D8D7820 		lea	r15, 32[r8]	# ivtmp.193,
 2185 0d4f 4D8D4828 		lea	r9, 40[r8]	# ivtmp.193,
 2186 0d53 498944D0 		mov	QWORD PTR 32[r8+rdx*8], rax	# MEM[base: _235, index: _237, step: 8, offset: 8B], tmp402
 2186      20
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2187              		.loc 1 735 48 is_stmt 1 view .LVU676
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2188              		.loc 1 735 12 view .LVU677
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2189              		.loc 1 736 9 view .LVU678
 2190              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2191              		.loc 1 736 54 is_stmt 0 view .LVU679
 2192 0d58 C4C2E3F7 		shrx	rsi, QWORD PTR 32[r8], rbx	# tmp405, MEM[base: _235, offset: 0B], _97
 2192      7020
 2193              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2194              		.loc 1 736 99 view .LVU680
 2195 0d5e C442A1F7 		shlx	r10, QWORD PTR 8[r15], r11	# tmp407, MEM[base: _235, offset: 8B], _95
 2195      5708
 2196              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2197              		.loc 1 736 72 view .LVU681
 2198 0d64 4C09D6   		or	rsi, r10	# tmp408, tmp407
 2199 0d67 498974D0 		mov	QWORD PTR 40[r8+rdx*8], rsi	# MEM[base: _235, index: _237, step: 8, offset: 8B], tmp408
 2199      28
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2200              		.loc 1 735 48 is_stmt 1 view .LVU682
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2201              		.loc 1 735 12 view .LVU683
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2202              		.loc 1 736 9 view .LVU684
 2203              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2204              		.loc 1 736 54 is_stmt 0 view .LVU685
GAS LISTING /tmp/cclewcPz.s 			page 63


 2205 0d6c C442E3F7 		shrx	r13, QWORD PTR 40[r8], rbx	# tmp411, MEM[base: _235, offset: 0B], _97
 2205      6828
 2206              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2207              		.loc 1 736 99 view .LVU686
 2208 0d72 C4C2A1F7 		shlx	rcx, QWORD PTR 8[r9], r11	# tmp413, MEM[base: _235, offset: 8B], _95
 2208      4908
 2209              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2210              		.loc 1 736 72 view .LVU687
 2211 0d78 4909CD   		or	r13, rcx	# tmp414, tmp413
 2212 0d7b 4D8D6030 		lea	r12, 48[r8]	# ivtmp.193,
 2213 0d7f 4D8D7838 		lea	r15, 56[r8]	# ivtmp.193,
 2214 0d83 4D896CD0 		mov	QWORD PTR 48[r8+rdx*8], r13	# MEM[base: _235, index: _237, step: 8, offset: 8B], tmp414
 2214      30
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2215              		.loc 1 735 48 is_stmt 1 view .LVU688
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2216              		.loc 1 735 12 view .LVU689
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2217              		.loc 1 736 9 view .LVU690
 2218              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2219              		.loc 1 736 54 is_stmt 0 view .LVU691
 2220 0d88 C4C2E3F7 		shrx	rax, QWORD PTR 48[r8], rbx	# tmp417, MEM[base: _235, offset: 0B], _97
 2220      4030
 2221              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2222              		.loc 1 736 99 view .LVU692
 2223 0d8e C4C2A1F7 		shlx	rdi, QWORD PTR 8[r12], r11	# tmp419, MEM[base: _235, offset: 8B], _95
 2223      7C2408
 2224              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2225              		.loc 1 736 72 view .LVU693
 2226 0d95 4809F8   		or	rax, rdi	# tmp420, tmp419
 2227 0d98 498944D0 		mov	QWORD PTR 56[r8+rdx*8], rax	# MEM[base: _235, index: _237, step: 8, offset: 8B], tmp420
 2227      38
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2228              		.loc 1 735 48 is_stmt 1 view .LVU694
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2229              		.loc 1 735 12 view .LVU695
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2230              		.loc 1 736 9 view .LVU696
 2231              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2232              		.loc 1 736 54 is_stmt 0 view .LVU697
 2233 0d9d C4C2E3F7 		shrx	rsi, QWORD PTR 56[r8], rbx	# tmp423, MEM[base: _235, offset: 0B], _97
 2233      7038
 2234              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2235              		.loc 1 736 99 view .LVU698
 2236 0da3 C442A1F7 		shlx	r10, QWORD PTR 8[r15], r11	# tmp425, MEM[base: _235, offset: 8B], _95
 2236      5708
 2237              	# sieve_extend.c:736:         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bit
 736:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 2238              		.loc 1 736 72 view .LVU699
 2239 0da9 4C09D6   		or	rsi, r10	# tmp426, tmp425
GAS LISTING /tmp/cclewcPz.s 			page 64


 2240 0dac 498974D0 		mov	QWORD PTR 64[r8+rdx*8], rsi	# MEM[base: _235, index: _237, step: 8, offset: 8B], tmp426
 2240      40
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2241              		.loc 1 735 48 is_stmt 1 view .LVU700
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2242              		.loc 1 735 12 view .LVU701
 2243 0db1 4983C040 		add	r8, 64	# ivtmp.193,
 2244              	# sieve_extend.c:735:     for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2245              		.loc 1 735 5 is_stmt 0 view .LVU702
 2246 0db5 4D39F0   		cmp	r8, r14	# ivtmp.193, _243
 2247 0db8 0F8536FF 		jne	.L62	#,
 2247      FFFF
 2248 0dbe E99CFDFF 		jmp	.L154	#
 2248      FF
 2249              	.LVL91:
 2250              		.p2align 4,,7
 2251 0dc3 0F1F4400 		.p2align 3
 2251      00
 2252              	.L153:
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2253              		.loc 1 735 5 view .LVU703
 2254 0dc8 C5F877   		vzeroupper
 2255              	# sieve_extend.c:739: }
 2256              		.loc 1 739 1 view .LVU704
 2257 0dcb 488D65D8 		lea	rsp, -40[rbp]	#,
 2258 0dcf 5B       		pop	rbx	#
 2259              	.LVL92:
 2260              		.loc 1 739 1 view .LVU705
 2261 0dd0 415C     		pop	r12	#
 2262 0dd2 415D     		pop	r13	#
 2263 0dd4 415E     		pop	r14	#
 2264 0dd6 415F     		pop	r15	#
 2265 0dd8 5D       		pop	rbp	#
 2266              		.cfi_remember_state
 2267              		.cfi_def_cfa 7, 8
 2268 0dd9 C3       		ret	
 2269              	.LVL93:
 2270 0dda 660F1F44 		.p2align 4,,7
 2270      0000
 2271              		.p2align 3
 2272              	.L64:
 2273              		.cfi_restore_state
 2274              	# sieve_extend.c:717:     register counter_t source_word = wordindex(source_start);
 717:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 2275              		.loc 1 717 24 view .LVU706
 2276 0de0 488B5424 		mov	rdx, QWORD PTR -8[rsp]	# source_word, %sfp
 2276      F8
 2277              	# sieve_extend.c:735:     for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
 735:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 2278              		.loc 1 735 5 view .LVU707
 2279 0de5 4D89C8   		mov	r8, r9	# copy_word, copy_word
 2280              	# sieve_extend.c:717:     register counter_t source_word = wordindex(source_start);
 717:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 2281              		.loc 1 717 24 view .LVU708
 2282 0de8 4889D6   		mov	rsi, rdx	# source_word, source_word
 2283 0deb 4C8D5201 		lea	r10, 1[rdx]	# tmp328,
GAS LISTING /tmp/cclewcPz.s 			page 65


 2284 0def E93BFAFF 		jmp	.L56	#
 2284      FF
 2285              		.cfi_endproc
 2286              	.LFE74:
 2288 0df4 66662E0F 		.p2align 4
 2288      1F840000 
 2288      00000090 
 2289              		.globl	compare_tuning_result
 2291              	compare_tuning_result:
 2292              	.LVL94:
 2293              	.LFB86:
 740:sieve_extend.c **** 
 741:sieve_extend.c **** static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source_start, const counter_
 742:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 743:sieve_extend.c **** 
 744:sieve_extend.c ****     const counter_t destination_stop_word = wordindex(destination_stop);
 745:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 746:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_calc(copy_start);
 747:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 748:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 749:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 750:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 751:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 752:sieve_extend.c ****                              & ~chopmask(copy_start); // because this is the first word, dont copy 
 753:sieve_extend.c **** 
 754:sieve_extend.c ****     copy_word++;
 755:sieve_extend.c ****     source_word++;
 756:sieve_extend.c **** 
 757:sieve_extend.c ****     const counter_t aligned_copy_word = min(source_word + size, destination_stop_word); // after <<
 758:sieve_extend.c ****     const counter_t distance  = extendSieve_shiftleft_unrolled(bitarray, aligned_copy_word, shift, 
 759:sieve_extend.c ****     source_word += distance;
 760:sieve_extend.c ****     copy_word += distance;
 761:sieve_extend.c **** 
 762:sieve_extend.c ****      debug { counter_t fast_loop_stop_word = uintsafeminus(aligned_copy_word,2); printf("...start -
 763:sieve_extend.c **** 
 764:sieve_extend.c ****     #pragma GCC ivdep
 765:sieve_extend.c ****     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 766:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 767:sieve_extend.c ****     }
 768:sieve_extend.c **** 
 769:sieve_extend.c ****     if (copy_word >= destination_stop_word) return;
 770:sieve_extend.c **** 
 771:sieve_extend.c ****     source_word = copy_word - size; // recalibrate
 772:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 773:sieve_extend.c **** 
 774:sieve_extend.c ****     #pragma GCC ivdep
 775:sieve_extend.c ****     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 776:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 777:sieve_extend.c **** 
 778:sieve_extend.c ****     #pragma GCC ivdep
 779:sieve_extend.c ****     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 780:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 781:sieve_extend.c **** 
 782:sieve_extend.c **** 
 783:sieve_extend.c ****  }
 784:sieve_extend.c **** 
 785:sieve_extend.c **** static inline void extendSieve(bitword_t* bitarray, const counter_t source_start, const counter_t s
GAS LISTING /tmp/cclewcPz.s 			page 66


 786:sieve_extend.c ****     if (size < WORD_SIZE_counter)   {
 787:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 788:sieve_extend.c ****         return; // rapid exit for small sizes
 789:sieve_extend.c ****     }
 790:sieve_extend.c **** 
 791:sieve_extend.c ****     const counter_t copy_start  = source_start + size;
 792:sieve_extend.c ****     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 793:sieve_extend.c ****     const bitshift_t source_bit = bitindex_calc(source_start);
 794:sieve_extend.c **** 
 795:sieve_extend.c ****     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_start, size, destinatio
 796:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, source_start, size, desti
 797:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 798:sieve_extend.c **** }
 799:sieve_extend.c **** 
 800:sieve_extend.c **** static void sieve_block_stripe(bitword_t* bitarray, const counter_t block_start, const counter_t bl
 801:sieve_extend.c ****     counter_t prime = prime_start;
 802:sieve_extend.c ****     counter_t start = 0;
 803:sieve_extend.c ****     counter_t step  = prime * 2 + 1;
 804:sieve_extend.c **** 
 805:sieve_extend.c ****     debug printf("Block strip for block %ju - %ju\n",(uintmax_t)block_start,(uintmax_t)block_stop);
 806:sieve_extend.c ****     
 807:sieve_extend.c ****     while (prime*step <= block_stop) {
 808:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 809:sieve_extend.c ****             start = block_start + prime + prime - ((block_start + prime) % step);
 810:sieve_extend.c ****         else 
 811:sieve_extend.c ****             start = prime * prime * 2 + prime * 2;
 812:sieve_extend.c **** 
 813:sieve_extend.c ****         if (step < VECTORSTEP_FASTER) {
 814:sieve_extend.c ****             setBitsTrue_largeRange_vector(bitarray, start, step, block_stop);
 815:sieve_extend.c ****             prime = searchBitFalse(bitarray, prime+1 );
 816:sieve_extend.c ****         }
 817:sieve_extend.c ****         else {
 818:sieve_extend.c ****             setBitsTrue_largeRange(bitarray, start, step, block_stop);
 819:sieve_extend.c ****             prime = searchBitFalse_longRange(bitarray, prime+1 );
 820:sieve_extend.c ****         }
 821:sieve_extend.c **** 
 822:sieve_extend.c ****         start = prime * prime * 2 + prime * 2;
 823:sieve_extend.c ****         step  = prime * 2 + 1;
 824:sieve_extend.c ****     }
 825:sieve_extend.c **** }
 826:sieve_extend.c **** 
 827:sieve_extend.c **** struct block {
 828:sieve_extend.c ****     counter_t pattern_size; // size of pattern applied 
 829:sieve_extend.c ****     counter_t pattern_start; // start of pattern
 830:sieve_extend.c ****     counter_t prime; // next prime to be striped
 831:sieve_extend.c **** };
 832:sieve_extend.c **** 
 833:sieve_extend.c **** // returns prime that could not be handled:
 834:sieve_extend.c **** // start is too large
 835:sieve_extend.c **** // range is too big
 836:sieve_extend.c **** static struct block sieve_block_extend(struct sieve_state *sieve, const counter_t block_start, cons
 837:sieve_extend.c ****     register counter_t prime   = 0;
 838:sieve_extend.c ****     counter_t patternsize_bits = 1;
 839:sieve_extend.c ****     counter_t pattern_start    = 0;
 840:sieve_extend.c ****     counter_t range_stop       = block_start;
 841:sieve_extend.c ****     bitword_t* bitarray        = sieve->bitarray;
 842:sieve_extend.c ****     struct block block = { .prime = 0, .pattern_start = 0, .pattern_size = 0 };
GAS LISTING /tmp/cclewcPz.s 			page 67


 843:sieve_extend.c **** 
 844:sieve_extend.c ****     sieve->bitarray[0] = SAFE_ZERO; // only the first word has to be cleared; the rest is populated
 845:sieve_extend.c ****     
 846:sieve_extend.c ****     for (;range_stop < block_stop;) {
 847:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 848:sieve_extend.c ****         counter_t start = prime * prime * 2 + prime * 2;
 849:sieve_extend.c ****         if unlikely(start > block_stop) break;
 850:sieve_extend.c **** 
 851:sieve_extend.c ****         const counter_t step  = prime * 2 + 1;
 852:sieve_extend.c ****         if (block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start + prime
 853:sieve_extend.c **** 
 854:sieve_extend.c ****         range_stop = block_start + patternsize_bits * step * 2;  // range is x2 so the second block
 855:sieve_extend.c ****         block.pattern_size = patternsize_bits;
 856:sieve_extend.c ****         block.pattern_start = pattern_start;
 857:sieve_extend.c ****         if (range_stop > block_stop) return block; //range_stop = block_stop;
 858:sieve_extend.c **** 
 859:sieve_extend.c ****         if (patternsize_bits>1) {
 860:sieve_extend.c ****             pattern_start = block_start | patternsize_bits;
 861:sieve_extend.c ****             extendSieve(bitarray, pattern_start, patternsize_bits, range_stop);
 862:sieve_extend.c ****         }
 863:sieve_extend.c ****         patternsize_bits *= step;
 864:sieve_extend.c **** 
 865:sieve_extend.c ****         // if      (step < SMALLSTEP_FASTER)      setBitsTrue_smallStep (bitarray, start, (bitshift
 866:sieve_extend.c ****         // else if (step < MEDIUMSTEP_FASTER)     setBitsTrue_mediumStep(bitarray, start, step, ran
 867:sieve_extend.c ****         if (step < VECTORSTEP_FASTER)     setBitsTrue_largeRange_vector(bitarray, start, step, rang
 868:sieve_extend.c ****         else                              setBitsTrue_largeRange(bitarray, start, step, range_stop)
 869:sieve_extend.c ****         block.prime = prime;
 870:sieve_extend.c ****     } 
 871:sieve_extend.c **** 
 872:sieve_extend.c ****     return block;
 873:sieve_extend.c **** }
 874:sieve_extend.c **** 
 875:sieve_extend.c **** static struct sieve_state *sieve(const counter_t maxints, const counter_t blocksize) {
 876:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 877:sieve_extend.c ****     counter_t prime     = 0;
 878:sieve_extend.c ****     bitword_t* bitarray = sieve->bitarray;
 879:sieve_extend.c **** 
 880:sieve_extend.c ****     debug printf("Running sieve to find all primes up to %ju with blocksize %ju\n",(uintmax_t)maxin
 881:sieve_extend.c **** 
 882:sieve_extend.c ****     // fill the whole sieve bij adding en copying incrementally
 883:sieve_extend.c ****     struct block block = sieve_block_extend(sieve, 0, sieve->bits);
 884:sieve_extend.c ****     extendSieve(bitarray, block.pattern_start, block.pattern_size, sieve->bits);
 885:sieve_extend.c ****     prime = block.prime;
 886:sieve_extend.c **** 
 887:sieve_extend.c ****     // //#pragma GCC unroll 8
 888:sieve_extend.c ****     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= sieve->bits; block_sta
 889:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 890:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime);
 891:sieve_extend.c ****         sieve_block_stripe(bitarray, block_start, block_stop, prime);
 892:sieve_extend.c ****     } 
 893:sieve_extend.c **** 
 894:sieve_extend.c ****     return sieve;
 895:sieve_extend.c **** }
 896:sieve_extend.c **** 
 897:sieve_extend.c **** static struct sieve_state *sieve_blockbyblock(const counter_t maxints, const counter_t blocksize) {
 898:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 899:sieve_extend.c ****     counter_t prime     = 1;
GAS LISTING /tmp/cclewcPz.s 			page 68


 900:sieve_extend.c ****     bitword_t* bitarray = sieve->bitarray;
 901:sieve_extend.c ****     for(counter_t index=0; index<wordindex(maxints/2); index++) {
 902:sieve_extend.c ****         bitarray[index]=SAFE_ZERO;
 903:sieve_extend.c ****     }
 904:sieve_extend.c **** 
 905:sieve_extend.c ****     debug printf("Running sieve to find all primes up to %ju with blocksize %ju\n",(uintmax_t)maxin
 906:sieve_extend.c **** 
 907:sieve_extend.c ****     // //#pragma GCC unroll 8
 908:sieve_extend.c ****     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= sieve->bits; block_sta
 909:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 910:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime);
 911:sieve_extend.c ****         sieve_block_stripe(bitarray, block_start, block_stop, prime);
 912:sieve_extend.c ****     } 
 913:sieve_extend.c **** 
 914:sieve_extend.c ****     return sieve;
 915:sieve_extend.c **** }
 916:sieve_extend.c **** 
 917:sieve_extend.c **** static void show_primes(struct sieve_state *sieve, counter_t maxFactor) {
 918:sieve_extend.c ****     counter_t primeCount = 1;    // We already have 2
 919:sieve_extend.c ****     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(sieve->bitarray, factor+
 920:sieve_extend.c ****         primeCount++;
 921:sieve_extend.c ****         if (factor < maxFactor/2) {
 922:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 923:sieve_extend.c ****             if (primeCount % 10 == 0) printf("\n");
 924:sieve_extend.c ****         }
 925:sieve_extend.c ****     }
 926:sieve_extend.c ****     printf("\nFound %ju primes until %ju\n",(uintmax_t)primeCount, (uintmax_t)sieve->bits*2+1);
 927:sieve_extend.c **** }
 928:sieve_extend.c **** 
 929:sieve_extend.c **** static counter_t count_primes(struct sieve_state *sieve) {
 930:sieve_extend.c ****     counter_t primeCount = 1;
 931:sieve_extend.c ****     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(sieve->bitarray, factor+
 932:sieve_extend.c ****     return primeCount;
 933:sieve_extend.c **** }
 934:sieve_extend.c **** 
 935:sieve_extend.c **** static void deepAnalyzePrimes(struct sieve_state *sieve) {
 936:sieve_extend.c ****     printf("DeepAnalyzing\n");
 937:sieve_extend.c ****     counter_t warn_prime = 0;
 938:sieve_extend.c ****     counter_t warn_nonprime = 0;
 939:sieve_extend.c ****     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 940:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 941:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 942:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 943:sieve_extend.c ****                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marked prime, but %ju * %ju
 944:sieve_extend.c ****                 }
 945:sieve_extend.c ****             }
 946:sieve_extend.c ****         }
 947:sieve_extend.c ****         else {
 948:sieve_extend.c ****             counter_t c_prime = 0;
 949:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 950:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 951:sieve_extend.c ****             }
 952:sieve_extend.c ****             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju) was marked non-prime, 
 953:sieve_extend.c ****         }
 954:sieve_extend.c ****     }
 955:sieve_extend.c **** }
 956:sieve_extend.c **** 
GAS LISTING /tmp/cclewcPz.s 			page 69


 957:sieve_extend.c **** 
 958:sieve_extend.c **** int validatePrimeCount(struct sieve_state *sieve, int option_verboselevel) {
 959:sieve_extend.c **** 
 960:sieve_extend.c ****     counter_t primecount = count_primes(sieve);
 961:sieve_extend.c ****     counter_t valid_primes = 0;
 962:sieve_extend.c ****     switch(sieve->size) {
 963:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 964:sieve_extend.c ****         case 100:           valid_primes = 25;       break;
 965:sieve_extend.c ****         case 1000:          valid_primes = 168;      break;
 966:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 967:sieve_extend.c ****         case 100000:        valid_primes = 9592;     break;
 968:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
 969:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 970:sieve_extend.c ****         case 100000000:     valid_primes = 5761455;  break;
 971:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 972:sieve_extend.c ****         default:            valid_primes= 0;
 973:sieve_extend.c ****     }
 974:sieve_extend.c **** 
 975:sieve_extend.c ****     int valid = (valid_primes == primecount);
 976:sieve_extend.c ****     if (valid  && option_verboselevel >= 4) printf("Result: Sievesize %ju is expected to have %ju p
 977:sieve_extend.c ****     if (!valid && option_verboselevel >= 1) {
 978:sieve_extend.c ****         printf("No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produ
 979:sieve_extend.c ****         if (!valid && option_verboselevel >= 2) show_primes(sieve, default_show_primes_on_error);
 980:sieve_extend.c ****     }
 981:sieve_extend.c ****     if (!valid && option_verboselevel >= 2) deepAnalyzePrimes(sieve);
 982:sieve_extend.c ****     return (valid);
 983:sieve_extend.c **** }
 984:sieve_extend.c **** 
 985:sieve_extend.c **** void usage(char *name) {
 986:sieve_extend.c ****     fprintf(stderr, "Usage: %s [options] [maximum]\n", name);
 987:sieve_extend.c ****     fprintf(stderr, "Options:\n");
 988:sieve_extend.c ****     fprintf(stderr, "  --verbose <level>  Show more output to a certain level:\n");
 989:sieve_extend.c ****     fprintf(stderr, "                     1 - show phase progress\n");
 990:sieve_extend.c ****     fprintf(stderr, "                     2 - show general progress within the phase\n");
 991:sieve_extend.c ****     fprintf(stderr, "                     3 - show actual work\n");
 992:sieve_extend.c ****     fprintf(stderr, "  --check            check the correctness of the algorithm\n");
 993:sieve_extend.c ****     fprintf(stderr, "  --show <maximum>   Show the primes found up to the maximum\n");
 994:sieve_extend.c ****     fprintf(stderr, "  --tune  <level>    find the best settings for the current os and hardware\n"
 995:sieve_extend.c ****     fprintf(stderr, "                     1 - fast tuning\n");
 996:sieve_extend.c ****     fprintf(stderr, "                     2 - refined tuning\n");
 997:sieve_extend.c ****     fprintf(stderr, "                     3 - maximum tuning (takes long)\n");
 998:sieve_extend.c ****     exit(1);
 999:sieve_extend.c **** }
1000:sieve_extend.c **** 
1001:sieve_extend.c **** typedef struct  {
1002:sieve_extend.c ****     counter_t maxints;
1003:sieve_extend.c ****     counter_t blocksize_bits;
1004:sieve_extend.c ****     counter_t blocksize_kb;
1005:sieve_extend.c ****     counter_t free_bits;
1006:sieve_extend.c ****     counter_t smallstep_faster;
1007:sieve_extend.c ****     counter_t mediumstep_faster;
1008:sieve_extend.c ****     counter_t vectorstep_faster;
1009:sieve_extend.c ****     counter_t sample_max;
1010:sieve_extend.c ****     double    sample_duration;
1011:sieve_extend.c ****     counter_t passes;
1012:sieve_extend.c ****     double    elapsed_time;
1013:sieve_extend.c ****     double    avg;
GAS LISTING /tmp/cclewcPz.s 			page 70


1014:sieve_extend.c **** } tuning_result_type;
1015:sieve_extend.c **** 
1016:sieve_extend.c **** int compare_tuning_result(const void *a, const void *b) {
 2294              		.loc 1 1016 57 is_stmt 1 view -0
 2295              		.cfi_startproc
 2296              		.loc 1 1016 57 is_stmt 0 view .LVU710
 2297 0e00 F30F1EFA 		endbr64	
1017:sieve_extend.c ****     tuning_result_type *resultA = (tuning_result_type *)a;
 2298              		.loc 1 1017 5 is_stmt 1 view .LVU711
 2299              	.LVL95:
1018:sieve_extend.c ****     tuning_result_type *resultB = (tuning_result_type *)b;
 2300              		.loc 1 1018 5 view .LVU712
1019:sieve_extend.c ****     return (resultB->avg > resultA->avg ? 1 : -1);
 2301              		.loc 1 1019 5 view .LVU713
 2302              	# sieve_extend.c:1019:     return (resultB->avg > resultA->avg ? 1 : -1);
 2303              		.loc 1 1019 45 is_stmt 0 view .LVU714
 2304 0e04 C5FB1046 		vmovsd	xmm0, QWORD PTR 88[rsi]	# MEM[(struct tuning_result_type *)b_5(D)].avg, MEM[(struct tuning_
 2304      58
 2305 0e09 31C0     		xor	eax, eax	# <retval>
 2306 0e0b C5F92F47 		vcomisd	xmm0, QWORD PTR 88[rdi]	# MEM[(struct tuning_result_type *)b_5(D)].avg, MEM[(struct tuning
 2306      58
 2307 0e10 0F97C0   		seta	al	#, <retval>
 2308 0e13 8D4400FF 		lea	eax, -1[rax+rax]	# <retval>,
 2309              	# sieve_extend.c:1020: }
1020:sieve_extend.c **** }
 2310              		.loc 1 1020 1 view .LVU715
 2311 0e17 C3       		ret	
 2312              		.cfi_endproc
 2313              	.LFE86:
 2315 0e18 0F1F8400 		.p2align 4
 2315      00000000 
 2317              	setBitsTrue_largeRange_vector:
 2318              	.LVL96:
 2319              	.LFB67:
 460:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange vector (%ju occ
 2320              		.loc 1 460 153 is_stmt 1 view -0
 2321              		.cfi_startproc
 460:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange vector (%ju occ
 2322              		.loc 1 460 153 is_stmt 0 view .LVU717
 2323 0e20 55       		push	rbp	#
 2324              		.cfi_def_cfa_offset 16
 2325              		.cfi_offset 6, -16
 2326 0e21 4889E5   		mov	rbp, rsp	#,
 2327              		.cfi_def_cfa_register 6
 2328 0e24 4157     		push	r15	#
 2329 0e26 4156     		push	r14	#
 2330 0e28 4155     		push	r13	#
 2331 0e2a 4154     		push	r12	#
 2332 0e2c 53       		push	rbx	#
 2333              		.cfi_offset 15, -24
 2334              		.cfi_offset 14, -32
 2335              		.cfi_offset 13, -40
 2336              		.cfi_offset 12, -48
 2337              		.cfi_offset 3, -56
 2338 0e2d 4889D3   		mov	rbx, rdx	# step, tmp418
 2339 0e30 4883E4E0 		and	rsp, -32	#,
 2340 0e34 488D6424 		lea	rsp, -64[rsp]	#,
GAS LISTING /tmp/cclewcPz.s 			page 71


 2340      C0
 2341              	# sieve_extend.c:460: static void setBitsTrue_largeRange_vector(bitword_t* __restrict bitarray_word
 460:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange vector (%ju occ
 2342              		.loc 1 460 153 view .LVU718
 2343 0e39 64488B04 		mov	rax, QWORD PTR fs:40	# tmp420, MEM[(<address-space-1> long unsigned int *)40B]
 2343      25280000 
 2343      00
 2344 0e42 48894424 		mov	QWORD PTR 56[rsp], rax	# D.6701, tmp420
 2344      38
 2345 0e47 31C0     		xor	eax, eax	# tmp420
 461:sieve_extend.c **** 
 2346              		.loc 1 461 5 is_stmt 1 view .LVU719
 463:sieve_extend.c ****     counter_t range_start_atvector = vectorstart(range_start);
 2347              		.loc 1 463 5 view .LVU720
 2348              	.LVL97:
 464:sieve_extend.c ****     if likely((range_start_atvector + step) < range_start) { // not the first step possible in this
 2349              		.loc 1 464 5 view .LVU721
 2350              	# sieve_extend.c:464:     counter_t range_start_atvector = vectorstart(range_start);
 464:sieve_extend.c ****     if likely((range_start_atvector + step) < range_start) { // not the first step possible in this
 2351              		.loc 1 464 15 is_stmt 0 view .LVU722
 2352 0e49 4889F0   		mov	rax, rsi	# range_start_atvector, range_start
 2353 0e4c 30C0     		xor	al, al	# range_start_atvector
 2354              	.LVL98:
 465:sieve_extend.c ****         debug { printf("Range start+step %ju not at start of vector %ju\n",(uintmax_t)range_start+(
 2355              		.loc 1 465 5 is_stmt 1 view .LVU723
 2356              	# sieve_extend.c:465:     if likely((range_start_atvector + step) < range_start) { // not the first
 465:sieve_extend.c ****         debug { printf("Range start+step %ju not at start of vector %ju\n",(uintmax_t)range_start+(
 2357              		.loc 1 465 8 is_stmt 0 view .LVU724
 2358 0e4e 488D1410 		lea	rdx, [rax+rdx]	# tmp178,
 2359              	.LVL99:
 465:sieve_extend.c ****         debug { printf("Range start+step %ju not at start of vector %ju\n",(uintmax_t)range_start+(
 2360              		.loc 1 465 8 view .LVU725
 2361 0e52 4839F2   		cmp	rdx, rsi	# tmp178, range_start
 2362 0e55 0F83F500 		jnb	.L161	#,
 2362      0000
 466:sieve_extend.c **** 
 2363              		.loc 1 466 9 is_stmt 1 view .LVU726
 468:sieve_extend.c ****         if (unlikely(range_start_atvector > range_stop)) { // we should not be here; just handle wi
 2364              		.loc 1 468 9 view .LVU727
 2365              	# sieve_extend.c:468:         range_start_atvector += VECTOR_SIZE; // find next vector
 468:sieve_extend.c ****         if (unlikely(range_start_atvector > range_stop)) { // we should not be here; just handle wi
 2366              		.loc 1 468 30 is_stmt 0 view .LVU728
 2367 0e5b 48050001 		add	rax, 256	# range_start_atvector,
 2367      0000
 2368              	.LVL100:
 469:sieve_extend.c ****             debug2 printf("..Marking and returning without vector\n");
 2369              		.loc 1 469 9 is_stmt 1 view .LVU729
 2370              	# sieve_extend.c:469:         if (unlikely(range_start_atvector > range_stop)) { // we should not b
 469:sieve_extend.c ****             debug2 printf("..Marking and returning without vector\n");
 2371              		.loc 1 469 12 is_stmt 0 view .LVU730
 2372 0e61 4839C8   		cmp	rax, rcx	# range_start_atvector, range_stop
 2373 0e64 0F878408 		ja	.L162	#,
 2373      0000
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2374              		.loc 1 481 16 is_stmt 1 view .LVU731
 2375              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
GAS LISTING /tmp/cclewcPz.s 			page 72


 2376              		.loc 1 481 9 is_stmt 0 view .LVU732
 2377 0e6a 4839C6   		cmp	rsi, rax	# range_start, range_start_atvector
 2378              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2379              		.loc 1 482 54 view .LVU733
 2380 0e6d 41B80100 		mov	r8d, 1	# tmp188,
 2380      0000
 2381              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2382              		.loc 1 481 9 view .LVU734
 2383 0e73 0F87D700 		ja	.L161	#,
 2383      0000
 2384              	.LVL101:
 2385              	.L163:
 482:sieve_extend.c ****     }
 2386              		.loc 1 482 13 is_stmt 1 discriminator 2 view .LVU735
 2387              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2388              		.loc 1 482 51 is_stmt 0 discriminator 2 view .LVU736
 2389 0e79 4989F2   		mov	r10, rsi	# tmp184, range_start
 2390              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2391              		.loc 1 482 54 discriminator 2 view .LVU737
 2392 0e7c C442C9F7 		shlx	r9, r8, rsi	# tmp187, tmp188, range_start
 2392      C8
 2393              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2394              		.loc 1 482 51 discriminator 2 view .LVU738
 2395 0e81 49C1EA06 		shr	r10, 6	# tmp184,
 2396              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2397              		.loc 1 481 65 discriminator 2 view .LVU739
 2398 0e85 4801DE   		add	rsi, rbx	# range_start, step
 2399              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2400              		.loc 1 482 51 discriminator 2 view .LVU740
 2401 0e88 4E090CD7 		or	QWORD PTR [rdi+r10*8], r9	# *_21, tmp187
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2402              		.loc 1 481 53 is_stmt 1 discriminator 2 view .LVU741
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2403              		.loc 1 481 16 discriminator 2 view .LVU742
 2404              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2405              		.loc 1 481 9 is_stmt 0 discriminator 2 view .LVU743
 2406 0e8c 4839F0   		cmp	rax, rsi	# range_start_atvector, range_start
 2407 0e8f 0F82BB00 		jb	.L161	#,
 2407      0000
 482:sieve_extend.c ****     }
 2408              		.loc 1 482 13 is_stmt 1 view .LVU744
 2409              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2410              		.loc 1 482 51 is_stmt 0 view .LVU745
 2411 0e95 4989F3   		mov	r11, rsi	# tmp388, range_start
 2412              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2413              		.loc 1 482 54 view .LVU746
 2414 0e98 C442C9F7 		shlx	r12, r8, rsi	# tmp391, tmp188, range_start
GAS LISTING /tmp/cclewcPz.s 			page 73


 2414      E0
 2415              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2416              		.loc 1 482 51 view .LVU747
 2417 0e9d 49C1EB06 		shr	r11, 6	# tmp388,
 2418              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2419              		.loc 1 481 65 view .LVU748
 2420 0ea1 4801DE   		add	rsi, rbx	# range_start, step
 2421              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2422              		.loc 1 482 51 view .LVU749
 2423 0ea4 4E0924DF 		or	QWORD PTR [rdi+r11*8], r12	# *_21, tmp391
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2424              		.loc 1 481 53 is_stmt 1 view .LVU750
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2425              		.loc 1 481 16 view .LVU751
 2426              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2427              		.loc 1 481 9 is_stmt 0 view .LVU752
 2428 0ea8 4839F0   		cmp	rax, rsi	# range_start_atvector, range_start
 2429 0eab 0F829F00 		jb	.L161	#,
 2429      0000
 482:sieve_extend.c ****     }
 2430              		.loc 1 482 13 is_stmt 1 view .LVU753
 2431              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2432              		.loc 1 482 51 is_stmt 0 view .LVU754
 2433 0eb1 4989F5   		mov	r13, rsi	# tmp392, range_start
 2434              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2435              		.loc 1 482 54 view .LVU755
 2436 0eb4 C442C9F7 		shlx	r14, r8, rsi	# tmp395, tmp188, range_start
 2436      F0
 2437              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2438              		.loc 1 482 51 view .LVU756
 2439 0eb9 49C1ED06 		shr	r13, 6	# tmp392,
 2440              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2441              		.loc 1 481 65 view .LVU757
 2442 0ebd 4801DE   		add	rsi, rbx	# range_start, step
 2443              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2444              		.loc 1 482 51 view .LVU758
 2445 0ec0 4E0934EF 		or	QWORD PTR [rdi+r13*8], r14	# *_21, tmp395
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2446              		.loc 1 481 53 is_stmt 1 view .LVU759
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2447              		.loc 1 481 16 view .LVU760
 2448              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2449              		.loc 1 481 9 is_stmt 0 view .LVU761
 2450 0ec4 4839F0   		cmp	rax, rsi	# range_start_atvector, range_start
 2451 0ec7 0F828300 		jb	.L161	#,
 2451      0000
 482:sieve_extend.c ****     }
GAS LISTING /tmp/cclewcPz.s 			page 74


 2452              		.loc 1 482 13 is_stmt 1 view .LVU762
 2453              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2454              		.loc 1 482 51 is_stmt 0 view .LVU763
 2455 0ecd 4989F7   		mov	r15, rsi	# tmp396, range_start
 2456              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2457              		.loc 1 482 54 view .LVU764
 2458 0ed0 C4C2C9F7 		shlx	rdx, r8, rsi	# tmp399, tmp188, range_start
 2458      D0
 2459              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2460              		.loc 1 482 51 view .LVU765
 2461 0ed5 49C1EF06 		shr	r15, 6	# tmp396,
 2462              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2463              		.loc 1 481 65 view .LVU766
 2464 0ed9 4801DE   		add	rsi, rbx	# range_start, step
 2465              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2466              		.loc 1 482 51 view .LVU767
 2467 0edc 4A0914FF 		or	QWORD PTR [rdi+r15*8], rdx	# *_21, tmp399
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2468              		.loc 1 481 53 is_stmt 1 view .LVU768
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2469              		.loc 1 481 16 view .LVU769
 2470              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2471              		.loc 1 481 9 is_stmt 0 view .LVU770
 2472 0ee0 4839F0   		cmp	rax, rsi	# range_start_atvector, range_start
 2473 0ee3 726B     		jb	.L161	#,
 482:sieve_extend.c ****     }
 2474              		.loc 1 482 13 is_stmt 1 view .LVU771
 2475              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2476              		.loc 1 482 51 is_stmt 0 view .LVU772
 2477 0ee5 4989F2   		mov	r10, rsi	# tmp400, range_start
 2478              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2479              		.loc 1 482 54 view .LVU773
 2480 0ee8 C442C9F7 		shlx	r9, r8, rsi	# tmp403, tmp188, range_start
 2480      C8
 2481              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2482              		.loc 1 482 51 view .LVU774
 2483 0eed 49C1EA06 		shr	r10, 6	# tmp400,
 2484              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2485              		.loc 1 481 65 view .LVU775
 2486 0ef1 4801DE   		add	rsi, rbx	# range_start, step
 2487              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2488              		.loc 1 482 51 view .LVU776
 2489 0ef4 4E090CD7 		or	QWORD PTR [rdi+r10*8], r9	# *_21, tmp403
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2490              		.loc 1 481 53 is_stmt 1 view .LVU777
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
GAS LISTING /tmp/cclewcPz.s 			page 75


 2491              		.loc 1 481 16 view .LVU778
 2492              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2493              		.loc 1 481 9 is_stmt 0 view .LVU779
 2494 0ef8 4839F0   		cmp	rax, rsi	# range_start_atvector, range_start
 2495 0efb 7253     		jb	.L161	#,
 482:sieve_extend.c ****     }
 2496              		.loc 1 482 13 is_stmt 1 view .LVU780
 2497              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2498              		.loc 1 482 51 is_stmt 0 view .LVU781
 2499 0efd 4989F3   		mov	r11, rsi	# tmp404, range_start
 2500              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2501              		.loc 1 482 54 view .LVU782
 2502 0f00 C442C9F7 		shlx	r12, r8, rsi	# tmp407, tmp188, range_start
 2502      E0
 2503              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2504              		.loc 1 482 51 view .LVU783
 2505 0f05 49C1EB06 		shr	r11, 6	# tmp404,
 2506              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2507              		.loc 1 481 65 view .LVU784
 2508 0f09 4801DE   		add	rsi, rbx	# range_start, step
 2509              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2510              		.loc 1 482 51 view .LVU785
 2511 0f0c 4E0924DF 		or	QWORD PTR [rdi+r11*8], r12	# *_21, tmp407
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2512              		.loc 1 481 53 is_stmt 1 view .LVU786
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2513              		.loc 1 481 16 view .LVU787
 2514              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2515              		.loc 1 481 9 is_stmt 0 view .LVU788
 2516 0f10 4839F0   		cmp	rax, rsi	# range_start_atvector, range_start
 2517 0f13 723B     		jb	.L161	#,
 482:sieve_extend.c ****     }
 2518              		.loc 1 482 13 is_stmt 1 view .LVU789
 2519              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2520              		.loc 1 482 51 is_stmt 0 view .LVU790
 2521 0f15 4989F5   		mov	r13, rsi	# tmp408, range_start
 2522              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2523              		.loc 1 482 54 view .LVU791
 2524 0f18 C442C9F7 		shlx	r14, r8, rsi	# tmp411, tmp188, range_start
 2524      F0
 2525              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2526              		.loc 1 482 51 view .LVU792
 2527 0f1d 49C1ED06 		shr	r13, 6	# tmp408,
 2528              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2529              		.loc 1 481 65 view .LVU793
 2530 0f21 4801DE   		add	rsi, rbx	# range_start, step
GAS LISTING /tmp/cclewcPz.s 			page 76


 2531              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2532              		.loc 1 482 51 view .LVU794
 2533 0f24 4E0934EF 		or	QWORD PTR [rdi+r13*8], r14	# *_21, tmp411
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2534              		.loc 1 481 53 is_stmt 1 view .LVU795
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2535              		.loc 1 481 16 view .LVU796
 2536              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2537              		.loc 1 481 9 is_stmt 0 view .LVU797
 2538 0f28 4839F0   		cmp	rax, rsi	# range_start_atvector, range_start
 2539 0f2b 7223     		jb	.L161	#,
 482:sieve_extend.c ****     }
 2540              		.loc 1 482 13 is_stmt 1 view .LVU798
 2541              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2542              		.loc 1 482 51 is_stmt 0 view .LVU799
 2543 0f2d 4989F7   		mov	r15, rsi	# tmp412, range_start
 2544              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2545              		.loc 1 482 54 view .LVU800
 2546 0f30 C4C2C9F7 		shlx	rdx, r8, rsi	# tmp415, tmp188, range_start
 2546      D0
 2547              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2548              		.loc 1 482 51 view .LVU801
 2549 0f35 49C1EF06 		shr	r15, 6	# tmp412,
 2550              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2551              		.loc 1 481 65 view .LVU802
 2552 0f39 4801DE   		add	rsi, rbx	# range_start, step
 2553              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 2554              		.loc 1 482 51 view .LVU803
 2555 0f3c 4A0914FF 		or	QWORD PTR [rdi+r15*8], rdx	# *_21, tmp415
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2556              		.loc 1 481 53 is_stmt 1 view .LVU804
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2557              		.loc 1 481 16 view .LVU805
 2558              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 2559              		.loc 1 481 9 is_stmt 0 view .LVU806
 2560 0f40 4839F0   		cmp	rax, rsi	# range_start_atvector, range_start
 2561 0f43 0F8330FF 		jnb	.L163	#,
 2561      FFFF
 2562 0f49 0F1F8000 		.p2align 4
 2562      000000
 2563              		.p2align 3
 2564              	.L161:
 485:sieve_extend.c **** 
 2565              		.loc 1 485 5 is_stmt 1 view .LVU807
 2566              	# sieve_extend.c:485:     const counter_t range_stop_unique =  min(range_start + VECTOR_SIZE_counte
 485:sieve_extend.c **** 
 2567              		.loc 1 485 42 is_stmt 0 view .LVU808
 2568 0f50 4989DA   		mov	r10, rbx	# tmp189, step
 2569 0f53 49C1E208 		sal	r10, 8	# tmp189,
GAS LISTING /tmp/cclewcPz.s 			page 77


 2570 0f57 4901F2   		add	r10, rsi	# tmp190, range_start
 2571              	# sieve_extend.c:485:     const counter_t range_stop_unique =  min(range_start + VECTOR_SIZE_counte
 485:sieve_extend.c **** 
 2572              		.loc 1 485 21 view .LVU809
 2573 0f5a 4939CA   		cmp	r10, rcx	# tmp190, range_stop
 2574 0f5d 4C0F47D1 		cmova	r10, rcx	# tmp190,, range_stop_unique, range_stop
 2575              	.LVL102:
 2576              	.LBB319:
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 2577              		.loc 1 489 10 is_stmt 1 view .LVU810
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 2578              		.loc 1 489 41 view .LVU811
 2579              	# sieve_extend.c:489:     for (counter_t index = range_start; index < range_stop_unique;) {
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 2580              		.loc 1 489 5 is_stmt 0 view .LVU812
 2581 0f61 4C39D6   		cmp	rsi, r10	# range_start, range_stop_unique
 2582 0f64 0F832904 		jnb	.L160	#,
 2582      0000
 2583              	.LBB320:
 2584              	.LBB321:
 2585              	.LBB322:
 2586              	# sieve_extend.c:410:     const counter_t range_stop_vector = vectorindex(range_stop);
 410:sieve_extend.c ****     register bitvector_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_vec
 2587              		.loc 1 410 21 view .LVU813
 2588 0f6a 48C1E908 		shr	rcx, 8	# range_stop,
 2589              	.LVL103:
 2590              	# sieve_extend.c:412:     register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_align
 412:sieve_extend.c ****     
 2591              		.loc 1 412 115 view .LVU814
 2592 0f6e 488D149B 		lea	rdx, [rbx+rbx*4]	# tmp193,
 2593              	# sieve_extend.c:410:     const counter_t range_stop_vector = vectorindex(range_stop);
 410:sieve_extend.c ****     register bitvector_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_vec
 2594              		.loc 1 410 21 view .LVU815
 2595 0f72 4989C8   		mov	r8, rcx	# range_stop_vector, range_stop
 2596              	# sieve_extend.c:412:     register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_align
 412:sieve_extend.c ****     
 2597              		.loc 1 412 140 view .LVU816
 2598 0f75 4889C8   		mov	rax, rcx	# tmp194, range_stop_vector
 2599              	.LVL104:
 412:sieve_extend.c ****     
 2600              		.loc 1 412 140 view .LVU817
 2601 0f78 4829D0   		sub	rax, rdx	# tmp194, tmp193
 2602              	# sieve_extend.c:424:     register const bitvector_t* __restrict range_stop_ptr = &bitarray[(range_
 424:sieve_extend.c ****     while likely(index_ptr <= range_stop_ptr) {
 2603              		.loc 1 424 70 view .LVU818
 2604 0f7b 4D89C1   		mov	r9, r8	# tmp195, range_stop_vector
 2605              	# sieve_extend.c:412:     register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_align
 412:sieve_extend.c ****     
 2606              		.loc 1 412 90 view .LVU819
 2607 0f7e 48C1E005 		sal	rax, 5	# iftmp.57_72,
 2608              	# sieve_extend.c:417:         *index_ptr |= mask; index_ptr+=step;
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2609              		.loc 1 417 38 view .LVU820
 2610 0f82 4889D9   		mov	rcx, rbx	# _79, step
 2611              	# sieve_extend.c:424:     register const bitvector_t* __restrict range_stop_ptr = &bitarray[(range_
 424:sieve_extend.c ****     while likely(index_ptr <= range_stop_ptr) {
 2612              		.loc 1 424 70 view .LVU821
GAS LISTING /tmp/cclewcPz.s 			page 78


 2613 0f85 49C1E105 		sal	r9, 5	# tmp195,
 2614 0f89 4801F8   		add	rax, rdi	# tmp215, bitarray_word
 2615              	# sieve_extend.c:417:         *index_ptr |= mask; index_ptr+=step;
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2616              		.loc 1 417 38 view .LVU822
 2617 0f8c 48C1E105 		sal	rcx, 5	# _79,
 2618              	# sieve_extend.c:424:     register const bitvector_t* __restrict range_stop_ptr = &bitarray[(range_
 424:sieve_extend.c ****     while likely(index_ptr <= range_stop_ptr) {
 2619              		.loc 1 424 44 view .LVU823
 2620 0f90 4901F9   		add	r9, rdi	# range_stop_ptr, bitarray_word
 2621 0f93 4883FB01 		cmp	rbx, 1	# step,
 2622 0f97 0F851904 		jne	.L317	#,
 2622      0000
 2623 0f9d 4983F805 		cmp	r8, 5	# range_stop_vector,
 2624              	.LBE322:
 2625              	.LBE321:
 2626              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2627              		.loc 1 498 31 view .LVU824
 2628 0fa1 41BB0100 		mov	r11d, 1	# tmp220,
 2628      0000
 2629              	# sieve_extend.c:491:         register bitvector_t quadmask = { };
 491:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 2630              		.loc 1 491 30 view .LVU825
 2631 0fa7 C5E9EFD2 		vpxor	xmm2, xmm2, xmm2	# tmp216
 2632 0fab 480F46C7 		cmovbe	rax, rdi	# bitarray_word,, tmp215
 2633 0faf 4989C0   		mov	r8, rax	# fast_loop_ptr, tmp215
 2634              	.LVL105:
 2635 0fb2 66662E0F 		.p2align 4
 2635      1F840000 
 2635      0000000F 
 2635      1F00
 2636              		.p2align 3
 2637              	.L177:
 490:sieve_extend.c ****         register bitvector_t quadmask = { };
 2638              		.loc 1 490 9 is_stmt 1 view .LVU826
 2639              	# sieve_extend.c:490:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 490:sieve_extend.c ****         register bitvector_t quadmask = { };
 2640              		.loc 1 490 54 is_stmt 0 view .LVU827
 2641 0fc0 4889F0   		mov	rax, rsi	# _180, range_start
 2642              	# sieve_extend.c:492:         register counter_t word = wordindex(index) - current_vector_start_wor
 492:sieve_extend.c ****         
 2643              		.loc 1 492 35 view .LVU828
 2644 0fc3 4889F2   		mov	rdx, rsi	# tmp217, range_start
 2645              	# sieve_extend.c:490:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 490:sieve_extend.c ****         register bitvector_t quadmask = { };
 2646              		.loc 1 490 54 view .LVU829
 2647 0fc6 48C1E808 		shr	rax, 8	# _180,
 2648              	# sieve_extend.c:492:         register counter_t word = wordindex(index) - current_vector_start_wor
 492:sieve_extend.c ****         
 2649              		.loc 1 492 35 view .LVU830
 2650 0fca 48C1EA06 		shr	rdx, 6	# tmp217,
 2651              	# sieve_extend.c:490:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 490:sieve_extend.c ****         register bitvector_t quadmask = { };
 2652              		.loc 1 490 25 view .LVU831
 2653 0fce 4C8D3C85 		lea	r15, 0[0+rax*4]	# current_vector_start_word,
 2653      00000000 
GAS LISTING /tmp/cclewcPz.s 			page 79


 2654              	.LVL106:
 491:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 2655              		.loc 1 491 9 is_stmt 1 view .LVU832
 2656              	# sieve_extend.c:491:         register bitvector_t quadmask = { };
 491:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 2657              		.loc 1 491 30 is_stmt 0 view .LVU833
 2658 0fd6 C5FD7F14 		vmovdqa	YMMWORD PTR [rsp], ymm2	# quadmask, tmp216
 2658      24
 492:sieve_extend.c ****         
 2659              		.loc 1 492 9 is_stmt 1 view .LVU834
 2660              	# sieve_extend.c:492:         register counter_t word = wordindex(index) - current_vector_start_wor
 492:sieve_extend.c ****         
 2661              		.loc 1 492 28 is_stmt 0 view .LVU835
 2662 0fdb 4C29FA   		sub	rdx, r15	# word, current_vector_start_word
 2663              	.LVL107:
 2664              	.L172:
 498:sieve_extend.c ****             index += step;
 2665              		.loc 1 498 13 is_stmt 1 view .LVU836
 2666              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2667              		.loc 1 498 31 is_stmt 0 view .LVU837
 2668 0fde C442C9F7 		shlx	r14, r11, rsi	# tmp219, tmp220, range_start
 2668      F3
 2669              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2670              		.loc 1 498 28 view .LVU838
 2671 0fe3 4C0934D4 		or	QWORD PTR [rsp+rdx*8], r14	# quadmask, tmp219
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2672              		.loc 1 499 13 is_stmt 1 view .LVU839
 2673              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2674              		.loc 1 499 19 is_stmt 0 view .LVU840
 2675 0fe7 488D5601 		lea	rdx, 1[rsi]	# tmp237,
 2676              	.LVL108:
 2677              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2678              		.loc 1 500 20 view .LVU841
 2679 0feb 4889D1   		mov	rcx, rdx	# tmp221, range_start
 2680              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2681              		.loc 1 499 19 view .LVU842
 2682 0fee 4889D6   		mov	rsi, rdx	# range_start, tmp237
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2683              		.loc 1 500 13 is_stmt 1 view .LVU843
 2684              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2685              		.loc 1 500 20 is_stmt 0 view .LVU844
 2686 0ff1 48C1E906 		shr	rcx, 6	# tmp221,
 2687              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2688              		.loc 1 500 18 view .LVU845
 2689 0ff5 4C29F9   		sub	rcx, r15	# word, current_vector_start_word
 501:sieve_extend.c ****         
 2690              		.loc 1 501 17 is_stmt 1 view .LVU846
 2691              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 2692              		.loc 1 501 9 is_stmt 0 view .LVU847
GAS LISTING /tmp/cclewcPz.s 			page 80


 2693 0ff8 4883F903 		cmp	rcx, 3	# word,
 2694 0ffc 0F87DE00 		ja	.L311	#,
 2694      0000
 498:sieve_extend.c ****             index += step;
 2695              		.loc 1 498 13 is_stmt 1 view .LVU848
 2696              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2697              		.loc 1 499 19 is_stmt 0 view .LVU849
 2698 1002 4883C601 		add	rsi, 1	# range_start,
 2699              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2700              		.loc 1 498 31 view .LVU850
 2701 1006 C4C2E9F7 		shlx	rbx, r11, rdx	# tmp318, tmp220, range_start
 2701      DB
 2702              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2703              		.loc 1 500 20 view .LVU851
 2704 100b 4989F4   		mov	r12, rsi	# tmp319, range_start
 2705              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2706              		.loc 1 498 28 view .LVU852
 2707 100e 48091CCC 		or	QWORD PTR [rsp+rcx*8], rbx	# quadmask, tmp318
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2708              		.loc 1 499 13 is_stmt 1 view .LVU853
 2709              	.LVL109:
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2710              		.loc 1 500 13 view .LVU854
 2711              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2712              		.loc 1 500 20 is_stmt 0 view .LVU855
 2713 1012 49C1EC06 		shr	r12, 6	# tmp319,
 2714              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2715              		.loc 1 500 18 view .LVU856
 2716 1016 4D29FC   		sub	r12, r15	# word, current_vector_start_word
 501:sieve_extend.c ****         
 2717              		.loc 1 501 17 is_stmt 1 view .LVU857
 2718              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 2719              		.loc 1 501 9 is_stmt 0 view .LVU858
 2720 1019 4983FC03 		cmp	r12, 3	# word,
 2721 101d 0F87BD00 		ja	.L311	#,
 2721      0000
 498:sieve_extend.c ****             index += step;
 2722              		.loc 1 498 13 is_stmt 1 view .LVU859
 2723              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2724              		.loc 1 498 31 is_stmt 0 view .LVU860
 2725 1023 C4C2C9F7 		shlx	rsi, r11, rsi	# tmp321, tmp220, range_start
 2725      F3
 2726              	.LVL110:
 2727              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2728              		.loc 1 498 28 view .LVU861
 2729 1028 4A0934E4 		or	QWORD PTR [rsp+r12*8], rsi	# quadmask, tmp321
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2730              		.loc 1 499 13 is_stmt 1 view .LVU862
GAS LISTING /tmp/cclewcPz.s 			page 81


 2731              	.LVL111:
 2732              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2733              		.loc 1 499 19 is_stmt 0 view .LVU863
 2734 102c 488D7202 		lea	rsi, 2[rdx]	# range_start,
 2735              	.LVL112:
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2736              		.loc 1 500 13 is_stmt 1 view .LVU864
 2737              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2738              		.loc 1 500 20 is_stmt 0 view .LVU865
 2739 1030 4989F5   		mov	r13, rsi	# tmp322, range_start
 2740 1033 49C1ED06 		shr	r13, 6	# tmp322,
 2741              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2742              		.loc 1 500 18 view .LVU866
 2743 1037 4D29FD   		sub	r13, r15	# word, current_vector_start_word
 501:sieve_extend.c ****         
 2744              		.loc 1 501 17 is_stmt 1 view .LVU867
 2745              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 2746              		.loc 1 501 9 is_stmt 0 view .LVU868
 2747 103a 4983FD03 		cmp	r13, 3	# word,
 2748 103e 0F879C00 		ja	.L311	#,
 2748      0000
 498:sieve_extend.c ****             index += step;
 2749              		.loc 1 498 13 is_stmt 1 view .LVU869
 2750              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2751              		.loc 1 498 31 is_stmt 0 view .LVU870
 2752 1044 C442C9F7 		shlx	r14, r11, rsi	# tmp324, tmp220, range_start
 2752      F3
 2753              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2754              		.loc 1 499 19 view .LVU871
 2755 1049 488D7203 		lea	rsi, 3[rdx]	# range_start,
 2756              	.LVL113:
 2757              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2758              		.loc 1 500 20 view .LVU872
 2759 104d 4889F1   		mov	rcx, rsi	# tmp325, range_start
 2760              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2761              		.loc 1 498 28 view .LVU873
 2762 1050 4E0934EC 		or	QWORD PTR [rsp+r13*8], r14	# quadmask, tmp324
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2763              		.loc 1 499 13 is_stmt 1 view .LVU874
 2764              	.LVL114:
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2765              		.loc 1 500 13 view .LVU875
 2766              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2767              		.loc 1 500 20 is_stmt 0 view .LVU876
 2768 1054 48C1E906 		shr	rcx, 6	# tmp325,
 2769              	.LVL115:
 2770              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
GAS LISTING /tmp/cclewcPz.s 			page 82


 2771              		.loc 1 500 18 view .LVU877
 2772 1058 4C29F9   		sub	rcx, r15	# word, current_vector_start_word
 501:sieve_extend.c ****         
 2773              		.loc 1 501 17 is_stmt 1 view .LVU878
 2774              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 2775              		.loc 1 501 9 is_stmt 0 view .LVU879
 2776 105b 4883F903 		cmp	rcx, 3	# word,
 2777 105f 777F     		ja	.L311	#,
 498:sieve_extend.c ****             index += step;
 2778              		.loc 1 498 13 is_stmt 1 view .LVU880
 2779              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2780              		.loc 1 498 31 is_stmt 0 view .LVU881
 2781 1061 C4C2C9F7 		shlx	rbx, r11, rsi	# tmp327, tmp220, range_start
 2781      DB
 2782              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2783              		.loc 1 499 19 view .LVU882
 2784 1066 488D7204 		lea	rsi, 4[rdx]	# range_start,
 2785              	.LVL116:
 2786              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2787              		.loc 1 500 20 view .LVU883
 2788 106a 4989F4   		mov	r12, rsi	# tmp328, range_start
 2789              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2790              		.loc 1 498 28 view .LVU884
 2791 106d 48091CCC 		or	QWORD PTR [rsp+rcx*8], rbx	# quadmask, tmp327
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2792              		.loc 1 499 13 is_stmt 1 view .LVU885
 2793              	.LVL117:
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2794              		.loc 1 500 13 view .LVU886
 2795              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2796              		.loc 1 500 20 is_stmt 0 view .LVU887
 2797 1071 49C1EC06 		shr	r12, 6	# tmp328,
 2798              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2799              		.loc 1 500 18 view .LVU888
 2800 1075 4D29FC   		sub	r12, r15	# word, current_vector_start_word
 501:sieve_extend.c ****         
 2801              		.loc 1 501 17 is_stmt 1 view .LVU889
 2802              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 2803              		.loc 1 501 9 is_stmt 0 view .LVU890
 2804 1078 4983FC03 		cmp	r12, 3	# word,
 2805 107c 7762     		ja	.L311	#,
 498:sieve_extend.c ****             index += step;
 2806              		.loc 1 498 13 is_stmt 1 view .LVU891
 2807              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2808              		.loc 1 498 31 is_stmt 0 view .LVU892
 2809 107e C4C2C9F7 		shlx	rsi, r11, rsi	# tmp330, tmp220, range_start
 2809      F3
 2810              	.LVL118:
GAS LISTING /tmp/cclewcPz.s 			page 83


 2811              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2812              		.loc 1 498 28 view .LVU893
 2813 1083 4A0934E4 		or	QWORD PTR [rsp+r12*8], rsi	# quadmask, tmp330
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2814              		.loc 1 499 13 is_stmt 1 view .LVU894
 2815              	.LVL119:
 2816              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2817              		.loc 1 499 19 is_stmt 0 view .LVU895
 2818 1087 488D7205 		lea	rsi, 5[rdx]	# range_start,
 2819              	.LVL120:
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2820              		.loc 1 500 13 is_stmt 1 view .LVU896
 2821              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2822              		.loc 1 500 20 is_stmt 0 view .LVU897
 2823 108b 4989F5   		mov	r13, rsi	# tmp331, range_start
 2824 108e 49C1ED06 		shr	r13, 6	# tmp331,
 2825              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2826              		.loc 1 500 18 view .LVU898
 2827 1092 4D29FD   		sub	r13, r15	# word, current_vector_start_word
 501:sieve_extend.c ****         
 2828              		.loc 1 501 17 is_stmt 1 view .LVU899
 2829              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 2830              		.loc 1 501 9 is_stmt 0 view .LVU900
 2831 1095 4983FD03 		cmp	r13, 3	# word,
 2832 1099 7745     		ja	.L311	#,
 498:sieve_extend.c ****             index += step;
 2833              		.loc 1 498 13 is_stmt 1 view .LVU901
 2834              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2835              		.loc 1 498 31 is_stmt 0 view .LVU902
 2836 109b C442C9F7 		shlx	r14, r11, rsi	# tmp333, tmp220, range_start
 2836      F3
 2837              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2838              		.loc 1 499 19 view .LVU903
 2839 10a0 488D7206 		lea	rsi, 6[rdx]	# range_start,
 2840              	.LVL121:
 2841              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2842              		.loc 1 500 20 view .LVU904
 2843 10a4 4889F1   		mov	rcx, rsi	# tmp334, range_start
 2844              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2845              		.loc 1 498 28 view .LVU905
 2846 10a7 4E0934EC 		or	QWORD PTR [rsp+r13*8], r14	# quadmask, tmp333
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2847              		.loc 1 499 13 is_stmt 1 view .LVU906
 2848              	.LVL122:
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2849              		.loc 1 500 13 view .LVU907
 2850              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
GAS LISTING /tmp/cclewcPz.s 			page 84


 2851              		.loc 1 500 20 is_stmt 0 view .LVU908
 2852 10ab 48C1E906 		shr	rcx, 6	# tmp334,
 2853              	.LVL123:
 2854              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2855              		.loc 1 500 18 view .LVU909
 2856 10af 4C29F9   		sub	rcx, r15	# word, current_vector_start_word
 501:sieve_extend.c ****         
 2857              		.loc 1 501 17 is_stmt 1 view .LVU910
 2858              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 2859              		.loc 1 501 9 is_stmt 0 view .LVU911
 2860 10b2 4883F903 		cmp	rcx, 3	# word,
 2861 10b6 7728     		ja	.L311	#,
 498:sieve_extend.c ****             index += step;
 2862              		.loc 1 498 13 is_stmt 1 view .LVU912
 2863              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2864              		.loc 1 498 31 is_stmt 0 view .LVU913
 2865 10b8 C4C2C9F7 		shlx	rbx, r11, rsi	# tmp336, tmp220, range_start
 2865      DB
 2866              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2867              		.loc 1 499 19 view .LVU914
 2868 10bd 488D7207 		lea	rsi, 7[rdx]	# range_start,
 2869              	.LVL124:
 2870              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2871              		.loc 1 500 20 view .LVU915
 2872 10c1 4889F2   		mov	rdx, rsi	# tmp337, range_start
 2873              	.LVL125:
 2874              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2875              		.loc 1 498 28 view .LVU916
 2876 10c4 48091CCC 		or	QWORD PTR [rsp+rcx*8], rbx	# quadmask, tmp336
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2877              		.loc 1 499 13 is_stmt 1 view .LVU917
 2878              	.LVL126:
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2879              		.loc 1 500 13 view .LVU918
 2880              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2881              		.loc 1 500 20 is_stmt 0 view .LVU919
 2882 10c8 48C1EA06 		shr	rdx, 6	# tmp337,
 2883              	.LVL127:
 2884              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2885              		.loc 1 500 18 view .LVU920
 2886 10cc 4C29FA   		sub	rdx, r15	# word, current_vector_start_word
 2887              	.LVL128:
 501:sieve_extend.c ****         
 2888              		.loc 1 501 17 is_stmt 1 view .LVU921
 2889              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 2890              		.loc 1 501 9 is_stmt 0 view .LVU922
 2891 10cf 4883FA03 		cmp	rdx, 3	# word,
 2892 10d3 0F8605FF 		jbe	.L172	#,
GAS LISTING /tmp/cclewcPz.s 			page 85


 2892      FFFF
 2893              	.LVL129:
 2894 10d9 0F1F8000 		.p2align 4
 2894      000000
 2895              		.p2align 3
 2896              	.L311:
 504:sieve_extend.c ****         // const counter_t range_stop_vector = vectorindex(range_stop);
 2897              		.loc 1 504 9 is_stmt 1 view .LVU923
 507:sieve_extend.c ****     }
 2898              		.loc 1 507 9 view .LVU924
 2899              	.LBB326:
 2900              	.LBB323:
 2901              	# sieve_extend.c:411:     register bitvector_t* __restrict index_ptr      =  __builtin_assume_align
 411:sieve_extend.c ****     register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_s
 2902              		.loc 1 411 90 is_stmt 0 view .LVU925
 2903 10e0 48C1E005 		sal	rax, 5	# tmp222,
 2904              	.LVL130:
 411:sieve_extend.c ****     register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_s
 2905              		.loc 1 411 90 view .LVU926
 2906              	.LBE323:
 2907              	.LBE326:
 2908              	# sieve_extend.c:507:         applyMask_vector_ptr(bitarray_vector, step, range_stop, quadmask, cur
 507:sieve_extend.c ****     }
 2909              		.loc 1 507 9 view .LVU927
 2910 10e4 C5FD6F1C 		vmovdqa	ymm3, YMMWORD PTR [rsp]	# quadmask.56_160, quadmask
 2910      24
 2911              	.LVL131:
 2912              	.LBB327:
 2913              	.LBI321:
 409:sieve_extend.c ****     const counter_t range_stop_vector = vectorindex(range_stop);
 2914              		.loc 1 409 20 is_stmt 1 view .LVU928
 2915              	.LBB324:
 410:sieve_extend.c ****     register bitvector_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_vec
 2916              		.loc 1 410 5 view .LVU929
 411:sieve_extend.c ****     register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_s
 2917              		.loc 1 411 5 view .LVU930
 2918              	# sieve_extend.c:411:     register bitvector_t* __restrict index_ptr      =  __builtin_assume_align
 411:sieve_extend.c ****     register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_s
 2919              		.loc 1 411 81 is_stmt 0 view .LVU931
 2920 10e9 4801F8   		add	rax, rdi	# _25, bitarray_word
 2921              	.LVL132:
 412:sieve_extend.c ****     
 2922              		.loc 1 412 5 is_stmt 1 view .LVU932
 416:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2923              		.loc 1 416 11 view .LVU933
 2924 10ec 4939C0   		cmp	r8, rax	# fast_loop_ptr, _25
 2925 10ef 0F866B01 		jbe	.L173	#,
 2925      0000
 2926 10f5 4C8D7840 		lea	r15, 64[rax]	# ivtmp.230,
 2927              	.LVL133:
 2928              	.L174:
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2929              		.loc 1 417 9 view .LVU934
 2930              	# sieve_extend.c:417:         *index_ptr |= mask; index_ptr+=step;
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2931              		.loc 1 417 20 is_stmt 0 view .LVU935
 2932 10f9 C5E5EB08 		vpor	ymm1, ymm3, YMMWORD PTR [rax]	# tmp223, quadmask.56_160, MEM[base: index_ptr_153, offset: 0B]
GAS LISTING /tmp/cclewcPz.s 			page 86


 2933              	# sieve_extend.c:418:         *index_ptr |= mask; index_ptr+=step;
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2934              		.loc 1 418 20 view .LVU936
 2935 10fd C5E5EB60 		vpor	ymm4, ymm3, YMMWORD PTR 32[rax]	# tmp224, quadmask.56_160, MEM[base: index_ptr_153, offset: 3
 2935      20
 2936              	# sieve_extend.c:417:         *index_ptr |= mask; index_ptr+=step;
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2937              		.loc 1 417 20 view .LVU937
 2938 1102 C5FD7F08 		vmovdqa	YMMWORD PTR [rax], ymm1	# MEM[base: index_ptr_153, offset: 0B], tmp223
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2939              		.loc 1 417 29 is_stmt 1 view .LVU938
 2940              	.LVL134:
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2941              		.loc 1 418 9 view .LVU939
 2942 1106 4C8DA0A0 		lea	r12, 160[rax]	# tmp235,
 2942      000000
 2943              	# sieve_extend.c:418:         *index_ptr |= mask; index_ptr+=step;
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2944              		.loc 1 418 20 is_stmt 0 view .LVU940
 2945 110d C5FD7F60 		vmovdqa	YMMWORD PTR 32[rax], ymm4	# MEM[base: index_ptr_153, offset: 32B], tmp224
 2945      20
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2946              		.loc 1 418 29 is_stmt 1 view .LVU941
 2947              	.LVL135:
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2948              		.loc 1 419 9 view .LVU942
 2949              	# sieve_extend.c:416:     while likely(index_ptr < fast_loop_ptr) {
 416:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2950              		.loc 1 416 11 is_stmt 0 view .LVU943
 2951 1112 4D39C4   		cmp	r12, r8	# _25, fast_loop_ptr
 2952              	# sieve_extend.c:419:         *index_ptr |= mask; index_ptr+=step;
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2953              		.loc 1 419 20 view .LVU944
 2954 1115 C4C165EB 		vpor	ymm5, ymm3, YMMWORD PTR [r15]	# tmp225, quadmask.56_160, MEM[base: _11, offset: 0B]
 2954      2F
 2955              	# sieve_extend.c:420:         *index_ptr |= mask; index_ptr+=step;
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2956              		.loc 1 420 20 view .LVU945
 2957 111a C4C165EB 		vpor	ymm6, ymm3, YMMWORD PTR 32[r15]	# tmp226, quadmask.56_160, MEM[base: _11, offset: 32B]
 2957      7720
 2958              	# sieve_extend.c:419:         *index_ptr |= mask; index_ptr+=step;
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2959              		.loc 1 419 20 view .LVU946
 2960 1120 C4C17D7F 		vmovdqa	YMMWORD PTR [r15], ymm5	# MEM[base: _11, offset: 0B], tmp225
 2960      2F
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2961              		.loc 1 419 29 is_stmt 1 view .LVU947
 2962              	.LVL136:
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2963              		.loc 1 420 9 view .LVU948
 2964 1125 4D8DAFA0 		lea	r13, 160[r15]	# tmp236,
 2964      000000
 2965              	# sieve_extend.c:420:         *index_ptr |= mask; index_ptr+=step;
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2966              		.loc 1 420 20 is_stmt 0 view .LVU949
 2967 112c C4C17D7F 		vmovdqa	YMMWORD PTR 32[r15], ymm6	# MEM[base: _11, offset: 32B], tmp226
 2967      7720
GAS LISTING /tmp/cclewcPz.s 			page 87


 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2968              		.loc 1 420 29 is_stmt 1 view .LVU950
 2969              	.LVL137:
 421:sieve_extend.c ****     }
 2970              		.loc 1 421 9 view .LVU951
 2971              	# sieve_extend.c:421:         *index_ptr |= mask; index_ptr+=step;
 421:sieve_extend.c ****     }
 2972              		.loc 1 421 20 is_stmt 0 view .LVU952
 2973 1132 C5E5EBB8 		vpor	ymm7, ymm3, YMMWORD PTR 128[rax]	# tmp227, quadmask.56_160, MEM[base: index_ptr_153, offset: 
 2973      80000000 
 2974 113a C5FD7FB8 		vmovdqa	YMMWORD PTR 128[rax], ymm7	# MEM[base: index_ptr_153, offset: 128B], tmp227
 2974      80000000 
 421:sieve_extend.c ****     }
 2975              		.loc 1 421 29 is_stmt 1 view .LVU953
 2976              	.LVL138:
 421:sieve_extend.c ****     }
 2977              		.loc 1 421 29 is_stmt 0 view .LVU954
 2978 1142 4C89E0   		mov	rax, r12	# _25, tmp235
 2979              	.LVL139:
 416:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2980              		.loc 1 416 11 is_stmt 1 view .LVU955
 2981 1145 0F831501 		jnb	.L173	#,
 2981      0000
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2982              		.loc 1 417 9 view .LVU956
 2983              	# sieve_extend.c:417:         *index_ptr |= mask; index_ptr+=step;
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2984              		.loc 1 417 20 is_stmt 0 view .LVU957
 2985 114b C4C165EB 		vpor	ymm0, ymm3, YMMWORD PTR [r12]	# tmp301, quadmask.56_160, MEM[base: index_ptr_153, offset: 0B]
 2985      0424
 2986              	# sieve_extend.c:418:         *index_ptr |= mask; index_ptr+=step;
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2987              		.loc 1 418 20 view .LVU958
 2988 1151 C44165EB 		vpor	ymm8, ymm3, YMMWORD PTR 32[r12]	# tmp302, quadmask.56_160, MEM[base: index_ptr_153, offset: 3
 2988      442420
 2989              	# sieve_extend.c:417:         *index_ptr |= mask; index_ptr+=step;
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2990              		.loc 1 417 20 view .LVU959
 2991 1158 C4C17D7F 		vmovdqa	YMMWORD PTR [r12], ymm0	# MEM[base: index_ptr_153, offset: 0B], tmp301
 2991      0424
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2992              		.loc 1 417 29 is_stmt 1 view .LVU960
 2993              	.LVL140:
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2994              		.loc 1 418 9 view .LVU961
 2995 115e 4805A000 		add	rax, 160	# _25,
 2995      0000
 2996              	# sieve_extend.c:418:         *index_ptr |= mask; index_ptr+=step;
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2997              		.loc 1 418 20 is_stmt 0 view .LVU962
 2998 1164 C4417D7F 		vmovdqa	YMMWORD PTR 32[r12], ymm8	# MEM[base: index_ptr_153, offset: 32B], tmp302
 2998      442420
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 2999              		.loc 1 418 29 is_stmt 1 view .LVU963
 3000              	.LVL141:
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3001              		.loc 1 419 9 view .LVU964
GAS LISTING /tmp/cclewcPz.s 			page 88


 3002              	# sieve_extend.c:416:     while likely(index_ptr < fast_loop_ptr) {
 416:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3003              		.loc 1 416 11 is_stmt 0 view .LVU965
 3004 116b 4C39C0   		cmp	rax, r8	# _25, fast_loop_ptr
 3005              	# sieve_extend.c:419:         *index_ptr |= mask; index_ptr+=step;
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3006              		.loc 1 419 20 view .LVU966
 3007 116e C44165EB 		vpor	ymm9, ymm3, YMMWORD PTR 160[r15]	# tmp303, quadmask.56_160, MEM[base: _11, offset: 0B]
 3007      8FA00000 
 3007      00
 3008 1177 C4417D7F 		vmovdqa	YMMWORD PTR 160[r15], ymm9	# MEM[base: _11, offset: 0B], tmp303
 3008      8FA00000 
 3008      00
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3009              		.loc 1 419 29 is_stmt 1 view .LVU967
 3010              	.LVL142:
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3011              		.loc 1 420 9 view .LVU968
 3012              	# sieve_extend.c:420:         *index_ptr |= mask; index_ptr+=step;
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3013              		.loc 1 420 20 is_stmt 0 view .LVU969
 3014 1180 C44165EB 		vpor	ymm10, ymm3, YMMWORD PTR 32[r13]	# tmp304, quadmask.56_160, MEM[base: _11, offset: 32B]
 3014      5520
 3015 1186 C4417D7F 		vmovdqa	YMMWORD PTR 32[r13], ymm10	# MEM[base: _11, offset: 32B], tmp304
 3015      5520
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3016              		.loc 1 420 29 is_stmt 1 view .LVU970
 3017              	.LVL143:
 421:sieve_extend.c ****     }
 3018              		.loc 1 421 9 view .LVU971
 3019              	# sieve_extend.c:421:         *index_ptr |= mask; index_ptr+=step;
 421:sieve_extend.c ****     }
 3020              		.loc 1 421 20 is_stmt 0 view .LVU972
 3021 118c C44165EB 		vpor	ymm11, ymm3, YMMWORD PTR 128[r12]	# tmp305, quadmask.56_160, MEM[base: index_ptr_153, offset:
 3021      9C248000 
 3021      0000
 3022 1196 C4417D7F 		vmovdqa	YMMWORD PTR 128[r12], ymm11	# MEM[base: index_ptr_153, offset: 128B], tmp305
 3022      9C248000 
 3022      0000
 421:sieve_extend.c ****     }
 3023              		.loc 1 421 29 is_stmt 1 view .LVU973
 3024              	.LVL144:
 416:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3025              		.loc 1 416 11 view .LVU974
 3026 11a0 0F83BA00 		jnb	.L173	#,
 3026      0000
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3027              		.loc 1 417 9 view .LVU975
 3028              	# sieve_extend.c:417:         *index_ptr |= mask; index_ptr+=step;
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3029              		.loc 1 417 20 is_stmt 0 view .LVU976
 3030 11a6 C565EB20 		vpor	ymm12, ymm3, YMMWORD PTR [rax]	# tmp307, quadmask.56_160, MEM[base: index_ptr_153, offset: 0B
 3031              	# sieve_extend.c:418:         *index_ptr |= mask; index_ptr+=step;
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3032              		.loc 1 418 20 view .LVU977
 3033 11aa C565EB68 		vpor	ymm13, ymm3, YMMWORD PTR 32[rax]	# tmp308, quadmask.56_160, MEM[base: index_ptr_153, offset: 
 3033      20
GAS LISTING /tmp/cclewcPz.s 			page 89


 3034              	# sieve_extend.c:417:         *index_ptr |= mask; index_ptr+=step;
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3035              		.loc 1 417 20 view .LVU978
 3036 11af C57D7F20 		vmovdqa	YMMWORD PTR [rax], ymm12	# MEM[base: index_ptr_153, offset: 0B], tmp307
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3037              		.loc 1 417 29 is_stmt 1 view .LVU979
 3038              	.LVL145:
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3039              		.loc 1 418 9 view .LVU980
 3040              	# sieve_extend.c:418:         *index_ptr |= mask; index_ptr+=step;
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3041              		.loc 1 418 20 is_stmt 0 view .LVU981
 3042 11b3 C57D7F68 		vmovdqa	YMMWORD PTR 32[rax], ymm13	# MEM[base: index_ptr_153, offset: 32B], tmp308
 3042      20
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3043              		.loc 1 418 29 is_stmt 1 view .LVU982
 3044              	.LVL146:
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3045              		.loc 1 419 9 view .LVU983
 3046              	# sieve_extend.c:419:         *index_ptr |= mask; index_ptr+=step;
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3047              		.loc 1 419 20 is_stmt 0 view .LVU984
 3048 11b8 C44165EB 		vpor	ymm14, ymm3, YMMWORD PTR 320[r15]	# tmp309, quadmask.56_160, MEM[base: _11, offset: 0B]
 3048      B7400100 
 3048      00
 3049              	# sieve_extend.c:420:         *index_ptr |= mask; index_ptr+=step;
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3050              		.loc 1 420 20 view .LVU985
 3051 11c1 C44165EB 		vpor	ymm15, ymm3, YMMWORD PTR 352[r15]	# tmp310, quadmask.56_160, MEM[base: _11, offset: 32B]
 3051      BF600100 
 3051      00
 3052              	# sieve_extend.c:419:         *index_ptr |= mask; index_ptr+=step;
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3053              		.loc 1 419 20 view .LVU986
 3054 11ca C4417D7F 		vmovdqa	YMMWORD PTR 320[r15], ymm14	# MEM[base: _11, offset: 0B], tmp309
 3054      B7400100 
 3054      00
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3055              		.loc 1 419 29 is_stmt 1 view .LVU987
 3056              	.LVL147:
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3057              		.loc 1 420 9 view .LVU988
 3058              	# sieve_extend.c:420:         *index_ptr |= mask; index_ptr+=step;
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3059              		.loc 1 420 20 is_stmt 0 view .LVU989
 3060 11d3 C4417D7F 		vmovdqa	YMMWORD PTR 352[r15], ymm15	# MEM[base: _11, offset: 32B], tmp310
 3060      BF600100 
 3060      00
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3061              		.loc 1 420 29 is_stmt 1 view .LVU990
 3062              	.LVL148:
 421:sieve_extend.c ****     }
 3063              		.loc 1 421 9 view .LVU991
 3064              	# sieve_extend.c:421:         *index_ptr |= mask; index_ptr+=step;
 421:sieve_extend.c ****     }
 3065              		.loc 1 421 20 is_stmt 0 view .LVU992
 3066 11dc C5E5EB88 		vpor	ymm1, ymm3, YMMWORD PTR 128[rax]	# tmp311, quadmask.56_160, MEM[base: index_ptr_153, offset: 
GAS LISTING /tmp/cclewcPz.s 			page 90


 3066      80000000 
 3067 11e4 C5FD7F88 		vmovdqa	YMMWORD PTR 128[rax], ymm1	# MEM[base: index_ptr_153, offset: 128B], tmp311
 3067      80000000 
 421:sieve_extend.c ****     }
 3068              		.loc 1 421 29 is_stmt 1 view .LVU993
 3069              	.LVL149:
 421:sieve_extend.c ****     }
 3070              		.loc 1 421 29 is_stmt 0 view .LVU994
 3071 11ec 498D8424 		lea	rax, 320[r12]	# _25,
 3071      40010000 
 3072              	.LVL150:
 416:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3073              		.loc 1 416 11 is_stmt 1 view .LVU995
 3074 11f4 4C39C0   		cmp	rax, r8	# _25, fast_loop_ptr
 3075 11f7 7367     		jnb	.L173	#,
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3076              		.loc 1 417 9 view .LVU996
 3077              	# sieve_extend.c:417:         *index_ptr |= mask; index_ptr+=step;
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3078              		.loc 1 417 20 is_stmt 0 view .LVU997
 3079 11f9 C4C165EB 		vpor	ymm4, ymm3, YMMWORD PTR 320[r12]	# tmp313, quadmask.56_160, MEM[base: index_ptr_153, offset: 
 3079      A4244001 
 3079      0000
 3080 1203 4981C780 		add	r15, 640	# ivtmp.230,
 3080      020000
 3081 120a C4C17D7F 		vmovdqa	YMMWORD PTR 320[r12], ymm4	# MEM[base: index_ptr_153, offset: 0B], tmp313
 3081      A4244001 
 3081      0000
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3082              		.loc 1 417 29 is_stmt 1 view .LVU998
 3083              	.LVL151:
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3084              		.loc 1 418 9 view .LVU999
 3085              	# sieve_extend.c:418:         *index_ptr |= mask; index_ptr+=step;
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3086              		.loc 1 418 20 is_stmt 0 view .LVU1000
 3087 1214 C5E5EB68 		vpor	ymm5, ymm3, YMMWORD PTR 32[rax]	# tmp314, quadmask.56_160, MEM[base: index_ptr_153, offset: 3
 3087      20
 3088 1219 C5FD7F68 		vmovdqa	YMMWORD PTR 32[rax], ymm5	# MEM[base: index_ptr_153, offset: 32B], tmp314
 3088      20
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3089              		.loc 1 418 29 is_stmt 1 view .LVU1001
 3090              	.LVL152:
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3091              		.loc 1 419 9 view .LVU1002
 3092              	# sieve_extend.c:419:         *index_ptr |= mask; index_ptr+=step;
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3093              		.loc 1 419 20 is_stmt 0 view .LVU1003
 3094 121e C4C165EB 		vpor	ymm6, ymm3, YMMWORD PTR -160[r15]	# tmp315, quadmask.56_160, MEM[base: _11, offset: 0B]
 3094      B760FFFF 
 3094      FF
 3095              	# sieve_extend.c:420:         *index_ptr |= mask; index_ptr+=step;
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3096              		.loc 1 420 20 view .LVU1004
 3097 1227 C4C165EB 		vpor	ymm7, ymm3, YMMWORD PTR -128[r15]	# tmp316, quadmask.56_160, MEM[base: _11, offset: 32B]
 3097      7F80
 3098              	# sieve_extend.c:419:         *index_ptr |= mask; index_ptr+=step;
GAS LISTING /tmp/cclewcPz.s 			page 91


 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3099              		.loc 1 419 20 view .LVU1005
 3100 122d C4C17D7F 		vmovdqa	YMMWORD PTR -160[r15], ymm6	# MEM[base: _11, offset: 0B], tmp315
 3100      B760FFFF 
 3100      FF
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3101              		.loc 1 419 29 is_stmt 1 view .LVU1006
 3102              	.LVL153:
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3103              		.loc 1 420 9 view .LVU1007
 3104              	# sieve_extend.c:420:         *index_ptr |= mask; index_ptr+=step;
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3105              		.loc 1 420 20 is_stmt 0 view .LVU1008
 3106 1236 C4C17D7F 		vmovdqa	YMMWORD PTR -128[r15], ymm7	# MEM[base: _11, offset: 32B], tmp316
 3106      7F80
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3107              		.loc 1 420 29 is_stmt 1 view .LVU1009
 3108              	.LVL154:
 421:sieve_extend.c ****     }
 3109              		.loc 1 421 9 view .LVU1010
 3110              	# sieve_extend.c:421:         *index_ptr |= mask; index_ptr+=step;
 421:sieve_extend.c ****     }
 3111              		.loc 1 421 20 is_stmt 0 view .LVU1011
 3112 123c C5E5EB80 		vpor	ymm0, ymm3, YMMWORD PTR 128[rax]	# tmp317, quadmask.56_160, MEM[base: index_ptr_153, offset: 
 3112      80000000 
 3113 1244 C5FD7F80 		vmovdqa	YMMWORD PTR 128[rax], ymm0	# MEM[base: index_ptr_153, offset: 128B], tmp317
 3113      80000000 
 421:sieve_extend.c ****     }
 3114              		.loc 1 421 29 is_stmt 1 view .LVU1012
 3115              	.LVL155:
 421:sieve_extend.c ****     }
 3116              		.loc 1 421 29 is_stmt 0 view .LVU1013
 3117 124c 498D8424 		lea	rax, 480[r12]	# _25,
 3117      E0010000 
 3118              	.LVL156:
 416:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3119              		.loc 1 416 11 is_stmt 1 view .LVU1014
 3120 1254 4C39C0   		cmp	rax, r8	# _25, fast_loop_ptr
 3121 1257 0F829CFE 		jb	.L174	#,
 3121      FFFF
 3122 125d 0F1F00   		.p2align 4
 3123              		.p2align 3
 3124              	.L173:
 424:sieve_extend.c ****     while likely(index_ptr <= range_stop_ptr) {
 3125              		.loc 1 424 5 view .LVU1015
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3126              		.loc 1 425 5 view .LVU1016
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3127              		.loc 1 425 11 view .LVU1017
 3128 1260 4939C1   		cmp	r9, rax	# range_stop_ptr, _25
 3129 1263 0F821E01 		jb	.L175	#,
 3129      0000
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3130              		.loc 1 425 11 is_stmt 0 view .LVU1018
 3131 1269 4D89CE   		mov	r14, r9	# tmp232, range_stop_ptr
 3132              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
GAS LISTING /tmp/cclewcPz.s 			page 92


 3133              		.loc 1 426 38 view .LVU1019
 3134 126c 488D4820 		lea	rcx, 32[rax]	# _25,
 3135 1270 4929C6   		sub	r14, rax	# tmp232, _25
 3136              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3137              		.loc 1 426 20 view .LVU1020
 3138 1273 C565EB00 		vpor	ymm8, ymm3, YMMWORD PTR [rax]	# tmp228, quadmask.56_160, MEM[base: index_ptr_116, offset: 0B]
 3139 1277 49C1EE05 		shr	r14, 5	# tmp231,
 3140 127b C57D7F00 		vmovdqa	YMMWORD PTR [rax], ymm8	# MEM[base: index_ptr_116, offset: 0B], tmp228
 3141 127f 4183E607 		and	r14d, 7	# tmp233,
 426:sieve_extend.c ****     }
 3142              		.loc 1 426 9 is_stmt 1 view .LVU1021
 426:sieve_extend.c ****     }
 3143              		.loc 1 426 29 view .LVU1022
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3144              		.loc 1 425 11 view .LVU1023
 3145 1283 4939C9   		cmp	r9, rcx	# range_stop_ptr, _25
 3146 1286 0F82FB00 		jb	.L175	#,
 3146      0000
 3147 128c 4D85F6   		test	r14, r14	# tmp233
 3148 128f 0F848300 		je	.L176	#,
 3148      0000
 3149 1295 4983FE01 		cmp	r14, 1	# tmp233,
 3150 1299 746B     		je	.L270	#,
 3151 129b 4983FE02 		cmp	r14, 2	# tmp233,
 3152 129f 7458     		je	.L271	#,
 3153 12a1 4983FE03 		cmp	r14, 3	# tmp233,
 3154 12a5 7445     		je	.L272	#,
 3155 12a7 4983FE04 		cmp	r14, 4	# tmp233,
 3156 12ab 7432     		je	.L273	#,
 3157 12ad 4983FE05 		cmp	r14, 5	# tmp233,
 3158 12b1 741F     		je	.L274	#,
 3159 12b3 4983FE06 		cmp	r14, 6	# tmp233,
 3160 12b7 740C     		je	.L275	#,
 426:sieve_extend.c ****     }
 3161              		.loc 1 426 9 view .LVU1024
 3162              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3163              		.loc 1 426 20 is_stmt 0 view .LVU1025
 3164 12b9 C565EB09 		vpor	ymm9, ymm3, YMMWORD PTR [rcx]	# tmp294, quadmask.56_160, MEM[base: index_ptr_116, offset: 0B]
 3165 12bd C57D7F09 		vmovdqa	YMMWORD PTR [rcx], ymm9	# MEM[base: index_ptr_116, offset: 0B], tmp294
 426:sieve_extend.c ****     }
 3166              		.loc 1 426 29 is_stmt 1 view .LVU1026
 3167              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3168              		.loc 1 426 38 is_stmt 0 view .LVU1027
 3169 12c1 488D4840 		lea	rcx, 64[rax]	# _25,
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3170              		.loc 1 425 11 is_stmt 1 view .LVU1028
 3171              	.L275:
 426:sieve_extend.c ****     }
 3172              		.loc 1 426 9 view .LVU1029
 3173              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3174              		.loc 1 426 20 is_stmt 0 view .LVU1030
 3175 12c5 C565EB11 		vpor	ymm10, ymm3, YMMWORD PTR [rcx]	# tmp295, quadmask.56_160, MEM[base: index_ptr_116, offset: 0B
 3176              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
GAS LISTING /tmp/cclewcPz.s 			page 93


 426:sieve_extend.c ****     }
 3177              		.loc 1 426 38 view .LVU1031
 3178 12c9 4883C120 		add	rcx, 32	# _25,
 3179              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3180              		.loc 1 426 20 view .LVU1032
 3181 12cd C57D7F51 		vmovdqa	YMMWORD PTR -32[rcx], ymm10	# MEM[base: index_ptr_116, offset: 0B], tmp295
 3181      E0
 426:sieve_extend.c ****     }
 3182              		.loc 1 426 29 is_stmt 1 view .LVU1033
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3183              		.loc 1 425 11 view .LVU1034
 3184              	.L274:
 426:sieve_extend.c ****     }
 3185              		.loc 1 426 9 view .LVU1035
 3186              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3187              		.loc 1 426 20 is_stmt 0 view .LVU1036
 3188 12d2 C565EB19 		vpor	ymm11, ymm3, YMMWORD PTR [rcx]	# tmp296, quadmask.56_160, MEM[base: index_ptr_116, offset: 0B
 3189              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3190              		.loc 1 426 38 view .LVU1037
 3191 12d6 4883C120 		add	rcx, 32	# _25,
 3192              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3193              		.loc 1 426 20 view .LVU1038
 3194 12da C57D7F59 		vmovdqa	YMMWORD PTR -32[rcx], ymm11	# MEM[base: index_ptr_116, offset: 0B], tmp296
 3194      E0
 426:sieve_extend.c ****     }
 3195              		.loc 1 426 29 is_stmt 1 view .LVU1039
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3196              		.loc 1 425 11 view .LVU1040
 3197              	.L273:
 426:sieve_extend.c ****     }
 3198              		.loc 1 426 9 view .LVU1041
 3199              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3200              		.loc 1 426 20 is_stmt 0 view .LVU1042
 3201 12df C565EB21 		vpor	ymm12, ymm3, YMMWORD PTR [rcx]	# tmp297, quadmask.56_160, MEM[base: index_ptr_116, offset: 0B
 3202              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3203              		.loc 1 426 38 view .LVU1043
 3204 12e3 4883C120 		add	rcx, 32	# _25,
 3205              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3206              		.loc 1 426 20 view .LVU1044
 3207 12e7 C57D7F61 		vmovdqa	YMMWORD PTR -32[rcx], ymm12	# MEM[base: index_ptr_116, offset: 0B], tmp297
 3207      E0
 426:sieve_extend.c ****     }
 3208              		.loc 1 426 29 is_stmt 1 view .LVU1045
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3209              		.loc 1 425 11 view .LVU1046
 3210              	.L272:
 426:sieve_extend.c ****     }
 3211              		.loc 1 426 9 view .LVU1047
 3212              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
GAS LISTING /tmp/cclewcPz.s 			page 94


 3213              		.loc 1 426 20 is_stmt 0 view .LVU1048
 3214 12ec C565EB29 		vpor	ymm13, ymm3, YMMWORD PTR [rcx]	# tmp298, quadmask.56_160, MEM[base: index_ptr_116, offset: 0B
 3215              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3216              		.loc 1 426 38 view .LVU1049
 3217 12f0 4883C120 		add	rcx, 32	# _25,
 3218              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3219              		.loc 1 426 20 view .LVU1050
 3220 12f4 C57D7F69 		vmovdqa	YMMWORD PTR -32[rcx], ymm13	# MEM[base: index_ptr_116, offset: 0B], tmp298
 3220      E0
 426:sieve_extend.c ****     }
 3221              		.loc 1 426 29 is_stmt 1 view .LVU1051
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3222              		.loc 1 425 11 view .LVU1052
 3223              	.L271:
 426:sieve_extend.c ****     }
 3224              		.loc 1 426 9 view .LVU1053
 3225              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3226              		.loc 1 426 20 is_stmt 0 view .LVU1054
 3227 12f9 C565EB31 		vpor	ymm14, ymm3, YMMWORD PTR [rcx]	# tmp299, quadmask.56_160, MEM[base: index_ptr_116, offset: 0B
 3228              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3229              		.loc 1 426 38 view .LVU1055
 3230 12fd 4883C120 		add	rcx, 32	# _25,
 3231              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3232              		.loc 1 426 20 view .LVU1056
 3233 1301 C57D7F71 		vmovdqa	YMMWORD PTR -32[rcx], ymm14	# MEM[base: index_ptr_116, offset: 0B], tmp299
 3233      E0
 426:sieve_extend.c ****     }
 3234              		.loc 1 426 29 is_stmt 1 view .LVU1057
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3235              		.loc 1 425 11 view .LVU1058
 3236              	.L270:
 426:sieve_extend.c ****     }
 3237              		.loc 1 426 9 view .LVU1059
 3238              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3239              		.loc 1 426 20 is_stmt 0 view .LVU1060
 3240 1306 C565EB39 		vpor	ymm15, ymm3, YMMWORD PTR [rcx]	# tmp300, quadmask.56_160, MEM[base: index_ptr_116, offset: 0B
 3241              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3242              		.loc 1 426 38 view .LVU1061
 3243 130a 4883C120 		add	rcx, 32	# _25,
 3244              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3245              		.loc 1 426 20 view .LVU1062
 3246 130e C57D7F79 		vmovdqa	YMMWORD PTR -32[rcx], ymm15	# MEM[base: index_ptr_116, offset: 0B], tmp300
 3246      E0
 426:sieve_extend.c ****     }
 3247              		.loc 1 426 29 is_stmt 1 view .LVU1063
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3248              		.loc 1 425 11 view .LVU1064
 3249 1313 4939C9   		cmp	r9, rcx	# range_stop_ptr, _25
 3250 1316 726F     		jb	.L175	#,
GAS LISTING /tmp/cclewcPz.s 			page 95


 3251              	.L176:
 426:sieve_extend.c ****     }
 3252              		.loc 1 426 9 view .LVU1065
 3253              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3254              		.loc 1 426 20 is_stmt 0 view .LVU1066
 3255 1318 C5E5EB09 		vpor	ymm1, ymm3, YMMWORD PTR [rcx]	# tmp244, quadmask.56_160, MEM[base: index_ptr_116, offset: 0B]
 3256 131c C5E5EB61 		vpor	ymm4, ymm3, YMMWORD PTR 32[rcx]	# tmp246, quadmask.56_160, MEM[base: index_ptr_116, offset: 0
 3256      20
 3257 1321 C5E5EB69 		vpor	ymm5, ymm3, YMMWORD PTR 64[rcx]	# tmp248, quadmask.56_160, MEM[base: index_ptr_116, offset: 0
 3257      40
 3258 1326 C5E5EB71 		vpor	ymm6, ymm3, YMMWORD PTR 96[rcx]	# tmp250, quadmask.56_160, MEM[base: index_ptr_116, offset: 0
 3258      60
 3259 132b C5E5EBB9 		vpor	ymm7, ymm3, YMMWORD PTR 128[rcx]	# tmp252, quadmask.56_160, MEM[base: index_ptr_116, offset: 
 3259      80000000 
 3260 1333 C5E5EB81 		vpor	ymm0, ymm3, YMMWORD PTR 160[rcx]	# tmp254, quadmask.56_160, MEM[base: index_ptr_116, offset: 
 3260      A0000000 
 3261 133b C565EB81 		vpor	ymm8, ymm3, YMMWORD PTR 192[rcx]	# tmp256, quadmask.56_160, MEM[base: index_ptr_116, offset: 
 3261      C0000000 
 3262 1343 C565EB89 		vpor	ymm9, ymm3, YMMWORD PTR 224[rcx]	# tmp258, quadmask.56_160, MEM[base: index_ptr_116, offset: 
 3262      E0000000 
 3263 134b C5FD7F09 		vmovdqa	YMMWORD PTR [rcx], ymm1	# MEM[base: index_ptr_116, offset: 0B], tmp244
 426:sieve_extend.c ****     }
 3264              		.loc 1 426 29 is_stmt 1 view .LVU1067
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3265              		.loc 1 425 11 view .LVU1068
 426:sieve_extend.c ****     }
 3266              		.loc 1 426 9 view .LVU1069
 3267              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3268              		.loc 1 426 38 is_stmt 0 view .LVU1070
 3269 134f 4881C100 		add	rcx, 256	# _25,
 3269      010000
 3270              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3271              		.loc 1 426 20 view .LVU1071
 3272 1356 C5FD7FA1 		vmovdqa	YMMWORD PTR -224[rcx], ymm4	# MEM[base: index_ptr_116, offset: 0B], tmp246
 3272      20FFFFFF 
 426:sieve_extend.c ****     }
 3273              		.loc 1 426 29 is_stmt 1 view .LVU1072
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3274              		.loc 1 425 11 view .LVU1073
 426:sieve_extend.c ****     }
 3275              		.loc 1 426 9 view .LVU1074
 3276              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3277              		.loc 1 426 20 is_stmt 0 view .LVU1075
 3278 135e C5FD7FA9 		vmovdqa	YMMWORD PTR -192[rcx], ymm5	# MEM[base: index_ptr_116, offset: 0B], tmp248
 3278      40FFFFFF 
 426:sieve_extend.c ****     }
 3279              		.loc 1 426 29 is_stmt 1 view .LVU1076
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3280              		.loc 1 425 11 view .LVU1077
 426:sieve_extend.c ****     }
 3281              		.loc 1 426 9 view .LVU1078
 3282              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
GAS LISTING /tmp/cclewcPz.s 			page 96


 3283              		.loc 1 426 20 is_stmt 0 view .LVU1079
 3284 1366 C5FD7FB1 		vmovdqa	YMMWORD PTR -160[rcx], ymm6	# MEM[base: index_ptr_116, offset: 0B], tmp250
 3284      60FFFFFF 
 426:sieve_extend.c ****     }
 3285              		.loc 1 426 29 is_stmt 1 view .LVU1080
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3286              		.loc 1 425 11 view .LVU1081
 426:sieve_extend.c ****     }
 3287              		.loc 1 426 9 view .LVU1082
 3288              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3289              		.loc 1 426 20 is_stmt 0 view .LVU1083
 3290 136e C5FD7F79 		vmovdqa	YMMWORD PTR -128[rcx], ymm7	# MEM[base: index_ptr_116, offset: 0B], tmp252
 3290      80
 426:sieve_extend.c ****     }
 3291              		.loc 1 426 29 is_stmt 1 view .LVU1084
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3292              		.loc 1 425 11 view .LVU1085
 426:sieve_extend.c ****     }
 3293              		.loc 1 426 9 view .LVU1086
 3294              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3295              		.loc 1 426 20 is_stmt 0 view .LVU1087
 3296 1373 C5FD7F41 		vmovdqa	YMMWORD PTR -96[rcx], ymm0	# MEM[base: index_ptr_116, offset: 0B], tmp254
 3296      A0
 426:sieve_extend.c ****     }
 3297              		.loc 1 426 29 is_stmt 1 view .LVU1088
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3298              		.loc 1 425 11 view .LVU1089
 426:sieve_extend.c ****     }
 3299              		.loc 1 426 9 view .LVU1090
 3300              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3301              		.loc 1 426 20 is_stmt 0 view .LVU1091
 3302 1378 C57D7F41 		vmovdqa	YMMWORD PTR -64[rcx], ymm8	# MEM[base: index_ptr_116, offset: 0B], tmp256
 3302      C0
 426:sieve_extend.c ****     }
 3303              		.loc 1 426 29 is_stmt 1 view .LVU1092
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3304              		.loc 1 425 11 view .LVU1093
 426:sieve_extend.c ****     }
 3305              		.loc 1 426 9 view .LVU1094
 3306              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3307              		.loc 1 426 20 is_stmt 0 view .LVU1095
 3308 137d C57D7F49 		vmovdqa	YMMWORD PTR -32[rcx], ymm9	# MEM[base: index_ptr_116, offset: 0B], tmp258
 3308      E0
 426:sieve_extend.c ****     }
 3309              		.loc 1 426 29 is_stmt 1 view .LVU1096
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3310              		.loc 1 425 11 view .LVU1097
 3311 1382 4939C9   		cmp	r9, rcx	# range_stop_ptr, _25
 3312 1385 7391     		jnb	.L176	#,
 3313              	.L175:
 3314              	.LVL157:
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3315              		.loc 1 425 11 is_stmt 0 view .LVU1098
GAS LISTING /tmp/cclewcPz.s 			page 97


 3316              	.LBE324:
 3317              	.LBE327:
 3318              	.LBE320:
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 3319              		.loc 1 489 41 is_stmt 1 view .LVU1099
 3320              	# sieve_extend.c:489:     for (counter_t index = range_start; index < range_stop_unique;) {
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 3321              		.loc 1 489 5 is_stmt 0 view .LVU1100
 3322 1387 4939F2   		cmp	r10, rsi	# range_stop_unique, range_start
 3323 138a 0F8730FC 		ja	.L177	#,
 3323      FFFF
 3324              	.L316:
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 3325              		.loc 1 489 5 view .LVU1101
 3326 1390 C5F877   		vzeroupper
 3327              	.LVL158:
 3328              	.L160:
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 3329              		.loc 1 489 5 view .LVU1102
 3330              	.LBE319:
 3331              	# sieve_extend.c:509: }
 509:sieve_extend.c **** 
 3332              		.loc 1 509 1 view .LVU1103
 3333 1393 488B4424 		mov	rax, QWORD PTR 56[rsp]	# tmp421, D.6701
 3333      38
 3334 1398 64483304 		xor	rax, QWORD PTR fs:40	# tmp421, MEM[(<address-space-1> long unsigned int *)40B]
 3334      25280000 
 3334      00
 3335 13a1 0F853B04 		jne	.L318	#,
 3335      0000
 3336 13a7 488D65D8 		lea	rsp, -40[rbp]	#,
 3337 13ab 5B       		pop	rbx	#
 3338 13ac 415C     		pop	r12	#
 3339 13ae 415D     		pop	r13	#
 3340 13b0 415E     		pop	r14	#
 3341 13b2 415F     		pop	r15	#
 3342 13b4 5D       		pop	rbp	#
 3343              		.cfi_remember_state
 3344              		.cfi_def_cfa 7, 8
 3345 13b5 C3       		ret	
 3346              	.LVL159:
 3347              	.L317:
 3348              		.cfi_restore_state
 509:sieve_extend.c **** 
 3349              		.loc 1 509 1 view .LVU1104
 3350 13b6 4939D0   		cmp	r8, rdx	# range_stop_vector, tmp193
 3351 13b9 4989DD   		mov	r13, rbx	# _101, step
 3352              	.LBB330:
 3353              	.LBB329:
 3354              	# sieve_extend.c:491:         register bitvector_t quadmask = { };
 491:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 3355              		.loc 1 491 30 view .LVU1105
 3356 13bc C5E9EFD2 		vpxor	xmm2, xmm2, xmm2	# tmp202
 3357              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3358              		.loc 1 498 31 view .LVU1106
 3359 13c0 41BC0100 		mov	r12d, 1	# tmp206,
GAS LISTING /tmp/cclewcPz.s 			page 98


 3359      0000
 3360 13c6 480F46C7 		cmovbe	rax, rdi	# bitarray_word,, tmp197
 3361 13ca 48C1E205 		sal	rdx, 5	# tmp201,
 3362 13ce 49C1E506 		sal	r13, 6	# _101,
 3363 13d2 4989C3   		mov	r11, rax	# fast_loop_ptr, tmp197
 3364 13d5 66662E0F 		.p2align 4
 3364      1F840000 
 3364      000000
 3365              		.p2align 3
 3366              	.L171:
 490:sieve_extend.c ****         register bitvector_t quadmask = { };
 3367              		.loc 1 490 9 is_stmt 1 view .LVU1107
 3368              	# sieve_extend.c:490:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 490:sieve_extend.c ****         register bitvector_t quadmask = { };
 3369              		.loc 1 490 54 is_stmt 0 view .LVU1108
 3370 13e0 4989F6   		mov	r14, rsi	# _29, range_start
 3371              	# sieve_extend.c:492:         register counter_t word = wordindex(index) - current_vector_start_wor
 492:sieve_extend.c ****         
 3372              		.loc 1 492 35 view .LVU1109
 3373 13e3 4889F0   		mov	rax, rsi	# tmp203, range_start
 3374              	# sieve_extend.c:490:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 490:sieve_extend.c ****         register bitvector_t quadmask = { };
 3375              		.loc 1 490 54 view .LVU1110
 3376 13e6 49C1EE08 		shr	r14, 8	# _29,
 3377              	# sieve_extend.c:492:         register counter_t word = wordindex(index) - current_vector_start_wor
 492:sieve_extend.c ****         
 3378              		.loc 1 492 35 view .LVU1111
 3379 13ea 48C1E806 		shr	rax, 6	# tmp203,
 3380              	# sieve_extend.c:490:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 490:sieve_extend.c ****         register bitvector_t quadmask = { };
 3381              		.loc 1 490 25 view .LVU1112
 3382 13ee 4E8D04B5 		lea	r8, 0[0+r14*4]	# current_vector_start_word,
 3382      00000000 
 3383              	.LVL160:
 491:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 3384              		.loc 1 491 9 is_stmt 1 view .LVU1113
 3385              	# sieve_extend.c:491:         register bitvector_t quadmask = { };
 491:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 3386              		.loc 1 491 30 is_stmt 0 view .LVU1114
 3387 13f6 C5FD7F14 		vmovdqa	YMMWORD PTR [rsp], ymm2	# quadmask, tmp202
 3387      24
 492:sieve_extend.c ****         
 3388              		.loc 1 492 9 is_stmt 1 view .LVU1115
 3389              	# sieve_extend.c:492:         register counter_t word = wordindex(index) - current_vector_start_wor
 492:sieve_extend.c ****         
 3390              		.loc 1 492 28 is_stmt 0 view .LVU1116
 3391 13fb 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 3392              	.LVL161:
 3393              	.L167:
 498:sieve_extend.c ****             index += step;
 3394              		.loc 1 498 13 is_stmt 1 discriminator 1 view .LVU1117
 3395              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3396              		.loc 1 498 31 is_stmt 0 discriminator 1 view .LVU1118
 3397 13fe C442C9F7 		shlx	r15, r12, rsi	# tmp205, tmp206, range_start
 3397      FC
 3398              	# sieve_extend.c:499:             index += step;
GAS LISTING /tmp/cclewcPz.s 			page 99


 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3399              		.loc 1 499 19 discriminator 1 view .LVU1119
 3400 1403 4801DE   		add	rsi, rbx	# range_start, step
 3401              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3402              		.loc 1 498 28 discriminator 1 view .LVU1120
 3403 1406 4C093CC4 		or	QWORD PTR [rsp+rax*8], r15	# quadmask, tmp205
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3404              		.loc 1 499 13 is_stmt 1 discriminator 1 view .LVU1121
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3405              		.loc 1 500 13 discriminator 1 view .LVU1122
 3406              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3407              		.loc 1 500 20 is_stmt 0 discriminator 1 view .LVU1123
 3408 140a 4889F0   		mov	rax, rsi	# tmp207, range_start
 3409              	.LVL162:
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3410              		.loc 1 500 20 discriminator 1 view .LVU1124
 3411 140d 48C1E806 		shr	rax, 6	# tmp207,
 3412              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3413              		.loc 1 500 18 discriminator 1 view .LVU1125
 3414 1411 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 501:sieve_extend.c ****         
 3415              		.loc 1 501 17 is_stmt 1 discriminator 1 view .LVU1126
 3416              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 3417              		.loc 1 501 9 is_stmt 0 discriminator 1 view .LVU1127
 3418 1414 4883F803 		cmp	rax, 3	# word,
 3419 1418 0F87D200 		ja	.L312	#,
 3419      0000
 498:sieve_extend.c ****             index += step;
 3420              		.loc 1 498 13 is_stmt 1 view .LVU1128
 3421              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3422              		.loc 1 498 31 is_stmt 0 view .LVU1129
 3423 141e C442C9F7 		shlx	r15, r12, rsi	# tmp368, tmp206, range_start
 3423      FC
 3424              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3425              		.loc 1 499 19 view .LVU1130
 3426 1423 4801DE   		add	rsi, rbx	# range_start, step
 3427              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3428              		.loc 1 498 28 view .LVU1131
 3429 1426 4C093CC4 		or	QWORD PTR [rsp+rax*8], r15	# quadmask, tmp368
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3430              		.loc 1 499 13 is_stmt 1 view .LVU1132
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3431              		.loc 1 500 13 view .LVU1133
 3432              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3433              		.loc 1 500 20 is_stmt 0 view .LVU1134
 3434 142a 4889F0   		mov	rax, rsi	# tmp369, range_start
 3435 142d 48C1E806 		shr	rax, 6	# tmp369,
 3436              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
GAS LISTING /tmp/cclewcPz.s 			page 100


 3437              		.loc 1 500 18 view .LVU1135
 3438 1431 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 501:sieve_extend.c ****         
 3439              		.loc 1 501 17 is_stmt 1 view .LVU1136
 3440              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 3441              		.loc 1 501 9 is_stmt 0 view .LVU1137
 3442 1434 4883F803 		cmp	rax, 3	# word,
 3443 1438 0F87B200 		ja	.L312	#,
 3443      0000
 498:sieve_extend.c ****             index += step;
 3444              		.loc 1 498 13 is_stmt 1 view .LVU1138
 3445              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3446              		.loc 1 498 31 is_stmt 0 view .LVU1139
 3447 143e C442C9F7 		shlx	r15, r12, rsi	# tmp371, tmp206, range_start
 3447      FC
 3448              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3449              		.loc 1 499 19 view .LVU1140
 3450 1443 4801DE   		add	rsi, rbx	# range_start, step
 3451              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3452              		.loc 1 498 28 view .LVU1141
 3453 1446 4C093CC4 		or	QWORD PTR [rsp+rax*8], r15	# quadmask, tmp371
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3454              		.loc 1 499 13 is_stmt 1 view .LVU1142
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3455              		.loc 1 500 13 view .LVU1143
 3456              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3457              		.loc 1 500 20 is_stmt 0 view .LVU1144
 3458 144a 4889F0   		mov	rax, rsi	# tmp372, range_start
 3459 144d 48C1E806 		shr	rax, 6	# tmp372,
 3460              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3461              		.loc 1 500 18 view .LVU1145
 3462 1451 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 501:sieve_extend.c ****         
 3463              		.loc 1 501 17 is_stmt 1 view .LVU1146
 3464              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 3465              		.loc 1 501 9 is_stmt 0 view .LVU1147
 3466 1454 4883F803 		cmp	rax, 3	# word,
 3467 1458 0F879200 		ja	.L312	#,
 3467      0000
 498:sieve_extend.c ****             index += step;
 3468              		.loc 1 498 13 is_stmt 1 view .LVU1148
 3469              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3470              		.loc 1 498 31 is_stmt 0 view .LVU1149
 3471 145e C442C9F7 		shlx	r15, r12, rsi	# tmp374, tmp206, range_start
 3471      FC
 3472              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3473              		.loc 1 499 19 view .LVU1150
 3474 1463 4801DE   		add	rsi, rbx	# range_start, step
GAS LISTING /tmp/cclewcPz.s 			page 101


 3475              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3476              		.loc 1 498 28 view .LVU1151
 3477 1466 4C093CC4 		or	QWORD PTR [rsp+rax*8], r15	# quadmask, tmp374
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3478              		.loc 1 499 13 is_stmt 1 view .LVU1152
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3479              		.loc 1 500 13 view .LVU1153
 3480              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3481              		.loc 1 500 20 is_stmt 0 view .LVU1154
 3482 146a 4889F0   		mov	rax, rsi	# tmp375, range_start
 3483 146d 48C1E806 		shr	rax, 6	# tmp375,
 3484              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3485              		.loc 1 500 18 view .LVU1155
 3486 1471 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 501:sieve_extend.c ****         
 3487              		.loc 1 501 17 is_stmt 1 view .LVU1156
 3488              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 3489              		.loc 1 501 9 is_stmt 0 view .LVU1157
 3490 1474 4883F803 		cmp	rax, 3	# word,
 3491 1478 7776     		ja	.L312	#,
 498:sieve_extend.c ****             index += step;
 3492              		.loc 1 498 13 is_stmt 1 view .LVU1158
 3493              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3494              		.loc 1 498 31 is_stmt 0 view .LVU1159
 3495 147a C442C9F7 		shlx	r15, r12, rsi	# tmp377, tmp206, range_start
 3495      FC
 3496              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3497              		.loc 1 499 19 view .LVU1160
 3498 147f 4801DE   		add	rsi, rbx	# range_start, step
 3499              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3500              		.loc 1 498 28 view .LVU1161
 3501 1482 4C093CC4 		or	QWORD PTR [rsp+rax*8], r15	# quadmask, tmp377
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3502              		.loc 1 499 13 is_stmt 1 view .LVU1162
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3503              		.loc 1 500 13 view .LVU1163
 3504              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3505              		.loc 1 500 20 is_stmt 0 view .LVU1164
 3506 1486 4889F0   		mov	rax, rsi	# tmp378, range_start
 3507 1489 48C1E806 		shr	rax, 6	# tmp378,
 3508              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3509              		.loc 1 500 18 view .LVU1165
 3510 148d 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 501:sieve_extend.c ****         
 3511              		.loc 1 501 17 is_stmt 1 view .LVU1166
 3512              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 3513              		.loc 1 501 9 is_stmt 0 view .LVU1167
GAS LISTING /tmp/cclewcPz.s 			page 102


 3514 1490 4883F803 		cmp	rax, 3	# word,
 3515 1494 775A     		ja	.L312	#,
 498:sieve_extend.c ****             index += step;
 3516              		.loc 1 498 13 is_stmt 1 view .LVU1168
 3517              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3518              		.loc 1 498 31 is_stmt 0 view .LVU1169
 3519 1496 C442C9F7 		shlx	r15, r12, rsi	# tmp380, tmp206, range_start
 3519      FC
 3520              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3521              		.loc 1 499 19 view .LVU1170
 3522 149b 4801DE   		add	rsi, rbx	# range_start, step
 3523              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3524              		.loc 1 498 28 view .LVU1171
 3525 149e 4C093CC4 		or	QWORD PTR [rsp+rax*8], r15	# quadmask, tmp380
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3526              		.loc 1 499 13 is_stmt 1 view .LVU1172
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3527              		.loc 1 500 13 view .LVU1173
 3528              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3529              		.loc 1 500 20 is_stmt 0 view .LVU1174
 3530 14a2 4889F0   		mov	rax, rsi	# tmp381, range_start
 3531 14a5 48C1E806 		shr	rax, 6	# tmp381,
 3532              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3533              		.loc 1 500 18 view .LVU1175
 3534 14a9 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 501:sieve_extend.c ****         
 3535              		.loc 1 501 17 is_stmt 1 view .LVU1176
 3536              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 3537              		.loc 1 501 9 is_stmt 0 view .LVU1177
 3538 14ac 4883F803 		cmp	rax, 3	# word,
 3539 14b0 773E     		ja	.L312	#,
 498:sieve_extend.c ****             index += step;
 3540              		.loc 1 498 13 is_stmt 1 view .LVU1178
 3541              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3542              		.loc 1 498 31 is_stmt 0 view .LVU1179
 3543 14b2 C442C9F7 		shlx	r15, r12, rsi	# tmp383, tmp206, range_start
 3543      FC
 3544              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3545              		.loc 1 499 19 view .LVU1180
 3546 14b7 4801DE   		add	rsi, rbx	# range_start, step
 3547              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3548              		.loc 1 498 28 view .LVU1181
 3549 14ba 4C093CC4 		or	QWORD PTR [rsp+rax*8], r15	# quadmask, tmp383
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3550              		.loc 1 499 13 is_stmt 1 view .LVU1182
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3551              		.loc 1 500 13 view .LVU1183
 3552              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
GAS LISTING /tmp/cclewcPz.s 			page 103


 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3553              		.loc 1 500 20 is_stmt 0 view .LVU1184
 3554 14be 4889F0   		mov	rax, rsi	# tmp384, range_start
 3555 14c1 48C1E806 		shr	rax, 6	# tmp384,
 3556              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3557              		.loc 1 500 18 view .LVU1185
 3558 14c5 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 501:sieve_extend.c ****         
 3559              		.loc 1 501 17 is_stmt 1 view .LVU1186
 3560              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 3561              		.loc 1 501 9 is_stmt 0 view .LVU1187
 3562 14c8 4883F803 		cmp	rax, 3	# word,
 3563 14cc 7722     		ja	.L312	#,
 498:sieve_extend.c ****             index += step;
 3564              		.loc 1 498 13 is_stmt 1 view .LVU1188
 3565              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3566              		.loc 1 498 31 is_stmt 0 view .LVU1189
 3567 14ce C442C9F7 		shlx	r15, r12, rsi	# tmp386, tmp206, range_start
 3567      FC
 3568              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3569              		.loc 1 499 19 view .LVU1190
 3570 14d3 4801DE   		add	rsi, rbx	# range_start, step
 3571              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 3572              		.loc 1 498 28 view .LVU1191
 3573 14d6 4C093CC4 		or	QWORD PTR [rsp+rax*8], r15	# quadmask, tmp386
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 3574              		.loc 1 499 13 is_stmt 1 view .LVU1192
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3575              		.loc 1 500 13 view .LVU1193
 3576              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3577              		.loc 1 500 20 is_stmt 0 view .LVU1194
 3578 14da 4889F0   		mov	rax, rsi	# tmp387, range_start
 3579 14dd 48C1E806 		shr	rax, 6	# tmp387,
 3580              	.LVL163:
 3581              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 3582              		.loc 1 500 18 view .LVU1195
 3583 14e1 4C29C0   		sub	rax, r8	# word, current_vector_start_word
 3584              	.LVL164:
 501:sieve_extend.c ****         
 3585              		.loc 1 501 17 is_stmt 1 view .LVU1196
 3586              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 3587              		.loc 1 501 9 is_stmt 0 view .LVU1197
 3588 14e4 4883F803 		cmp	rax, 3	# word,
 3589 14e8 0F8610FF 		jbe	.L167	#,
 3589      FFFF
 3590              	.LVL165:
 3591 14ee 6690     		.p2align 4
 3592              		.p2align 3
 3593              	.L312:
GAS LISTING /tmp/cclewcPz.s 			page 104


 504:sieve_extend.c ****         // const counter_t range_stop_vector = vectorindex(range_stop);
 3594              		.loc 1 504 9 is_stmt 1 view .LVU1198
 507:sieve_extend.c ****     }
 3595              		.loc 1 507 9 view .LVU1199
 3596 14f0 C5FD6F04 		vmovdqa	ymm0, YMMWORD PTR [rsp]	# quadmask.56_36, quadmask
 3596      24
 3597              	.LVL166:
 3598              	.LBB328:
 409:sieve_extend.c ****     const counter_t range_stop_vector = vectorindex(range_stop);
 3599              		.loc 1 409 20 view .LVU1200
 3600              	.LBB325:
 410:sieve_extend.c ****     register bitvector_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_vec
 3601              		.loc 1 410 5 view .LVU1201
 411:sieve_extend.c ****     register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_s
 3602              		.loc 1 411 5 view .LVU1202
 3603              	# sieve_extend.c:411:     register bitvector_t* __restrict index_ptr      =  __builtin_assume_align
 411:sieve_extend.c ****     register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_s
 3604              		.loc 1 411 90 is_stmt 0 view .LVU1203
 3605 14f5 4D89F0   		mov	r8, r14	# _29, _29
 3606              	.LVL167:
 411:sieve_extend.c ****     register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_s
 3607              		.loc 1 411 90 view .LVU1204
 3608 14f8 49C1E005 		sal	r8, 5	# _29,
 3609              	# sieve_extend.c:411:     register bitvector_t* __restrict index_ptr      =  __builtin_assume_align
 411:sieve_extend.c ****     register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_s
 3610              		.loc 1 411 81 view .LVU1205
 3611 14fc 4901F8   		add	r8, rdi	# index_ptr, bitarray_word
 3612              	.LVL168:
 412:sieve_extend.c ****     
 3613              		.loc 1 412 5 is_stmt 1 view .LVU1206
 416:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3614              		.loc 1 416 11 view .LVU1207
 3615 14ff 4D39D8   		cmp	r8, r11	# index_ptr, fast_loop_ptr
 3616 1502 0F832801 		jnb	.L315	#,
 3616      0000
 3617 1508 4F8D3428 		lea	r14, [r8+r13]	# ivtmp.256,
 3618              	.LVL169:
 3619              	.L169:
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3620              		.loc 1 417 9 view .LVU1208
 3621              	# sieve_extend.c:417:         *index_ptr |= mask; index_ptr+=step;
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3622              		.loc 1 417 20 is_stmt 0 view .LVU1209
 3623 150c C4C17DEB 		vpor	ymm1, ymm0, YMMWORD PTR [r8]	# tmp209, quadmask.56_36, MEM[base: index_ptr_128, offset: 0B]
 3623      08
 3624 1511 C4C17D7F 		vmovdqa	YMMWORD PTR [r8], ymm1	# MEM[base: index_ptr_128, offset: 0B], tmp209
 3624      08
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3625              		.loc 1 417 29 is_stmt 1 view .LVU1210
 3626              	.LVL170:
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3627              		.loc 1 418 9 view .LVU1211
 3628              	# sieve_extend.c:418:         *index_ptr |= mask; index_ptr+=step;
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3629              		.loc 1 418 20 is_stmt 0 view .LVU1212
 3630 1516 C4C17DEB 		vpor	ymm3, ymm0, YMMWORD PTR [r8+rcx]	# tmp210, quadmask.56_36, MEM[base: index_ptr_128, index: _7
 3630      1C08
GAS LISTING /tmp/cclewcPz.s 			page 105


 3631 151c C4C17D7F 		vmovdqa	YMMWORD PTR [r8+rcx], ymm3	# MEM[base: index_ptr_128, index: _79, offset: 0B], tmp210
 3631      1C08
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3632              		.loc 1 418 29 is_stmt 1 view .LVU1213
 3633              	.LVL171:
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3634              		.loc 1 419 9 view .LVU1214
 3635              	# sieve_extend.c:419:         *index_ptr |= mask; index_ptr+=step;
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3636              		.loc 1 419 20 is_stmt 0 view .LVU1215
 3637 1522 C4C17DEB 		vpor	ymm4, ymm0, YMMWORD PTR [r14]	# tmp211, quadmask.56_36, MEM[base: _187, offset: 0B]
 3637      26
 3638 1527 C4C17D7F 		vmovdqa	YMMWORD PTR [r14], ymm4	# MEM[base: _187, offset: 0B], tmp211
 3638      26
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3639              		.loc 1 419 29 is_stmt 1 view .LVU1216
 3640              	.LVL172:
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3641              		.loc 1 420 9 view .LVU1217
 3642              	# sieve_extend.c:420:         *index_ptr |= mask; index_ptr+=step;
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3643              		.loc 1 420 20 is_stmt 0 view .LVU1218
 3644 152c C4C17DEB 		vpor	ymm5, ymm0, YMMWORD PTR [r14+rcx]	# tmp212, quadmask.56_36, MEM[base: _187, index: _79, offse
 3644      2C0E
 3645 1532 C4C17D7F 		vmovdqa	YMMWORD PTR [r14+rcx], ymm5	# MEM[base: _187, index: _79, offset: 0B], tmp212
 3645      2C0E
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3646              		.loc 1 420 29 is_stmt 1 view .LVU1219
 3647              	.LVL173:
 421:sieve_extend.c ****     }
 3648              		.loc 1 421 9 view .LVU1220
 3649 1538 4901D6   		add	r14, rdx	# ivtmp.256, tmp201
 3650              	# sieve_extend.c:421:         *index_ptr |= mask; index_ptr+=step;
 421:sieve_extend.c ****     }
 3651              		.loc 1 421 20 is_stmt 0 view .LVU1221
 3652 153b C4C17DEB 		vpor	ymm6, ymm0, YMMWORD PTR [r8+rcx*4]	# tmp213, quadmask.56_36, MEM[base: index_ptr_128, index: 
 3652      3488
 3653 1541 C4C17D7F 		vmovdqa	YMMWORD PTR [r8+rcx*4], ymm6	# MEM[base: index_ptr_128, index: _79, step: 4, offset: 0B], 
 3653      3488
 421:sieve_extend.c ****     }
 3654              		.loc 1 421 29 is_stmt 1 view .LVU1222
 3655              	.LVL174:
 421:sieve_extend.c ****     }
 3656              		.loc 1 421 29 is_stmt 0 view .LVU1223
 3657 1547 4901D0   		add	r8, rdx	# index_ptr, tmp201
 3658              	.LVL175:
 416:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3659              		.loc 1 416 11 is_stmt 1 view .LVU1224
 3660 154a 4D39C3   		cmp	r11, r8	# fast_loop_ptr, index_ptr
 3661 154d 0F86DD00 		jbe	.L315	#,
 3661      0000
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3662              		.loc 1 417 9 view .LVU1225
 3663              	# sieve_extend.c:417:         *index_ptr |= mask; index_ptr+=step;
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3664              		.loc 1 417 20 is_stmt 0 view .LVU1226
 3665 1553 C4C17DEB 		vpor	ymm7, ymm0, YMMWORD PTR [r8]	# tmp351, quadmask.56_36, MEM[base: index_ptr_128, offset: 0B]
GAS LISTING /tmp/cclewcPz.s 			page 106


 3665      38
 3666 1558 C4C17D7F 		vmovdqa	YMMWORD PTR [r8], ymm7	# MEM[base: index_ptr_128, offset: 0B], tmp351
 3666      38
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3667              		.loc 1 417 29 is_stmt 1 view .LVU1227
 3668              	.LVL176:
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3669              		.loc 1 418 9 view .LVU1228
 3670              	# sieve_extend.c:418:         *index_ptr |= mask; index_ptr+=step;
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3671              		.loc 1 418 20 is_stmt 0 view .LVU1229
 3672 155d C4417DEB 		vpor	ymm8, ymm0, YMMWORD PTR [r8+rcx]	# tmp352, quadmask.56_36, MEM[base: index_ptr_128, index: _7
 3672      0408
 3673 1563 C4417D7F 		vmovdqa	YMMWORD PTR [r8+rcx], ymm8	# MEM[base: index_ptr_128, index: _79, offset: 0B], tmp352
 3673      0408
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3674              		.loc 1 418 29 is_stmt 1 view .LVU1230
 3675              	.LVL177:
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3676              		.loc 1 419 9 view .LVU1231
 3677              	# sieve_extend.c:419:         *index_ptr |= mask; index_ptr+=step;
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3678              		.loc 1 419 20 is_stmt 0 view .LVU1232
 3679 1569 C4417DEB 		vpor	ymm9, ymm0, YMMWORD PTR [r14]	# tmp353, quadmask.56_36, MEM[base: _187, offset: 0B]
 3679      0E
 3680 156e C4417D7F 		vmovdqa	YMMWORD PTR [r14], ymm9	# MEM[base: _187, offset: 0B], tmp353
 3680      0E
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3681              		.loc 1 419 29 is_stmt 1 view .LVU1233
 3682              	.LVL178:
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3683              		.loc 1 420 9 view .LVU1234
 3684              	# sieve_extend.c:420:         *index_ptr |= mask; index_ptr+=step;
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3685              		.loc 1 420 20 is_stmt 0 view .LVU1235
 3686 1573 C4417DEB 		vpor	ymm10, ymm0, YMMWORD PTR [r14+rcx]	# tmp354, quadmask.56_36, MEM[base: _187, index: _79, offs
 3686      140E
 3687 1579 C4417D7F 		vmovdqa	YMMWORD PTR [r14+rcx], ymm10	# MEM[base: _187, index: _79, offset: 0B], tmp354
 3687      140E
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3688              		.loc 1 420 29 is_stmt 1 view .LVU1236
 3689              	.LVL179:
 421:sieve_extend.c ****     }
 3690              		.loc 1 421 9 view .LVU1237
 3691 157f 4901D6   		add	r14, rdx	# ivtmp.256, tmp201
 3692              	# sieve_extend.c:421:         *index_ptr |= mask; index_ptr+=step;
 421:sieve_extend.c ****     }
 3693              		.loc 1 421 20 is_stmt 0 view .LVU1238
 3694 1582 C4417DEB 		vpor	ymm11, ymm0, YMMWORD PTR [r8+rcx*4]	# tmp355, quadmask.56_36, MEM[base: index_ptr_128, index:
 3694      1C88
 3695 1588 C4417D7F 		vmovdqa	YMMWORD PTR [r8+rcx*4], ymm11	# MEM[base: index_ptr_128, index: _79, step: 4, offset: 0B],
 3695      1C88
 421:sieve_extend.c ****     }
 3696              		.loc 1 421 29 is_stmt 1 view .LVU1239
 3697              	.LVL180:
 421:sieve_extend.c ****     }
 3698              		.loc 1 421 29 is_stmt 0 view .LVU1240
GAS LISTING /tmp/cclewcPz.s 			page 107


 3699 158e 4901D0   		add	r8, rdx	# index_ptr, tmp201
 3700              	.LVL181:
 416:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3701              		.loc 1 416 11 is_stmt 1 view .LVU1241
 3702 1591 4D39C3   		cmp	r11, r8	# fast_loop_ptr, index_ptr
 3703 1594 0F869600 		jbe	.L315	#,
 3703      0000
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3704              		.loc 1 417 9 view .LVU1242
 3705              	# sieve_extend.c:417:         *index_ptr |= mask; index_ptr+=step;
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3706              		.loc 1 417 20 is_stmt 0 view .LVU1243
 3707 159a C4417DEB 		vpor	ymm12, ymm0, YMMWORD PTR [r8]	# tmp357, quadmask.56_36, MEM[base: index_ptr_128, offset: 0B]
 3707      20
 3708 159f C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm12	# MEM[base: index_ptr_128, offset: 0B], tmp357
 3708      20
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3709              		.loc 1 417 29 is_stmt 1 view .LVU1244
 3710              	.LVL182:
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3711              		.loc 1 418 9 view .LVU1245
 3712              	# sieve_extend.c:418:         *index_ptr |= mask; index_ptr+=step;
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3713              		.loc 1 418 20 is_stmt 0 view .LVU1246
 3714 15a4 C4417DEB 		vpor	ymm13, ymm0, YMMWORD PTR [r8+rcx]	# tmp358, quadmask.56_36, MEM[base: index_ptr_128, index: _
 3714      2C08
 3715 15aa C4417D7F 		vmovdqa	YMMWORD PTR [r8+rcx], ymm13	# MEM[base: index_ptr_128, index: _79, offset: 0B], tmp358
 3715      2C08
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3716              		.loc 1 418 29 is_stmt 1 view .LVU1247
 3717              	.LVL183:
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3718              		.loc 1 419 9 view .LVU1248
 3719              	# sieve_extend.c:419:         *index_ptr |= mask; index_ptr+=step;
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3720              		.loc 1 419 20 is_stmt 0 view .LVU1249
 3721 15b0 C4417DEB 		vpor	ymm14, ymm0, YMMWORD PTR [r14]	# tmp359, quadmask.56_36, MEM[base: _187, offset: 0B]
 3721      36
 3722 15b5 C4417D7F 		vmovdqa	YMMWORD PTR [r14], ymm14	# MEM[base: _187, offset: 0B], tmp359
 3722      36
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3723              		.loc 1 419 29 is_stmt 1 view .LVU1250
 3724              	.LVL184:
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3725              		.loc 1 420 9 view .LVU1251
 3726              	# sieve_extend.c:420:         *index_ptr |= mask; index_ptr+=step;
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3727              		.loc 1 420 20 is_stmt 0 view .LVU1252
 3728 15ba C4417DEB 		vpor	ymm15, ymm0, YMMWORD PTR [r14+rcx]	# tmp360, quadmask.56_36, MEM[base: _187, index: _79, offs
 3728      3C0E
 3729 15c0 C4417D7F 		vmovdqa	YMMWORD PTR [r14+rcx], ymm15	# MEM[base: _187, index: _79, offset: 0B], tmp360
 3729      3C0E
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3730              		.loc 1 420 29 is_stmt 1 view .LVU1253
 3731              	.LVL185:
 421:sieve_extend.c ****     }
 3732              		.loc 1 421 9 view .LVU1254
GAS LISTING /tmp/cclewcPz.s 			page 108


 3733 15c6 4901D6   		add	r14, rdx	# ivtmp.256, tmp201
 3734              	# sieve_extend.c:421:         *index_ptr |= mask; index_ptr+=step;
 421:sieve_extend.c ****     }
 3735              		.loc 1 421 20 is_stmt 0 view .LVU1255
 3736 15c9 C4C17DEB 		vpor	ymm1, ymm0, YMMWORD PTR [r8+rcx*4]	# tmp361, quadmask.56_36, MEM[base: index_ptr_128, index: 
 3736      0C88
 3737 15cf C4C17D7F 		vmovdqa	YMMWORD PTR [r8+rcx*4], ymm1	# MEM[base: index_ptr_128, index: _79, step: 4, offset: 0B], 
 3737      0C88
 421:sieve_extend.c ****     }
 3738              		.loc 1 421 29 is_stmt 1 view .LVU1256
 3739              	.LVL186:
 421:sieve_extend.c ****     }
 3740              		.loc 1 421 29 is_stmt 0 view .LVU1257
 3741 15d5 4901D0   		add	r8, rdx	# index_ptr, tmp201
 3742              	.LVL187:
 416:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3743              		.loc 1 416 11 is_stmt 1 view .LVU1258
 3744 15d8 4D39C3   		cmp	r11, r8	# fast_loop_ptr, index_ptr
 3745 15db 7653     		jbe	.L315	#,
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3746              		.loc 1 417 9 view .LVU1259
 3747              	# sieve_extend.c:417:         *index_ptr |= mask; index_ptr+=step;
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3748              		.loc 1 417 20 is_stmt 0 view .LVU1260
 3749 15dd C4C17DEB 		vpor	ymm3, ymm0, YMMWORD PTR [r8]	# tmp363, quadmask.56_36, MEM[base: index_ptr_128, offset: 0B]
 3749      18
 3750 15e2 C4C17D7F 		vmovdqa	YMMWORD PTR [r8], ymm3	# MEM[base: index_ptr_128, offset: 0B], tmp363
 3750      18
 417:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3751              		.loc 1 417 29 is_stmt 1 view .LVU1261
 3752              	.LVL188:
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3753              		.loc 1 418 9 view .LVU1262
 3754              	# sieve_extend.c:418:         *index_ptr |= mask; index_ptr+=step;
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3755              		.loc 1 418 20 is_stmt 0 view .LVU1263
 3756 15e7 C4C17DEB 		vpor	ymm4, ymm0, YMMWORD PTR [r8+rcx]	# tmp364, quadmask.56_36, MEM[base: index_ptr_128, index: _7
 3756      2408
 3757 15ed C4C17D7F 		vmovdqa	YMMWORD PTR [r8+rcx], ymm4	# MEM[base: index_ptr_128, index: _79, offset: 0B], tmp364
 3757      2408
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3758              		.loc 1 418 29 is_stmt 1 view .LVU1264
 3759              	.LVL189:
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3760              		.loc 1 419 9 view .LVU1265
 3761              	# sieve_extend.c:419:         *index_ptr |= mask; index_ptr+=step;
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3762              		.loc 1 419 20 is_stmt 0 view .LVU1266
 3763 15f3 C4C17DEB 		vpor	ymm5, ymm0, YMMWORD PTR [r14]	# tmp365, quadmask.56_36, MEM[base: _187, offset: 0B]
 3763      2E
 3764 15f8 C4C17D7F 		vmovdqa	YMMWORD PTR [r14], ymm5	# MEM[base: _187, offset: 0B], tmp365
 3764      2E
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3765              		.loc 1 419 29 is_stmt 1 view .LVU1267
 3766              	.LVL190:
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3767              		.loc 1 420 9 view .LVU1268
GAS LISTING /tmp/cclewcPz.s 			page 109


 3768              	# sieve_extend.c:420:         *index_ptr |= mask; index_ptr+=step;
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3769              		.loc 1 420 20 is_stmt 0 view .LVU1269
 3770 15fd C4C17DEB 		vpor	ymm6, ymm0, YMMWORD PTR [r14+rcx]	# tmp366, quadmask.56_36, MEM[base: _187, index: _79, offse
 3770      340E
 3771 1603 C4C17D7F 		vmovdqa	YMMWORD PTR [r14+rcx], ymm6	# MEM[base: _187, index: _79, offset: 0B], tmp366
 3771      340E
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3772              		.loc 1 420 29 is_stmt 1 view .LVU1270
 3773              	.LVL191:
 421:sieve_extend.c ****     }
 3774              		.loc 1 421 9 view .LVU1271
 3775 1609 4901D6   		add	r14, rdx	# ivtmp.256, tmp201
 3776              	# sieve_extend.c:421:         *index_ptr |= mask; index_ptr+=step;
 421:sieve_extend.c ****     }
 3777              		.loc 1 421 20 is_stmt 0 view .LVU1272
 3778 160c C4C17DEB 		vpor	ymm7, ymm0, YMMWORD PTR [r8+rcx*4]	# tmp367, quadmask.56_36, MEM[base: index_ptr_128, index: 
 3778      3C88
 3779 1612 C4C17D7F 		vmovdqa	YMMWORD PTR [r8+rcx*4], ymm7	# MEM[base: index_ptr_128, index: _79, step: 4, offset: 0B], 
 3779      3C88
 421:sieve_extend.c ****     }
 3780              		.loc 1 421 29 is_stmt 1 view .LVU1273
 3781              	.LVL192:
 421:sieve_extend.c ****     }
 3782              		.loc 1 421 29 is_stmt 0 view .LVU1274
 3783 1618 4901D0   		add	r8, rdx	# index_ptr, tmp201
 3784              	.LVL193:
 416:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3785              		.loc 1 416 11 is_stmt 1 view .LVU1275
 3786 161b 4D39C3   		cmp	r11, r8	# fast_loop_ptr, index_ptr
 3787 161e 0F87E8FE 		ja	.L169	#,
 3787      FFFF
 3788 1624 66662E0F 		.p2align 4
 3788      1F840000 
 3788      00000090 
 3789              		.p2align 3
 3790              	.L315:
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3791              		.loc 1 425 11 view .LVU1276
 3792 1630 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 3793 1633 0F82A700 		jb	.L178	#,
 3793      0000
 3794              	.L170:
 426:sieve_extend.c ****     }
 3795              		.loc 1 426 9 view .LVU1277
 3796              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3797              		.loc 1 426 20 is_stmt 0 view .LVU1278
 3798 1639 C4417DEB 		vpor	ymm8, ymm0, YMMWORD PTR [r8]	# tmp229, quadmask.56_36, MEM[base: index_ptr_125, offset: 0B]
 3798      00
 3799 163e C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm8	# MEM[base: index_ptr_125, offset: 0B], tmp229
 3799      00
 426:sieve_extend.c ****     }
 3800              		.loc 1 426 29 is_stmt 1 view .LVU1279
 3801              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3802              		.loc 1 426 38 is_stmt 0 view .LVU1280
GAS LISTING /tmp/cclewcPz.s 			page 110


 3803 1643 4901C8   		add	r8, rcx	# index_ptr, _79
 3804              	.LVL194:
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3805              		.loc 1 425 11 is_stmt 1 view .LVU1281
 3806 1646 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 3807 1649 0F829100 		jb	.L178	#,
 3807      0000
 426:sieve_extend.c ****     }
 3808              		.loc 1 426 9 view .LVU1282
 3809              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3810              		.loc 1 426 20 is_stmt 0 view .LVU1283
 3811 164f C4417DEB 		vpor	ymm9, ymm0, YMMWORD PTR [r8]	# tmp338, quadmask.56_36, MEM[base: index_ptr_125, offset: 0B]
 3811      08
 3812 1654 C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm9	# MEM[base: index_ptr_125, offset: 0B], tmp338
 3812      08
 426:sieve_extend.c ****     }
 3813              		.loc 1 426 29 is_stmt 1 view .LVU1284
 3814              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3815              		.loc 1 426 38 is_stmt 0 view .LVU1285
 3816 1659 4901C8   		add	r8, rcx	# index_ptr, _79
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3817              		.loc 1 425 11 is_stmt 1 view .LVU1286
 3818 165c 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 3819 165f 727F     		jb	.L178	#,
 426:sieve_extend.c ****     }
 3820              		.loc 1 426 9 view .LVU1287
 3821              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3822              		.loc 1 426 20 is_stmt 0 view .LVU1288
 3823 1661 C4417DEB 		vpor	ymm10, ymm0, YMMWORD PTR [r8]	# tmp340, quadmask.56_36, MEM[base: index_ptr_125, offset: 0B]
 3823      10
 3824 1666 C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm10	# MEM[base: index_ptr_125, offset: 0B], tmp340
 3824      10
 426:sieve_extend.c ****     }
 3825              		.loc 1 426 29 is_stmt 1 view .LVU1289
 3826              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3827              		.loc 1 426 38 is_stmt 0 view .LVU1290
 3828 166b 4901C8   		add	r8, rcx	# index_ptr, _79
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3829              		.loc 1 425 11 is_stmt 1 view .LVU1291
 3830 166e 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 3831 1671 726D     		jb	.L178	#,
 426:sieve_extend.c ****     }
 3832              		.loc 1 426 9 view .LVU1292
 3833              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3834              		.loc 1 426 20 is_stmt 0 view .LVU1293
 3835 1673 C4417DEB 		vpor	ymm11, ymm0, YMMWORD PTR [r8]	# tmp342, quadmask.56_36, MEM[base: index_ptr_125, offset: 0B]
 3835      18
 3836 1678 C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm11	# MEM[base: index_ptr_125, offset: 0B], tmp342
 3836      18
 426:sieve_extend.c ****     }
 3837              		.loc 1 426 29 is_stmt 1 view .LVU1294
 3838              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
GAS LISTING /tmp/cclewcPz.s 			page 111


 426:sieve_extend.c ****     }
 3839              		.loc 1 426 38 is_stmt 0 view .LVU1295
 3840 167d 4901C8   		add	r8, rcx	# index_ptr, _79
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3841              		.loc 1 425 11 is_stmt 1 view .LVU1296
 3842 1680 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 3843 1683 725B     		jb	.L178	#,
 426:sieve_extend.c ****     }
 3844              		.loc 1 426 9 view .LVU1297
 3845              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3846              		.loc 1 426 20 is_stmt 0 view .LVU1298
 3847 1685 C4417DEB 		vpor	ymm12, ymm0, YMMWORD PTR [r8]	# tmp344, quadmask.56_36, MEM[base: index_ptr_125, offset: 0B]
 3847      20
 3848 168a C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm12	# MEM[base: index_ptr_125, offset: 0B], tmp344
 3848      20
 426:sieve_extend.c ****     }
 3849              		.loc 1 426 29 is_stmt 1 view .LVU1299
 3850              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3851              		.loc 1 426 38 is_stmt 0 view .LVU1300
 3852 168f 4901C8   		add	r8, rcx	# index_ptr, _79
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3853              		.loc 1 425 11 is_stmt 1 view .LVU1301
 3854 1692 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 3855 1695 7249     		jb	.L178	#,
 426:sieve_extend.c ****     }
 3856              		.loc 1 426 9 view .LVU1302
 3857              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3858              		.loc 1 426 20 is_stmt 0 view .LVU1303
 3859 1697 C4417DEB 		vpor	ymm13, ymm0, YMMWORD PTR [r8]	# tmp346, quadmask.56_36, MEM[base: index_ptr_125, offset: 0B]
 3859      28
 3860 169c C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm13	# MEM[base: index_ptr_125, offset: 0B], tmp346
 3860      28
 426:sieve_extend.c ****     }
 3861              		.loc 1 426 29 is_stmt 1 view .LVU1304
 3862              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3863              		.loc 1 426 38 is_stmt 0 view .LVU1305
 3864 16a1 4901C8   		add	r8, rcx	# index_ptr, _79
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3865              		.loc 1 425 11 is_stmt 1 view .LVU1306
 3866 16a4 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 3867 16a7 7237     		jb	.L178	#,
 426:sieve_extend.c ****     }
 3868              		.loc 1 426 9 view .LVU1307
 3869              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3870              		.loc 1 426 20 is_stmt 0 view .LVU1308
 3871 16a9 C4417DEB 		vpor	ymm14, ymm0, YMMWORD PTR [r8]	# tmp348, quadmask.56_36, MEM[base: index_ptr_125, offset: 0B]
 3871      30
 3872 16ae C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm14	# MEM[base: index_ptr_125, offset: 0B], tmp348
 3872      30
 426:sieve_extend.c ****     }
 3873              		.loc 1 426 29 is_stmt 1 view .LVU1309
 3874              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
GAS LISTING /tmp/cclewcPz.s 			page 112


 426:sieve_extend.c ****     }
 3875              		.loc 1 426 38 is_stmt 0 view .LVU1310
 3876 16b3 4901C8   		add	r8, rcx	# index_ptr, _79
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3877              		.loc 1 425 11 is_stmt 1 view .LVU1311
 3878 16b6 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 3879 16b9 7225     		jb	.L178	#,
 426:sieve_extend.c ****     }
 3880              		.loc 1 426 9 view .LVU1312
 3881              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3882              		.loc 1 426 20 is_stmt 0 view .LVU1313
 3883 16bb C4417DEB 		vpor	ymm15, ymm0, YMMWORD PTR [r8]	# tmp350, quadmask.56_36, MEM[base: index_ptr_125, offset: 0B]
 3883      38
 3884 16c0 C4417D7F 		vmovdqa	YMMWORD PTR [r8], ymm15	# MEM[base: index_ptr_125, offset: 0B], tmp350
 3884      38
 426:sieve_extend.c ****     }
 3885              		.loc 1 426 29 is_stmt 1 view .LVU1314
 3886              	.LVL195:
 3887              	# sieve_extend.c:426:         *index_ptr |= mask; index_ptr+=step;
 426:sieve_extend.c ****     }
 3888              		.loc 1 426 38 is_stmt 0 view .LVU1315
 3889 16c5 4901C8   		add	r8, rcx	# index_ptr, _79
 3890              	.LVL196:
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3891              		.loc 1 425 11 is_stmt 1 view .LVU1316
 3892 16c8 4D39C1   		cmp	r9, r8	# range_stop_ptr, index_ptr
 3893 16cb 0F8368FF 		jnb	.L170	#,
 3893      FFFF
 3894              	.LVL197:
 3895 16d1 66662E0F 		.p2align 4
 3895      1F840000 
 3895      0000000F 
 3895      1F4000
 3896              		.p2align 3
 3897              	.L178:
 425:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 3898              		.loc 1 425 11 is_stmt 0 view .LVU1317
 3899              	.LBE325:
 3900              	.LBE328:
 3901              	.LBE329:
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 3902              		.loc 1 489 41 is_stmt 1 view .LVU1318
 3903              	# sieve_extend.c:489:     for (counter_t index = range_start; index < range_stop_unique;) {
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 3904              		.loc 1 489 5 is_stmt 0 view .LVU1319
 3905 16e0 4939F2   		cmp	r10, rsi	# range_stop_unique, range_start
 3906 16e3 0F87F7FC 		ja	.L171	#,
 3906      FFFF
 3907 16e9 E9A2FCFF 		jmp	.L316	#
 3907      FF
 3908              	.LVL198:
 3909              	.L162:
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 3910              		.loc 1 489 5 view .LVU1320
 3911              	.LBE330:
 3912              	.LBB331:
GAS LISTING /tmp/cclewcPz.s 			page 113


 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3913              		.loc 1 472 49 is_stmt 1 view .LVU1321
 3914              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3915              		.loc 1 472 13 is_stmt 0 view .LVU1322
 3916 16ee 4839CE   		cmp	rsi, rcx	# range_start, range_stop
 3917              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3918              		.loc 1 473 52 view .LVU1323
 3919 16f1 41B90100 		mov	r9d, 1	# tmp183,
 3919      0000
 3920              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3921              		.loc 1 472 13 view .LVU1324
 3922 16f7 0F8796FC 		ja	.L160	#,
 3922      FFFF
 3923              	.LVL199:
 3924              	.L164:
 473:sieve_extend.c ****             return;                 
 3925              		.loc 1 473 17 is_stmt 1 discriminator 3 view .LVU1325
 3926              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3927              		.loc 1 473 49 is_stmt 0 discriminator 3 view .LVU1326
 3928 16fd 4989F2   		mov	r10, rsi	# tmp179, range_start
 3929              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3930              		.loc 1 473 52 discriminator 3 view .LVU1327
 3931 1700 C4C2C9F7 		shlx	rdx, r9, rsi	# tmp182, tmp183, range_start
 3931      D1
 3932              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3933              		.loc 1 473 49 discriminator 3 view .LVU1328
 3934 1705 49C1EA06 		shr	r10, 6	# tmp179,
 3935              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3936              		.loc 1 472 76 discriminator 3 view .LVU1329
 3937 1709 4801DE   		add	rsi, rbx	# range_start, step
 3938              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3939              		.loc 1 473 49 discriminator 3 view .LVU1330
 3940 170c 4A0914D7 		or	QWORD PTR [rdi+r10*8], rdx	# *_14, tmp182
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3941              		.loc 1 472 70 is_stmt 1 discriminator 3 view .LVU1331
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3942              		.loc 1 472 49 discriminator 3 view .LVU1332
 3943              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3944              		.loc 1 472 13 is_stmt 0 discriminator 3 view .LVU1333
 3945 1710 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 3946 1713 0F827AFC 		jb	.L160	#,
 3946      FFFF
 473:sieve_extend.c ****             return;                 
 3947              		.loc 1 473 17 is_stmt 1 view .LVU1334
 3948              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3949              		.loc 1 473 49 is_stmt 0 view .LVU1335
 3950 1719 4989F7   		mov	r15, rsi	# tmp260, range_start
GAS LISTING /tmp/cclewcPz.s 			page 114


 3951              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3952              		.loc 1 473 52 view .LVU1336
 3953 171c C442C9F7 		shlx	r12, r9, rsi	# tmp263, tmp183, range_start
 3953      E1
 3954              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3955              		.loc 1 473 49 view .LVU1337
 3956 1721 49C1EF06 		shr	r15, 6	# tmp260,
 3957              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3958              		.loc 1 472 76 view .LVU1338
 3959 1725 4801DE   		add	rsi, rbx	# range_start, step
 3960              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3961              		.loc 1 473 49 view .LVU1339
 3962 1728 4E0924FF 		or	QWORD PTR [rdi+r15*8], r12	# *_14, tmp263
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3963              		.loc 1 472 70 is_stmt 1 view .LVU1340
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3964              		.loc 1 472 49 view .LVU1341
 3965              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3966              		.loc 1 472 13 is_stmt 0 view .LVU1342
 3967 172c 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 3968 172f 0F825EFC 		jb	.L160	#,
 3968      FFFF
 473:sieve_extend.c ****             return;                 
 3969              		.loc 1 473 17 is_stmt 1 view .LVU1343
 3970              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3971              		.loc 1 473 49 is_stmt 0 view .LVU1344
 3972 1735 4989F5   		mov	r13, rsi	# tmp265, range_start
 3973              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3974              		.loc 1 473 52 view .LVU1345
 3975 1738 C4C2C9F7 		shlx	rax, r9, rsi	# tmp268, tmp183, range_start
 3975      C1
 3976              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3977              		.loc 1 473 49 view .LVU1346
 3978 173d 49C1ED06 		shr	r13, 6	# tmp265,
 3979              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3980              		.loc 1 472 76 view .LVU1347
 3981 1741 4801DE   		add	rsi, rbx	# range_start, step
 3982              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3983              		.loc 1 473 49 view .LVU1348
 3984 1744 4A0904EF 		or	QWORD PTR [rdi+r13*8], rax	# *_14, tmp268
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3985              		.loc 1 472 70 is_stmt 1 view .LVU1349
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3986              		.loc 1 472 49 view .LVU1350
 3987              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3988              		.loc 1 472 13 is_stmt 0 view .LVU1351
GAS LISTING /tmp/cclewcPz.s 			page 115


 3989 1748 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 3990 174b 0F8242FC 		jb	.L160	#,
 3990      FFFF
 473:sieve_extend.c ****             return;                 
 3991              		.loc 1 473 17 is_stmt 1 view .LVU1352
 3992              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3993              		.loc 1 473 49 is_stmt 0 view .LVU1353
 3994 1751 4989F6   		mov	r14, rsi	# tmp270, range_start
 3995              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3996              		.loc 1 473 52 view .LVU1354
 3997 1754 C442C9F7 		shlx	r8, r9, rsi	# tmp273, tmp183, range_start
 3997      C1
 3998              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3999              		.loc 1 473 49 view .LVU1355
 4000 1759 49C1EE06 		shr	r14, 6	# tmp270,
 4001              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4002              		.loc 1 472 76 view .LVU1356
 4003 175d 4801DE   		add	rsi, rbx	# range_start, step
 4004              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 4005              		.loc 1 473 49 view .LVU1357
 4006 1760 4E0904F7 		or	QWORD PTR [rdi+r14*8], r8	# *_14, tmp273
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4007              		.loc 1 472 70 is_stmt 1 view .LVU1358
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4008              		.loc 1 472 49 view .LVU1359
 4009              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4010              		.loc 1 472 13 is_stmt 0 view .LVU1360
 4011 1764 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 4012 1767 0F8226FC 		jb	.L160	#,
 4012      FFFF
 473:sieve_extend.c ****             return;                 
 4013              		.loc 1 473 17 is_stmt 1 view .LVU1361
 4014              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 4015              		.loc 1 473 49 is_stmt 0 view .LVU1362
 4016 176d 4989F3   		mov	r11, rsi	# tmp275, range_start
 4017              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 4018              		.loc 1 473 52 view .LVU1363
 4019 1770 C442C9F7 		shlx	r10, r9, rsi	# tmp278, tmp183, range_start
 4019      D1
 4020              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 4021              		.loc 1 473 49 view .LVU1364
 4022 1775 49C1EB06 		shr	r11, 6	# tmp275,
 4023              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4024              		.loc 1 472 76 view .LVU1365
 4025 1779 4801DE   		add	rsi, rbx	# range_start, step
 4026              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
GAS LISTING /tmp/cclewcPz.s 			page 116


 4027              		.loc 1 473 49 view .LVU1366
 4028 177c 4E0914DF 		or	QWORD PTR [rdi+r11*8], r10	# *_14, tmp278
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4029              		.loc 1 472 70 is_stmt 1 view .LVU1367
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4030              		.loc 1 472 49 view .LVU1368
 4031              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4032              		.loc 1 472 13 is_stmt 0 view .LVU1369
 4033 1780 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 4034 1783 0F820AFC 		jb	.L160	#,
 4034      FFFF
 473:sieve_extend.c ****             return;                 
 4035              		.loc 1 473 17 is_stmt 1 view .LVU1370
 4036              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 4037              		.loc 1 473 49 is_stmt 0 view .LVU1371
 4038 1789 4889F2   		mov	rdx, rsi	# tmp280, range_start
 4039              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 4040              		.loc 1 473 52 view .LVU1372
 4041 178c C442C9F7 		shlx	r15, r9, rsi	# tmp283, tmp183, range_start
 4041      F9
 4042              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 4043              		.loc 1 473 49 view .LVU1373
 4044 1791 48C1EA06 		shr	rdx, 6	# tmp280,
 4045              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4046              		.loc 1 472 76 view .LVU1374
 4047 1795 4801DE   		add	rsi, rbx	# range_start, step
 4048              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 4049              		.loc 1 473 49 view .LVU1375
 4050 1798 4C093CD7 		or	QWORD PTR [rdi+rdx*8], r15	# *_14, tmp283
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4051              		.loc 1 472 70 is_stmt 1 view .LVU1376
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4052              		.loc 1 472 49 view .LVU1377
 4053              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4054              		.loc 1 472 13 is_stmt 0 view .LVU1378
 4055 179c 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 4056 179f 0F82EEFB 		jb	.L160	#,
 4056      FFFF
 473:sieve_extend.c ****             return;                 
 4057              		.loc 1 473 17 is_stmt 1 view .LVU1379
 4058              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 4059              		.loc 1 473 49 is_stmt 0 view .LVU1380
 4060 17a5 4989F4   		mov	r12, rsi	# tmp285, range_start
 4061              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 4062              		.loc 1 473 52 view .LVU1381
 4063 17a8 C442C9F7 		shlx	r13, r9, rsi	# tmp288, tmp183, range_start
 4063      E9
 4064              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
GAS LISTING /tmp/cclewcPz.s 			page 117


 473:sieve_extend.c ****             return;                 
 4065              		.loc 1 473 49 view .LVU1382
 4066 17ad 49C1EC06 		shr	r12, 6	# tmp285,
 4067              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4068              		.loc 1 472 76 view .LVU1383
 4069 17b1 4801DE   		add	rsi, rbx	# range_start, step
 4070              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 4071              		.loc 1 473 49 view .LVU1384
 4072 17b4 4E092CE7 		or	QWORD PTR [rdi+r12*8], r13	# *_14, tmp288
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4073              		.loc 1 472 70 is_stmt 1 view .LVU1385
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4074              		.loc 1 472 49 view .LVU1386
 4075              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4076              		.loc 1 472 13 is_stmt 0 view .LVU1387
 4077 17b8 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 4078 17bb 0F82D2FB 		jb	.L160	#,
 4078      FFFF
 473:sieve_extend.c ****             return;                 
 4079              		.loc 1 473 17 is_stmt 1 view .LVU1388
 4080              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 4081              		.loc 1 473 49 is_stmt 0 view .LVU1389
 4082 17c1 4889F0   		mov	rax, rsi	# tmp290, range_start
 4083              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 4084              		.loc 1 473 52 view .LVU1390
 4085 17c4 C442C9F7 		shlx	r14, r9, rsi	# tmp293, tmp183, range_start
 4085      F1
 4086              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 4087              		.loc 1 473 49 view .LVU1391
 4088 17c9 48C1E806 		shr	rax, 6	# tmp290,
 4089              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4090              		.loc 1 472 76 view .LVU1392
 4091 17cd 4801DE   		add	rsi, rbx	# range_start, step
 4092              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 4093              		.loc 1 473 49 view .LVU1393
 4094 17d0 4C0934C7 		or	QWORD PTR [rdi+rax*8], r14	# *_14, tmp293
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4095              		.loc 1 472 70 is_stmt 1 view .LVU1394
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4096              		.loc 1 472 49 view .LVU1395
 4097              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4098              		.loc 1 472 13 is_stmt 0 view .LVU1396
 4099 17d4 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 4100 17d7 0F8320FF 		jnb	.L164	#,
 4100      FFFF
 4101 17dd E9B1FBFF 		jmp	.L160	#
 4101      FF
 4102              	.LVL200:
GAS LISTING /tmp/cclewcPz.s 			page 118


 4103              	.L318:
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 4104              		.loc 1 472 13 view .LVU1397
 4105              	.LBE331:
 4106              	# sieve_extend.c:509: }
 509:sieve_extend.c **** 
 4107              		.loc 1 509 1 view .LVU1398
 4108 17e2 E8000000 		call	__stack_chk_fail@PLT	#
 4108      00
 4109              	.LVL201:
 509:sieve_extend.c **** 
 4110              		.loc 1 509 1 view .LVU1399
 4111              		.cfi_endproc
 4112              	.LFE67:
 4114 17e7 660F1F84 		.p2align 4
 4114      00000000 
 4114      00
 4116              	extendSieve_aligned:
 4117              	.LVL202:
 4118              	.LFB69:
 545:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using aligned (%ju copies)\n"
 4119              		.loc 1 545 140 is_stmt 1 view -0
 4120              		.cfi_startproc
 546:sieve_extend.c **** 
 4121              		.loc 1 546 5 view .LVU1401
 548:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 4122              		.loc 1 548 5 view .LVU1402
 4123              	# sieve_extend.c:545: static void extendSieve_aligned(bitword_t* bitarray, const counter_t source_s
 545:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using aligned (%ju copies)\n"
 4124              		.loc 1 545 140 is_stmt 0 view .LVU1403
 4125 17f0 55       		push	rbp	#
 4126              		.cfi_def_cfa_offset 16
 4127              		.cfi_offset 6, -16
 4128 17f1 4889E5   		mov	rbp, rsp	#,
 4129              		.cfi_def_cfa_register 6
 4130 17f4 4157     		push	r15	#
 4131 17f6 4156     		push	r14	#
 4132 17f8 4155     		push	r13	#
 4133              		.cfi_offset 15, -24
 4134              		.cfi_offset 14, -32
 4135              		.cfi_offset 13, -40
 4136 17fa 4989FD   		mov	r13, rdi	# bitarray, tmp295
 4137 17fd 4154     		push	r12	#
 4138              		.cfi_offset 12, -48
 4139 17ff 4989D4   		mov	r12, rdx	# size, tmp297
 4140 1802 53       		push	rbx	#
 4141              		.cfi_offset 3, -56
 4142              	# sieve_extend.c:548:     const counter_t destination_stop_word = wordindex(destination_stop);
 548:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 4143              		.loc 1 548 21 view .LVU1404
 4144 1803 4889CB   		mov	rbx, rcx	# tmp298, tmp298
 4145              	# sieve_extend.c:549:     const counter_t copy_start = source_start + size;
 549:sieve_extend.c ****     counter_t source_word = wordindex(source_start);
 4146              		.loc 1 549 21 view .LVU1405
 4147 1806 488D0C16 		lea	rcx, [rsi+rdx]	# copy_start,
 4148              	.LVL203:
 4149              	# sieve_extend.c:545: static void extendSieve_aligned(bitword_t* bitarray, const counter_t source_s
GAS LISTING /tmp/cclewcPz.s 			page 119


 545:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using aligned (%ju copies)\n"
 4150              		.loc 1 545 140 view .LVU1406
 4151 180a 4883E4E0 		and	rsp, -32	#,
 4152              	# sieve_extend.c:551:     counter_t copy_word = wordindex(copy_start);
 551:sieve_extend.c ****     
 4153              		.loc 1 551 15 view .LVU1407
 4154 180e 4889C8   		mov	rax, rcx	# ivtmp.310, copy_start
 4155              	# sieve_extend.c:550:     counter_t source_word = wordindex(source_start);
 550:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
 4156              		.loc 1 550 15 view .LVU1408
 4157 1811 48C1EE06 		shr	rsi, 6	# source_start,
 4158              	.LVL204:
 4159              	# sieve_extend.c:545: static void extendSieve_aligned(bitword_t* bitarray, const counter_t source_s
 545:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using aligned (%ju copies)\n"
 4160              		.loc 1 545 140 view .LVU1409
 4161 1815 488D6424 		lea	rsp, -32[rsp]	#,
 4161      E0
 4162              	# sieve_extend.c:551:     counter_t copy_word = wordindex(copy_start);
 551:sieve_extend.c ****     
 4163              		.loc 1 551 15 view .LVU1410
 4164 181a 48C1E806 		shr	rax, 6	# ivtmp.310,
 4165              	# sieve_extend.c:553:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 553:sieve_extend.c **** 
 4166              		.loc 1 553 35 view .LVU1411
 4167 181e 488D3CF5 		lea	rdi, 0[0+rsi*8]	# _4,
 4167      00000000 
 4168              	.LVL205:
 4169              	# sieve_extend.c:548:     const counter_t destination_stop_word = wordindex(destination_stop);
 548:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 4170              		.loc 1 548 21 view .LVU1412
 4171 1826 48C1EB06 		shr	rbx, 6	# tmp298,
 4172              	.LVL206:
 549:sieve_extend.c ****     counter_t source_word = wordindex(source_start);
 4173              		.loc 1 549 5 is_stmt 1 view .LVU1413
 550:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
 4174              		.loc 1 550 5 view .LVU1414
 4175              	# sieve_extend.c:553:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 553:sieve_extend.c **** 
 4176              		.loc 1 553 35 is_stmt 0 view .LVU1415
 4177 182a 4D8D743D 		lea	r14, 0[r13+rdi]	# _5,
 4177      00
 4178              	# sieve_extend.c:550:     counter_t source_word = wordindex(source_start);
 550:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
 4179              		.loc 1 550 15 view .LVU1416
 4180 182f 48897424 		mov	QWORD PTR 8[rsp], rsi	# %sfp, source_word
 4180      08
 4181              	.LVL207:
 551:sieve_extend.c ****     
 4182              		.loc 1 551 5 is_stmt 1 view .LVU1417
 553:sieve_extend.c **** 
 4183              		.loc 1 553 5 view .LVU1418
 4184              	# sieve_extend.c:553:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 553:sieve_extend.c **** 
 4185              		.loc 1 553 52 is_stmt 0 view .LVU1419
 4186 1834 89CE     		mov	esi, ecx	# tmp183, copy_start
 4187              	.LVL208:
 4188              	# sieve_extend.c:555:     while (copy_word + size <= destination_stop_word) {
GAS LISTING /tmp/cclewcPz.s 			page 120


 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 4189              		.loc 1 555 22 view .LVU1420
 4190 1836 498D0C04 		lea	rcx, [r12+rax]	# ivtmp.310,
 4191              	.LVL209:
 4192              	# sieve_extend.c:553:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 553:sieve_extend.c **** 
 4193              		.loc 1 553 52 view .LVU1421
 4194 183a F7D6     		not	esi	# tmp183
 4195              	# sieve_extend.c:553:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 553:sieve_extend.c **** 
 4196              		.loc 1 553 35 view .LVU1422
 4197 183c 48893C24 		mov	QWORD PTR [rsp], rdi	# %sfp, _4
 4198              	# sieve_extend.c:553:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 553:sieve_extend.c **** 
 4199              		.loc 1 553 52 view .LVU1423
 4200 1840 48C7C2FF 		mov	rdx, -1	# tmp186,
 4200      FFFFFF
 4201              	.LVL210:
 553:sieve_extend.c **** 
 4202              		.loc 1 553 52 view .LVU1424
 4203 1847 C462CBF7 		shrx	r8, rdx, rsi	# tmp185, tmp186, tmp183
 4203      C2
 4204              	# sieve_extend.c:553:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 553:sieve_extend.c **** 
 4205              		.loc 1 553 49 view .LVU1425
 4206 184c C442B8F2 		andn	r9, r8, QWORD PTR [r14]	# tmp189, tmp185, *_5
 4206      0E
 4207              	# sieve_extend.c:553:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 553:sieve_extend.c **** 
 4208              		.loc 1 553 25 view .LVU1426
 4209 1851 4D894CC5 		mov	QWORD PTR 0[r13+rax*8], r9	# *_13, tmp189
 4209      00
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 4210              		.loc 1 555 5 is_stmt 1 view .LVU1427
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 4211              		.loc 1 555 11 view .LVU1428
 4212 1856 4839CB   		cmp	rbx, rcx	# destination_stop_word, ivtmp.310
 4213 1859 0F827101 		jb	.L320	#,
 4213      0000
 4214 185f 4C8D14C5 		lea	r10, 0[0+rax*8]	# _12,
 4214      00000000 
 4215 1867 488D04CD 		lea	rax, 0[0+rcx*8]	# tmp191,
 4215      00000000 
 4216              	.LVL211:
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 4217              		.loc 1 555 11 is_stmt 0 view .LVU1429
 4218 186f 4D01EA   		add	r10, r13	# tmp190, bitarray
 4219              	# sieve_extend.c:556:         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*
 556:sieve_extend.c ****         copy_word += size;
 4220              		.loc 1 556 9 view .LVU1430
 4221 1872 4E8D3CE5 		lea	r15, 0[0+r12*8]	# _15,
 4221      00000000 
 4222 187a 4929C2   		sub	r10, rax	# tmp190, tmp191
 4223 187d 4C895424 		mov	QWORD PTR 24[rsp], r10	# %sfp, tmp190
 4223      18
 4224              	.LVL212:
 4225              	.L321:
GAS LISTING /tmp/cclewcPz.s 			page 121


 556:sieve_extend.c ****         copy_word += size;
 4226              		.loc 1 556 9 is_stmt 1 view .LVU1431
 4227              	.LBB332:
 4228              	.LBI332:
 4229              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h"
   1:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* Copyright (C) 2004-2020 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    <https://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _BITS_STRING_FORTIFIED_H
  19:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #define _BITS_STRING_FORTIFIED_H 1
  20:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  21:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _STRING_H
  22:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** # error "Never use <bits/string_fortified.h> directly; include <string.h> instead."
  23:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  24:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  25:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  26:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __warndecl (__warn_memset_zero_len,
  27:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  28:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  29:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
 4230              		.loc 2 31 1 view .LVU1432
 4231              	.LBB333:
  32:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
  33:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
 4232              		.loc 2 34 3 view .LVU1433
 4233              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 4234              		.loc 2 34 10 is_stmt 0 view .LVU1434
 4235 1882 4C8B5C24 		mov	r11, QWORD PTR 24[rsp]	# _189, %sfp
 4235      18
 4236 1887 4C89FA   		mov	rdx, r15	#, _15
 4237 188a 48894C24 		mov	QWORD PTR 16[rsp], rcx	# %sfp, ivtmp.310
 4237      10
 4238 188f 4C89F6   		mov	rsi, r14	#, _5
 4239 1892 498D3CCB 		lea	rdi, [r11+rcx*8]	# tmp193,
 4240 1896 E8000000 		call	memcpy@PLT	#
 4240      00
 4241              	.LVL213:
 4242              		.loc 2 34 10 view .LVU1435
 4243              	.LBE333:
 4244              	.LBE332:
GAS LISTING /tmp/cclewcPz.s 			page 122


 557:sieve_extend.c ****     }
 4245              		.loc 1 557 9 is_stmt 1 view .LVU1436
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 4246              		.loc 1 555 11 view .LVU1437
 4247 189b 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.310, %sfp
 4247      10
 4248 18a0 4A8D0C20 		lea	rcx, [rax+r12]	# ivtmp.310,
 4249 18a4 4839CB   		cmp	rbx, rcx	# destination_stop_word, ivtmp.310
 4250 18a7 0F822301 		jb	.L320	#,
 4250      0000
 556:sieve_extend.c ****         copy_word += size;
 4251              		.loc 1 556 9 view .LVU1438
 4252              	.LVL214:
 4253              	.LBB341:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 4254              		.loc 2 31 1 view .LVU1439
 4255              	.LBB334:
 4256              		.loc 2 34 3 view .LVU1440
 4257              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 4258              		.loc 2 34 10 is_stmt 0 view .LVU1441
 4259 18ad 488B7C24 		mov	rdi, QWORD PTR 24[rsp]	# _189, %sfp
 4259      18
 4260 18b2 4C89F6   		mov	rsi, r14	#, _5
 4261 18b5 48894C24 		mov	QWORD PTR 16[rsp], rcx	# %sfp, ivtmp.310
 4261      10
 4262              	.LVL215:
 4263              		.loc 2 34 10 view .LVU1442
 4264 18ba 4C89FA   		mov	rdx, r15	#, _15
 4265 18bd 488D3CCF 		lea	rdi, [rdi+rcx*8]	# tmp276,
 4266 18c1 E8000000 		call	memcpy@PLT	#
 4266      00
 4267              	.LVL216:
 4268              		.loc 2 34 10 view .LVU1443
 4269              	.LBE334:
 4270              	.LBE341:
 557:sieve_extend.c ****     }
 4271              		.loc 1 557 9 is_stmt 1 view .LVU1444
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 4272              		.loc 1 555 11 view .LVU1445
 4273 18c6 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.310, %sfp
 4273      10
 4274 18cb 4A8D3420 		lea	rsi, [rax+r12]	# ivtmp.310,
 4275 18cf 4839F3   		cmp	rbx, rsi	# destination_stop_word, ivtmp.310
 4276 18d2 0F82F800 		jb	.L320	#,
 4276      0000
 556:sieve_extend.c ****         copy_word += size;
 4277              		.loc 1 556 9 view .LVU1446
 4278              	.LVL217:
 4279              	.LBB342:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 4280              		.loc 2 31 1 view .LVU1447
 4281              	.LBB335:
 4282              		.loc 2 34 3 view .LVU1448
 4283              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 4284              		.loc 2 34 10 is_stmt 0 view .LVU1449
 4285 18d8 488B5424 		mov	rdx, QWORD PTR 24[rsp]	# _189, %sfp
 4285      18
GAS LISTING /tmp/cclewcPz.s 			page 123


 4286 18dd 48897424 		mov	QWORD PTR 16[rsp], rsi	# %sfp, ivtmp.310
 4286      10
 4287 18e2 488D3CF2 		lea	rdi, [rdx+rsi*8]	# tmp279,
 4288 18e6 4C89FA   		mov	rdx, r15	#, _15
 4289 18e9 4C89F6   		mov	rsi, r14	#, _5
 4290 18ec E8000000 		call	memcpy@PLT	#
 4290      00
 4291              	.LVL218:
 4292              		.loc 2 34 10 view .LVU1450
 4293              	.LBE335:
 4294              	.LBE342:
 557:sieve_extend.c ****     }
 4295              		.loc 1 557 9 is_stmt 1 view .LVU1451
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 4296              		.loc 1 555 11 view .LVU1452
 4297 18f1 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.310, %sfp
 4297      10
 4298 18f6 4E8D0420 		lea	r8, [rax+r12]	# ivtmp.310,
 4299 18fa 4C39C3   		cmp	rbx, r8	# destination_stop_word, ivtmp.310
 4300 18fd 0F82CD00 		jb	.L320	#,
 4300      0000
 556:sieve_extend.c ****         copy_word += size;
 4301              		.loc 1 556 9 view .LVU1453
 4302              	.LVL219:
 4303              	.LBB343:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 4304              		.loc 2 31 1 view .LVU1454
 4305              	.LBB336:
 4306              		.loc 2 34 3 view .LVU1455
 4307              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 4308              		.loc 2 34 10 is_stmt 0 view .LVU1456
 4309 1903 4C8B4C24 		mov	r9, QWORD PTR 24[rsp]	# _189, %sfp
 4309      18
 4310 1908 4C89FA   		mov	rdx, r15	#, _15
 4311 190b 4C894424 		mov	QWORD PTR 16[rsp], r8	# %sfp, ivtmp.310
 4311      10
 4312 1910 4C89F6   		mov	rsi, r14	#, _5
 4313 1913 4B8D3CC1 		lea	rdi, [r9+r8*8]	# tmp282,
 4314 1917 E8000000 		call	memcpy@PLT	#
 4314      00
 4315              	.LVL220:
 4316              		.loc 2 34 10 view .LVU1457
 4317              	.LBE336:
 4318              	.LBE343:
 557:sieve_extend.c ****     }
 4319              		.loc 1 557 9 is_stmt 1 view .LVU1458
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 4320              		.loc 1 555 11 view .LVU1459
 4321 191c 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.310, %sfp
 4321      10
 4322 1921 4E8D1420 		lea	r10, [rax+r12]	# ivtmp.310,
 4323 1925 4C39D3   		cmp	rbx, r10	# destination_stop_word, ivtmp.310
 4324 1928 0F82A200 		jb	.L320	#,
 4324      0000
 556:sieve_extend.c ****         copy_word += size;
 4325              		.loc 1 556 9 view .LVU1460
 4326              	.LVL221:
GAS LISTING /tmp/cclewcPz.s 			page 124


 4327              	.LBB344:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 4328              		.loc 2 31 1 view .LVU1461
 4329              	.LBB337:
 4330              		.loc 2 34 3 view .LVU1462
 4331              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 4332              		.loc 2 34 10 is_stmt 0 view .LVU1463
 4333 192e 4C8B5C24 		mov	r11, QWORD PTR 24[rsp]	# _189, %sfp
 4333      18
 4334 1933 4C89FA   		mov	rdx, r15	#, _15
 4335 1936 4C895424 		mov	QWORD PTR 16[rsp], r10	# %sfp, ivtmp.310
 4335      10
 4336 193b 4C89F6   		mov	rsi, r14	#, _5
 4337 193e 4B8D3CD3 		lea	rdi, [r11+r10*8]	# tmp285,
 4338 1942 E8000000 		call	memcpy@PLT	#
 4338      00
 4339              	.LVL222:
 4340              		.loc 2 34 10 view .LVU1464
 4341              	.LBE337:
 4342              	.LBE344:
 557:sieve_extend.c ****     }
 4343              		.loc 1 557 9 is_stmt 1 view .LVU1465
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 4344              		.loc 1 555 11 view .LVU1466
 4345 1947 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.310, %sfp
 4345      10
 4346 194c 4A8D0C20 		lea	rcx, [rax+r12]	# ivtmp.310,
 4347 1950 4839CB   		cmp	rbx, rcx	# destination_stop_word, ivtmp.310
 4348 1953 727B     		jb	.L320	#,
 556:sieve_extend.c ****         copy_word += size;
 4349              		.loc 1 556 9 view .LVU1467
 4350              	.LVL223:
 4351              	.LBB345:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 4352              		.loc 2 31 1 view .LVU1468
 4353              	.LBB338:
 4354              		.loc 2 34 3 view .LVU1469
 4355              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 4356              		.loc 2 34 10 is_stmt 0 view .LVU1470
 4357 1955 488B7C24 		mov	rdi, QWORD PTR 24[rsp]	# _189, %sfp
 4357      18
 4358 195a 4C89F6   		mov	rsi, r14	#, _5
 4359 195d 48894C24 		mov	QWORD PTR 16[rsp], rcx	# %sfp, ivtmp.310
 4359      10
 4360 1962 4C89FA   		mov	rdx, r15	#, _15
 4361 1965 488D3CCF 		lea	rdi, [rdi+rcx*8]	# tmp288,
 4362 1969 E8000000 		call	memcpy@PLT	#
 4362      00
 4363              	.LVL224:
 4364              		.loc 2 34 10 view .LVU1471
 4365              	.LBE338:
 4366              	.LBE345:
 557:sieve_extend.c ****     }
 4367              		.loc 1 557 9 is_stmt 1 view .LVU1472
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 4368              		.loc 1 555 11 view .LVU1473
 4369 196e 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.310, %sfp
GAS LISTING /tmp/cclewcPz.s 			page 125


 4369      10
 4370 1973 4A8D3420 		lea	rsi, [rax+r12]	# ivtmp.310,
 4371 1977 4839F3   		cmp	rbx, rsi	# destination_stop_word, ivtmp.310
 4372 197a 7254     		jb	.L320	#,
 556:sieve_extend.c ****         copy_word += size;
 4373              		.loc 1 556 9 view .LVU1474
 4374              	.LVL225:
 4375              	.LBB346:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 4376              		.loc 2 31 1 view .LVU1475
 4377              	.LBB339:
 4378              		.loc 2 34 3 view .LVU1476
 4379              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 4380              		.loc 2 34 10 is_stmt 0 view .LVU1477
 4381 197c 488B5424 		mov	rdx, QWORD PTR 24[rsp]	# _189, %sfp
 4381      18
 4382 1981 48897424 		mov	QWORD PTR 16[rsp], rsi	# %sfp, ivtmp.310
 4382      10
 4383 1986 488D3CF2 		lea	rdi, [rdx+rsi*8]	# tmp291,
 4384 198a 4C89FA   		mov	rdx, r15	#, _15
 4385 198d 4C89F6   		mov	rsi, r14	#, _5
 4386 1990 E8000000 		call	memcpy@PLT	#
 4386      00
 4387              	.LVL226:
 4388              		.loc 2 34 10 view .LVU1478
 4389              	.LBE339:
 4390              	.LBE346:
 557:sieve_extend.c ****     }
 4391              		.loc 1 557 9 is_stmt 1 view .LVU1479
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 4392              		.loc 1 555 11 view .LVU1480
 4393 1995 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.310, %sfp
 4393      10
 4394 199a 4E8D0420 		lea	r8, [rax+r12]	# ivtmp.310,
 4395 199e 4C39C3   		cmp	rbx, r8	# destination_stop_word, ivtmp.310
 4396 19a1 722D     		jb	.L320	#,
 556:sieve_extend.c ****         copy_word += size;
 4397              		.loc 1 556 9 view .LVU1481
 4398              	.LVL227:
 4399              	.LBB347:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 4400              		.loc 2 31 1 view .LVU1482
 4401              	.LBB340:
 4402              		.loc 2 34 3 view .LVU1483
 4403              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 4404              		.loc 2 34 10 is_stmt 0 view .LVU1484
 4405 19a3 4C8B4C24 		mov	r9, QWORD PTR 24[rsp]	# _189, %sfp
 4405      18
 4406 19a8 4C89FA   		mov	rdx, r15	#, _15
 4407 19ab 4C894424 		mov	QWORD PTR 16[rsp], r8	# %sfp, ivtmp.310
 4407      10
 4408 19b0 4C89F6   		mov	rsi, r14	#, _5
 4409 19b3 4B8D3CC1 		lea	rdi, [r9+r8*8]	# tmp294,
 4410 19b7 E8000000 		call	memcpy@PLT	#
 4410      00
 4411              	.LVL228:
 4412              		.loc 2 34 10 view .LVU1485
GAS LISTING /tmp/cclewcPz.s 			page 126


 4413              	.LBE340:
 4414              	.LBE347:
 557:sieve_extend.c ****     }
 4415              		.loc 1 557 9 is_stmt 1 view .LVU1486
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 4416              		.loc 1 555 11 view .LVU1487
 4417 19bc 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.310, %sfp
 4417      10
 4418              	.LVL229:
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 4419              		.loc 1 555 11 is_stmt 0 view .LVU1488
 4420 19c1 4A8D0C20 		lea	rcx, [rax+r12]	# ivtmp.310,
 4421              	.LVL230:
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 4422              		.loc 1 555 11 view .LVU1489
 4423 19c5 4839CB   		cmp	rbx, rcx	# destination_stop_word, ivtmp.310
 4424 19c8 0F83B4FE 		jnb	.L321	#,
 4424      FFFF
 4425              	.LVL231:
 4426 19ce 6690     		.p2align 4
 4427              		.p2align 3
 4428              	.L320:
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4429              		.loc 1 560 10 is_stmt 1 view .LVU1490
 4430 19d0 4839C3   		cmp	rbx, rax	# destination_stop_word, ivtmp.310
 4431 19d3 0F864902 		jbe	.L431	#,
 4431      0000
 4432 19d9 4C8B1424 		mov	r10, QWORD PTR [rsp]	# _4, %sfp
 4433 19dd 4C8D24C5 		lea	r12, 0[0+rax*8]	# _41,
 4433      00000000 
 4434              	.LVL232:
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4435              		.loc 1 560 10 is_stmt 0 view .LVU1491
 4436 19e5 4D8D7C24 		lea	r15, 32[r12]	# tmp199,
 4436      20
 4437 19ea 498D7A20 		lea	rdi, 32[r10]	# tmp202,
 4438 19ee 4D39FA   		cmp	r10, r15	# _4, tmp199
 4439 19f1 410F9DC3 		setge	r11b	#, tmp201
 4440 19f5 4939FC   		cmp	r12, rdi	# _41, tmp202
 4441 19f8 400F9DC6 		setge	sil	#, tmp204
 4442 19fc 4108F3   		or	r11b, sil	# tmp201, tmp204
 4443 19ff 0F844B02 		je	.L323	#,
 4443      0000
 4444 1a05 488D53FF 		lea	rdx, -1[rbx]	# tmp206,
 4445 1a09 4829C2   		sub	rdx, rax	# tmp207, ivtmp.310
 4446 1a0c 4883FA05 		cmp	rdx, 5	# tmp207,
 4447 1a10 0F863A02 		jbe	.L323	#,
 4447      0000
 4448 1a16 4D89F7   		mov	r15, r14	# tmp210, _5
 4449 1a19 49C1EF03 		shr	r15, 3	# tmp210,
 4450 1a1d 49F7DF   		neg	r15	# tmp211
 4451 1a20 4183E703 		and	r15d, 3	# prolog_loop_niters.278,
 4452 1a24 0F842E03 		je	.L330	#,
 4452      0000
 561:sieve_extend.c ****         source_word++;
 4453              		.loc 1 561 9 is_stmt 1 view .LVU1492
 4454              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/cclewcPz.s 			page 127


 561:sieve_extend.c ****         source_word++;
 4455              		.loc 1 561 39 is_stmt 0 view .LVU1493
 4456 1a2a 4D8B06   		mov	r8, QWORD PTR [r14]	# _150, *_5
 4457 1a2d 4983FF01 		cmp	r15, 1	# prolog_loop_niters.278,
 4458              	# sieve_extend.c:562:         source_word++;
 562:sieve_extend.c ****         copy_word++;
 4459              		.loc 1 562 20 view .LVU1494
 4460 1a31 4C8B4C24 		mov	r9, QWORD PTR 8[rsp]	# source_word, %sfp
 4460      08
 4461              	# sieve_extend.c:563:         copy_word++;
 563:sieve_extend.c ****     }
 4462              		.loc 1 563 18 view .LVU1495
 4463 1a36 4C8D7001 		lea	r14, 1[rax]	# copy_word,
 4464              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4465              		.loc 1 561 29 view .LVU1496
 4466 1a3a 4F894425 		mov	QWORD PTR 0[r13+r12], r8	# *_149, _150
 4466      00
 562:sieve_extend.c ****         copy_word++;
 4467              		.loc 1 562 9 is_stmt 1 view .LVU1497
 4468              	# sieve_extend.c:562:         source_word++;
 562:sieve_extend.c ****         copy_word++;
 4469              		.loc 1 562 20 is_stmt 0 view .LVU1498
 4470 1a3f 4D8D6101 		lea	r12, 1[r9]	# source_word,
 4471              	.LVL233:
 563:sieve_extend.c ****     }
 4472              		.loc 1 563 9 is_stmt 1 view .LVU1499
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4473              		.loc 1 560 10 view .LVU1500
 4474 1a43 742A     		je	.L324	#,
 561:sieve_extend.c ****         source_word++;
 4475              		.loc 1 561 9 view .LVU1501
 4476              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4477              		.loc 1 561 39 is_stmt 0 view .LVU1502
 4478 1a45 4B8B4CE5 		mov	rcx, QWORD PTR 0[r13+r12*8]	# _163, *_160
 4478      00
 4479 1a4a 4983FF03 		cmp	r15, 3	# prolog_loop_niters.278,
 4480              	# sieve_extend.c:562:         source_word++;
 562:sieve_extend.c ****         copy_word++;
 4481              		.loc 1 562 20 view .LVU1503
 4482 1a4e 4D8D6102 		lea	r12, 2[r9]	# source_word,
 4483              	.LVL234:
 4484              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4485              		.loc 1 561 29 view .LVU1504
 4486 1a52 4B894CF5 		mov	QWORD PTR 0[r13+r14*8], rcx	# *_162, _163
 4486      00
 562:sieve_extend.c ****         copy_word++;
 4487              		.loc 1 562 9 is_stmt 1 view .LVU1505
 4488              	.LVL235:
 563:sieve_extend.c ****     }
 4489              		.loc 1 563 9 view .LVU1506
 4490              	# sieve_extend.c:563:         copy_word++;
 563:sieve_extend.c ****     }
 4491              		.loc 1 563 18 is_stmt 0 view .LVU1507
 4492 1a57 4C8D7002 		lea	r14, 2[rax]	# copy_word,
GAS LISTING /tmp/cclewcPz.s 			page 128


 4493              	.LVL236:
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4494              		.loc 1 560 10 is_stmt 1 view .LVU1508
 4495 1a5b 7512     		jne	.L324	#,
 561:sieve_extend.c ****         source_word++;
 4496              		.loc 1 561 9 view .LVU1509
 4497              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4498              		.loc 1 561 39 is_stmt 0 view .LVU1510
 4499 1a5d 4F8B54E5 		mov	r10, QWORD PTR 0[r13+r12*8]	# _89, *_86
 4499      00
 4500              	# sieve_extend.c:562:         source_word++;
 562:sieve_extend.c ****         copy_word++;
 4501              		.loc 1 562 20 view .LVU1511
 4502 1a62 4D8D6103 		lea	r12, 3[r9]	# source_word,
 4503              	.LVL237:
 4504              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4505              		.loc 1 561 29 view .LVU1512
 4506 1a66 4F8954F5 		mov	QWORD PTR 0[r13+r14*8], r10	# *_88, _89
 4506      00
 562:sieve_extend.c ****         copy_word++;
 4507              		.loc 1 562 9 is_stmt 1 view .LVU1513
 4508              	.LVL238:
 563:sieve_extend.c ****     }
 4509              		.loc 1 563 9 view .LVU1514
 4510              	# sieve_extend.c:563:         copy_word++;
 563:sieve_extend.c ****     }
 4511              		.loc 1 563 18 is_stmt 0 view .LVU1515
 4512 1a6b 4C8D7003 		lea	r14, 3[rax]	# copy_word,
 4513              	.LVL239:
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4514              		.loc 1 560 10 is_stmt 1 view .LVU1516
 4515              	.L324:
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4516              		.loc 1 560 10 is_stmt 0 view .LVU1517
 4517 1a6f 488B7C24 		mov	rdi, QWORD PTR 8[rsp]	# source_word, %sfp
 4517      08
 4518 1a74 4989DB   		mov	r11, rbx	# tmp212, destination_stop_word
 4519 1a77 4D29FB   		sub	r11, r15	# tmp212, prolog_loop_niters.278
 4520 1a7a 4929C3   		sub	r11, rax	# niters.279, ivtmp.310
 4521 1a7d 4C01F8   		add	rax, r15	# tmp215, prolog_loop_niters.278
 4522 1a80 4D89D8   		mov	r8, r11	# bnd.280, niters.279
 4523 1a83 4C01FF   		add	rdi, r15	# source_word, prolog_loop_niters.278
 4524 1a86 49C1E802 		shr	r8, 2	# bnd.280,
 4525 1a8a 4D8D7CC5 		lea	r15, 0[r13+rax*8]	# vectp.288,
 4525      00
 4526 1a8f 49C1E005 		sal	r8, 5	# _182,
 4527              	# sieve_extend.c:550:     counter_t source_word = wordindex(source_start);
 550:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
 4528              		.loc 1 550 15 view .LVU1518
 4529 1a93 31C0     		xor	eax, eax	# ivtmp.301
 4530 1a95 498D50E0 		lea	rdx, -32[r8]	# tmp228,
 4531 1a99 498D74FD 		lea	rsi, 0[r13+rdi*8]	# vectp.285,
 4531      00
 4532 1a9e 48C1EA05 		shr	rdx, 5	# tmp226,
 4533 1aa2 4883C201 		add	rdx, 1	# tmp229,
GAS LISTING /tmp/cclewcPz.s 			page 129


 4534 1aa6 83E207   		and	edx, 7	# tmp230,
 4535 1aa9 0F849500 		je	.L326	#,
 4535      0000
 4536 1aaf 4883FA01 		cmp	rdx, 1	# tmp230,
 4537 1ab3 7477     		je	.L390	#,
 4538 1ab5 4883FA02 		cmp	rdx, 2	# tmp230,
 4539 1ab9 7462     		je	.L391	#,
 4540 1abb 4883FA03 		cmp	rdx, 3	# tmp230,
 4541 1abf 744D     		je	.L392	#,
 4542 1ac1 4883FA04 		cmp	rdx, 4	# tmp230,
 4543 1ac5 7438     		je	.L393	#,
 4544 1ac7 4883FA05 		cmp	rdx, 5	# tmp230,
 4545 1acb 7423     		je	.L394	#,
 4546 1acd 4883FA06 		cmp	rdx, 6	# tmp230,
 4547 1ad1 740E     		je	.L395	#,
 561:sieve_extend.c ****         source_word++;
 4548              		.loc 1 561 9 is_stmt 1 view .LVU1519
 4549              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4550              		.loc 1 561 29 is_stmt 0 view .LVU1520
 4551 1ad3 C5FD6F0E 		vmovdqa	ymm1, YMMWORD PTR [rsi]	# tmp330, MEM[base: vectp.285_119, index: ivtmp.301_180, offset: 0
 4552 1ad7 B8200000 		mov	eax, 32	# ivtmp.301,
 4552      00
 4553 1adc C4C17E7F 		vmovdqu	YMMWORD PTR [r15], ymm1	# MEM[base: vectp.288_125, index: ivtmp.301_180, offset: 0B], tmp3
 4553      0F
 562:sieve_extend.c ****         copy_word++;
 4554              		.loc 1 562 9 is_stmt 1 view .LVU1521
 563:sieve_extend.c ****     }
 4555              		.loc 1 563 9 view .LVU1522
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4556              		.loc 1 560 10 view .LVU1523
 4557              	.L395:
 561:sieve_extend.c ****         source_word++;
 4558              		.loc 1 561 9 view .LVU1524
 4559              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4560              		.loc 1 561 29 is_stmt 0 view .LVU1525
 4561 1ae1 C5FD6F3C 		vmovdqa	ymm7, YMMWORD PTR [rsi+rax]	# tmp331, MEM[base: vectp.285_119, index: ivtmp.301_180, offse
 4561      06
 4562 1ae6 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm7	# MEM[base: vectp.288_125, index: ivtmp.301_180, offset: 0B], 
 4562      3C07
 562:sieve_extend.c ****         copy_word++;
 4563              		.loc 1 562 9 is_stmt 1 view .LVU1526
 563:sieve_extend.c ****     }
 4564              		.loc 1 563 9 view .LVU1527
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4565              		.loc 1 560 10 view .LVU1528
 4566 1aec 4883C020 		add	rax, 32	# ivtmp.301,
 4567              	.L394:
 561:sieve_extend.c ****         source_word++;
 4568              		.loc 1 561 9 view .LVU1529
 4569              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4570              		.loc 1 561 29 is_stmt 0 view .LVU1530
 4571 1af0 C5FD6F34 		vmovdqa	ymm6, YMMWORD PTR [rsi+rax]	# tmp332, MEM[base: vectp.285_119, index: ivtmp.301_180, offse
 4571      06
 4572 1af5 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm6	# MEM[base: vectp.288_125, index: ivtmp.301_180, offset: 0B], 
GAS LISTING /tmp/cclewcPz.s 			page 130


 4572      3407
 562:sieve_extend.c ****         copy_word++;
 4573              		.loc 1 562 9 is_stmt 1 view .LVU1531
 563:sieve_extend.c ****     }
 4574              		.loc 1 563 9 view .LVU1532
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4575              		.loc 1 560 10 view .LVU1533
 4576 1afb 4883C020 		add	rax, 32	# ivtmp.301,
 4577              	.L393:
 561:sieve_extend.c ****         source_word++;
 4578              		.loc 1 561 9 view .LVU1534
 4579              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4580              		.loc 1 561 29 is_stmt 0 view .LVU1535
 4581 1aff C5FD6F2C 		vmovdqa	ymm5, YMMWORD PTR [rsi+rax]	# tmp333, MEM[base: vectp.285_119, index: ivtmp.301_180, offse
 4581      06
 4582 1b04 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm5	# MEM[base: vectp.288_125, index: ivtmp.301_180, offset: 0B], 
 4582      2C07
 562:sieve_extend.c ****         copy_word++;
 4583              		.loc 1 562 9 is_stmt 1 view .LVU1536
 563:sieve_extend.c ****     }
 4584              		.loc 1 563 9 view .LVU1537
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4585              		.loc 1 560 10 view .LVU1538
 4586 1b0a 4883C020 		add	rax, 32	# ivtmp.301,
 4587              	.L392:
 561:sieve_extend.c ****         source_word++;
 4588              		.loc 1 561 9 view .LVU1539
 4589              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4590              		.loc 1 561 29 is_stmt 0 view .LVU1540
 4591 1b0e C5FD6F24 		vmovdqa	ymm4, YMMWORD PTR [rsi+rax]	# tmp334, MEM[base: vectp.285_119, index: ivtmp.301_180, offse
 4591      06
 4592 1b13 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm4	# MEM[base: vectp.288_125, index: ivtmp.301_180, offset: 0B], 
 4592      2407
 562:sieve_extend.c ****         copy_word++;
 4593              		.loc 1 562 9 is_stmt 1 view .LVU1541
 563:sieve_extend.c ****     }
 4594              		.loc 1 563 9 view .LVU1542
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4595              		.loc 1 560 10 view .LVU1543
 4596 1b19 4883C020 		add	rax, 32	# ivtmp.301,
 4597              	.L391:
 561:sieve_extend.c ****         source_word++;
 4598              		.loc 1 561 9 view .LVU1544
 4599              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4600              		.loc 1 561 29 is_stmt 0 view .LVU1545
 4601 1b1d C5FD6F04 		vmovdqa	ymm0, YMMWORD PTR [rsi+rax]	# tmp335, MEM[base: vectp.285_119, index: ivtmp.301_180, offse
 4601      06
 4602 1b22 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm0	# MEM[base: vectp.288_125, index: ivtmp.301_180, offset: 0B], 
 4602      0407
 562:sieve_extend.c ****         copy_word++;
 4603              		.loc 1 562 9 is_stmt 1 view .LVU1546
 563:sieve_extend.c ****     }
 4604              		.loc 1 563 9 view .LVU1547
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/cclewcPz.s 			page 131


 4605              		.loc 1 560 10 view .LVU1548
 4606 1b28 4883C020 		add	rax, 32	# ivtmp.301,
 4607              	.L390:
 561:sieve_extend.c ****         source_word++;
 4608              		.loc 1 561 9 view .LVU1549
 4609              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4610              		.loc 1 561 29 is_stmt 0 view .LVU1550
 4611 1b2c C5FD6F14 		vmovdqa	ymm2, YMMWORD PTR [rsi+rax]	# tmp336, MEM[base: vectp.285_119, index: ivtmp.301_180, offse
 4611      06
 4612 1b31 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm2	# MEM[base: vectp.288_125, index: ivtmp.301_180, offset: 0B], 
 4612      1407
 562:sieve_extend.c ****         copy_word++;
 4613              		.loc 1 562 9 is_stmt 1 view .LVU1551
 563:sieve_extend.c ****     }
 4614              		.loc 1 563 9 view .LVU1552
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4615              		.loc 1 560 10 view .LVU1553
 4616 1b37 4883C020 		add	rax, 32	# ivtmp.301,
 4617 1b3b 4C39C0   		cmp	rax, r8	# ivtmp.301, _182
 4618 1b3e 0F848D00 		je	.L427	#,
 4618      0000
 4619              	.L326:
 561:sieve_extend.c ****         source_word++;
 4620              		.loc 1 561 9 view .LVU1554
 4621              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4622              		.loc 1 561 29 is_stmt 0 view .LVU1555
 4623 1b44 C5FD6F1C 		vmovdqa	ymm3, YMMWORD PTR [rsi+rax]	# tmp319, MEM[base: vectp.285_119, index: ivtmp.301_180, offse
 4623      06
 4624 1b49 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm3	# MEM[base: vectp.288_125, index: ivtmp.301_180, offset: 0B], 
 4624      1C07
 562:sieve_extend.c ****         copy_word++;
 4625              		.loc 1 562 9 is_stmt 1 view .LVU1556
 563:sieve_extend.c ****     }
 4626              		.loc 1 563 9 view .LVU1557
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4627              		.loc 1 560 10 view .LVU1558
 561:sieve_extend.c ****         source_word++;
 4628              		.loc 1 561 9 view .LVU1559
 4629              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4630              		.loc 1 561 29 is_stmt 0 view .LVU1560
 4631 1b4f C57D6F44 		vmovdqa	ymm8, YMMWORD PTR 32[rsi+rax]	# tmp320, MEM[base: vectp.285_119, index: ivtmp.301_180, off
 4631      0620
 4632 1b55 C4417E7F 		vmovdqu	YMMWORD PTR 32[r15+rax], ymm8	# MEM[base: vectp.288_125, index: ivtmp.301_180, offset: 0B]
 4632      440720
 562:sieve_extend.c ****         copy_word++;
 4633              		.loc 1 562 9 is_stmt 1 view .LVU1561
 563:sieve_extend.c ****     }
 4634              		.loc 1 563 9 view .LVU1562
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4635              		.loc 1 560 10 view .LVU1563
 561:sieve_extend.c ****         source_word++;
 4636              		.loc 1 561 9 view .LVU1564
 4637              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
GAS LISTING /tmp/cclewcPz.s 			page 132


 4638              		.loc 1 561 29 is_stmt 0 view .LVU1565
 4639 1b5c C57D6F4C 		vmovdqa	ymm9, YMMWORD PTR 64[rsi+rax]	# tmp321, MEM[base: vectp.285_119, index: ivtmp.301_180, off
 4639      0640
 4640 1b62 C4417E7F 		vmovdqu	YMMWORD PTR 64[r15+rax], ymm9	# MEM[base: vectp.288_125, index: ivtmp.301_180, offset: 0B]
 4640      4C0740
 562:sieve_extend.c ****         copy_word++;
 4641              		.loc 1 562 9 is_stmt 1 view .LVU1566
 563:sieve_extend.c ****     }
 4642              		.loc 1 563 9 view .LVU1567
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4643              		.loc 1 560 10 view .LVU1568
 561:sieve_extend.c ****         source_word++;
 4644              		.loc 1 561 9 view .LVU1569
 4645              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4646              		.loc 1 561 29 is_stmt 0 view .LVU1570
 4647 1b69 C57D6F54 		vmovdqa	ymm10, YMMWORD PTR 96[rsi+rax]	# tmp322, MEM[base: vectp.285_119, index: ivtmp.301_180, of
 4647      0660
 4648 1b6f C4417E7F 		vmovdqu	YMMWORD PTR 96[r15+rax], ymm10	# MEM[base: vectp.288_125, index: ivtmp.301_180, offset: 0B
 4648      540760
 562:sieve_extend.c ****         copy_word++;
 4649              		.loc 1 562 9 is_stmt 1 view .LVU1571
 563:sieve_extend.c ****     }
 4650              		.loc 1 563 9 view .LVU1572
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4651              		.loc 1 560 10 view .LVU1573
 561:sieve_extend.c ****         source_word++;
 4652              		.loc 1 561 9 view .LVU1574
 4653              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4654              		.loc 1 561 29 is_stmt 0 view .LVU1575
 4655 1b76 C57D6F9C 		vmovdqa	ymm11, YMMWORD PTR 128[rsi+rax]	# tmp323, MEM[base: vectp.285_119, index: ivtmp.301_180, o
 4655      06800000 
 4655      00
 4656 1b7f C4417E7F 		vmovdqu	YMMWORD PTR 128[r15+rax], ymm11	# MEM[base: vectp.288_125, index: ivtmp.301_180, offset: 0
 4656      9C078000 
 4656      0000
 562:sieve_extend.c ****         copy_word++;
 4657              		.loc 1 562 9 is_stmt 1 view .LVU1576
 563:sieve_extend.c ****     }
 4658              		.loc 1 563 9 view .LVU1577
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4659              		.loc 1 560 10 view .LVU1578
 561:sieve_extend.c ****         source_word++;
 4660              		.loc 1 561 9 view .LVU1579
 4661              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4662              		.loc 1 561 29 is_stmt 0 view .LVU1580
 4663 1b89 C57D6FA4 		vmovdqa	ymm12, YMMWORD PTR 160[rsi+rax]	# tmp324, MEM[base: vectp.285_119, index: ivtmp.301_180, o
 4663      06A00000 
 4663      00
 4664 1b92 C4417E7F 		vmovdqu	YMMWORD PTR 160[r15+rax], ymm12	# MEM[base: vectp.288_125, index: ivtmp.301_180, offset: 0
 4664      A407A000 
 4664      0000
 562:sieve_extend.c ****         copy_word++;
 4665              		.loc 1 562 9 is_stmt 1 view .LVU1581
 563:sieve_extend.c ****     }
GAS LISTING /tmp/cclewcPz.s 			page 133


 4666              		.loc 1 563 9 view .LVU1582
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4667              		.loc 1 560 10 view .LVU1583
 561:sieve_extend.c ****         source_word++;
 4668              		.loc 1 561 9 view .LVU1584
 4669              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4670              		.loc 1 561 29 is_stmt 0 view .LVU1585
 4671 1b9c C57D6FAC 		vmovdqa	ymm13, YMMWORD PTR 192[rsi+rax]	# tmp325, MEM[base: vectp.285_119, index: ivtmp.301_180, o
 4671      06C00000 
 4671      00
 4672 1ba5 C4417E7F 		vmovdqu	YMMWORD PTR 192[r15+rax], ymm13	# MEM[base: vectp.288_125, index: ivtmp.301_180, offset: 0
 4672      AC07C000 
 4672      0000
 562:sieve_extend.c ****         copy_word++;
 4673              		.loc 1 562 9 is_stmt 1 view .LVU1586
 563:sieve_extend.c ****     }
 4674              		.loc 1 563 9 view .LVU1587
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4675              		.loc 1 560 10 view .LVU1588
 561:sieve_extend.c ****         source_word++;
 4676              		.loc 1 561 9 view .LVU1589
 4677              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4678              		.loc 1 561 29 is_stmt 0 view .LVU1590
 4679 1baf C57D6FB4 		vmovdqa	ymm14, YMMWORD PTR 224[rsi+rax]	# tmp326, MEM[base: vectp.285_119, index: ivtmp.301_180, o
 4679      06E00000 
 4679      00
 4680 1bb8 C4417E7F 		vmovdqu	YMMWORD PTR 224[r15+rax], ymm14	# MEM[base: vectp.288_125, index: ivtmp.301_180, offset: 0
 4680      B407E000 
 4680      0000
 562:sieve_extend.c ****         copy_word++;
 4681              		.loc 1 562 9 is_stmt 1 view .LVU1591
 563:sieve_extend.c ****     }
 4682              		.loc 1 563 9 view .LVU1592
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4683              		.loc 1 560 10 view .LVU1593
 4684 1bc2 48050001 		add	rax, 256	# ivtmp.301,
 4684      0000
 4685 1bc8 4C39C0   		cmp	rax, r8	# ivtmp.301, _182
 4686 1bcb 0F8573FF 		jne	.L326	#,
 4686      FFFF
 4687              	.L427:
 4688 1bd1 4D89D9   		mov	r9, r11	# niters_vector_mult_vf.281, niters.279
 4689 1bd4 4983E1FC 		and	r9, -4	# niters_vector_mult_vf.281,
 4690 1bd8 4D01CC   		add	r12, r9	# tmp.282, niters_vector_mult_vf.281
 4691 1bdb 4D01CE   		add	r14, r9	# tmp.283, niters_vector_mult_vf.281
 4692 1bde 4D39CB   		cmp	r11, r9	# niters.279, niters_vector_mult_vf.281
 4693 1be1 7455     		je	.L430	#,
 4694              	.LVL240:
 561:sieve_extend.c ****         source_word++;
 4695              		.loc 1 561 9 view .LVU1594
 4696              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4697              		.loc 1 561 39 is_stmt 0 view .LVU1595
 4698 1be3 4B8B4CE5 		mov	rcx, QWORD PTR 0[r13+r12*8]	# _37, *_21
 4698      00
GAS LISTING /tmp/cclewcPz.s 			page 134


 4699              	# sieve_extend.c:563:         copy_word++;
 563:sieve_extend.c ****     }
 4700              		.loc 1 563 18 view .LVU1596
 4701 1be8 4D8D5601 		lea	r10, 1[r14]	# copy_word,
 4702              	# sieve_extend.c:562:         source_word++;
 562:sieve_extend.c ****         copy_word++;
 4703              		.loc 1 562 20 view .LVU1597
 4704 1bec 4983C401 		add	r12, 1	# source_word,
 4705              	.LVL241:
 4706              	# sieve_extend.c:560:    while (copy_word < destination_stop_word) {
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4707              		.loc 1 560 10 view .LVU1598
 4708 1bf0 4C39D3   		cmp	rbx, r10	# destination_stop_word, copy_word
 4709              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4710              		.loc 1 561 29 view .LVU1599
 4711 1bf3 4B894CF5 		mov	QWORD PTR 0[r13+r14*8], rcx	# *_23, _37
 4711      00
 562:sieve_extend.c ****         copy_word++;
 4712              		.loc 1 562 9 is_stmt 1 view .LVU1600
 4713              	.LVL242:
 563:sieve_extend.c ****     }
 4714              		.loc 1 563 9 view .LVU1601
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4715              		.loc 1 560 10 view .LVU1602
 4716 1bf8 763E     		jbe	.L430	#,
 561:sieve_extend.c ****         source_word++;
 4717              		.loc 1 561 9 view .LVU1603
 4718              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4719              		.loc 1 561 39 is_stmt 0 view .LVU1604
 4720 1bfa 4E8D1CE5 		lea	r11, 0[0+r12*8]	# _134,
 4720      00000000 
 4721              	# sieve_extend.c:563:         copy_word++;
 563:sieve_extend.c ****     }
 4722              		.loc 1 563 18 view .LVU1605
 4723 1c02 4983C602 		add	r14, 2	# copy_word,
 4724              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4725              		.loc 1 561 39 view .LVU1606
 4726 1c06 4F8B64E5 		mov	r12, QWORD PTR 0[r13+r12*8]	# _138, *_135
 4726      00
 4727              	# sieve_extend.c:560:    while (copy_word < destination_stop_word) {
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4728              		.loc 1 560 10 view .LVU1607
 4729 1c0b 4C39F3   		cmp	rbx, r14	# destination_stop_word, copy_word
 4730              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4731              		.loc 1 561 29 view .LVU1608
 4732 1c0e 4F8964D5 		mov	QWORD PTR 0[r13+r10*8], r12	# *_137, _138
 4732      00
 562:sieve_extend.c ****         copy_word++;
 4733              		.loc 1 562 9 is_stmt 1 view .LVU1609
 563:sieve_extend.c ****     }
 4734              		.loc 1 563 9 view .LVU1610
 4735              	.LVL243:
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/cclewcPz.s 			page 135


 4736              		.loc 1 560 10 view .LVU1611
 4737 1c13 7623     		jbe	.L430	#,
 561:sieve_extend.c ****         source_word++;
 4738              		.loc 1 561 9 view .LVU1612
 4739              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4740              		.loc 1 561 39 is_stmt 0 view .LVU1613
 4741 1c15 4B8B5C1D 		mov	rbx, QWORD PTR 8[r13+r11]	# _109, *_106
 4741      08
 4742              	.LVL244:
 4743              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4744              		.loc 1 561 29 view .LVU1614
 4745 1c1a 4B895CF5 		mov	QWORD PTR 0[r13+r14*8], rbx	# *_108, _109
 4745      00
 562:sieve_extend.c ****         copy_word++;
 4746              		.loc 1 562 9 is_stmt 1 view .LVU1615
 563:sieve_extend.c ****     }
 4747              		.loc 1 563 9 view .LVU1616
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4748              		.loc 1 560 10 view .LVU1617
 4749 1c1f C5F877   		vzeroupper
 4750              	.LVL245:
 4751              	.L431:
 4752              	# sieve_extend.c:566: }
 566:sieve_extend.c **** 
 4753              		.loc 1 566 1 is_stmt 0 view .LVU1618
 4754 1c22 488D65D8 		lea	rsp, -40[rbp]	#,
 4755 1c26 5B       		pop	rbx	#
 4756 1c27 415C     		pop	r12	#
 4757 1c29 415D     		pop	r13	#
 4758 1c2b 415E     		pop	r14	#
 4759 1c2d 415F     		pop	r15	#
 4760 1c2f 5D       		pop	rbp	#
 4761              		.cfi_remember_state
 4762              		.cfi_def_cfa 7, 8
 4763 1c30 C3       		ret	
 4764              	.LVL246:
 4765              		.p2align 4,,7
 4766 1c31 0F1F8000 		.p2align 3
 4766      000000
 4767              	.L430:
 4768              		.cfi_restore_state
 566:sieve_extend.c **** 
 4769              		.loc 1 566 1 view .LVU1619
 4770 1c38 C5F877   		vzeroupper
 4771 1c3b 488D65D8 		lea	rsp, -40[rbp]	#,
 4772 1c3f 5B       		pop	rbx	#
 4773              	.LVL247:
 566:sieve_extend.c **** 
 4774              		.loc 1 566 1 view .LVU1620
 4775 1c40 415C     		pop	r12	#
 4776 1c42 415D     		pop	r13	#
 4777              	.LVL248:
 566:sieve_extend.c **** 
 4778              		.loc 1 566 1 view .LVU1621
 4779 1c44 415E     		pop	r14	#
GAS LISTING /tmp/cclewcPz.s 			page 136


 4780 1c46 415F     		pop	r15	#
 4781 1c48 5D       		pop	rbp	#
 4782              		.cfi_remember_state
 4783              		.cfi_def_cfa 7, 8
 4784 1c49 C3       		ret	
 4785              	.LVL249:
 4786 1c4a 660F1F44 		.p2align 4,,7
 4786      0000
 4787              		.p2align 3
 4788              	.L323:
 4789              		.cfi_restore_state
 4790              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4791              		.loc 1 561 39 view .LVU1622
 4792 1c50 488B7C24 		mov	rdi, QWORD PTR 8[rsp]	# source_word, %sfp
 4792      08
 4793 1c55 4F8D7425 		lea	r14, 0[r13+r12]	# ivtmp.296,
 4793      00
 4794 1c5a 4D8D6CDD 		lea	r13, 0[r13+rbx*8]	# _179,
 4794      00
 4795              	.LVL250:
 561:sieve_extend.c ****         source_word++;
 4796              		.loc 1 561 39 view .LVU1623
 4797 1c5f 4C89EE   		mov	rsi, r13	# tmp221, _179
 4798 1c62 4C29F6   		sub	rsi, r14	# tmp221, ivtmp.296
 4799 1c65 4829C7   		sub	rdi, rax	# source_word, ivtmp.310
 4800 1c68 4883EE08 		sub	rsi, 8	# tmp222,
 4801 1c6c 48C1EE03 		shr	rsi, 3	# tmp220,
 4802 1c70 4883C601 		add	rsi, 1	# tmp223,
 4803 1c74 83E607   		and	esi, 7	# tmp224,
 4804 1c77 0F848100 		je	.L328	#,
 4804      0000
 4805 1c7d 4883FE01 		cmp	rsi, 1	# tmp224,
 4806 1c81 7466     		je	.L396	#,
 4807 1c83 4883FE02 		cmp	rsi, 2	# tmp224,
 4808 1c87 7454     		je	.L397	#,
 4809 1c89 4883FE03 		cmp	rsi, 3	# tmp224,
 4810 1c8d 7442     		je	.L398	#,
 4811 1c8f 4883FE04 		cmp	rsi, 4	# tmp224,
 4812 1c93 7430     		je	.L399	#,
 4813 1c95 4883FE05 		cmp	rsi, 5	# tmp224,
 4814 1c99 741E     		je	.L400	#,
 4815 1c9b 4883FE06 		cmp	rsi, 6	# tmp224,
 4816 1c9f 740C     		je	.L401	#,
 4817              	.LVL251:
 561:sieve_extend.c ****         source_word++;
 4818              		.loc 1 561 9 is_stmt 1 view .LVU1624
 4819              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4820              		.loc 1 561 39 is_stmt 0 view .LVU1625
 4821 1ca1 4D8B3CFE 		mov	r15, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4822 1ca5 4983C608 		add	r14, 8	# ivtmp.296,
 4823              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4824              		.loc 1 561 29 view .LVU1626
 4825 1ca9 4D897EF8 		mov	QWORD PTR -8[r14], r15	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
GAS LISTING /tmp/cclewcPz.s 			page 137


 4826              		.loc 1 562 9 is_stmt 1 view .LVU1627
 563:sieve_extend.c ****     }
 4827              		.loc 1 563 9 view .LVU1628
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4828              		.loc 1 560 10 view .LVU1629
 4829              	.L401:
 561:sieve_extend.c ****         source_word++;
 4830              		.loc 1 561 9 view .LVU1630
 4831              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4832              		.loc 1 561 39 is_stmt 0 view .LVU1631
 4833 1cad 4D8B04FE 		mov	r8, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4834 1cb1 4983C608 		add	r14, 8	# ivtmp.296,
 4835              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4836              		.loc 1 561 29 view .LVU1632
 4837 1cb5 4D8946F8 		mov	QWORD PTR -8[r14], r8	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4838              		.loc 1 562 9 is_stmt 1 view .LVU1633
 563:sieve_extend.c ****     }
 4839              		.loc 1 563 9 view .LVU1634
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4840              		.loc 1 560 10 view .LVU1635
 4841              	.L400:
 561:sieve_extend.c ****         source_word++;
 4842              		.loc 1 561 9 view .LVU1636
 4843              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4844              		.loc 1 561 39 is_stmt 0 view .LVU1637
 4845 1cb9 498B14FE 		mov	rdx, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4846 1cbd 4983C608 		add	r14, 8	# ivtmp.296,
 4847              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4848              		.loc 1 561 29 view .LVU1638
 4849 1cc1 498956F8 		mov	QWORD PTR -8[r14], rdx	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4850              		.loc 1 562 9 is_stmt 1 view .LVU1639
 563:sieve_extend.c ****     }
 4851              		.loc 1 563 9 view .LVU1640
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4852              		.loc 1 560 10 view .LVU1641
 4853              	.L399:
 561:sieve_extend.c ****         source_word++;
 4854              		.loc 1 561 9 view .LVU1642
 4855              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4856              		.loc 1 561 39 is_stmt 0 view .LVU1643
 4857 1cc5 498B04FE 		mov	rax, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4858 1cc9 4983C608 		add	r14, 8	# ivtmp.296,
 4859              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4860              		.loc 1 561 29 view .LVU1644
 4861 1ccd 498946F8 		mov	QWORD PTR -8[r14], rax	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4862              		.loc 1 562 9 is_stmt 1 view .LVU1645
 563:sieve_extend.c ****     }
 4863              		.loc 1 563 9 view .LVU1646
GAS LISTING /tmp/cclewcPz.s 			page 138


 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4864              		.loc 1 560 10 view .LVU1647
 4865              	.L398:
 561:sieve_extend.c ****         source_word++;
 4866              		.loc 1 561 9 view .LVU1648
 4867              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4868              		.loc 1 561 39 is_stmt 0 view .LVU1649
 4869 1cd1 4D8B0CFE 		mov	r9, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4870 1cd5 4983C608 		add	r14, 8	# ivtmp.296,
 4871              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4872              		.loc 1 561 29 view .LVU1650
 4873 1cd9 4D894EF8 		mov	QWORD PTR -8[r14], r9	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4874              		.loc 1 562 9 is_stmt 1 view .LVU1651
 563:sieve_extend.c ****     }
 4875              		.loc 1 563 9 view .LVU1652
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4876              		.loc 1 560 10 view .LVU1653
 4877              	.L397:
 561:sieve_extend.c ****         source_word++;
 4878              		.loc 1 561 9 view .LVU1654
 4879              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4880              		.loc 1 561 39 is_stmt 0 view .LVU1655
 4881 1cdd 498B0CFE 		mov	rcx, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4882 1ce1 4983C608 		add	r14, 8	# ivtmp.296,
 4883              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4884              		.loc 1 561 29 view .LVU1656
 4885 1ce5 49894EF8 		mov	QWORD PTR -8[r14], rcx	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4886              		.loc 1 562 9 is_stmt 1 view .LVU1657
 563:sieve_extend.c ****     }
 4887              		.loc 1 563 9 view .LVU1658
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4888              		.loc 1 560 10 view .LVU1659
 4889              	.L396:
 561:sieve_extend.c ****         source_word++;
 4890              		.loc 1 561 9 view .LVU1660
 4891              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4892              		.loc 1 561 39 is_stmt 0 view .LVU1661
 4893 1ce9 4D8B14FE 		mov	r10, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4894 1ced 4983C608 		add	r14, 8	# ivtmp.296,
 4895              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4896              		.loc 1 561 29 view .LVU1662
 4897 1cf1 4D8956F8 		mov	QWORD PTR -8[r14], r10	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4898              		.loc 1 562 9 is_stmt 1 view .LVU1663
 563:sieve_extend.c ****     }
 4899              		.loc 1 563 9 view .LVU1664
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4900              		.loc 1 560 10 view .LVU1665
 4901 1cf5 4D39EE   		cmp	r14, r13	# ivtmp.296, _179
GAS LISTING /tmp/cclewcPz.s 			page 139


 4902 1cf8 0F8424FF 		je	.L431	#,
 4902      FFFF
 4903              	.LVL252:
 4904              	.L328:
 561:sieve_extend.c ****         source_word++;
 4905              		.loc 1 561 9 view .LVU1666
 4906              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4907              		.loc 1 561 39 is_stmt 0 view .LVU1667
 4908 1cfe 4D8B1CFE 		mov	r11, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4909              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4910              		.loc 1 561 29 view .LVU1668
 4911 1d02 4D891E   		mov	QWORD PTR [r14], r11	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4912              		.loc 1 562 9 is_stmt 1 view .LVU1669
 563:sieve_extend.c ****     }
 4913              		.loc 1 563 9 view .LVU1670
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4914              		.loc 1 560 10 view .LVU1671
 561:sieve_extend.c ****         source_word++;
 4915              		.loc 1 561 9 view .LVU1672
 4916              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4917              		.loc 1 561 39 is_stmt 0 view .LVU1673
 4918 1d05 4D8B64FE 		mov	r12, QWORD PTR 8[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4918      08
 4919              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4920              		.loc 1 561 29 view .LVU1674
 4921 1d0a 4D896608 		mov	QWORD PTR 8[r14], r12	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4922              		.loc 1 562 9 is_stmt 1 view .LVU1675
 563:sieve_extend.c ****     }
 4923              		.loc 1 563 9 view .LVU1676
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4924              		.loc 1 560 10 view .LVU1677
 561:sieve_extend.c ****         source_word++;
 4925              		.loc 1 561 9 view .LVU1678
 4926              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4927              		.loc 1 561 39 is_stmt 0 view .LVU1679
 4928 1d0e 498B5CFE 		mov	rbx, QWORD PTR 16[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4928      10
 4929              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4930              		.loc 1 561 29 view .LVU1680
 4931 1d13 49895E10 		mov	QWORD PTR 16[r14], rbx	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4932              		.loc 1 562 9 is_stmt 1 view .LVU1681
 563:sieve_extend.c ****     }
 4933              		.loc 1 563 9 view .LVU1682
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4934              		.loc 1 560 10 view .LVU1683
 561:sieve_extend.c ****         source_word++;
 4935              		.loc 1 561 9 view .LVU1684
 4936              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/cclewcPz.s 			page 140


 561:sieve_extend.c ****         source_word++;
 4937              		.loc 1 561 39 is_stmt 0 view .LVU1685
 4938 1d17 498B74FE 		mov	rsi, QWORD PTR 24[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4938      18
 4939              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4940              		.loc 1 561 29 view .LVU1686
 4941 1d1c 49897618 		mov	QWORD PTR 24[r14], rsi	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4942              		.loc 1 562 9 is_stmt 1 view .LVU1687
 563:sieve_extend.c ****     }
 4943              		.loc 1 563 9 view .LVU1688
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4944              		.loc 1 560 10 view .LVU1689
 561:sieve_extend.c ****         source_word++;
 4945              		.loc 1 561 9 view .LVU1690
 4946              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4947              		.loc 1 561 39 is_stmt 0 view .LVU1691
 4948 1d20 4D8B7CFE 		mov	r15, QWORD PTR 32[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4948      20
 4949              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4950              		.loc 1 561 29 view .LVU1692
 4951 1d25 4D897E20 		mov	QWORD PTR 32[r14], r15	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4952              		.loc 1 562 9 is_stmt 1 view .LVU1693
 563:sieve_extend.c ****     }
 4953              		.loc 1 563 9 view .LVU1694
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4954              		.loc 1 560 10 view .LVU1695
 561:sieve_extend.c ****         source_word++;
 4955              		.loc 1 561 9 view .LVU1696
 4956              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4957              		.loc 1 561 39 is_stmt 0 view .LVU1697
 4958 1d29 4D8B44FE 		mov	r8, QWORD PTR 40[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4958      28
 4959              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4960              		.loc 1 561 29 view .LVU1698
 4961 1d2e 4D894628 		mov	QWORD PTR 40[r14], r8	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4962              		.loc 1 562 9 is_stmt 1 view .LVU1699
 563:sieve_extend.c ****     }
 4963              		.loc 1 563 9 view .LVU1700
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4964              		.loc 1 560 10 view .LVU1701
 561:sieve_extend.c ****         source_word++;
 4965              		.loc 1 561 9 view .LVU1702
 4966              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4967              		.loc 1 561 39 is_stmt 0 view .LVU1703
 4968 1d32 498B54FE 		mov	rdx, QWORD PTR 48[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4968      30
 4969              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
GAS LISTING /tmp/cclewcPz.s 			page 141


 4970              		.loc 1 561 29 view .LVU1704
 4971 1d37 49895630 		mov	QWORD PTR 48[r14], rdx	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4972              		.loc 1 562 9 is_stmt 1 view .LVU1705
 563:sieve_extend.c ****     }
 4973              		.loc 1 563 9 view .LVU1706
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4974              		.loc 1 560 10 view .LVU1707
 561:sieve_extend.c ****         source_word++;
 4975              		.loc 1 561 9 view .LVU1708
 4976              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4977              		.loc 1 561 39 is_stmt 0 view .LVU1709
 4978 1d3b 498B44FE 		mov	rax, QWORD PTR 56[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4978      38
 4979 1d40 4983C640 		add	r14, 64	# ivtmp.296,
 4980              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4981              		.loc 1 561 29 view .LVU1710
 4982 1d44 498946F8 		mov	QWORD PTR -8[r14], rax	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4983              		.loc 1 562 9 is_stmt 1 view .LVU1711
 563:sieve_extend.c ****     }
 4984              		.loc 1 563 9 view .LVU1712
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4985              		.loc 1 560 10 view .LVU1713
 4986 1d48 4D39EE   		cmp	r14, r13	# ivtmp.296, _179
 4987 1d4b 75B1     		jne	.L328	#,
 4988 1d4d E9D0FEFF 		jmp	.L431	#
 4988      FF
 4989              	.LVL253:
 4990              		.p2align 4,,7
 4991 1d52 660F1F44 		.p2align 3
 4991      0000
 4992              	.L330:
 4993              	# sieve_extend.c:550:     counter_t source_word = wordindex(source_start);
 550:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
 4994              		.loc 1 550 15 is_stmt 0 view .LVU1714
 4995 1d58 4C8B6424 		mov	r12, QWORD PTR 8[rsp]	# source_word, %sfp
 4995      08
 4996              	# sieve_extend.c:560:    while (copy_word < destination_stop_word) {
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4997              		.loc 1 560 10 view .LVU1715
 4998 1d5d 4989C6   		mov	r14, rax	# copy_word, ivtmp.310
 4999 1d60 E90AFDFF 		jmp	.L324	#
 4999      FF
 5000              		.cfi_endproc
 5001              	.LFE69:
 5003 1d65 66662E0F 		.p2align 4
 5003      1F840000 
 5003      000000
 5005              	extendSieve_shiftleft:
 5006              	.LVL254:
 5007              	.LFB75:
 741:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 5008              		.loc 1 741 142 is_stmt 1 view -0
 5009              		.cfi_startproc
GAS LISTING /tmp/cclewcPz.s 			page 142


 742:sieve_extend.c **** 
 5010              		.loc 1 742 5 view .LVU1717
 744:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 5011              		.loc 1 744 5 view .LVU1718
 5012              	# sieve_extend.c:741: static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source
 741:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 5013              		.loc 1 741 142 is_stmt 0 view .LVU1719
 5014 1d70 55       		push	rbp	#
 5015              		.cfi_def_cfa_offset 16
 5016              		.cfi_offset 6, -16
 5017              	# sieve_extend.c:744:     const counter_t destination_stop_word = wordindex(destination_stop);
 744:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 5018              		.loc 1 744 21 view .LVU1720
 5019 1d71 48C1E906 		shr	rcx, 6	# tmp1104,
 5020              	.LVL255:
 5021              	# sieve_extend.c:745:     const counter_t copy_start = source_start + size;
 745:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_calc(copy_start);
 5022              		.loc 1 745 21 view .LVU1721
 5023 1d75 4C8D0416 		lea	r8, [rsi+rdx]	# copy_start,
 5024              	# sieve_extend.c:741: static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source
 741:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 5025              		.loc 1 741 142 view .LVU1722
 5026 1d79 4889E5   		mov	rbp, rsp	#,
 5027              		.cfi_def_cfa_register 6
 5028 1d7c 4989D2   		mov	r10, rdx	# size, tmp1103
 5029 1d7f 4157     		push	r15	#
 5030              	# sieve_extend.c:749:     register counter_t copy_word = wordindex(copy_start);
 749:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 5031              		.loc 1 749 24 view .LVU1723
 5032 1d81 4D89C3   		mov	r11, r8	# copy_word, copy_start
 5033              	# sieve_extend.c:741: static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source
 741:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 5034              		.loc 1 741 142 view .LVU1724
 5035 1d84 4156     		push	r14	#
 5036              	# sieve_extend.c:749:     register counter_t copy_word = wordindex(copy_start);
 749:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 5037              		.loc 1 749 24 view .LVU1725
 5038 1d86 49C1EB06 		shr	r11, 6	# copy_word,
 5039              		.cfi_offset 15, -24
 5040              		.cfi_offset 14, -32
 5041              	# sieve_extend.c:744:     const counter_t destination_stop_word = wordindex(destination_stop);
 744:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 5042              		.loc 1 744 21 view .LVU1726
 5043 1d8a 4989CE   		mov	r14, rcx	# destination_stop_word, tmp1104
 5044              	# sieve_extend.c:741: static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source
 741:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 5045              		.loc 1 741 142 view .LVU1727
 5046 1d8d 4155     		push	r13	#
 5047 1d8f 4154     		push	r12	#
 5048 1d91 53       		push	rbx	#
 5049              		.cfi_offset 13, -40
 5050              		.cfi_offset 12, -48
 5051              		.cfi_offset 3, -56
 5052 1d92 4889FB   		mov	rbx, rdi	# bitarray, tmp1101
 5053 1d95 4883E4E0 		and	rsp, -32	#,
 5054 1d99 488D6424 		lea	rsp, -96[rsp]	#,
 5054      A0
GAS LISTING /tmp/cclewcPz.s 			page 143


 5055              	# sieve_extend.c:744:     const counter_t destination_stop_word = wordindex(destination_stop);
 744:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 5056              		.loc 1 744 21 view .LVU1728
 5057 1d9e 48894C24 		mov	QWORD PTR 88[rsp], rcx	# %sfp, destination_stop_word
 5057      58
 5058              	.LVL256:
 745:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_calc(copy_start);
 5059              		.loc 1 745 5 is_stmt 1 view .LVU1729
 746:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 5060              		.loc 1 746 5 view .LVU1730
 5061              	# sieve_extend.c:746:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 746:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 5062              		.loc 1 746 39 is_stmt 0 view .LVU1731
 5063 1da3 4889F1   		mov	rcx, rsi	# _4, source_start
 5064              	.LVL257:
 5065              	# sieve_extend.c:748:     register counter_t source_word = wordindex(source_start);
 748:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 5066              		.loc 1 748 24 view .LVU1732
 5067 1da6 48C1EE06 		shr	rsi, 6	# source_start,
 5068              	.LVL258:
 5069              	# sieve_extend.c:746:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 746:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 5070              		.loc 1 746 39 view .LVU1733
 5071 1daa 83E13F   		and	ecx, 63	# _4,
 5072              	.LVL259:
 5073              	# sieve_extend.c:741: static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source
 741:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 5074              		.loc 1 741 142 view .LVU1734
 5075 1dad 48895424 		mov	QWORD PTR 24[rsp], rdx	# %sfp, size
 5075      18
 5076              	# sieve_extend.c:748:     register counter_t source_word = wordindex(source_start);
 748:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 5077              		.loc 1 748 24 view .LVU1735
 5078 1db2 4989F1   		mov	r9, rsi	# source_word, source_start
 5079              	# sieve_extend.c:746:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 746:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 5080              		.loc 1 746 69 view .LVU1736
 5081 1db5 4C89C2   		mov	rdx, r8	# _5, copy_start
 5082              	.LVL260:
 5083              	# sieve_extend.c:746:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 746:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 5084              		.loc 1 746 31 view .LVU1737
 5085 1db8 4989CF   		mov	r15, rcx	# shift, _4
 5086              	# sieve_extend.c:751:                              | (bitarray[source_word+1] << shift_flipped))
 751:sieve_extend.c ****                              & ~chopmask(copy_start); // because this is the first word, dont copy 
 5087              		.loc 1 751 41 view .LVU1738
 5088 1dbb 4D8D6101 		lea	r12, 1[r9]	# tmp.337,
 5089              	# sieve_extend.c:746:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 746:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 5090              		.loc 1 746 69 view .LVU1739
 5091 1dbf 83E23F   		and	edx, 63	# _5,
 5092              	.LVL261:
 747:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 5093              		.loc 1 747 5 is_stmt 1 view .LVU1740
 748:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 5094              		.loc 1 748 5 view .LVU1741
 749:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
GAS LISTING /tmp/cclewcPz.s 			page 144


 5095              		.loc 1 749 5 view .LVU1742
 750:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 5096              		.loc 1 750 5 view .LVU1743
 5097              	# sieve_extend.c:746:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 746:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 5098              		.loc 1 746 31 is_stmt 0 view .LVU1744
 5099 1dc2 4929D7   		sub	r15, rdx	# shift, _5
 5100              	.LVL262:
 5101              	# sieve_extend.c:757:     const counter_t aligned_copy_word = min(source_word + size, destination_s
 757:sieve_extend.c ****     const counter_t distance  = extendSieve_shiftleft_unrolled(bitarray, aligned_copy_word, shift, 
 5102              		.loc 1 757 41 view .LVU1745
 5103 1dc5 4F8D1414 		lea	r10, [r12+r10]	# tmp563,
 5104              	.LVL263:
 5105              	# sieve_extend.c:750:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 750:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 5106              		.loc 1 750 25 view .LVU1746
 5107 1dc9 4A8D34DD 		lea	rsi, 0[0+r11*8]	# _6,
 5107      00000000 
 5108              	# sieve_extend.c:747:     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 747:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 5109              		.loc 1 747 31 view .LVU1747
 5110 1dd1 4829CA   		sub	rdx, rcx	# tmp550, _4
 5111              	.LVL264:
 5112              	# sieve_extend.c:750:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 750:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 5113              		.loc 1 750 38 view .LVU1748
 5114 1dd4 4A8D04CD 		lea	rax, 0[0+r9*8]	# _9,
 5114      00000000 
 5115              	# sieve_extend.c:747:     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 747:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 5116              		.loc 1 747 31 view .LVU1749
 5117 1ddc 4883C240 		add	rdx, 64	# shift_flipped,
 5118              	.LVL265:
 5119              	# sieve_extend.c:752:                              & ~chopmask(copy_start); // because this is the 
 752:sieve_extend.c **** 
 5120              		.loc 1 752 33 view .LVU1750
 5121 1de0 41F7D0   		not	r8d	# tmp557
 5122              	.LVL266:
 5123              	# sieve_extend.c:751:                              | (bitarray[source_word+1] << shift_flipped))
 751:sieve_extend.c ****                              & ~chopmask(copy_start); // because this is the first word, dont copy 
 5124              		.loc 1 751 57 view .LVU1751
 5125 1de3 C462E9F7 		shlx	r13, QWORD PTR 8[rdi+rax], rdx	# tmp552, *_16, shift_flipped
 5125      6C0708
 5126              	# sieve_extend.c:750:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 750:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 5127              		.loc 1 750 52 view .LVU1752
 5128 1dea 4A8B3CCF 		mov	rdi, QWORD PTR [rdi+r9*8]	# *_10, *_10
 5129              	.LVL267:
 5130              	# sieve_extend.c:752:                              & ~chopmask(copy_start); // because this is the 
 752:sieve_extend.c **** 
 5131              		.loc 1 752 33 view .LVU1753
 5132 1dee 48C7C1FF 		mov	rcx, -1	# tmp560,
 5132      FFFFFF
 5133              	# sieve_extend.c:750:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 750:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 5134              		.loc 1 750 52 view .LVU1754
 5135 1df5 C46283F7 		shrx	r9, rdi, r15	# tmp554, *_10, shift
GAS LISTING /tmp/cclewcPz.s 			page 145


 5135      CF
 5136              	# sieve_extend.c:752:                              & ~chopmask(copy_start); // because this is the 
 752:sieve_extend.c **** 
 5137              		.loc 1 752 33 view .LVU1755
 5138 1dfa C462BBF7 		shrx	r8, rcx, r8	# tmp559, tmp560, tmp557
 5138      C1
 5139              	# sieve_extend.c:750:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 750:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 5140              		.loc 1 750 52 view .LVU1756
 5141 1dff 44897C24 		mov	DWORD PTR 72[rsp], r15d	# %sfp, shift
 5141      48
 5142              	# sieve_extend.c:751:                              | (bitarray[source_word+1] << shift_flipped))
 751:sieve_extend.c ****                              & ~chopmask(copy_start); // because this is the first word, dont copy 
 5143              		.loc 1 751 30 view .LVU1757
 5144 1e04 4D09E9   		or	r9, r13	# tmp556, tmp552
 5145              	# sieve_extend.c:752:                              & ~chopmask(copy_start); // because this is the 
 752:sieve_extend.c **** 
 5146              		.loc 1 752 30 view .LVU1758
 5147 1e07 C442B8F2 		andn	r13, r8, r9	# tmp562, tmp559, tmp556
 5147      E9
 5148              	# sieve_extend.c:750:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 750:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 5149              		.loc 1 750 25 view .LVU1759
 5150 1e0c 4C092C33 		or	QWORD PTR [rbx+rsi], r13	# *_7, tmp562
 754:sieve_extend.c ****     source_word++;
 5151              		.loc 1 754 5 is_stmt 1 view .LVU1760
 5152              	# sieve_extend.c:757:     const counter_t aligned_copy_word = min(source_word + size, destination_s
 757:sieve_extend.c ****     const counter_t distance  = extendSieve_shiftleft_unrolled(bitarray, aligned_copy_word, shift, 
 5153              		.loc 1 757 21 is_stmt 0 view .LVU1761
 5154 1e10 4D39F2   		cmp	r10, r14	# tmp563, destination_stop_word
 5155              	.LBB353:
 5156              	.LBB354:
 5157              	# sieve_extend.c:648:     const counter_t fast_loop_stop_word = (aligned_copy_word>2) ? (aligned_co
 648:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 5158              		.loc 1 648 91 view .LVU1762
 5159 1e13 41B90200 		mov	r9d, 2	# tmp564,
 5159      0000
 5160              	.LBE354:
 5161              	.LBE353:
 5162              	# sieve_extend.c:751:                              | (bitarray[source_word+1] << shift_flipped))
 751:sieve_extend.c ****                              & ~chopmask(copy_start); // because this is the first word, dont copy 
 5163              		.loc 1 751 57 view .LVU1763
 5164 1e19 89542440 		mov	DWORD PTR 64[rsp], edx	# %sfp, shift_flipped
 5165              	# sieve_extend.c:754:     copy_word++;
 754:sieve_extend.c ****     source_word++;
 5166              		.loc 1 754 14 view .LVU1764
 5167 1e1d 4D8D6B01 		lea	r13, 1[r11]	# tmp.338,
 5168              	.LVL268:
 755:sieve_extend.c **** 
 5169              		.loc 1 755 5 is_stmt 1 view .LVU1765
 757:sieve_extend.c ****     const counter_t distance  = extendSieve_shiftleft_unrolled(bitarray, aligned_copy_word, shift, 
 5170              		.loc 1 757 5 view .LVU1766
 5171              	# sieve_extend.c:757:     const counter_t aligned_copy_word = min(source_word + size, destination_s
 757:sieve_extend.c ****     const counter_t distance  = extendSieve_shiftleft_unrolled(bitarray, aligned_copy_word, shift, 
 5172              		.loc 1 757 21 is_stmt 0 view .LVU1767
 5173 1e21 4D0F47D6 		cmova	r10, r14	# tmp563,, tmp563, destination_stop_word
 5174 1e25 4C895424 		mov	QWORD PTR 80[rsp], r10	# %sfp, aligned_copy_word
GAS LISTING /tmp/cclewcPz.s 			page 146


 5174      50
 5175              	.LVL269:
 758:sieve_extend.c ****     source_word += distance;
 5176              		.loc 1 758 5 is_stmt 1 view .LVU1768
 5177              	.LBB379:
 5178              	.LBI353:
 647:sieve_extend.c ****     const counter_t fast_loop_stop_word = (aligned_copy_word>2) ? (aligned_copy_word - 2) : 0; // s
 5179              		.loc 1 647 25 view .LVU1769
 5180              	.LBB376:
 648:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 5181              		.loc 1 648 5 view .LVU1770
 5182              	# sieve_extend.c:648:     const counter_t fast_loop_stop_word = (aligned_copy_word>2) ? (aligned_co
 648:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 5183              		.loc 1 648 91 is_stmt 0 view .LVU1771
 5184 1e2a 4983FA02 		cmp	r10, 2	# aligned_copy_word,
 5185 1e2e 4D0F43CA 		cmovnb	r9, r10	# aligned_copy_word,, _86
 5186              	# sieve_extend.c:648:     const counter_t fast_loop_stop_word = (aligned_copy_word>2) ? (aligned_co
 648:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 5187              		.loc 1 648 21 view .LVU1772
 5188 1e32 498D79FE 		lea	rdi, -2[r9]	# fast_loop_stop_word,
 5189 1e36 48897C24 		mov	QWORD PTR 48[rsp], rdi	# %sfp, fast_loop_stop_word
 5189      30
 5190              	.LVL270:
 649:sieve_extend.c ****     counter_t distance = 0;
 5191              		.loc 1 649 5 is_stmt 1 view .LVU1773
 650:sieve_extend.c ****     while (copy_word < fast_loop_stop_word) {
 5192              		.loc 1 650 5 view .LVU1774
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5193              		.loc 1 651 5 view .LVU1775
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5194              		.loc 1 651 11 view .LVU1776
 5195 1e3b 4939FD   		cmp	r13, rdi	# tmp.338, fast_loop_stop_word
 5196 1e3e 0F83A004 		jnb	.L434	#,
 5196      0000
 5197 1e44 4D29D9   		sub	r9, r11	# tmp565, copy_word
 5198 1e47 4C8D5040 		lea	r10, 64[rax]	# tmp567,
 5199              	.LVL271:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5200              		.loc 1 651 11 is_stmt 0 view .LVU1777
 5201 1e4b 4C8D4610 		lea	r8, 16[rsi]	# tmp568,
 5202 1e4f 498D49FC 		lea	rcx, -4[r9]	# _282,
 5203 1e53 4C8D7648 		lea	r14, 72[rsi]	# tmp571,
 5204              	.LVL272:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5205              		.loc 1 651 11 view .LVU1778
 5206 1e57 4D39C2   		cmp	r10, r8	# tmp567, tmp568
 5207 1e5a 48894C24 		mov	QWORD PTR 56[rsp], rcx	# %sfp, _282
 5207      38
 5208 1e5f 488D4808 		lea	rcx, 8[rax]	# tmp787,
 5209 1e63 410F9EC1 		setle	r9b	#, tmp570
 5210 1e67 4939CE   		cmp	r14, rcx	# tmp571, tmp787
 5211 1e6a 400F9EC7 		setle	dil	#, tmp574
 5212              	.LVL273:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5213              		.loc 1 651 11 view .LVU1779
 5214 1e6e 4109F9   		or	r9d, edi	# tmp575, tmp574
 5215 1e71 488D7850 		lea	rdi, 80[rax]	# tmp576,
GAS LISTING /tmp/cclewcPz.s 			page 147


 5216 1e75 48897C24 		mov	QWORD PTR 40[rsp], rdi	# %sfp, tmp576
 5216      28
 5217 1e7a 4C39C7   		cmp	rdi, r8	# tmp576, tmp568
 5218 1e7d 0F9E4424 		setle	BYTE PTR 39[rsp]	#, %sfp
 5218      27
 5219 1e82 4883C010 		add	rax, 16	# tmp581,
 5220 1e86 4939C6   		cmp	r14, rax	# tmp571, tmp581
 5221 1e89 400F9EC7 		setle	dil	#, tmp583
 5222 1e8d 400A7C24 		or	dil, BYTE PTR 39[rsp]	# tmp584, %sfp
 5222      27
 5223 1e92 4421CF   		and	edi, r9d	# tmp585, tmp575
 5224 1e95 48837C24 		cmp	QWORD PTR 56[rsp], 11	# %sfp,
 5224      380B
 5225 1e9b 410F97C1 		seta	r9b	#, tmp587
 5226 1e9f 4421CF   		and	edi, r9d	# tmp588, tmp587
 5227 1ea2 4C8D4E08 		lea	r9, 8[rsi]	# tmp590,
 5228 1ea6 4D39CA   		cmp	r10, r9	# tmp567, tmp590
 5229 1ea9 410F9EC2 		setle	r10b	#, tmp592
 5230 1ead 4883C640 		add	rsi, 64	# tmp593,
 5231 1eb1 4839CE   		cmp	rsi, rcx	# tmp593, tmp787
 5232 1eb4 0F9E4424 		setle	BYTE PTR 39[rsp]	#, %sfp
 5232      27
 5233 1eb9 440A5424 		or	r10b, BYTE PTR 39[rsp]	# tmp597, %sfp
 5233      27
 5234 1ebe 4421D7   		and	edi, r10d	# tmp598, tmp597
 5235 1ec1 4C394C24 		cmp	QWORD PTR 40[rsp], r9	# %sfp, tmp590
 5235      28
 5236 1ec6 410F9EC2 		setle	r10b	#, tmp602
 5237 1eca 4839C6   		cmp	rsi, rax	# tmp593, tmp581
 5238 1ecd 0F9E4424 		setle	BYTE PTR 40[rsp]	#, %sfp
 5238      28
 5239 1ed2 440A5424 		or	r10b, BYTE PTR 40[rsp]	# tmp607, %sfp
 5239      28
 5240 1ed7 4484D7   		test	dil, r10b	# tmp598, tmp607
 5241 1eda 0F84E80C 		je	.L435	#,
 5241      0000
 5242 1ee0 4D39CE   		cmp	r14, r9	# tmp571, tmp590
 5243 1ee3 410F9EC6 		setle	r14b	#, tmp612
 5244 1ee7 4C39C6   		cmp	rsi, r8	# tmp593, tmp568
 5245 1eea 400F9EC6 		setle	sil	#, tmp616
 5246 1eee 4108F6   		or	r14b, sil	# tmp612, tmp616
 5247 1ef1 0F84D10C 		je	.L435	#,
 5247      0000
 5248 1ef7 4801D9   		add	rcx, rbx	# vectp.359, bitarray
 5249 1efa 4801D8   		add	rax, rbx	# vectp.363, bitarray
 5250              	.LBB355:
 5251              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5252              		.loc 1 653 19 view .LVU1780
 5253 1efd C5FE6F08 		vmovdqu	ymm1, YMMWORD PTR [rax]	# MEM[base: vectp.363_449, index: ivtmp.414_748, offset: 0B], MEM[
 5254 1f01 C4C1796E 		vmovd	xmm3, r15d	# _12,
 5254      DF
 5255 1f06 C5FE6F40 		vmovdqu	ymm0, YMMWORD PTR 32[rax]	# MEM[base: vectp.363_449, index: ivtmp.414_748, offset: 32B], M
 5255      20
 5256 1f0b C5F96EE2 		vmovd	xmm4, edx	# _18,
 5257              	# sieve_extend.c:652:         bitword_t source0 = bitarray[source_word  ];
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
GAS LISTING /tmp/cclewcPz.s 			page 148


 5258              		.loc 1 652 19 view .LVU1781
 5259 1f0f C5FE6F39 		vmovdqu	ymm7, YMMWORD PTR [rcx]	# tmp1186, MEM[base: vectp.359_440, index: ivtmp.414_748, offset: 
 5260              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5261              		.loc 1 653 19 view .LVU1782
 5262 1f13 C5F56CE8 		vpunpcklqdq	ymm5, ymm1, ymm0	# tmp624, MEM[base: vectp.363_449, index: ivtmp.414_748, offset: 0B],
 5263 1f17 C5756DF0 		vpunpckhqdq	ymm14, ymm1, ymm0	# tmp642, MEM[base: vectp.363_449, index: ivtmp.414_748, offset: 0B]
 5264              	# sieve_extend.c:652:         bitword_t source0 = bitarray[source_word  ];
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5265              		.loc 1 652 19 view .LVU1783
 5266 1f1b C5C56C51 		vpunpcklqdq	ymm2, ymm7, YMMWORD PTR 32[rcx]	# tmp628, tmp1186, MEM[base: vectp.359_440, index: ivt
 5266      20
 5267 1f20 4C8B7424 		mov	r14, QWORD PTR 56[rsp]	# _282, %sfp
 5267      38
 5268              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5269              		.loc 1 653 19 view .LVU1784
 5270 1f25 C463FD00 		vpermq	ymm8, ymm5, 216	# vect_perm_even_457, tmp624,
 5270      C5D8
 5271              	# sieve_extend.c:652:         bitword_t source0 = bitarray[source_word  ];
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5272              		.loc 1 652 19 view .LVU1785
 5273 1f2b C4E3FD00 		vpermq	ymm6, ymm2, 216	# tmp627, tmp628,
 5273      F2D8
 5274              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5275              		.loc 1 653 19 view .LVU1786
 5276 1f31 C443FD00 		vpermq	ymm15, ymm14, 216	# tmp641, tmp642,
 5276      FED8
 5277              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5278              		.loc 1 654 63 view .LVU1787
 5279 1f37 C53DF3D4 		vpsllq	ymm10, ymm8, xmm4	# vect__100.367, vect_perm_even_457, _18
 5280              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5281              		.loc 1 654 42 view .LVU1788
 5282 1f3b C54DD3CB 		vpsrlq	ymm9, ymm6, xmm3	# vect__98.366, tmp627, _12
 5283              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5284              		.loc 1 656 42 view .LVU1789
 5285 1f3f C5BDD3C3 		vpsrlq	ymm0, ymm8, xmm3	# vect__109.369, vect_perm_even_457, _12
 5286              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5287              		.loc 1 656 63 view .LVU1790
 5288 1f43 C585F3CC 		vpsllq	ymm1, ymm15, xmm4	# vect__110.370, tmp641, _18
 5289 1f47 49C1EE03 		shr	r14, 3	# _282,
 5290              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5291              		.loc 1 654 52 view .LVU1791
 5292 1f4b C44135EB 		vpor	ymm11, ymm9, ymm10	# vect__104.368, vect__98.366, vect__100.367
 5292      DA
 5293              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5294              		.loc 1 656 52 view .LVU1792
 5295 1f50 C5F5EBE8 		vpor	ymm5, ymm1, ymm0	# vect__114.371, vect__110.370, vect__109.369
 5296 1f54 4D8D56FF 		lea	r10, -1[r14]	# tmp809,
 5297              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
GAS LISTING /tmp/cclewcPz.s 			page 149


 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5298              		.loc 1 654 31 view .LVU1793
 5299 1f58 C4437D39 		vextracti128	xmm13, ymm11, 0x1	# tmp638, vect__104.368
 5299      DD01
 5300 1f5e 4183E201 		and	r10d, 1	# tmp811,
 5301              	.LVL274:
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5302              		.loc 1 652 9 is_stmt 1 view .LVU1794
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5303              		.loc 1 653 9 view .LVU1795
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5304              		.loc 1 654 9 view .LVU1796
 5305              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5306              		.loc 1 656 31 is_stmt 0 view .LVU1797
 5307 1f62 C4E37D39 		vextracti128	xmm7, ymm5, 0x1	# tmp652, vect__114.371
 5307      EF01
 5308 1f68 4983FE01 		cmp	r14, 1	# bnd.352,
 5309              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5310              		.loc 1 654 31 view .LVU1798
 5311 1f6c C42179D6 		vmovq	QWORD PTR [rbx+r9], xmm11	# MEM[base: _463, index: ivtmp.414_748, offset: 0B], tmp634
 5311      1C0B
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5312              		.loc 1 654 31 view .LVU1799
 5313 1f72 4E8D1C0B 		lea	r11, [rbx+r9]	# _463,
 5314 1f76 C423F916 		vpextrq	QWORD PTR 16[rbx+r9], xmm11, 1	# MEM[base: _463, index: ivtmp.414_748, offset: 16B], tmp63
 5314      5C0B1001 
 5315 1f7e 4A8D3C03 		lea	rdi, [rbx+r8]	# _483,
 5316 1f82 C42179D6 		vmovq	QWORD PTR 32[rbx+r9], xmm13	# MEM[base: _463, index: ivtmp.414_748, offset: 32B], tmp638
 5316      6C0B20
 5317 1f89 C423F916 		vpextrq	QWORD PTR 48[rbx+r9], xmm13, 1	# MEM[base: _463, index: ivtmp.414_748, offset: 48B], tmp63
 5317      6C0B3001 
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 5318              		.loc 1 655 9 is_stmt 1 view .LVU1800
 5319              	.LVL275:
 656:sieve_extend.c ****         copy_word += 2;
 5320              		.loc 1 656 9 view .LVU1801
 5321 1f91 41B90100 		mov	r9d, 1	# ivtmp.412,
 5321      0000
 5322              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5323              		.loc 1 656 31 is_stmt 0 view .LVU1802
 5324 1f97 C4A179D6 		vmovq	QWORD PTR [rbx+r8], xmm5	# MEM[base: _483, index: ivtmp.414_748, offset: 0B], tmp648
 5324      2C03
 656:sieve_extend.c ****         copy_word += 2;
 5325              		.loc 1 656 31 view .LVU1803
 5326 1f9d C4A3F916 		vpextrq	QWORD PTR 16[rbx+r8], xmm5, 1	# MEM[base: _483, index: ivtmp.414_748, offset: 16B], tmp648
 5326      6C031001 
 5327 1fa5 C4A179D6 		vmovq	QWORD PTR 32[rbx+r8], xmm7	# MEM[base: _483, index: ivtmp.414_748, offset: 32B], tmp652
 5327      7C0320
 5328 1fac C4A3F916 		vpextrq	QWORD PTR 48[rbx+r8], xmm7, 1	# MEM[base: _483, index: ivtmp.414_748, offset: 48B], tmp652
 5328      7C033001 
 657:sieve_extend.c ****         source_word += 2;
 5329              		.loc 1 657 9 is_stmt 1 view .LVU1804
 658:sieve_extend.c ****         distance += 2;
 5330              		.loc 1 658 9 view .LVU1805
GAS LISTING /tmp/cclewcPz.s 			page 150


 659:sieve_extend.c ****     }
 5331              		.loc 1 659 9 view .LVU1806
 659:sieve_extend.c ****     }
 5332              		.loc 1 659 9 is_stmt 0 view .LVU1807
 5333              	.LBE355:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5334              		.loc 1 651 11 is_stmt 1 view .LVU1808
 5335 1fb4 41B84000 		mov	r8d, 64	# ivtmp.414,
 5335      0000
 5336 1fba 0F86EC01 		jbe	.L580	#,
 5336      0000
 5337 1fc0 4D85D2   		test	r10, r10	# tmp811
 5338 1fc3 0F84A700 		je	.L436	#,
 5338      0000
 5339              	.LBB356:
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5340              		.loc 1 652 9 view .LVU1809
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5341              		.loc 1 653 9 view .LVU1810
 5342              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5343              		.loc 1 653 19 is_stmt 0 view .LVU1811
 5344 1fc9 C57E6F48 		vmovdqu	ymm9, YMMWORD PTR 64[rax]	# MEM[base: vectp.363_449, index: ivtmp.414_748, offset: 0B], ME
 5344      40
 5345 1fce 4983FE02 		cmp	r14, 2	# bnd.352,
 5346 1fd2 C57E6F50 		vmovdqu	ymm10, YMMWORD PTR 96[rax]	# MEM[base: vectp.363_449, index: ivtmp.414_748, offset: 32B], 
 5346      60
 5347 1fd7 41B90200 		mov	r9d, 2	# ivtmp.412,
 5347      0000
 5348              	# sieve_extend.c:652:         bitword_t source0 = bitarray[source_word  ];
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5349              		.loc 1 652 19 view .LVU1812
 5350 1fdd C5FE6F71 		vmovdqu	ymm6, YMMWORD PTR 64[rcx]	# tmp1287, MEM[base: vectp.359_440, index: ivtmp.414_748, offset
 5350      40
 5351              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5352              		.loc 1 653 19 view .LVU1813
 5353 1fe2 C4C1356C 		vpunpcklqdq	ymm2, ymm9, ymm10	# tmp1075, MEM[base: vectp.363_449, index: ivtmp.414_748, offset: 0B
 5353      D2
 5354 1fe7 C441356D 		vpunpckhqdq	ymm8, ymm9, ymm10	# tmp1090, MEM[base: vectp.363_449, index: ivtmp.414_748, offset: 0B
 5354      C2
 5355              	# sieve_extend.c:652:         bitword_t source0 = bitarray[source_word  ];
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5356              		.loc 1 652 19 view .LVU1814
 5357 1fec C54D6C61 		vpunpcklqdq	ymm12, ymm6, YMMWORD PTR 96[rcx]	# tmp1079, tmp1287, MEM[base: vectp.359_440, index: i
 5357      60
 5358              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5359              		.loc 1 653 19 view .LVU1815
 5360 1ff1 C463FD00 		vpermq	ymm11, ymm2, 216	# vect_perm_even_457, tmp1075,
 5360      DAD8
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5361              		.loc 1 654 9 is_stmt 1 view .LVU1816
 5362              	# sieve_extend.c:652:         bitword_t source0 = bitarray[source_word  ];
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5363              		.loc 1 652 19 is_stmt 0 view .LVU1817
 5364 1ff7 C443FD00 		vpermq	ymm13, ymm12, 216	# tmp1080, tmp1079,
GAS LISTING /tmp/cclewcPz.s 			page 151


 5364      ECD8
 5365              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5366              		.loc 1 653 19 view .LVU1818
 5367 1ffd C4C3FD00 		vpermq	ymm7, ymm8, 216	# tmp1091, tmp1090,
 5367      F8D8
 5368 2003 41B88000 		mov	r8d, 128	# ivtmp.414,
 5368      0000
 5369              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5370              		.loc 1 654 42 view .LVU1819
 5371 2009 C515D3F3 		vpsrlq	ymm14, ymm13, xmm3	# vect__98.366, tmp1080, _12
 5372              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5373              		.loc 1 654 63 view .LVU1820
 5374 200d C525F3FC 		vpsllq	ymm15, ymm11, xmm4	# vect__100.367, vect_perm_even_457, _18
 5375              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5376              		.loc 1 656 42 view .LVU1821
 5377 2011 C525D3D3 		vpsrlq	ymm10, ymm11, xmm3	# vect__109.369, vect_perm_even_457, _12
 5378              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5379              		.loc 1 656 63 view .LVU1822
 5380 2015 C545F3CC 		vpsllq	ymm9, ymm7, xmm4	# vect__110.370, tmp1091, _18
 5381              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5382              		.loc 1 654 52 view .LVU1823
 5383 2019 C4C10DEB 		vpor	ymm1, ymm14, ymm15	# vect__104.368, vect__98.366, vect__100.367
 5383      CF
 5384              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5385              		.loc 1 656 52 view .LVU1824
 5386 201e C4C135EB 		vpor	ymm2, ymm9, ymm10	# vect__114.371, vect__110.370, vect__109.369
 5386      D2
 5387              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5388              		.loc 1 654 31 view .LVU1825
 5389 2023 C4E37D39 		vextracti128	xmm5, ymm1, 0x1	# tmp1087, vect__104.368
 5389      CD01
 5390              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5391              		.loc 1 656 31 view .LVU1826
 5392 2029 C4E37D39 		vextracti128	xmm6, ymm2, 0x1	# tmp1098, vect__114.371
 5392      D601
 5393              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5394              		.loc 1 654 31 view .LVU1827
 5395 202f C4C179D6 		vmovq	QWORD PTR 64[r11], xmm1	# MEM[base: _463, index: ivtmp.414_748, offset: 0B], tmp1084
 5395      4B40
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5396              		.loc 1 654 31 view .LVU1828
 5397 2035 C4C3F916 		vpextrq	QWORD PTR 80[r11], xmm1, 1	# MEM[base: _463, index: ivtmp.414_748, offset: 16B], tmp1084
 5397      4B5001
 5398 203c C4C179D6 		vmovq	QWORD PTR 96[r11], xmm5	# MEM[base: _463, index: ivtmp.414_748, offset: 32B], tmp1087
 5398      6B60
 5399 2042 C4C3F916 		vpextrq	QWORD PTR 112[r11], xmm5, 1	# MEM[base: _463, index: ivtmp.414_748, offset: 48B], tmp1087
 5399      6B7001
GAS LISTING /tmp/cclewcPz.s 			page 152


 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 5400              		.loc 1 655 9 is_stmt 1 view .LVU1829
 656:sieve_extend.c ****         copy_word += 2;
 5401              		.loc 1 656 9 view .LVU1830
 5402              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5403              		.loc 1 656 31 is_stmt 0 view .LVU1831
 5404 2049 C5F9D657 		vmovq	QWORD PTR 64[rdi], xmm2	# MEM[base: _483, index: ivtmp.414_748, offset: 0B], tmp1095
 5404      40
 656:sieve_extend.c ****         copy_word += 2;
 5405              		.loc 1 656 31 view .LVU1832
 5406 204e C4E3F916 		vpextrq	QWORD PTR 80[rdi], xmm2, 1	# MEM[base: _483, index: ivtmp.414_748, offset: 16B], tmp1095
 5406      575001
 5407 2055 C5F9D677 		vmovq	QWORD PTR 96[rdi], xmm6	# MEM[base: _483, index: ivtmp.414_748, offset: 32B], tmp1098
 5407      60
 5408 205a C4E3F916 		vpextrq	QWORD PTR 112[rdi], xmm6, 1	# MEM[base: _483, index: ivtmp.414_748, offset: 48B], tmp1098
 5408      777001
 657:sieve_extend.c ****         source_word += 2;
 5409              		.loc 1 657 9 is_stmt 1 view .LVU1833
 658:sieve_extend.c ****         distance += 2;
 5410              		.loc 1 658 9 view .LVU1834
 659:sieve_extend.c ****     }
 5411              		.loc 1 659 9 view .LVU1835
 659:sieve_extend.c ****     }
 5412              		.loc 1 659 9 is_stmt 0 view .LVU1836
 5413              	.LBE356:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5414              		.loc 1 651 11 is_stmt 1 view .LVU1837
 5415 2061 0F864501 		jbe	.L580	#,
 5415      0000
 5416 2067 660F1F84 		.p2align 4
 5416      00000000 
 5416      00
 5417              		.p2align 3
 5418              	.L436:
 5419              	.LBB357:
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5420              		.loc 1 652 9 view .LVU1838
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5421              		.loc 1 653 9 view .LVU1839
 5422              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5423              		.loc 1 653 19 is_stmt 0 view .LVU1840
 5424 2070 C4217E6F 		vmovdqu	ymm12, YMMWORD PTR [rax+r8]	# MEM[base: vectp.363_449, index: ivtmp.414_748, offset: 0B], 
 5424      2400
 5425 2076 4983C102 		add	r9, 2	# ivtmp.412,
 5426 207a C4217E6F 		vmovdqu	ymm13, YMMWORD PTR 32[rax+r8]	# MEM[base: vectp.363_449, index: ivtmp.414_748, offset: 32B
 5426      6C0020
 5427              	# sieve_extend.c:652:         bitword_t source0 = bitarray[source_word  ];
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5428              		.loc 1 652 19 view .LVU1841
 5429 2081 C4A17E6F 		vmovdqu	ymm1, YMMWORD PTR [rcx+r8]	# tmp1187, MEM[base: vectp.359_440, index: ivtmp.414_748, offse
 5429      0C01
 5430              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5431              		.loc 1 653 19 view .LVU1842
 5432 2087 C4411D6C 		vpunpcklqdq	ymm14, ymm12, ymm13	# tmp818, MEM[base: vectp.363_449, index: ivtmp.414_748, offset: 0
GAS LISTING /tmp/cclewcPz.s 			page 153


 5432      F5
 5433 208c C4411D6D 		vpunpckhqdq	ymm11, ymm12, ymm13	# tmp833, MEM[base: vectp.363_449, index: ivtmp.414_748, offset: 0
 5433      DD
 5434              	# sieve_extend.c:652:         bitword_t source0 = bitarray[source_word  ];
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5435              		.loc 1 652 19 view .LVU1843
 5436 2091 C4A1756C 		vpunpcklqdq	ymm0, ymm1, YMMWORD PTR 32[rcx+r8]	# tmp822, tmp1187, MEM[base: vectp.359_440, index: 
 5436      440120
 5437              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5438              		.loc 1 653 19 view .LVU1844
 5439 2098 C443FD00 		vpermq	ymm15, ymm14, 216	# vect_perm_even_457, tmp818,
 5439      FED8
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5440              		.loc 1 654 9 is_stmt 1 view .LVU1845
 5441              	# sieve_extend.c:652:         bitword_t source0 = bitarray[source_word  ];
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5442              		.loc 1 652 19 is_stmt 0 view .LVU1846
 5443 209e C4E3FD00 		vpermq	ymm5, ymm0, 216	# tmp823, tmp822,
 5443      E8D8
 5444              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5445              		.loc 1 653 19 view .LVU1847
 5446 20a4 C4C3FD00 		vpermq	ymm6, ymm11, 216	# tmp834, tmp833,
 5446      F3D8
 5447              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5448              		.loc 1 654 42 view .LVU1848
 5449 20aa C555D3C3 		vpsrlq	ymm8, ymm5, xmm3	# vect__98.366, tmp823, _12
 5450              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5451              		.loc 1 654 63 view .LVU1849
 5452 20ae C585F3FC 		vpsllq	ymm7, ymm15, xmm4	# vect__100.367, vect_perm_even_457, _18
 5453              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5454              		.loc 1 656 42 view .LVU1850
 5455 20b2 C505D3EB 		vpsrlq	ymm13, ymm15, xmm3	# vect__109.369, vect_perm_even_457, _12
 5456              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5457              		.loc 1 656 63 view .LVU1851
 5458 20b6 C54DF3E4 		vpsllq	ymm12, ymm6, xmm4	# vect__110.370, tmp834, _18
 5459              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5460              		.loc 1 654 52 view .LVU1852
 5461 20ba C53DEBCF 		vpor	ymm9, ymm8, ymm7	# vect__104.368, vect__98.366, vect__100.367
 5462              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5463              		.loc 1 656 52 view .LVU1853
 5464 20be C4411DEB 		vpor	ymm14, ymm12, ymm13	# vect__114.371, vect__110.370, vect__109.369
 5464      F5
 5465              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5466              		.loc 1 654 31 view .LVU1854
 5467 20c3 C4637D39 		vextracti128	xmm2, ymm9, 0x1	# tmp830, vect__104.368
 5467      CA01
 5468              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
GAS LISTING /tmp/cclewcPz.s 			page 154


 5469              		.loc 1 656 31 view .LVU1855
 5470 20c9 C4637D39 		vextracti128	xmm1, ymm14, 0x1	# tmp841, vect__114.371
 5470      F101
 5471              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5472              		.loc 1 654 31 view .LVU1856
 5473 20cf C40179D6 		vmovq	QWORD PTR [r11+r8], xmm9	# MEM[base: _463, index: ivtmp.414_748, offset: 0B], tmp827
 5473      0C03
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5474              		.loc 1 654 31 view .LVU1857
 5475 20d5 C403F916 		vpextrq	QWORD PTR 16[r11+r8], xmm9, 1	# MEM[base: _463, index: ivtmp.414_748, offset: 16B], tmp827
 5475      4C031001 
 5476 20dd C48179D6 		vmovq	QWORD PTR 32[r11+r8], xmm2	# MEM[base: _463, index: ivtmp.414_748, offset: 32B], tmp830
 5476      540320
 5477 20e4 C483F916 		vpextrq	QWORD PTR 48[r11+r8], xmm2, 1	# MEM[base: _463, index: ivtmp.414_748, offset: 48B], tmp830
 5477      54033001 
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 5478              		.loc 1 655 9 is_stmt 1 view .LVU1858
 656:sieve_extend.c ****         copy_word += 2;
 5479              		.loc 1 656 9 view .LVU1859
 5480              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5481              		.loc 1 656 31 is_stmt 0 view .LVU1860
 5482 20ec C42179D6 		vmovq	QWORD PTR [rdi+r8], xmm14	# MEM[base: _483, index: ivtmp.414_748, offset: 0B], tmp838
 5482      3407
 656:sieve_extend.c ****         copy_word += 2;
 5483              		.loc 1 656 31 view .LVU1861
 5484 20f2 C423F916 		vpextrq	QWORD PTR 16[rdi+r8], xmm14, 1	# MEM[base: _483, index: ivtmp.414_748, offset: 16B], tmp83
 5484      74071001 
 5485 20fa C4A179D6 		vmovq	QWORD PTR 32[rdi+r8], xmm1	# MEM[base: _483, index: ivtmp.414_748, offset: 32B], tmp841
 5485      4C0720
 5486 2101 C4A3F916 		vpextrq	QWORD PTR 48[rdi+r8], xmm1, 1	# MEM[base: _483, index: ivtmp.414_748, offset: 48B], tmp841
 5486      4C073001 
 657:sieve_extend.c ****         source_word += 2;
 5487              		.loc 1 657 9 is_stmt 1 view .LVU1862
 658:sieve_extend.c ****         distance += 2;
 5488              		.loc 1 658 9 view .LVU1863
 659:sieve_extend.c ****     }
 5489              		.loc 1 659 9 view .LVU1864
 659:sieve_extend.c ****     }
 5490              		.loc 1 659 9 is_stmt 0 view .LVU1865
 5491              	.LBE357:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5492              		.loc 1 651 11 is_stmt 1 view .LVU1866
 5493              	.LBB358:
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5494              		.loc 1 652 9 view .LVU1867
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5495              		.loc 1 653 9 view .LVU1868
 5496              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5497              		.loc 1 653 19 is_stmt 0 view .LVU1869
 5498 2109 C4217E6F 		vmovdqu	ymm8, YMMWORD PTR 64[rax+r8]	# MEM[base: vectp.363_449, index: ivtmp.414_748, offset: 0B],
 5498      440040
 5499 2110 C4A17E6F 		vmovdqu	ymm0, YMMWORD PTR 96[rax+r8]	# MEM[base: vectp.363_449, index: ivtmp.414_748, offset: 32B]
 5499      440060
 5500              	# sieve_extend.c:652:         bitword_t source0 = bitarray[source_word  ];
GAS LISTING /tmp/cclewcPz.s 			page 155


 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5501              		.loc 1 652 19 view .LVU1870
 5502 2117 C4A17E6F 		vmovdqu	ymm7, YMMWORD PTR 64[rcx+r8]	# tmp1188, MEM[base: vectp.359_440, index: ivtmp.414_748, off
 5502      7C0140
 5503              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5504              		.loc 1 653 19 view .LVU1871
 5505 211e C5BD6CE8 		vpunpcklqdq	ymm5, ymm8, ymm0	# tmp848, MEM[base: vectp.363_449, index: ivtmp.414_748, offset: 0B],
 5506 2122 C53D6DF8 		vpunpckhqdq	ymm15, ymm8, ymm0	# tmp863, MEM[base: vectp.363_449, index: ivtmp.414_748, offset: 0B]
 5507              	# sieve_extend.c:652:         bitword_t source0 = bitarray[source_word  ];
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5508              		.loc 1 652 19 view .LVU1872
 5509 2126 C421456C 		vpunpcklqdq	ymm10, ymm7, YMMWORD PTR 96[rcx+r8]	# tmp852, tmp1188, MEM[base: vectp.359_440, index:
 5509      540160
 5510              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5511              		.loc 1 653 19 view .LVU1873
 5512 212d C463FD00 		vpermq	ymm9, ymm5, 216	# vect_perm_even_457, tmp848,
 5512      CDD8
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5513              		.loc 1 654 9 is_stmt 1 view .LVU1874
 5514              	# sieve_extend.c:652:         bitword_t source0 = bitarray[source_word  ];
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5515              		.loc 1 652 19 is_stmt 0 view .LVU1875
 5516 2133 C4C3FD00 		vpermq	ymm2, ymm10, 216	# tmp853, tmp852,
 5516      D2D8
 5517              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5518              		.loc 1 653 19 view .LVU1876
 5519 2139 C4C3FD00 		vpermq	ymm1, ymm15, 216	# tmp864, tmp863,
 5519      CFD8
 5520              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5521              		.loc 1 654 42 view .LVU1877
 5522 213f C56DD3DB 		vpsrlq	ymm11, ymm2, xmm3	# vect__98.366, tmp853, _12
 5523              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5524              		.loc 1 654 63 view .LVU1878
 5525 2143 C5B5F3F4 		vpsllq	ymm6, ymm9, xmm4	# vect__100.367, vect_perm_even_457, _18
 5526              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5527              		.loc 1 656 42 view .LVU1879
 5528 2147 C5B5D3C3 		vpsrlq	ymm0, ymm9, xmm3	# vect__109.369, vect_perm_even_457, _12
 5529              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5530              		.loc 1 656 63 view .LVU1880
 5531 214b C575F3C4 		vpsllq	ymm8, ymm1, xmm4	# vect__110.370, tmp864, _18
 5532              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5533              		.loc 1 654 52 view .LVU1881
 5534 214f C525EBE6 		vpor	ymm12, ymm11, ymm6	# vect__104.368, vect__98.366, vect__100.367
 5535              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5536              		.loc 1 656 52 view .LVU1882
 5537 2153 C5BDEBE8 		vpor	ymm5, ymm8, ymm0	# vect__114.371, vect__110.370, vect__109.369
 5538              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
GAS LISTING /tmp/cclewcPz.s 			page 156


 5539              		.loc 1 654 31 view .LVU1883
 5540 2157 C4437D39 		vextracti128	xmm14, ymm12, 0x1	# tmp860, vect__104.368
 5540      E601
 5541              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5542              		.loc 1 656 31 view .LVU1884
 5543 215d C4E37D39 		vextracti128	xmm7, ymm5, 0x1	# tmp871, vect__114.371
 5543      EF01
 5544              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5545              		.loc 1 654 31 view .LVU1885
 5546 2163 C40179D6 		vmovq	QWORD PTR 64[r11+r8], xmm12	# MEM[base: _463, index: ivtmp.414_748, offset: 0B], tmp857
 5546      640340
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5547              		.loc 1 654 31 view .LVU1886
 5548 216a C403F916 		vpextrq	QWORD PTR 80[r11+r8], xmm12, 1	# MEM[base: _463, index: ivtmp.414_748, offset: 16B], tmp85
 5548      64035001 
 5549 2172 C40179D6 		vmovq	QWORD PTR 96[r11+r8], xmm14	# MEM[base: _463, index: ivtmp.414_748, offset: 32B], tmp860
 5549      740360
 5550 2179 C403F916 		vpextrq	QWORD PTR 112[r11+r8], xmm14, 1	# MEM[base: _463, index: ivtmp.414_748, offset: 48B], tmp8
 5550      74037001 
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 5551              		.loc 1 655 9 is_stmt 1 view .LVU1887
 656:sieve_extend.c ****         copy_word += 2;
 5552              		.loc 1 656 9 view .LVU1888
 5553              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5554              		.loc 1 656 31 is_stmt 0 view .LVU1889
 5555 2181 C4A179D6 		vmovq	QWORD PTR 64[rdi+r8], xmm5	# MEM[base: _483, index: ivtmp.414_748, offset: 0B], tmp868
 5555      6C0740
 656:sieve_extend.c ****         copy_word += 2;
 5556              		.loc 1 656 31 view .LVU1890
 5557 2188 C4A3F916 		vpextrq	QWORD PTR 80[rdi+r8], xmm5, 1	# MEM[base: _483, index: ivtmp.414_748, offset: 16B], tmp868
 5557      6C075001 
 5558 2190 C4A179D6 		vmovq	QWORD PTR 96[rdi+r8], xmm7	# MEM[base: _483, index: ivtmp.414_748, offset: 32B], tmp871
 5558      7C0760
 5559 2197 C4A3F916 		vpextrq	QWORD PTR 112[rdi+r8], xmm7, 1	# MEM[base: _483, index: ivtmp.414_748, offset: 48B], tmp87
 5559      7C077001 
 657:sieve_extend.c ****         source_word += 2;
 5560              		.loc 1 657 9 is_stmt 1 view .LVU1891
 658:sieve_extend.c ****         distance += 2;
 5561              		.loc 1 658 9 view .LVU1892
 659:sieve_extend.c ****     }
 5562              		.loc 1 659 9 view .LVU1893
 659:sieve_extend.c ****     }
 5563              		.loc 1 659 9 is_stmt 0 view .LVU1894
 5564              	.LBE358:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5565              		.loc 1 651 11 is_stmt 1 view .LVU1895
 5566 219f 4983E880 		sub	r8, -128	# ivtmp.414,
 5567 21a3 4D39CE   		cmp	r14, r9	# bnd.352, ivtmp.412
 5568 21a6 0F87C4FE 		ja	.L436	#,
 5568      FFFF
 5569              	.L580:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5570              		.loc 1 651 11 is_stmt 0 view .LVU1896
 5571 21ac 49C1E603 		sal	r14, 3	# _433,
GAS LISTING /tmp/cclewcPz.s 			page 157


 5572 21b0 4B8D0C34 		lea	rcx, [r12+r14]	# tmp.354,
 5573 21b4 4B8D4435 		lea	rax, 0[r13+r14]	# tmp.355,
 5573      00
 5574              	.LVL276:
 5575              	.LBB359:
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5576              		.loc 1 652 9 is_stmt 1 view .LVU1897
 5577              	# sieve_extend.c:652:         bitword_t source0 = bitarray[source_word  ];
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5578              		.loc 1 652 37 is_stmt 0 view .LVU1898
 5579 21b9 4C8D1CCD 		lea	r11, 0[0+rcx*8]	# _639,
 5579      00000000 
 5580              	.LVL277:
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5581              		.loc 1 653 9 is_stmt 1 view .LVU1899
 5582              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5583              		.loc 1 654 42 is_stmt 0 view .LVU1900
 5584 21c1 C4E283F7 		shrx	rsi, QWORD PTR [rbx+rcx*8], r15	# tmp656, *_640, shift
 5584      34CB
 5585              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5586              		.loc 1 653 19 view .LVU1901
 5587 21c7 4A8B7C1B 		mov	rdi, QWORD PTR 8[rbx+r11]	# source1, *_644
 5587      08
 5588              	.LVL278:
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5589              		.loc 1 654 9 is_stmt 1 view .LVU1902
 5590              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5591              		.loc 1 654 63 is_stmt 0 view .LVU1903
 5592 21cc C462E9F7 		shlx	r10, rdi, rdx	# tmp658, source1, shift_flipped
 5592      D7
 5593              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5594              		.loc 1 654 52 view .LVU1904
 5595 21d1 4C09D6   		or	rsi, r10	# tmp659, tmp658
 5596              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5597              		.loc 1 656 42 view .LVU1905
 5598 21d4 C4E283F7 		shrx	rdi, rdi, r15	# tmp662, source1, shift
 5598      FF
 5599              	.LVL279:
 5600              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5601              		.loc 1 654 52 view .LVU1906
 5602 21d9 488934C3 		mov	QWORD PTR [rbx+rax*8], rsi	# *_649, tmp659
 5603              	.LVL280:
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 5604              		.loc 1 655 9 is_stmt 1 view .LVU1907
 5605              	# sieve_extend.c:655:         bitword_t source2 = bitarray[source_word+2];
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 5606              		.loc 1 655 37 is_stmt 0 view .LVU1908
 5607 21dd 4C8D4902 		lea	r9, 2[rcx]	# _652,
 5608              	.LVL281:
 656:sieve_extend.c ****         copy_word += 2;
 5609              		.loc 1 656 9 is_stmt 1 view .LVU1909
GAS LISTING /tmp/cclewcPz.s 			page 158


 5610              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5611              		.loc 1 656 63 is_stmt 0 view .LVU1910
 5612 21e1 4E8B441B 		mov	r8, QWORD PTR 16[rbx+r11]	# *_654, *_654
 5612      10
 5613 21e6 C442E9F7 		shlx	r11, r8, rdx	# tmp660, *_654, shift_flipped
 5613      D8
 5614              	.LVL282:
 5615              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5616              		.loc 1 656 52 view .LVU1911
 5617 21eb 4C09DF   		or	rdi, r11	# tmp663, tmp660
 5618              	# sieve_extend.c:657:         copy_word += 2;
 657:sieve_extend.c ****         source_word += 2;
 5619              		.loc 1 657 19 view .LVU1912
 5620 21ee 4C8D4002 		lea	r8, 2[rax]	# copy_word,
 5621              	.LVL283:
 657:sieve_extend.c ****         source_word += 2;
 5622              		.loc 1 657 19 view .LVU1913
 5623              	.LBE359:
 5624              	# sieve_extend.c:651:     while (copy_word < fast_loop_stop_word) {
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5625              		.loc 1 651 11 view .LVU1914
 5626 21f2 4C8B5C24 		mov	r11, QWORD PTR 48[rsp]	# fast_loop_stop_word, %sfp
 5626      30
 5627              	.LBB360:
 5628              	# sieve_extend.c:659:         distance += 2;
 659:sieve_extend.c ****     }
 5629              		.loc 1 659 18 view .LVU1915
 5630 21f7 4D8D5602 		lea	r10, 2[r14]	# distance,
 5631              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5632              		.loc 1 656 52 view .LVU1916
 5633 21fb 48897CC3 		mov	QWORD PTR 8[rbx+rax*8], rdi	# *_660, tmp663
 5633      08
 5634              	.LVL284:
 657:sieve_extend.c ****         source_word += 2;
 5635              		.loc 1 657 9 is_stmt 1 view .LVU1917
 658:sieve_extend.c ****         distance += 2;
 5636              		.loc 1 658 9 view .LVU1918
 659:sieve_extend.c ****     }
 5637              		.loc 1 659 9 view .LVU1919
 659:sieve_extend.c ****     }
 5638              		.loc 1 659 9 is_stmt 0 view .LVU1920
 5639              	.LBE360:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5640              		.loc 1 651 11 is_stmt 1 view .LVU1921
 5641 2200 4D39C3   		cmp	r11, r8	# fast_loop_stop_word, copy_word
 5642 2203 0F86D500 		jbe	.L439	#,
 5642      0000
 5643              	.LBB361:
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5644              		.loc 1 652 9 view .LVU1922
 5645              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5646              		.loc 1 654 42 is_stmt 0 view .LVU1923
 5647 2209 4A8B34CB 		mov	rsi, QWORD PTR [rbx+r9*8]	# *_670, *_670
GAS LISTING /tmp/cclewcPz.s 			page 159


 5648              	# sieve_extend.c:652:         bitword_t source0 = bitarray[source_word  ];
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5649              		.loc 1 652 37 view .LVU1924
 5650 220d 4E8D14CD 		lea	r10, 0[0+r9*8]	# _669,
 5650      00000000 
 5651              	.LVL285:
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5652              		.loc 1 653 9 is_stmt 1 view .LVU1925
 5653              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5654              		.loc 1 653 19 is_stmt 0 view .LVU1926
 5655 2215 4A8B7C13 		mov	rdi, QWORD PTR 8[rbx+r10]	# source1, *_674
 5655      08
 5656              	.LVL286:
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5657              		.loc 1 654 9 is_stmt 1 view .LVU1927
 5658              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5659              		.loc 1 654 42 is_stmt 0 view .LVU1928
 5660 221a C4E283F7 		shrx	rsi, rsi, r15	# tmp664, *_670, shift
 5660      F6
 5661              	.LVL287:
 5662              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5663              		.loc 1 654 63 view .LVU1929
 5664 221f C462E9F7 		shlx	r9, rdi, rdx	# tmp666, source1, shift_flipped
 5664      CF
 5665              	.LVL288:
 5666              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5667              		.loc 1 654 52 view .LVU1930
 5668 2224 4C09CE   		or	rsi, r9	# tmp667, tmp666
 5669 2227 4A8934C3 		mov	QWORD PTR [rbx+r8*8], rsi	# *_679, tmp667
 5670              	.LVL289:
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 5671              		.loc 1 655 9 is_stmt 1 view .LVU1931
 5672              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5673              		.loc 1 656 42 is_stmt 0 view .LVU1932
 5674 222b C4E283F7 		shrx	rdi, rdi, r15	# tmp670, source1, shift
 5674      FF
 5675              	.LVL290:
 5676              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5677              		.loc 1 656 63 view .LVU1933
 5678 2230 4E8B5413 		mov	r10, QWORD PTR 16[rbx+r10]	# *_684, *_684
 5678      10
 5679 2235 C4C2E9F7 		shlx	rsi, r10, rdx	# tmp668, *_684, shift_flipped
 5679      F2
 5680              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5681              		.loc 1 656 52 view .LVU1934
 5682 223a 4809F7   		or	rdi, rsi	# tmp671, tmp668
 5683              	# sieve_extend.c:655:         bitword_t source2 = bitarray[source_word+2];
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 5684              		.loc 1 655 37 view .LVU1935
 5685 223d 4C8D4904 		lea	r9, 4[rcx]	# _682,
GAS LISTING /tmp/cclewcPz.s 			page 160


 656:sieve_extend.c ****         copy_word += 2;
 5686              		.loc 1 656 9 is_stmt 1 view .LVU1936
 5687              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5688              		.loc 1 656 52 is_stmt 0 view .LVU1937
 5689 2241 4A897CC3 		mov	QWORD PTR 8[rbx+r8*8], rdi	# *_690, tmp671
 5689      08
 657:sieve_extend.c ****         source_word += 2;
 5690              		.loc 1 657 9 is_stmt 1 view .LVU1938
 5691              	# sieve_extend.c:657:         copy_word += 2;
 657:sieve_extend.c ****         source_word += 2;
 5692              		.loc 1 657 19 is_stmt 0 view .LVU1939
 5693 2246 4C8D4004 		lea	r8, 4[rax]	# copy_word,
 5694              	.LVL291:
 658:sieve_extend.c ****         distance += 2;
 5695              		.loc 1 658 9 is_stmt 1 view .LVU1940
 659:sieve_extend.c ****     }
 5696              		.loc 1 659 9 view .LVU1941
 659:sieve_extend.c ****     }
 5697              		.loc 1 659 9 is_stmt 0 view .LVU1942
 5698              	.LBE361:
 5699              	# sieve_extend.c:651:     while (copy_word < fast_loop_stop_word) {
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5700              		.loc 1 651 11 view .LVU1943
 5701 224a 4D39C3   		cmp	r11, r8	# fast_loop_stop_word, copy_word
 5702              	.LBB362:
 5703              	# sieve_extend.c:659:         distance += 2;
 659:sieve_extend.c ****     }
 5704              		.loc 1 659 18 view .LVU1944
 5705 224d 4D8D5604 		lea	r10, 4[r14]	# distance,
 5706              	.LVL292:
 659:sieve_extend.c ****     }
 5707              		.loc 1 659 18 view .LVU1945
 5708              	.LBE362:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5709              		.loc 1 651 11 is_stmt 1 view .LVU1946
 5710 2251 0F868700 		jbe	.L439	#,
 5710      0000
 5711              	.LBB363:
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5712              		.loc 1 652 9 view .LVU1947
 5713              	# sieve_extend.c:652:         bitword_t source0 = bitarray[source_word  ];
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5714              		.loc 1 652 37 is_stmt 0 view .LVU1948
 5715 2257 4E8D14CD 		lea	r10, 0[0+r9*8]	# _699,
 5715      00000000 
 5716              	.LVL293:
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5717              		.loc 1 653 9 is_stmt 1 view .LVU1949
 5718              	# sieve_extend.c:657:         copy_word += 2;
 657:sieve_extend.c ****         source_word += 2;
 5719              		.loc 1 657 19 is_stmt 0 view .LVU1950
 5720 225f 4883C006 		add	rax, 6	# copy_word,
 5721              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5722              		.loc 1 653 19 view .LVU1951
 5723 2263 4A8B7C13 		mov	rdi, QWORD PTR 8[rbx+r10]	# source1, *_704
GAS LISTING /tmp/cclewcPz.s 			page 161


 5723      08
 5724              	.LVL294:
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5725              		.loc 1 654 9 is_stmt 1 view .LVU1952
 5726              	# sieve_extend.c:655:         bitword_t source2 = bitarray[source_word+2];
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 5727              		.loc 1 655 37 is_stmt 0 view .LVU1953
 5728 2268 4883C106 		add	rcx, 6	# _712,
 5729              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5730              		.loc 1 654 42 view .LVU1954
 5731 226c 4E8B0CCB 		mov	r9, QWORD PTR [rbx+r9*8]	# *_700, *_700
 5732              	.LVL295:
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5733              		.loc 1 654 42 view .LVU1955
 5734 2270 C4C283F7 		shrx	rsi, r9, r15	# tmp672, *_700, shift
 5734      F1
 5735              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5736              		.loc 1 654 63 view .LVU1956
 5737 2275 C462E9F7 		shlx	r9, rdi, rdx	# tmp674, source1, shift_flipped
 5737      CF
 5738              	.LVL296:
 5739              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5740              		.loc 1 654 52 view .LVU1957
 5741 227a 4C09CE   		or	rsi, r9	# tmp675, tmp674
 5742 227d 4A8934C3 		mov	QWORD PTR [rbx+r8*8], rsi	# *_709, tmp675
 5743              	.LVL297:
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 5744              		.loc 1 655 9 is_stmt 1 view .LVU1958
 656:sieve_extend.c ****         copy_word += 2;
 5745              		.loc 1 656 9 view .LVU1959
 5746              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5747              		.loc 1 656 42 is_stmt 0 view .LVU1960
 5748 2281 C4E283F7 		shrx	rdi, rdi, r15	# tmp678, source1, shift
 5748      FF
 5749              	.LVL298:
 5750              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5751              		.loc 1 656 63 view .LVU1961
 5752 2286 4E8B5413 		mov	r10, QWORD PTR 16[rbx+r10]	# *_714, *_714
 5752      10
 5753              	.LVL299:
 656:sieve_extend.c ****         copy_word += 2;
 5754              		.loc 1 656 63 view .LVU1962
 5755 228b C4C2E9F7 		shlx	rsi, r10, rdx	# tmp676, *_714, shift_flipped
 5755      F2
 5756              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5757              		.loc 1 656 52 view .LVU1963
 5758 2290 4809F7   		or	rdi, rsi	# tmp679, tmp676
 5759              	.LBE363:
 5760              	# sieve_extend.c:651:     while (copy_word < fast_loop_stop_word) {
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5761              		.loc 1 651 11 view .LVU1964
GAS LISTING /tmp/cclewcPz.s 			page 162


 5762 2293 4939C3   		cmp	r11, rax	# fast_loop_stop_word, copy_word
 5763              	.LBB364:
 5764              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5765              		.loc 1 656 52 view .LVU1965
 5766 2296 4A897CC3 		mov	QWORD PTR 8[rbx+r8*8], rdi	# *_720, tmp679
 5766      08
 657:sieve_extend.c ****         source_word += 2;
 5767              		.loc 1 657 9 is_stmt 1 view .LVU1966
 5768              	.LVL300:
 658:sieve_extend.c ****         distance += 2;
 5769              		.loc 1 658 9 view .LVU1967
 659:sieve_extend.c ****     }
 5770              		.loc 1 659 9 view .LVU1968
 5771              	# sieve_extend.c:659:         distance += 2;
 659:sieve_extend.c ****     }
 5772              		.loc 1 659 18 is_stmt 0 view .LVU1969
 5773 229b 4D8D5606 		lea	r10, 6[r14]	# distance,
 5774              	.LVL301:
 659:sieve_extend.c ****     }
 5775              		.loc 1 659 18 view .LVU1970
 5776              	.LBE364:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5777              		.loc 1 651 11 is_stmt 1 view .LVU1971
 5778 229f 763D     		jbe	.L439	#,
 5779              	.LBB365:
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5780              		.loc 1 652 9 view .LVU1972
 5781              	# sieve_extend.c:652:         bitword_t source0 = bitarray[source_word  ];
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 5782              		.loc 1 652 37 is_stmt 0 view .LVU1973
 5783 22a1 4C8D1CCD 		lea	r11, 0[0+rcx*8]	# _402,
 5783      00000000 
 5784              	.LVL302:
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5785              		.loc 1 653 9 is_stmt 1 view .LVU1974
 5786              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 5787              		.loc 1 653 19 is_stmt 0 view .LVU1975
 5788 22a9 4E8B4C1B 		mov	r9, QWORD PTR 8[rbx+r11]	# source1, *_407
 5788      08
 5789              	.LVL303:
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5790              		.loc 1 654 9 is_stmt 1 view .LVU1976
 5791              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5792              		.loc 1 654 63 is_stmt 0 view .LVU1977
 5793 22ae C442E9F7 		shlx	r8, r9, rdx	# tmp682, source1, shift_flipped
 5793      C1
 5794              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5795              		.loc 1 654 42 view .LVU1978
 5796 22b3 488B0CCB 		mov	rcx, QWORD PTR [rbx+rcx*8]	# *_403, *_403
 5797              	.LVL304:
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5798              		.loc 1 654 42 view .LVU1979
 5799 22b7 C46283F7 		shrx	r10, rcx, r15	# tmp680, *_403, shift
GAS LISTING /tmp/cclewcPz.s 			page 163


 5799      D1
 5800              	.LVL305:
 5801              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 5802              		.loc 1 654 52 view .LVU1980
 5803 22bc 4D09C2   		or	r10, r8	# tmp683, tmp682
 5804 22bf 4C8914C3 		mov	QWORD PTR [rbx+rax*8], r10	# *_412, tmp683
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 5805              		.loc 1 655 9 is_stmt 1 view .LVU1981
 5806              	.LVL306:
 656:sieve_extend.c ****         copy_word += 2;
 5807              		.loc 1 656 9 view .LVU1982
 5808              	# sieve_extend.c:659:         distance += 2;
 659:sieve_extend.c ****     }
 5809              		.loc 1 659 18 is_stmt 0 view .LVU1983
 5810 22c3 4D8D5608 		lea	r10, 8[r14]	# distance,
 5811              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5812              		.loc 1 656 63 view .LVU1984
 5813 22c7 4A8B741B 		mov	rsi, QWORD PTR 16[rbx+r11]	# *_417, *_417
 5813      10
 5814              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5815              		.loc 1 656 42 view .LVU1985
 5816 22cc C44283F7 		shrx	r11, r9, r15	# tmp686, source1, shift
 5816      D9
 5817              	.LVL307:
 5818              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5819              		.loc 1 656 63 view .LVU1986
 5820 22d1 C4E2E9F7 		shlx	rdi, rsi, rdx	# tmp684, *_417, shift_flipped
 5820      FE
 5821              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 5822              		.loc 1 656 52 view .LVU1987
 5823 22d6 4909FB   		or	r11, rdi	# tmp687, tmp684
 5824 22d9 4C895CC3 		mov	QWORD PTR 8[rbx+rax*8], r11	# *_423, tmp687
 5824      08
 657:sieve_extend.c ****         source_word += 2;
 5825              		.loc 1 657 9 is_stmt 1 view .LVU1988
 658:sieve_extend.c ****         distance += 2;
 5826              		.loc 1 658 9 view .LVU1989
 659:sieve_extend.c ****     }
 5827              		.loc 1 659 9 view .LVU1990
 5828              	.LVL308:
 659:sieve_extend.c ****     }
 5829              		.loc 1 659 9 is_stmt 0 view .LVU1991
 5830              	.LBE365:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5831              		.loc 1 651 11 is_stmt 1 view .LVU1992
 5832              	.L439:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 5833              		.loc 1 651 11 is_stmt 0 view .LVU1993
 5834 22de 4D01D4   		add	r12, r10	# tmp.337, distance
 5835 22e1 4D01D5   		add	r13, r10	# tmp.338, distance
 5836              	.LVL309:
 5837              	.L434:
GAS LISTING /tmp/cclewcPz.s 			page 164


 661:sieve_extend.c **** }
 5838              		.loc 1 661 5 is_stmt 1 view .LVU1994
 661:sieve_extend.c **** }
 5839              		.loc 1 661 5 is_stmt 0 view .LVU1995
 5840              	.LBE376:
 5841              	.LBE379:
 759:sieve_extend.c ****     copy_word += distance;
 5842              		.loc 1 759 5 is_stmt 1 view .LVU1996
 760:sieve_extend.c **** 
 5843              		.loc 1 760 5 view .LVU1997
 762:sieve_extend.c **** 
 5844              		.loc 1 762 6 view .LVU1998
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5845              		.loc 1 765 11 view .LVU1999
 5846              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5847              		.loc 1 765 5 is_stmt 0 view .LVU2000
 5848 22e4 4C8B5C24 		mov	r11, QWORD PTR 80[rsp]	# aligned_copy_word, %sfp
 5848      50
 5849 22e9 4D39EB   		cmp	r11, r13	# aligned_copy_word, tmp.338
 5850 22ec 0F82BE0A 		jb	.L456	#,
 5850      0000
 5851 22f2 4E8D34E5 		lea	r14, 0[0+r12*8]	# _3,
 5851      00000000 
 5852 22fa 498D4B01 		lea	rcx, 1[r11]	# tmp.325,
 5853 22fe 4A8D3C33 		lea	rdi, [rbx+r14]	# vectp.332,
 5854 2302 4989C8   		mov	r8, rcx	# niters.331, tmp.325
 5855 2305 4889F8   		mov	rax, rdi	# tmp698, vectp.332
 5856 2308 4D29EB   		sub	r11, r13	# tmp700, tmp.338
 5857 230b 48C1E803 		shr	rax, 3	# tmp698,
 5858 230f 4D29E8   		sub	r8, r13	# niters.331, tmp.338
 5859 2312 48F7D8   		neg	rax	# tmp699
 5860 2315 41B90500 		mov	r9d, 5	# tmp702,
 5860      0000
 5861 231b 83E003   		and	eax, 3	# prolog_loop_niters.333,
 5862 231e 488D7003 		lea	rsi, 3[rax]	# tmp701,
 5863 2322 4883FE05 		cmp	rsi, 5	# tmp701,
 5864 2326 490F42F1 		cmovb	rsi, r9	# tmp701,, tmp921, tmp702
 5865 232a 4939F3   		cmp	r11, rsi	# tmp700, tmp921
 5866 232d 0F823F03 		jb	.L441	#,
 5866      0000
 5867 2333 4885C0   		test	rax, rax	# prolog_loop_niters.333
 5868 2336 0F844408 		je	.L457	#,
 5868      0000
 5869              	.LVL310:
 766:sieve_extend.c ****     }
 5870              		.loc 1 766 9 is_stmt 1 view .LVU2001
 5871              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5872              		.loc 1 766 94 is_stmt 0 view .LVU2002
 5873 233c 4E8B5C33 		mov	r11, QWORD PTR 8[rbx+r14]	# *_607, *_607
 5873      08
 5874              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5875              		.loc 1 766 77 view .LVU2003
 5876 2341 498D7424 		lea	rsi, 1[r12]	# tmp788,
 5876      01
GAS LISTING /tmp/cclewcPz.s 			page 165


 5877              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5878              		.loc 1 766 56 view .LVU2004
 5879 2346 488B3F   		mov	rdi, QWORD PTR [rdi]	# MEM[(uint64_t *)vectp.332_27], MEM[(uint64_t *)vectp.332_27]
 5880              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5881              		.loc 1 766 94 view .LVU2005
 5882 2349 C442E9F7 		shlx	r9, r11, rdx	# tmp703, *_607, shift_flipped
 5882      CB
 5883              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5884              		.loc 1 766 56 view .LVU2006
 5885 234e C46283F7 		shrx	r14, rdi, r15	# tmp705, MEM[(uint64_t *)vectp.332_27], shift
 5885      F7
 5886              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5887              		.loc 1 766 66 view .LVU2007
 5888 2353 4D09F1   		or	r9, r14	# tmp707, tmp705
 5889 2356 4883F801 		cmp	rax, 1	# prolog_loop_niters.333,
 5890              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5891              		.loc 1 766 77 view .LVU2008
 5892 235a 4989F2   		mov	r10, rsi	# source_word, tmp788
 5893              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5894              		.loc 1 766 66 view .LVU2009
 5895 235d 4E890CEB 		mov	QWORD PTR [rbx+r13*8], r9	# *_611, tmp707
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5896              		.loc 1 765 43 is_stmt 1 view .LVU2010
 5897              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5898              		.loc 1 765 52 is_stmt 0 view .LVU2011
 5899 2361 4D8D7501 		lea	r14, 1[r13]	# copy_word,
 5900              	.LVL311:
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5901              		.loc 1 765 11 is_stmt 1 view .LVU2012
 5902 2365 7456     		je	.L442	#,
 766:sieve_extend.c ****     }
 5903              		.loc 1 766 9 view .LVU2013
 5904              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5905              		.loc 1 766 40 is_stmt 0 view .LVU2014
 5906 2367 4C8D1CF5 		lea	r11, 0[0+rsi*8]	# _620,
 5906      00000000 
 5907              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5908              		.loc 1 766 94 view .LVU2015
 5909 236f C422E9F7 		shlx	r9, QWORD PTR 8[rbx+r11], rdx	# tmp708, *_626, shift_flipped
 5909      4C1B08
 5910              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5911              		.loc 1 766 56 view .LVU2016
 5912 2376 4A8B3C1B 		mov	rdi, QWORD PTR [rbx+r11]	# *_621, *_621
 5913 237a C46283F7 		shrx	r11, rdi, r15	# tmp710, *_621, shift
 5913      DF
 5914              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
GAS LISTING /tmp/cclewcPz.s 			page 166


 5915              		.loc 1 766 66 view .LVU2017
 5916 237f 4D09D9   		or	r9, r11	# tmp712, tmp710
 5917 2382 4883F803 		cmp	rax, 3	# prolog_loop_niters.333,
 5918 2386 4E890CF3 		mov	QWORD PTR [rbx+r14*8], r9	# *_630, tmp712
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5919              		.loc 1 765 43 is_stmt 1 view .LVU2018
 5920              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5921              		.loc 1 766 77 is_stmt 0 view .LVU2019
 5922 238a 4D8D5424 		lea	r10, 2[r12]	# source_word,
 5922      02
 5923              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5924              		.loc 1 765 52 view .LVU2020
 5925 238f 4D8D7502 		lea	r14, 2[r13]	# copy_word,
 5926              	.LVL312:
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5927              		.loc 1 765 11 is_stmt 1 view .LVU2021
 5928 2393 7528     		jne	.L442	#,
 766:sieve_extend.c ****     }
 5929              		.loc 1 766 9 view .LVU2022
 5930              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5931              		.loc 1 766 40 is_stmt 0 view .LVU2023
 5932 2395 4E8D0CD5 		lea	r9, 0[0+r10*8]	# _205,
 5932      00000000 
 5933              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5934              		.loc 1 766 94 view .LVU2024
 5935 239d C4A2E9F7 		shlx	rdi, QWORD PTR 8[rbx+r9], rdx	# tmp713, *_211, shift_flipped
 5935      7C0B08
 5936              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5937              		.loc 1 766 56 view .LVU2025
 5938 23a4 4E8B1C0B 		mov	r11, QWORD PTR [rbx+r9]	# *_206, *_206
 5939 23a8 C44283F7 		shrx	r9, r11, r15	# tmp715, *_206, shift
 5939      CB
 5940              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5941              		.loc 1 766 66 view .LVU2026
 5942 23ad 4C09CF   		or	rdi, r9	# tmp717, tmp715
 5943              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5944              		.loc 1 766 77 view .LVU2027
 5945 23b0 4D8D5424 		lea	r10, 3[r12]	# source_word,
 5945      03
 5946              	.LVL313:
 5947              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5948              		.loc 1 766 66 view .LVU2028
 5949 23b5 4A893CF3 		mov	QWORD PTR [rbx+r14*8], rdi	# *_215, tmp717
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5950              		.loc 1 765 43 is_stmt 1 view .LVU2029
 5951              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5952              		.loc 1 765 52 is_stmt 0 view .LVU2030
 5953 23b9 4D8D7503 		lea	r14, 3[r13]	# copy_word,
GAS LISTING /tmp/cclewcPz.s 			page 167


 5954              	.LVL314:
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5955              		.loc 1 765 11 is_stmt 1 view .LVU2031
 5956              	.L442:
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5957              		.loc 1 765 11 is_stmt 0 view .LVU2032
 5958 23bd 4929C0   		sub	r8, rax	# niters.334, prolog_loop_niters.333
 5959 23c0 4801C6   		add	rsi, rax	# tmp721, prolog_loop_niters.333
 5960 23c3 4E8D2420 		lea	r12, [rax+r12]	# tmp718,
 5961 23c7 4C01E8   		add	rax, r13	# tmp723, tmp.338
 5962 23ca 4D89C5   		mov	r13, r8	# bnd.335, niters.334
 5963 23cd 488D3CF3 		lea	rdi, [rbx+rsi*8]	# vectp.344,
 5964 23d1 49C1ED02 		shr	r13, 2	# bnd.335,
 5965 23d5 4C8D0CC3 		lea	r9, [rbx+rax*8]	# vectp.349,
 5966 23d9 49C1E505 		sal	r13, 5	# _733,
 5967              	# sieve_extend.c:759:     source_word += distance;
 759:sieve_extend.c ****     copy_word += distance;
 5968              		.loc 1 759 17 view .LVU2033
 5969 23dd 31C0     		xor	eax, eax	# ivtmp.390
 5970 23df 498D75E0 		lea	rsi, -32[r13]	# tmp799,
 5971 23e3 4E8D1CE3 		lea	r11, [rbx+r12*8]	# vectp.340,
 5972 23e7 C5796E54 		vmovd	xmm10, DWORD PTR 72[rsp]	# _12, %sfp
 5972      2448
 5973 23ed 48C1EE05 		shr	rsi, 5	# tmp797,
 5974 23f1 C5796E5C 		vmovd	xmm11, DWORD PTR 64[rsp]	# _18, %sfp
 5974      2440
 5975 23f7 4883C601 		add	rsi, 1	# tmp800,
 5976 23fb 83E607   		and	esi, 7	# tmp801,
 5977 23fe 0F841201 		je	.L444	#,
 5977      0000
 5978 2404 4883FE01 		cmp	rsi, 1	# tmp801,
 5979 2408 0F84DB00 		je	.L537	#,
 5979      0000
 5980 240e 4883FE02 		cmp	rsi, 2	# tmp801,
 5981 2412 0F84AE00 		je	.L538	#,
 5981      0000
 5982 2418 4883FE03 		cmp	rsi, 3	# tmp801,
 5983 241c 0F848000 		je	.L539	#,
 5983      0000
 5984 2422 4883FE04 		cmp	rsi, 4	# tmp801,
 5985 2426 7456     		je	.L540	#,
 5986 2428 4883FE05 		cmp	rsi, 5	# tmp801,
 5987 242c 742D     		je	.L541	#,
 5988 242e 4883FE06 		cmp	rsi, 6	# tmp801,
 5989 2432 0F856807 		jne	.L609	#,
 5989      0000
 5990              	.L542:
 766:sieve_extend.c ****     }
 5991              		.loc 1 766 9 is_stmt 1 view .LVU2034
 5992              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5993              		.loc 1 766 56 is_stmt 0 view .LVU2035
 5994 2438 C4417D6F 		vmovdqa	ymm13, YMMWORD PTR [r11+rax]	# tmp1262, MEM[base: vectp.340_257, index: ivtmp.390_731, off
 5994      2C03
 5995              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5996              		.loc 1 766 94 view .LVU2036
GAS LISTING /tmp/cclewcPz.s 			page 168


 5997 243e C57E6F3C 		vmovdqu	ymm15, YMMWORD PTR [rdi+rax]	# tmp1263, MEM[base: vectp.344_264, index: ivtmp.390_731, off
 5997      07
 5998              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 5999              		.loc 1 766 56 view .LVU2037
 6000 2443 C44115D3 		vpsrlq	ymm14, ymm13, xmm10	# vect__38.342, tmp1262, _12
 6000      F2
 6001              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6002              		.loc 1 766 94 view .LVU2038
 6003 2448 C4C105F3 		vpsllq	ymm1, ymm15, xmm11	# vect__43.346, tmp1263, _18
 6003      CB
 6004              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6005              		.loc 1 766 66 view .LVU2039
 6006 244d C50DEBC1 		vpor	ymm8, ymm14, ymm1	# vect__46.347, vect__38.342, vect__43.346
 6007              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6008              		.loc 1 766 29 view .LVU2040
 6009 2451 C4417E7F 		vmovdqu	YMMWORD PTR [r9+rax], ymm8	# MEM[base: vectp.349_273, index: ivtmp.390_731, offset: 0B], v
 6009      0401
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6010              		.loc 1 765 43 is_stmt 1 view .LVU2041
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6011              		.loc 1 765 11 view .LVU2042
 6012 2457 4883C020 		add	rax, 32	# ivtmp.390,
 6013              	.L541:
 766:sieve_extend.c ****     }
 6014              		.loc 1 766 9 view .LVU2043
 6015              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6016              		.loc 1 766 56 is_stmt 0 view .LVU2044
 6017 245b C4C17D6F 		vmovdqa	ymm0, YMMWORD PTR [r11+rax]	# tmp1264, MEM[base: vectp.340_257, index: ivtmp.390_731, offs
 6017      0403
 6018              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6019              		.loc 1 766 94 view .LVU2045
 6020 2461 C57E6F0C 		vmovdqu	ymm9, YMMWORD PTR [rdi+rax]	# tmp1265, MEM[base: vectp.344_264, index: ivtmp.390_731, offs
 6020      07
 6021              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6022              		.loc 1 766 56 view .LVU2046
 6023 2466 C4C17DD3 		vpsrlq	ymm5, ymm0, xmm10	# vect__38.342, tmp1264, _12
 6023      EA
 6024              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6025              		.loc 1 766 94 view .LVU2047
 6026 246b C4C135F3 		vpsllq	ymm7, ymm9, xmm11	# vect__43.346, tmp1265, _18
 6026      FB
 6027              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6028              		.loc 1 766 66 view .LVU2048
 6029 2470 C5D5EBDF 		vpor	ymm3, ymm5, ymm7	# vect__46.347, vect__38.342, vect__43.346
 6030              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6031              		.loc 1 766 29 view .LVU2049
 6032 2474 C4C17E7F 		vmovdqu	YMMWORD PTR [r9+rax], ymm3	# MEM[base: vectp.349_273, index: ivtmp.390_731, offset: 0B], v
GAS LISTING /tmp/cclewcPz.s 			page 169


 6032      1C01
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6033              		.loc 1 765 43 is_stmt 1 view .LVU2050
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6034              		.loc 1 765 11 view .LVU2051
 6035 247a 4883C020 		add	rax, 32	# ivtmp.390,
 6036              	.L540:
 766:sieve_extend.c ****     }
 6037              		.loc 1 766 9 view .LVU2052
 6038              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6039              		.loc 1 766 56 is_stmt 0 view .LVU2053
 6040 247e C4C17D6F 		vmovdqa	ymm2, YMMWORD PTR [r11+rax]	# tmp1266, MEM[base: vectp.340_257, index: ivtmp.390_731, offs
 6040      1403
 6041              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6042              		.loc 1 766 94 view .LVU2054
 6043 2484 C5FE6F24 		vmovdqu	ymm4, YMMWORD PTR [rdi+rax]	# tmp1267, MEM[base: vectp.344_264, index: ivtmp.390_731, offs
 6043      07
 6044              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6045              		.loc 1 766 56 view .LVU2055
 6046 2489 C4C16DD3 		vpsrlq	ymm6, ymm2, xmm10	# vect__38.342, tmp1266, _12
 6046      F2
 6047              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6048              		.loc 1 766 94 view .LVU2056
 6049 248e C4415DF3 		vpsllq	ymm12, ymm4, xmm11	# vect__43.346, tmp1267, _18
 6049      E3
 6050              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6051              		.loc 1 766 66 view .LVU2057
 6052 2493 C4414DEB 		vpor	ymm13, ymm6, ymm12	# vect__46.347, vect__38.342, vect__43.346
 6052      EC
 6053              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6054              		.loc 1 766 29 view .LVU2058
 6055 2498 C4417E7F 		vmovdqu	YMMWORD PTR [r9+rax], ymm13	# MEM[base: vectp.349_273, index: ivtmp.390_731, offset: 0B], 
 6055      2C01
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6056              		.loc 1 765 43 is_stmt 1 view .LVU2059
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6057              		.loc 1 765 11 view .LVU2060
 6058 249e 4883C020 		add	rax, 32	# ivtmp.390,
 6059              	.L539:
 766:sieve_extend.c ****     }
 6060              		.loc 1 766 9 view .LVU2061
 6061              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6062              		.loc 1 766 56 is_stmt 0 view .LVU2062
 6063 24a2 C4417D6F 		vmovdqa	ymm14, YMMWORD PTR [r11+rax]	# tmp1268, MEM[base: vectp.340_257, index: ivtmp.390_731, off
 6063      3403
 6064              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6065              		.loc 1 766 94 view .LVU2063
 6066 24a8 C5FE6F0C 		vmovdqu	ymm1, YMMWORD PTR [rdi+rax]	# tmp1269, MEM[base: vectp.344_264, index: ivtmp.390_731, offs
 6066      07
GAS LISTING /tmp/cclewcPz.s 			page 170


 6067              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6068              		.loc 1 766 56 view .LVU2064
 6069 24ad C4410DD3 		vpsrlq	ymm15, ymm14, xmm10	# vect__38.342, tmp1268, _12
 6069      FA
 6070              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6071              		.loc 1 766 94 view .LVU2065
 6072 24b2 C44175F3 		vpsllq	ymm8, ymm1, xmm11	# vect__43.346, tmp1269, _18
 6072      C3
 6073              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6074              		.loc 1 766 66 view .LVU2066
 6075 24b7 C4C105EB 		vpor	ymm0, ymm15, ymm8	# vect__46.347, vect__38.342, vect__43.346
 6075      C0
 6076              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6077              		.loc 1 766 29 view .LVU2067
 6078 24bc C4C17E7F 		vmovdqu	YMMWORD PTR [r9+rax], ymm0	# MEM[base: vectp.349_273, index: ivtmp.390_731, offset: 0B], v
 6078      0401
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6079              		.loc 1 765 43 is_stmt 1 view .LVU2068
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6080              		.loc 1 765 11 view .LVU2069
 6081 24c2 4883C020 		add	rax, 32	# ivtmp.390,
 6082              	.L538:
 766:sieve_extend.c ****     }
 6083              		.loc 1 766 9 view .LVU2070
 6084              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6085              		.loc 1 766 56 is_stmt 0 view .LVU2071
 6086 24c6 C4C17D6F 		vmovdqa	ymm5, YMMWORD PTR [r11+rax]	# tmp1270, MEM[base: vectp.340_257, index: ivtmp.390_731, offs
 6086      2C03
 6087              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6088              		.loc 1 766 94 view .LVU2072
 6089 24cc C5FE6F3C 		vmovdqu	ymm7, YMMWORD PTR [rdi+rax]	# tmp1271, MEM[base: vectp.344_264, index: ivtmp.390_731, offs
 6089      07
 6090              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6091              		.loc 1 766 56 view .LVU2073
 6092 24d1 C44155D3 		vpsrlq	ymm9, ymm5, xmm10	# vect__38.342, tmp1270, _12
 6092      CA
 6093              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6094              		.loc 1 766 94 view .LVU2074
 6095 24d6 C4C145F3 		vpsllq	ymm3, ymm7, xmm11	# vect__43.346, tmp1271, _18
 6095      DB
 6096              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6097              		.loc 1 766 66 view .LVU2075
 6098 24db C5B5EBD3 		vpor	ymm2, ymm9, ymm3	# vect__46.347, vect__38.342, vect__43.346
 6099              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6100              		.loc 1 766 29 view .LVU2076
 6101 24df C4C17E7F 		vmovdqu	YMMWORD PTR [r9+rax], ymm2	# MEM[base: vectp.349_273, index: ivtmp.390_731, offset: 0B], v
 6101      1401
GAS LISTING /tmp/cclewcPz.s 			page 171


 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6102              		.loc 1 765 43 is_stmt 1 view .LVU2077
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6103              		.loc 1 765 11 view .LVU2078
 6104 24e5 4883C020 		add	rax, 32	# ivtmp.390,
 6105              	.L537:
 766:sieve_extend.c ****     }
 6106              		.loc 1 766 9 view .LVU2079
 6107              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6108              		.loc 1 766 56 is_stmt 0 view .LVU2080
 6109 24e9 C4C17D6F 		vmovdqa	ymm6, YMMWORD PTR [r11+rax]	# tmp1272, MEM[base: vectp.340_257, index: ivtmp.390_731, offs
 6109      3403
 6110              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6111              		.loc 1 766 94 view .LVU2081
 6112 24ef C5FE6F24 		vmovdqu	ymm4, YMMWORD PTR [rdi+rax]	# tmp1273, MEM[base: vectp.344_264, index: ivtmp.390_731, offs
 6112      07
 6113              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6114              		.loc 1 766 56 view .LVU2082
 6115 24f4 C4414DD3 		vpsrlq	ymm12, ymm6, xmm10	# vect__38.342, tmp1272, _12
 6115      E2
 6116              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6117              		.loc 1 766 94 view .LVU2083
 6118 24f9 C4415DF3 		vpsllq	ymm13, ymm4, xmm11	# vect__43.346, tmp1273, _18
 6118      EB
 6119              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6120              		.loc 1 766 66 view .LVU2084
 6121 24fe C4411DEB 		vpor	ymm14, ymm12, ymm13	# vect__46.347, vect__38.342, vect__43.346
 6121      F5
 6122              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6123              		.loc 1 766 29 view .LVU2085
 6124 2503 C4417E7F 		vmovdqu	YMMWORD PTR [r9+rax], ymm14	# MEM[base: vectp.349_273, index: ivtmp.390_731, offset: 0B], 
 6124      3401
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6125              		.loc 1 765 43 is_stmt 1 view .LVU2086
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6126              		.loc 1 765 11 view .LVU2087
 6127 2509 4883C020 		add	rax, 32	# ivtmp.390,
 6128 250d 4C39E8   		cmp	rax, r13	# ivtmp.390, _733
 6129 2510 0F844401 		je	.L585	#,
 6129      0000
 6130              	.L444:
 766:sieve_extend.c ****     }
 6131              		.loc 1 766 9 discriminator 2 view .LVU2088
 6132              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6133              		.loc 1 766 56 is_stmt 0 discriminator 2 view .LVU2089
 6134 2516 C4417D6F 		vmovdqa	ymm15, YMMWORD PTR [r11+rax]	# tmp1206, MEM[base: vectp.340_257, index: ivtmp.390_731, off
 6134      3C03
 6135              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6136              		.loc 1 766 94 discriminator 2 view .LVU2090
GAS LISTING /tmp/cclewcPz.s 			page 172


 6137 251c C57E6F04 		vmovdqu	ymm8, YMMWORD PTR [rdi+rax]	# tmp1207, MEM[base: vectp.344_264, index: ivtmp.390_731, offs
 6137      07
 6138              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6139              		.loc 1 766 56 discriminator 2 view .LVU2091
 6140 2521 C4C105D3 		vpsrlq	ymm1, ymm15, xmm10	# vect__38.342, tmp1206, _12
 6140      CA
 6141              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6142              		.loc 1 766 94 discriminator 2 view .LVU2092
 6143 2526 C4C13DF3 		vpsllq	ymm0, ymm8, xmm11	# vect__43.346, tmp1207, _18
 6143      C3
 6144              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6145              		.loc 1 766 66 discriminator 2 view .LVU2093
 6146 252b C5F5EBE8 		vpor	ymm5, ymm1, ymm0	# vect__46.347, vect__38.342, vect__43.346
 6147              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6148              		.loc 1 766 29 discriminator 2 view .LVU2094
 6149 252f C4C17E7F 		vmovdqu	YMMWORD PTR [r9+rax], ymm5	# MEM[base: vectp.349_273, index: ivtmp.390_731, offset: 0B], v
 6149      2C01
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6150              		.loc 1 765 43 is_stmt 1 discriminator 2 view .LVU2095
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6151              		.loc 1 765 11 discriminator 2 view .LVU2096
 766:sieve_extend.c ****     }
 6152              		.loc 1 766 9 discriminator 2 view .LVU2097
 6153              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6154              		.loc 1 766 56 is_stmt 0 discriminator 2 view .LVU2098
 6155 2535 C4417D6F 		vmovdqa	ymm9, YMMWORD PTR 32[r11+rax]	# tmp1208, MEM[base: vectp.340_257, index: ivtmp.390_731, of
 6155      4C0320
 6156              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6157              		.loc 1 766 94 discriminator 2 view .LVU2099
 6158 253c C5FE6F5C 		vmovdqu	ymm3, YMMWORD PTR 32[rdi+rax]	# tmp1209, MEM[base: vectp.344_264, index: ivtmp.390_731, of
 6158      0720
 6159              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6160              		.loc 1 766 56 discriminator 2 view .LVU2100
 6161 2542 C4C135D3 		vpsrlq	ymm7, ymm9, xmm10	# vect__38.342, tmp1208, _12
 6161      FA
 6162              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6163              		.loc 1 766 94 discriminator 2 view .LVU2101
 6164 2547 C4C165F3 		vpsllq	ymm2, ymm3, xmm11	# vect__43.346, tmp1209, _18
 6164      D3
 6165              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6166              		.loc 1 766 66 discriminator 2 view .LVU2102
 6167 254c C5C5EBF2 		vpor	ymm6, ymm7, ymm2	# vect__46.347, vect__38.342, vect__43.346
 6168              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6169              		.loc 1 766 29 discriminator 2 view .LVU2103
 6170 2550 C4C17E7F 		vmovdqu	YMMWORD PTR 32[r9+rax], ymm6	# MEM[base: vectp.349_273, index: ivtmp.390_731, offset: 0B],
 6170      740120
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
GAS LISTING /tmp/cclewcPz.s 			page 173


 6171              		.loc 1 765 43 is_stmt 1 discriminator 2 view .LVU2104
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6172              		.loc 1 765 11 discriminator 2 view .LVU2105
 766:sieve_extend.c ****     }
 6173              		.loc 1 766 9 discriminator 2 view .LVU2106
 6174              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6175              		.loc 1 766 56 is_stmt 0 discriminator 2 view .LVU2107
 6176 2557 C4417D6F 		vmovdqa	ymm12, YMMWORD PTR 64[r11+rax]	# tmp1210, MEM[base: vectp.340_257, index: ivtmp.390_731, o
 6176      640340
 6177              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6178              		.loc 1 766 94 discriminator 2 view .LVU2108
 6179 255e C5FE6F64 		vmovdqu	ymm4, YMMWORD PTR 64[rdi+rax]	# tmp1211, MEM[base: vectp.344_264, index: ivtmp.390_731, of
 6179      0740
 6180              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6181              		.loc 1 766 56 discriminator 2 view .LVU2109
 6182 2564 C4411DD3 		vpsrlq	ymm13, ymm12, xmm10	# vect__38.342, tmp1210, _12
 6182      EA
 6183              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6184              		.loc 1 766 94 discriminator 2 view .LVU2110
 6185 2569 C4415DF3 		vpsllq	ymm14, ymm4, xmm11	# vect__43.346, tmp1211, _18
 6185      F3
 6186              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6187              		.loc 1 766 66 discriminator 2 view .LVU2111
 6188 256e C44115EB 		vpor	ymm15, ymm13, ymm14	# vect__46.347, vect__38.342, vect__43.346
 6188      FE
 6189              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6190              		.loc 1 766 29 discriminator 2 view .LVU2112
 6191 2573 C4417E7F 		vmovdqu	YMMWORD PTR 64[r9+rax], ymm15	# MEM[base: vectp.349_273, index: ivtmp.390_731, offset: 0B]
 6191      7C0140
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6192              		.loc 1 765 43 is_stmt 1 discriminator 2 view .LVU2113
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6193              		.loc 1 765 11 discriminator 2 view .LVU2114
 766:sieve_extend.c ****     }
 6194              		.loc 1 766 9 discriminator 2 view .LVU2115
 6195              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6196              		.loc 1 766 56 is_stmt 0 discriminator 2 view .LVU2116
 6197 257a C4C17D6F 		vmovdqa	ymm1, YMMWORD PTR 96[r11+rax]	# tmp1212, MEM[base: vectp.340_257, index: ivtmp.390_731, of
 6197      4C0360
 6198              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6199              		.loc 1 766 94 discriminator 2 view .LVU2117
 6200 2581 C5FE6F44 		vmovdqu	ymm0, YMMWORD PTR 96[rdi+rax]	# tmp1213, MEM[base: vectp.344_264, index: ivtmp.390_731, of
 6200      0760
 6201              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6202              		.loc 1 766 56 discriminator 2 view .LVU2118
 6203 2587 C44175D3 		vpsrlq	ymm8, ymm1, xmm10	# vect__38.342, tmp1212, _12
 6203      C2
 6204              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
GAS LISTING /tmp/cclewcPz.s 			page 174


 766:sieve_extend.c ****     }
 6205              		.loc 1 766 94 discriminator 2 view .LVU2119
 6206 258c C4C17DF3 		vpsllq	ymm5, ymm0, xmm11	# vect__43.346, tmp1213, _18
 6206      EB
 6207              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6208              		.loc 1 766 66 discriminator 2 view .LVU2120
 6209 2591 C53DEBCD 		vpor	ymm9, ymm8, ymm5	# vect__46.347, vect__38.342, vect__43.346
 6210              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6211              		.loc 1 766 29 discriminator 2 view .LVU2121
 6212 2595 C4417E7F 		vmovdqu	YMMWORD PTR 96[r9+rax], ymm9	# MEM[base: vectp.349_273, index: ivtmp.390_731, offset: 0B],
 6212      4C0160
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6213              		.loc 1 765 43 is_stmt 1 discriminator 2 view .LVU2122
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6214              		.loc 1 765 11 discriminator 2 view .LVU2123
 766:sieve_extend.c ****     }
 6215              		.loc 1 766 9 discriminator 2 view .LVU2124
 6216              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6217              		.loc 1 766 56 is_stmt 0 discriminator 2 view .LVU2125
 6218 259c C4C17D6F 		vmovdqa	ymm7, YMMWORD PTR 128[r11+rax]	# tmp1214, MEM[base: vectp.340_257, index: ivtmp.390_731, o
 6218      BC038000 
 6218      0000
 6219              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6220              		.loc 1 766 94 discriminator 2 view .LVU2126
 6221 25a6 C5FE6F9C 		vmovdqu	ymm3, YMMWORD PTR 128[rdi+rax]	# tmp1215, MEM[base: vectp.344_264, index: ivtmp.390_731, o
 6221      07800000 
 6221      00
 6222              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6223              		.loc 1 766 56 discriminator 2 view .LVU2127
 6224 25af C4C145D3 		vpsrlq	ymm2, ymm7, xmm10	# vect__38.342, tmp1214, _12
 6224      D2
 6225              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6226              		.loc 1 766 94 discriminator 2 view .LVU2128
 6227 25b4 C4C165F3 		vpsllq	ymm6, ymm3, xmm11	# vect__43.346, tmp1215, _18
 6227      F3
 6228              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6229              		.loc 1 766 66 discriminator 2 view .LVU2129
 6230 25b9 C56DEBE6 		vpor	ymm12, ymm2, ymm6	# vect__46.347, vect__38.342, vect__43.346
 6231              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6232              		.loc 1 766 29 discriminator 2 view .LVU2130
 6233 25bd C4417E7F 		vmovdqu	YMMWORD PTR 128[r9+rax], ymm12	# MEM[base: vectp.349_273, index: ivtmp.390_731, offset: 0B
 6233      A4018000 
 6233      0000
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6234              		.loc 1 765 43 is_stmt 1 discriminator 2 view .LVU2131
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6235              		.loc 1 765 11 discriminator 2 view .LVU2132
 766:sieve_extend.c ****     }
 6236              		.loc 1 766 9 discriminator 2 view .LVU2133
GAS LISTING /tmp/cclewcPz.s 			page 175


 6237              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6238              		.loc 1 766 56 is_stmt 0 discriminator 2 view .LVU2134
 6239 25c7 C4417D6F 		vmovdqa	ymm13, YMMWORD PTR 160[r11+rax]	# tmp1216, MEM[base: vectp.340_257, index: ivtmp.390_731, 
 6239      AC03A000 
 6239      0000
 6240              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6241              		.loc 1 766 94 discriminator 2 view .LVU2135
 6242 25d1 C5FE6FA4 		vmovdqu	ymm4, YMMWORD PTR 160[rdi+rax]	# tmp1217, MEM[base: vectp.344_264, index: ivtmp.390_731, o
 6242      07A00000 
 6242      00
 6243              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6244              		.loc 1 766 56 discriminator 2 view .LVU2136
 6245 25da C44115D3 		vpsrlq	ymm14, ymm13, xmm10	# vect__38.342, tmp1216, _12
 6245      F2
 6246              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6247              		.loc 1 766 94 discriminator 2 view .LVU2137
 6248 25df C4415DF3 		vpsllq	ymm15, ymm4, xmm11	# vect__43.346, tmp1217, _18
 6248      FB
 6249              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6250              		.loc 1 766 66 discriminator 2 view .LVU2138
 6251 25e4 C4C10DEB 		vpor	ymm1, ymm14, ymm15	# vect__46.347, vect__38.342, vect__43.346
 6251      CF
 6252              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6253              		.loc 1 766 29 discriminator 2 view .LVU2139
 6254 25e9 C4C17E7F 		vmovdqu	YMMWORD PTR 160[r9+rax], ymm1	# MEM[base: vectp.349_273, index: ivtmp.390_731, offset: 0B]
 6254      8C01A000 
 6254      0000
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6255              		.loc 1 765 43 is_stmt 1 discriminator 2 view .LVU2140
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6256              		.loc 1 765 11 discriminator 2 view .LVU2141
 766:sieve_extend.c ****     }
 6257              		.loc 1 766 9 discriminator 2 view .LVU2142
 6258              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6259              		.loc 1 766 56 is_stmt 0 discriminator 2 view .LVU2143
 6260 25f3 C4417D6F 		vmovdqa	ymm8, YMMWORD PTR 192[r11+rax]	# tmp1218, MEM[base: vectp.340_257, index: ivtmp.390_731, o
 6260      8403C000 
 6260      0000
 6261              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6262              		.loc 1 766 94 discriminator 2 view .LVU2144
 6263 25fd C5FE6FAC 		vmovdqu	ymm5, YMMWORD PTR 192[rdi+rax]	# tmp1219, MEM[base: vectp.344_264, index: ivtmp.390_731, o
 6263      07C00000 
 6263      00
 6264              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6265              		.loc 1 766 56 discriminator 2 view .LVU2145
 6266 2606 C4C13DD3 		vpsrlq	ymm0, ymm8, xmm10	# vect__38.342, tmp1218, _12
 6266      C2
 6267              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
GAS LISTING /tmp/cclewcPz.s 			page 176


 766:sieve_extend.c ****     }
 6268              		.loc 1 766 94 discriminator 2 view .LVU2146
 6269 260b C44155F3 		vpsllq	ymm9, ymm5, xmm11	# vect__43.346, tmp1219, _18
 6269      CB
 6270              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6271              		.loc 1 766 66 discriminator 2 view .LVU2147
 6272 2610 C4C17DEB 		vpor	ymm7, ymm0, ymm9	# vect__46.347, vect__38.342, vect__43.346
 6272      F9
 6273              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6274              		.loc 1 766 29 discriminator 2 view .LVU2148
 6275 2615 C4C17E7F 		vmovdqu	YMMWORD PTR 192[r9+rax], ymm7	# MEM[base: vectp.349_273, index: ivtmp.390_731, offset: 0B]
 6275      BC01C000 
 6275      0000
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6276              		.loc 1 765 43 is_stmt 1 discriminator 2 view .LVU2149
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6277              		.loc 1 765 11 discriminator 2 view .LVU2150
 766:sieve_extend.c ****     }
 6278              		.loc 1 766 9 discriminator 2 view .LVU2151
 6279              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6280              		.loc 1 766 56 is_stmt 0 discriminator 2 view .LVU2152
 6281 261f C4C17D6F 		vmovdqa	ymm2, YMMWORD PTR 224[r11+rax]	# tmp1220, MEM[base: vectp.340_257, index: ivtmp.390_731, o
 6281      9403E000 
 6281      0000
 6282              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6283              		.loc 1 766 94 discriminator 2 view .LVU2153
 6284 2629 C5FE6F9C 		vmovdqu	ymm3, YMMWORD PTR 224[rdi+rax]	# tmp1221, MEM[base: vectp.344_264, index: ivtmp.390_731, o
 6284      07E00000 
 6284      00
 6285              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6286              		.loc 1 766 56 discriminator 2 view .LVU2154
 6287 2632 C4C16DD3 		vpsrlq	ymm6, ymm2, xmm10	# vect__38.342, tmp1220, _12
 6287      F2
 6288              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6289              		.loc 1 766 94 discriminator 2 view .LVU2155
 6290 2637 C44165F3 		vpsllq	ymm12, ymm3, xmm11	# vect__43.346, tmp1221, _18
 6290      E3
 6291              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6292              		.loc 1 766 66 discriminator 2 view .LVU2156
 6293 263c C4414DEB 		vpor	ymm13, ymm6, ymm12	# vect__46.347, vect__38.342, vect__43.346
 6293      EC
 6294              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6295              		.loc 1 766 29 discriminator 2 view .LVU2157
 6296 2641 C4417E7F 		vmovdqu	YMMWORD PTR 224[r9+rax], ymm13	# MEM[base: vectp.349_273, index: ivtmp.390_731, offset: 0B
 6296      AC01E000 
 6296      0000
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6297              		.loc 1 765 43 is_stmt 1 discriminator 2 view .LVU2158
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
GAS LISTING /tmp/cclewcPz.s 			page 177


 6298              		.loc 1 765 11 discriminator 2 view .LVU2159
 6299 264b 48050001 		add	rax, 256	# ivtmp.390,
 6299      0000
 6300 2651 4C39E8   		cmp	rax, r13	# ivtmp.390, _733
 6301 2654 0F85BCFE 		jne	.L444	#,
 6301      FFFF
 6302              	.L585:
 6303 265a 4D89C3   		mov	r11, r8	# niters_vector_mult_vf.336, niters.334
 6304 265d 4983E3FC 		and	r11, -4	# niters_vector_mult_vf.336,
 6305 2661 4D39D8   		cmp	r8, r11	# niters.334, niters_vector_mult_vf.336
 6306 2664 4F8D241A 		lea	r12, [r10+r11]	# tmp.337,
 6307 2668 4F8D2C1E 		lea	r13, [r14+r11]	# tmp.338,
 6308 266c 0F84DA00 		je	.L440	#,
 6308      0000
 6309              	.L441:
 6310              	.LVL315:
 766:sieve_extend.c ****     }
 6311              		.loc 1 766 9 view .LVU2160
 6312              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6313              		.loc 1 765 5 is_stmt 0 view .LVU2161
 6314 2672 4C8B5C24 		mov	r11, QWORD PTR 80[rsp]	# aligned_copy_word, %sfp
 6314      50
 6315              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6316              		.loc 1 765 52 view .LVU2162
 6317 2677 4D8D4D01 		lea	r9, 1[r13]	# copy_word,
 6318              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6319              		.loc 1 766 94 view .LVU2163
 6320 267b C422E9F7 		shlx	r8, QWORD PTR 8[rbx+r12*8], rdx	# tmp733, *_521, shift_flipped
 6320      44E308
 6321              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6322              		.loc 1 766 56 view .LVU2164
 6323 2682 C42283F7 		shrx	r14, QWORD PTR [rbx+r12*8], r15	# tmp735, *_516, shift
 6323      34E3
 6324              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6325              		.loc 1 766 66 view .LVU2165
 6326 2688 4D09F0   		or	r8, r14	# tmp737, tmp735
 6327              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6328              		.loc 1 766 77 view .LVU2166
 6329 268b 4D8D5424 		lea	r10, 1[r12]	# _519,
 6329      01
 6330              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6331              		.loc 1 766 66 view .LVU2167
 6332 2690 4E8904EB 		mov	QWORD PTR [rbx+r13*8], r8	# *_525, tmp737
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6333              		.loc 1 765 43 is_stmt 1 view .LVU2168
 6334              	.LVL316:
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6335              		.loc 1 765 11 view .LVU2169
 6336              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
GAS LISTING /tmp/cclewcPz.s 			page 178


 6337              		.loc 1 765 5 is_stmt 0 view .LVU2170
 6338 2694 4D39CB   		cmp	r11, r9	# aligned_copy_word, copy_word
 6339 2697 0F82AF00 		jb	.L440	#,
 6339      0000
 766:sieve_extend.c ****     }
 6340              		.loc 1 766 9 is_stmt 1 view .LVU2171
 6341              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6342              		.loc 1 766 56 is_stmt 0 view .LVU2172
 6343 269d 4A8B3CD3 		mov	rdi, QWORD PTR [rbx+r10*8]	# *_533, *_533
 6344              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6345              		.loc 1 766 94 view .LVU2173
 6346 26a1 C4A2E9F7 		shlx	rsi, QWORD PTR 8[rbx+r10*8], rdx	# tmp738, *_538, shift_flipped
 6346      74D308
 6347              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6348              		.loc 1 765 52 view .LVU2174
 6349 26a8 4D8D5502 		lea	r10, 2[r13]	# copy_word,
 6350              	.LVL317:
 6351              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6352              		.loc 1 766 56 view .LVU2175
 6353 26ac C4E283F7 		shrx	rax, rdi, r15	# tmp740, *_533, shift
 6353      C7
 6354              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6355              		.loc 1 766 66 view .LVU2176
 6356 26b1 4809C6   		or	rsi, rax	# tmp742, tmp740
 6357              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6358              		.loc 1 765 5 view .LVU2177
 6359 26b4 4D39D3   		cmp	r11, r10	# aligned_copy_word, copy_word
 6360              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6361              		.loc 1 766 66 view .LVU2178
 6362 26b7 4A8934CB 		mov	QWORD PTR [rbx+r9*8], rsi	# *_542, tmp742
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6363              		.loc 1 765 43 is_stmt 1 view .LVU2179
 6364              	.LVL318:
 6365              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6366              		.loc 1 766 77 is_stmt 0 view .LVU2180
 6367 26bb 4D8D4424 		lea	r8, 2[r12]	# _536,
 6367      02
 6368              	.LVL319:
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6369              		.loc 1 765 11 is_stmt 1 view .LVU2181
 6370              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6371              		.loc 1 765 5 is_stmt 0 view .LVU2182
 6372 26c0 0F828600 		jb	.L440	#,
 6372      0000
 766:sieve_extend.c ****     }
 6373              		.loc 1 766 9 is_stmt 1 view .LVU2183
 6374              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
GAS LISTING /tmp/cclewcPz.s 			page 179


 6375              		.loc 1 766 94 is_stmt 0 view .LVU2184
 6376 26c6 C422E9F7 		shlx	r9, QWORD PTR 8[rbx+r8*8], rdx	# tmp743, *_555, shift_flipped
 6376      4CC308
 6377              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6378              		.loc 1 766 56 view .LVU2185
 6379 26cd 4E8B04C3 		mov	r8, QWORD PTR [rbx+r8*8]	# *_550, *_550
 6380              	.LVL320:
 766:sieve_extend.c ****     }
 6381              		.loc 1 766 56 view .LVU2186
 6382 26d1 C4C283F7 		shrx	rsi, r8, r15	# tmp745, *_550, shift
 6382      F0
 6383              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6384              		.loc 1 766 66 view .LVU2187
 6385 26d6 4909F1   		or	r9, rsi	# tmp747, tmp745
 6386 26d9 4E890CD3 		mov	QWORD PTR [rbx+r10*8], r9	# *_559, tmp747
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6387              		.loc 1 765 43 is_stmt 1 view .LVU2188
 6388              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6389              		.loc 1 765 52 is_stmt 0 view .LVU2189
 6390 26dd 4D8D5503 		lea	r10, 3[r13]	# copy_word,
 6391              	.LVL321:
 6392              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6393              		.loc 1 765 5 view .LVU2190
 6394 26e1 4D39D3   		cmp	r11, r10	# aligned_copy_word, copy_word
 6395              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6396              		.loc 1 766 77 view .LVU2191
 6397 26e4 4D8D7424 		lea	r14, 3[r12]	# _553,
 6397      03
 6398              	.LVL322:
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6399              		.loc 1 765 11 is_stmt 1 view .LVU2192
 6400              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6401              		.loc 1 765 5 is_stmt 0 view .LVU2193
 6402 26e9 7261     		jb	.L440	#,
 766:sieve_extend.c ****     }
 6403              		.loc 1 766 9 is_stmt 1 view .LVU2194
 6404              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6405              		.loc 1 766 94 is_stmt 0 view .LVU2195
 6406 26eb C4A2E9F7 		shlx	rax, QWORD PTR 8[rbx+r14*8], rdx	# tmp748, *_572, shift_flipped
 6406      44F308
 6407              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6408              		.loc 1 766 56 view .LVU2196
 6409 26f2 4A8B3CF3 		mov	rdi, QWORD PTR [rbx+r14*8]	# *_567, *_567
 6410 26f6 C46283F7 		shrx	r14, rdi, r15	# tmp750, *_567, shift
 6410      F7
 6411              	.LVL323:
 6412              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6413              		.loc 1 766 66 view .LVU2197
GAS LISTING /tmp/cclewcPz.s 			page 180


 6414 26fb 4C09F0   		or	rax, r14	# tmp752, tmp750
 6415 26fe 4A8904D3 		mov	QWORD PTR [rbx+r10*8], rax	# *_576, tmp752
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6416              		.loc 1 765 43 is_stmt 1 view .LVU2198
 6417              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6418              		.loc 1 765 52 is_stmt 0 view .LVU2199
 6419 2702 4D8D5504 		lea	r10, 4[r13]	# copy_word,
 6420              	.LVL324:
 6421              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6422              		.loc 1 765 5 view .LVU2200
 6423 2706 4D39D3   		cmp	r11, r10	# aligned_copy_word, copy_word
 6424              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6425              		.loc 1 766 77 view .LVU2201
 6426 2709 4D8D4C24 		lea	r9, 4[r12]	# _570,
 6426      04
 6427              	.LVL325:
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6428              		.loc 1 765 11 is_stmt 1 view .LVU2202
 6429              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6430              		.loc 1 765 5 is_stmt 0 view .LVU2203
 6431 270e 723C     		jb	.L440	#,
 766:sieve_extend.c ****     }
 6432              		.loc 1 766 9 is_stmt 1 view .LVU2204
 6433              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6434              		.loc 1 765 52 is_stmt 0 view .LVU2205
 6435 2710 4D8D6D05 		lea	r13, 5[r13]	# copy_word,
 6436              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6437              		.loc 1 766 94 view .LVU2206
 6438 2714 C422E9F7 		shlx	r8, QWORD PTR 8[rbx+r9*8], rdx	# tmp753, *_589, shift_flipped
 6438      44CB08
 6439              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6440              		.loc 1 766 56 view .LVU2207
 6441 271b 4A8B34CB 		mov	rsi, QWORD PTR [rbx+r9*8]	# *_584, *_584
 6442 271f C46283F7 		shrx	r9, rsi, r15	# tmp755, *_584, shift
 6442      CE
 6443              	.LVL326:
 6444              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6445              		.loc 1 766 66 view .LVU2208
 6446 2724 4D09C8   		or	r8, r9	# tmp757, tmp755
 6447              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6448              		.loc 1 765 5 view .LVU2209
 6449 2727 4D39EB   		cmp	r11, r13	# aligned_copy_word, copy_word
 6450              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6451              		.loc 1 766 66 view .LVU2210
 6452 272a 4E8904D3 		mov	QWORD PTR [rbx+r10*8], r8	# *_593, tmp757
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6453              		.loc 1 765 43 is_stmt 1 view .LVU2211
GAS LISTING /tmp/cclewcPz.s 			page 181


 6454              	.LVL327:
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6455              		.loc 1 765 11 view .LVU2212
 6456              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6457              		.loc 1 766 77 is_stmt 0 view .LVU2213
 6458 272e 4D8D6424 		lea	r12, 5[r12]	# _587,
 6458      05
 6459              	.LVL328:
 6460              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6461              		.loc 1 765 5 view .LVU2214
 6462 2733 7217     		jb	.L440	#,
 766:sieve_extend.c ****     }
 6463              		.loc 1 766 9 is_stmt 1 view .LVU2215
 6464              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6465              		.loc 1 766 56 is_stmt 0 view .LVU2216
 6466 2735 4E8B1CE3 		mov	r11, QWORD PTR [rbx+r12*8]	# *_232, *_232
 6467              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6468              		.loc 1 766 94 view .LVU2217
 6469 2739 C4A2E9F7 		shlx	rdx, QWORD PTR 8[rbx+r12*8], rdx	# tmp758, *_237, shift_flipped
 6469      54E308
 6470              	.LVL329:
 6471              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6472              		.loc 1 766 56 view .LVU2218
 6473 2740 C44283F7 		shrx	r15, r11, r15	# tmp760, *_232, shift
 6473      FB
 6474              	.LVL330:
 6475              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 6476              		.loc 1 766 66 view .LVU2219
 6477 2745 4C09FA   		or	rdx, r15	# tmp762, tmp760
 6478 2748 4A8914EB 		mov	QWORD PTR [rbx+r13*8], rdx	# *_241, tmp762
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6479              		.loc 1 765 43 is_stmt 1 view .LVU2220
 6480              	.LVL331:
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6481              		.loc 1 765 11 view .LVU2221
 6482              	.L440:
 769:sieve_extend.c **** 
 6483              		.loc 1 769 5 view .LVU2222
 6484              	# sieve_extend.c:769:     if (copy_word >= destination_stop_word) return;
 769:sieve_extend.c **** 
 6485              		.loc 1 769 8 is_stmt 0 view .LVU2223
 6486 274c 4C8B5424 		mov	r10, QWORD PTR 88[rsp]	# destination_stop_word, %sfp
 6486      58
 6487 2751 4939CA   		cmp	r10, rcx	# destination_stop_word, tmp.325
 6488 2754 0F860E04 		jbe	.L606	#,
 6488      0000
 771:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 6489              		.loc 1 771 5 is_stmt 1 view .LVU2224
 6490              	# sieve_extend.c:771:     source_word = copy_word - size; // recalibrate
 771:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 6491              		.loc 1 771 17 is_stmt 0 view .LVU2225
GAS LISTING /tmp/cclewcPz.s 			page 182


 6492 275a 488B7C24 		mov	rdi, QWORD PTR 24[rsp]	# size, %sfp
 6492      18
 6493 275f 4989CC   		mov	r12, rcx	# tmp.324, tmp.325
 6494              	# sieve_extend.c:775:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6495              		.loc 1 775 21 view .LVU2226
 6496 2762 488D040F 		lea	rax, [rdi+rcx]	# ivtmp.385,
 6497              	# sieve_extend.c:771:     source_word = copy_word - size; // recalibrate
 771:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 6498              		.loc 1 771 17 view .LVU2227
 6499 2766 4929FC   		sub	r12, rdi	# tmp.324, size
 6500              	.LVL332:
 772:sieve_extend.c **** 
 6501              		.loc 1 772 5 is_stmt 1 view .LVU2228
 6502              	# sieve_extend.c:775:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6503              		.loc 1 775 5 is_stmt 0 view .LVU2229
 6504 2769 4939C2   		cmp	r10, rax	# destination_stop_word, ivtmp.385
 6505              	# sieve_extend.c:772:     const size_t memsize = (size_t)size*sizeof(bitword_t);
 772:sieve_extend.c **** 
 6506              		.loc 1 772 18 view .LVU2230
 6507 276c 4C8D34FD 		lea	r14, 0[0+rdi*8]	# memsize,
 6507      00000000 
 6508              	.LVL333:
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6509              		.loc 1 775 11 is_stmt 1 view .LVU2231
 6510              	# sieve_extend.c:775:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6511              		.loc 1 775 5 is_stmt 0 view .LVU2232
 6512 2774 0F826B01 		jb	.L447	#,
 6512      0000
 6513 277a 4C8D2CCB 		lea	r13, [rbx+rcx*8]	# tmp765,
 6514 277e 488D0CC5 		lea	rcx, 0[0+rax*8]	# tmp766,
 6514      00000000 
 6515              	.LVL334:
 6516              	# sieve_extend.c:776:         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 776:sieve_extend.c **** 
 6517              		.loc 1 776 38 view .LVU2233
 6518 2786 4E8D3CE3 		lea	r15, [rbx+r12*8]	# _48,
 6519 278a 4929CD   		sub	r13, rcx	# _437, tmp766
 6520 278d 4C896424 		mov	QWORD PTR 72[rsp], r12	# %sfp, tmp.324
 6520      48
 6521 2792 4989FC   		mov	r12, rdi	# size, size
 6522              	.LVL335:
 776:sieve_extend.c **** 
 6523              		.loc 1 776 38 view .LVU2234
 6524 2795 48895C24 		mov	QWORD PTR 64[rsp], rbx	# %sfp, bitarray
 6524      40
 6525 279a 4C89D3   		mov	rbx, r10	# destination_stop_word, destination_stop_word
 6526              	.LVL336:
 776:sieve_extend.c **** 
 6527              		.loc 1 776 38 view .LVU2235
 6528 279d C5F877   		vzeroupper
 6529              	.LVL337:
 6530              	.L448:
 776:sieve_extend.c **** 
 6531              		.loc 1 776 9 is_stmt 1 discriminator 2 view .LVU2236
GAS LISTING /tmp/cclewcPz.s 			page 183


 6532              	.LBB380:
 6533              	.LBI380:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 6534              		.loc 2 31 1 discriminator 2 view .LVU2237
 6535              	.LBB381:
 6536              		.loc 2 34 3 discriminator 2 view .LVU2238
 6537              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 6538              		.loc 2 34 10 is_stmt 0 discriminator 2 view .LVU2239
 6539 27a0 498D7CC5 		lea	rdi, 0[r13+rax*8]	# tmp768,
 6539      00
 6540 27a5 4C89F2   		mov	rdx, r14	#, memsize
 6541 27a8 48894424 		mov	QWORD PTR 80[rsp], rax	# %sfp, ivtmp.385
 6541      50
 6542 27ad 4C89FE   		mov	rsi, r15	#, _48
 6543 27b0 E8000000 		call	memcpy@PLT	#
 6543      00
 6544              	.LVL338:
 6545              		.loc 2 34 10 discriminator 2 view .LVU2240
 6546              	.LBE381:
 6547              	.LBE380:
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6548              		.loc 1 775 54 is_stmt 1 discriminator 2 view .LVU2241
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6549              		.loc 1 775 11 discriminator 2 view .LVU2242
 6550 27b5 488B4C24 		mov	rcx, QWORD PTR 80[rsp]	# ivtmp.385, %sfp
 6550      50
 6551 27ba 4A8D0421 		lea	rax, [rcx+r12]	# ivtmp.385,
 6552              	# sieve_extend.c:775:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6553              		.loc 1 775 5 is_stmt 0 discriminator 2 view .LVU2243
 6554 27be 4839C3   		cmp	rbx, rax	# destination_stop_word, ivtmp.385
 6555 27c1 0F820901 		jb	.L594	#,
 6555      0000
 776:sieve_extend.c **** 
 6556              		.loc 1 776 9 is_stmt 1 view .LVU2244
 6557              	.LVL339:
 6558              	.LBB389:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 6559              		.loc 2 31 1 view .LVU2245
 6560              	.LBB382:
 6561              		.loc 2 34 3 view .LVU2246
 6562              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 6563              		.loc 2 34 10 is_stmt 0 view .LVU2247
 6564 27c7 498D7CC5 		lea	rdi, 0[r13+rax*8]	# tmp990,
 6564      00
 6565 27cc 4C89F2   		mov	rdx, r14	#, memsize
 6566 27cf 48894424 		mov	QWORD PTR 80[rsp], rax	# %sfp, ivtmp.385
 6566      50
 6567              	.LVL340:
 6568              		.loc 2 34 10 view .LVU2248
 6569 27d4 4C89FE   		mov	rsi, r15	#, _48
 6570 27d7 E8000000 		call	memcpy@PLT	#
 6570      00
 6571              	.LVL341:
 6572              		.loc 2 34 10 view .LVU2249
 6573              	.LBE382:
 6574              	.LBE389:
GAS LISTING /tmp/cclewcPz.s 			page 184


 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6575              		.loc 1 775 54 is_stmt 1 view .LVU2250
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6576              		.loc 1 775 11 view .LVU2251
 6577 27dc 488B4C24 		mov	rcx, QWORD PTR 80[rsp]	# ivtmp.385, %sfp
 6577      50
 6578 27e1 4E8D0421 		lea	r8, [rcx+r12]	# ivtmp.385,
 6579              	# sieve_extend.c:775:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6580              		.loc 1 775 5 is_stmt 0 view .LVU2252
 6581 27e5 4C39C3   		cmp	rbx, r8	# destination_stop_word, ivtmp.385
 6582 27e8 0F82E200 		jb	.L594	#,
 6582      0000
 776:sieve_extend.c **** 
 6583              		.loc 1 776 9 is_stmt 1 view .LVU2253
 6584              	.LVL342:
 6585              	.LBB390:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 6586              		.loc 2 31 1 view .LVU2254
 6587              	.LBB383:
 6588              		.loc 2 34 3 view .LVU2255
 6589              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 6590              		.loc 2 34 10 is_stmt 0 view .LVU2256
 6591 27ee 4C89FE   		mov	rsi, r15	#, _48
 6592 27f1 4B8D7CC5 		lea	rdi, 0[r13+r8*8]	# tmp993,
 6592      00
 6593 27f6 4C894424 		mov	QWORD PTR 80[rsp], r8	# %sfp, ivtmp.385
 6593      50
 6594 27fb 4C89F2   		mov	rdx, r14	#, memsize
 6595 27fe E8000000 		call	memcpy@PLT	#
 6595      00
 6596              	.LVL343:
 6597              		.loc 2 34 10 view .LVU2257
 6598              	.LBE383:
 6599              	.LBE390:
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6600              		.loc 1 775 54 is_stmt 1 view .LVU2258
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6601              		.loc 1 775 11 view .LVU2259
 6602 2803 488B4C24 		mov	rcx, QWORD PTR 80[rsp]	# ivtmp.385, %sfp
 6602      50
 6603 2808 4A8D3421 		lea	rsi, [rcx+r12]	# ivtmp.385,
 6604              	# sieve_extend.c:775:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6605              		.loc 1 775 5 is_stmt 0 view .LVU2260
 6606 280c 4839F3   		cmp	rbx, rsi	# destination_stop_word, ivtmp.385
 6607 280f 0F82BB00 		jb	.L594	#,
 6607      0000
 776:sieve_extend.c **** 
 6608              		.loc 1 776 9 is_stmt 1 view .LVU2261
 6609              	.LVL344:
 6610              	.LBB391:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 6611              		.loc 2 31 1 view .LVU2262
 6612              	.LBB384:
 6613              		.loc 2 34 3 view .LVU2263
 6614              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
GAS LISTING /tmp/cclewcPz.s 			page 185


 6615              		.loc 2 34 10 is_stmt 0 view .LVU2264
 6616 2815 498D7CF5 		lea	rdi, 0[r13+rsi*8]	# tmp996,
 6616      00
 6617 281a 4C89F2   		mov	rdx, r14	#, memsize
 6618 281d 48897424 		mov	QWORD PTR 80[rsp], rsi	# %sfp, ivtmp.385
 6618      50
 6619 2822 4C89FE   		mov	rsi, r15	#, _48
 6620 2825 E8000000 		call	memcpy@PLT	#
 6620      00
 6621              	.LVL345:
 6622              		.loc 2 34 10 view .LVU2265
 6623              	.LBE384:
 6624              	.LBE391:
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6625              		.loc 1 775 54 is_stmt 1 view .LVU2266
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6626              		.loc 1 775 11 view .LVU2267
 6627 282a 488B4C24 		mov	rcx, QWORD PTR 80[rsp]	# ivtmp.385, %sfp
 6627      50
 6628 282f 4E8D0C21 		lea	r9, [rcx+r12]	# ivtmp.385,
 6629              	# sieve_extend.c:775:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6630              		.loc 1 775 5 is_stmt 0 view .LVU2268
 6631 2833 4C39CB   		cmp	rbx, r9	# destination_stop_word, ivtmp.385
 6632 2836 0F829400 		jb	.L594	#,
 6632      0000
 776:sieve_extend.c **** 
 6633              		.loc 1 776 9 is_stmt 1 view .LVU2269
 6634              	.LVL346:
 6635              	.LBB392:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 6636              		.loc 2 31 1 view .LVU2270
 6637              	.LBB385:
 6638              		.loc 2 34 3 view .LVU2271
 6639              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 6640              		.loc 2 34 10 is_stmt 0 view .LVU2272
 6641 283c 4C89F2   		mov	rdx, r14	#, memsize
 6642 283f 4B8D7CCD 		lea	rdi, 0[r13+r9*8]	# tmp999,
 6642      00
 6643 2844 4C894C24 		mov	QWORD PTR 80[rsp], r9	# %sfp, ivtmp.385
 6643      50
 6644 2849 4C89FE   		mov	rsi, r15	#, _48
 6645 284c E8000000 		call	memcpy@PLT	#
 6645      00
 6646              	.LVL347:
 6647              		.loc 2 34 10 view .LVU2273
 6648              	.LBE385:
 6649              	.LBE392:
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6650              		.loc 1 775 54 is_stmt 1 view .LVU2274
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6651              		.loc 1 775 11 view .LVU2275
 6652 2851 488B4C24 		mov	rcx, QWORD PTR 80[rsp]	# ivtmp.385, %sfp
 6652      50
 6653 2856 4A8D1421 		lea	rdx, [rcx+r12]	# ivtmp.385,
 6654              	# sieve_extend.c:775:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
GAS LISTING /tmp/cclewcPz.s 			page 186


 6655              		.loc 1 775 5 is_stmt 0 view .LVU2276
 6656 285a 4839D3   		cmp	rbx, rdx	# destination_stop_word, ivtmp.385
 6657 285d 7271     		jb	.L594	#,
 776:sieve_extend.c **** 
 6658              		.loc 1 776 9 is_stmt 1 view .LVU2277
 6659              	.LVL348:
 6660              	.LBB393:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 6661              		.loc 2 31 1 view .LVU2278
 6662              	.LBB386:
 6663              		.loc 2 34 3 view .LVU2279
 6664              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 6665              		.loc 2 34 10 is_stmt 0 view .LVU2280
 6666 285f 498D7CD5 		lea	rdi, 0[r13+rdx*8]	# tmp1002,
 6666      00
 6667 2864 4C89FE   		mov	rsi, r15	#, _48
 6668 2867 48895424 		mov	QWORD PTR 80[rsp], rdx	# %sfp, ivtmp.385
 6668      50
 6669 286c 4C89F2   		mov	rdx, r14	#, memsize
 6670 286f E8000000 		call	memcpy@PLT	#
 6670      00
 6671              	.LVL349:
 6672              		.loc 2 34 10 view .LVU2281
 6673              	.LBE386:
 6674              	.LBE393:
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6675              		.loc 1 775 54 is_stmt 1 view .LVU2282
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6676              		.loc 1 775 11 view .LVU2283
 6677 2874 488B4C24 		mov	rcx, QWORD PTR 80[rsp]	# ivtmp.385, %sfp
 6677      50
 6678 2879 4E8D1C21 		lea	r11, [rcx+r12]	# ivtmp.385,
 6679              	# sieve_extend.c:775:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6680              		.loc 1 775 5 is_stmt 0 view .LVU2284
 6681 287d 4C39DB   		cmp	rbx, r11	# destination_stop_word, ivtmp.385
 6682 2880 724E     		jb	.L594	#,
 776:sieve_extend.c **** 
 6683              		.loc 1 776 9 is_stmt 1 view .LVU2285
 6684              	.LVL350:
 6685              	.LBB394:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 6686              		.loc 2 31 1 view .LVU2286
 6687              	.LBB387:
 6688              		.loc 2 34 3 view .LVU2287
 6689              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 6690              		.loc 2 34 10 is_stmt 0 view .LVU2288
 6691 2882 4B8D7CDD 		lea	rdi, 0[r13+r11*8]	# tmp1005,
 6691      00
 6692 2887 4C89F2   		mov	rdx, r14	#, memsize
 6693 288a 4C895C24 		mov	QWORD PTR 80[rsp], r11	# %sfp, ivtmp.385
 6693      50
 6694 288f 4C89FE   		mov	rsi, r15	#, _48
 6695 2892 E8000000 		call	memcpy@PLT	#
 6695      00
 6696              	.LVL351:
 6697              		.loc 2 34 10 view .LVU2289
GAS LISTING /tmp/cclewcPz.s 			page 187


 6698              	.LBE387:
 6699              	.LBE394:
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6700              		.loc 1 775 54 is_stmt 1 view .LVU2290
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6701              		.loc 1 775 11 view .LVU2291
 6702 2897 488B4C24 		mov	rcx, QWORD PTR 80[rsp]	# ivtmp.385, %sfp
 6702      50
 6703 289c 4E8D1421 		lea	r10, [rcx+r12]	# ivtmp.385,
 6704              	# sieve_extend.c:775:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6705              		.loc 1 775 5 is_stmt 0 view .LVU2292
 6706 28a0 4C39D3   		cmp	rbx, r10	# destination_stop_word, ivtmp.385
 6707 28a3 722B     		jb	.L594	#,
 776:sieve_extend.c **** 
 6708              		.loc 1 776 9 is_stmt 1 view .LVU2293
 6709              	.LVL352:
 6710              	.LBB395:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 6711              		.loc 2 31 1 view .LVU2294
 6712              	.LBB388:
 6713              		.loc 2 34 3 view .LVU2295
 6714              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 6715              		.loc 2 34 10 is_stmt 0 view .LVU2296
 6716 28a5 4B8D7CD5 		lea	rdi, 0[r13+r10*8]	# tmp1008,
 6716      00
 6717 28aa 4C89F2   		mov	rdx, r14	#, memsize
 6718 28ad 4C895424 		mov	QWORD PTR 80[rsp], r10	# %sfp, ivtmp.385
 6718      50
 6719 28b2 4C89FE   		mov	rsi, r15	#, _48
 6720 28b5 E8000000 		call	memcpy@PLT	#
 6720      00
 6721              	.LVL353:
 6722              		.loc 2 34 10 view .LVU2297
 6723              	.LBE388:
 6724              	.LBE395:
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6725              		.loc 1 775 54 is_stmt 1 view .LVU2298
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6726              		.loc 1 775 11 view .LVU2299
 6727 28ba 488B4C24 		mov	rcx, QWORD PTR 80[rsp]	# ivtmp.385, %sfp
 6727      50
 6728              	.LVL354:
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6729              		.loc 1 775 11 is_stmt 0 view .LVU2300
 6730 28bf 4A8D0421 		lea	rax, [rcx+r12]	# ivtmp.385,
 6731              	.LVL355:
 6732              	# sieve_extend.c:775:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6733              		.loc 1 775 5 view .LVU2301
 6734 28c3 4839C3   		cmp	rbx, rax	# destination_stop_word, ivtmp.385
 6735 28c6 0F83D4FE 		jnb	.L448	#,
 6735      FFFF
 6736              	.LVL356:
 6737 28cc 0F1F4000 		.p2align 4
 6738              		.p2align 3
 6739              	.L594:
GAS LISTING /tmp/cclewcPz.s 			page 188


 775:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 6740              		.loc 1 775 5 view .LVU2302
 6741 28d0 4C8B6424 		mov	r12, QWORD PTR 72[rsp]	# tmp.324, %sfp
 6741      48
 6742              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6743              		.loc 1 779 5 view .LVU2303
 6744 28d5 48394C24 		cmp	QWORD PTR 88[rsp], rcx	# %sfp, tmp.325
 6744      58
 6745 28da 488B5C24 		mov	rbx, QWORD PTR 64[rsp]	# bitarray, %sfp
 6745      40
 6746              	.LVL357:
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6747              		.loc 1 779 11 is_stmt 1 view .LVU2304
 6748              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6749              		.loc 1 779 5 is_stmt 0 view .LVU2305
 6750 28df 0F827402 		jb	.L607	#,
 6750      0000
 6751              	.LVL358:
 6752              	.L447:
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6753              		.loc 1 779 5 view .LVU2306
 6754 28e5 4A8D3CE3 		lea	rdi, [rbx+r12*8]	# vectp.319,
 6755 28e9 41B80500 		mov	r8d, 5	# tmp778,
 6755      0000
 6756 28ef 4C8B7424 		mov	r14, QWORD PTR 88[rsp]	# destination_stop_word, %sfp
 6756      58
 6757              	.LVL359:
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6758              		.loc 1 779 5 view .LVU2307
 6759 28f4 4989FD   		mov	r13, rdi	# tmp775, vectp.319
 6760 28f7 49C1ED03 		shr	r13, 3	# tmp775,
 6761 28fb 49F7DD   		neg	r13	# tmp776
 6762 28fe 4183E503 		and	r13d, 3	# prolog_loop_niters.320,
 6763 2902 4D8D7E01 		lea	r15, 1[r14]	# _49,
 6764 2906 498D7503 		lea	rsi, 3[r13]	# tmp777,
 6765 290a 4883FE05 		cmp	rsi, 5	# tmp777,
 6766 290e 490F42F0 		cmovb	rsi, r8	# tmp777,, tmp967, tmp778
 6767 2912 4929CE   		sub	r14, rcx	# tmp779, tmp.325
 6768 2915 4C39F6   		cmp	rsi, r14	# tmp967, tmp779
 6769 2918 0F87BA01 		ja	.L450	#,
 6769      0000
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6770              		.loc 1 779 5 view .LVU2308
 6771 291e 4D85ED   		test	r13, r13	# prolog_loop_niters.320
 6772 2921 0F846902 		je	.L458	#,
 6772      0000
 780:sieve_extend.c **** 
 6773              		.loc 1 780 9 is_stmt 1 view .LVU2309
 6774              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6775              		.loc 1 780 39 is_stmt 0 view .LVU2310
 6776 2927 488B17   		mov	rdx, QWORD PTR [rdi]	# _80, MEM[(uint64_t *)vectp.319_198]
 6777 292a 4983FD01 		cmp	r13, 1	# prolog_loop_niters.320,
 6778              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/cclewcPz.s 			page 189


 6779              		.loc 1 779 57 view .LVU2311
 6780 292e 4C8D5901 		lea	r11, 1[rcx]	# copy_word,
 6781              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6782              		.loc 1 779 71 view .LVU2312
 6783 2932 4D8D7424 		lea	r14, 1[r12]	# source_word,
 6783      01
 6784              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6785              		.loc 1 780 29 view .LVU2313
 6786 2937 488914CB 		mov	QWORD PTR [rbx+rcx*8], rdx	# *_56, _80
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6787              		.loc 1 779 48 is_stmt 1 view .LVU2314
 6788              	.LVL360:
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6789              		.loc 1 779 11 view .LVU2315
 6790 293b 7428     		je	.L451	#,
 780:sieve_extend.c **** 
 6791              		.loc 1 780 9 view .LVU2316
 6792              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6793              		.loc 1 780 39 is_stmt 0 view .LVU2317
 6794 293d 4E8B14F3 		mov	r10, QWORD PTR [rbx+r14*8]	# _507, *_504
 6795 2941 4983FD03 		cmp	r13, 3	# prolog_loop_niters.320,
 6796              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6797              		.loc 1 779 71 view .LVU2318
 6798 2945 4D8D7424 		lea	r14, 2[r12]	# source_word,
 6798      02
 6799              	.LVL361:
 6800              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6801              		.loc 1 780 29 view .LVU2319
 6802 294a 4E8914DB 		mov	QWORD PTR [rbx+r11*8], r10	# *_506, _507
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6803              		.loc 1 779 48 is_stmt 1 view .LVU2320
 6804              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6805              		.loc 1 779 57 is_stmt 0 view .LVU2321
 6806 294e 4C8D5902 		lea	r11, 2[rcx]	# copy_word,
 6807              	.LVL362:
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6808              		.loc 1 779 11 is_stmt 1 view .LVU2322
 6809 2952 7511     		jne	.L451	#,
 780:sieve_extend.c **** 
 6810              		.loc 1 780 9 view .LVU2323
 6811              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6812              		.loc 1 780 39 is_stmt 0 view .LVU2324
 6813 2954 4A8B04F3 		mov	rax, QWORD PTR [rbx+r14*8]	# _179, *_182
 6814              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6815              		.loc 1 779 71 view .LVU2325
 6816 2958 4D8D7424 		lea	r14, 3[r12]	# source_word,
 6816      03
 6817              	.LVL363:
 6818              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/cclewcPz.s 			page 190


 780:sieve_extend.c **** 
 6819              		.loc 1 780 29 view .LVU2326
 6820 295d 4A8904DB 		mov	QWORD PTR [rbx+r11*8], rax	# *_180, _179
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6821              		.loc 1 779 48 is_stmt 1 view .LVU2327
 6822              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6823              		.loc 1 779 57 is_stmt 0 view .LVU2328
 6824 2961 4C8D5903 		lea	r11, 3[rcx]	# copy_word,
 6825              	.LVL364:
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6826              		.loc 1 779 11 is_stmt 1 view .LVU2329
 6827              	.L451:
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6828              		.loc 1 779 11 is_stmt 0 view .LVU2330
 6829 2965 4D29EF   		sub	r15, r13	# tmp780, prolog_loop_niters.320
 6830 2968 4D01EC   		add	r12, r13	# tmp781, prolog_loop_niters.320
 6831 296b 4929CF   		sub	r15, rcx	# niters.321, tmp.325
 6832 296e 4C01E9   		add	rcx, r13	# tmp783, prolog_loop_niters.320
 6833 2971 4C89FF   		mov	rdi, r15	# bnd.322, niters.321
 6834              	# sieve_extend.c:771:     source_word = copy_word - size; // recalibrate
 771:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 6835              		.loc 1 771 17 view .LVU2331
 6836 2974 31F6     		xor	esi, esi	# ivtmp.377
 6837 2976 48C1EF02 		shr	rdi, 2	# bnd.322,
 6838 297a 4E8D24E3 		lea	r12, [rbx+r12*8]	# vectp.327,
 6839 297e 48C1E705 		sal	rdi, 5	# _635,
 6840 2982 488D0CCB 		lea	rcx, [rbx+rcx*8]	# vectp.330,
 6841 2986 4C8D6FE0 		lea	r13, -32[rdi]	# tmp793,
 6842 298a 49C1ED05 		shr	r13, 5	# tmp791,
 6843 298e 4983C501 		add	r13, 1	# tmp794,
 6844 2992 4183E507 		and	r13d, 7	# tmp795,
 6845 2996 0F849600 		je	.L453	#,
 6845      0000
 6846 299c 4983FD01 		cmp	r13, 1	# tmp795,
 6847 29a0 7478     		je	.L544	#,
 6848 29a2 4983FD02 		cmp	r13, 2	# tmp795,
 6849 29a6 7463     		je	.L545	#,
 6850 29a8 4983FD03 		cmp	r13, 3	# tmp795,
 6851 29ac 744E     		je	.L546	#,
 6852 29ae 4983FD04 		cmp	r13, 4	# tmp795,
 6853 29b2 7439     		je	.L547	#,
 6854 29b4 4983FD05 		cmp	r13, 5	# tmp795,
 6855 29b8 7424     		je	.L548	#,
 6856 29ba 4983FD06 		cmp	r13, 6	# tmp795,
 6857 29be 740F     		je	.L549	#,
 6858              	.LVL365:
 780:sieve_extend.c **** 
 6859              		.loc 1 780 9 is_stmt 1 view .LVU2332
 6860              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6861              		.loc 1 780 29 is_stmt 0 view .LVU2333
 6862 29c0 C4417D6F 		vmovdqa	ymm10, YMMWORD PTR [r12]	# tmp1253, MEM[base: vectp.327_120, index: ivtmp.377_513, offset:
 6862      1424
 6863 29c6 BE200000 		mov	esi, 32	# ivtmp.377,
 6863      00
 6864 29cb C57E7F11 		vmovdqu	YMMWORD PTR [rcx], ymm10	# MEM[base: vectp.330_97, index: ivtmp.377_513, offset: 0B], tmp1
GAS LISTING /tmp/cclewcPz.s 			page 191


 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6865              		.loc 1 779 48 is_stmt 1 view .LVU2334
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6866              		.loc 1 779 11 view .LVU2335
 6867              	.L549:
 780:sieve_extend.c **** 
 6868              		.loc 1 780 9 view .LVU2336
 6869              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6870              		.loc 1 780 29 is_stmt 0 view .LVU2337
 6871 29cf C4417D6F 		vmovdqa	ymm11, YMMWORD PTR [r12+rsi]	# tmp1254, MEM[base: vectp.327_120, index: ivtmp.377_513, off
 6871      1C34
 6872 29d5 C57E7F1C 		vmovdqu	YMMWORD PTR [rcx+rsi], ymm11	# MEM[base: vectp.330_97, index: ivtmp.377_513, offset: 0B], 
 6872      31
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6873              		.loc 1 779 48 is_stmt 1 view .LVU2338
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6874              		.loc 1 779 11 view .LVU2339
 6875 29da 4883C620 		add	rsi, 32	# ivtmp.377,
 6876              	.L548:
 780:sieve_extend.c **** 
 6877              		.loc 1 780 9 view .LVU2340
 6878              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6879              		.loc 1 780 29 is_stmt 0 view .LVU2341
 6880 29de C4417D6F 		vmovdqa	ymm14, YMMWORD PTR [r12+rsi]	# tmp1255, MEM[base: vectp.327_120, index: ivtmp.377_513, off
 6880      3434
 6881 29e4 C57E7F34 		vmovdqu	YMMWORD PTR [rcx+rsi], ymm14	# MEM[base: vectp.330_97, index: ivtmp.377_513, offset: 0B], 
 6881      31
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6882              		.loc 1 779 48 is_stmt 1 view .LVU2342
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6883              		.loc 1 779 11 view .LVU2343
 6884 29e9 4883C620 		add	rsi, 32	# ivtmp.377,
 6885              	.L547:
 780:sieve_extend.c **** 
 6886              		.loc 1 780 9 view .LVU2344
 6887              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6888              		.loc 1 780 29 is_stmt 0 view .LVU2345
 6889 29ed C4C17D6F 		vmovdqa	ymm4, YMMWORD PTR [r12+rsi]	# tmp1256, MEM[base: vectp.327_120, index: ivtmp.377_513, offs
 6889      2434
 6890 29f3 C5FE7F24 		vmovdqu	YMMWORD PTR [rcx+rsi], ymm4	# MEM[base: vectp.330_97, index: ivtmp.377_513, offset: 0B], t
 6890      31
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6891              		.loc 1 779 48 is_stmt 1 view .LVU2346
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6892              		.loc 1 779 11 view .LVU2347
 6893 29f8 4883C620 		add	rsi, 32	# ivtmp.377,
 6894              	.L546:
 780:sieve_extend.c **** 
 6895              		.loc 1 780 9 view .LVU2348
 6896              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6897              		.loc 1 780 29 is_stmt 0 view .LVU2349
 6898 29fc C4417D6F 		vmovdqa	ymm15, YMMWORD PTR [r12+rsi]	# tmp1257, MEM[base: vectp.327_120, index: ivtmp.377_513, off
 6898      3C34
GAS LISTING /tmp/cclewcPz.s 			page 192


 6899 2a02 C57E7F3C 		vmovdqu	YMMWORD PTR [rcx+rsi], ymm15	# MEM[base: vectp.330_97, index: ivtmp.377_513, offset: 0B], 
 6899      31
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6900              		.loc 1 779 48 is_stmt 1 view .LVU2350
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6901              		.loc 1 779 11 view .LVU2351
 6902 2a07 4883C620 		add	rsi, 32	# ivtmp.377,
 6903              	.L545:
 780:sieve_extend.c **** 
 6904              		.loc 1 780 9 view .LVU2352
 6905              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6906              		.loc 1 780 29 is_stmt 0 view .LVU2353
 6907 2a0b C4C17D6F 		vmovdqa	ymm1, YMMWORD PTR [r12+rsi]	# tmp1258, MEM[base: vectp.327_120, index: ivtmp.377_513, offs
 6907      0C34
 6908 2a11 C5FE7F0C 		vmovdqu	YMMWORD PTR [rcx+rsi], ymm1	# MEM[base: vectp.330_97, index: ivtmp.377_513, offset: 0B], t
 6908      31
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6909              		.loc 1 779 48 is_stmt 1 view .LVU2354
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6910              		.loc 1 779 11 view .LVU2355
 6911 2a16 4883C620 		add	rsi, 32	# ivtmp.377,
 6912              	.L544:
 780:sieve_extend.c **** 
 6913              		.loc 1 780 9 view .LVU2356
 6914              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6915              		.loc 1 780 29 is_stmt 0 view .LVU2357
 6916 2a1a C4417D6F 		vmovdqa	ymm8, YMMWORD PTR [r12+rsi]	# tmp1259, MEM[base: vectp.327_120, index: ivtmp.377_513, offs
 6916      0434
 6917 2a20 C57E7F04 		vmovdqu	YMMWORD PTR [rcx+rsi], ymm8	# MEM[base: vectp.330_97, index: ivtmp.377_513, offset: 0B], t
 6917      31
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6918              		.loc 1 779 48 is_stmt 1 view .LVU2358
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6919              		.loc 1 779 11 view .LVU2359
 6920 2a25 4883C620 		add	rsi, 32	# ivtmp.377,
 6921 2a29 4839FE   		cmp	rsi, rdi	# ivtmp.377, _635
 6922 2a2c 0F848E00 		je	.L583	#,
 6922      0000
 6923              	.L453:
 780:sieve_extend.c **** 
 6924              		.loc 1 780 9 discriminator 2 view .LVU2360
 6925              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6926              		.loc 1 780 29 is_stmt 0 discriminator 2 view .LVU2361
 6927 2a32 C4C17D6F 		vmovdqa	ymm0, YMMWORD PTR [r12+rsi]	# tmp1239, MEM[base: vectp.327_120, index: ivtmp.377_513, offs
 6927      0434
 6928 2a38 C5FE7F04 		vmovdqu	YMMWORD PTR [rcx+rsi], ymm0	# MEM[base: vectp.330_97, index: ivtmp.377_513, offset: 0B], t
 6928      31
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6929              		.loc 1 779 48 is_stmt 1 discriminator 2 view .LVU2362
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6930              		.loc 1 779 11 discriminator 2 view .LVU2363
 780:sieve_extend.c **** 
 6931              		.loc 1 780 9 discriminator 2 view .LVU2364
 6932              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/cclewcPz.s 			page 193


 780:sieve_extend.c **** 
 6933              		.loc 1 780 29 is_stmt 0 discriminator 2 view .LVU2365
 6934 2a3d C4C17D6F 		vmovdqa	ymm5, YMMWORD PTR 32[r12+rsi]	# tmp1240, MEM[base: vectp.327_120, index: ivtmp.377_513, of
 6934      6C3420
 6935 2a44 C5FE7F6C 		vmovdqu	YMMWORD PTR 32[rcx+rsi], ymm5	# MEM[base: vectp.330_97, index: ivtmp.377_513, offset: 0B],
 6935      3120
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6936              		.loc 1 779 48 is_stmt 1 discriminator 2 view .LVU2366
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6937              		.loc 1 779 11 discriminator 2 view .LVU2367
 780:sieve_extend.c **** 
 6938              		.loc 1 780 9 discriminator 2 view .LVU2368
 6939              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6940              		.loc 1 780 29 is_stmt 0 discriminator 2 view .LVU2369
 6941 2a4a C4417D6F 		vmovdqa	ymm9, YMMWORD PTR 64[r12+rsi]	# tmp1241, MEM[base: vectp.327_120, index: ivtmp.377_513, of
 6941      4C3440
 6942 2a51 C57E7F4C 		vmovdqu	YMMWORD PTR 64[rcx+rsi], ymm9	# MEM[base: vectp.330_97, index: ivtmp.377_513, offset: 0B],
 6942      3140
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6943              		.loc 1 779 48 is_stmt 1 discriminator 2 view .LVU2370
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6944              		.loc 1 779 11 discriminator 2 view .LVU2371
 780:sieve_extend.c **** 
 6945              		.loc 1 780 9 discriminator 2 view .LVU2372
 6946              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6947              		.loc 1 780 29 is_stmt 0 discriminator 2 view .LVU2373
 6948 2a57 C4C17D6F 		vmovdqa	ymm7, YMMWORD PTR 96[r12+rsi]	# tmp1242, MEM[base: vectp.327_120, index: ivtmp.377_513, of
 6948      7C3460
 6949 2a5e C5FE7F7C 		vmovdqu	YMMWORD PTR 96[rcx+rsi], ymm7	# MEM[base: vectp.330_97, index: ivtmp.377_513, offset: 0B],
 6949      3160
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6950              		.loc 1 779 48 is_stmt 1 discriminator 2 view .LVU2374
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6951              		.loc 1 779 11 discriminator 2 view .LVU2375
 780:sieve_extend.c **** 
 6952              		.loc 1 780 9 discriminator 2 view .LVU2376
 6953              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6954              		.loc 1 780 29 is_stmt 0 discriminator 2 view .LVU2377
 6955 2a64 C4C17D6F 		vmovdqa	ymm2, YMMWORD PTR 128[r12+rsi]	# tmp1243, MEM[base: vectp.327_120, index: ivtmp.377_513, o
 6955      94348000 
 6955      0000
 6956 2a6e C5FE7F94 		vmovdqu	YMMWORD PTR 128[rcx+rsi], ymm2	# MEM[base: vectp.330_97, index: ivtmp.377_513, offset: 0B]
 6956      31800000 
 6956      00
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6957              		.loc 1 779 48 is_stmt 1 discriminator 2 view .LVU2378
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6958              		.loc 1 779 11 discriminator 2 view .LVU2379
 780:sieve_extend.c **** 
 6959              		.loc 1 780 9 discriminator 2 view .LVU2380
 6960              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6961              		.loc 1 780 29 is_stmt 0 discriminator 2 view .LVU2381
 6962 2a77 C4C17D6F 		vmovdqa	ymm6, YMMWORD PTR 160[r12+rsi]	# tmp1244, MEM[base: vectp.327_120, index: ivtmp.377_513, o
GAS LISTING /tmp/cclewcPz.s 			page 194


 6962      B434A000 
 6962      0000
 6963 2a81 C5FE7FB4 		vmovdqu	YMMWORD PTR 160[rcx+rsi], ymm6	# MEM[base: vectp.330_97, index: ivtmp.377_513, offset: 0B]
 6963      31A00000 
 6963      00
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6964              		.loc 1 779 48 is_stmt 1 discriminator 2 view .LVU2382
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6965              		.loc 1 779 11 discriminator 2 view .LVU2383
 780:sieve_extend.c **** 
 6966              		.loc 1 780 9 discriminator 2 view .LVU2384
 6967              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6968              		.loc 1 780 29 is_stmt 0 discriminator 2 view .LVU2385
 6969 2a8a C4C17D6F 		vmovdqa	ymm3, YMMWORD PTR 192[r12+rsi]	# tmp1245, MEM[base: vectp.327_120, index: ivtmp.377_513, o
 6969      9C34C000 
 6969      0000
 6970 2a94 C5FE7F9C 		vmovdqu	YMMWORD PTR 192[rcx+rsi], ymm3	# MEM[base: vectp.330_97, index: ivtmp.377_513, offset: 0B]
 6970      31C00000 
 6970      00
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6971              		.loc 1 779 48 is_stmt 1 discriminator 2 view .LVU2386
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6972              		.loc 1 779 11 discriminator 2 view .LVU2387
 780:sieve_extend.c **** 
 6973              		.loc 1 780 9 discriminator 2 view .LVU2388
 6974              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 6975              		.loc 1 780 29 is_stmt 0 discriminator 2 view .LVU2389
 6976 2a9d C4417D6F 		vmovdqa	ymm12, YMMWORD PTR 224[r12+rsi]	# tmp1246, MEM[base: vectp.327_120, index: ivtmp.377_513, 
 6976      A434E000 
 6976      0000
 6977 2aa7 C57E7FA4 		vmovdqu	YMMWORD PTR 224[rcx+rsi], ymm12	# MEM[base: vectp.330_97, index: ivtmp.377_513, offset: 0B
 6977      31E00000 
 6977      00
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6978              		.loc 1 779 48 is_stmt 1 discriminator 2 view .LVU2390
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6979              		.loc 1 779 11 discriminator 2 view .LVU2391
 6980 2ab0 4881C600 		add	rsi, 256	# ivtmp.377,
 6980      010000
 6981 2ab7 4839FE   		cmp	rsi, rdi	# ivtmp.377, _635
 6982 2aba 0F8572FF 		jne	.L453	#,
 6982      FFFF
 6983              	.L583:
 6984 2ac0 4D89F8   		mov	r8, r15	# niters_vector_mult_vf.323, niters.321
 6985 2ac3 4983E0FC 		and	r8, -4	# niters_vector_mult_vf.323,
 6986 2ac7 4D39F8   		cmp	r8, r15	# niters_vector_mult_vf.323, niters.321
 6987 2aca 4F8D2430 		lea	r12, [r8+r14]	# tmp.324,
 6988 2ace 4B8D0C18 		lea	rcx, [r8+r11]	# tmp.325,
 6989 2ad2 0F849000 		je	.L606	#,
 6989      0000
 6990              	.L450:
 6991              	.LVL366:
 780:sieve_extend.c **** 
 6992              		.loc 1 780 9 view .LVU2392
 6993              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
GAS LISTING /tmp/cclewcPz.s 			page 195


 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6994              		.loc 1 779 5 is_stmt 0 view .LVU2393
 6995 2ad8 4C8B7424 		mov	r14, QWORD PTR 88[rsp]	# destination_stop_word, %sfp
 6995      58
 6996              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6997              		.loc 1 779 57 view .LVU2394
 6998 2add 4C8D4901 		lea	r9, 1[rcx]	# copy_word,
 6999              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 7000              		.loc 1 780 39 view .LVU2395
 7001 2ae1 4E8B3CE3 		mov	r15, QWORD PTR [rbx+r12*8]	# _90, *_141
 7002              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7003              		.loc 1 779 71 view .LVU2396
 7004 2ae5 4D8D5C24 		lea	r11, 1[r12]	# source_word,
 7004      01
 7005              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7006              		.loc 1 779 5 view .LVU2397
 7007 2aea 4D39CE   		cmp	r14, r9	# destination_stop_word, copy_word
 7008              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 7009              		.loc 1 780 29 view .LVU2398
 7010 2aed 4C893CCB 		mov	QWORD PTR [rbx+rcx*8], r15	# *_439, _90
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7011              		.loc 1 779 48 is_stmt 1 view .LVU2399
 7012              	.LVL367:
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7013              		.loc 1 779 11 view .LVU2400
 7014              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7015              		.loc 1 779 5 is_stmt 0 view .LVU2401
 7016 2af1 7275     		jb	.L606	#,
 780:sieve_extend.c **** 
 7017              		.loc 1 780 9 is_stmt 1 view .LVU2402
 7018              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 7019              		.loc 1 780 39 is_stmt 0 view .LVU2403
 7020 2af3 4A8B14DB 		mov	rdx, QWORD PTR [rbx+r11*8]	# _103, *_98
 7021              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7022              		.loc 1 779 57 view .LVU2404
 7023 2af7 4C8D5102 		lea	r10, 2[rcx]	# copy_word,
 7024              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7025              		.loc 1 779 5 view .LVU2405
 7026 2afb 4D39D6   		cmp	r14, r10	# destination_stop_word, copy_word
 7027              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7028              		.loc 1 779 71 view .LVU2406
 7029 2afe 498D4424 		lea	rax, 2[r12]	# source_word,
 7029      02
 7030              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 7031              		.loc 1 780 29 view .LVU2407
 7032 2b03 4A8914CB 		mov	QWORD PTR [rbx+r9*8], rdx	# *_102, _103
GAS LISTING /tmp/cclewcPz.s 			page 196


 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7033              		.loc 1 779 48 is_stmt 1 view .LVU2408
 7034              	.LVL368:
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7035              		.loc 1 779 11 view .LVU2409
 7036              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7037              		.loc 1 779 5 is_stmt 0 view .LVU2410
 7038 2b07 725F     		jb	.L606	#,
 780:sieve_extend.c **** 
 7039              		.loc 1 780 9 is_stmt 1 view .LVU2411
 7040              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 7041              		.loc 1 780 39 is_stmt 0 view .LVU2412
 7042 2b09 488B3CC3 		mov	rdi, QWORD PTR [rbx+rax*8]	# _113, *_110
 7043              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7044              		.loc 1 779 57 view .LVU2413
 7045 2b0d 4C8D6903 		lea	r13, 3[rcx]	# copy_word,
 7046              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7047              		.loc 1 779 5 view .LVU2414
 7048 2b11 4D39EE   		cmp	r14, r13	# destination_stop_word, copy_word
 7049              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7050              		.loc 1 779 71 view .LVU2415
 7051 2b14 498D7424 		lea	rsi, 3[r12]	# source_word,
 7051      03
 7052              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 7053              		.loc 1 780 29 view .LVU2416
 7054 2b19 4A893CD3 		mov	QWORD PTR [rbx+r10*8], rdi	# *_112, _113
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7055              		.loc 1 779 48 is_stmt 1 view .LVU2417
 7056              	.LVL369:
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7057              		.loc 1 779 11 view .LVU2418
 7058              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7059              		.loc 1 779 5 is_stmt 0 view .LVU2419
 7060 2b1d 7249     		jb	.L606	#,
 780:sieve_extend.c **** 
 7061              		.loc 1 780 9 is_stmt 1 view .LVU2420
 7062              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 7063              		.loc 1 780 39 is_stmt 0 view .LVU2421
 7064 2b1f 4C8B04F3 		mov	r8, QWORD PTR [rbx+rsi*8]	# _35, *_501
 7065              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7066              		.loc 1 779 57 view .LVU2422
 7067 2b23 4C8D7904 		lea	r15, 4[rcx]	# copy_word,
 7068              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7069              		.loc 1 779 71 view .LVU2423
 7070 2b27 4983C404 		add	r12, 4	# source_word,
 7071              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/cclewcPz.s 			page 197


 7072              		.loc 1 779 5 view .LVU2424
 7073 2b2b 4D39F7   		cmp	r15, r14	# copy_word, destination_stop_word
 7074              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 7075              		.loc 1 780 29 view .LVU2425
 7076 2b2e 4E8904EB 		mov	QWORD PTR [rbx+r13*8], r8	# *_132, _35
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7077              		.loc 1 779 48 is_stmt 1 view .LVU2426
 7078              	.LVL370:
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7079              		.loc 1 779 11 view .LVU2427
 7080              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7081              		.loc 1 779 5 is_stmt 0 view .LVU2428
 7082 2b32 7734     		ja	.L606	#,
 780:sieve_extend.c **** 
 7083              		.loc 1 780 9 is_stmt 1 view .LVU2429
 7084              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 7085              		.loc 1 780 39 is_stmt 0 view .LVU2430
 7086 2b34 4E8D0CE5 		lea	r9, 0[0+r12*8]	# _42,
 7086      00000000 
 7087              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7088              		.loc 1 779 57 view .LVU2431
 7089 2b3c 4883C105 		add	rcx, 5	# copy_word,
 7090              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 7091              		.loc 1 780 39 view .LVU2432
 7092 2b40 4E8B24E3 		mov	r12, QWORD PTR [rbx+r12*8]	# _46, *_43
 7093              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7094              		.loc 1 779 5 view .LVU2433
 7095 2b44 4939CE   		cmp	r14, rcx	# destination_stop_word, copy_word
 7096              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 7097              		.loc 1 780 29 view .LVU2434
 7098 2b47 4E8924FB 		mov	QWORD PTR [rbx+r15*8], r12	# *_45, _46
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7099              		.loc 1 779 48 is_stmt 1 view .LVU2435
 7100              	.LVL371:
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7101              		.loc 1 779 11 view .LVU2436
 7102              	# sieve_extend.c:779:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7103              		.loc 1 779 5 is_stmt 0 view .LVU2437
 7104 2b4b 721B     		jb	.L606	#,
 780:sieve_extend.c **** 
 7105              		.loc 1 780 9 is_stmt 1 view .LVU2438
 7106              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 7107              		.loc 1 780 39 is_stmt 0 view .LVU2439
 7108 2b4d 4E8B5C0B 		mov	r11, QWORD PTR 8[rbx+r9]	# _158, *_161
 7108      08
 7109              	# sieve_extend.c:780:         bitarray[copy_word] = bitarray[source_word];
 780:sieve_extend.c **** 
 7110              		.loc 1 780 29 view .LVU2440
GAS LISTING /tmp/cclewcPz.s 			page 198


 7111 2b52 4C891CCB 		mov	QWORD PTR [rbx+rcx*8], r11	# *_159, _158
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7112              		.loc 1 779 48 is_stmt 1 view .LVU2441
 779:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 7113              		.loc 1 779 11 view .LVU2442
 7114 2b56 C5F877   		vzeroupper
 7115              	.L607:
 7116              	# sieve_extend.c:783:  }
 783:sieve_extend.c **** 
 7117              		.loc 1 783 2 is_stmt 0 view .LVU2443
 7118 2b59 488D65D8 		lea	rsp, -40[rbp]	#,
 7119              	.LVL372:
 783:sieve_extend.c **** 
 7120              		.loc 1 783 2 view .LVU2444
 7121 2b5d 5B       		pop	rbx	#
 7122 2b5e 415C     		pop	r12	#
 7123 2b60 415D     		pop	r13	#
 7124 2b62 415E     		pop	r14	#
 7125 2b64 415F     		pop	r15	#
 7126 2b66 5D       		pop	rbp	#
 7127              		.cfi_remember_state
 7128              		.cfi_def_cfa 7, 8
 7129              	.LVL373:
 783:sieve_extend.c **** 
 7130              		.loc 1 783 2 view .LVU2445
 7131 2b67 C3       		ret	
 7132              	.LVL374:
 7133              		.p2align 4,,7
 7134              		.p2align 3
 7135              	.L606:
 7136              		.cfi_restore_state
 783:sieve_extend.c **** 
 7137              		.loc 1 783 2 view .LVU2446
 7138 2b68 C5F877   		vzeroupper
 7139 2b6b 488D65D8 		lea	rsp, -40[rbp]	#,
 7140              	.LVL375:
 783:sieve_extend.c **** 
 7141              		.loc 1 783 2 view .LVU2447
 7142 2b6f 5B       		pop	rbx	#
 7143 2b70 415C     		pop	r12	#
 7144 2b72 415D     		pop	r13	#
 7145 2b74 415E     		pop	r14	#
 7146 2b76 415F     		pop	r15	#
 7147 2b78 5D       		pop	rbp	#
 7148              		.cfi_remember_state
 7149              		.cfi_def_cfa 7, 8
 7150              	.LVL376:
 783:sieve_extend.c **** 
 7151              		.loc 1 783 2 view .LVU2448
 7152 2b79 C3       		ret	
 7153              	.LVL377:
 7154 2b7a 660F1F44 		.p2align 4,,7
 7154      0000
 7155              		.p2align 3
 7156              	.L457:
 7157              		.cfi_restore_state
 7158              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
GAS LISTING /tmp/cclewcPz.s 			page 199


 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7159              		.loc 1 765 5 view .LVU2449
 7160 2b80 4D89EE   		mov	r14, r13	# copy_word, tmp.338
 7161              	# sieve_extend.c:759:     source_word += distance;
 759:sieve_extend.c ****     copy_word += distance;
 7162              		.loc 1 759 17 view .LVU2450
 7163 2b83 4D89E2   		mov	r10, r12	# source_word, tmp.337
 7164 2b86 498D7424 		lea	rsi, 1[r12]	# tmp788,
 7164      01
 7165 2b8b E92DF8FF 		jmp	.L442	#
 7165      FF
 7166              	.LVL378:
 7167              		.p2align 4,,7
 7168              		.p2align 3
 7169              	.L458:
 7170              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7171              		.loc 1 765 5 view .LVU2451
 7172 2b90 4989CB   		mov	r11, rcx	# copy_word, tmp.325
 7173              	# sieve_extend.c:771:     source_word = copy_word - size; // recalibrate
 771:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 7174              		.loc 1 771 17 view .LVU2452
 7175 2b93 4D89E6   		mov	r14, r12	# source_word, tmp.324
 7176 2b96 E9CAFDFF 		jmp	.L451	#
 7176      FF
 7177              	.LVL379:
 7178 2b9b 0F1F4400 		.p2align 4,,7
 7178      00
 7179              		.p2align 3
 7180              	.L609:
 766:sieve_extend.c ****     }
 7181              		.loc 1 766 9 is_stmt 1 view .LVU2453
 7182              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 7183              		.loc 1 766 56 is_stmt 0 view .LVU2454
 7184 2ba0 C4C17D6F 		vmovdqa	ymm3, YMMWORD PTR [r11]	# tmp1260, MEM[base: vectp.340_257, index: ivtmp.390_731, offset: 
 7184      1B
 7185 2ba5 B8200000 		mov	eax, 32	# ivtmp.390,
 7185      00
 7186              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 7187              		.loc 1 766 94 view .LVU2455
 7188 2baa C5FE6F27 		vmovdqu	ymm4, YMMWORD PTR [rdi]	# tmp1261, MEM[base: vectp.344_264, index: ivtmp.390_731, offset: 
 7189              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 7190              		.loc 1 766 56 view .LVU2456
 7191 2bae C4C165D3 		vpsrlq	ymm2, ymm3, xmm10	# vect__38.342, tmp1260, _12
 7191      D2
 7192              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 7193              		.loc 1 766 94 view .LVU2457
 7194 2bb3 C4C15DF3 		vpsllq	ymm6, ymm4, xmm11	# vect__43.346, tmp1261, _18
 7194      F3
 7195              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 7196              		.loc 1 766 66 view .LVU2458
 7197 2bb8 C56DEBE6 		vpor	ymm12, ymm2, ymm6	# vect__46.347, vect__38.342, vect__43.346
GAS LISTING /tmp/cclewcPz.s 			page 200


 7198              	# sieve_extend.c:766:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 766:sieve_extend.c ****     }
 7199              		.loc 1 766 29 view .LVU2459
 7200 2bbc C4417E7F 		vmovdqu	YMMWORD PTR [r9], ymm12	# MEM[base: vectp.349_273, index: ivtmp.390_731, offset: 0B], vect
 7200      21
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7201              		.loc 1 765 43 is_stmt 1 view .LVU2460
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7202              		.loc 1 765 11 view .LVU2461
 7203 2bc1 E972F8FF 		jmp	.L542	#
 7203      FF
 7204              	.LVL380:
 7205              		.p2align 4,,7
 7206 2bc6 6690     		.p2align 3
 7207              	.L435:
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7208              		.loc 1 765 11 is_stmt 0 view .LVU2462
 7209 2bc8 4C8B7424 		mov	r14, QWORD PTR 48[rsp]	# fast_loop_stop_word, %sfp
 7209      30
 7210 2bcd 4D89E8   		mov	r8, r13	# tmp804, tmp.338
 7211 2bd0 49F7D0   		not	r8	# tmp804
 7212 2bd3 4801D9   		add	rcx, rbx	# ivtmp.405, bitarray
 7213              	.LBB396:
 7214              	.LBB377:
 7215              	.LBB366:
 7216              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7217              		.loc 1 654 42 view .LVU2463
 7218 2bd6 4489F8   		mov	eax, r15d	# tmp1194, _12
 7219              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7220              		.loc 1 654 63 view .LVU2464
 7221 2bd9 89D7     		mov	edi, edx	# tmp1195, _18
 7222 2bdb 4D01F0   		add	r8, r14	# tmp805, fast_loop_stop_word
 7223              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7224              		.loc 1 654 42 view .LVU2465
 7225 2bde C4E2FBF7 		shrx	rax, QWORD PTR [rcx], rax	# tmp689, MEM[base: _743, offset: 0B], tmp1194
 7225      01
 7226              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 7227              		.loc 1 653 19 view .LVU2466
 7228 2be3 488B7108 		mov	rsi, QWORD PTR 8[rcx]	# source1, MEM[base: _743, offset: 8B]
 7229              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7230              		.loc 1 654 63 view .LVU2467
 7231 2be7 C4E2C1F7 		shlx	rdi, rsi, rdi	# tmp691, source1, tmp1195
 7231      FE
 7232 2bec 49D1E8   		shr	r8	# tmp803
 7233              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7234              		.loc 1 654 52 view .LVU2468
 7235 2bef 4809F8   		or	rax, rdi	# tmp692, tmp691
 7236              	# sieve_extend.c:657:         copy_word += 2;
 657:sieve_extend.c ****         source_word += 2;
 7237              		.loc 1 657 19 view .LVU2469
 7238 2bf2 498D7D02 		lea	rdi, 2[r13]	# copy_word,
GAS LISTING /tmp/cclewcPz.s 			page 201


 7239              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7240              		.loc 1 654 63 view .LVU2470
 7241 2bf6 4189D2   		mov	r10d, edx	# _18, shift_flipped
 7242 2bf9 49F7D3   		not	r11	# tmp790
 7243 2bfc 4183E003 		and	r8d, 3	# tmp806,
 7244              	.LVL381:
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 7245              		.loc 1 652 9 is_stmt 1 view .LVU2471
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 7246              		.loc 1 653 9 view .LVU2472
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7247              		.loc 1 654 9 view .LVU2473
 7248              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7249              		.loc 1 654 52 is_stmt 0 view .LVU2474
 7250 2c00 4A8904EB 		mov	QWORD PTR [rbx+r13*8], rax	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 7251              	.LVL382:
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 7252              		.loc 1 655 9 is_stmt 1 view .LVU2475
 656:sieve_extend.c ****         copy_word += 2;
 7253              		.loc 1 656 9 view .LVU2476
 7254              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7255              		.loc 1 654 42 is_stmt 0 view .LVU2477
 7256 2c04 4589F9   		mov	r9d, r15d	# _12, shift
 7257              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7258              		.loc 1 656 63 view .LVU2478
 7259 2c07 C4E2A9F7 		shlx	rax, QWORD PTR 16[rcx], r10	# tmp693, MEM[base: _743, offset: 16B], tmp1196
 7259      4110
 7260              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7261              		.loc 1 656 42 view .LVU2479
 7262 2c0d C4E2B3F7 		shrx	rsi, rsi, r9	# tmp695, source1, tmp1197
 7262      F6
 7263              	.LVL383:
 7264              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7265              		.loc 1 656 52 view .LVU2480
 7266 2c12 4809C6   		or	rsi, rax	# tmp696, tmp693
 7267              	.LBE366:
 7268              	# sieve_extend.c:651:     while (copy_word < fast_loop_stop_word) {
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 7269              		.loc 1 651 11 view .LVU2481
 7270 2c15 4939FE   		cmp	r14, rdi	# fast_loop_stop_word, copy_word
 7271 2c18 4D8D143B 		lea	r10, [r11+rdi]	# distance,
 7272 2c1c 488D4110 		lea	rax, 16[rcx]	# ivtmp.405,
 7273              	.LBB367:
 7274              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7275              		.loc 1 656 52 view .LVU2482
 7276 2c20 4A8974EB 		mov	QWORD PTR 8[rbx+r13*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset:
 7276      08
 7277              	.LVL384:
 657:sieve_extend.c ****         source_word += 2;
 7278              		.loc 1 657 9 is_stmt 1 view .LVU2483
GAS LISTING /tmp/cclewcPz.s 			page 202


 658:sieve_extend.c ****         distance += 2;
 7279              		.loc 1 658 9 view .LVU2484
 659:sieve_extend.c ****     }
 7280              		.loc 1 659 9 view .LVU2485
 659:sieve_extend.c ****     }
 7281              		.loc 1 659 9 is_stmt 0 view .LVU2486
 7282              	.LBE367:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 7283              		.loc 1 651 11 is_stmt 1 view .LVU2487
 7284 2c25 0F86B3F6 		jbe	.L439	#,
 7284      FFFF
 7285 2c2b 4D85C0   		test	r8, r8	# tmp806
 7286 2c2e 0F849700 		je	.L597	#,
 7286      0000
 7287 2c34 4983F801 		cmp	r8, 1	# tmp806,
 7288 2c38 7446     		je	.L556	#,
 7289 2c3a 4983F802 		cmp	r8, 2	# tmp806,
 7290 2c3e 0F857401 		jne	.L610	#,
 7290      0000
 7291              	.LVL385:
 7292              	.L557:
 7293              	.LBB368:
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 7294              		.loc 1 652 9 view .LVU2488
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 7295              		.loc 1 653 9 view .LVU2489
 7296              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 7297              		.loc 1 653 19 is_stmt 0 view .LVU2490
 7298 2c44 488B7008 		mov	rsi, QWORD PTR 8[rax]	# source1, MEM[base: _743, offset: 8B]
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7299              		.loc 1 654 9 is_stmt 1 view .LVU2491
 7300              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7301              		.loc 1 654 42 is_stmt 0 view .LVU2492
 7302 2c48 4489F9   		mov	ecx, r15d	# tmp1278, _12
 7303              	.LVL386:
 7304              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7305              		.loc 1 654 63 view .LVU2493
 7306 2c4b 4189D0   		mov	r8d, edx	# tmp1279, _18
 7307              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7308              		.loc 1 654 42 view .LVU2494
 7309 2c4e C4E2F3F7 		shrx	rcx, QWORD PTR [rax], rcx	# tmp1056, MEM[base: _743, offset: 0B], tmp1278
 7309      08
 7310              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7311              		.loc 1 654 63 view .LVU2495
 7312 2c53 C462B9F7 		shlx	r9, rsi, r8	# tmp1057, source1, tmp1279
 7312      CE
 7313              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7314              		.loc 1 654 52 view .LVU2496
 7315 2c58 4C09C9   		or	rcx, r9	# tmp1058, tmp1057
 7316              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
GAS LISTING /tmp/cclewcPz.s 			page 203


 7317              		.loc 1 654 42 view .LVU2497
 7318 2c5b 4589FA   		mov	r10d, r15d	# _12, shift
 7319              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7320              		.loc 1 654 63 view .LVU2498
 7321 2c5e 4189D6   		mov	r14d, edx	# _18, shift_flipped
 7322              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7323              		.loc 1 654 52 view .LVU2499
 7324 2c61 48890CFB 		mov	QWORD PTR [rbx+rdi*8], rcx	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 7325              	.LVL387:
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 7326              		.loc 1 655 9 is_stmt 1 view .LVU2500
 656:sieve_extend.c ****         copy_word += 2;
 7327              		.loc 1 656 9 view .LVU2501
 7328              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7329              		.loc 1 656 42 is_stmt 0 view .LVU2502
 7330 2c65 C4E2ABF7 		shrx	rsi, rsi, r10	# tmp1061, source1, tmp1281
 7330      F6
 7331              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7332              		.loc 1 656 63 view .LVU2503
 7333 2c6a C4E289F7 		shlx	rcx, QWORD PTR 16[rax], r14	# tmp1060, MEM[base: _743, offset: 16B], tmp1280
 7333      4810
 7334              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7335              		.loc 1 656 52 view .LVU2504
 7336 2c70 4809CE   		or	rsi, rcx	# tmp1062, tmp1060
 7337 2c73 488974FB 		mov	QWORD PTR 8[rbx+rdi*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset:
 7337      08
 7338              	.LVL388:
 657:sieve_extend.c ****         source_word += 2;
 7339              		.loc 1 657 9 is_stmt 1 view .LVU2505
 7340 2c78 4883C010 		add	rax, 16	# ivtmp.405,
 7341              	# sieve_extend.c:657:         copy_word += 2;
 657:sieve_extend.c ****         source_word += 2;
 7342              		.loc 1 657 19 is_stmt 0 view .LVU2506
 7343 2c7c 4883C702 		add	rdi, 2	# copy_word,
 658:sieve_extend.c ****         distance += 2;
 7344              		.loc 1 658 9 is_stmt 1 view .LVU2507
 659:sieve_extend.c ****     }
 7345              		.loc 1 659 9 view .LVU2508
 659:sieve_extend.c ****     }
 7346              		.loc 1 659 9 is_stmt 0 view .LVU2509
 7347              	.LBE368:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 7348              		.loc 1 651 11 is_stmt 1 view .LVU2510
 7349              	.LVL389:
 7350              	.L556:
 7351              	.LBB369:
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 7352              		.loc 1 652 9 view .LVU2511
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 7353              		.loc 1 653 9 view .LVU2512
 7354              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
GAS LISTING /tmp/cclewcPz.s 			page 204


 7355              		.loc 1 653 19 is_stmt 0 view .LVU2513
 7356 2c80 488B7008 		mov	rsi, QWORD PTR 8[rax]	# source1, MEM[base: _743, offset: 8B]
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7357              		.loc 1 654 9 is_stmt 1 view .LVU2514
 7358              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7359              		.loc 1 654 42 is_stmt 0 view .LVU2515
 7360 2c84 4589F8   		mov	r8d, r15d	# tmp1282, _12
 7361              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7362              		.loc 1 654 63 view .LVU2516
 7363 2c87 4189D1   		mov	r9d, edx	# tmp1283, _18
 7364              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7365              		.loc 1 654 42 view .LVU2517
 7366 2c8a C4E2BBF7 		shrx	rcx, QWORD PTR [rax], r8	# tmp1066, MEM[base: _743, offset: 0B], tmp1282
 7366      08
 7367              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7368              		.loc 1 654 63 view .LVU2518
 7369 2c8f C462B1F7 		shlx	r8, rsi, r9	# tmp1067, source1, tmp1283
 7369      C6
 7370              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7371              		.loc 1 654 52 view .LVU2519
 7372 2c94 4C09C1   		or	rcx, r8	# tmp1068, tmp1067
 7373              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7374              		.loc 1 654 42 view .LVU2520
 7375 2c97 4589FA   		mov	r10d, r15d	# _12, shift
 7376              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7377              		.loc 1 654 63 view .LVU2521
 7378 2c9a 4189D6   		mov	r14d, edx	# _18, shift_flipped
 7379              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7380              		.loc 1 654 52 view .LVU2522
 7381 2c9d 48890CFB 		mov	QWORD PTR [rbx+rdi*8], rcx	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 7382              	.LVL390:
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 7383              		.loc 1 655 9 is_stmt 1 view .LVU2523
 656:sieve_extend.c ****         copy_word += 2;
 7384              		.loc 1 656 9 view .LVU2524
 7385              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7386              		.loc 1 656 42 is_stmt 0 view .LVU2525
 7387 2ca1 C4E2ABF7 		shrx	rsi, rsi, r10	# tmp1071, source1, tmp1285
 7387      F6
 7388              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7389              		.loc 1 656 63 view .LVU2526
 7390 2ca6 C4E289F7 		shlx	rcx, QWORD PTR 16[rax], r14	# tmp1070, MEM[base: _743, offset: 16B], tmp1284
 7390      4810
 7391              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7392              		.loc 1 656 52 view .LVU2527
 7393 2cac 4809CE   		or	rsi, rcx	# tmp1072, tmp1070
GAS LISTING /tmp/cclewcPz.s 			page 205


 7394 2caf 488974FB 		mov	QWORD PTR 8[rbx+rdi*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset:
 7394      08
 7395              	.LVL391:
 657:sieve_extend.c ****         source_word += 2;
 7396              		.loc 1 657 9 is_stmt 1 view .LVU2528
 7397              	# sieve_extend.c:657:         copy_word += 2;
 657:sieve_extend.c ****         source_word += 2;
 7398              		.loc 1 657 19 is_stmt 0 view .LVU2529
 7399 2cb4 4883C702 		add	rdi, 2	# copy_word,
 658:sieve_extend.c ****         distance += 2;
 7400              		.loc 1 658 9 is_stmt 1 view .LVU2530
 659:sieve_extend.c ****     }
 7401              		.loc 1 659 9 view .LVU2531
 7402 2cb8 4883C010 		add	rax, 16	# ivtmp.405,
 7403              	.LBE369:
 7404              	# sieve_extend.c:651:     while (copy_word < fast_loop_stop_word) {
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 7405              		.loc 1 651 11 is_stmt 0 view .LVU2532
 7406 2cbc 48397C24 		cmp	QWORD PTR 48[rsp], rdi	# %sfp, copy_word
 7406      30
 7407 2cc1 4D8D143B 		lea	r10, [r11+rdi]	# distance,
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 7408              		.loc 1 651 11 is_stmt 1 view .LVU2533
 7409 2cc5 0F8613F6 		jbe	.L439	#,
 7409      FFFF
 7410              	.LVL392:
 7411              	.L597:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 7412              		.loc 1 651 11 is_stmt 0 view .LVU2534
 7413 2ccb 4489F9   		mov	ecx, r15d	# _12, shift
 7414 2cce 4189D0   		mov	r8d, edx	# _18, shift_flipped
 7415 2cd1 4C896424 		mov	QWORD PTR 56[rsp], r12	# %sfp, tmp.337
 7415      38
 7416              	.LVL393:
 7417              	.L438:
 7418              	.LBB370:
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 7419              		.loc 1 652 9 is_stmt 1 view .LVU2535
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 7420              		.loc 1 653 9 view .LVU2536
 7421              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 7422              		.loc 1 653 19 is_stmt 0 view .LVU2537
 7423 2cd6 4C8B6008 		mov	r12, QWORD PTR 8[rax]	# source1, MEM[base: _743, offset: 8B]
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7424              		.loc 1 654 9 is_stmt 1 view .LVU2538
 7425              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7426              		.loc 1 654 42 is_stmt 0 view .LVU2539
 7427 2cda C462F3F7 		shrx	r9, QWORD PTR [rax], rcx	# tmp878, MEM[base: _743, offset: 0B], _12
 7427      08
 7428              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7429              		.loc 1 654 63 view .LVU2540
 7430 2cdf C442B9F7 		shlx	r14, r12, r8	# tmp879, source1, _18
 7430      F4
 7431              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
GAS LISTING /tmp/cclewcPz.s 			page 206


 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7432              		.loc 1 654 52 view .LVU2541
 7433 2ce4 4D09F1   		or	r9, r14	# tmp880, tmp879
 7434              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7435              		.loc 1 656 42 view .LVU2542
 7436 2ce7 C442F3F7 		shrx	r10, r12, rcx	# tmp883, source1, _12
 7436      D4
 7437              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7438              		.loc 1 654 52 view .LVU2543
 7439 2cec 4C890CFB 		mov	QWORD PTR [rbx+rdi*8], r9	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 0
 7440              	.LVL394:
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 7441              		.loc 1 655 9 is_stmt 1 view .LVU2544
 656:sieve_extend.c ****         copy_word += 2;
 7442              		.loc 1 656 9 view .LVU2545
 7443              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7444              		.loc 1 656 63 is_stmt 0 view .LVU2546
 7445 2cf0 C4E2B9F7 		shlx	rsi, QWORD PTR 16[rax], r8	# tmp882, MEM[base: _743, offset: 16B], _18
 7445      7010
 7446              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7447              		.loc 1 656 52 view .LVU2547
 7448 2cf6 4C09D6   		or	rsi, r10	# tmp884, tmp883
 7449 2cf9 488974FB 		mov	QWORD PTR 8[rbx+rdi*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset:
 7449      08
 7450              	.LVL395:
 657:sieve_extend.c ****         source_word += 2;
 7451              		.loc 1 657 9 is_stmt 1 view .LVU2548
 7452              	# sieve_extend.c:657:         copy_word += 2;
 657:sieve_extend.c ****         source_word += 2;
 7453              		.loc 1 657 19 is_stmt 0 view .LVU2549
 7454 2cfe 4C8D6702 		lea	r12, 2[rdi]	# tmp807,
 658:sieve_extend.c ****         distance += 2;
 7455              		.loc 1 658 9 is_stmt 1 view .LVU2550
 659:sieve_extend.c ****     }
 7456              		.loc 1 659 9 view .LVU2551
 659:sieve_extend.c ****     }
 7457              		.loc 1 659 9 is_stmt 0 view .LVU2552
 7458              	.LBE370:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 7459              		.loc 1 651 11 is_stmt 1 view .LVU2553
 7460              	.LBB371:
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 7461              		.loc 1 652 9 view .LVU2554
 7462              	.LVL396:
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 7463              		.loc 1 653 9 view .LVU2555
 7464              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 7465              		.loc 1 653 19 is_stmt 0 view .LVU2556
 7466 2d02 4C8B4818 		mov	r9, QWORD PTR 24[rax]	# source1, MEM[base: _743, offset: 8B]
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7467              		.loc 1 654 9 is_stmt 1 view .LVU2557
 7468              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
GAS LISTING /tmp/cclewcPz.s 			page 207


 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7469              		.loc 1 654 42 is_stmt 0 view .LVU2558
 7470 2d06 C4E2F3F7 		shrx	rsi, QWORD PTR 16[rax], rcx	# tmp890, MEM[base: _743, offset: 0B], _12
 7470      7010
 7471              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7472              		.loc 1 654 63 view .LVU2559
 7473 2d0c C442B9F7 		shlx	r14, r9, r8	# tmp891, source1, _18
 7473      F1
 7474              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7475              		.loc 1 654 52 view .LVU2560
 7476 2d11 4C09F6   		or	rsi, r14	# tmp892, tmp891
 7477 2d14 4A8934E3 		mov	QWORD PTR [rbx+r12*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 7478              	.LVL397:
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 7479              		.loc 1 655 9 is_stmt 1 view .LVU2561
 656:sieve_extend.c ****         copy_word += 2;
 7480              		.loc 1 656 9 view .LVU2562
 7481              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7482              		.loc 1 656 42 is_stmt 0 view .LVU2563
 7483 2d18 C442F3F7 		shrx	r9, r9, rcx	# tmp895, source1, _12
 7483      C9
 7484              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7485              		.loc 1 656 63 view .LVU2564
 7486 2d1d 4C8B5020 		mov	r10, QWORD PTR 32[rax]	# MEM[base: _743, offset: 16B], MEM[base: _743, offset: 16B]
 7487 2d21 C4C2B9F7 		shlx	rsi, r10, r8	# tmp894, MEM[base: _743, offset: 16B], _18
 7487      F2
 7488              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7489              		.loc 1 656 52 view .LVU2565
 7490 2d26 4909F1   		or	r9, rsi	# tmp896, tmp894
 7491 2d29 4883C040 		add	rax, 64	# ivtmp.405,
 7492 2d2d 4E894CE3 		mov	QWORD PTR 8[rbx+r12*8], r9	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 7492      08
 7493              	.LVL398:
 657:sieve_extend.c ****         source_word += 2;
 7494              		.loc 1 657 9 is_stmt 1 view .LVU2566
 7495              	# sieve_extend.c:657:         copy_word += 2;
 657:sieve_extend.c ****         source_word += 2;
 7496              		.loc 1 657 19 is_stmt 0 view .LVU2567
 7497 2d32 4C8D6704 		lea	r12, 4[rdi]	# copy_word,
 658:sieve_extend.c ****         distance += 2;
 7498              		.loc 1 658 9 is_stmt 1 view .LVU2568
 659:sieve_extend.c ****     }
 7499              		.loc 1 659 9 view .LVU2569
 659:sieve_extend.c ****     }
 7500              		.loc 1 659 9 is_stmt 0 view .LVU2570
 7501              	.LBE371:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 7502              		.loc 1 651 11 is_stmt 1 view .LVU2571
 7503              	.LBB372:
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 7504              		.loc 1 652 9 view .LVU2572
 7505              	.LVL399:
GAS LISTING /tmp/cclewcPz.s 			page 208


 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 7506              		.loc 1 653 9 view .LVU2573
 7507              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 7508              		.loc 1 653 19 is_stmt 0 view .LVU2574
 7509 2d36 4C8B50E8 		mov	r10, QWORD PTR -24[rax]	# source1, MEM[base: _743, offset: 8B]
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7510              		.loc 1 654 9 is_stmt 1 view .LVU2575
 7511              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7512              		.loc 1 654 42 is_stmt 0 view .LVU2576
 7513 2d3a C4E2F3F7 		shrx	rsi, QWORD PTR -32[rax], rcx	# tmp902, MEM[base: _743, offset: 0B], _12
 7513      70E0
 7514              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7515              		.loc 1 654 63 view .LVU2577
 7516 2d40 C442B9F7 		shlx	r14, r10, r8	# tmp903, source1, _18
 7516      F2
 7517              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7518              		.loc 1 654 52 view .LVU2578
 7519 2d45 4C09F6   		or	rsi, r14	# tmp904, tmp903
 7520 2d48 4A8934E3 		mov	QWORD PTR [rbx+r12*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 7521              	.LVL400:
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 7522              		.loc 1 655 9 is_stmt 1 view .LVU2579
 656:sieve_extend.c ****         copy_word += 2;
 7523              		.loc 1 656 9 view .LVU2580
 7524              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7525              		.loc 1 656 42 is_stmt 0 view .LVU2581
 7526 2d4c C442F3F7 		shrx	r10, r10, rcx	# tmp907, source1, _12
 7526      D2
 7527              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7528              		.loc 1 656 63 view .LVU2582
 7529 2d51 4C8B48F0 		mov	r9, QWORD PTR -16[rax]	# MEM[base: _743, offset: 16B], MEM[base: _743, offset: 16B]
 7530 2d55 C4C2B9F7 		shlx	rsi, r9, r8	# tmp906, MEM[base: _743, offset: 16B], _18
 7530      F1
 7531              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7532              		.loc 1 656 52 view .LVU2583
 7533 2d5a 4909F2   		or	r10, rsi	# tmp908, tmp906
 7534 2d5d 4E8954E3 		mov	QWORD PTR 8[rbx+r12*8], r10	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset:
 7534      08
 7535              	.LVL401:
 657:sieve_extend.c ****         source_word += 2;
 7536              		.loc 1 657 9 is_stmt 1 view .LVU2584
 7537              	# sieve_extend.c:657:         copy_word += 2;
 657:sieve_extend.c ****         source_word += 2;
 7538              		.loc 1 657 19 is_stmt 0 view .LVU2585
 7539 2d62 4C8D6706 		lea	r12, 6[rdi]	# copy_word,
 658:sieve_extend.c ****         distance += 2;
 7540              		.loc 1 658 9 is_stmt 1 view .LVU2586
 659:sieve_extend.c ****     }
 7541              		.loc 1 659 9 view .LVU2587
 659:sieve_extend.c ****     }
GAS LISTING /tmp/cclewcPz.s 			page 209


 7542              		.loc 1 659 9 is_stmt 0 view .LVU2588
 7543              	.LBE372:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 7544              		.loc 1 651 11 is_stmt 1 view .LVU2589
 7545              	.LBB373:
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 7546              		.loc 1 652 9 view .LVU2590
 7547              	.LVL402:
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 7548              		.loc 1 653 9 view .LVU2591
 7549              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 7550              		.loc 1 653 19 is_stmt 0 view .LVU2592
 7551 2d66 4C8B48F8 		mov	r9, QWORD PTR -8[rax]	# source1, MEM[base: _743, offset: 8B]
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7552              		.loc 1 654 9 is_stmt 1 view .LVU2593
 7553              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7554              		.loc 1 654 42 is_stmt 0 view .LVU2594
 7555 2d6a C4E2F3F7 		shrx	rsi, QWORD PTR -16[rax], rcx	# tmp914, MEM[base: _743, offset: 0B], _12
 7555      70F0
 7556              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7557              		.loc 1 654 63 view .LVU2595
 7558 2d70 C442B9F7 		shlx	r14, r9, r8	# tmp915, source1, _18
 7558      F1
 7559              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7560              		.loc 1 654 52 view .LVU2596
 7561 2d75 4C09F6   		or	rsi, r14	# tmp916, tmp915
 7562 2d78 4A8934E3 		mov	QWORD PTR [rbx+r12*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 7563              	.LVL403:
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 7564              		.loc 1 655 9 is_stmt 1 view .LVU2597
 656:sieve_extend.c ****         copy_word += 2;
 7565              		.loc 1 656 9 view .LVU2598
 7566              	# sieve_extend.c:657:         copy_word += 2;
 657:sieve_extend.c ****         source_word += 2;
 7567              		.loc 1 657 19 is_stmt 0 view .LVU2599
 7568 2d7c 4883C708 		add	rdi, 8	# copy_word,
 7569              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7570              		.loc 1 656 42 view .LVU2600
 7571 2d80 C442F3F7 		shrx	r9, r9, rcx	# tmp919, source1, _12
 7571      C9
 7572              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7573              		.loc 1 656 63 view .LVU2601
 7574 2d85 4C8B10   		mov	r10, QWORD PTR [rax]	# MEM[base: _743, offset: 16B], MEM[base: _743, offset: 16B]
 7575 2d88 C4C2B9F7 		shlx	rsi, r10, r8	# tmp918, MEM[base: _743, offset: 16B], _18
 7575      F2
 7576              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7577              		.loc 1 656 52 view .LVU2602
 7578 2d8d 4909F1   		or	r9, rsi	# tmp920, tmp918
 7579              	.LBE373:
 7580              	# sieve_extend.c:651:     while (copy_word < fast_loop_stop_word) {
GAS LISTING /tmp/cclewcPz.s 			page 210


 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 7581              		.loc 1 651 11 view .LVU2603
 7582 2d90 48397C24 		cmp	QWORD PTR 48[rsp], rdi	# %sfp, copy_word
 7582      30
 7583 2d95 4D8D143B 		lea	r10, [r11+rdi]	# distance,
 7584              	.LBB374:
 7585              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7586              		.loc 1 656 52 view .LVU2604
 7587 2d99 4E894CE3 		mov	QWORD PTR 8[rbx+r12*8], r9	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 7587      08
 7588              	.LVL404:
 657:sieve_extend.c ****         source_word += 2;
 7589              		.loc 1 657 9 is_stmt 1 view .LVU2605
 658:sieve_extend.c ****         distance += 2;
 7590              		.loc 1 658 9 view .LVU2606
 659:sieve_extend.c ****     }
 7591              		.loc 1 659 9 view .LVU2607
 659:sieve_extend.c ****     }
 7592              		.loc 1 659 9 is_stmt 0 view .LVU2608
 7593              	.LBE374:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 7594              		.loc 1 651 11 is_stmt 1 view .LVU2609
 7595 2d9e 0F8732FF 		ja	.L438	#,
 7595      FFFF
 7596 2da4 4C8B6424 		mov	r12, QWORD PTR 56[rsp]	# tmp.337, %sfp
 7596      38
 7597 2da9 E930F5FF 		jmp	.L439	#
 7597      FF
 7598              	.LVL405:
 7599 2dae 6690     		.p2align 4,,7
 7600              		.p2align 3
 7601              	.L456:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 7602              		.loc 1 651 11 is_stmt 0 view .LVU2610
 7603              	.LBE377:
 7604              	.LBE396:
 7605              	# sieve_extend.c:765:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 765:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 7606              		.loc 1 765 5 view .LVU2611
 7607 2db0 4C89E9   		mov	rcx, r13	# tmp.325, tmp.338
 7608 2db3 E994F9FF 		jmp	.L440	#
 7608      FF
 7609              	.LVL406:
 7610              	.L610:
 7611              	.LBB397:
 7612              	.LBB378:
 7613              	.LBB375:
 652:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 7614              		.loc 1 652 9 is_stmt 1 view .LVU2612
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 7615              		.loc 1 653 9 view .LVU2613
 7616              	# sieve_extend.c:653:         bitword_t source1 = bitarray[source_word+1];
 653:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 7617              		.loc 1 653 19 is_stmt 0 view .LVU2614
 7618 2db8 4C8B4808 		mov	r9, QWORD PTR 8[rax]	# source1, MEM[base: _743, offset: 8B]
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
GAS LISTING /tmp/cclewcPz.s 			page 211


 7619              		.loc 1 654 9 is_stmt 1 view .LVU2615
 7620              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7621              		.loc 1 654 42 is_stmt 0 view .LVU2616
 7622 2dbc 4589F8   		mov	r8d, r15d	# tmp1274, _12
 7623 2dbf C4E2BBF7 		shrx	rsi, QWORD PTR [rax], r8	# tmp1046, MEM[base: _743, offset: 0B], tmp1274
 7623      30
 7624              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7625              		.loc 1 654 63 view .LVU2617
 7626 2dc4 4189D0   		mov	r8d, edx	# tmp1275, _18
 7627 2dc7 C442B9F7 		shlx	r8, r9, r8	# tmp1047, source1, tmp1275
 7627      C1
 7628              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7629              		.loc 1 654 52 view .LVU2618
 7630 2dcc 4C09C6   		or	rsi, r8	# tmp1048, tmp1047
 7631 2dcf 488934FB 		mov	QWORD PTR [rbx+rdi*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 7632              	.LVL407:
 655:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 7633              		.loc 1 655 9 is_stmt 1 view .LVU2619
 656:sieve_extend.c ****         copy_word += 2;
 7634              		.loc 1 656 9 view .LVU2620
 7635              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7636              		.loc 1 654 42 is_stmt 0 view .LVU2621
 7637 2dd3 4589FA   		mov	r10d, r15d	# _12, shift
 7638              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7639              		.loc 1 656 63 view .LVU2622
 7640 2dd6 488B4010 		mov	rax, QWORD PTR 16[rax]	# MEM[base: _743, offset: 16B], MEM[base: _743, offset: 16B]
 7641              	# sieve_extend.c:654:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 654:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 7642              		.loc 1 654 63 view .LVU2623
 7643 2dda 4189D6   		mov	r14d, edx	# _18, shift_flipped
 7644              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7645              		.loc 1 656 42 view .LVU2624
 7646 2ddd C442ABF7 		shrx	r9, r9, r10	# tmp1051, source1, tmp1277
 7646      C9
 7647              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7648              		.loc 1 656 63 view .LVU2625
 7649 2de2 C46289F7 		shlx	r8, rax, r14	# tmp1050, MEM[base: _743, offset: 16B], tmp1276
 7649      C0
 7650              	# sieve_extend.c:656:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 656:sieve_extend.c ****         copy_word += 2;
 7651              		.loc 1 656 52 view .LVU2626
 7652 2de7 4D09C8   		or	r8, r9	# tmp1052, tmp1051
 7653 2dea 488D4120 		lea	rax, 32[rcx]	# ivtmp.405,
 7654 2dee 4C8944FB 		mov	QWORD PTR 8[rbx+rdi*8], r8	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 7654      08
 7655              	.LVL408:
 657:sieve_extend.c ****         source_word += 2;
 7656              		.loc 1 657 9 is_stmt 1 view .LVU2627
 7657              	# sieve_extend.c:657:         copy_word += 2;
 657:sieve_extend.c ****         source_word += 2;
GAS LISTING /tmp/cclewcPz.s 			page 212


 7658              		.loc 1 657 19 is_stmt 0 view .LVU2628
 7659 2df3 498D7D04 		lea	rdi, 4[r13]	# copy_word,
 658:sieve_extend.c ****         distance += 2;
 7660              		.loc 1 658 9 is_stmt 1 view .LVU2629
 659:sieve_extend.c ****     }
 7661              		.loc 1 659 9 view .LVU2630
 659:sieve_extend.c ****     }
 7662              		.loc 1 659 9 is_stmt 0 view .LVU2631
 7663              	.LBE375:
 651:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 7664              		.loc 1 651 11 is_stmt 1 view .LVU2632
 7665 2df7 E948FEFF 		jmp	.L557	#
 7665      FF
 7666              	.LBE378:
 7667              	.LBE397:
 7668              		.cfi_endproc
 7669              	.LFE75:
 7671              		.section	.rodata.str1.1,"aMS",@progbits,1
 7672              	.LC4:
 7673 0000 25336A75 		.string	"%3ju "
 7673      2000
 7674              	.LC5:
 7675 0006 0A466F75 		.string	"\nFound %ju primes until %ju\n"
 7675      6E642025 
 7675      6A752070 
 7675      72696D65 
 7675      7320756E 
 7676              		.text
 7677 2dfc 0F1F4000 		.p2align 4
 7679              	show_primes.isra.0:
 7680              	.LVL409:
 7681              	.LFB97:
 917:sieve_extend.c ****     counter_t primeCount = 1;    // We already have 2
 7682              		.loc 1 917 13 view -0
 7683              		.cfi_startproc
 7684              	.LBB398:
 919:sieve_extend.c ****         primeCount++;
 7685              		.loc 1 919 30 view .LVU2634
 7686              	.LBE398:
 7687              	# sieve_extend.c:917: static void show_primes(struct sieve_state *sieve, counter_t maxFactor) {
 917:sieve_extend.c ****     counter_t primeCount = 1;    // We already have 2
 7688              		.loc 1 917 13 is_stmt 0 view .LVU2635
 7689 2e00 4157     		push	r15	#
 7690              		.cfi_def_cfa_offset 16
 7691              		.cfi_offset 15, -16
 7692 2e02 4156     		push	r14	#
 7693              		.cfi_def_cfa_offset 24
 7694              		.cfi_offset 14, -24
 7695 2e04 4155     		push	r13	#
 7696              		.cfi_def_cfa_offset 32
 7697              		.cfi_offset 13, -32
 7698 2e06 4154     		push	r12	#
 7699              		.cfi_def_cfa_offset 40
 7700              		.cfi_offset 12, -40
 7701 2e08 4989F4   		mov	r12, rsi	# ISRA.72, tmp168
 7702 2e0b 55       		push	rbp	#
 7703              		.cfi_def_cfa_offset 48
GAS LISTING /tmp/cclewcPz.s 			page 213


 7704              		.cfi_offset 6, -48
 7705 2e0c 53       		push	rbx	#
 7706              		.cfi_def_cfa_offset 56
 7707              		.cfi_offset 3, -56
 7708 2e0d 488D6424 		lea	rsp, -8[rsp]	#,
 7708      F8
 7709              		.cfi_def_cfa_offset 64
 7710              	.LBB415:
 7711              	# sieve_extend.c:919:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 919:sieve_extend.c ****         primeCount++;
 7712              		.loc 1 919 44 view .LVU2636
 7713 2e12 488B36   		mov	rsi, QWORD PTR [rsi]	# prephitmp_86, *ISRA.72_32(D)
 7714              	# sieve_extend.c:919:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 919:sieve_extend.c ****         primeCount++;
 7715              		.loc 1 919 5 view .LVU2637
 7716 2e15 4883FE01 		cmp	rsi, 1	# prephitmp_86,
 7717 2e19 0F867501 		jbe	.L618	#,
 7717      0000
 7718              	# sieve_extend.c:921:         if (factor < maxFactor/2) {
 921:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 7719              		.loc 1 921 31 view .LVU2638
 7720 2e1f 48D1EA   		shr	rdx	# maxFactor
 7721              	.LVL410:
 921:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 7722              		.loc 1 921 31 view .LVU2639
 7723 2e22 4989FD   		mov	r13, rdi	# ISRA.71, tmp167
 7724              	# sieve_extend.c:919:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 919:sieve_extend.c ****         primeCount++;
 7725              		.loc 1 919 20 view .LVU2640
 7726 2e25 BB010000 		mov	ebx, 1	# factor,
 7726      00
 7727              	# sieve_extend.c:921:         if (factor < maxFactor/2) {
 921:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 7728              		.loc 1 921 31 view .LVU2641
 7729 2e2a 4889D5   		mov	rbp, rdx	# _4, maxFactor
 7730              	.LBE415:
 7731              	# sieve_extend.c:918:     counter_t primeCount = 1;    // We already have 2
 918:sieve_extend.c ****     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(sieve->bitarray, factor+
 7732              		.loc 1 918 15 view .LVU2642
 7733 2e2d 41BF0100 		mov	r15d, 1	# primeCount,
 7733      0000
 7734              	.LBB416:
 7735              	.LBB399:
 7736              	.LBB400:
 7737              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 7738              		.file 3 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2020 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
GAS LISTING /tmp/cclewcPz.s 			page 214


  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <https://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _BITS_STDIO2_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #define _BITS_STDIO2_H 1
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __gnuc_va_list __ap) __THROW;
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 __gnuc_va_list __ap))
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_ISOC99 || defined __USE_UNIX98
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __gnuc_va_list __ap) __THROW;
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
GAS LISTING /tmp/cclewcPz.s 			page 215


  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, __gnuc_va_list __ap))
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, __gnuc_va_list __ap);
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  __gnuc_va_list __ap);
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 106:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 107:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
 7739              		.loc 3 107 10 view .LVU2643
 7740 2e33 49BECDCC 		movabs	r14, -3689348814741910323	# tmp136,
 7740      CCCCCCCC 
 7740      CCCC
 7741              	.LVL411:
 7742 2e3d 0F1F00   		.p2align 4
 7743              		.p2align 3
 7744              	.L617:
 7745              		.loc 3 107 10 view .LVU2644
 7746              	.LBE400:
 7747              	.LBE399:
 920:sieve_extend.c ****         if (factor < maxFactor/2) {
 7748              		.loc 1 920 9 is_stmt 1 view .LVU2645
 7749              	# sieve_extend.c:920:         primeCount++;
 920:sieve_extend.c ****         if (factor < maxFactor/2) {
 7750              		.loc 1 920 19 is_stmt 0 view .LVU2646
 7751 2e40 4983C701 		add	r15, 1	# primeCount,
 7752              	.LVL412:
GAS LISTING /tmp/cclewcPz.s 			page 216


 921:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 7753              		.loc 1 921 9 is_stmt 1 view .LVU2647
 7754              	# sieve_extend.c:921:         if (factor < maxFactor/2) {
 921:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 7755              		.loc 1 921 12 is_stmt 0 view .LVU2648
 7756 2e44 4839DD   		cmp	rbp, rbx	# _4, factor
 7757 2e47 0F87FB00 		ja	.L641	#,
 7757      0000
 7758              	.L613:
 919:sieve_extend.c ****         primeCount++;
 7759              		.loc 1 919 52 is_stmt 1 view .LVU2649
 7760              	.LVL413:
 7761              	# sieve_extend.c:919:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 919:sieve_extend.c ****         primeCount++;
 7762              		.loc 1 919 61 is_stmt 0 view .LVU2650
 7763 2e4d 4D8B4500 		mov	r8, QWORD PTR 0[r13]	# _11, *ISRA.71_33(D)
 7764 2e51 4883C301 		add	rbx, 1	# factor,
 7765              	.LVL414:
 7766              	.L640:
 7767              	.LBB405:
 7768              	.LBI405:
 123:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 7769              		.loc 1 123 25 is_stmt 1 view .LVU2651
 7770              	.LBB406:
 124:sieve_extend.c ****     return index;
 7771              		.loc 1 124 5 view .LVU2652
 124:sieve_extend.c ****     return index;
 7772              		.loc 1 124 11 view .LVU2653
 7773              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7774              		.loc 1 124 21 is_stmt 0 view .LVU2654
 7775 2e55 4889D9   		mov	rcx, rbx	# tmp124, factor
 7776 2e58 48C1E906 		shr	rcx, 6	# tmp124,
 7777              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7778              		.loc 1 124 12 view .LVU2655
 7779 2e5c 4D8B0CC8 		mov	r9, QWORD PTR [r8+rcx*8]	# *_39,* _11
 7780              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7781              		.loc 1 124 11 view .LVU2656
 7782 2e60 490FA3D9 		bt	r9, rbx	# *_39, factor
 7783 2e64 0F83A600 		jnc	.L615	#,
 7783      0000
 124:sieve_extend.c ****     return index;
 7784              		.loc 1 124 58 is_stmt 1 view .LVU2657
 7785              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7786              		.loc 1 124 63 is_stmt 0 view .LVU2658
 7787 2e6a 4C8D5301 		lea	r10, 1[rbx]	# tmp138,
 7788              	.LVL415:
 7789              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7790              		.loc 1 124 21 view .LVU2659
 7791 2e6e 4D89D3   		mov	r11, r10	# tmp129, factor
 7792              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7793              		.loc 1 124 63 view .LVU2660
GAS LISTING /tmp/cclewcPz.s 			page 217


 7794 2e71 4C89D3   		mov	rbx, r10	# factor, tmp138
 124:sieve_extend.c ****     return index;
 7795              		.loc 1 124 11 is_stmt 1 view .LVU2661
 7796              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7797              		.loc 1 124 21 is_stmt 0 view .LVU2662
 7798 2e74 49C1EB06 		shr	r11, 6	# tmp129,
 7799              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7800              		.loc 1 124 12 view .LVU2663
 7801 2e78 4B8B04D8 		mov	rax, QWORD PTR [r8+r11*8]	# *_16, *_16
 7802              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7803              		.loc 1 124 11 view .LVU2664
 7804 2e7c 4C0FA3D0 		bt	rax, r10	# *_16, factor
 7805 2e80 0F838A00 		jnc	.L615	#,
 7805      0000
 124:sieve_extend.c ****     return index;
 7806              		.loc 1 124 58 is_stmt 1 view .LVU2665
 7807              	.LVL416:
 7808              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7809              		.loc 1 124 63 is_stmt 0 view .LVU2666
 7810 2e86 4883C301 		add	rbx, 1	# factor,
 7811              	.LVL417:
 124:sieve_extend.c ****     return index;
 7812              		.loc 1 124 11 is_stmt 1 view .LVU2667
 7813              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7814              		.loc 1 124 21 is_stmt 0 view .LVU2668
 7815 2e8a 4889DA   		mov	rdx, rbx	# tmp139, factor
 7816 2e8d 48C1EA06 		shr	rdx, 6	# tmp139,
 7817              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7818              		.loc 1 124 12 view .LVU2669
 7819 2e91 498B3CD0 		mov	rdi, QWORD PTR [r8+rdx*8]	# *_16, *_16
 7820              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7821              		.loc 1 124 11 view .LVU2670
 7822 2e95 480FA3DF 		bt	rdi, rbx	# *_16, factor
 7823 2e99 7375     		jnc	.L615	#,
 124:sieve_extend.c ****     return index;
 7824              		.loc 1 124 58 is_stmt 1 view .LVU2671
 7825              	.LVL418:
 7826              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7827              		.loc 1 124 63 is_stmt 0 view .LVU2672
 7828 2e9b 498D5A02 		lea	rbx, 2[r10]	# factor,
 7829              	.LVL419:
 124:sieve_extend.c ****     return index;
 7830              		.loc 1 124 11 is_stmt 1 view .LVU2673
 7831              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7832              		.loc 1 124 21 is_stmt 0 view .LVU2674
 7833 2e9f 4889D9   		mov	rcx, rbx	# tmp143, factor
 7834 2ea2 48C1E906 		shr	rcx, 6	# tmp143,
 7835              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
GAS LISTING /tmp/cclewcPz.s 			page 218


 124:sieve_extend.c ****     return index;
 7836              		.loc 1 124 12 view .LVU2675
 7837 2ea6 4D8B0CC8 		mov	r9, QWORD PTR [r8+rcx*8]	# *_16, *_16
 7838              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7839              		.loc 1 124 11 view .LVU2676
 7840 2eaa 490FA3D9 		bt	r9, rbx	# *_16, factor
 7841 2eae 7360     		jnc	.L615	#,
 124:sieve_extend.c ****     return index;
 7842              		.loc 1 124 58 is_stmt 1 view .LVU2677
 7843              	.LVL420:
 7844              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7845              		.loc 1 124 63 is_stmt 0 view .LVU2678
 7846 2eb0 498D5A03 		lea	rbx, 3[r10]	# factor,
 7847              	.LVL421:
 124:sieve_extend.c ****     return index;
 7848              		.loc 1 124 11 is_stmt 1 view .LVU2679
 7849              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7850              		.loc 1 124 21 is_stmt 0 view .LVU2680
 7851 2eb4 4989DB   		mov	r11, rbx	# tmp147, factor
 7852 2eb7 49C1EB06 		shr	r11, 6	# tmp147,
 7853              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7854              		.loc 1 124 12 view .LVU2681
 7855 2ebb 4B8B04D8 		mov	rax, QWORD PTR [r8+r11*8]	# *_16, *_16
 7856              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7857              		.loc 1 124 11 view .LVU2682
 7858 2ebf 480FA3D8 		bt	rax, rbx	# *_16, factor
 7859 2ec3 734B     		jnc	.L615	#,
 124:sieve_extend.c ****     return index;
 7860              		.loc 1 124 58 is_stmt 1 view .LVU2683
 7861              	.LVL422:
 7862              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7863              		.loc 1 124 63 is_stmt 0 view .LVU2684
 7864 2ec5 498D5A04 		lea	rbx, 4[r10]	# factor,
 7865              	.LVL423:
 124:sieve_extend.c ****     return index;
 7866              		.loc 1 124 11 is_stmt 1 view .LVU2685
 7867              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7868              		.loc 1 124 21 is_stmt 0 view .LVU2686
 7869 2ec9 4889DA   		mov	rdx, rbx	# tmp151, factor
 7870 2ecc 48C1EA06 		shr	rdx, 6	# tmp151,
 7871              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7872              		.loc 1 124 12 view .LVU2687
 7873 2ed0 498B3CD0 		mov	rdi, QWORD PTR [r8+rdx*8]	# *_16, *_16
 7874              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7875              		.loc 1 124 11 view .LVU2688
 7876 2ed4 480FA3DF 		bt	rdi, rbx	# *_16, factor
 7877 2ed8 7336     		jnc	.L615	#,
 124:sieve_extend.c ****     return index;
GAS LISTING /tmp/cclewcPz.s 			page 219


 7878              		.loc 1 124 58 is_stmt 1 view .LVU2689
 7879              	.LVL424:
 7880              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7881              		.loc 1 124 63 is_stmt 0 view .LVU2690
 7882 2eda 498D5A05 		lea	rbx, 5[r10]	# factor,
 7883              	.LVL425:
 124:sieve_extend.c ****     return index;
 7884              		.loc 1 124 11 is_stmt 1 view .LVU2691
 7885              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7886              		.loc 1 124 21 is_stmt 0 view .LVU2692
 7887 2ede 4889D9   		mov	rcx, rbx	# tmp155, factor
 7888 2ee1 48C1E906 		shr	rcx, 6	# tmp155,
 7889              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7890              		.loc 1 124 12 view .LVU2693
 7891 2ee5 4D8B0CC8 		mov	r9, QWORD PTR [r8+rcx*8]	# *_16, *_16
 7892              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7893              		.loc 1 124 11 view .LVU2694
 7894 2ee9 490FA3D9 		bt	r9, rbx	# *_16, factor
 7895 2eed 7321     		jnc	.L615	#,
 124:sieve_extend.c ****     return index;
 7896              		.loc 1 124 58 is_stmt 1 view .LVU2695
 7897              	.LVL426:
 7898              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7899              		.loc 1 124 63 is_stmt 0 view .LVU2696
 7900 2eef 498D5A06 		lea	rbx, 6[r10]	# factor,
 7901              	.LVL427:
 124:sieve_extend.c ****     return index;
 7902              		.loc 1 124 11 is_stmt 1 view .LVU2697
 7903              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7904              		.loc 1 124 21 is_stmt 0 view .LVU2698
 7905 2ef3 4989DB   		mov	r11, rbx	# tmp159, factor
 7906 2ef6 49C1EB06 		shr	r11, 6	# tmp159,
 7907              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7908              		.loc 1 124 12 view .LVU2699
 7909 2efa 4B8B04D8 		mov	rax, QWORD PTR [r8+r11*8]	# *_16, *_16
 7910              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7911              		.loc 1 124 11 view .LVU2700
 7912 2efe 480FA3D8 		bt	rax, rbx	# *_16, factor
 7913 2f02 730C     		jnc	.L615	#,
 124:sieve_extend.c ****     return index;
 7914              		.loc 1 124 58 is_stmt 1 view .LVU2701
 7915              	.LVL428:
 7916              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 7917              		.loc 1 124 63 is_stmt 0 view .LVU2702
 7918 2f04 498D5A07 		lea	rbx, 7[r10]	# factor,
 7919              	.LVL429:
 124:sieve_extend.c ****     return index;
 7920              		.loc 1 124 11 is_stmt 1 view .LVU2703
GAS LISTING /tmp/cclewcPz.s 			page 220


 7921 2f08 E948FFFF 		jmp	.L640	#
 7921      FF
 7922 2f0d 0F1F00   		.p2align 4,,7
 7923              		.p2align 3
 7924              	.L615:
 7925              	.LVL430:
 124:sieve_extend.c ****     return index;
 7926              		.loc 1 124 11 is_stmt 0 view .LVU2704
 7927              	.LBE406:
 7928              	.LBE405:
 919:sieve_extend.c ****         primeCount++;
 7929              		.loc 1 919 30 is_stmt 1 view .LVU2705
 7930              	# sieve_extend.c:919:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 919:sieve_extend.c ****         primeCount++;
 7931              		.loc 1 919 5 is_stmt 0 view .LVU2706
 7932 2f10 4839F3   		cmp	rbx, rsi	# factor, prephitmp_86
 7933 2f13 0F8227FF 		jb	.L617	#,
 7933      FFFF
 7934              	.LVL431:
 7935              	.L612:
 919:sieve_extend.c ****         primeCount++;
 7936              		.loc 1 919 5 view .LVU2707
 7937              	.LBE416:
 926:sieve_extend.c **** }
 7938              		.loc 1 926 5 is_stmt 1 view .LVU2708
 7939              	.LBB417:
 7940              	.LBI417:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 7941              		.loc 3 105 1 view .LVU2709
 7942              	.LBB418:
 7943              		.loc 3 107 3 view .LVU2710
 7944              	.LBE418:
 7945              	.LBE417:
 7946              	# sieve_extend.c:927: }
 927:sieve_extend.c **** 
 7947              		.loc 1 927 1 is_stmt 0 view .LVU2711
 7948 2f19 488D6424 		lea	rsp, 8[rsp]	#,
 7948      08
 7949              		.cfi_remember_state
 7950              		.cfi_def_cfa_offset 56
 7951              	.LBB422:
 7952              	.LBB419:
 7953              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 7954              		.loc 3 107 10 view .LVU2712
 7955 2f1e 4C89FA   		mov	rdx, r15	#, primeCount
 7956              	.LBE419:
 7957              	.LBE422:
 7958              	# sieve_extend.c:927: }
 927:sieve_extend.c **** 
 7959              		.loc 1 927 1 view .LVU2713
 7960 2f21 5B       		pop	rbx	#
 7961              		.cfi_def_cfa_offset 48
 7962              	# sieve_extend.c:926:     printf("\nFound %ju primes until %ju\n",(uintmax_t)primeCount, (uintmax_t
 926:sieve_extend.c **** }
 7963              		.loc 1 926 5 view .LVU2714
 7964 2f22 488D4C36 		lea	rcx, 1[rsi+rsi]	# tmp135,
 7964      01
GAS LISTING /tmp/cclewcPz.s 			page 221


 7965              	.LBB423:
 7966              	.LBB420:
 7967              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 7968              		.loc 3 107 10 view .LVU2715
 7969 2f27 BF010000 		mov	edi, 1	#,
 7969      00
 7970 2f2c 31C0     		xor	eax, eax	#
 7971 2f2e 488D3500 		lea	rsi, .LC5[rip]	#,
 7971      000000
 7972              	.LBE420:
 7973              	.LBE423:
 7974              	# sieve_extend.c:927: }
 927:sieve_extend.c **** 
 7975              		.loc 1 927 1 view .LVU2716
 7976 2f35 5D       		pop	rbp	#
 7977              		.cfi_def_cfa_offset 40
 7978 2f36 415C     		pop	r12	#
 7979              		.cfi_def_cfa_offset 32
 7980 2f38 415D     		pop	r13	#
 7981              		.cfi_def_cfa_offset 24
 7982 2f3a 415E     		pop	r14	#
 7983              		.cfi_def_cfa_offset 16
 7984 2f3c 415F     		pop	r15	#
 7985              		.cfi_def_cfa_offset 8
 7986              	.LBB424:
 7987              	.LBB421:
 7988              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 7989              		.loc 3 107 10 view .LVU2717
 7990 2f3e E9000000 		jmp	__printf_chk@PLT	#
 7990      00
 7991              	.LVL432:
 7992              		.p2align 4,,7
 7993 2f43 0F1F4400 		.p2align 3
 7993      00
 7994              	.L641:
 7995              		.cfi_restore_state
 7996              		.loc 3 107 10 view .LVU2718
 7997              	.LBE421:
 7998              	.LBE424:
 7999              	.LBB425:
 922:sieve_extend.c ****             if (primeCount % 10 == 0) printf("\n");
 8000              		.loc 1 922 13 is_stmt 1 view .LVU2719
 8001              	.LBB407:
 8002              	.LBI399:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 8003              		.loc 3 105 1 view .LVU2720
 8004              	.LBB401:
 8005              		.loc 3 107 3 view .LVU2721
 8006              	.LBE401:
 8007              	.LBE407:
 8008              	# sieve_extend.c:922:             printf("%3ju ",(uintmax_t)factor*2+1);
 922:sieve_extend.c ****             if (primeCount % 10 == 0) printf("\n");
 8009              		.loc 1 922 13 is_stmt 0 view .LVU2722
 8010 2f48 488D541B 		lea	rdx, 1[rbx+rbx]	# tmp111,
 8010      01
 8011              	.LBB408:
 8012              	.LBB402:
GAS LISTING /tmp/cclewcPz.s 			page 222


 8013              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 8014              		.loc 3 107 10 view .LVU2723
 8015 2f4d BF010000 		mov	edi, 1	#,
 8015      00
 8016 2f52 31C0     		xor	eax, eax	#
 8017 2f54 488D3500 		lea	rsi, .LC4[rip]	#,
 8017      000000
 8018 2f5b E8000000 		call	__printf_chk@PLT	#
 8018      00
 8019              	.LVL433:
 8020              		.loc 3 107 10 view .LVU2724
 8021              	.LBE402:
 8022              	.LBE408:
 923:sieve_extend.c ****         }
 8023              		.loc 1 923 13 is_stmt 1 view .LVU2725
 8024              	.LBB409:
 8025              	.LBB403:
 8026              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 8027              		.loc 3 107 10 is_stmt 0 view .LVU2726
 8028 2f60 4C89F8   		mov	rax, r15	# tmp120, primeCount
 8029              	.LBE403:
 8030              	.LBE409:
 8031              	# sieve_extend.c:923:             if (primeCount % 10 == 0) printf("\n");
 923:sieve_extend.c ****         }
 8032              		.loc 1 923 16 view .LVU2727
 8033 2f63 48BF9999 		movabs	rdi, 1844674407370955161	# tmp172,
 8033      99999999 
 8033      9919
 8034              	.LBB410:
 8035              	.LBB404:
 8036              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 8037              		.loc 3 107 10 view .LVU2728
 8038 2f6d 490FAFC6 		imul	rax, r14	# tmp120, tmp136
 8039 2f71 C4E3FBF0 		rorx	rdx, rax, 1	# tmp122, tmp120,
 8039      D001
 8040              	.LBE404:
 8041              	.LBE410:
 8042              	# sieve_extend.c:923:             if (primeCount % 10 == 0) printf("\n");
 923:sieve_extend.c ****         }
 8043              		.loc 1 923 16 view .LVU2729
 8044 2f77 4839FA   		cmp	rdx, rdi	# tmp122, tmp172
 8045 2f7a 760C     		jbe	.L614	#,
 8046              	.L639:
 8047 2f7c 498B3424 		mov	rsi, QWORD PTR [r12]	# prephitmp_86, *ISRA.72_32(D)
 8048              	.LBB411:
 8049              	.LBB412:
 8050              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 8051              		.loc 3 107 10 view .LVU2730
 8052 2f80 E9C8FEFF 		jmp	.L613	#
 8052      FF
 8053              		.p2align 4,,7
 8054 2f85 0F1F00   		.p2align 3
 8055              	.L614:
 8056              	.LBE412:
 8057              	.LBE411:
 923:sieve_extend.c ****         }
 8058              		.loc 1 923 39 is_stmt 1 view .LVU2731
GAS LISTING /tmp/cclewcPz.s 			page 223


 8059              	.LVL434:
 8060              	.LBB414:
 8061              	.LBI411:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 8062              		.loc 3 105 1 view .LVU2732
 8063              	.LBB413:
 8064              		.loc 3 107 3 view .LVU2733
 8065              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 8066              		.loc 3 107 10 is_stmt 0 view .LVU2734
 8067 2f88 BF0A0000 		mov	edi, 10	#,
 8067      00
 8068 2f8d E8000000 		call	putchar@PLT	#
 8068      00
 8069              	.LVL435:
 8070 2f92 EBE8     		jmp	.L639	#
 8071              	.LVL436:
 8072              	.L618:
 8073              		.loc 3 107 10 view .LVU2735
 8074              	.LBE413:
 8075              	.LBE414:
 8076              	.LBE425:
 8077              	# sieve_extend.c:918:     counter_t primeCount = 1;    // We already have 2
 918:sieve_extend.c ****     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(sieve->bitarray, factor+
 8078              		.loc 1 918 15 view .LVU2736
 8079 2f94 41BF0100 		mov	r15d, 1	# primeCount,
 8079      0000
 8080 2f9a E97AFFFF 		jmp	.L612	#
 8080      FF
 8081              		.cfi_endproc
 8082              	.LFE97:
 8084 2f9f 90       		.p2align 4
 8086              	sieve:
 8087              	.LVL437:
 8088              	.LFB79:
 875:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 8089              		.loc 1 875 86 is_stmt 1 view -0
 8090              		.cfi_startproc
 876:sieve_extend.c ****     counter_t prime     = 0;
 8091              		.loc 1 876 5 view .LVU2738
 8092              	# sieve_extend.c:875: static struct sieve_state *sieve(const counter_t maxints, const counter_t blo
 875:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 8093              		.loc 1 875 86 is_stmt 0 view .LVU2739
 8094 2fa0 4157     		push	r15	#
 8095              		.cfi_def_cfa_offset 16
 8096              		.cfi_offset 15, -16
 8097 2fa2 4156     		push	r14	#
 8098              		.cfi_def_cfa_offset 24
 8099              		.cfi_offset 14, -24
 8100 2fa4 4155     		push	r13	#
 8101              		.cfi_def_cfa_offset 32
 8102              		.cfi_offset 13, -32
 8103 2fa6 4154     		push	r12	#
 8104              		.cfi_def_cfa_offset 40
 8105              		.cfi_offset 12, -40
 8106 2fa8 55       		push	rbp	#
 8107              		.cfi_def_cfa_offset 48
 8108              		.cfi_offset 6, -48
GAS LISTING /tmp/cclewcPz.s 			page 224


 8109 2fa9 53       		push	rbx	#
 8110              		.cfi_def_cfa_offset 56
 8111              		.cfi_offset 3, -56
 8112 2faa 4889FB   		mov	rbx, rdi	# maxints, tmp479
 8113              	.LVL438:
 8114              	.LBB456:
 8115              	.LBI456:
 104:sieve_extend.c ****     struct sieve_state *sieve = aligned_alloc(8, sizeof(struct sieve_state));
 8116              		.loc 1 104 28 is_stmt 1 view .LVU2740
 8117              	.LBB457:
 105:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 8118              		.loc 1 105 5 view .LVU2741
 8119              	# sieve_extend.c:105:     struct sieve_state *sieve = aligned_alloc(8, sizeof(struct sieve_state));
 105:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 8120              		.loc 1 105 33 is_stmt 0 view .LVU2742
 8121 2fad BF080000 		mov	edi, 8	#,
 8121      00
 8122              	.LVL439:
 105:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 8123              		.loc 1 105 33 view .LVU2743
 8124              	.LBE457:
 8125              	.LBE456:
 8126              	# sieve_extend.c:875: static struct sieve_state *sieve(const counter_t maxints, const counter_t blo
 875:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 8127              		.loc 1 875 86 view .LVU2744
 8128 2fb2 488D6424 		lea	rsp, -72[rsp]	#,
 8128      B8
 8129              		.cfi_def_cfa_offset 128
 8130              	.LBB463:
 8131              	.LBB458:
 8132              	# sieve_extend.c:106:     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesiz
 106:sieve_extend.c **** 
 8133              		.loc 1 106 22 view .LVU2745
 8134 2fb7 4989DE   		mov	r14, rbx	# prephitmp_591, maxints
 8135 2fba 49D1EE   		shr	r14	# prephitmp_591
 8136              	.LBE458:
 8137              	.LBE463:
 8138              	# sieve_extend.c:875: static struct sieve_state *sieve(const counter_t maxints, const counter_t blo
 875:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 8139              		.loc 1 875 86 view .LVU2746
 8140 2fbd 48897424 		mov	QWORD PTR 48[rsp], rsi	# %sfp, tmp480
 8140      30
 8141              	.LBB464:
 8142              	.LBB459:
 8143              	# sieve_extend.c:105:     struct sieve_state *sieve = aligned_alloc(8, sizeof(struct sieve_state));
 105:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 8144              		.loc 1 105 33 view .LVU2747
 8145 2fc2 BE180000 		mov	esi, 24	#,
 8145      00
 8146              	.LVL440:
 105:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 8147              		.loc 1 105 33 view .LVU2748
 8148 2fc7 E8000000 		call	aligned_alloc@PLT	#
 8148      00
 8149              	.LVL441:
 8150              	# sieve_extend.c:106:     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesiz
 106:sieve_extend.c **** 
GAS LISTING /tmp/cclewcPz.s 			page 225


 8151              		.loc 1 106 22 view .LVU2749
 8152 2fcc 498DB600 		lea	rsi, 1024[r14]	# tmp269,
 8152      040000
 8153              	# sieve_extend.c:108:     sieve->bitarray = aligned_alloc((size_t)anticiped_cache_line_bytesize, (s
 108:sieve_extend.c ****     sieve->bits     = size >> 1;
 8154              		.loc 1 108 23 view .LVU2750
 8155 2fd3 BF800000 		mov	edi, 128	#,
 8155      00
 8156              	# sieve_extend.c:105:     struct sieve_state *sieve = aligned_alloc(8, sizeof(struct sieve_state));
 105:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 8157              		.loc 1 105 33 view .LVU2751
 8158 2fd8 48894424 		mov	QWORD PTR 40[rsp], rax	# %sfp, <retval>
 8158      28
 8159 2fdd 4989C7   		mov	r15, rax	# <retval>, tmp481
 8160              	.LVL442:
 106:sieve_extend.c **** 
 8161              		.loc 1 106 5 is_stmt 1 view .LVU2752
 8162              	# sieve_extend.c:106:     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesiz
 106:sieve_extend.c **** 
 8163              		.loc 1 106 22 is_stmt 0 view .LVU2753
 8164 2fe0 48C1EE0A 		shr	rsi, 10	# tmp270,
 8165              	# sieve_extend.c:106:     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesiz
 106:sieve_extend.c **** 
 8166              		.loc 1 106 12 view .LVU2754
 8167 2fe4 48C1E607 		sal	rsi, 7	# memSize,
 8168              	# sieve_extend.c:106:     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesiz
 106:sieve_extend.c **** 
 8169              		.loc 1 106 22 view .LVU2755
 8170 2fe8 4C893424 		mov	QWORD PTR [rsp], r14	# %sfp, prephitmp_591
 8171              	.LVL443:
 108:sieve_extend.c ****     sieve->bits     = size >> 1;
 8172              		.loc 1 108 5 is_stmt 1 view .LVU2756
 8173              	# sieve_extend.c:108:     sieve->bitarray = aligned_alloc((size_t)anticiped_cache_line_bytesize, (s
 108:sieve_extend.c ****     sieve->bits     = size >> 1;
 8174              		.loc 1 108 23 is_stmt 0 view .LVU2757
 8175 2fec E8000000 		call	aligned_alloc@PLT	#
 8175      00
 8176              	.LVL444:
 8177              	# sieve_extend.c:108:     sieve->bitarray = aligned_alloc((size_t)anticiped_cache_line_bytesize, (s
 108:sieve_extend.c ****     sieve->bits     = size >> 1;
 8178              		.loc 1 108 21 view .LVU2758
 8179 2ff1 498907   		mov	QWORD PTR [r15], rax	# sieve_90->bitarray, _95
 109:sieve_extend.c ****     sieve->size     = size;
 8180              		.loc 1 109 5 is_stmt 1 view .LVU2759
 8181              	.LBE459:
 8182              	.LBE464:
 8183              	.LBB465:
 8184              	.LBB466:
 8185              	# sieve_extend.c:842:     struct block block = { .prime = 0, .pattern_start = 0, .pattern_size = 0 
 842:sieve_extend.c **** 
 8186              		.loc 1 842 18 is_stmt 0 view .LVU2760
 8187 2ff4 31D2     		xor	edx, edx	# block$pattern_size
 8188              	.LBE466:
 8189              	.LBE465:
 8190              	.LBB507:
 8191              	.LBB460:
 8192              	# sieve_extend.c:109:     sieve->bits     = size >> 1;
GAS LISTING /tmp/cclewcPz.s 			page 226


 109:sieve_extend.c ****     sieve->size     = size;
 8193              		.loc 1 109 21 view .LVU2761
 8194 2ff6 4D897708 		mov	QWORD PTR 8[r15], r14	# sieve_90->bits, prephitmp_591
 110:sieve_extend.c **** 
 8195              		.loc 1 110 5 is_stmt 1 view .LVU2762
 8196              	.LBE460:
 8197              	.LBE507:
 8198              	.LBB508:
 8199              	.LBB498:
 8200              	# sieve_extend.c:842:     struct block block = { .prime = 0, .pattern_start = 0, .pattern_size = 0 
 842:sieve_extend.c **** 
 8201              		.loc 1 842 18 is_stmt 0 view .LVU2763
 8202 2ffa 31F6     		xor	esi, esi	# block$pattern_start
 8203              	.LBE498:
 8204              	.LBE508:
 8205              	.LBB509:
 8206              	.LBB461:
 8207              	# sieve_extend.c:110:     sieve->size     = size;
 110:sieve_extend.c **** 
 8208              		.loc 1 110 21 view .LVU2764
 8209 2ffc 49895F10 		mov	QWORD PTR 16[r15], rbx	# sieve_90->size, maxints
 114:sieve_extend.c **** }
 8210              		.loc 1 114 5 is_stmt 1 view .LVU2765
 8211              	.LVL445:
 114:sieve_extend.c **** }
 8212              		.loc 1 114 5 is_stmt 0 view .LVU2766
 8213              	.LBE461:
 8214              	.LBE509:
 877:sieve_extend.c ****     bitword_t* bitarray = sieve->bitarray;
 8215              		.loc 1 877 5 is_stmt 1 view .LVU2767
 878:sieve_extend.c **** 
 8216              		.loc 1 878 5 view .LVU2768
 880:sieve_extend.c **** 
 8217              		.loc 1 880 5 view .LVU2769
 883:sieve_extend.c ****     extendSieve(bitarray, block.pattern_start, block.pattern_size, sieve->bits);
 8218              		.loc 1 883 5 view .LVU2770
 8219              	.LBB510:
 8220              	.LBI465:
 836:sieve_extend.c ****     register counter_t prime   = 0;
 8221              		.loc 1 836 21 view .LVU2771
 8222              	.LBB499:
 837:sieve_extend.c ****     counter_t patternsize_bits = 1;
 8223              		.loc 1 837 5 view .LVU2772
 838:sieve_extend.c ****     counter_t pattern_start    = 0;
 8224              		.loc 1 838 5 view .LVU2773
 839:sieve_extend.c ****     counter_t range_stop       = block_start;
 8225              		.loc 1 839 5 view .LVU2774
 840:sieve_extend.c ****     bitword_t* bitarray        = sieve->bitarray;
 8226              		.loc 1 840 5 view .LVU2775
 841:sieve_extend.c ****     struct block block = { .prime = 0, .pattern_start = 0, .pattern_size = 0 };
 8227              		.loc 1 841 5 view .LVU2776
 842:sieve_extend.c **** 
 8228              		.loc 1 842 5 view .LVU2777
 844:sieve_extend.c ****     
 8229              		.loc 1 844 5 view .LVU2778
 8230              	# sieve_extend.c:837:     register counter_t prime   = 0;
 837:sieve_extend.c ****     counter_t patternsize_bits = 1;
GAS LISTING /tmp/cclewcPz.s 			page 227


 8231              		.loc 1 837 24 is_stmt 0 view .LVU2779
 8232 3000 4531FF   		xor	r15d, r15d	# prime
 8233              	# sieve_extend.c:846:     for (;range_stop < block_stop;) {
 846:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 8234              		.loc 1 846 5 view .LVU2780
 8235 3003 4D85F6   		test	r14, r14	# prephitmp_591
 8236              	.LBE499:
 8237              	.LBE510:
 8238              	.LBB511:
 8239              	.LBB462:
 8240              	# sieve_extend.c:108:     sieve->bitarray = aligned_alloc((size_t)anticiped_cache_line_bytesize, (s
 108:sieve_extend.c ****     sieve->bits     = size >> 1;
 8241              		.loc 1 108 23 view .LVU2781
 8242 3006 4989C5   		mov	r13, rax	# _95, tmp482
 8243              	.LBE462:
 8244              	.LBE511:
 8245              	.LBB512:
 8246              	.LBB500:
 8247              	# sieve_extend.c:844:     sieve->bitarray[0] = SAFE_ZERO; // only the first word has to be cleared;
 844:sieve_extend.c ****     
 8248              		.loc 1 844 24 view .LVU2782
 8249 3009 48C70000 		mov	QWORD PTR [rax], 0	# MEM[(uint64_t *)_95],
 8249      000000
 846:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 8250              		.loc 1 846 5 is_stmt 1 view .LVU2783
 846:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 8251              		.loc 1 846 11 view .LVU2784
 8252              	# sieve_extend.c:846:     for (;range_stop < block_stop;) {
 846:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 8253              		.loc 1 846 5 is_stmt 0 view .LVU2785
 8254 3010 0F84C903 		je	.L644	#,
 8254      0000
 8255              	# sieve_extend.c:837:     register counter_t prime   = 0;
 837:sieve_extend.c ****     counter_t patternsize_bits = 1;
 8256              		.loc 1 837 24 view .LVU2786
 8257 3016 31C9     		xor	ecx, ecx	# prime
 8258              	# sieve_extend.c:838:     counter_t patternsize_bits = 1;
 838:sieve_extend.c ****     counter_t pattern_start    = 0;
 8259              		.loc 1 838 15 view .LVU2787
 8260 3018 41BE0100 		mov	r14d, 1	# patternsize_bits,
 8260      0000
 8261              	.LVL446:
 8262              	.LBB467:
 8263              	# sieve_extend.c:847:         prime = searchBitFalse(bitarray, prime+1);
 847:sieve_extend.c ****         counter_t start = prime * prime * 2 + prime * 2;
 8264              		.loc 1 847 17 view .LVU2788
 8265 301e 48C74424 		mov	QWORD PTR 8[rsp], 1	# %sfp,
 8265      08010000 
 8265      00
 8266              	.LBE467:
 8267              	# sieve_extend.c:842:     struct block block = { .prime = 0, .pattern_start = 0, .pattern_size = 0 
 842:sieve_extend.c **** 
 8268              		.loc 1 842 18 view .LVU2789
 8269 3027 31D2     		xor	edx, edx	# block$pattern_size
 8270 3029 31F6     		xor	esi, esi	# block$pattern_start
 8271              	.LBB490:
 8272              	# sieve_extend.c:852:         if (block_start >= (prime + 1)) start = block_start + prime + prime -
GAS LISTING /tmp/cclewcPz.s 			page 228


 852:sieve_extend.c **** 
 8273              		.loc 1 852 102 view .LVU2790
 8274 302b 4889CF   		mov	rdi, rcx	# prime, prime
 8275              	.LBE490:
 8276              	# sieve_extend.c:839:     counter_t pattern_start    = 0;
 839:sieve_extend.c ****     counter_t range_stop       = block_start;
 8277              		.loc 1 839 15 view .LVU2791
 8278 302e 48C74424 		mov	QWORD PTR 16[rsp], 0	# %sfp,
 8278      10000000 
 8278      00
 8279 3037 488B4424 		mov	rax, QWORD PTR 8[rsp]	# index, %sfp
 8279      08
 8280              	.LVL447:
 8281 303c 0F1F4000 		.p2align 4
 8282              		.p2align 3
 8283              	.L643:
 8284              	.LBB491:
 8285              	.LBB468:
 8286              	.LBB469:
 125:sieve_extend.c **** }
 8287              		.loc 1 125 5 is_stmt 1 view .LVU2792
 125:sieve_extend.c **** }
 8288              		.loc 1 125 5 is_stmt 0 view .LVU2793
 8289              	.LBE469:
 8290              	.LBE468:
 848:sieve_extend.c ****         if unlikely(start > block_stop) break;
 8291              		.loc 1 848 9 is_stmt 1 view .LVU2794
 8292              	# sieve_extend.c:848:         counter_t start = prime * prime * 2 + prime * 2;
 848:sieve_extend.c ****         if unlikely(start > block_stop) break;
 8293              		.loc 1 848 45 is_stmt 0 view .LVU2795
 8294 3040 488D5801 		lea	rbx, 1[rax]	# index,
 8295 3044 4C8D2400 		lea	r12, [rax+rax]	# _305,
 8296              	# sieve_extend.c:848:         counter_t start = prime * prime * 2 + prime * 2;
 848:sieve_extend.c ****         if unlikely(start > block_stop) break;
 8297              		.loc 1 848 19 view .LVU2796
 8298 3048 4889DD   		mov	rbp, rbx	# index, index
 8299 304b 490FAFEC 		imul	rbp, r12	# index, _305
 8300              	.LVL448:
 849:sieve_extend.c **** 
 8301              		.loc 1 849 9 is_stmt 1 view .LVU2797
 8302              	# sieve_extend.c:849:         if unlikely(start > block_stop) break;
 849:sieve_extend.c **** 
 8303              		.loc 1 849 12 is_stmt 0 view .LVU2798
 8304 304f 483B2C24 		cmp	rbp, QWORD PTR [rsp]	# index, %sfp
 8305 3053 0F87EC03 		ja	.L855	#,
 8305      0000
 851:sieve_extend.c ****         if (block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start + prime
 8306              		.loc 1 851 9 is_stmt 1 view .LVU2799
 8307              	# sieve_extend.c:851:         const counter_t step  = prime * 2 + 1;
 851:sieve_extend.c ****         if (block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start + prime
 8308              		.loc 1 851 25 is_stmt 0 view .LVU2800
 8309 3059 4983C401 		add	r12, 1	# step,
 8310              	.LVL449:
 852:sieve_extend.c **** 
 8311              		.loc 1 852 9 is_stmt 1 view .LVU2801
 8312              	# sieve_extend.c:852:         if (block_start >= (prime + 1)) start = block_start + prime + prime -
 852:sieve_extend.c **** 
GAS LISTING /tmp/cclewcPz.s 			page 229


 8313              		.loc 1 852 12 is_stmt 0 view .LVU2802
 8314 305d 4885DB   		test	rbx, rbx	# index
 8315 3060 7516     		jne	.L649	#,
 852:sieve_extend.c **** 
 8316              		.loc 1 852 41 is_stmt 1 view .LVU2803
 8317              	# sieve_extend.c:852:         if (block_start >= (prime + 1)) start = block_start + prime + prime -
 852:sieve_extend.c **** 
 8318              		.loc 1 852 102 is_stmt 0 view .LVU2804
 8319 3062 48C7C0FF 		mov	rax, -1	# tmp286,
 8319      FFFFFF
 8320 3069 31D2     		xor	edx, edx	# tmp285
 8321 306b 49F7F4   		div	r12	# step
 8322              	# sieve_extend.c:852:         if (block_start >= (prime + 1)) start = block_start + prime + prime -
 852:sieve_extend.c **** 
 8323              		.loc 1 852 47 view .LVU2805
 8324 306e 48C7C5FE 		mov	rbp, -2	# tmp287,
 8324      FFFFFF
 8325              	.LVL450:
 852:sieve_extend.c **** 
 8326              		.loc 1 852 47 view .LVU2806
 8327 3075 4829D5   		sub	rbp, rdx	# index, tmp285
 8328              	.LVL451:
 8329              	.L649:
 854:sieve_extend.c ****         block.pattern_size = patternsize_bits;
 8330              		.loc 1 854 9 is_stmt 1 view .LVU2807
 8331              	# sieve_extend.c:854:         range_stop = block_start + patternsize_bits * step * 2;  // range is 
 854:sieve_extend.c ****         block.pattern_size = patternsize_bits;
 8332              		.loc 1 854 53 is_stmt 0 view .LVU2808
 8333 3078 4C89E6   		mov	rsi, r12	# _67, step
 8334 307b 490FAFF6 		imul	rsi, r14	# _67, patternsize_bits
 8335 307f 48897424 		mov	QWORD PTR 32[rsp], rsi	# %sfp, _67
 8335      20
 8336              	# sieve_extend.c:854:         range_stop = block_start + patternsize_bits * step * 2;  // range is 
 854:sieve_extend.c ****         block.pattern_size = patternsize_bits;
 8337              		.loc 1 854 60 view .LVU2809
 8338 3084 4C8D3C36 		lea	r15, [rsi+rsi]	# _68,
 8339              	.LVL452:
 855:sieve_extend.c ****         block.pattern_start = pattern_start;
 8340              		.loc 1 855 9 is_stmt 1 view .LVU2810
 856:sieve_extend.c ****         if (range_stop > block_stop) return block; //range_stop = block_stop;
 8341              		.loc 1 856 9 view .LVU2811
 857:sieve_extend.c **** 
 8342              		.loc 1 857 9 view .LVU2812
 8343              	# sieve_extend.c:857:         if (range_stop > block_stop) return block; //range_stop = block_stop;
 857:sieve_extend.c **** 
 8344              		.loc 1 857 12 is_stmt 0 view .LVU2813
 8345 3088 4C3B3C24 		cmp	r15, QWORD PTR [rsp]	# _68, %sfp
 8346 308c 0F874809 		ja	.L856	#,
 8346      0000
 859:sieve_extend.c ****             pattern_start = block_start | patternsize_bits;
 8347              		.loc 1 859 9 is_stmt 1 view .LVU2814
 8348 3092 4C8B4424 		mov	r8, QWORD PTR 16[rsp]	# pattern_start, %sfp
 8348      10
 8349              	# sieve_extend.c:859:         if (patternsize_bits>1) {
 859:sieve_extend.c ****             pattern_start = block_start | patternsize_bits;
 8350              		.loc 1 859 12 is_stmt 0 view .LVU2815
 8351 3097 4983FE01 		cmp	r14, 1	# patternsize_bits,
GAS LISTING /tmp/cclewcPz.s 			page 230


 8352 309b 4C894424 		mov	QWORD PTR 24[rsp], r8	# %sfp, pattern_start
 8352      18
 8353 30a0 0F875A03 		ja	.L857	#,
 8353      0000
 8354              	.L652:
 8355              	.LVL453:
 863:sieve_extend.c **** 
 8356              		.loc 1 863 9 is_stmt 1 view .LVU2816
 867:sieve_extend.c ****         else                              setBitsTrue_largeRange(bitarray, start, step, range_stop)
 8357              		.loc 1 867 9 view .LVU2817
 8358              	# sieve_extend.c:867:         if (step < VECTORSTEP_FASTER)     setBitsTrue_largeRange_vector(bitar
 867:sieve_extend.c ****         else                              setBitsTrue_largeRange(bitarray, start, step, range_stop)
 8359              		.loc 1 867 12 is_stmt 0 view .LVU2818
 8360 30a6 4C3B2500 		cmp	r12, QWORD PTR global_VECTORSTEP_FASTER[rip]	# step, global_VECTORSTEP_FASTER
 8360      000000
 8361 30ad 0F830D01 		jnb	.L656	#,
 8361      0000
 867:sieve_extend.c ****         else                              setBitsTrue_largeRange(bitarray, start, step, range_stop)
 8362              		.loc 1 867 43 is_stmt 1 view .LVU2819
 8363 30b3 4C89F9   		mov	rcx, r15	#, _68
 8364 30b6 4C89E2   		mov	rdx, r12	#, step
 8365 30b9 4889EE   		mov	rsi, rbp	#, index
 8366 30bc 4C89EF   		mov	rdi, r13	#, _95
 8367 30bf E85CDDFF 		call	setBitsTrue_largeRange_vector	#
 8367      FF
 8368              	.LVL454:
 8369              	.L657:
 867:sieve_extend.c ****         else                              setBitsTrue_largeRange(bitarray, start, step, range_stop)
 8370              		.loc 1 867 43 is_stmt 0 view .LVU2820
 8371              	.LBE491:
 846:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 8372              		.loc 1 846 11 is_stmt 1 view .LVU2821
 8373              	# sieve_extend.c:846:     for (;range_stop < block_stop;) {
 846:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 8374              		.loc 1 846 5 is_stmt 0 view .LVU2822
 8375 30c4 4C3B3C24 		cmp	r15, QWORD PTR [rsp]	# _68, %sfp
 8376 30c8 0F83ED02 		jnb	.L858	#,
 8376      0000
 8377              	.LVL455:
 8378              	.L666:
 8379              	.LBB492:
 847:sieve_extend.c ****         counter_t start = prime * prime * 2 + prime * 2;
 8380              		.loc 1 847 9 is_stmt 1 view .LVU2823
 8381              	.LBB471:
 8382              	.LBI468:
 123:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 8383              		.loc 1 123 25 view .LVU2824
 8384              	.LBB470:
 124:sieve_extend.c ****     return index;
 8385              		.loc 1 124 5 view .LVU2825
 124:sieve_extend.c ****     return index;
 8386              		.loc 1 124 11 view .LVU2826
 8387              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8388              		.loc 1 124 21 is_stmt 0 view .LVU2827
 8389 30ce 4889DD   		mov	rbp, rbx	# tmp273, index
 8390 30d1 48C1ED06 		shr	rbp, 6	# tmp273,
GAS LISTING /tmp/cclewcPz.s 			page 231


 8391              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8392              		.loc 1 124 12 view .LVU2828
 8393 30d5 4D8B7CED 		mov	r15, QWORD PTR 0[r13+rbp*8]	# *_71,* _95
 8393      00
 8394              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8395              		.loc 1 124 11 view .LVU2829
 8396 30da 490FA3DF 		bt	r15, rbx	# *_71, index
 8397 30de 0F83AC00 		jnc	.L645	#,
 8397      0000
 124:sieve_extend.c ****     return index;
 8398              		.loc 1 124 58 is_stmt 1 view .LVU2830
 8399              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8400              		.loc 1 124 63 is_stmt 0 view .LVU2831
 8401 30e4 4C8D5301 		lea	r10, 1[rbx]	# tmp380,
 8402              	.LVL456:
 8403              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8404              		.loc 1 124 21 view .LVU2832
 8405 30e8 4C89D7   		mov	rdi, r10	# tmp278, index
 8406              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8407              		.loc 1 124 63 view .LVU2833
 8408 30eb 4C89D3   		mov	rbx, r10	# index, tmp380
 124:sieve_extend.c ****     return index;
 8409              		.loc 1 124 11 is_stmt 1 view .LVU2834
 8410              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8411              		.loc 1 124 21 is_stmt 0 view .LVU2835
 8412 30ee 48C1EF06 		shr	rdi, 6	# tmp278,
 8413              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8414              		.loc 1 124 12 view .LVU2836
 8415 30f2 498B54FD 		mov	rdx, QWORD PTR 0[r13+rdi*8]	# *_48, *_48
 8415      00
 8416              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8417              		.loc 1 124 11 view .LVU2837
 8418 30f7 4C0FA3D2 		bt	rdx, r10	# *_48, index
 8419 30fb 0F838F00 		jnc	.L645	#,
 8419      0000
 124:sieve_extend.c ****     return index;
 8420              		.loc 1 124 58 is_stmt 1 view .LVU2838
 8421              	.LVL457:
 8422              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8423              		.loc 1 124 63 is_stmt 0 view .LVU2839
 8424 3101 4883C301 		add	rbx, 1	# index,
 8425              	.LVL458:
 124:sieve_extend.c ****     return index;
 8426              		.loc 1 124 11 is_stmt 1 view .LVU2840
 8427              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8428              		.loc 1 124 21 is_stmt 0 view .LVU2841
 8429 3105 4989D8   		mov	r8, rbx	# tmp445, index
GAS LISTING /tmp/cclewcPz.s 			page 232


 8430 3108 49C1E806 		shr	r8, 6	# tmp445,
 8431              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8432              		.loc 1 124 12 view .LVU2842
 8433 310c 4F8B4CC5 		mov	r9, QWORD PTR 0[r13+r8*8]	# *_48, *_48
 8433      00
 8434              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8435              		.loc 1 124 11 view .LVU2843
 8436 3111 490FA3D9 		bt	r9, rbx	# *_48, index
 8437 3115 7379     		jnc	.L645	#,
 124:sieve_extend.c ****     return index;
 8438              		.loc 1 124 58 is_stmt 1 view .LVU2844
 8439              	.LVL459:
 8440              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8441              		.loc 1 124 63 is_stmt 0 view .LVU2845
 8442 3117 498D5A02 		lea	rbx, 2[r10]	# index,
 8443              	.LVL460:
 124:sieve_extend.c ****     return index;
 8444              		.loc 1 124 11 is_stmt 1 view .LVU2846
 8445              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8446              		.loc 1 124 21 is_stmt 0 view .LVU2847
 8447 311b 4989DB   		mov	r11, rbx	# tmp449, index
 8448 311e 49C1EB06 		shr	r11, 6	# tmp449,
 8449              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8450              		.loc 1 124 12 view .LVU2848
 8451 3122 4B8B4CDD 		mov	rcx, QWORD PTR 0[r13+r11*8]	# *_48, *_48
 8451      00
 8452              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8453              		.loc 1 124 11 view .LVU2849
 8454 3127 480FA3D9 		bt	rcx, rbx	# *_48, index
 8455 312b 7363     		jnc	.L645	#,
 124:sieve_extend.c ****     return index;
 8456              		.loc 1 124 58 is_stmt 1 view .LVU2850
 8457              	.LVL461:
 8458              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8459              		.loc 1 124 63 is_stmt 0 view .LVU2851
 8460 312d 498D5A03 		lea	rbx, 3[r10]	# index,
 8461              	.LVL462:
 124:sieve_extend.c ****     return index;
 8462              		.loc 1 124 11 is_stmt 1 view .LVU2852
 8463              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8464              		.loc 1 124 21 is_stmt 0 view .LVU2853
 8465 3131 4889D8   		mov	rax, rbx	# tmp453, index
 8466 3134 48C1E806 		shr	rax, 6	# tmp453,
 8467              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8468              		.loc 1 124 12 view .LVU2854
 8469 3138 498B74C5 		mov	rsi, QWORD PTR 0[r13+rax*8]	# *_48, *_48
 8469      00
 8470              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
GAS LISTING /tmp/cclewcPz.s 			page 233


 124:sieve_extend.c ****     return index;
 8471              		.loc 1 124 11 view .LVU2855
 8472 313d 480FA3DE 		bt	rsi, rbx	# *_48, index
 8473 3141 734D     		jnc	.L645	#,
 124:sieve_extend.c ****     return index;
 8474              		.loc 1 124 58 is_stmt 1 view .LVU2856
 8475              	.LVL463:
 8476              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8477              		.loc 1 124 63 is_stmt 0 view .LVU2857
 8478 3143 498D5A04 		lea	rbx, 4[r10]	# index,
 8479              	.LVL464:
 124:sieve_extend.c ****     return index;
 8480              		.loc 1 124 11 is_stmt 1 view .LVU2858
 8481              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8482              		.loc 1 124 21 is_stmt 0 view .LVU2859
 8483 3147 4989DC   		mov	r12, rbx	# tmp457, index
 8484 314a 49C1EC06 		shr	r12, 6	# tmp457,
 8485              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8486              		.loc 1 124 12 view .LVU2860
 8487 314e 4B8B6CE5 		mov	rbp, QWORD PTR 0[r13+r12*8]	# *_48, *_48
 8487      00
 8488              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8489              		.loc 1 124 11 view .LVU2861
 8490 3153 480FA3DD 		bt	rbp, rbx	# *_48, index
 8491 3157 7337     		jnc	.L645	#,
 124:sieve_extend.c ****     return index;
 8492              		.loc 1 124 58 is_stmt 1 view .LVU2862
 8493              	.LVL465:
 8494              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8495              		.loc 1 124 63 is_stmt 0 view .LVU2863
 8496 3159 498D5A05 		lea	rbx, 5[r10]	# index,
 8497              	.LVL466:
 124:sieve_extend.c ****     return index;
 8498              		.loc 1 124 11 is_stmt 1 view .LVU2864
 8499              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8500              		.loc 1 124 21 is_stmt 0 view .LVU2865
 8501 315d 4989DF   		mov	r15, rbx	# tmp461, index
 8502 3160 49C1EF06 		shr	r15, 6	# tmp461,
 8503              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8504              		.loc 1 124 12 view .LVU2866
 8505 3164 4B8B7CFD 		mov	rdi, QWORD PTR 0[r13+r15*8]	# *_48, *_48
 8505      00
 8506              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8507              		.loc 1 124 11 view .LVU2867
 8508 3169 480FA3DF 		bt	rdi, rbx	# *_48, index
 8509 316d 7321     		jnc	.L645	#,
 124:sieve_extend.c ****     return index;
 8510              		.loc 1 124 58 is_stmt 1 view .LVU2868
 8511              	.LVL467:
GAS LISTING /tmp/cclewcPz.s 			page 234


 8512              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8513              		.loc 1 124 63 is_stmt 0 view .LVU2869
 8514 316f 498D5A06 		lea	rbx, 6[r10]	# index,
 8515              	.LVL468:
 124:sieve_extend.c ****     return index;
 8516              		.loc 1 124 11 is_stmt 1 view .LVU2870
 8517              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8518              		.loc 1 124 21 is_stmt 0 view .LVU2871
 8519 3173 4889DA   		mov	rdx, rbx	# tmp465, index
 8520 3176 48C1EA06 		shr	rdx, 6	# tmp465,
 8521              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8522              		.loc 1 124 12 view .LVU2872
 8523 317a 4D8B44D5 		mov	r8, QWORD PTR 0[r13+rdx*8]	# *_48, *_48
 8523      00
 8524              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8525              		.loc 1 124 11 view .LVU2873
 8526 317f 490FA3D8 		bt	r8, rbx	# *_48, index
 8527 3183 730B     		jnc	.L645	#,
 124:sieve_extend.c ****     return index;
 8528              		.loc 1 124 58 is_stmt 1 view .LVU2874
 8529              	.LVL469:
 8530              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 8531              		.loc 1 124 63 is_stmt 0 view .LVU2875
 8532 3185 498D5A07 		lea	rbx, 7[r10]	# index,
 8533              	.LVL470:
 124:sieve_extend.c ****     return index;
 8534              		.loc 1 124 11 is_stmt 1 view .LVU2876
 8535 3189 E940FFFF 		jmp	.L666	#
 8535      FF
 8536              	.LVL471:
 8537 318e 6690     		.p2align 4,,7
 8538              		.p2align 3
 8539              	.L645:
 124:sieve_extend.c ****     return index;
 8540              		.loc 1 124 11 is_stmt 0 view .LVU2877
 8541              	.LBE470:
 8542              	.LBE471:
 8543              	.LBE492:
 8544              	.LBE500:
 8545              	.LBE512:
 8546              	# sieve_extend.c:875: static struct sieve_state *sieve(const counter_t maxints, const counter_t blo
 875:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 8547              		.loc 1 875 86 view .LVU2878
 8548 3190 4C8B5424 		mov	r10, QWORD PTR 24[rsp]	# pattern_start, %sfp
 8548      18
 8549 3195 4C89F2   		mov	rdx, r14	# block$pattern_size, patternsize_bits
 8550              	.LVL472:
 875:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 8551              		.loc 1 875 86 view .LVU2879
 8552 3198 488B7C24 		mov	rdi, QWORD PTR 8[rsp]	# prime, %sfp
 8552      08
 8553 319d 4889D8   		mov	rax, rbx	# index, index
GAS LISTING /tmp/cclewcPz.s 			page 235


 8554 31a0 488B7424 		mov	rsi, QWORD PTR 16[rsp]	# block$pattern_start, %sfp
 8554      10
 8555              	.LVL473:
 875:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 8556              		.loc 1 875 86 view .LVU2880
 8557 31a5 4C8B7424 		mov	r14, QWORD PTR 32[rsp]	# patternsize_bits, %sfp
 8557      20
 8558 31aa 48895C24 		mov	QWORD PTR 8[rsp], rbx	# %sfp, index
 8558      08
 8559 31af 4C895424 		mov	QWORD PTR 16[rsp], r10	# %sfp, pattern_start
 8559      10
 875:sieve_extend.c ****     struct sieve_state *sieve = create_sieve(maxints);
 8560              		.loc 1 875 86 view .LVU2881
 8561 31b4 E987FEFF 		jmp	.L643	#
 8561      FF
 8562              	.LVL474:
 8563 31b9 0F1F8000 		.p2align 4,,7
 8563      000000
 8564              		.p2align 3
 8565              	.L656:
 8566              	.LBB513:
 8567              	.LBB501:
 8568              	.LBB493:
 868:sieve_extend.c ****         block.prime = prime;
 8569              		.loc 1 868 43 is_stmt 1 view .LVU2882
 8570              	.LBB472:
 8571              	.LBI472:
 393:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange (%ju occurances
 8572              		.loc 1 393 20 view .LVU2883
 8573              	.LBB473:
 394:sieve_extend.c ****     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * step;
 8574              		.loc 1 394 5 view .LVU2884
 395:sieve_extend.c **** 
 8575              		.loc 1 395 5 view .LVU2885
 8576              	# sieve_extend.c:395:     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * st
 395:sieve_extend.c **** 
 8577              		.loc 1 395 74 is_stmt 0 view .LVU2886
 8578 31c0 4D89E2   		mov	r10, r12	# tmp289, step
 8579 31c3 49C1E206 		sal	r10, 6	# tmp289,
 8580              	# sieve_extend.c:395:     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * st
 395:sieve_extend.c **** 
 8581              		.loc 1 395 21 view .LVU2887
 8582 31c7 4901EA   		add	r10, rbp	# range_stop_unique, index
 8583              	.LVL475:
 8584              	.LBB474:
 399:sieve_extend.c ****         #if __APPLE__
 8585              		.loc 1 399 10 is_stmt 1 view .LVU2888
 399:sieve_extend.c ****         #if __APPLE__
 8586              		.loc 1 399 50 view .LVU2889
 8587              	# sieve_extend.c:399:     for (register counter_t index = range_start; index < range_stop_unique; i
 399:sieve_extend.c ****         #if __APPLE__
 8588              		.loc 1 399 5 is_stmt 0 view .LVU2890
 8589 31ca 4C39D5   		cmp	rbp, r10	# index, range_stop_unique
 8590 31cd 0F83F1FE 		jnb	.L657	#,
 8590      FFFF
 8591              	.LBB475:
 8592              	.LBB476:
GAS LISTING /tmp/cclewcPz.s 			page 236


 8593              	# sieve_extend.c:176:    const counter_t range_stop_word = wordindex(range_stop);
 176:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 8594              		.loc 1 176 20 view .LVU2891
 8595 31d3 4D89FB   		mov	r11, r15	# range_stop_word, _68
 8596              	# sieve_extend.c:178:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 178:sieve_extend.c **** 
 8597              		.loc 1 178 110 view .LVU2892
 8598 31d6 4B8D3CA4 		lea	rdi, [r12+r12*4]	# tmp292,
 8599              	# sieve_extend.c:176:    const counter_t range_stop_word = wordindex(range_stop);
 176:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 8600              		.loc 1 176 20 view .LVU2893
 8601 31da 49C1EB06 		shr	r11, 6	# range_stop_word,
 8602              	# sieve_extend.c:202:       *index_ptr |= (mask & chopmask(range_stop));
 202:sieve_extend.c ****    }
 8603              		.loc 1 202 29 view .LVU2894
 8604 31de 4489F9   		mov	ecx, r15d	# tmp294, _68
 8605              	# sieve_extend.c:178:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 178:sieve_extend.c **** 
 8606              		.loc 1 178 133 view .LVU2895
 8607 31e1 4D89D9   		mov	r9, r11	# tmp298, range_stop_word
 8608              	# sieve_extend.c:195:    register const bitword_t* __restrict range_stop_ptr = &bitarray[(range_sto
 195:sieve_extend.c ****    while likely(index_ptr < range_stop_ptr) {
 8609              		.loc 1 195 41 view .LVU2896
 8610 31e4 4F8D44DD 		lea	r8, 0[r13+r11*8]	# range_stop_ptr,
 8610      00
 8611              	# sieve_extend.c:178:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 178:sieve_extend.c **** 
 8612              		.loc 1 178 133 view .LVU2897
 8613 31e9 4929F9   		sub	r9, rdi	# tmp298, tmp292
 8614              	# sieve_extend.c:178:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 178:sieve_extend.c **** 
 8615              		.loc 1 178 53 view .LVU2898
 8616 31ec 4939FB   		cmp	r11, rdi	# range_stop_word, tmp292
 8617 31ef 4F8D4CCD 		lea	r9, 0[r13+r9*8]	# tmp300,
 8617      00
 8618 31f4 4D89E3   		mov	r11, r12	# _561, step
 8619              	# sieve_extend.c:202:       *index_ptr |= (mask & chopmask(range_stop));
 202:sieve_extend.c ****    }
 8620              		.loc 1 202 29 view .LVU2899
 8621 31f7 F7D1     		not	ecx	# tmp294
 8622              	# sieve_extend.c:178:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 178:sieve_extend.c **** 
 8623              		.loc 1 178 53 view .LVU2900
 8624 31f9 4D0F46CD 		cmovbe	r9, r13	# _95,, fast_loop_ptr
 8625              	# sieve_extend.c:202:       *index_ptr |= (mask & chopmask(range_stop));
 202:sieve_extend.c ****    }
 8626              		.loc 1 202 29 view .LVU2901
 8627 31fd 48C7C0FF 		mov	rax, -1	# tmp618,
 8627      FFFFFF
 8628              	# sieve_extend.c:184:        index_ptr+=step;
 184:sieve_extend.c ****        *index_ptr |= mask;
 8629              		.loc 1 184 17 view .LVU2902
 8630 3204 4A8D14E5 		lea	rdx, 0[0+r12*8]	# _120,
 8630      00000000 
 8631 320c 48C1E703 		sal	rdi, 3	# tmp304,
 8632              	# sieve_extend.c:202:       *index_ptr |= (mask & chopmask(range_stop));
 202:sieve_extend.c ****    }
GAS LISTING /tmp/cclewcPz.s 			page 237


 8633              		.loc 1 202 29 view .LVU2903
 8634 3210 C4E2F3F7 		shrx	rsi, rax, rcx	# _152, tmp618, tmp294
 8634      F0
 8635 3215 49C1E304 		sal	r11, 4	# _561,
 8636 3219 48897424 		mov	QWORD PTR 56[rsp], rsi	# %sfp, _152
 8636      38
 8637              	.LVL476:
 8638 321e 6690     		.p2align 4
 8639              		.p2align 3
 8640              	.L664:
 202:sieve_extend.c ****    }
 8641              		.loc 1 202 29 view .LVU2904
 8642              	.LBE476:
 8643              	.LBE475:
 403:sieve_extend.c ****         #endif
 8644              		.loc 1 403 13 is_stmt 1 view .LVU2905
 8645 3220 4889E8   		mov	rax, rbp	# tmp307, index
 8646 3223 B9010000 		mov	ecx, 1	# tmp621,
 8646      00
 8647 3228 48C1E806 		shr	rax, 6	# tmp307,
 8648 322c C4E2D1F7 		shlx	rcx, rcx, rbp	# _105, tmp621, index
 8648      C9
 8649              	.LVL477:
 8650              	.LBB479:
 8651              	.LBI475:
 175:sieve_extend.c ****    const counter_t range_stop_word = wordindex(range_stop);
 8652              		.loc 1 175 20 view .LVU2906
 8653              	.LBB477:
 176:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 8654              		.loc 1 176 4 view .LVU2907
 177:sieve_extend.c ****    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_stop
 8655              		.loc 1 177 4 view .LVU2908
 8656              	# sieve_extend.c:177:    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(
 177:sieve_extend.c ****    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_stop
 8657              		.loc 1 177 78 is_stmt 0 view .LVU2909
 8658 3231 498D44C5 		lea	rax, 0[r13+rax*8]	# index_ptr,
 8658      00
 8659              	.LVL478:
 178:sieve_extend.c **** 
 8660              		.loc 1 178 4 is_stmt 1 view .LVU2910
 182:sieve_extend.c ****        *index_ptr |= mask;
 8661              		.loc 1 182 10 view .LVU2911
 8662 3236 4C39C8   		cmp	rax, r9	# index_ptr, fast_loop_ptr
 8663 3239 0F830101 		jnb	.L659	#,
 8663      0000
 182:sieve_extend.c ****        *index_ptr |= mask;
 8664              		.loc 1 182 10 is_stmt 0 view .LVU2912
 8665 323f 4A8D3418 		lea	rsi, [rax+r11]	# ivtmp.510,
 8666              	.L660:
 183:sieve_extend.c ****        index_ptr+=step;
 8667              		.loc 1 183 8 is_stmt 1 view .LVU2913
 8668              	# sieve_extend.c:183:        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 8669              		.loc 1 183 19 is_stmt 0 view .LVU2914
 8670 3243 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_332, offset: 0B], _105
 184:sieve_extend.c ****        *index_ptr |= mask;
 8671              		.loc 1 184 8 is_stmt 1 view .LVU2915
GAS LISTING /tmp/cclewcPz.s 			page 238


 8672              	.LVL479:
 185:sieve_extend.c ****        index_ptr+=step;
 8673              		.loc 1 185 8 view .LVU2916
 8674              	# sieve_extend.c:185:        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 8675              		.loc 1 185 19 is_stmt 0 view .LVU2917
 8676 3246 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_332, index: _120, offset: 0B], _105
 186:sieve_extend.c ****        *index_ptr |= mask;
 8677              		.loc 1 186 8 is_stmt 1 view .LVU2918
 8678              	.LVL480:
 187:sieve_extend.c ****        index_ptr+=step;
 8679              		.loc 1 187 8 view .LVU2919
 8680              	# sieve_extend.c:187:        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 8681              		.loc 1 187 19 is_stmt 0 view .LVU2920
 8682 324a 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _553, offset: 0B], _105
 188:sieve_extend.c ****        *index_ptr |= mask;
 8683              		.loc 1 188 8 is_stmt 1 view .LVU2921
 8684              	.LVL481:
 189:sieve_extend.c ****        index_ptr+=step;
 8685              		.loc 1 189 8 view .LVU2922
 8686              	# sieve_extend.c:189:        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 8687              		.loc 1 189 19 is_stmt 0 view .LVU2923
 8688 324d 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _553, index: _120, offset: 0B], _105
 190:sieve_extend.c ****        *index_ptr |= mask;
 8689              		.loc 1 190 8 is_stmt 1 view .LVU2924
 8690              	.LVL482:
 191:sieve_extend.c ****        index_ptr+=step;
 8691              		.loc 1 191 8 view .LVU2925
 8692 3251 4801FE   		add	rsi, rdi	# ivtmp.510, tmp304
 8693              	# sieve_extend.c:191:        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 8694              		.loc 1 191 19 is_stmt 0 view .LVU2926
 8695 3254 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_332, index: _120, step: 4, offset: 0B], _105
 192:sieve_extend.c ****    }
 8696              		.loc 1 192 8 is_stmt 1 view .LVU2927
 8697 3258 4801F8   		add	rax, rdi	# index_ptr, tmp304
 8698              	.LVL483:
 182:sieve_extend.c ****        *index_ptr |= mask;
 8699              		.loc 1 182 10 view .LVU2928
 8700 325b 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 8701 325e 0F86DC00 		jbe	.L659	#,
 8701      0000
 183:sieve_extend.c ****        index_ptr+=step;
 8702              		.loc 1 183 8 view .LVU2929
 8703              	# sieve_extend.c:183:        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 8704              		.loc 1 183 19 is_stmt 0 view .LVU2930
 8705 3264 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_332, offset: 0B], _105
 184:sieve_extend.c ****        *index_ptr |= mask;
 8706              		.loc 1 184 8 is_stmt 1 view .LVU2931
 8707              	.LVL484:
 185:sieve_extend.c ****        index_ptr+=step;
 8708              		.loc 1 185 8 view .LVU2932
 8709              	# sieve_extend.c:185:        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
GAS LISTING /tmp/cclewcPz.s 			page 239


 8710              		.loc 1 185 19 is_stmt 0 view .LVU2933
 8711 3267 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_332, index: _120, offset: 0B], _105
 186:sieve_extend.c ****        *index_ptr |= mask;
 8712              		.loc 1 186 8 is_stmt 1 view .LVU2934
 8713              	.LVL485:
 187:sieve_extend.c ****        index_ptr+=step;
 8714              		.loc 1 187 8 view .LVU2935
 8715              	# sieve_extend.c:187:        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 8716              		.loc 1 187 19 is_stmt 0 view .LVU2936
 8717 326b 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _553, offset: 0B], _105
 188:sieve_extend.c ****        *index_ptr |= mask;
 8718              		.loc 1 188 8 is_stmt 1 view .LVU2937
 8719              	.LVL486:
 189:sieve_extend.c ****        index_ptr+=step;
 8720              		.loc 1 189 8 view .LVU2938
 8721              	# sieve_extend.c:189:        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 8722              		.loc 1 189 19 is_stmt 0 view .LVU2939
 8723 326e 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _553, index: _120, offset: 0B], _105
 190:sieve_extend.c ****        *index_ptr |= mask;
 8724              		.loc 1 190 8 is_stmt 1 view .LVU2940
 8725              	.LVL487:
 191:sieve_extend.c ****        index_ptr+=step;
 8726              		.loc 1 191 8 view .LVU2941
 8727 3272 4801FE   		add	rsi, rdi	# ivtmp.510, tmp304
 8728              	# sieve_extend.c:191:        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 8729              		.loc 1 191 19 is_stmt 0 view .LVU2942
 8730 3275 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_332, index: _120, step: 4, offset: 0B], _105
 192:sieve_extend.c ****    }
 8731              		.loc 1 192 8 is_stmt 1 view .LVU2943
 8732 3279 4801F8   		add	rax, rdi	# index_ptr, tmp304
 8733              	.LVL488:
 182:sieve_extend.c ****        *index_ptr |= mask;
 8734              		.loc 1 182 10 view .LVU2944
 8735 327c 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 8736 327f 0F86BB00 		jbe	.L659	#,
 8736      0000
 183:sieve_extend.c ****        index_ptr+=step;
 8737              		.loc 1 183 8 view .LVU2945
 8738              	# sieve_extend.c:183:        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 8739              		.loc 1 183 19 is_stmt 0 view .LVU2946
 8740 3285 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_332, offset: 0B], _105
 184:sieve_extend.c ****        *index_ptr |= mask;
 8741              		.loc 1 184 8 is_stmt 1 view .LVU2947
 8742              	.LVL489:
 185:sieve_extend.c ****        index_ptr+=step;
 8743              		.loc 1 185 8 view .LVU2948
 8744              	# sieve_extend.c:185:        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 8745              		.loc 1 185 19 is_stmt 0 view .LVU2949
 8746 3288 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_332, index: _120, offset: 0B], _105
 186:sieve_extend.c ****        *index_ptr |= mask;
 8747              		.loc 1 186 8 is_stmt 1 view .LVU2950
 8748              	.LVL490:
GAS LISTING /tmp/cclewcPz.s 			page 240


 187:sieve_extend.c ****        index_ptr+=step;
 8749              		.loc 1 187 8 view .LVU2951
 8750              	# sieve_extend.c:187:        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 8751              		.loc 1 187 19 is_stmt 0 view .LVU2952
 8752 328c 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _553, offset: 0B], _105
 188:sieve_extend.c ****        *index_ptr |= mask;
 8753              		.loc 1 188 8 is_stmt 1 view .LVU2953
 8754              	.LVL491:
 189:sieve_extend.c ****        index_ptr+=step;
 8755              		.loc 1 189 8 view .LVU2954
 8756              	# sieve_extend.c:189:        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 8757              		.loc 1 189 19 is_stmt 0 view .LVU2955
 8758 328f 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _553, index: _120, offset: 0B], _105
 190:sieve_extend.c ****        *index_ptr |= mask;
 8759              		.loc 1 190 8 is_stmt 1 view .LVU2956
 8760              	.LVL492:
 191:sieve_extend.c ****        index_ptr+=step;
 8761              		.loc 1 191 8 view .LVU2957
 8762 3293 4801FE   		add	rsi, rdi	# ivtmp.510, tmp304
 8763              	# sieve_extend.c:191:        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 8764              		.loc 1 191 19 is_stmt 0 view .LVU2958
 8765 3296 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_332, index: _120, step: 4, offset: 0B], _105
 192:sieve_extend.c ****    }
 8766              		.loc 1 192 8 is_stmt 1 view .LVU2959
 8767 329a 4801F8   		add	rax, rdi	# index_ptr, tmp304
 8768              	.LVL493:
 182:sieve_extend.c ****        *index_ptr |= mask;
 8769              		.loc 1 182 10 view .LVU2960
 8770 329d 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 8771 32a0 0F869A00 		jbe	.L659	#,
 8771      0000
 183:sieve_extend.c ****        index_ptr+=step;
 8772              		.loc 1 183 8 view .LVU2961
 8773              	# sieve_extend.c:183:        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 8774              		.loc 1 183 19 is_stmt 0 view .LVU2962
 8775 32a6 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_332, offset: 0B], _105
 184:sieve_extend.c ****        *index_ptr |= mask;
 8776              		.loc 1 184 8 is_stmt 1 view .LVU2963
 8777              	.LVL494:
 185:sieve_extend.c ****        index_ptr+=step;
 8778              		.loc 1 185 8 view .LVU2964
 8779              	# sieve_extend.c:185:        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 8780              		.loc 1 185 19 is_stmt 0 view .LVU2965
 8781 32a9 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_332, index: _120, offset: 0B], _105
 186:sieve_extend.c ****        *index_ptr |= mask;
 8782              		.loc 1 186 8 is_stmt 1 view .LVU2966
 8783              	.LVL495:
 187:sieve_extend.c ****        index_ptr+=step;
 8784              		.loc 1 187 8 view .LVU2967
 8785              	# sieve_extend.c:187:        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 8786              		.loc 1 187 19 is_stmt 0 view .LVU2968
GAS LISTING /tmp/cclewcPz.s 			page 241


 8787 32ad 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _553, offset: 0B], _105
 188:sieve_extend.c ****        *index_ptr |= mask;
 8788              		.loc 1 188 8 is_stmt 1 view .LVU2969
 8789              	.LVL496:
 189:sieve_extend.c ****        index_ptr+=step;
 8790              		.loc 1 189 8 view .LVU2970
 8791              	# sieve_extend.c:189:        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 8792              		.loc 1 189 19 is_stmt 0 view .LVU2971
 8793 32b0 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _553, index: _120, offset: 0B], _105
 190:sieve_extend.c ****        *index_ptr |= mask;
 8794              		.loc 1 190 8 is_stmt 1 view .LVU2972
 8795              	.LVL497:
 191:sieve_extend.c ****        index_ptr+=step;
 8796              		.loc 1 191 8 view .LVU2973
 8797 32b4 4801FE   		add	rsi, rdi	# ivtmp.510, tmp304
 8798              	# sieve_extend.c:191:        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 8799              		.loc 1 191 19 is_stmt 0 view .LVU2974
 8800 32b7 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_332, index: _120, step: 4, offset: 0B], _105
 192:sieve_extend.c ****    }
 8801              		.loc 1 192 8 is_stmt 1 view .LVU2975
 8802 32bb 4801F8   		add	rax, rdi	# index_ptr, tmp304
 8803              	.LVL498:
 182:sieve_extend.c ****        *index_ptr |= mask;
 8804              		.loc 1 182 10 view .LVU2976
 8805 32be 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 8806 32c1 767D     		jbe	.L659	#,
 183:sieve_extend.c ****        index_ptr+=step;
 8807              		.loc 1 183 8 view .LVU2977
 8808              	# sieve_extend.c:183:        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 8809              		.loc 1 183 19 is_stmt 0 view .LVU2978
 8810 32c3 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_332, offset: 0B], _105
 184:sieve_extend.c ****        *index_ptr |= mask;
 8811              		.loc 1 184 8 is_stmt 1 view .LVU2979
 8812              	.LVL499:
 185:sieve_extend.c ****        index_ptr+=step;
 8813              		.loc 1 185 8 view .LVU2980
 8814              	# sieve_extend.c:185:        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 8815              		.loc 1 185 19 is_stmt 0 view .LVU2981
 8816 32c6 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_332, index: _120, offset: 0B], _105
 186:sieve_extend.c ****        *index_ptr |= mask;
 8817              		.loc 1 186 8 is_stmt 1 view .LVU2982
 8818              	.LVL500:
 187:sieve_extend.c ****        index_ptr+=step;
 8819              		.loc 1 187 8 view .LVU2983
 8820              	# sieve_extend.c:187:        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 8821              		.loc 1 187 19 is_stmt 0 view .LVU2984
 8822 32ca 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _553, offset: 0B], _105
 188:sieve_extend.c ****        *index_ptr |= mask;
 8823              		.loc 1 188 8 is_stmt 1 view .LVU2985
 8824              	.LVL501:
 189:sieve_extend.c ****        index_ptr+=step;
 8825              		.loc 1 189 8 view .LVU2986
GAS LISTING /tmp/cclewcPz.s 			page 242


 8826              	# sieve_extend.c:189:        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 8827              		.loc 1 189 19 is_stmt 0 view .LVU2987
 8828 32cd 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _553, index: _120, offset: 0B], _105
 190:sieve_extend.c ****        *index_ptr |= mask;
 8829              		.loc 1 190 8 is_stmt 1 view .LVU2988
 8830              	.LVL502:
 191:sieve_extend.c ****        index_ptr+=step;
 8831              		.loc 1 191 8 view .LVU2989
 8832 32d1 4801FE   		add	rsi, rdi	# ivtmp.510, tmp304
 8833              	# sieve_extend.c:191:        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 8834              		.loc 1 191 19 is_stmt 0 view .LVU2990
 8835 32d4 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_332, index: _120, step: 4, offset: 0B], _105
 192:sieve_extend.c ****    }
 8836              		.loc 1 192 8 is_stmt 1 view .LVU2991
 8837 32d8 4801F8   		add	rax, rdi	# index_ptr, tmp304
 8838              	.LVL503:
 182:sieve_extend.c ****        *index_ptr |= mask;
 8839              		.loc 1 182 10 view .LVU2992
 8840 32db 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 8841 32de 7660     		jbe	.L659	#,
 183:sieve_extend.c ****        index_ptr+=step;
 8842              		.loc 1 183 8 view .LVU2993
 8843              	# sieve_extend.c:183:        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 8844              		.loc 1 183 19 is_stmt 0 view .LVU2994
 8845 32e0 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_332, offset: 0B], _105
 184:sieve_extend.c ****        *index_ptr |= mask;
 8846              		.loc 1 184 8 is_stmt 1 view .LVU2995
 8847              	.LVL504:
 185:sieve_extend.c ****        index_ptr+=step;
 8848              		.loc 1 185 8 view .LVU2996
 8849              	# sieve_extend.c:185:        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 8850              		.loc 1 185 19 is_stmt 0 view .LVU2997
 8851 32e3 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_332, index: _120, offset: 0B], _105
 186:sieve_extend.c ****        *index_ptr |= mask;
 8852              		.loc 1 186 8 is_stmt 1 view .LVU2998
 8853              	.LVL505:
 187:sieve_extend.c ****        index_ptr+=step;
 8854              		.loc 1 187 8 view .LVU2999
 8855              	# sieve_extend.c:187:        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 8856              		.loc 1 187 19 is_stmt 0 view .LVU3000
 8857 32e7 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _553, offset: 0B], _105
 188:sieve_extend.c ****        *index_ptr |= mask;
 8858              		.loc 1 188 8 is_stmt 1 view .LVU3001
 8859              	.LVL506:
 189:sieve_extend.c ****        index_ptr+=step;
 8860              		.loc 1 189 8 view .LVU3002
 8861              	# sieve_extend.c:189:        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 8862              		.loc 1 189 19 is_stmt 0 view .LVU3003
 8863 32ea 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _553, index: _120, offset: 0B], _105
 190:sieve_extend.c ****        *index_ptr |= mask;
 8864              		.loc 1 190 8 is_stmt 1 view .LVU3004
GAS LISTING /tmp/cclewcPz.s 			page 243


 8865              	.LVL507:
 191:sieve_extend.c ****        index_ptr+=step;
 8866              		.loc 1 191 8 view .LVU3005
 8867 32ee 4801FE   		add	rsi, rdi	# ivtmp.510, tmp304
 8868              	# sieve_extend.c:191:        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 8869              		.loc 1 191 19 is_stmt 0 view .LVU3006
 8870 32f1 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_332, index: _120, step: 4, offset: 0B], _105
 192:sieve_extend.c ****    }
 8871              		.loc 1 192 8 is_stmt 1 view .LVU3007
 8872 32f5 4801F8   		add	rax, rdi	# index_ptr, tmp304
 8873              	.LVL508:
 182:sieve_extend.c ****        *index_ptr |= mask;
 8874              		.loc 1 182 10 view .LVU3008
 8875 32f8 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 8876 32fb 7643     		jbe	.L659	#,
 183:sieve_extend.c ****        index_ptr+=step;
 8877              		.loc 1 183 8 view .LVU3009
 8878              	# sieve_extend.c:183:        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 8879              		.loc 1 183 19 is_stmt 0 view .LVU3010
 8880 32fd 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_332, offset: 0B], _105
 184:sieve_extend.c ****        *index_ptr |= mask;
 8881              		.loc 1 184 8 is_stmt 1 view .LVU3011
 8882              	.LVL509:
 185:sieve_extend.c ****        index_ptr+=step;
 8883              		.loc 1 185 8 view .LVU3012
 8884              	# sieve_extend.c:185:        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 8885              		.loc 1 185 19 is_stmt 0 view .LVU3013
 8886 3300 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_332, index: _120, offset: 0B], _105
 186:sieve_extend.c ****        *index_ptr |= mask;
 8887              		.loc 1 186 8 is_stmt 1 view .LVU3014
 8888              	.LVL510:
 187:sieve_extend.c ****        index_ptr+=step;
 8889              		.loc 1 187 8 view .LVU3015
 8890              	# sieve_extend.c:187:        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 8891              		.loc 1 187 19 is_stmt 0 view .LVU3016
 8892 3304 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _553, offset: 0B], _105
 188:sieve_extend.c ****        *index_ptr |= mask;
 8893              		.loc 1 188 8 is_stmt 1 view .LVU3017
 8894              	.LVL511:
 189:sieve_extend.c ****        index_ptr+=step;
 8895              		.loc 1 189 8 view .LVU3018
 8896              	# sieve_extend.c:189:        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 8897              		.loc 1 189 19 is_stmt 0 view .LVU3019
 8898 3307 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _553, index: _120, offset: 0B], _105
 190:sieve_extend.c ****        *index_ptr |= mask;
 8899              		.loc 1 190 8 is_stmt 1 view .LVU3020
 8900              	.LVL512:
 191:sieve_extend.c ****        index_ptr+=step;
 8901              		.loc 1 191 8 view .LVU3021
 8902 330b 4801FE   		add	rsi, rdi	# ivtmp.510, tmp304
 8903              	# sieve_extend.c:191:        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
GAS LISTING /tmp/cclewcPz.s 			page 244


 8904              		.loc 1 191 19 is_stmt 0 view .LVU3022
 8905 330e 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_332, index: _120, step: 4, offset: 0B], _105
 192:sieve_extend.c ****    }
 8906              		.loc 1 192 8 is_stmt 1 view .LVU3023
 8907 3312 4801F8   		add	rax, rdi	# index_ptr, tmp304
 8908              	.LVL513:
 182:sieve_extend.c ****        *index_ptr |= mask;
 8909              		.loc 1 182 10 view .LVU3024
 8910 3315 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 8911 3318 7626     		jbe	.L659	#,
 183:sieve_extend.c ****        index_ptr+=step;
 8912              		.loc 1 183 8 view .LVU3025
 8913              	# sieve_extend.c:183:        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 8914              		.loc 1 183 19 is_stmt 0 view .LVU3026
 8915 331a 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_332, offset: 0B], _105
 184:sieve_extend.c ****        *index_ptr |= mask;
 8916              		.loc 1 184 8 is_stmt 1 view .LVU3027
 8917              	.LVL514:
 185:sieve_extend.c ****        index_ptr+=step;
 8918              		.loc 1 185 8 view .LVU3028
 8919              	# sieve_extend.c:185:        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 8920              		.loc 1 185 19 is_stmt 0 view .LVU3029
 8921 331d 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_332, index: _120, offset: 0B], _105
 186:sieve_extend.c ****        *index_ptr |= mask;
 8922              		.loc 1 186 8 is_stmt 1 view .LVU3030
 8923              	.LVL515:
 187:sieve_extend.c ****        index_ptr+=step;
 8924              		.loc 1 187 8 view .LVU3031
 8925              	# sieve_extend.c:187:        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 8926              		.loc 1 187 19 is_stmt 0 view .LVU3032
 8927 3321 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _553, offset: 0B], _105
 188:sieve_extend.c ****        *index_ptr |= mask;
 8928              		.loc 1 188 8 is_stmt 1 view .LVU3033
 8929              	.LVL516:
 189:sieve_extend.c ****        index_ptr+=step;
 8930              		.loc 1 189 8 view .LVU3034
 8931              	# sieve_extend.c:189:        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 8932              		.loc 1 189 19 is_stmt 0 view .LVU3035
 8933 3324 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _553, index: _120, offset: 0B], _105
 190:sieve_extend.c ****        *index_ptr |= mask;
 8934              		.loc 1 190 8 is_stmt 1 view .LVU3036
 8935              	.LVL517:
 191:sieve_extend.c ****        index_ptr+=step;
 8936              		.loc 1 191 8 view .LVU3037
 8937 3328 4801FE   		add	rsi, rdi	# ivtmp.510, tmp304
 8938              	# sieve_extend.c:191:        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 8939              		.loc 1 191 19 is_stmt 0 view .LVU3038
 8940 332b 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_332, index: _120, step: 4, offset: 0B], _105
 192:sieve_extend.c ****    }
 8941              		.loc 1 192 8 is_stmt 1 view .LVU3039
 8942 332f 4801F8   		add	rax, rdi	# index_ptr, tmp304
 8943              	.LVL518:
GAS LISTING /tmp/cclewcPz.s 			page 245


 182:sieve_extend.c ****        *index_ptr |= mask;
 8944              		.loc 1 182 10 view .LVU3040
 8945 3332 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 8946 3335 0F8708FF 		ja	.L660	#,
 8946      FFFF
 8947 333b 0F1F4400 		.p2align 4
 8947      00
 8948              		.p2align 3
 8949              	.L659:
 195:sieve_extend.c ****    while likely(index_ptr < range_stop_ptr) {
 8950              		.loc 1 195 4 view .LVU3041
 196:sieve_extend.c ****        *index_ptr |= mask;
 8951              		.loc 1 196 4 view .LVU3042
 196:sieve_extend.c ****        *index_ptr |= mask;
 8952              		.loc 1 196 10 view .LVU3043
 8953 3340 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 8954 3343 765B     		jbe	.L661	#,
 8955              	.L662:
 197:sieve_extend.c ****        index_ptr+=step;
 8956              		.loc 1 197 8 view .LVU3044
 8957              	# sieve_extend.c:197:        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
 8958              		.loc 1 197 19 is_stmt 0 view .LVU3045
 8959 3345 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_329, offset: 0B], _105
 198:sieve_extend.c ****    }
 8960              		.loc 1 198 8 is_stmt 1 view .LVU3046
 8961              	# sieve_extend.c:198:        index_ptr+=step;
 198:sieve_extend.c ****    }
 8962              		.loc 1 198 17 is_stmt 0 view .LVU3047
 8963 3348 4801D0   		add	rax, rdx	# index_ptr, _120
 8964              	.LVL519:
 196:sieve_extend.c ****        *index_ptr |= mask;
 8965              		.loc 1 196 10 is_stmt 1 view .LVU3048
 8966 334b 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 8967 334e 7650     		jbe	.L661	#,
 197:sieve_extend.c ****        index_ptr+=step;
 8968              		.loc 1 197 8 view .LVU3049
 8969              	# sieve_extend.c:197:        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
 8970              		.loc 1 197 19 is_stmt 0 view .LVU3050
 8971 3350 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_329, offset: 0B], _105
 198:sieve_extend.c ****    }
 8972              		.loc 1 198 8 is_stmt 1 view .LVU3051
 8973              	# sieve_extend.c:198:        index_ptr+=step;
 198:sieve_extend.c ****    }
 8974              		.loc 1 198 17 is_stmt 0 view .LVU3052
 8975 3353 4801D0   		add	rax, rdx	# index_ptr, _120
 8976              	.LVL520:
 196:sieve_extend.c ****        *index_ptr |= mask;
 8977              		.loc 1 196 10 is_stmt 1 view .LVU3053
 8978 3356 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 8979 3359 7645     		jbe	.L661	#,
 197:sieve_extend.c ****        index_ptr+=step;
 8980              		.loc 1 197 8 view .LVU3054
 8981              	# sieve_extend.c:197:        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
 8982              		.loc 1 197 19 is_stmt 0 view .LVU3055
GAS LISTING /tmp/cclewcPz.s 			page 246


 8983 335b 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_329, offset: 0B], _105
 198:sieve_extend.c ****    }
 8984              		.loc 1 198 8 is_stmt 1 view .LVU3056
 8985              	# sieve_extend.c:198:        index_ptr+=step;
 198:sieve_extend.c ****    }
 8986              		.loc 1 198 17 is_stmt 0 view .LVU3057
 8987 335e 4801D0   		add	rax, rdx	# index_ptr, _120
 8988              	.LVL521:
 196:sieve_extend.c ****        *index_ptr |= mask;
 8989              		.loc 1 196 10 is_stmt 1 view .LVU3058
 8990 3361 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 8991 3364 763A     		jbe	.L661	#,
 197:sieve_extend.c ****        index_ptr+=step;
 8992              		.loc 1 197 8 view .LVU3059
 8993              	# sieve_extend.c:197:        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
 8994              		.loc 1 197 19 is_stmt 0 view .LVU3060
 8995 3366 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_329, offset: 0B], _105
 198:sieve_extend.c ****    }
 8996              		.loc 1 198 8 is_stmt 1 view .LVU3061
 8997              	# sieve_extend.c:198:        index_ptr+=step;
 198:sieve_extend.c ****    }
 8998              		.loc 1 198 17 is_stmt 0 view .LVU3062
 8999 3369 4801D0   		add	rax, rdx	# index_ptr, _120
 9000              	.LVL522:
 196:sieve_extend.c ****        *index_ptr |= mask;
 9001              		.loc 1 196 10 is_stmt 1 view .LVU3063
 9002 336c 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 9003 336f 762F     		jbe	.L661	#,
 197:sieve_extend.c ****        index_ptr+=step;
 9004              		.loc 1 197 8 view .LVU3064
 9005              	# sieve_extend.c:197:        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
 9006              		.loc 1 197 19 is_stmt 0 view .LVU3065
 9007 3371 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_329, offset: 0B], _105
 198:sieve_extend.c ****    }
 9008              		.loc 1 198 8 is_stmt 1 view .LVU3066
 9009              	# sieve_extend.c:198:        index_ptr+=step;
 198:sieve_extend.c ****    }
 9010              		.loc 1 198 17 is_stmt 0 view .LVU3067
 9011 3374 4801D0   		add	rax, rdx	# index_ptr, _120
 9012              	.LVL523:
 196:sieve_extend.c ****        *index_ptr |= mask;
 9013              		.loc 1 196 10 is_stmt 1 view .LVU3068
 9014 3377 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 9015 337a 7624     		jbe	.L661	#,
 197:sieve_extend.c ****        index_ptr+=step;
 9016              		.loc 1 197 8 view .LVU3069
 9017              	# sieve_extend.c:197:        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
 9018              		.loc 1 197 19 is_stmt 0 view .LVU3070
 9019 337c 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_329, offset: 0B], _105
 198:sieve_extend.c ****    }
 9020              		.loc 1 198 8 is_stmt 1 view .LVU3071
 9021              	# sieve_extend.c:198:        index_ptr+=step;
 198:sieve_extend.c ****    }
 9022              		.loc 1 198 17 is_stmt 0 view .LVU3072
GAS LISTING /tmp/cclewcPz.s 			page 247


 9023 337f 4801D0   		add	rax, rdx	# index_ptr, _120
 9024              	.LVL524:
 196:sieve_extend.c ****        *index_ptr |= mask;
 9025              		.loc 1 196 10 is_stmt 1 view .LVU3073
 9026 3382 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 9027 3385 7619     		jbe	.L661	#,
 197:sieve_extend.c ****        index_ptr+=step;
 9028              		.loc 1 197 8 view .LVU3074
 9029              	# sieve_extend.c:197:        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
 9030              		.loc 1 197 19 is_stmt 0 view .LVU3075
 9031 3387 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_329, offset: 0B], _105
 198:sieve_extend.c ****    }
 9032              		.loc 1 198 8 is_stmt 1 view .LVU3076
 9033              	# sieve_extend.c:198:        index_ptr+=step;
 198:sieve_extend.c ****    }
 9034              		.loc 1 198 17 is_stmt 0 view .LVU3077
 9035 338a 4801D0   		add	rax, rdx	# index_ptr, _120
 9036              	.LVL525:
 196:sieve_extend.c ****        *index_ptr |= mask;
 9037              		.loc 1 196 10 is_stmt 1 view .LVU3078
 9038 338d 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 9039 3390 760E     		jbe	.L661	#,
 197:sieve_extend.c ****        index_ptr+=step;
 9040              		.loc 1 197 8 view .LVU3079
 9041              	# sieve_extend.c:197:        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
 9042              		.loc 1 197 19 is_stmt 0 view .LVU3080
 9043 3392 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_329, offset: 0B], _105
 198:sieve_extend.c ****    }
 9044              		.loc 1 198 8 is_stmt 1 view .LVU3081
 9045              	# sieve_extend.c:198:        index_ptr+=step;
 198:sieve_extend.c ****    }
 9046              		.loc 1 198 17 is_stmt 0 view .LVU3082
 9047 3395 4801D0   		add	rax, rdx	# index_ptr, _120
 9048              	.LVL526:
 196:sieve_extend.c ****        *index_ptr |= mask;
 9049              		.loc 1 196 10 is_stmt 1 view .LVU3083
 9050 3398 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 9051 339b 77A8     		ja	.L662	#,
 9052 339d 0F1F00   		.p2align 4
 9053              		.p2align 3
 9054              	.L661:
 201:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 9055              		.loc 1 201 4 view .LVU3084
 9056              	# sieve_extend.c:201:    if (index_ptr == range_stop_ptr) { // index_ptr could also end above range
 201:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 9057              		.loc 1 201 7 is_stmt 0 view .LVU3085
 9058 33a0 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 9059 33a3 744B     		je	.L859	#,
 9060              	.LVL527:
 9061              	.L663:
 201:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 9062              		.loc 1 201 7 view .LVU3086
 9063              	.LBE477:
 9064              	.LBE479:
 399:sieve_extend.c ****         #if __APPLE__
GAS LISTING /tmp/cclewcPz.s 			page 248


 9065              		.loc 1 399 77 is_stmt 1 view .LVU3087
 9066              	# sieve_extend.c:399:     for (register counter_t index = range_start; index < range_stop_unique; i
 399:sieve_extend.c ****         #if __APPLE__
 9067              		.loc 1 399 83 is_stmt 0 view .LVU3088
 9068 33a5 4C01E5   		add	rbp, r12	# index, step
 9069              	.LVL528:
 399:sieve_extend.c ****         #if __APPLE__
 9070              		.loc 1 399 50 is_stmt 1 view .LVU3089
 9071              	# sieve_extend.c:399:     for (register counter_t index = range_start; index < range_stop_unique; i
 399:sieve_extend.c ****         #if __APPLE__
 9072              		.loc 1 399 5 is_stmt 0 view .LVU3090
 9073 33a8 4939EA   		cmp	r10, rbp	# range_stop_unique, index
 9074 33ab 0F876FFE 		ja	.L664	#,
 9074      FFFF
 9075              	.LVL529:
 399:sieve_extend.c ****         #if __APPLE__
 9076              		.loc 1 399 5 view .LVU3091
 9077              	.LBE474:
 9078              	.LBE473:
 9079              	.LBE472:
 9080              	.LBE493:
 846:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 9081              		.loc 1 846 11 is_stmt 1 view .LVU3092
 9082              	# sieve_extend.c:846:     for (;range_stop < block_stop;) {
 846:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 9083              		.loc 1 846 5 is_stmt 0 view .LVU3093
 9084 33b1 4C3B3C24 		cmp	r15, QWORD PTR [rsp]	# _68, %sfp
 9085 33b5 0F8213FD 		jb	.L666	#,
 9085      FFFF
 9086              	.L858:
 846:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 9087              		.loc 1 846 5 view .LVU3094
 9088 33bb 488B5C24 		mov	rbx, QWORD PTR 40[rsp]	# <retval>, %sfp
 9088      28
 9089 33c0 4C89F2   		mov	rdx, r14	# block$pattern_size, patternsize_bits
 9090 33c3 488B7424 		mov	rsi, QWORD PTR 16[rsp]	# block$pattern_start, %sfp
 9090      10
 9091              	.LBE501:
 9092              	.LBE513:
 9093              	.LBB514:
 9094              	.LBB515:
 9095              	# sieve_extend.c:786:     if (size < WORD_SIZE_counter)   {
 786:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 9096              		.loc 1 786 8 view .LVU3095
 9097 33c8 4883FA3F 		cmp	rdx, 63	# block$pattern_size,
 9098              	.LBE515:
 9099              	.LBE514:
 9100              	.LBB520:
 9101              	.LBB502:
 9102              	# sieve_extend.c:846:     for (;range_stop < block_stop;) {
 846:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 9103              		.loc 1 846 5 view .LVU3096
 9104 33cc 4C8B7C24 		mov	r15, QWORD PTR 8[rsp]	# prime, %sfp
 9104      08
 9105              	.LVL530:
 872:sieve_extend.c **** }
 9106              		.loc 1 872 5 is_stmt 1 view .LVU3097
GAS LISTING /tmp/cclewcPz.s 			page 249


 872:sieve_extend.c **** }
 9107              		.loc 1 872 5 is_stmt 0 view .LVU3098
 9108              	.LBE502:
 9109              	.LBE520:
 884:sieve_extend.c ****     prime = block.prime;
 9110              		.loc 1 884 5 is_stmt 1 view .LVU3099
 9111              	.LBB521:
 9112              	.LBI514:
 785:sieve_extend.c ****     if (size < WORD_SIZE_counter)   {
 9113              		.loc 1 785 20 view .LVU3100
 9114              	.LBB516:
 786:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 9115              		.loc 1 786 5 view .LVU3101
 9116 33d1 4C8B6308 		mov	r12, QWORD PTR 8[rbx]	# prephitmp_591, sieve_90->bits
 9117 33d5 4C892424 		mov	QWORD PTR [rsp], r12	# %sfp, prephitmp_591
 9118              	# sieve_extend.c:786:     if (size < WORD_SIZE_counter)   {
 786:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 9119              		.loc 1 786 8 is_stmt 0 view .LVU3102
 9120 33d9 0F877C00 		ja	.L667	#,
 9120      0000
 9121              	.LVL531:
 9122              	.L644:
 787:sieve_extend.c ****         return; // rapid exit for small sizes
 9123              		.loc 1 787 9 is_stmt 1 view .LVU3103
 9124 33df 488B0C24 		mov	rcx, QWORD PTR [rsp]	#, %sfp
 9125 33e3 4C89EF   		mov	rdi, r13	#, _95
 9126 33e6 E815CCFF 		call	extendSieve_smallSize	#
 9126      FF
 9127              	.LVL532:
 788:sieve_extend.c ****     }
 9128              		.loc 1 788 9 view .LVU3104
 9129 33eb E9940000 		jmp	.L668	#
 9129      00
 9130              	.LVL533:
 9131              		.p2align 4,,7
 9132              		.p2align 3
 9133              	.L859:
 788:sieve_extend.c ****     }
 9134              		.loc 1 788 9 is_stmt 0 view .LVU3105
 9135              	.LBE516:
 9136              	.LBE521:
 9137              	.LBB522:
 9138              	.LBB503:
 9139              	.LBB494:
 9140              	.LBB483:
 9141              	.LBB482:
 9142              	.LBB481:
 9143              	.LBB480:
 9144              	.LBB478:
 202:sieve_extend.c ****    }
 9145              		.loc 1 202 7 is_stmt 1 view .LVU3106
 9146              	# sieve_extend.c:202:       *index_ptr |= (mask & chopmask(range_stop));
 202:sieve_extend.c ****    }
 9147              		.loc 1 202 27 is_stmt 0 view .LVU3107
 9148 33f0 48234C24 		and	rcx, QWORD PTR 56[rsp]	# tmp309, %sfp
 9148      38
 9149              	.LVL534:
GAS LISTING /tmp/cclewcPz.s 			page 250


 9150              	# sieve_extend.c:202:       *index_ptr |= (mask & chopmask(range_stop));
 202:sieve_extend.c ****    }
 9151              		.loc 1 202 18 view .LVU3108
 9152 33f5 490908   		or	QWORD PTR [r8], rcx	# *index_ptr_330, tmp309
 9153 33f8 EBAB     		jmp	.L663	#
 9154              	.LVL535:
 9155 33fa 660F1F44 		.p2align 4,,7
 9155      0000
 9156              		.p2align 3
 9157              	.L857:
 202:sieve_extend.c ****    }
 9158              		.loc 1 202 18 view .LVU3109
 9159              	.LBE478:
 9160              	.LBE480:
 9161              	.LBE481:
 9162              	.LBE482:
 9163              	.LBE483:
 860:sieve_extend.c ****             extendSieve(bitarray, pattern_start, patternsize_bits, range_stop);
 9164              		.loc 1 860 13 is_stmt 1 view .LVU3110
 861:sieve_extend.c ****         }
 9165              		.loc 1 861 13 view .LVU3111
 9166              	.LBB484:
 9167              	.LBI484:
 785:sieve_extend.c ****     if (size < WORD_SIZE_counter)   {
 9168              		.loc 1 785 20 view .LVU3112
 9169              	.LBB485:
 786:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 9170              		.loc 1 786 5 view .LVU3113
 9171              	# sieve_extend.c:786:     if (size < WORD_SIZE_counter)   {
 786:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 9172              		.loc 1 786 8 is_stmt 0 view .LVU3114
 9173 3400 4983FE3F 		cmp	r14, 63	# patternsize_bits,
 9174 3404 0F86AB05 		jbe	.L860	#,
 9174      0000
 791:sieve_extend.c ****     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 9175              		.loc 1 791 5 is_stmt 1 view .LVU3115
 9176              	.LVL536:
 792:sieve_extend.c ****     const bitshift_t source_bit = bitindex_calc(source_start);
 9177              		.loc 1 792 5 view .LVU3116
 9178              	# sieve_extend.c:791:     const counter_t copy_start  = source_start + size;
 791:sieve_extend.c ****     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 9179              		.loc 1 791 21 is_stmt 0 view .LVU3117
 9180 340a 4F8D0C36 		lea	r9, [r14+r14]	# copy_start,
 9181              	# sieve_extend.c:793:     const bitshift_t source_bit = bitindex_calc(source_start);
 793:sieve_extend.c **** 
 9182              		.loc 1 793 22 view .LVU3118
 9183 340e 4D89F2   		mov	r10, r14	# source_bit, patternsize_bits
 9184              	# sieve_extend.c:792:     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 792:sieve_extend.c ****     const bitshift_t source_bit = bitindex_calc(source_start);
 9185              		.loc 1 792 22 view .LVU3119
 9186 3411 4183E13F 		and	r9d, 63	# copy_bit,
 9187              	.LVL537:
 793:sieve_extend.c **** 
 9188              		.loc 1 793 5 is_stmt 1 view .LVU3120
 9189              	# sieve_extend.c:793:     const bitshift_t source_bit = bitindex_calc(source_start);
 793:sieve_extend.c **** 
 9190              		.loc 1 793 22 is_stmt 0 view .LVU3121
GAS LISTING /tmp/cclewcPz.s 			page 251


 9191 3415 4183E23F 		and	r10d, 63	# source_bit,
 9192              	.LVL538:
 795:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, source_start, size, desti
 9193              		.loc 1 795 5 is_stmt 1 view .LVU3122
 9194              	# sieve_extend.c:795:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 795:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, source_start, size, desti
 9195              		.loc 1 795 13 is_stmt 0 view .LVU3123
 9196 3419 4D39D1   		cmp	r9, r10	# copy_bit, source_bit
 9197              	# sieve_extend.c:795:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 795:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, source_start, size, desti
 9198              		.loc 1 795 37 view .LVU3124
 9199 341c 4C89F9   		mov	rcx, r15	#, _68
 9200 341f 4C89F2   		mov	rdx, r14	#, patternsize_bits
 9201 3422 4C89F6   		mov	rsi, r14	#, patternsize_bits
 9202 3425 4C89EF   		mov	rdi, r13	#, _95
 9203              	# sieve_extend.c:795:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 795:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, source_start, size, desti
 9204              		.loc 1 795 13 view .LVU3125
 9205 3428 0F825401 		jb	.L861	#,
 9205      0000
 9206              	.LVL539:
 796:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 9207              		.loc 1 796 10 is_stmt 1 view .LVU3126
 9208              	# sieve_extend.c:796:     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, sou
 796:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 9209              		.loc 1 796 13 is_stmt 0 view .LVU3127
 9210 342e 0F863F01 		jbe	.L655	#,
 9210      0000
 796:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 9211              		.loc 1 796 37 is_stmt 1 view .LVU3128
 9212 3434 E887D2FF 		call	extendSieve_shiftright_base	#
 9212      FF
 9213              	.LVL540:
 796:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 9214              		.loc 1 796 37 is_stmt 0 view .LVU3129
 9215 3439 4C897424 		mov	QWORD PTR 24[rsp], r14	# %sfp, patternsize_bits
 9215      18
 9216 343e 6690     		.p2align 4,,3
 9217 3440 E961FCFF 		jmp	.L652	#
 9217      FF
 9218              	.LVL541:
 9219              	.L855:
 796:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 9220              		.loc 1 796 37 view .LVU3130
 9221 3445 4C8B7424 		mov	r14, QWORD PTR 40[rsp]	# <retval>, %sfp
 9221      28
 9222 344a 4989FF   		mov	r15, rdi	# prime, prime
 9223 344d 498B4E08 		mov	rcx, QWORD PTR 8[r14]	# prephitmp_591, sieve_90->bits
 9224 3451 48890C24 		mov	QWORD PTR [rsp], rcx	# %sfp, prephitmp_591
 9225              	.LVL542:
 9226              	.L651:
 796:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 9227              		.loc 1 796 37 view .LVU3131
 9228              	.LBE485:
 9229              	.LBE484:
 9230              	.LBE494:
 9231              	.LBE503:
GAS LISTING /tmp/cclewcPz.s 			page 252


 9232              	.LBE522:
 884:sieve_extend.c ****     prime = block.prime;
 9233              		.loc 1 884 5 is_stmt 1 view .LVU3132
 9234              	.LBB523:
 785:sieve_extend.c ****     if (size < WORD_SIZE_counter)   {
 9235              		.loc 1 785 20 view .LVU3133
 9236              	.LBB517:
 786:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 9237              		.loc 1 786 5 view .LVU3134
 9238              	# sieve_extend.c:786:     if (size < WORD_SIZE_counter)   {
 786:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 9239              		.loc 1 786 8 is_stmt 0 view .LVU3135
 9240 3455 4883FA3F 		cmp	rdx, 63	# block$pattern_size,
 9241 3459 7684     		jbe	.L644	#,
 9242              	.LVL543:
 9243              	.L667:
 791:sieve_extend.c ****     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 9244              		.loc 1 791 5 is_stmt 1 view .LVU3136
 792:sieve_extend.c ****     const bitshift_t source_bit = bitindex_calc(source_start);
 9245              		.loc 1 792 5 view .LVU3137
 9246              	# sieve_extend.c:791:     const counter_t copy_start  = source_start + size;
 791:sieve_extend.c ****     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 9247              		.loc 1 791 21 is_stmt 0 view .LVU3138
 9248 345b 488D0416 		lea	rax, [rsi+rdx]	# copy_start,
 9249              	.LVL544:
 9250              	# sieve_extend.c:793:     const bitshift_t source_bit = bitindex_calc(source_start);
 793:sieve_extend.c **** 
 9251              		.loc 1 793 22 view .LVU3139
 9252 345f 4989F4   		mov	r12, rsi	# source_bit, block$pattern_start
 9253              	# sieve_extend.c:792:     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 792:sieve_extend.c ****     const bitshift_t source_bit = bitindex_calc(source_start);
 9254              		.loc 1 792 22 view .LVU3140
 9255 3462 83E03F   		and	eax, 63	# copy_bit,
 9256              	.LVL545:
 793:sieve_extend.c **** 
 9257              		.loc 1 793 5 is_stmt 1 view .LVU3141
 9258              	# sieve_extend.c:793:     const bitshift_t source_bit = bitindex_calc(source_start);
 793:sieve_extend.c **** 
 9259              		.loc 1 793 22 is_stmt 0 view .LVU3142
 9260 3465 4183E43F 		and	r12d, 63	# source_bit,
 9261              	.LVL546:
 795:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, source_start, size, desti
 9262              		.loc 1 795 5 is_stmt 1 view .LVU3143
 9263              	# sieve_extend.c:795:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 795:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, source_start, size, desti
 9264              		.loc 1 795 13 is_stmt 0 view .LVU3144
 9265 3469 4C39E0   		cmp	rax, r12	# copy_bit, source_bit
 9266              	# sieve_extend.c:795:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 795:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, source_start, size, desti
 9267              		.loc 1 795 37 view .LVU3145
 9268 346c 4C89EF   		mov	rdi, r13	#, _95
 9269 346f 488B0C24 		mov	rcx, QWORD PTR [rsp]	#, %sfp
 9270              	# sieve_extend.c:795:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 795:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, source_start, size, desti
 9271              		.loc 1 795 13 view .LVU3146
 9272 3473 0F825705 		jb	.L862	#,
 9272      0000
GAS LISTING /tmp/cclewcPz.s 			page 253


 9273              	.LVL547:
 796:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 9274              		.loc 1 796 10 is_stmt 1 view .LVU3147
 9275              	# sieve_extend.c:796:     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, sou
 796:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 9276              		.loc 1 796 13 is_stmt 0 view .LVU3148
 9277 3479 0F871201 		ja	.L863	#,
 9277      0000
 797:sieve_extend.c **** }
 9278              		.loc 1 797 37 is_stmt 1 view .LVU3149
 9279 347f E86CE3FF 		call	extendSieve_aligned	#
 9279      FF
 9280              	.LVL548:
 9281              	.L668:
 797:sieve_extend.c **** }
 9282              		.loc 1 797 37 is_stmt 0 view .LVU3150
 9283              	.LBE517:
 9284              	.LBE523:
 885:sieve_extend.c **** 
 9285              		.loc 1 885 5 is_stmt 1 view .LVU3151
 888:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 9286              		.loc 1 888 5 view .LVU3152
 9287              	.LBB524:
 888:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 9288              		.loc 1 888 10 view .LVU3153
 9289              	# sieve_extend.c:888:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 888:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 9290              		.loc 1 888 38 is_stmt 0 view .LVU3154
 9291 3484 488B7424 		mov	rsi, QWORD PTR 48[rsp]	# blocksize, %sfp
 9291      30
 9292              	# sieve_extend.c:888:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 888:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 9293              		.loc 1 888 83 view .LVU3155
 9294 3489 488B6C24 		mov	rbp, QWORD PTR 40[rsp]	# <retval>, %sfp
 9294      28
 9295              	# sieve_extend.c:888:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 888:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 9296              		.loc 1 888 20 view .LVU3156
 9297 348e 48C74424 		mov	QWORD PTR 8[rsp], 0	# %sfp,
 9297      08000000 
 9297      00
 9298              	# sieve_extend.c:888:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 888:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 9299              		.loc 1 888 38 view .LVU3157
 9300 3497 4C8D66FF 		lea	r12, -1[rsi]	# block_stop,
 9301              	.LVL549:
 888:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 9302              		.loc 1 888 63 is_stmt 1 view .LVU3158
 9303              	# sieve_extend.c:888:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 888:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 9304              		.loc 1 888 83 is_stmt 0 view .LVU3159
 9305 349b 488B5508 		mov	rdx, QWORD PTR 8[rbp]	# _8, sieve_90->bits
 9306              	.LVL550:
 9307 349f 90       		.p2align 4
 9308              		.p2align 3
 9309              	.L674:
 889:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime);
GAS LISTING /tmp/cclewcPz.s 			page 254


 9310              		.loc 1 889 9 is_stmt 1 view .LVU3160
 9311 34a0 4C39E2   		cmp	rdx, r12	# _8, block_stop
 9312 34a3 4C0F46E2 		cmovbe	r12, rdx	# _8,, block_stop
 9313              	.LVL551:
 889:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime);
 9314              		.loc 1 889 9 is_stmt 0 view .LVU3161
 9315 34a7 4C892424 		mov	QWORD PTR [rsp], r12	# %sfp, block_stop
 9316              	.L854:
 9317              	.LVL552:
 890:sieve_extend.c ****         sieve_block_stripe(bitarray, block_start, block_stop, prime);
 9318              		.loc 1 890 9 is_stmt 1 view .LVU3162
 9319              	.LBB525:
 9320              	.LBI525:
 123:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 9321              		.loc 1 123 25 view .LVU3163
 9322              	.LBB526:
 124:sieve_extend.c ****     return index;
 9323              		.loc 1 124 5 view .LVU3164
 124:sieve_extend.c ****     return index;
 9324              		.loc 1 124 11 view .LVU3165
 9325              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9326              		.loc 1 124 21 is_stmt 0 view .LVU3166
 9327 34ab 4C89FF   		mov	rdi, r15	# tmp311, prime
 9328 34ae 48C1EF06 		shr	rdi, 6	# tmp311,
 9329              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9330              		.loc 1 124 12 view .LVU3167
 9331 34b2 4D8B44FD 		mov	r8, QWORD PTR 0[r13+rdi*8]	# *_19,* _95
 9331      00
 9332              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9333              		.loc 1 124 11 view .LVU3168
 9334 34b7 4D0FA3F8 		bt	r8, r15	# *_19, prime
 9335 34bb 0F83DF00 		jnc	.L671	#,
 9335      0000
 124:sieve_extend.c ****     return index;
 9336              		.loc 1 124 58 is_stmt 1 view .LVU3169
 9337              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9338              		.loc 1 124 63 is_stmt 0 view .LVU3170
 9339 34c1 4D8D5701 		lea	r10, 1[r15]	# tmp379,
 9340              	.LVL553:
 9341              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9342              		.loc 1 124 21 view .LVU3171
 9343 34c5 4C89D3   		mov	rbx, r10	# tmp316, prime
 9344              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9345              		.loc 1 124 63 view .LVU3172
 9346 34c8 4D89D7   		mov	r15, r10	# prime, tmp379
 124:sieve_extend.c ****     return index;
 9347              		.loc 1 124 11 is_stmt 1 view .LVU3173
 9348              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9349              		.loc 1 124 21 is_stmt 0 view .LVU3174
 9350 34cb 48C1EB06 		shr	rbx, 6	# tmp316,
GAS LISTING /tmp/cclewcPz.s 			page 255


 9351              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9352              		.loc 1 124 12 view .LVU3175
 9353 34cf 4D8B4CDD 		mov	r9, QWORD PTR 0[r13+rbx*8]	# *_33, *_33
 9353      00
 9354              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9355              		.loc 1 124 11 view .LVU3176
 9356 34d4 4D0FA3D1 		bt	r9, r10	# *_33, prime
 9357 34d8 0F83C200 		jnc	.L671	#,
 9357      0000
 124:sieve_extend.c ****     return index;
 9358              		.loc 1 124 58 is_stmt 1 view .LVU3177
 9359              	.LVL554:
 9360              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9361              		.loc 1 124 63 is_stmt 0 view .LVU3178
 9362 34de 4983C701 		add	r15, 1	# prime,
 9363              	.LVL555:
 124:sieve_extend.c ****     return index;
 9364              		.loc 1 124 11 is_stmt 1 view .LVU3179
 9365              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9366              		.loc 1 124 21 is_stmt 0 view .LVU3180
 9367 34e2 4D89FB   		mov	r11, r15	# tmp417, prime
 9368 34e5 49C1EB06 		shr	r11, 6	# tmp417,
 9369              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9370              		.loc 1 124 12 view .LVU3181
 9371 34e9 4F8B74DD 		mov	r14, QWORD PTR 0[r13+r11*8]	# *_33, *_33
 9371      00
 9372              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9373              		.loc 1 124 11 view .LVU3182
 9374 34ee 4D0FA3FE 		bt	r14, r15	# *_33, prime
 9375 34f2 0F83A800 		jnc	.L671	#,
 9375      0000
 124:sieve_extend.c ****     return index;
 9376              		.loc 1 124 58 is_stmt 1 view .LVU3183
 9377              	.LVL556:
 9378              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9379              		.loc 1 124 63 is_stmt 0 view .LVU3184
 9380 34f8 4D8D7A02 		lea	r15, 2[r10]	# prime,
 9381              	.LVL557:
 124:sieve_extend.c ****     return index;
 9382              		.loc 1 124 11 is_stmt 1 view .LVU3185
 9383              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9384              		.loc 1 124 21 is_stmt 0 view .LVU3186
 9385 34fc 4C89F9   		mov	rcx, r15	# tmp421, prime
 9386 34ff 48C1E906 		shr	rcx, 6	# tmp421,
 9387              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9388              		.loc 1 124 12 view .LVU3187
 9389 3503 498B44CD 		mov	rax, QWORD PTR 0[r13+rcx*8]	# *_33, *_33
 9389      00
GAS LISTING /tmp/cclewcPz.s 			page 256


 9390              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9391              		.loc 1 124 11 view .LVU3188
 9392 3508 4C0FA3F8 		bt	rax, r15	# *_33, prime
 9393 350c 0F838E00 		jnc	.L671	#,
 9393      0000
 124:sieve_extend.c ****     return index;
 9394              		.loc 1 124 58 is_stmt 1 view .LVU3189
 9395              	.LVL558:
 9396              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9397              		.loc 1 124 63 is_stmt 0 view .LVU3190
 9398 3512 4D8D7A03 		lea	r15, 3[r10]	# prime,
 9399              	.LVL559:
 124:sieve_extend.c ****     return index;
 9400              		.loc 1 124 11 is_stmt 1 view .LVU3191
 9401              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9402              		.loc 1 124 21 is_stmt 0 view .LVU3192
 9403 3516 4D89FC   		mov	r12, r15	# tmp425, prime
 9404 3519 49C1EC06 		shr	r12, 6	# tmp425,
 9405              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9406              		.loc 1 124 12 view .LVU3193
 9407 351d 4B8B74E5 		mov	rsi, QWORD PTR 0[r13+r12*8]	# *_33, *_33
 9407      00
 9408              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9409              		.loc 1 124 11 view .LVU3194
 9410 3522 4C0FA3FE 		bt	rsi, r15	# *_33, prime
 9411 3526 7378     		jnc	.L671	#,
 124:sieve_extend.c ****     return index;
 9412              		.loc 1 124 58 is_stmt 1 view .LVU3195
 9413              	.LVL560:
 9414              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9415              		.loc 1 124 63 is_stmt 0 view .LVU3196
 9416 3528 4D8D7A04 		lea	r15, 4[r10]	# prime,
 9417              	.LVL561:
 124:sieve_extend.c ****     return index;
 9418              		.loc 1 124 11 is_stmt 1 view .LVU3197
 9419              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9420              		.loc 1 124 21 is_stmt 0 view .LVU3198
 9421 352c 4C89FD   		mov	rbp, r15	# tmp429, prime
 9422 352f 48C1ED06 		shr	rbp, 6	# tmp429,
 9423              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9424              		.loc 1 124 12 view .LVU3199
 9425 3533 498B7CED 		mov	rdi, QWORD PTR 0[r13+rbp*8]	# *_33, *_33
 9425      00
 9426              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9427              		.loc 1 124 11 view .LVU3200
 9428 3538 4C0FA3FF 		bt	rdi, r15	# *_33, prime
 9429 353c 7362     		jnc	.L671	#,
 124:sieve_extend.c ****     return index;
GAS LISTING /tmp/cclewcPz.s 			page 257


 9430              		.loc 1 124 58 is_stmt 1 view .LVU3201
 9431              	.LVL562:
 9432              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9433              		.loc 1 124 63 is_stmt 0 view .LVU3202
 9434 353e 4D8D7A05 		lea	r15, 5[r10]	# prime,
 9435              	.LVL563:
 124:sieve_extend.c ****     return index;
 9436              		.loc 1 124 11 is_stmt 1 view .LVU3203
 9437              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9438              		.loc 1 124 21 is_stmt 0 view .LVU3204
 9439 3542 4D89F8   		mov	r8, r15	# tmp433, prime
 9440 3545 49C1E806 		shr	r8, 6	# tmp433,
 9441              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9442              		.loc 1 124 12 view .LVU3205
 9443 3549 4B8B5CC5 		mov	rbx, QWORD PTR 0[r13+r8*8]	# *_33, *_33
 9443      00
 9444              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9445              		.loc 1 124 11 view .LVU3206
 9446 354e 4C0FA3FB 		bt	rbx, r15	# *_33, prime
 9447 3552 734C     		jnc	.L671	#,
 124:sieve_extend.c ****     return index;
 9448              		.loc 1 124 58 is_stmt 1 view .LVU3207
 9449              	.LVL564:
 9450              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9451              		.loc 1 124 63 is_stmt 0 view .LVU3208
 9452 3554 4D8D7A06 		lea	r15, 6[r10]	# prime,
 9453              	.LVL565:
 124:sieve_extend.c ****     return index;
 9454              		.loc 1 124 11 is_stmt 1 view .LVU3209
 9455              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9456              		.loc 1 124 21 is_stmt 0 view .LVU3210
 9457 3558 4D89F9   		mov	r9, r15	# tmp437, prime
 9458 355b 49C1E906 		shr	r9, 6	# tmp437,
 9459              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9460              		.loc 1 124 12 view .LVU3211
 9461 355f 4F8B5CCD 		mov	r11, QWORD PTR 0[r13+r9*8]	# *_33, *_33
 9461      00
 9462              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9463              		.loc 1 124 11 view .LVU3212
 9464 3564 4D0FA3FB 		bt	r11, r15	# *_33, prime
 9465 3568 7336     		jnc	.L671	#,
 124:sieve_extend.c ****     return index;
 9466              		.loc 1 124 58 is_stmt 1 view .LVU3213
 9467              	.LVL566:
 9468              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 9469              		.loc 1 124 63 is_stmt 0 view .LVU3214
 9470 356a 4D8D7A07 		lea	r15, 7[r10]	# prime,
 9471              	.LVL567:
GAS LISTING /tmp/cclewcPz.s 			page 258


 124:sieve_extend.c ****     return index;
 9472              		.loc 1 124 11 is_stmt 1 view .LVU3215
 9473 356e E938FFFF 		jmp	.L854	#
 9473      FF
 9474              	.LVL568:
 9475              	.L655:
 124:sieve_extend.c ****     return index;
 9476              		.loc 1 124 11 is_stmt 0 view .LVU3216
 9477              	.LBE526:
 9478              	.LBE525:
 9479              	.LBE524:
 9480              	.LBB558:
 9481              	.LBB504:
 9482              	.LBB495:
 9483              	.LBB488:
 9484              	.LBB486:
 797:sieve_extend.c **** }
 9485              		.loc 1 797 37 is_stmt 1 view .LVU3217
 9486 3573 E878E2FF 		call	extendSieve_aligned	#
 9486      FF
 9487              	.LVL569:
 797:sieve_extend.c **** }
 9488              		.loc 1 797 37 is_stmt 0 view .LVU3218
 9489 3578 4C897424 		mov	QWORD PTR 24[rsp], r14	# %sfp, patternsize_bits
 9489      18
 9490 357d E924FBFF 		jmp	.L652	#
 9490      FF
 9491              	.LVL570:
 9492              	.L861:
 795:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, source_start, size, desti
 9493              		.loc 1 795 37 is_stmt 1 view .LVU3219
 9494 3582 E8E9E7FF 		call	extendSieve_shiftleft	#
 9494      FF
 9495              	.LVL571:
 795:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, source_start, size, desti
 9496              		.loc 1 795 37 is_stmt 0 view .LVU3220
 9497 3587 4C897424 		mov	QWORD PTR 24[rsp], r14	# %sfp, patternsize_bits
 9497      18
 9498 358c E915FBFF 		jmp	.L652	#
 9498      FF
 9499              	.LVL572:
 9500              	.L863:
 795:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, source_start, size, desti
 9501              		.loc 1 795 37 view .LVU3221
 9502              	.LBE486:
 9503              	.LBE488:
 9504              	.LBE495:
 9505              	.LBE504:
 9506              	.LBE558:
 9507              	.LBB559:
 9508              	.LBB518:
 796:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 9509              		.loc 1 796 37 is_stmt 1 view .LVU3222
 9510 3591 E82AD1FF 		call	extendSieve_shiftright_base	#
 9510      FF
 9511              	.LVL573:
 796:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
GAS LISTING /tmp/cclewcPz.s 			page 259


 9512              		.loc 1 796 37 is_stmt 0 view .LVU3223
 9513              		.p2align 4,,3
 9514 3596 E9E9FEFF 		jmp	.L668	#
 9514      FF
 9515              	.LVL574:
 9516 359b 0F1F4400 		.p2align 4,,7
 9516      00
 9517              		.p2align 3
 9518              	.L671:
 796:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 9519              		.loc 1 796 37 view .LVU3224
 9520              	.LBE518:
 9521              	.LBE559:
 9522              	.LBB560:
 9523              	.LBB528:
 9524              	.LBB527:
 125:sieve_extend.c **** }
 9525              		.loc 1 125 5 is_stmt 1 view .LVU3225
 125:sieve_extend.c **** }
 9526              		.loc 1 125 5 is_stmt 0 view .LVU3226
 9527              	.LBE527:
 9528              	.LBE528:
 891:sieve_extend.c ****     } 
 9529              		.loc 1 891 9 is_stmt 1 view .LVU3227
 9530              	.LBB529:
 9531              	.LBI529:
 800:sieve_extend.c ****     counter_t prime = prime_start;
 9532              		.loc 1 800 13 view .LVU3228
 9533              	.LBB530:
 801:sieve_extend.c ****     counter_t start = 0;
 9534              		.loc 1 801 5 view .LVU3229
 802:sieve_extend.c ****     counter_t step  = prime * 2 + 1;
 9535              		.loc 1 802 5 view .LVU3230
 803:sieve_extend.c **** 
 9536              		.loc 1 803 5 view .LVU3231
 9537              	# sieve_extend.c:803:     counter_t step  = prime * 2 + 1;
 803:sieve_extend.c **** 
 9538              		.loc 1 803 15 is_stmt 0 view .LVU3232
 9539 35a0 4F8D543F 		lea	r10, 1[r15+r15]	# step,
 9539      01
 9540              	.LVL575:
 805:sieve_extend.c ****     
 9541              		.loc 1 805 5 is_stmt 1 view .LVU3233
 807:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 9542              		.loc 1 807 5 view .LVU3234
 807:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 9543              		.loc 1 807 11 view .LVU3235
 9544              	# sieve_extend.c:807:     while (prime*step <= block_stop) {
 807:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 9545              		.loc 1 807 17 is_stmt 0 view .LVU3236
 9546 35a5 4D89D6   		mov	r14, r10	# tmp322, step
 9547 35a8 4D0FAFF7 		imul	r14, r15	# tmp322, prime
 9548              	# sieve_extend.c:807:     while (prime*step <= block_stop) {
 807:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 9549              		.loc 1 807 11 view .LVU3237
 9550 35ac 4C393424 		cmp	QWORD PTR [rsp], r14	# %sfp, tmp322
 9551 35b0 0F829D02 		jb	.L691	#,
GAS LISTING /tmp/cclewcPz.s 			page 260


 9551      0000
 9552              	.LBB531:
 9553              	.LBB532:
 9554              	.LBB533:
 9555              	.LBB534:
 9556              	.LBB535:
 9557              	# sieve_extend.c:176:    const counter_t range_stop_word = wordindex(range_stop);
 176:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 9558              		.loc 1 176 20 view .LVU3238
 9559 35b6 488B1424 		mov	rdx, QWORD PTR [rsp]	# block_stop, %sfp
 9560              	# sieve_extend.c:202:       *index_ptr |= (mask & chopmask(range_stop));
 202:sieve_extend.c ****    }
 9561              		.loc 1 202 29 view .LVU3239
 9562 35ba 48C7C0FF 		mov	rax, -1	# tmp644,
 9562      FFFFFF
 9563 35c1 4C897C24 		mov	QWORD PTR 32[rsp], r15	# %sfp, prime
 9563      20
 9564 35c6 4D89F8   		mov	r8, r15	# index, prime
 9565              	# sieve_extend.c:176:    const counter_t range_stop_word = wordindex(range_stop);
 176:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 9566              		.loc 1 176 20 view .LVU3240
 9567 35c9 4889D1   		mov	rcx, rdx	# range_stop_word, block_stop
 9568              	# sieve_extend.c:202:       *index_ptr |= (mask & chopmask(range_stop));
 202:sieve_extend.c ****    }
 9569              		.loc 1 202 29 view .LVU3241
 9570 35cc F7D2     		not	edx	# tmp324
 9571              	# sieve_extend.c:176:    const counter_t range_stop_word = wordindex(range_stop);
 176:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 9572              		.loc 1 176 20 view .LVU3242
 9573 35ce 48C1E906 		shr	rcx, 6	# range_stop_word,
 9574              	# sieve_extend.c:202:       *index_ptr |= (mask & chopmask(range_stop));
 202:sieve_extend.c ****    }
 9575              		.loc 1 202 29 view .LVU3243
 9576 35d2 C462EBF7 		shrx	r12, rax, rdx	# _265, tmp644, tmp324
 9576      E0
 9577              	# sieve_extend.c:176:    const counter_t range_stop_word = wordindex(range_stop);
 176:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 9578              		.loc 1 176 20 view .LVU3244
 9579 35d7 48894C24 		mov	QWORD PTR 24[rsp], rcx	# %sfp, range_stop_word
 9579      18
 9580              	# sieve_extend.c:195:    register const bitword_t* __restrict range_stop_ptr = &bitarray[(range_sto
 195:sieve_extend.c ****    while likely(index_ptr < range_stop_ptr) {
 9581              		.loc 1 195 41 view .LVU3245
 9582 35dc 498D5CCD 		lea	rbx, 0[r13+rcx*8]	# range_stop_ptr,
 9582      00
 9583              	# sieve_extend.c:202:       *index_ptr |= (mask & chopmask(range_stop));
 202:sieve_extend.c ****    }
 9584              		.loc 1 202 29 view .LVU3246
 9585 35e1 4C896424 		mov	QWORD PTR 16[rsp], r12	# %sfp, _265
 9585      10
 9586              	.LVL576:
 9587 35e6 662E0F1F 		.p2align 4
 9587      84000000 
 9587      0000
 9588              		.p2align 3
 9589              	.L690:
 202:sieve_extend.c ****    }
GAS LISTING /tmp/cclewcPz.s 			page 261


 9590              		.loc 1 202 29 view .LVU3247
 9591              	.LBE535:
 9592              	.LBE534:
 9593              	.LBE533:
 9594              	.LBE532:
 9595              	.LBE531:
 808:sieve_extend.c ****             start = block_start + prime + prime - ((block_start + prime) % step);
 9596              		.loc 1 808 9 is_stmt 1 view .LVU3248
 9597              	# sieve_extend.c:808:         if likely(block_start >= (prime + 1)) 
 808:sieve_extend.c ****             start = block_start + prime + prime - ((block_start + prime) % step);
 9598              		.loc 1 808 12 is_stmt 0 view .LVU3249
 9599 35f0 488B4424 		mov	rax, QWORD PTR 8[rsp]	# block_start, %sfp
 9599      08
 9600 35f5 498D6801 		lea	rbp, 1[r8]	# _159,
 9601 35f9 4839E8   		cmp	rax, rbp	# block_start, _159
 9602 35fc 0F828E03 		jb	.L676	#,
 9602      0000
 809:sieve_extend.c ****         else 
 9603              		.loc 1 809 13 is_stmt 1 view .LVU3250
 9604              	# sieve_extend.c:809:             start = block_start + prime + prime - ((block_start + prime) % st
 809:sieve_extend.c ****         else 
 9605              		.loc 1 809 33 is_stmt 0 view .LVU3251
 9606 3602 4C01C0   		add	rax, r8	# _163, index
 9607              	# sieve_extend.c:809:             start = block_start + prime + prime - ((block_start + prime) % st
 809:sieve_extend.c ****         else 
 9608              		.loc 1 809 74 view .LVU3252
 9609 3605 31D2     		xor	edx, edx	# tmp329
 9610              	# sieve_extend.c:809:             start = block_start + prime + prime - ((block_start + prime) % st
 809:sieve_extend.c ****         else 
 9611              		.loc 1 809 41 view .LVU3253
 9612 3607 4A8D3400 		lea	rsi, [rax+r8]	# tmp327,
 9613              	# sieve_extend.c:809:             start = block_start + prime + prime - ((block_start + prime) % st
 809:sieve_extend.c ****         else 
 9614              		.loc 1 809 74 view .LVU3254
 9615 360b 49F7F2   		div	r10	# step
 9616              	# sieve_extend.c:809:             start = block_start + prime + prime - ((block_start + prime) % st
 809:sieve_extend.c ****         else 
 9617              		.loc 1 809 19 view .LVU3255
 9618 360e 4829D6   		sub	rsi, rdx	# index, tmp329
 9619              	.LVL577:
 9620              	.L677:
 813:sieve_extend.c ****             setBitsTrue_largeRange_vector(bitarray, start, step, block_stop);
 9621              		.loc 1 813 9 is_stmt 1 view .LVU3256
 9622 3611 4989EB   		mov	r11, rbp	# tmp332, _159
 9623 3614 49C1EB06 		shr	r11, 6	# tmp332,
 9624 3618 49C1E303 		sal	r11, 3	# _551,
 9625              	# sieve_extend.c:813:         if (step < VECTORSTEP_FASTER) {
 813:sieve_extend.c ****             setBitsTrue_largeRange_vector(bitarray, start, step, block_stop);
 9626              		.loc 1 813 12 is_stmt 0 view .LVU3257
 9627 361c 4C391500 		cmp	QWORD PTR global_VECTORSTEP_FASTER[rip], r10	# global_VECTORSTEP_FASTER, step
 9627      000000
 9628 3623 4F8D641D 		lea	r12, 0[r13+r11]	# _552,
 9628      00
 9629 3628 0F876A02 		ja	.L864	#,
 9629      0000
 818:sieve_extend.c ****             prime = searchBitFalse_longRange(bitarray, prime+1 );
 9630              		.loc 1 818 13 is_stmt 1 view .LVU3258
GAS LISTING /tmp/cclewcPz.s 			page 262


 9631              	.LVL578:
 9632              	.LBB546:
 9633              	.LBI531:
 393:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange (%ju occurances
 9634              		.loc 1 393 20 view .LVU3259
 9635              	.LBB544:
 394:sieve_extend.c ****     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * step;
 9636              		.loc 1 394 5 view .LVU3260
 395:sieve_extend.c **** 
 9637              		.loc 1 395 5 view .LVU3261
 9638              	# sieve_extend.c:395:     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * st
 395:sieve_extend.c **** 
 9639              		.loc 1 395 74 is_stmt 0 view .LVU3262
 9640 362e 4D89D6   		mov	r14, r10	# tmp342, step
 9641 3631 49C1E606 		sal	r14, 6	# tmp342,
 9642              	# sieve_extend.c:395:     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * st
 395:sieve_extend.c **** 
 9643              		.loc 1 395 21 view .LVU3263
 9644 3635 4901F6   		add	r14, rsi	# range_stop_unique, index
 9645              	.LVL579:
 9646              	.LBB542:
 399:sieve_extend.c ****         #if __APPLE__
 9647              		.loc 1 399 10 is_stmt 1 view .LVU3264
 399:sieve_extend.c ****         #if __APPLE__
 9648              		.loc 1 399 50 view .LVU3265
 9649              	# sieve_extend.c:399:     for (register counter_t index = range_start; index < range_stop_unique; i
 399:sieve_extend.c ****         #if __APPLE__
 9650              		.loc 1 399 5 is_stmt 0 view .LVU3266
 9651 3638 4C39F6   		cmp	rsi, r14	# index, range_stop_unique
 9652 363b 0F83C401 		jnb	.L689	#,
 9652      0000
 9653              	.LBB539:
 9654              	.LBB536:
 9655              	# sieve_extend.c:178:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 178:sieve_extend.c **** 
 9656              		.loc 1 178 133 view .LVU3267
 9657 3641 4C8B7C24 		mov	r15, QWORD PTR 24[rsp]	# range_stop_word, %sfp
 9657      18
 9658              	# sieve_extend.c:178:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 178:sieve_extend.c **** 
 9659              		.loc 1 178 110 view .LVU3268
 9660 3646 4F8D0492 		lea	r8, [r10+r10*4]	# tmp351,
 9661              	# sieve_extend.c:184:        index_ptr+=step;
 184:sieve_extend.c ****        *index_ptr |= mask;
 9662              		.loc 1 184 17 view .LVU3269
 9663 364a 4A8D14D5 		lea	rdx, 0[0+r10*8]	# _233,
 9663      00000000 
 9664              	# sieve_extend.c:178:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 178:sieve_extend.c **** 
 9665              		.loc 1 178 133 view .LVU3270
 9666 3652 4C89FF   		mov	rdi, r15	# tmp353, range_stop_word
 9667 3655 4C29C7   		sub	rdi, r8	# tmp353, tmp351
 9668              	# sieve_extend.c:178:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 178:sieve_extend.c **** 
 9669              		.loc 1 178 53 view .LVU3271
 9670 3658 4D39C7   		cmp	r15, r8	# range_stop_word, tmp351
 9671 365b 4D8D4CFD 		lea	r9, 0[r13+rdi*8]	# tmp355,
GAS LISTING /tmp/cclewcPz.s 			page 263


 9671      00
 9672 3660 4D89D7   		mov	r15, r10	# _579, step
 9673 3663 4D0F46CD 		cmovbe	r9, r13	# _95,, fast_loop_ptr
 9674 3667 49C1E003 		sal	r8, 3	# tmp359,
 9675 366b 49C1E704 		sal	r15, 4	# _579,
 9676              	.LVL580:
 9677 366f 90       		.p2align 4
 9678              		.p2align 3
 9679              	.L688:
 178:sieve_extend.c **** 
 9680              		.loc 1 178 53 view .LVU3272
 9681              	.LBE536:
 9682              	.LBE539:
 403:sieve_extend.c ****         #endif
 9683              		.loc 1 403 13 is_stmt 1 view .LVU3273
 9684 3670 4889F0   		mov	rax, rsi	# tmp362, index
 9685 3673 B9010000 		mov	ecx, 1	# tmp654,
 9685      00
 9686 3678 48C1E806 		shr	rax, 6	# tmp362,
 9687 367c C4E2C9F7 		shlx	rcx, rcx, rsi	# _218, tmp654, index
 9687      C9
 9688              	.LVL581:
 9689              	.LBB540:
 9690              	.LBI534:
 175:sieve_extend.c ****    const counter_t range_stop_word = wordindex(range_stop);
 9691              		.loc 1 175 20 view .LVU3274
 9692              	.LBB537:
 176:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 9693              		.loc 1 176 4 view .LVU3275
 177:sieve_extend.c ****    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_stop
 9694              		.loc 1 177 4 view .LVU3276
 9695              	# sieve_extend.c:177:    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(
 177:sieve_extend.c ****    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_stop
 9696              		.loc 1 177 78 is_stmt 0 view .LVU3277
 9697 3681 498D44C5 		lea	rax, 0[r13+rax*8]	# index_ptr,
 9697      00
 9698              	.LVL582:
 178:sieve_extend.c **** 
 9699              		.loc 1 178 4 is_stmt 1 view .LVU3278
 182:sieve_extend.c ****        *index_ptr |= mask;
 9700              		.loc 1 182 10 view .LVU3279
 9701 3686 4C39C8   		cmp	rax, r9	# index_ptr, fast_loop_ptr
 9702 3689 0F830101 		jnb	.L683	#,
 9702      0000
 182:sieve_extend.c ****        *index_ptr |= mask;
 9703              		.loc 1 182 10 is_stmt 0 view .LVU3280
 9704 368f 4A8D3C38 		lea	rdi, [rax+r15]	# ivtmp.473,
 9705              	.L684:
 183:sieve_extend.c ****        index_ptr+=step;
 9706              		.loc 1 183 8 is_stmt 1 view .LVU3281
 9707              	# sieve_extend.c:183:        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 9708              		.loc 1 183 19 is_stmt 0 view .LVU3282
 9709 3693 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_259, offset: 0B], _218
 184:sieve_extend.c ****        *index_ptr |= mask;
 9710              		.loc 1 184 8 is_stmt 1 view .LVU3283
 9711              	.LVL583:
GAS LISTING /tmp/cclewcPz.s 			page 264


 185:sieve_extend.c ****        index_ptr+=step;
 9712              		.loc 1 185 8 view .LVU3284
 9713              	# sieve_extend.c:185:        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 9714              		.loc 1 185 19 is_stmt 0 view .LVU3285
 9715 3696 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_259, index: _233, offset: 0B], _218
 186:sieve_extend.c ****        *index_ptr |= mask;
 9716              		.loc 1 186 8 is_stmt 1 view .LVU3286
 9717              	.LVL584:
 187:sieve_extend.c ****        index_ptr+=step;
 9718              		.loc 1 187 8 view .LVU3287
 9719              	# sieve_extend.c:187:        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 9720              		.loc 1 187 19 is_stmt 0 view .LVU3288
 9721 369a 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _573, offset: 0B], _218
 188:sieve_extend.c ****        *index_ptr |= mask;
 9722              		.loc 1 188 8 is_stmt 1 view .LVU3289
 9723              	.LVL585:
 189:sieve_extend.c ****        index_ptr+=step;
 9724              		.loc 1 189 8 view .LVU3290
 9725              	# sieve_extend.c:189:        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 9726              		.loc 1 189 19 is_stmt 0 view .LVU3291
 9727 369d 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _573, index: _233, offset: 0B], _218
 190:sieve_extend.c ****        *index_ptr |= mask;
 9728              		.loc 1 190 8 is_stmt 1 view .LVU3292
 9729              	.LVL586:
 191:sieve_extend.c ****        index_ptr+=step;
 9730              		.loc 1 191 8 view .LVU3293
 9731 36a1 4C01C7   		add	rdi, r8	# ivtmp.473, tmp359
 9732              	# sieve_extend.c:191:        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 9733              		.loc 1 191 19 is_stmt 0 view .LVU3294
 9734 36a4 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_259, index: _233, step: 4, offset: 0B], _218
 192:sieve_extend.c ****    }
 9735              		.loc 1 192 8 is_stmt 1 view .LVU3295
 9736 36a8 4C01C0   		add	rax, r8	# index_ptr, tmp359
 9737              	.LVL587:
 182:sieve_extend.c ****        *index_ptr |= mask;
 9738              		.loc 1 182 10 view .LVU3296
 9739 36ab 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 9740 36ae 0F86DC00 		jbe	.L683	#,
 9740      0000
 183:sieve_extend.c ****        index_ptr+=step;
 9741              		.loc 1 183 8 view .LVU3297
 9742              	# sieve_extend.c:183:        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 9743              		.loc 1 183 19 is_stmt 0 view .LVU3298
 9744 36b4 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_259, offset: 0B], _218
 184:sieve_extend.c ****        *index_ptr |= mask;
 9745              		.loc 1 184 8 is_stmt 1 view .LVU3299
 9746              	.LVL588:
 185:sieve_extend.c ****        index_ptr+=step;
 9747              		.loc 1 185 8 view .LVU3300
 9748              	# sieve_extend.c:185:        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 9749              		.loc 1 185 19 is_stmt 0 view .LVU3301
GAS LISTING /tmp/cclewcPz.s 			page 265


 9750 36b7 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_259, index: _233, offset: 0B], _218
 186:sieve_extend.c ****        *index_ptr |= mask;
 9751              		.loc 1 186 8 is_stmt 1 view .LVU3302
 9752              	.LVL589:
 187:sieve_extend.c ****        index_ptr+=step;
 9753              		.loc 1 187 8 view .LVU3303
 9754              	# sieve_extend.c:187:        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 9755              		.loc 1 187 19 is_stmt 0 view .LVU3304
 9756 36bb 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _573, offset: 0B], _218
 188:sieve_extend.c ****        *index_ptr |= mask;
 9757              		.loc 1 188 8 is_stmt 1 view .LVU3305
 9758              	.LVL590:
 189:sieve_extend.c ****        index_ptr+=step;
 9759              		.loc 1 189 8 view .LVU3306
 9760              	# sieve_extend.c:189:        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 9761              		.loc 1 189 19 is_stmt 0 view .LVU3307
 9762 36be 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _573, index: _233, offset: 0B], _218
 190:sieve_extend.c ****        *index_ptr |= mask;
 9763              		.loc 1 190 8 is_stmt 1 view .LVU3308
 9764              	.LVL591:
 191:sieve_extend.c ****        index_ptr+=step;
 9765              		.loc 1 191 8 view .LVU3309
 9766 36c2 4C01C7   		add	rdi, r8	# ivtmp.473, tmp359
 9767              	# sieve_extend.c:191:        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 9768              		.loc 1 191 19 is_stmt 0 view .LVU3310
 9769 36c5 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_259, index: _233, step: 4, offset: 0B], _218
 192:sieve_extend.c ****    }
 9770              		.loc 1 192 8 is_stmt 1 view .LVU3311
 9771 36c9 4C01C0   		add	rax, r8	# index_ptr, tmp359
 9772              	.LVL592:
 182:sieve_extend.c ****        *index_ptr |= mask;
 9773              		.loc 1 182 10 view .LVU3312
 9774 36cc 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 9775 36cf 0F86BB00 		jbe	.L683	#,
 9775      0000
 183:sieve_extend.c ****        index_ptr+=step;
 9776              		.loc 1 183 8 view .LVU3313
 9777              	# sieve_extend.c:183:        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 9778              		.loc 1 183 19 is_stmt 0 view .LVU3314
 9779 36d5 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_259, offset: 0B], _218
 184:sieve_extend.c ****        *index_ptr |= mask;
 9780              		.loc 1 184 8 is_stmt 1 view .LVU3315
 9781              	.LVL593:
 185:sieve_extend.c ****        index_ptr+=step;
 9782              		.loc 1 185 8 view .LVU3316
 9783              	# sieve_extend.c:185:        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 9784              		.loc 1 185 19 is_stmt 0 view .LVU3317
 9785 36d8 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_259, index: _233, offset: 0B], _218
 186:sieve_extend.c ****        *index_ptr |= mask;
 9786              		.loc 1 186 8 is_stmt 1 view .LVU3318
 9787              	.LVL594:
 187:sieve_extend.c ****        index_ptr+=step;
GAS LISTING /tmp/cclewcPz.s 			page 266


 9788              		.loc 1 187 8 view .LVU3319
 9789              	# sieve_extend.c:187:        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 9790              		.loc 1 187 19 is_stmt 0 view .LVU3320
 9791 36dc 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _573, offset: 0B], _218
 188:sieve_extend.c ****        *index_ptr |= mask;
 9792              		.loc 1 188 8 is_stmt 1 view .LVU3321
 9793              	.LVL595:
 189:sieve_extend.c ****        index_ptr+=step;
 9794              		.loc 1 189 8 view .LVU3322
 9795              	# sieve_extend.c:189:        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 9796              		.loc 1 189 19 is_stmt 0 view .LVU3323
 9797 36df 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _573, index: _233, offset: 0B], _218
 190:sieve_extend.c ****        *index_ptr |= mask;
 9798              		.loc 1 190 8 is_stmt 1 view .LVU3324
 9799              	.LVL596:
 191:sieve_extend.c ****        index_ptr+=step;
 9800              		.loc 1 191 8 view .LVU3325
 9801 36e3 4C01C7   		add	rdi, r8	# ivtmp.473, tmp359
 9802              	# sieve_extend.c:191:        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 9803              		.loc 1 191 19 is_stmt 0 view .LVU3326
 9804 36e6 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_259, index: _233, step: 4, offset: 0B], _218
 192:sieve_extend.c ****    }
 9805              		.loc 1 192 8 is_stmt 1 view .LVU3327
 9806 36ea 4C01C0   		add	rax, r8	# index_ptr, tmp359
 9807              	.LVL597:
 182:sieve_extend.c ****        *index_ptr |= mask;
 9808              		.loc 1 182 10 view .LVU3328
 9809 36ed 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 9810 36f0 0F869A00 		jbe	.L683	#,
 9810      0000
 183:sieve_extend.c ****        index_ptr+=step;
 9811              		.loc 1 183 8 view .LVU3329
 9812              	# sieve_extend.c:183:        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 9813              		.loc 1 183 19 is_stmt 0 view .LVU3330
 9814 36f6 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_259, offset: 0B], _218
 184:sieve_extend.c ****        *index_ptr |= mask;
 9815              		.loc 1 184 8 is_stmt 1 view .LVU3331
 9816              	.LVL598:
 185:sieve_extend.c ****        index_ptr+=step;
 9817              		.loc 1 185 8 view .LVU3332
 9818              	# sieve_extend.c:185:        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 9819              		.loc 1 185 19 is_stmt 0 view .LVU3333
 9820 36f9 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_259, index: _233, offset: 0B], _218
 186:sieve_extend.c ****        *index_ptr |= mask;
 9821              		.loc 1 186 8 is_stmt 1 view .LVU3334
 9822              	.LVL599:
 187:sieve_extend.c ****        index_ptr+=step;
 9823              		.loc 1 187 8 view .LVU3335
 9824              	# sieve_extend.c:187:        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 9825              		.loc 1 187 19 is_stmt 0 view .LVU3336
 9826 36fd 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _573, offset: 0B], _218
GAS LISTING /tmp/cclewcPz.s 			page 267


 188:sieve_extend.c ****        *index_ptr |= mask;
 9827              		.loc 1 188 8 is_stmt 1 view .LVU3337
 9828              	.LVL600:
 189:sieve_extend.c ****        index_ptr+=step;
 9829              		.loc 1 189 8 view .LVU3338
 9830              	# sieve_extend.c:189:        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 9831              		.loc 1 189 19 is_stmt 0 view .LVU3339
 9832 3700 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _573, index: _233, offset: 0B], _218
 190:sieve_extend.c ****        *index_ptr |= mask;
 9833              		.loc 1 190 8 is_stmt 1 view .LVU3340
 9834              	.LVL601:
 191:sieve_extend.c ****        index_ptr+=step;
 9835              		.loc 1 191 8 view .LVU3341
 9836 3704 4C01C7   		add	rdi, r8	# ivtmp.473, tmp359
 9837              	# sieve_extend.c:191:        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 9838              		.loc 1 191 19 is_stmt 0 view .LVU3342
 9839 3707 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_259, index: _233, step: 4, offset: 0B], _218
 192:sieve_extend.c ****    }
 9840              		.loc 1 192 8 is_stmt 1 view .LVU3343
 9841 370b 4C01C0   		add	rax, r8	# index_ptr, tmp359
 9842              	.LVL602:
 182:sieve_extend.c ****        *index_ptr |= mask;
 9843              		.loc 1 182 10 view .LVU3344
 9844 370e 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 9845 3711 767D     		jbe	.L683	#,
 183:sieve_extend.c ****        index_ptr+=step;
 9846              		.loc 1 183 8 view .LVU3345
 9847              	# sieve_extend.c:183:        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 9848              		.loc 1 183 19 is_stmt 0 view .LVU3346
 9849 3713 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_259, offset: 0B], _218
 184:sieve_extend.c ****        *index_ptr |= mask;
 9850              		.loc 1 184 8 is_stmt 1 view .LVU3347
 9851              	.LVL603:
 185:sieve_extend.c ****        index_ptr+=step;
 9852              		.loc 1 185 8 view .LVU3348
 9853              	# sieve_extend.c:185:        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 9854              		.loc 1 185 19 is_stmt 0 view .LVU3349
 9855 3716 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_259, index: _233, offset: 0B], _218
 186:sieve_extend.c ****        *index_ptr |= mask;
 9856              		.loc 1 186 8 is_stmt 1 view .LVU3350
 9857              	.LVL604:
 187:sieve_extend.c ****        index_ptr+=step;
 9858              		.loc 1 187 8 view .LVU3351
 9859              	# sieve_extend.c:187:        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 9860              		.loc 1 187 19 is_stmt 0 view .LVU3352
 9861 371a 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _573, offset: 0B], _218
 188:sieve_extend.c ****        *index_ptr |= mask;
 9862              		.loc 1 188 8 is_stmt 1 view .LVU3353
 9863              	.LVL605:
 189:sieve_extend.c ****        index_ptr+=step;
 9864              		.loc 1 189 8 view .LVU3354
 9865              	# sieve_extend.c:189:        *index_ptr |= mask;
GAS LISTING /tmp/cclewcPz.s 			page 268


 189:sieve_extend.c ****        index_ptr+=step;
 9866              		.loc 1 189 19 is_stmt 0 view .LVU3355
 9867 371d 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _573, index: _233, offset: 0B], _218
 190:sieve_extend.c ****        *index_ptr |= mask;
 9868              		.loc 1 190 8 is_stmt 1 view .LVU3356
 9869              	.LVL606:
 191:sieve_extend.c ****        index_ptr+=step;
 9870              		.loc 1 191 8 view .LVU3357
 9871 3721 4C01C7   		add	rdi, r8	# ivtmp.473, tmp359
 9872              	# sieve_extend.c:191:        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 9873              		.loc 1 191 19 is_stmt 0 view .LVU3358
 9874 3724 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_259, index: _233, step: 4, offset: 0B], _218
 192:sieve_extend.c ****    }
 9875              		.loc 1 192 8 is_stmt 1 view .LVU3359
 9876 3728 4C01C0   		add	rax, r8	# index_ptr, tmp359
 9877              	.LVL607:
 182:sieve_extend.c ****        *index_ptr |= mask;
 9878              		.loc 1 182 10 view .LVU3360
 9879 372b 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 9880 372e 7660     		jbe	.L683	#,
 183:sieve_extend.c ****        index_ptr+=step;
 9881              		.loc 1 183 8 view .LVU3361
 9882              	# sieve_extend.c:183:        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 9883              		.loc 1 183 19 is_stmt 0 view .LVU3362
 9884 3730 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_259, offset: 0B], _218
 184:sieve_extend.c ****        *index_ptr |= mask;
 9885              		.loc 1 184 8 is_stmt 1 view .LVU3363
 9886              	.LVL608:
 185:sieve_extend.c ****        index_ptr+=step;
 9887              		.loc 1 185 8 view .LVU3364
 9888              	# sieve_extend.c:185:        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 9889              		.loc 1 185 19 is_stmt 0 view .LVU3365
 9890 3733 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_259, index: _233, offset: 0B], _218
 186:sieve_extend.c ****        *index_ptr |= mask;
 9891              		.loc 1 186 8 is_stmt 1 view .LVU3366
 9892              	.LVL609:
 187:sieve_extend.c ****        index_ptr+=step;
 9893              		.loc 1 187 8 view .LVU3367
 9894              	# sieve_extend.c:187:        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 9895              		.loc 1 187 19 is_stmt 0 view .LVU3368
 9896 3737 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _573, offset: 0B], _218
 188:sieve_extend.c ****        *index_ptr |= mask;
 9897              		.loc 1 188 8 is_stmt 1 view .LVU3369
 9898              	.LVL610:
 189:sieve_extend.c ****        index_ptr+=step;
 9899              		.loc 1 189 8 view .LVU3370
 9900              	# sieve_extend.c:189:        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 9901              		.loc 1 189 19 is_stmt 0 view .LVU3371
 9902 373a 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _573, index: _233, offset: 0B], _218
 190:sieve_extend.c ****        *index_ptr |= mask;
 9903              		.loc 1 190 8 is_stmt 1 view .LVU3372
 9904              	.LVL611:
GAS LISTING /tmp/cclewcPz.s 			page 269


 191:sieve_extend.c ****        index_ptr+=step;
 9905              		.loc 1 191 8 view .LVU3373
 9906 373e 4C01C7   		add	rdi, r8	# ivtmp.473, tmp359
 9907              	# sieve_extend.c:191:        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 9908              		.loc 1 191 19 is_stmt 0 view .LVU3374
 9909 3741 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_259, index: _233, step: 4, offset: 0B], _218
 192:sieve_extend.c ****    }
 9910              		.loc 1 192 8 is_stmt 1 view .LVU3375
 9911 3745 4C01C0   		add	rax, r8	# index_ptr, tmp359
 9912              	.LVL612:
 182:sieve_extend.c ****        *index_ptr |= mask;
 9913              		.loc 1 182 10 view .LVU3376
 9914 3748 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 9915 374b 7643     		jbe	.L683	#,
 183:sieve_extend.c ****        index_ptr+=step;
 9916              		.loc 1 183 8 view .LVU3377
 9917              	# sieve_extend.c:183:        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 9918              		.loc 1 183 19 is_stmt 0 view .LVU3378
 9919 374d 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_259, offset: 0B], _218
 184:sieve_extend.c ****        *index_ptr |= mask;
 9920              		.loc 1 184 8 is_stmt 1 view .LVU3379
 9921              	.LVL613:
 185:sieve_extend.c ****        index_ptr+=step;
 9922              		.loc 1 185 8 view .LVU3380
 9923              	# sieve_extend.c:185:        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 9924              		.loc 1 185 19 is_stmt 0 view .LVU3381
 9925 3750 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_259, index: _233, offset: 0B], _218
 186:sieve_extend.c ****        *index_ptr |= mask;
 9926              		.loc 1 186 8 is_stmt 1 view .LVU3382
 9927              	.LVL614:
 187:sieve_extend.c ****        index_ptr+=step;
 9928              		.loc 1 187 8 view .LVU3383
 9929              	# sieve_extend.c:187:        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 9930              		.loc 1 187 19 is_stmt 0 view .LVU3384
 9931 3754 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _573, offset: 0B], _218
 188:sieve_extend.c ****        *index_ptr |= mask;
 9932              		.loc 1 188 8 is_stmt 1 view .LVU3385
 9933              	.LVL615:
 189:sieve_extend.c ****        index_ptr+=step;
 9934              		.loc 1 189 8 view .LVU3386
 9935              	# sieve_extend.c:189:        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 9936              		.loc 1 189 19 is_stmt 0 view .LVU3387
 9937 3757 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _573, index: _233, offset: 0B], _218
 190:sieve_extend.c ****        *index_ptr |= mask;
 9938              		.loc 1 190 8 is_stmt 1 view .LVU3388
 9939              	.LVL616:
 191:sieve_extend.c ****        index_ptr+=step;
 9940              		.loc 1 191 8 view .LVU3389
 9941 375b 4C01C7   		add	rdi, r8	# ivtmp.473, tmp359
 9942              	# sieve_extend.c:191:        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 9943              		.loc 1 191 19 is_stmt 0 view .LVU3390
GAS LISTING /tmp/cclewcPz.s 			page 270


 9944 375e 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_259, index: _233, step: 4, offset: 0B], _218
 192:sieve_extend.c ****    }
 9945              		.loc 1 192 8 is_stmt 1 view .LVU3391
 9946 3762 4C01C0   		add	rax, r8	# index_ptr, tmp359
 9947              	.LVL617:
 182:sieve_extend.c ****        *index_ptr |= mask;
 9948              		.loc 1 182 10 view .LVU3392
 9949 3765 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 9950 3768 7626     		jbe	.L683	#,
 183:sieve_extend.c ****        index_ptr+=step;
 9951              		.loc 1 183 8 view .LVU3393
 9952              	# sieve_extend.c:183:        *index_ptr |= mask;
 183:sieve_extend.c ****        index_ptr+=step;
 9953              		.loc 1 183 19 is_stmt 0 view .LVU3394
 9954 376a 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_259, offset: 0B], _218
 184:sieve_extend.c ****        *index_ptr |= mask;
 9955              		.loc 1 184 8 is_stmt 1 view .LVU3395
 9956              	.LVL618:
 185:sieve_extend.c ****        index_ptr+=step;
 9957              		.loc 1 185 8 view .LVU3396
 9958              	# sieve_extend.c:185:        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 9959              		.loc 1 185 19 is_stmt 0 view .LVU3397
 9960 376d 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_259, index: _233, offset: 0B], _218
 186:sieve_extend.c ****        *index_ptr |= mask;
 9961              		.loc 1 186 8 is_stmt 1 view .LVU3398
 9962              	.LVL619:
 187:sieve_extend.c ****        index_ptr+=step;
 9963              		.loc 1 187 8 view .LVU3399
 9964              	# sieve_extend.c:187:        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 9965              		.loc 1 187 19 is_stmt 0 view .LVU3400
 9966 3771 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _573, offset: 0B], _218
 188:sieve_extend.c ****        *index_ptr |= mask;
 9967              		.loc 1 188 8 is_stmt 1 view .LVU3401
 9968              	.LVL620:
 189:sieve_extend.c ****        index_ptr+=step;
 9969              		.loc 1 189 8 view .LVU3402
 9970              	# sieve_extend.c:189:        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 9971              		.loc 1 189 19 is_stmt 0 view .LVU3403
 9972 3774 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _573, index: _233, offset: 0B], _218
 190:sieve_extend.c ****        *index_ptr |= mask;
 9973              		.loc 1 190 8 is_stmt 1 view .LVU3404
 9974              	.LVL621:
 191:sieve_extend.c ****        index_ptr+=step;
 9975              		.loc 1 191 8 view .LVU3405
 9976 3778 4C01C7   		add	rdi, r8	# ivtmp.473, tmp359
 9977              	# sieve_extend.c:191:        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 9978              		.loc 1 191 19 is_stmt 0 view .LVU3406
 9979 377b 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_259, index: _233, step: 4, offset: 0B], _218
 192:sieve_extend.c ****    }
 9980              		.loc 1 192 8 is_stmt 1 view .LVU3407
 9981 377f 4C01C0   		add	rax, r8	# index_ptr, tmp359
 9982              	.LVL622:
 182:sieve_extend.c ****        *index_ptr |= mask;
GAS LISTING /tmp/cclewcPz.s 			page 271


 9983              		.loc 1 182 10 view .LVU3408
 9984 3782 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 9985 3785 0F8708FF 		ja	.L684	#,
 9985      FFFF
 9986 378b 0F1F4400 		.p2align 4
 9986      00
 9987              		.p2align 3
 9988              	.L683:
 195:sieve_extend.c ****    while likely(index_ptr < range_stop_ptr) {
 9989              		.loc 1 195 4 view .LVU3409
 196:sieve_extend.c ****        *index_ptr |= mask;
 9990              		.loc 1 196 4 view .LVU3410
 196:sieve_extend.c ****        *index_ptr |= mask;
 9991              		.loc 1 196 10 view .LVU3411
 9992 3790 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 9993 3793 765B     		jbe	.L685	#,
 9994              	.L686:
 197:sieve_extend.c ****        index_ptr+=step;
 9995              		.loc 1 197 8 view .LVU3412
 9996              	# sieve_extend.c:197:        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
 9997              		.loc 1 197 19 is_stmt 0 view .LVU3413
 9998 3795 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_41, offset: 0B], _218
 198:sieve_extend.c ****    }
 9999              		.loc 1 198 8 is_stmt 1 view .LVU3414
 10000              	# sieve_extend.c:198:        index_ptr+=step;
 198:sieve_extend.c ****    }
 10001              		.loc 1 198 17 is_stmt 0 view .LVU3415
 10002 3798 4801D0   		add	rax, rdx	# index_ptr, _233
 10003              	.LVL623:
 196:sieve_extend.c ****        *index_ptr |= mask;
 10004              		.loc 1 196 10 is_stmt 1 view .LVU3416
 10005 379b 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 10006 379e 7650     		jbe	.L685	#,
 197:sieve_extend.c ****        index_ptr+=step;
 10007              		.loc 1 197 8 view .LVU3417
 10008              	# sieve_extend.c:197:        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
 10009              		.loc 1 197 19 is_stmt 0 view .LVU3418
 10010 37a0 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_41, offset: 0B], _218
 198:sieve_extend.c ****    }
 10011              		.loc 1 198 8 is_stmt 1 view .LVU3419
 10012              	# sieve_extend.c:198:        index_ptr+=step;
 198:sieve_extend.c ****    }
 10013              		.loc 1 198 17 is_stmt 0 view .LVU3420
 10014 37a3 4801D0   		add	rax, rdx	# index_ptr, _233
 10015              	.LVL624:
 196:sieve_extend.c ****        *index_ptr |= mask;
 10016              		.loc 1 196 10 is_stmt 1 view .LVU3421
 10017 37a6 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 10018 37a9 7645     		jbe	.L685	#,
 197:sieve_extend.c ****        index_ptr+=step;
 10019              		.loc 1 197 8 view .LVU3422
 10020              	# sieve_extend.c:197:        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
 10021              		.loc 1 197 19 is_stmt 0 view .LVU3423
 10022 37ab 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_41, offset: 0B], _218
GAS LISTING /tmp/cclewcPz.s 			page 272


 198:sieve_extend.c ****    }
 10023              		.loc 1 198 8 is_stmt 1 view .LVU3424
 10024              	# sieve_extend.c:198:        index_ptr+=step;
 198:sieve_extend.c ****    }
 10025              		.loc 1 198 17 is_stmt 0 view .LVU3425
 10026 37ae 4801D0   		add	rax, rdx	# index_ptr, _233
 10027              	.LVL625:
 196:sieve_extend.c ****        *index_ptr |= mask;
 10028              		.loc 1 196 10 is_stmt 1 view .LVU3426
 10029 37b1 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 10030 37b4 763A     		jbe	.L685	#,
 197:sieve_extend.c ****        index_ptr+=step;
 10031              		.loc 1 197 8 view .LVU3427
 10032              	# sieve_extend.c:197:        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
 10033              		.loc 1 197 19 is_stmt 0 view .LVU3428
 10034 37b6 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_41, offset: 0B], _218
 198:sieve_extend.c ****    }
 10035              		.loc 1 198 8 is_stmt 1 view .LVU3429
 10036              	# sieve_extend.c:198:        index_ptr+=step;
 198:sieve_extend.c ****    }
 10037              		.loc 1 198 17 is_stmt 0 view .LVU3430
 10038 37b9 4801D0   		add	rax, rdx	# index_ptr, _233
 10039              	.LVL626:
 196:sieve_extend.c ****        *index_ptr |= mask;
 10040              		.loc 1 196 10 is_stmt 1 view .LVU3431
 10041 37bc 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 10042 37bf 762F     		jbe	.L685	#,
 197:sieve_extend.c ****        index_ptr+=step;
 10043              		.loc 1 197 8 view .LVU3432
 10044              	# sieve_extend.c:197:        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
 10045              		.loc 1 197 19 is_stmt 0 view .LVU3433
 10046 37c1 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_41, offset: 0B], _218
 198:sieve_extend.c ****    }
 10047              		.loc 1 198 8 is_stmt 1 view .LVU3434
 10048              	# sieve_extend.c:198:        index_ptr+=step;
 198:sieve_extend.c ****    }
 10049              		.loc 1 198 17 is_stmt 0 view .LVU3435
 10050 37c4 4801D0   		add	rax, rdx	# index_ptr, _233
 10051              	.LVL627:
 196:sieve_extend.c ****        *index_ptr |= mask;
 10052              		.loc 1 196 10 is_stmt 1 view .LVU3436
 10053 37c7 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 10054 37ca 7624     		jbe	.L685	#,
 197:sieve_extend.c ****        index_ptr+=step;
 10055              		.loc 1 197 8 view .LVU3437
 10056              	# sieve_extend.c:197:        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
 10057              		.loc 1 197 19 is_stmt 0 view .LVU3438
 10058 37cc 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_41, offset: 0B], _218
 198:sieve_extend.c ****    }
 10059              		.loc 1 198 8 is_stmt 1 view .LVU3439
 10060              	# sieve_extend.c:198:        index_ptr+=step;
 198:sieve_extend.c ****    }
 10061              		.loc 1 198 17 is_stmt 0 view .LVU3440
 10062 37cf 4801D0   		add	rax, rdx	# index_ptr, _233
GAS LISTING /tmp/cclewcPz.s 			page 273


 10063              	.LVL628:
 196:sieve_extend.c ****        *index_ptr |= mask;
 10064              		.loc 1 196 10 is_stmt 1 view .LVU3441
 10065 37d2 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 10066 37d5 7619     		jbe	.L685	#,
 197:sieve_extend.c ****        index_ptr+=step;
 10067              		.loc 1 197 8 view .LVU3442
 10068              	# sieve_extend.c:197:        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
 10069              		.loc 1 197 19 is_stmt 0 view .LVU3443
 10070 37d7 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_41, offset: 0B], _218
 198:sieve_extend.c ****    }
 10071              		.loc 1 198 8 is_stmt 1 view .LVU3444
 10072              	# sieve_extend.c:198:        index_ptr+=step;
 198:sieve_extend.c ****    }
 10073              		.loc 1 198 17 is_stmt 0 view .LVU3445
 10074 37da 4801D0   		add	rax, rdx	# index_ptr, _233
 10075              	.LVL629:
 196:sieve_extend.c ****        *index_ptr |= mask;
 10076              		.loc 1 196 10 is_stmt 1 view .LVU3446
 10077 37dd 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 10078 37e0 760E     		jbe	.L685	#,
 197:sieve_extend.c ****        index_ptr+=step;
 10079              		.loc 1 197 8 view .LVU3447
 10080              	# sieve_extend.c:197:        *index_ptr |= mask;
 197:sieve_extend.c ****        index_ptr+=step;
 10081              		.loc 1 197 19 is_stmt 0 view .LVU3448
 10082 37e2 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_41, offset: 0B], _218
 198:sieve_extend.c ****    }
 10083              		.loc 1 198 8 is_stmt 1 view .LVU3449
 10084              	# sieve_extend.c:198:        index_ptr+=step;
 198:sieve_extend.c ****    }
 10085              		.loc 1 198 17 is_stmt 0 view .LVU3450
 10086 37e5 4801D0   		add	rax, rdx	# index_ptr, _233
 10087              	.LVL630:
 196:sieve_extend.c ****        *index_ptr |= mask;
 10088              		.loc 1 196 10 is_stmt 1 view .LVU3451
 10089 37e8 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 10090 37eb 77A8     		ja	.L686	#,
 10091 37ed 0F1F00   		.p2align 4
 10092              		.p2align 3
 10093              	.L685:
 201:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 10094              		.loc 1 201 4 view .LVU3452
 10095              	# sieve_extend.c:201:    if (index_ptr == range_stop_ptr) { // index_ptr could also end above range
 201:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 10096              		.loc 1 201 7 is_stmt 0 view .LVU3453
 10097 37f0 4839D8   		cmp	rax, rbx	# index_ptr, range_stop_ptr
 10098 37f3 0F848F00 		je	.L865	#,
 10098      0000
 10099              	.LVL631:
 10100              	.L687:
 201:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 10101              		.loc 1 201 7 view .LVU3454
 10102              	.LBE537:
 10103              	.LBE540:
 399:sieve_extend.c ****         #if __APPLE__
GAS LISTING /tmp/cclewcPz.s 			page 274


 10104              		.loc 1 399 77 is_stmt 1 view .LVU3455
 10105              	# sieve_extend.c:399:     for (register counter_t index = range_start; index < range_stop_unique; i
 399:sieve_extend.c ****         #if __APPLE__
 10106              		.loc 1 399 83 is_stmt 0 view .LVU3456
 10107 37f9 4C01D6   		add	rsi, r10	# index, step
 10108              	.LVL632:
 399:sieve_extend.c ****         #if __APPLE__
 10109              		.loc 1 399 50 is_stmt 1 view .LVU3457
 10110              	# sieve_extend.c:399:     for (register counter_t index = range_start; index < range_stop_unique; i
 399:sieve_extend.c ****         #if __APPLE__
 10111              		.loc 1 399 5 is_stmt 0 view .LVU3458
 10112 37fc 4939F6   		cmp	r14, rsi	# range_stop_unique, index
 10113 37ff 0F876BFE 		ja	.L688	#,
 10113      FFFF
 10114              	.L689:
 10115              	.LVL633:
 399:sieve_extend.c ****         #if __APPLE__
 10116              		.loc 1 399 5 view .LVU3459
 10117              	.LBE542:
 10118              	.LBE544:
 10119              	.LBE546:
 819:sieve_extend.c ****         }
 10120              		.loc 1 819 13 is_stmt 1 view .LVU3460
 10121              	.LBB547:
 10122              	.LBI547:
 129:sieve_extend.c ****     // return searchBitFalse(bitarray, index);
 10123              		.loc 1 129 25 view .LVU3461
 10124              	.LBB548:
 132:sieve_extend.c ****    bitshift_t index_bit  = bitindex_calc(index);
 10125              		.loc 1 132 4 view .LVU3462
 133:sieve_extend.c ****    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[index_word] >> index_bi
 10126              		.loc 1 133 4 view .LVU3463
 10127              	# sieve_extend.c:134:    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[i
 134:sieve_extend.c ****    index += distance;
 10128              		.loc 1 134 89 is_stmt 0 view .LVU3464
 10129 3805 498B3424 		mov	rsi, QWORD PTR [r12]	# MEM[(uint64_t *)_552], MEM[(uint64_t *)_552]
 10130              	# sieve_extend.c:133:    bitshift_t index_bit  = bitindex_calc(index);
 133:sieve_extend.c ****    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[index_word] >> index_bi
 10131              		.loc 1 133 15 view .LVU3465
 10132 3809 4989EA   		mov	r10, rbp	# index_bit, _159
 10133              	.LVL634:
 133:sieve_extend.c ****    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[index_word] >> index_bi
 10134              		.loc 1 133 15 view .LVU3466
 10135 380c 4183E23F 		and	r10d, 63	# index_bit,
 10136              	.LVL635:
 134:sieve_extend.c ****    index += distance;
 10137              		.loc 1 134 4 is_stmt 1 view .LVU3467
 10138              	# sieve_extend.c:134:    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[i
 134:sieve_extend.c ****    index += distance;
 10139              		.loc 1 134 89 is_stmt 0 view .LVU3468
 10140 3810 C462ABF7 		shrx	r12, rsi, r10	# tmp344, MEM[(uint64_t *)_552], index_bit
 10140      E6
 10141              	# sieve_extend.c:134:    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[i
 134:sieve_extend.c ****    index += distance;
 10142              		.loc 1 134 66 view .LVU3469
 10143 3815 49F7D4   		not	r12	# tmp346
 10144              	# sieve_extend.c:134:    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[i
GAS LISTING /tmp/cclewcPz.s 			page 275


 134:sieve_extend.c ****    index += distance;
 10145              		.loc 1 134 25 view .LVU3470
 10146 3818 F34D0FBC 		tzcnt	r14, r12	# distance, tmp346
 10146      F4
 10147              	.LVL636:
 135:sieve_extend.c ****    distance += index_bit;
 10148              		.loc 1 135 4 is_stmt 1 view .LVU3471
 10149              	# sieve_extend.c:135:    index += distance;
 135:sieve_extend.c ****    distance += index_bit;
 10150              		.loc 1 135 10 is_stmt 0 view .LVU3472
 10151 381d 4E8D4435 		lea	r8, 0[rbp+r14]	# index,
 10151      00
 10152              	.LVL637:
 136:sieve_extend.c **** 
 10153              		.loc 1 136 4 is_stmt 1 view .LVU3473
 138:sieve_extend.c ****        index_word++;
 10154              		.loc 1 138 4 view .LVU3474
 138:sieve_extend.c ****        index_word++;
 10155              		.loc 1 138 10 view .LVU3475
 10156              	# sieve_extend.c:136:    distance += index_bit;
 136:sieve_extend.c **** 
 10157              		.loc 1 136 13 is_stmt 0 view .LVU3476
 10158 3822 4D01D6   		add	r14, r10	# distance, index_bit
 10159              	.LVL638:
 10160              	# sieve_extend.c:138:    while unlikely(distance == WORD_SIZE_bitshift) { // to prevent a bug from 
 138:sieve_extend.c ****        index_word++;
 10161              		.loc 1 138 10 view .LVU3477
 10162 3825 4983FE40 		cmp	r14, 64	# distance,
 10163 3829 0F847101 		je	.L866	#,
 10163      0000
 10164              	.LVL639:
 10165              	.L679:
 138:sieve_extend.c ****        index_word++;
 10166              		.loc 1 138 10 view .LVU3478
 10167              	.LBE548:
 10168              	.LBE547:
 822:sieve_extend.c ****         step  = prime * 2 + 1;
 10169              		.loc 1 822 9 is_stmt 1 view .LVU3479
 823:sieve_extend.c ****     }
 10170              		.loc 1 823 9 view .LVU3480
 10171              	# sieve_extend.c:823:         step  = prime * 2 + 1;
 823:sieve_extend.c ****     }
 10172              		.loc 1 823 15 is_stmt 0 view .LVU3481
 10173 382f 4F8D5400 		lea	r10, 1[r8+r8]	# step,
 10173      01
 10174              	.LVL640:
 807:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 10175              		.loc 1 807 11 is_stmt 1 view .LVU3482
 10176              	# sieve_extend.c:807:     while (prime*step <= block_stop) {
 807:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 10177              		.loc 1 807 17 is_stmt 0 view .LVU3483
 10178 3834 4C89C6   		mov	rsi, r8	# tmp370, index
 10179 3837 490FAFF2 		imul	rsi, r10	# tmp370, step
 10180              	# sieve_extend.c:807:     while (prime*step <= block_stop) {
 807:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 10181              		.loc 1 807 11 view .LVU3484
 10182 383b 48393424 		cmp	QWORD PTR [rsp], rsi	# %sfp, tmp370
GAS LISTING /tmp/cclewcPz.s 			page 276


 10183 383f 0F83ABFD 		jnb	.L690	#,
 10183      FFFF
 10184 3845 488B5C24 		mov	rbx, QWORD PTR 40[rsp]	# <retval>, %sfp
 10184      28
 10185 384a 4C8B7C24 		mov	r15, QWORD PTR 32[rsp]	# prime, %sfp
 10185      20
 10186 384f 488B5308 		mov	rdx, QWORD PTR 8[rbx]	# _8, sieve_90->bits
 10187              	.L691:
 10188              	.LVL641:
 807:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 10189              		.loc 1 807 11 view .LVU3485
 10190              	.LBE530:
 10191              	.LBE529:
 888:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10192              		.loc 1 888 91 is_stmt 1 view .LVU3486
 10193              	# sieve_extend.c:888:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 888:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10194              		.loc 1 888 103 is_stmt 0 view .LVU3487
 10195 3853 4C8B7424 		mov	r14, QWORD PTR 48[rsp]	# blocksize, %sfp
 10195      30
 10196              	# sieve_extend.c:888:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 888:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10197              		.loc 1 888 128 view .LVU3488
 10198 3858 4C8B2424 		mov	r12, QWORD PTR [rsp]	# block_stop, %sfp
 10199              	# sieve_extend.c:888:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 888:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10200              		.loc 1 888 103 view .LVU3489
 10201 385c 4C017424 		add	QWORD PTR 8[rsp], r14	# %sfp, blocksize
 10201      08
 10202              	.LVL642:
 888:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10203              		.loc 1 888 103 view .LVU3490
 10204 3861 488B6C24 		mov	rbp, QWORD PTR 8[rsp]	# block_start, %sfp
 10204      08
 10205              	.LVL643:
 10206              	# sieve_extend.c:888:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 888:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10207              		.loc 1 888 128 view .LVU3491
 10208 3866 4D01F4   		add	r12, r14	# block_stop, blocksize
 10209              	.LVL644:
 888:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10210              		.loc 1 888 63 is_stmt 1 view .LVU3492
 10211              	# sieve_extend.c:888:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 888:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 10212              		.loc 1 888 5 is_stmt 0 view .LVU3493
 10213 3869 4839EA   		cmp	rdx, rbp	# _8, block_start
 10214 386c 0F832EFC 		jnb	.L674	#,
 10214      FFFF
 10215              	.LBE560:
 10216              	# sieve_extend.c:895: }
 895:sieve_extend.c **** 
 10217              		.loc 1 895 1 view .LVU3494
 10218 3872 488B4424 		mov	rax, QWORD PTR 40[rsp]	#, %sfp
 10218      28
 10219 3877 488D6424 		lea	rsp, 72[rsp]	#,
 10219      48
 10220              		.cfi_remember_state
GAS LISTING /tmp/cclewcPz.s 			page 277


 10221              		.cfi_def_cfa_offset 56
 10222 387c 5B       		pop	rbx	#
 10223              		.cfi_def_cfa_offset 48
 10224 387d 5D       		pop	rbp	#
 10225              		.cfi_def_cfa_offset 40
 10226              	.LVL645:
 895:sieve_extend.c **** 
 10227              		.loc 1 895 1 view .LVU3495
 10228 387e 415C     		pop	r12	#
 10229              		.cfi_def_cfa_offset 32
 10230              	.LVL646:
 895:sieve_extend.c **** 
 10231              		.loc 1 895 1 view .LVU3496
 10232 3880 415D     		pop	r13	#
 10233              		.cfi_def_cfa_offset 24
 10234              	.LVL647:
 895:sieve_extend.c **** 
 10235              		.loc 1 895 1 view .LVU3497
 10236 3882 415E     		pop	r14	#
 10237              		.cfi_def_cfa_offset 16
 10238              	.LVL648:
 895:sieve_extend.c **** 
 10239              		.loc 1 895 1 view .LVU3498
 10240 3884 415F     		pop	r15	#
 10241              		.cfi_def_cfa_offset 8
 10242 3886 C3       		ret	
 10243              	.LVL649:
 10244              		.p2align 4,,7
 10245 3887 90       		.p2align 3
 10246              	.L865:
 10247              		.cfi_restore_state
 10248              	.LBB561:
 10249              	.LBB557:
 10250              	.LBB556:
 10251              	.LBB550:
 10252              	.LBB545:
 10253              	.LBB543:
 10254              	.LBB541:
 10255              	.LBB538:
 202:sieve_extend.c ****    }
 10256              		.loc 1 202 7 is_stmt 1 view .LVU3499
 10257              	# sieve_extend.c:202:       *index_ptr |= (mask & chopmask(range_stop));
 202:sieve_extend.c ****    }
 10258              		.loc 1 202 27 is_stmt 0 view .LVU3500
 10259 3888 48234C24 		and	rcx, QWORD PTR 16[rsp]	# tmp364, %sfp
 10259      10
 10260              	.LVL650:
 10261              	# sieve_extend.c:202:       *index_ptr |= (mask & chopmask(range_stop));
 202:sieve_extend.c ****    }
 10262              		.loc 1 202 18 view .LVU3501
 10263 388d 48090B   		or	QWORD PTR [rbx], rcx	# MEM[(uint64_t *)range_stop_ptr_251], tmp364
 10264 3890 E964FFFF 		jmp	.L687	#
 10264      FF
 10265              	.LVL651:
 10266              		.p2align 4,,7
 10267 3895 0F1F00   		.p2align 3
 10268              	.L864:
GAS LISTING /tmp/cclewcPz.s 			page 278


 202:sieve_extend.c ****    }
 10269              		.loc 1 202 18 view .LVU3502
 10270              	.LBE538:
 10271              	.LBE541:
 10272              	.LBE543:
 10273              	.LBE545:
 10274              	.LBE550:
 814:sieve_extend.c ****             prime = searchBitFalse(bitarray, prime+1 );
 10275              		.loc 1 814 13 is_stmt 1 view .LVU3503
 10276 3898 488B0C24 		mov	rcx, QWORD PTR [rsp]	#, %sfp
 10277 389c 4C89D2   		mov	rdx, r10	#, step
 10278 389f 4C89EF   		mov	rdi, r13	#, _95
 10279 38a2 E879D5FF 		call	setBitsTrue_largeRange_vector	#
 10279      FF
 10280              	.LVL652:
 815:sieve_extend.c ****         }
 10281              		.loc 1 815 13 view .LVU3504
 10282              	.LBB551:
 10283              	.LBI551:
 123:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 10284              		.loc 1 123 25 view .LVU3505
 10285              	.LBB552:
 124:sieve_extend.c ****     return index;
 10286              		.loc 1 124 5 view .LVU3506
 124:sieve_extend.c ****     return index;
 10287              		.loc 1 124 11 view .LVU3507
 10288              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10289              		.loc 1 124 12 is_stmt 0 view .LVU3508
 10290 38a7 498B1424 		mov	rdx, QWORD PTR [r12]	# MEM[(uint64_t *)_552], MEM[(uint64_t *)_552]
 10291              	.LBE552:
 10292              	.LBE551:
 10293              	# sieve_extend.c:808:         if likely(block_start >= (prime + 1)) 
 808:sieve_extend.c ****             start = block_start + prime + prime - ((block_start + prime) % step);
 10294              		.loc 1 808 12 view .LVU3509
 10295 38ab 4989E8   		mov	r8, rbp	# index, _159
 10296              	.LBB554:
 10297              	.LBB553:
 10298              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10299              		.loc 1 124 11 view .LVU3510
 10300 38ae 480FA3EA 		bt	rdx, rbp	# MEM[(uint64_t *)_552], _159
 10301 38b2 0F8377FF 		jnc	.L679	#,
 10301      FFFF
 10302              	.LVL653:
 10303              	.L680:
 124:sieve_extend.c ****     return index;
 10304              		.loc 1 124 58 is_stmt 1 view .LVU3511
 10305              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10306              		.loc 1 124 63 is_stmt 0 view .LVU3512
 10307 38b8 4D8D4801 		lea	r9, 1[r8]	# tmp378,
 10308              	.LVL654:
 10309              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10310              		.loc 1 124 21 view .LVU3513
 10311 38bc 4D89CF   		mov	r15, r9	# tmp337, index
GAS LISTING /tmp/cclewcPz.s 			page 279


 10312              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10313              		.loc 1 124 63 view .LVU3514
 10314 38bf 4D89C8   		mov	r8, r9	# index, tmp378
 124:sieve_extend.c ****     return index;
 10315              		.loc 1 124 11 is_stmt 1 view .LVU3515
 10316              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10317              		.loc 1 124 21 is_stmt 0 view .LVU3516
 10318 38c2 49C1EF06 		shr	r15, 6	# tmp337,
 10319              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10320              		.loc 1 124 12 view .LVU3517
 10321 38c6 4B8B4CFD 		mov	rcx, QWORD PTR 0[r13+r15*8]	# *_176, *_176
 10321      00
 10322              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10323              		.loc 1 124 11 view .LVU3518
 10324 38cb 4C0FA3C9 		bt	rcx, r9	# *_176, index
 10325 38cf 0F835AFF 		jnc	.L679	#,
 10325      FFFF
 124:sieve_extend.c ****     return index;
 10326              		.loc 1 124 58 is_stmt 1 view .LVU3519
 10327              	.LVL655:
 10328              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10329              		.loc 1 124 63 is_stmt 0 view .LVU3520
 10330 38d5 4983C001 		add	r8, 1	# index,
 10331              	.LVL656:
 124:sieve_extend.c ****     return index;
 10332              		.loc 1 124 11 is_stmt 1 view .LVU3521
 10333              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10334              		.loc 1 124 21 is_stmt 0 view .LVU3522
 10335 38d9 4C89C0   		mov	rax, r8	# tmp383, index
 10336 38dc 48C1E806 		shr	rax, 6	# tmp383,
 10337              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10338              		.loc 1 124 12 view .LVU3523
 10339 38e0 498B7CC5 		mov	rdi, QWORD PTR 0[r13+rax*8]	# *_176, *_176
 10339      00
 10340              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10341              		.loc 1 124 11 view .LVU3524
 10342 38e5 4C0FA3C7 		bt	rdi, r8	# *_176, index
 10343 38e9 0F8340FF 		jnc	.L679	#,
 10343      FFFF
 124:sieve_extend.c ****     return index;
 10344              		.loc 1 124 58 is_stmt 1 view .LVU3525
 10345              	.LVL657:
 10346              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10347              		.loc 1 124 63 is_stmt 0 view .LVU3526
 10348 38ef 4D8D4102 		lea	r8, 2[r9]	# index,
 10349              	.LVL658:
 124:sieve_extend.c ****     return index;
 10350              		.loc 1 124 11 is_stmt 1 view .LVU3527
GAS LISTING /tmp/cclewcPz.s 			page 280


 10351              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10352              		.loc 1 124 21 is_stmt 0 view .LVU3528
 10353 38f3 4D89C2   		mov	r10, r8	# tmp387, index
 10354 38f6 49C1EA06 		shr	r10, 6	# tmp387,
 10355              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10356              		.loc 1 124 12 view .LVU3529
 10357 38fa 4B8B74D5 		mov	rsi, QWORD PTR 0[r13+r10*8]	# *_176, *_176
 10357      00
 10358              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10359              		.loc 1 124 11 view .LVU3530
 10360 38ff 4C0FA3C6 		bt	rsi, r8	# *_176, index
 10361 3903 0F8326FF 		jnc	.L679	#,
 10361      FFFF
 124:sieve_extend.c ****     return index;
 10362              		.loc 1 124 58 is_stmt 1 view .LVU3531
 10363              	.LVL659:
 10364              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10365              		.loc 1 124 63 is_stmt 0 view .LVU3532
 10366 3909 4D8D4103 		lea	r8, 3[r9]	# index,
 10367              	.LVL660:
 124:sieve_extend.c ****     return index;
 10368              		.loc 1 124 11 is_stmt 1 view .LVU3533
 10369              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10370              		.loc 1 124 21 is_stmt 0 view .LVU3534
 10371 390d 4D89C4   		mov	r12, r8	# tmp391, index
 10372 3910 49C1EC06 		shr	r12, 6	# tmp391,
 10373              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10374              		.loc 1 124 12 view .LVU3535
 10375 3914 4F8B74E5 		mov	r14, QWORD PTR 0[r13+r12*8]	# *_176, *_176
 10375      00
 10376              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10377              		.loc 1 124 11 view .LVU3536
 10378 3919 4D0FA3C6 		bt	r14, r8	# *_176, index
 10379 391d 0F830CFF 		jnc	.L679	#,
 10379      FFFF
 124:sieve_extend.c ****     return index;
 10380              		.loc 1 124 58 is_stmt 1 view .LVU3537
 10381              	.LVL661:
 10382              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10383              		.loc 1 124 63 is_stmt 0 view .LVU3538
 10384 3923 4D8D4104 		lea	r8, 4[r9]	# index,
 10385              	.LVL662:
 124:sieve_extend.c ****     return index;
 10386              		.loc 1 124 11 is_stmt 1 view .LVU3539
 10387              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10388              		.loc 1 124 21 is_stmt 0 view .LVU3540
 10389 3927 4C89C5   		mov	rbp, r8	# tmp395, index
 10390 392a 48C1ED06 		shr	rbp, 6	# tmp395,
GAS LISTING /tmp/cclewcPz.s 			page 281


 10391              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10392              		.loc 1 124 12 view .LVU3541
 10393 392e 4D8B5CED 		mov	r11, QWORD PTR 0[r13+rbp*8]	# *_176, *_176
 10393      00
 10394              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10395              		.loc 1 124 11 view .LVU3542
 10396 3933 4D0FA3C3 		bt	r11, r8	# *_176, index
 10397 3937 0F83F2FE 		jnc	.L679	#,
 10397      FFFF
 124:sieve_extend.c ****     return index;
 10398              		.loc 1 124 58 is_stmt 1 view .LVU3543
 10399              	.LVL663:
 10400              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10401              		.loc 1 124 63 is_stmt 0 view .LVU3544
 10402 393d 4D8D4105 		lea	r8, 5[r9]	# index,
 10403              	.LVL664:
 124:sieve_extend.c ****     return index;
 10404              		.loc 1 124 11 is_stmt 1 view .LVU3545
 10405              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10406              		.loc 1 124 21 is_stmt 0 view .LVU3546
 10407 3941 4C89C2   		mov	rdx, r8	# tmp399, index
 10408 3944 48C1EA06 		shr	rdx, 6	# tmp399,
 10409              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10410              		.loc 1 124 12 view .LVU3547
 10411 3948 4D8B7CD5 		mov	r15, QWORD PTR 0[r13+rdx*8]	# *_176, *_176
 10411      00
 10412              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10413              		.loc 1 124 11 view .LVU3548
 10414 394d 4D0FA3C7 		bt	r15, r8	# *_176, index
 10415 3951 0F83D8FE 		jnc	.L679	#,
 10415      FFFF
 124:sieve_extend.c ****     return index;
 10416              		.loc 1 124 58 is_stmt 1 view .LVU3549
 10417              	.LVL665:
 10418              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10419              		.loc 1 124 63 is_stmt 0 view .LVU3550
 10420 3957 4D8D4106 		lea	r8, 6[r9]	# index,
 10421              	.LVL666:
 124:sieve_extend.c ****     return index;
 10422              		.loc 1 124 11 is_stmt 1 view .LVU3551
 10423              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10424              		.loc 1 124 21 is_stmt 0 view .LVU3552
 10425 395b 4C89C1   		mov	rcx, r8	# tmp403, index
 10426 395e 48C1E906 		shr	rcx, 6	# tmp403,
 10427              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10428              		.loc 1 124 12 view .LVU3553
 10429 3962 498B44CD 		mov	rax, QWORD PTR 0[r13+rcx*8]	# *_176, *_176
 10429      00
GAS LISTING /tmp/cclewcPz.s 			page 282


 10430              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10431              		.loc 1 124 11 view .LVU3554
 10432 3967 4C0FA3C0 		bt	rax, r8	# *_176, index
 10433 396b 0F83BEFE 		jnc	.L679	#,
 10433      FFFF
 124:sieve_extend.c ****     return index;
 10434              		.loc 1 124 58 is_stmt 1 view .LVU3555
 10435              	.LVL667:
 10436              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10437              		.loc 1 124 63 is_stmt 0 view .LVU3556
 10438 3971 4D8D4107 		lea	r8, 7[r9]	# index,
 10439              	.LVL668:
 124:sieve_extend.c ****     return index;
 10440              		.loc 1 124 11 is_stmt 1 view .LVU3557
 10441              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10442              		.loc 1 124 21 is_stmt 0 view .LVU3558
 10443 3975 4D89C1   		mov	r9, r8	# tmp407, index
 10444 3978 49C1E906 		shr	r9, 6	# tmp407,
 10445              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10446              		.loc 1 124 12 view .LVU3559
 10447 397c 4B8B7CCD 		mov	rdi, QWORD PTR 0[r13+r9*8]	# *_176, *_176
 10447      00
 10448              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 10449              		.loc 1 124 11 view .LVU3560
 10450 3981 4C0FA3C7 		bt	rdi, r8	# *_176, index
 10451 3985 0F822DFF 		jc	.L680	#,
 10451      FFFF
 10452 398b E99FFEFF 		jmp	.L679	#
 10452      FF
 10453              	.LVL669:
 10454              		.p2align 4,,7
 10455              		.p2align 3
 10456              	.L676:
 124:sieve_extend.c ****     return index;
 10457              		.loc 1 124 11 view .LVU3561
 10458              	.LBE553:
 10459              	.LBE554:
 811:sieve_extend.c **** 
 10460              		.loc 1 811 13 is_stmt 1 view .LVU3562
 10461              	# sieve_extend.c:811:             start = prime * prime * 2 + prime * 2;
 811:sieve_extend.c **** 
 10462              		.loc 1 811 19 is_stmt 0 view .LVU3563
 10463 3990 4C0FAFC5 		imul	r8, rbp	# tmp331, _159
 10464 3994 4B8D3400 		lea	rsi, [r8+r8]	# index,
 10465              	.LVL670:
 811:sieve_extend.c **** 
 10466              		.loc 1 811 19 view .LVU3564
 10467 3998 E974FCFF 		jmp	.L677	#
 10467      FF
 10468              	.LVL671:
 10469 399d 0F1F00   		.p2align 4,,7
 10470              		.p2align 3
GAS LISTING /tmp/cclewcPz.s 			page 283


 10471              	.L866:
 10472              	.LBB555:
 10473              	.LBB549:
 139:sieve_extend.c ****        distance = (bitshift_t) __builtin_ctzll(~(bitarray[index_word]));
 10474              		.loc 1 139 8 is_stmt 1 view .LVU3565
 140:sieve_extend.c ****        index += distance;
 10475              		.loc 1 140 8 view .LVU3566
 10476              	# sieve_extend.c:140:        distance = (bitshift_t) __builtin_ctzll(~(bitarray[index_word]));
 140:sieve_extend.c ****        index += distance;
 10477              		.loc 1 140 48 is_stmt 0 view .LVU3567
 10478 39a0 4B8B6C1D 		mov	rbp, QWORD PTR 8[r13+r11]	# *_201, *_201
 10478      08
 10479              	.LVL672:
 140:sieve_extend.c ****        index += distance;
 10480              		.loc 1 140 48 view .LVU3568
 10481 39a5 48F7D5   		not	rbp	# tmp365
 10482              	.LVL673:
 141:sieve_extend.c ****    }
 10483              		.loc 1 141 8 is_stmt 1 view .LVU3569
 10484              	# sieve_extend.c:140:        distance = (bitshift_t) __builtin_ctzll(~(bitarray[index_word]));
 140:sieve_extend.c ****        index += distance;
 10485              		.loc 1 140 17 is_stmt 0 view .LVU3570
 10486 39a8 F34C0FBC 		tzcnt	r11, rbp	# distance, tmp365
 10486      DD
 10487              	.LVL674:
 10488              	# sieve_extend.c:141:        index += distance;
 141:sieve_extend.c ****    }
 10489              		.loc 1 141 14 view .LVU3571
 10490 39ad 4D01D8   		add	r8, r11	# index, distance
 10491              	.LVL675:
 138:sieve_extend.c ****        index_word++;
 10492              		.loc 1 138 10 is_stmt 1 view .LVU3572
 10493 39b0 E97AFEFF 		jmp	.L679	#
 10493      FF
 10494              	.LVL676:
 10495              	.L860:
 138:sieve_extend.c ****        index_word++;
 10496              		.loc 1 138 10 is_stmt 0 view .LVU3573
 10497              	.LBE549:
 10498              	.LBE555:
 10499              	.LBE556:
 10500              	.LBE557:
 10501              	.LBE561:
 10502              	.LBB562:
 10503              	.LBB505:
 10504              	.LBB496:
 10505              	.LBB489:
 10506              	.LBB487:
 787:sieve_extend.c ****         return; // rapid exit for small sizes
 10507              		.loc 1 787 9 is_stmt 1 view .LVU3574
 10508 39b5 4C89F9   		mov	rcx, r15	#, _68
 10509 39b8 4C89F2   		mov	rdx, r14	#, patternsize_bits
 10510 39bb 4C89F6   		mov	rsi, r14	#, patternsize_bits
 10511 39be 4C89EF   		mov	rdi, r13	#, _95
 10512 39c1 E83AC6FF 		call	extendSieve_smallSize	#
 10512      FF
 10513              	.LVL677:
GAS LISTING /tmp/cclewcPz.s 			page 284


 788:sieve_extend.c ****     }
 10514              		.loc 1 788 9 view .LVU3575
 10515 39c6 4C897424 		mov	QWORD PTR 24[rsp], r14	# %sfp, patternsize_bits
 10515      18
 10516 39cb E9D6F6FF 		jmp	.L652	#
 10516      FF
 10517              	.LVL678:
 10518              	.L862:
 788:sieve_extend.c ****     }
 10519              		.loc 1 788 9 is_stmt 0 view .LVU3576
 10520              	.LBE487:
 10521              	.LBE489:
 10522              	.LBE496:
 10523              	.LBE505:
 10524              	.LBE562:
 10525              	.LBB563:
 10526              	.LBB519:
 795:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, source_start, size, desti
 10527              		.loc 1 795 37 is_stmt 1 view .LVU3577
 10528 39d0 E89BE3FF 		call	extendSieve_shiftleft	#
 10528      FF
 10529              	.LVL679:
 795:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, source_start, size, desti
 10530              		.loc 1 795 37 is_stmt 0 view .LVU3578
 10531              		.p2align 4,,3
 10532 39d5 E9AAFAFF 		jmp	.L668	#
 10532      FF
 10533              	.LVL680:
 10534              	.L856:
 795:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, source_start, size, desti
 10535              		.loc 1 795 37 view .LVU3579
 10536 39da 4C8B4C24 		mov	r9, QWORD PTR 40[rsp]	# <retval>, %sfp
 10536      28
 10537 39df 4989FF   		mov	r15, rdi	# prime, prime
 10538              	.LVL681:
 795:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_base(bitarray, source_start, size, desti
 10539              		.loc 1 795 37 view .LVU3580
 10540              	.LBE519:
 10541              	.LBE563:
 10542              	.LBB564:
 10543              	.LBB506:
 10544              	.LBB497:
 10545              	# sieve_extend.c:857:         if (range_stop > block_stop) return block; //range_stop = block_stop;
 857:sieve_extend.c **** 
 10546              		.loc 1 857 12 view .LVU3581
 10547 39e2 488B7424 		mov	rsi, QWORD PTR 16[rsp]	# block$pattern_start, %sfp
 10547      10
 10548              	.LVL682:
 857:sieve_extend.c **** 
 10549              		.loc 1 857 12 view .LVU3582
 10550 39e7 4C89F2   		mov	rdx, r14	# block$pattern_size, patternsize_bits
 10551 39ea 4D8B5908 		mov	r11, QWORD PTR 8[r9]	# prephitmp_591, sieve_90->bits
 10552 39ee 4C891C24 		mov	QWORD PTR [rsp], r11	# %sfp, prephitmp_591
 10553              	.LVL683:
 857:sieve_extend.c **** 
 10554              		.loc 1 857 12 view .LVU3583
 10555 39f2 E95EFAFF 		jmp	.L651	#
GAS LISTING /tmp/cclewcPz.s 			page 285


 10555      FF
 10556              	.LBE497:
 10557              	.LBE506:
 10558              	.LBE564:
 10559              		.cfi_endproc
 10560              	.LFE79:
 10562 39f7 660F1F84 		.p2align 4
 10562      00000000 
 10562      00
 10564              	tune_benchmark:
 10565              	.LVL684:
 10566              	.LFB87:
1021:sieve_extend.c **** 
1022:sieve_extend.c **** static void tune_benchmark(tuning_result_type* tuning_result, counter_t tuning_result_index) {
 10567              		.loc 1 1022 94 is_stmt 1 view -0
 10568              		.cfi_startproc
 10569              		.loc 1 1022 94 is_stmt 0 view .LVU3585
 10570 3a00 4154     		push	r12	#
 10571              		.cfi_def_cfa_offset 16
 10572              		.cfi_offset 12, -16
 10573 3a02 4989F8   		mov	r8, rdi	# tmp149, tuning_result
 10574              	# sieve_extend.c:1028:     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_f
1023:sieve_extend.c ****     counter_t passes = 0;
1024:sieve_extend.c ****     double elapsed_time = 0;
1025:sieve_extend.c ****     struct timespec start_time,end_time;
1026:sieve_extend.c ****     struct sieve_state *sieve_instance;
1027:sieve_extend.c **** 
1028:sieve_extend.c ****     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_faster;
 10575              		.loc 1 1028 44 view .LVU3586
 10576 3a05 488D3C76 		lea	rdi, [rsi+rsi*2]	# tmp114,
 10577              	.LVL685:
 10578              	# sieve_extend.c:1022: static void tune_benchmark(tuning_result_type* tuning_result, counter_t tuni
1022:sieve_extend.c ****     counter_t passes = 0;
 10579              		.loc 1 1022 94 view .LVU3587
 10580 3a09 55       		push	rbp	#
 10581              		.cfi_def_cfa_offset 24
 10582              		.cfi_offset 6, -24
 10583              	# sieve_extend.c:1028:     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_f
 10584              		.loc 1 1028 44 view .LVU3588
 10585 3a0a 48C1E705 		sal	rdi, 5	# tmp115,
 10586              	# sieve_extend.c:1023:     counter_t passes = 0;
1023:sieve_extend.c ****     counter_t passes = 0;
 10587              		.loc 1 1023 15 view .LVU3589
 10588 3a0e 4531E4   		xor	r12d, r12d	# passes
 10589              	# sieve_extend.c:1022: static void tune_benchmark(tuning_result_type* tuning_result, counter_t tuni
1022:sieve_extend.c ****     counter_t passes = 0;
 10590              		.loc 1 1022 94 view .LVU3590
 10591 3a11 53       		push	rbx	#
 10592              		.cfi_def_cfa_offset 32
 10593              		.cfi_offset 3, -32
 10594              	# sieve_extend.c:1028:     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_f
 10595              		.loc 1 1028 44 view .LVU3591
 10596 3a12 498D1C38 		lea	rbx, [r8+rdi]	# _2,
 10597              	# sieve_extend.c:1032:     clock_gettime(CLOCK_MONOTONIC,&start_time);
1029:sieve_extend.c ****     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep_faster;
1030:sieve_extend.c ****     global_VECTORSTEP_FASTER = tuning_result[tuning_result_index].vectorstep_faster;
1031:sieve_extend.c **** 
GAS LISTING /tmp/cclewcPz.s 			page 286


1032:sieve_extend.c ****     clock_gettime(CLOCK_MONOTONIC,&start_time);
 10598              		.loc 1 1032 5 view .LVU3592
 10599 3a16 BF010000 		mov	edi, 1	#,
 10599      00
 10600              	# sieve_extend.c:1022: static void tune_benchmark(tuning_result_type* tuning_result, counter_t tuni
1022:sieve_extend.c ****     counter_t passes = 0;
 10601              		.loc 1 1022 94 view .LVU3593
 10602 3a1b 488D6424 		lea	rsp, -48[rsp]	#,
 10602      D0
 10603              		.cfi_def_cfa_offset 80
 10604              	# sieve_extend.c:1029:     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep
1029:sieve_extend.c ****     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep_faster;
 10605              		.loc 1 1029 30 view .LVU3594
 10606 3a20 488B5328 		mov	rdx, QWORD PTR 40[rbx]	# _2->mediumstep_faster, _2->mediumstep_faster
 10607              	# sieve_extend.c:1032:     clock_gettime(CLOCK_MONOTONIC,&start_time);
 10608              		.loc 1 1032 5 view .LVU3595
 10609 3a24 4889E6   		mov	rsi, rsp	# tmp119,
 10610              	.LVL686:
 10611              	# sieve_extend.c:1030:     global_VECTORSTEP_FASTER = tuning_result[tuning_result_index].vectorstep
1030:sieve_extend.c **** 
 10612              		.loc 1 1030 30 view .LVU3596
 10613 3a27 488B4B30 		mov	rcx, QWORD PTR 48[rbx]	# _2->vectorstep_faster, _2->vectorstep_faster
 10614              	# sieve_extend.c:1022: static void tune_benchmark(tuning_result_type* tuning_result, counter_t tuni
1022:sieve_extend.c ****     counter_t passes = 0;
 10615              		.loc 1 1022 94 view .LVU3597
 10616 3a2b 64488B04 		mov	rax, QWORD PTR fs:40	# tmp160, MEM[(<address-space-1> long unsigned int *)40B]
 10616      25280000 
 10616      00
 10617 3a34 48894424 		mov	QWORD PTR 40[rsp], rax	# D.7064, tmp160
 10617      28
 10618 3a39 31C0     		xor	eax, eax	# tmp160
1023:sieve_extend.c ****     double elapsed_time = 0;
 10619              		.loc 1 1023 5 is_stmt 1 view .LVU3598
 10620              	.LVL687:
1024:sieve_extend.c ****     struct timespec start_time,end_time;
 10621              		.loc 1 1024 5 view .LVU3599
1025:sieve_extend.c ****     struct sieve_state *sieve_instance;
 10622              		.loc 1 1025 5 view .LVU3600
1026:sieve_extend.c **** 
 10623              		.loc 1 1026 5 view .LVU3601
1028:sieve_extend.c ****     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep_faster;
 10624              		.loc 1 1028 5 view .LVU3602
 10625              	# sieve_extend.c:1028:     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_f
1028:sieve_extend.c ****     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep_faster;
 10626              		.loc 1 1028 29 is_stmt 0 view .LVU3603
 10627 3a3b 488B4320 		mov	rax, QWORD PTR 32[rbx]	# _2->smallstep_faster, _2->smallstep_faster
 10628              	# sieve_extend.c:1029:     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep
1029:sieve_extend.c ****     global_VECTORSTEP_FASTER = tuning_result[tuning_result_index].vectorstep_faster;
 10629              		.loc 1 1029 30 view .LVU3604
 10630 3a3f 48891500 		mov	QWORD PTR global_MEDIUMSTEP_FASTER[rip], rdx	# global_MEDIUMSTEP_FASTER, _2->mediumstep_faster
 10630      000000
 10631              	# sieve_extend.c:1030:     global_VECTORSTEP_FASTER = tuning_result[tuning_result_index].vectorstep
1030:sieve_extend.c **** 
 10632              		.loc 1 1030 30 view .LVU3605
 10633 3a46 48890D00 		mov	QWORD PTR global_VECTORSTEP_FASTER[rip], rcx	# global_VECTORSTEP_FASTER, _2->vectorstep_faster
 10633      000000
 10634              	# sieve_extend.c:1028:     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_f
GAS LISTING /tmp/cclewcPz.s 			page 287


1028:sieve_extend.c ****     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep_faster;
 10635              		.loc 1 1028 29 view .LVU3606
 10636 3a4d 48890500 		mov	QWORD PTR global_SMALLSTEP_FASTER[rip], rax	# global_SMALLSTEP_FASTER, _2->smallstep_faster
 10636      000000
1029:sieve_extend.c ****     global_VECTORSTEP_FASTER = tuning_result[tuning_result_index].vectorstep_faster;
 10637              		.loc 1 1029 5 is_stmt 1 view .LVU3607
1030:sieve_extend.c **** 
 10638              		.loc 1 1030 5 view .LVU3608
 10639              		.loc 1 1032 5 view .LVU3609
 10640 3a54 E8000000 		call	clock_gettime@PLT	#
 10640      00
 10641              	.LVL688:
1033:sieve_extend.c ****     while (elapsed_time <= tuning_result[tuning_result_index].sample_duration && passes < tuning_re
 10642              		.loc 1 1033 5 view .LVU3610
 10643              		.loc 1 1033 11 view .LVU3611
 10644 3a59 C5D957E4 		vxorpd	xmm4, xmm4, xmm4	# elapsed_time
 10645 3a5d C5F92F63 		vcomisd	xmm4, QWORD PTR 64[rbx]	# elapsed_time, _2->sample_duration
 10645      40
 10646 3a62 C5FB103D 		vmovsd	xmm7, QWORD PTR .LC7[rip]	# _58,
 10646      00000000 
 10647 3a6a 7676     		jbe	.L868	#,
 10648 3a6c E99E0000 		jmp	.L869	#
 10648      00
 10649              	.LVL689:
 10650              		.p2align 4,,7
 10651 3a71 0F1F8000 		.p2align 3
 10651      000000
 10652              	.L872:
1034:sieve_extend.c ****         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, tuning_result[tuning_res
 10653              		.loc 1 1034 9 view .LVU3612
 10654              	# sieve_extend.c:1034:         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, t
 10655              		.loc 1 1034 26 is_stmt 0 view .LVU3613
 10656 3a78 488B7308 		mov	rsi, QWORD PTR 8[rbx]	# _2->blocksize_bits, _2->blocksize_bits
 10657              	# sieve_extend.c:1036:         passes++;
1035:sieve_extend.c ****         delete_sieve(sieve_instance);
1036:sieve_extend.c ****         passes++;
 10658              		.loc 1 1036 15 view .LVU3614
 10659 3a7c 4983C401 		add	r12, 1	# passes,
 10660              	.LVL690:
 10661              	# sieve_extend.c:1034:         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, t
1034:sieve_extend.c ****         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, tuning_result[tuning_res
 10662              		.loc 1 1034 26 view .LVU3615
 10663 3a80 488B3B   		mov	rdi, QWORD PTR [rbx]	#, _2->maxints
 10664 3a83 E818F5FF 		call	sieve	#
 10664      FF
 10665              	.LVL691:
 10666              	.LBB565:
 10667              	.LBB566:
 10668              	# sieve_extend.c:118:     free(sieve->bitarray);
 118:sieve_extend.c ****     free(sieve);
 10669              		.loc 1 118 5 view .LVU3616
 10670 3a88 488B38   		mov	rdi, QWORD PTR [rax]	#, sieve_instance_37->bitarray
 10671              	.LBE566:
 10672              	.LBE565:
 10673              	# sieve_extend.c:1034:         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, t
1034:sieve_extend.c ****         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, tuning_result[tuning_res
 10674              		.loc 1 1034 26 view .LVU3617
GAS LISTING /tmp/cclewcPz.s 			page 288


 10675 3a8b 4889C5   		mov	rbp, rax	# sieve_instance, tmp151
 10676              	.LVL692:
1035:sieve_extend.c ****         delete_sieve(sieve_instance);
 10677              		.loc 1 1035 9 is_stmt 1 view .LVU3618
 10678              	.LBB568:
 10679              	.LBI565:
 117:sieve_extend.c ****     free(sieve->bitarray);
 10680              		.loc 1 117 13 view .LVU3619
 10681              	.LBB567:
 118:sieve_extend.c ****     free(sieve);
 10682              		.loc 1 118 5 view .LVU3620
 10683 3a8e E8000000 		call	free@PLT	#
 10683      00
 10684              	.LVL693:
 119:sieve_extend.c **** }
 10685              		.loc 1 119 5 view .LVU3621
 10686 3a93 4889EF   		mov	rdi, rbp	#, sieve_instance
 10687 3a96 E8000000 		call	free@PLT	#
 10687      00
 10688              	.LVL694:
 119:sieve_extend.c **** }
 10689              		.loc 1 119 5 is_stmt 0 view .LVU3622
 10690              	.LBE567:
 10691              	.LBE568:
 10692              		.loc 1 1036 9 is_stmt 1 view .LVU3623
1037:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 10693              		.loc 1 1037 9 view .LVU3624
 10694 3a9b 488D7424 		lea	rsi, 16[rsp]	# tmp122,
 10694      10
 10695 3aa0 BF010000 		mov	edi, 1	#,
 10695      00
 10696 3aa5 E8000000 		call	clock_gettime@PLT	#
 10696      00
 10697              	.LVL695:
1038:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 10698              		.loc 1 1038 9 view .LVU3625
 10699              	# sieve_extend.c:1038:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 10700              		.loc 1 1038 58 is_stmt 0 view .LVU3626
 10701 3aaa C4E1FB2A 		vcvtsi2sd	xmm0, xmm0, QWORD PTR 24[rsp]	# tmp123, end_time.tv_nsec
 10701      442418
 10702              	# sieve_extend.c:1038:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 10703              		.loc 1 1038 64 view .LVU3627
 10704 3ab1 C4E1F32A 		vcvtsi2sd	xmm1, xmm1, QWORD PTR [rsp]	# tmp124, start_time.tv_sec
 10704      0C24
 10705              	# sieve_extend.c:1038:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 10706              		.loc 1 1038 104 view .LVU3628
 10707 3ab7 C4E1E32A 		vcvtsi2sd	xmm3, xmm3, QWORD PTR 8[rsp]	# tmp126, start_time.tv_nsec
 10707      5C2408
 10708              	# sieve_extend.c:1038:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 10709              		.loc 1 1038 40 view .LVU3629
 10710 3abe C4E1EB2A 		vcvtsi2sd	xmm2, xmm2, QWORD PTR 16[rsp]	# tmp127, end_time.tv_sec
 10710      542410
 10711 3ac5 C4E2F19B 		vfmsub132sd	xmm0, xmm1, QWORD PTR .LC8[rip]	# _60, tmp124,
 10711      05000000 
 10711      00
 10712 3ace C4E2E99D 		vfnmadd132sd	xmm3, xmm2, QWORD PTR .LC8[rip]	# _61, tmp127,
 10712      1D000000 
GAS LISTING /tmp/cclewcPz.s 			page 289


 10712      00
 10713              	# sieve_extend.c:1038:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 10714              		.loc 1 1038 22 view .LVU3630
 10715 3ad7 C5FB58E3 		vaddsd	xmm4, xmm0, xmm3	# elapsed_time, _60, _61
 10716              	.LVL696:
1033:sieve_extend.c ****         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, tuning_result[tuning_res
 10717              		.loc 1 1033 11 is_stmt 1 view .LVU3631
 10718 3adb C5F92F63 		vcomisd	xmm4, QWORD PTR 64[rbx]	# elapsed_time, _2->sample_duration
 10718      40
 10719 3ae0 7706     		ja	.L883	#,
 10720              	.LVL697:
 10721              	.L868:
 10722              	# sieve_extend.c:1033:     while (elapsed_time <= tuning_result[tuning_result_index].sample_duratio
1033:sieve_extend.c ****         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, tuning_result[tuning_res
 10723              		.loc 1 1033 79 is_stmt 0 discriminator 1 view .LVU3632
 10724 3ae2 4C396338 		cmp	QWORD PTR 56[rbx], r12	# _2->sample_max, passes
 10725 3ae6 7790     		ja	.L872	#,
 10726              	.L883:
1033:sieve_extend.c ****         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, tuning_result[tuning_res
 10727              		.loc 1 1033 79 discriminator 1 view .LVU3633
 10728 3ae8 C4C1CB2A 		vcvtsi2sd	xmm6, xmm6, r12	# tmp133, passes
 10728      F4
 10729 3aed 4D85E4   		test	r12, r12	# passes
 10730 3af0 7919     		jns	.L874	#,
1033:sieve_extend.c ****         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, tuning_result[tuning_res
 10731              		.loc 1 1033 79 discriminator 1 view .LVU3634
 10732 3af2 4C89E6   		mov	rsi, r12	# tmp135, passes
 10733 3af5 4D89E1   		mov	r9, r12	# tmp136, passes
 10734 3af8 48D1EE   		shr	rsi	# tmp135
 10735 3afb 4183E101 		and	r9d, 1	# tmp136,
 10736 3aff 4C09CE   		or	rsi, r9	# tmp148, tmp136
 10737 3b02 C4E1D32A 		vcvtsi2sd	xmm5, xmm5, rsi	# tmp134, tmp148
 10737      EE
 10738 3b07 C5D358F5 		vaddsd	xmm6, xmm5, xmm5	# tmp133, tmp134, tmp134
 10739              	.L874:
1033:sieve_extend.c ****         sieve_instance = sieve(tuning_result[tuning_result_index].maxints, tuning_result[tuning_res
 10740              		.loc 1 1033 79 discriminator 1 view .LVU3635
 10741 3b0b C5CB5EFC 		vdivsd	xmm7, xmm6, xmm4	# _58, tmp133, elapsed_time
 10742              	.LVL698:
 10743              	.L869:
1039:sieve_extend.c ****     }
1040:sieve_extend.c ****     tuning_result[tuning_result_index].passes = passes;
 10744              		.loc 1 1040 5 is_stmt 1 view .LVU3636
 10745              	# sieve_extend.c:1040:     tuning_result[tuning_result_index].passes = passes;
 10746              		.loc 1 1040 47 is_stmt 0 view .LVU3637
 10747 3b0f 4C896348 		mov	QWORD PTR 72[rbx], r12	# _2->passes, passes
1041:sieve_extend.c ****     tuning_result[tuning_result_index].elapsed_time = elapsed_time;
 10748              		.loc 1 1041 5 is_stmt 1 view .LVU3638
 10749              	# sieve_extend.c:1041:     tuning_result[tuning_result_index].elapsed_time = elapsed_time;
 10750              		.loc 1 1041 53 is_stmt 0 view .LVU3639
 10751 3b13 C5FB1163 		vmovsd	QWORD PTR 80[rbx], xmm4	# _2->elapsed_time, elapsed_time
 10751      50
1042:sieve_extend.c ****     tuning_result[tuning_result_index].avg = passes/elapsed_time;
 10752              		.loc 1 1042 5 is_stmt 1 view .LVU3640
 10753              	# sieve_extend.c:1042:     tuning_result[tuning_result_index].avg = passes/elapsed_time;
 10754              		.loc 1 1042 44 is_stmt 0 view .LVU3641
 10755 3b18 C5FB117B 		vmovsd	QWORD PTR 88[rbx], xmm7	# _2->avg, _58
GAS LISTING /tmp/cclewcPz.s 			page 290


 10755      58
 10756              	# sieve_extend.c:1043: }
1043:sieve_extend.c **** }
 10757              		.loc 1 1043 1 view .LVU3642
 10758 3b1d 488B4424 		mov	rax, QWORD PTR 40[rsp]	# tmp161, D.7064
 10758      28
 10759 3b22 64483304 		xor	rax, QWORD PTR fs:40	# tmp161, MEM[(<address-space-1> long unsigned int *)40B]
 10759      25280000 
 10759      00
 10760 3b2b 750A     		jne	.L884	#,
 10761 3b2d 488D6424 		lea	rsp, 48[rsp]	#,
 10761      30
 10762              		.cfi_remember_state
 10763              		.cfi_def_cfa_offset 32
 10764 3b32 5B       		pop	rbx	#
 10765              		.cfi_def_cfa_offset 24
 10766 3b33 5D       		pop	rbp	#
 10767              		.cfi_def_cfa_offset 16
 10768 3b34 415C     		pop	r12	#
 10769              		.cfi_def_cfa_offset 8
 10770 3b36 C3       		ret	
 10771              	.L884:
 10772              		.cfi_restore_state
 10773 3b37 E8000000 		call	__stack_chk_fail@PLT	#
 10773      00
 10774              	.LVL699:
 10775              		.cfi_endproc
 10776              	.LFE87:
 10778 3b3c 0F1F4000 		.p2align 4
 10779              		.globl	shiftvec
 10781              	shiftvec:
 10782              	.LVL700:
 10783              	.LFB70:
 572:sieve_extend.c ****     int i = 0;
 10784              		.loc 1 572 1 is_stmt 1 view -0
 10785              		.cfi_startproc
 572:sieve_extend.c ****     int i = 0;
 10786              		.loc 1 572 1 is_stmt 0 view .LVU3644
 10787 3b40 F30F1EFA 		endbr64	
 573:sieve_extend.c ****     // MSVC: use steps of 2 for SSE, 4 for AVX2, 8 for AVX512
 10788              		.loc 1 573 5 is_stmt 1 view .LVU3645
 10789              	.LVL701:
 575:sieve_extend.c ****     {
 10790              		.loc 1 575 5 view .LVU3646
 575:sieve_extend.c ****     {
 10791              		.loc 1 575 12 view .LVU3647
 10792              	# sieve_extend.c:575:     for (; i+4 < size; i+=4,dst+=4,src+=4)
 575:sieve_extend.c ****     {
 10793              		.loc 1 575 5 is_stmt 0 view .LVU3648
 10794 3b44 83FA04   		cmp	edx, 4	# size,
 10795 3b47 0F8E9D03 		jle	.L930	#,
 10795      0000
 10796 3b4d 41BB4000 		mov	r11d, 64	# tmp130,
 10796      0000
 10797 3b53 448D42FB 		lea	r8d, -5[rdx]	# tmp131,
 10798 3b57 4489D8   		mov	eax, r11d	# _4, tmp130
 10799 3b5a C5F96EC9 		vmovd	xmm1, ecx	# shift, shift
GAS LISTING /tmp/cclewcPz.s 			page 291


 10800 3b5e 29C8     		sub	eax, ecx	# _4, shift
 10801              	.LBB569:
 10802              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10803              		.loc 1 578 25 view .LVU3649
 10804 3b60 C4E3FD00 		vpermq	ymm2, YMMWORD PTR [rsi], 85	# vect__102.535, MEM[base: src_35(D), index: ivtmp.549_114, off
 10804      1655
 10805              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10806              		.loc 1 578 34 view .LVU3650
 10807 3b66 C5FE6F26 		vmovdqu	ymm4, YMMWORD PTR [rsi]	# tmp269, MEM[base: src_35(D), index: ivtmp.549_114, offset: 0B]
 10808 3b6a C4E1F96E 		vmovq	xmm0, rax	# _4, _4
 10808      C0
 10809 3b6f 41C1E802 		shr	r8d, 2	# _25,
 10810 3b73 41B90100 		mov	r9d, 1	# ivtmp.546,
 10810      0000
 10811              	.LBE569:
 10812              	.LBB570:
 10813              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 10814              		.loc 1 580 34 view .LVU3651
 10815 3b79 C5EDD3E8 		vpsrlq	ymm5, ymm2, xmm0	# vect__57.536, vect__102.535, _4
 10816              	.LBE570:
 10817              	.LBB571:
 10818              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10819              		.loc 1 578 34 view .LVU3652
 10820 3b7d C5DDF3D9 		vpsllq	ymm3, ymm4, xmm1	# vect__104.540, tmp269, shift
 10821 3b81 458D5001 		lea	r10d, 1[r8]	# tmp164,
 10822 3b85 4589C3   		mov	r11d, r8d	# tmp169, _25
 10823              	.LBE571:
 10824              	.LBB572:
 10825              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 10826              		.loc 1 580 22 view .LVU3653
 10827 3b88 C5D5EBF3 		vpor	ymm6, ymm5, ymm3	# vect__58.541, vect__57.536, vect__104.540
 10828 3b8c 4183E307 		and	r11d, 7	# tmp169,
 10829              	.LVL702:
 580:sieve_extend.c ****     }
 10830              		.loc 1 580 22 view .LVU3654
 10831              	.LBE572:
 10832              	.LBB573:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10833              		.loc 1 577 25 is_stmt 1 view .LVU3655
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10834              		.loc 1 578 13 view .LVU3656
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10835              		.loc 1 577 32 view .LVU3657
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10836              		.loc 1 577 25 view .LVU3658
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10837              		.loc 1 578 13 view .LVU3659
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10838              		.loc 1 577 32 view .LVU3660
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10839              		.loc 1 577 25 view .LVU3661
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
GAS LISTING /tmp/cclewcPz.s 			page 292


 10840              		.loc 1 578 13 view .LVU3662
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10841              		.loc 1 577 32 view .LVU3663
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10842              		.loc 1 577 25 view .LVU3664
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10843              		.loc 1 578 13 view .LVU3665
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10844              		.loc 1 577 32 view .LVU3666
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10845              		.loc 1 577 25 view .LVU3667
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10846              		.loc 1 577 25 is_stmt 0 view .LVU3668
 10847              	.LBE573:
 10848              	.LBB574:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10849              		.loc 1 579 25 is_stmt 1 view .LVU3669
 580:sieve_extend.c ****     }
 10850              		.loc 1 580 13 view .LVU3670
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10851              		.loc 1 579 32 view .LVU3671
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10852              		.loc 1 579 25 view .LVU3672
 580:sieve_extend.c ****     }
 10853              		.loc 1 580 13 view .LVU3673
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10854              		.loc 1 579 32 view .LVU3674
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10855              		.loc 1 579 25 view .LVU3675
 580:sieve_extend.c ****     }
 10856              		.loc 1 580 13 view .LVU3676
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10857              		.loc 1 579 32 view .LVU3677
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10858              		.loc 1 579 25 view .LVU3678
 580:sieve_extend.c ****     }
 10859              		.loc 1 580 13 view .LVU3679
 10860 3b90 4183FA01 		cmp	r10d, 1	# tmp164,
 10861 3b94 B8200000 		mov	eax, 32	# ivtmp.549,
 10861      00
 10862              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 10863              		.loc 1 580 22 is_stmt 0 view .LVU3680
 10864 3b99 C5FE7F37 		vmovdqu	YMMWORD PTR [rdi], ymm6	# MEM[base: dst_34(D), index: ivtmp.549_114, offset: 0B], vect__58
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10865              		.loc 1 579 32 is_stmt 1 view .LVU3681
 10866              	.LVL703:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10867              		.loc 1 579 25 view .LVU3682
 10868              	.LBE574:
 575:sieve_extend.c ****     {
 10869              		.loc 1 575 24 view .LVU3683
 575:sieve_extend.c ****     {
 10870              		.loc 1 575 12 view .LVU3684
 10871 3b9d 0F866002 		jbe	.L928	#,
 10871      0000
 10872 3ba3 4585DB   		test	r11d, r11d	# tmp169
GAS LISTING /tmp/cclewcPz.s 			page 293


 10873 3ba6 0F841E01 		je	.L888	#,
 10873      0000
 10874 3bac 4183FB01 		cmp	r11d, 1	# tmp169,
 10875 3bb0 0F84E500 		je	.L915	#,
 10875      0000
 10876 3bb6 4183FB02 		cmp	r11d, 2	# tmp169,
 10877 3bba 0F84B600 		je	.L916	#,
 10877      0000
 10878 3bc0 4183FB03 		cmp	r11d, 3	# tmp169,
 10879 3bc4 0F848700 		je	.L917	#,
 10879      0000
 10880 3bca 4183FB04 		cmp	r11d, 4	# tmp169,
 10881 3bce 745B     		je	.L918	#,
 10882 3bd0 4183FB05 		cmp	r11d, 5	# tmp169,
 10883 3bd4 7430     		je	.L919	#,
 10884 3bd6 4183FB06 		cmp	r11d, 6	# tmp169,
 10885 3bda 0F85DC02 		jne	.L931	#,
 10885      0000
 10886              	.L920:
 10887              	.LVL704:
 10888              	.LBB575:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10889              		.loc 1 577 25 view .LVU3685
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10890              		.loc 1 578 13 view .LVU3686
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10891              		.loc 1 577 32 view .LVU3687
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10892              		.loc 1 577 25 view .LVU3688
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10893              		.loc 1 578 13 view .LVU3689
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10894              		.loc 1 577 32 view .LVU3690
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10895              		.loc 1 577 25 view .LVU3691
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10896              		.loc 1 578 13 view .LVU3692
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10897              		.loc 1 577 32 view .LVU3693
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10898              		.loc 1 577 25 view .LVU3694
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10899              		.loc 1 578 13 view .LVU3695
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10900              		.loc 1 577 32 view .LVU3696
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10901              		.loc 1 577 25 view .LVU3697
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10902              		.loc 1 577 25 is_stmt 0 view .LVU3698
 10903              	.LBE575:
 10904              	.LBB576:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10905              		.loc 1 579 25 is_stmt 1 view .LVU3699
 580:sieve_extend.c ****     }
 10906              		.loc 1 580 13 view .LVU3700
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10907              		.loc 1 579 32 view .LVU3701
GAS LISTING /tmp/cclewcPz.s 			page 294


 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10908              		.loc 1 579 25 view .LVU3702
 580:sieve_extend.c ****     }
 10909              		.loc 1 580 13 view .LVU3703
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10910              		.loc 1 579 32 view .LVU3704
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10911              		.loc 1 579 25 view .LVU3705
 580:sieve_extend.c ****     }
 10912              		.loc 1 580 13 view .LVU3706
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10913              		.loc 1 579 32 view .LVU3707
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10914              		.loc 1 579 25 view .LVU3708
 580:sieve_extend.c ****     }
 10915              		.loc 1 580 13 view .LVU3709
 10916              	.LBE576:
 10917              	.LBB577:
 10918              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10919              		.loc 1 578 25 is_stmt 0 view .LVU3710
 10920 3be0 C463FD00 		vpermq	ymm12, YMMWORD PTR [rsi+rax], 85	# vect__102.535, MEM[base: src_35(D), index: ivtmp.549_114
 10920      240655
 10921 3be7 4183C101 		add	r9d, 1	# ivtmp.546,
 10922              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10923              		.loc 1 578 34 view .LVU3711
 10924 3beb C57E6F34 		vmovdqu	ymm14, YMMWORD PTR [rsi+rax]	# tmp279, MEM[base: src_35(D), index: ivtmp.549_114, offset: 
 10924      06
 10925              	.LBE577:
 10926              	.LBB578:
 10927              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 10928              		.loc 1 580 34 view .LVU3712
 10929 3bf0 C51DD3E8 		vpsrlq	ymm13, ymm12, xmm0	# vect__57.536, vect__102.535, _4
 10930              	.LBE578:
 10931              	.LBB579:
 10932              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10933              		.loc 1 578 34 view .LVU3713
 10934 3bf4 C50DF3F9 		vpsllq	ymm15, ymm14, xmm1	# vect__104.540, tmp279, shift
 10935              	.LBE579:
 10936              	.LBB580:
 10937              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 10938              		.loc 1 580 22 view .LVU3714
 10939 3bf8 C4C115EB 		vpor	ymm2, ymm13, ymm15	# vect__58.541, vect__57.536, vect__104.540
 10939      D7
 10940 3bfd C5FE7F14 		vmovdqu	YMMWORD PTR [rdi+rax], ymm2	# MEM[base: dst_34(D), index: ivtmp.549_114, offset: 0B], vect
 10940      07
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10941              		.loc 1 579 32 is_stmt 1 view .LVU3715
 10942              	.LVL705:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10943              		.loc 1 579 25 view .LVU3716
 10944              	.LBE580:
 575:sieve_extend.c ****     {
GAS LISTING /tmp/cclewcPz.s 			page 295


 10945              		.loc 1 575 24 view .LVU3717
 575:sieve_extend.c ****     {
 10946              		.loc 1 575 12 view .LVU3718
 10947 3c02 4883C020 		add	rax, 32	# ivtmp.549,
 10948              	.L919:
 10949              	.LVL706:
 10950              	.LBB581:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10951              		.loc 1 577 25 view .LVU3719
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10952              		.loc 1 578 13 view .LVU3720
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10953              		.loc 1 577 32 view .LVU3721
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10954              		.loc 1 577 25 view .LVU3722
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10955              		.loc 1 578 13 view .LVU3723
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10956              		.loc 1 577 32 view .LVU3724
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10957              		.loc 1 577 25 view .LVU3725
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10958              		.loc 1 578 13 view .LVU3726
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10959              		.loc 1 577 32 view .LVU3727
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10960              		.loc 1 577 25 view .LVU3728
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10961              		.loc 1 578 13 view .LVU3729
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10962              		.loc 1 577 32 view .LVU3730
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10963              		.loc 1 577 25 view .LVU3731
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 10964              		.loc 1 577 25 is_stmt 0 view .LVU3732
 10965              	.LBE581:
 10966              	.LBB582:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10967              		.loc 1 579 25 is_stmt 1 view .LVU3733
 580:sieve_extend.c ****     }
 10968              		.loc 1 580 13 view .LVU3734
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10969              		.loc 1 579 32 view .LVU3735
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10970              		.loc 1 579 25 view .LVU3736
 580:sieve_extend.c ****     }
 10971              		.loc 1 580 13 view .LVU3737
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10972              		.loc 1 579 32 view .LVU3738
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10973              		.loc 1 579 25 view .LVU3739
 580:sieve_extend.c ****     }
 10974              		.loc 1 580 13 view .LVU3740
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10975              		.loc 1 579 32 view .LVU3741
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 10976              		.loc 1 579 25 view .LVU3742
GAS LISTING /tmp/cclewcPz.s 			page 296


 580:sieve_extend.c ****     }
 10977              		.loc 1 580 13 view .LVU3743
 10978              	.LBE582:
 10979              	.LBB583:
 10980              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10981              		.loc 1 578 25 is_stmt 0 view .LVU3744
 10982 3c06 C4E3FD00 		vpermq	ymm5, YMMWORD PTR [rsi+rax], 85	# vect__102.535, MEM[base: src_35(D), index: ivtmp.549_114,
 10982      2C0655
 10983 3c0d 4183C101 		add	r9d, 1	# ivtmp.546,
 10984              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10985              		.loc 1 578 34 view .LVU3745
 10986 3c11 C5FE6F1C 		vmovdqu	ymm3, YMMWORD PTR [rsi+rax]	# tmp280, MEM[base: src_35(D), index: ivtmp.549_114, offset: 0
 10986      06
 10987              	.LBE583:
 10988              	.LBB584:
 10989              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 10990              		.loc 1 580 34 view .LVU3746
 10991 3c16 C5D5D3E0 		vpsrlq	ymm4, ymm5, xmm0	# vect__57.536, vect__102.535, _4
 10992              	.LBE584:
 10993              	.LBB585:
 10994              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 10995              		.loc 1 578 34 view .LVU3747
 10996 3c1a C5E5F3F1 		vpsllq	ymm6, ymm3, xmm1	# vect__104.540, tmp280, shift
 10997              	.LBE585:
 10998              	.LBB586:
 10999              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11000              		.loc 1 580 22 view .LVU3748
 11001 3c1e C5DDEBFE 		vpor	ymm7, ymm4, ymm6	# vect__58.541, vect__57.536, vect__104.540
 11002 3c22 C5FE7F3C 		vmovdqu	YMMWORD PTR [rdi+rax], ymm7	# MEM[base: dst_34(D), index: ivtmp.549_114, offset: 0B], vect
 11002      07
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11003              		.loc 1 579 32 is_stmt 1 view .LVU3749
 11004              	.LVL707:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11005              		.loc 1 579 25 view .LVU3750
 11006              	.LBE586:
 575:sieve_extend.c ****     {
 11007              		.loc 1 575 24 view .LVU3751
 575:sieve_extend.c ****     {
 11008              		.loc 1 575 12 view .LVU3752
 11009 3c27 4883C020 		add	rax, 32	# ivtmp.549,
 11010              	.L918:
 11011              	.LVL708:
 11012              	.LBB587:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11013              		.loc 1 577 25 view .LVU3753
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11014              		.loc 1 578 13 view .LVU3754
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11015              		.loc 1 577 32 view .LVU3755
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11016              		.loc 1 577 25 view .LVU3756
GAS LISTING /tmp/cclewcPz.s 			page 297


 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11017              		.loc 1 578 13 view .LVU3757
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11018              		.loc 1 577 32 view .LVU3758
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11019              		.loc 1 577 25 view .LVU3759
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11020              		.loc 1 578 13 view .LVU3760
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11021              		.loc 1 577 32 view .LVU3761
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11022              		.loc 1 577 25 view .LVU3762
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11023              		.loc 1 578 13 view .LVU3763
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11024              		.loc 1 577 32 view .LVU3764
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11025              		.loc 1 577 25 view .LVU3765
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11026              		.loc 1 577 25 is_stmt 0 view .LVU3766
 11027              	.LBE587:
 11028              	.LBB588:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11029              		.loc 1 579 25 is_stmt 1 view .LVU3767
 580:sieve_extend.c ****     }
 11030              		.loc 1 580 13 view .LVU3768
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11031              		.loc 1 579 32 view .LVU3769
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11032              		.loc 1 579 25 view .LVU3770
 580:sieve_extend.c ****     }
 11033              		.loc 1 580 13 view .LVU3771
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11034              		.loc 1 579 32 view .LVU3772
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11035              		.loc 1 579 25 view .LVU3773
 580:sieve_extend.c ****     }
 11036              		.loc 1 580 13 view .LVU3774
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11037              		.loc 1 579 32 view .LVU3775
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11038              		.loc 1 579 25 view .LVU3776
 580:sieve_extend.c ****     }
 11039              		.loc 1 580 13 view .LVU3777
 11040              	.LBE588:
 11041              	.LBB589:
 11042              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11043              		.loc 1 578 25 is_stmt 0 view .LVU3778
 11044 3c2b C463FD00 		vpermq	ymm8, YMMWORD PTR [rsi+rax], 85	# vect__102.535, MEM[base: src_35(D), index: ivtmp.549_114,
 11044      040655
 11045 3c32 4183C101 		add	r9d, 1	# ivtmp.546,
 11046              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11047              		.loc 1 578 34 view .LVU3779
 11048 3c36 C57E6F14 		vmovdqu	ymm10, YMMWORD PTR [rsi+rax]	# tmp281, MEM[base: src_35(D), index: ivtmp.549_114, offset: 
 11048      06
GAS LISTING /tmp/cclewcPz.s 			page 298


 11049              	.LBE589:
 11050              	.LBB590:
 11051              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11052              		.loc 1 580 34 view .LVU3780
 11053 3c3b C53DD3C8 		vpsrlq	ymm9, ymm8, xmm0	# vect__57.536, vect__102.535, _4
 11054              	.LBE590:
 11055              	.LBB591:
 11056              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11057              		.loc 1 578 34 view .LVU3781
 11058 3c3f C52DF3D9 		vpsllq	ymm11, ymm10, xmm1	# vect__104.540, tmp281, shift
 11059              	.LBE591:
 11060              	.LBB592:
 11061              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11062              		.loc 1 580 22 view .LVU3782
 11063 3c43 C44135EB 		vpor	ymm12, ymm9, ymm11	# vect__58.541, vect__57.536, vect__104.540
 11063      E3
 11064 3c48 C57E7F24 		vmovdqu	YMMWORD PTR [rdi+rax], ymm12	# MEM[base: dst_34(D), index: ivtmp.549_114, offset: 0B], vec
 11064      07
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11065              		.loc 1 579 32 is_stmt 1 view .LVU3783
 11066              	.LVL709:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11067              		.loc 1 579 25 view .LVU3784
 11068              	.LBE592:
 575:sieve_extend.c ****     {
 11069              		.loc 1 575 24 view .LVU3785
 575:sieve_extend.c ****     {
 11070              		.loc 1 575 12 view .LVU3786
 11071 3c4d 4883C020 		add	rax, 32	# ivtmp.549,
 11072              	.L917:
 11073              	.LVL710:
 11074              	.LBB593:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11075              		.loc 1 577 25 view .LVU3787
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11076              		.loc 1 578 13 view .LVU3788
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11077              		.loc 1 577 32 view .LVU3789
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11078              		.loc 1 577 25 view .LVU3790
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11079              		.loc 1 578 13 view .LVU3791
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11080              		.loc 1 577 32 view .LVU3792
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11081              		.loc 1 577 25 view .LVU3793
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11082              		.loc 1 578 13 view .LVU3794
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11083              		.loc 1 577 32 view .LVU3795
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11084              		.loc 1 577 25 view .LVU3796
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11085              		.loc 1 578 13 view .LVU3797
GAS LISTING /tmp/cclewcPz.s 			page 299


 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11086              		.loc 1 577 32 view .LVU3798
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11087              		.loc 1 577 25 view .LVU3799
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11088              		.loc 1 577 25 is_stmt 0 view .LVU3800
 11089              	.LBE593:
 11090              	.LBB594:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11091              		.loc 1 579 25 is_stmt 1 view .LVU3801
 580:sieve_extend.c ****     }
 11092              		.loc 1 580 13 view .LVU3802
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11093              		.loc 1 579 32 view .LVU3803
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11094              		.loc 1 579 25 view .LVU3804
 580:sieve_extend.c ****     }
 11095              		.loc 1 580 13 view .LVU3805
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11096              		.loc 1 579 32 view .LVU3806
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11097              		.loc 1 579 25 view .LVU3807
 580:sieve_extend.c ****     }
 11098              		.loc 1 580 13 view .LVU3808
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11099              		.loc 1 579 32 view .LVU3809
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11100              		.loc 1 579 25 view .LVU3810
 580:sieve_extend.c ****     }
 11101              		.loc 1 580 13 view .LVU3811
 11102              	.LBE594:
 11103              	.LBB595:
 11104              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11105              		.loc 1 578 25 is_stmt 0 view .LVU3812
 11106 3c51 C463FD00 		vpermq	ymm13, YMMWORD PTR [rsi+rax], 85	# vect__102.535, MEM[base: src_35(D), index: ivtmp.549_114
 11106      2C0655
 11107 3c58 4183C101 		add	r9d, 1	# ivtmp.546,
 11108              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11109              		.loc 1 578 34 view .LVU3813
 11110 3c5c C57E6F3C 		vmovdqu	ymm15, YMMWORD PTR [rsi+rax]	# tmp282, MEM[base: src_35(D), index: ivtmp.549_114, offset: 
 11110      06
 11111              	.LBE595:
 11112              	.LBB596:
 11113              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11114              		.loc 1 580 34 view .LVU3814
 11115 3c61 C515D3F0 		vpsrlq	ymm14, ymm13, xmm0	# vect__57.536, vect__102.535, _4
 11116              	.LBE596:
 11117              	.LBB597:
 11118              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11119              		.loc 1 578 34 view .LVU3815
 11120 3c65 C585F3D1 		vpsllq	ymm2, ymm15, xmm1	# vect__104.540, tmp282, shift
 11121              	.LBE597:
 11122              	.LBB598:
GAS LISTING /tmp/cclewcPz.s 			page 300


 11123              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11124              		.loc 1 580 22 view .LVU3816
 11125 3c69 C58DEBEA 		vpor	ymm5, ymm14, ymm2	# vect__58.541, vect__57.536, vect__104.540
 11126 3c6d C5FE7F2C 		vmovdqu	YMMWORD PTR [rdi+rax], ymm5	# MEM[base: dst_34(D), index: ivtmp.549_114, offset: 0B], vect
 11126      07
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11127              		.loc 1 579 32 is_stmt 1 view .LVU3817
 11128              	.LVL711:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11129              		.loc 1 579 25 view .LVU3818
 11130              	.LBE598:
 575:sieve_extend.c ****     {
 11131              		.loc 1 575 24 view .LVU3819
 575:sieve_extend.c ****     {
 11132              		.loc 1 575 12 view .LVU3820
 11133 3c72 4883C020 		add	rax, 32	# ivtmp.549,
 11134              	.L916:
 11135              	.LVL712:
 11136              	.LBB599:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11137              		.loc 1 577 25 view .LVU3821
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11138              		.loc 1 578 13 view .LVU3822
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11139              		.loc 1 577 32 view .LVU3823
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11140              		.loc 1 577 25 view .LVU3824
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11141              		.loc 1 578 13 view .LVU3825
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11142              		.loc 1 577 32 view .LVU3826
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11143              		.loc 1 577 25 view .LVU3827
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11144              		.loc 1 578 13 view .LVU3828
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11145              		.loc 1 577 32 view .LVU3829
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11146              		.loc 1 577 25 view .LVU3830
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11147              		.loc 1 578 13 view .LVU3831
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11148              		.loc 1 577 32 view .LVU3832
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11149              		.loc 1 577 25 view .LVU3833
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11150              		.loc 1 577 25 is_stmt 0 view .LVU3834
 11151              	.LBE599:
 11152              	.LBB600:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11153              		.loc 1 579 25 is_stmt 1 view .LVU3835
 580:sieve_extend.c ****     }
 11154              		.loc 1 580 13 view .LVU3836
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11155              		.loc 1 579 32 view .LVU3837
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
GAS LISTING /tmp/cclewcPz.s 			page 301


 11156              		.loc 1 579 25 view .LVU3838
 580:sieve_extend.c ****     }
 11157              		.loc 1 580 13 view .LVU3839
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11158              		.loc 1 579 32 view .LVU3840
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11159              		.loc 1 579 25 view .LVU3841
 580:sieve_extend.c ****     }
 11160              		.loc 1 580 13 view .LVU3842
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11161              		.loc 1 579 32 view .LVU3843
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11162              		.loc 1 579 25 view .LVU3844
 580:sieve_extend.c ****     }
 11163              		.loc 1 580 13 view .LVU3845
 11164              	.LBE600:
 11165              	.LBB601:
 11166              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11167              		.loc 1 578 25 is_stmt 0 view .LVU3846
 11168 3c76 C4E3FD00 		vpermq	ymm4, YMMWORD PTR [rsi+rax], 85	# vect__102.535, MEM[base: src_35(D), index: ivtmp.549_114,
 11168      240655
 11169 3c7d 4183C101 		add	r9d, 1	# ivtmp.546,
 11170              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11171              		.loc 1 578 34 view .LVU3847
 11172 3c81 C5FE6F1C 		vmovdqu	ymm3, YMMWORD PTR [rsi+rax]	# tmp283, MEM[base: src_35(D), index: ivtmp.549_114, offset: 0
 11172      06
 11173              	.LBE601:
 11174              	.LBB602:
 11175              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11176              		.loc 1 580 34 view .LVU3848
 11177 3c86 C5DDD3F0 		vpsrlq	ymm6, ymm4, xmm0	# vect__57.536, vect__102.535, _4
 11178              	.LBE602:
 11179              	.LBB603:
 11180              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11181              		.loc 1 578 34 view .LVU3849
 11182 3c8a C5E5F3F9 		vpsllq	ymm7, ymm3, xmm1	# vect__104.540, tmp283, shift
 11183              	.LBE603:
 11184              	.LBB604:
 11185              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11186              		.loc 1 580 22 view .LVU3850
 11187 3c8e C54DEBC7 		vpor	ymm8, ymm6, ymm7	# vect__58.541, vect__57.536, vect__104.540
 11188 3c92 C57E7F04 		vmovdqu	YMMWORD PTR [rdi+rax], ymm8	# MEM[base: dst_34(D), index: ivtmp.549_114, offset: 0B], vect
 11188      07
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11189              		.loc 1 579 32 is_stmt 1 view .LVU3851
 11190              	.LVL713:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11191              		.loc 1 579 25 view .LVU3852
 11192              	.LBE604:
 575:sieve_extend.c ****     {
 11193              		.loc 1 575 24 view .LVU3853
 575:sieve_extend.c ****     {
GAS LISTING /tmp/cclewcPz.s 			page 302


 11194              		.loc 1 575 12 view .LVU3854
 11195 3c97 4883C020 		add	rax, 32	# ivtmp.549,
 11196              	.L915:
 11197              	.LVL714:
 11198              	.LBB605:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11199              		.loc 1 577 25 view .LVU3855
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11200              		.loc 1 578 13 view .LVU3856
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11201              		.loc 1 577 32 view .LVU3857
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11202              		.loc 1 577 25 view .LVU3858
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11203              		.loc 1 578 13 view .LVU3859
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11204              		.loc 1 577 32 view .LVU3860
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11205              		.loc 1 577 25 view .LVU3861
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11206              		.loc 1 578 13 view .LVU3862
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11207              		.loc 1 577 32 view .LVU3863
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11208              		.loc 1 577 25 view .LVU3864
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11209              		.loc 1 578 13 view .LVU3865
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11210              		.loc 1 577 32 view .LVU3866
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11211              		.loc 1 577 25 view .LVU3867
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11212              		.loc 1 577 25 is_stmt 0 view .LVU3868
 11213              	.LBE605:
 11214              	.LBB606:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11215              		.loc 1 579 25 is_stmt 1 view .LVU3869
 580:sieve_extend.c ****     }
 11216              		.loc 1 580 13 view .LVU3870
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11217              		.loc 1 579 32 view .LVU3871
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11218              		.loc 1 579 25 view .LVU3872
 580:sieve_extend.c ****     }
 11219              		.loc 1 580 13 view .LVU3873
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11220              		.loc 1 579 32 view .LVU3874
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11221              		.loc 1 579 25 view .LVU3875
 580:sieve_extend.c ****     }
 11222              		.loc 1 580 13 view .LVU3876
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11223              		.loc 1 579 32 view .LVU3877
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11224              		.loc 1 579 25 view .LVU3878
 580:sieve_extend.c ****     }
 11225              		.loc 1 580 13 view .LVU3879
GAS LISTING /tmp/cclewcPz.s 			page 303


 11226              	.LBE606:
 11227              	.LBB607:
 11228              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11229              		.loc 1 578 25 is_stmt 0 view .LVU3880
 11230 3c9b C463FD00 		vpermq	ymm9, YMMWORD PTR [rsi+rax], 85	# vect__102.535, MEM[base: src_35(D), index: ivtmp.549_114,
 11230      0C0655
 11231 3ca2 4183C101 		add	r9d, 1	# ivtmp.546,
 11232              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11233              		.loc 1 578 34 view .LVU3881
 11234 3ca6 C57E6F1C 		vmovdqu	ymm11, YMMWORD PTR [rsi+rax]	# tmp284, MEM[base: src_35(D), index: ivtmp.549_114, offset: 
 11234      06
 11235              	.LBE607:
 11236              	.LBB608:
 11237              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11238              		.loc 1 580 34 view .LVU3882
 11239 3cab C535D3D0 		vpsrlq	ymm10, ymm9, xmm0	# vect__57.536, vect__102.535, _4
 11240              	.LBE608:
 11241              	.LBB609:
 11242              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11243              		.loc 1 578 34 view .LVU3883
 11244 3caf C525F3E1 		vpsllq	ymm12, ymm11, xmm1	# vect__104.540, tmp284, shift
 11245              	.LBE609:
 11246              	.LBB610:
 11247              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11248              		.loc 1 580 22 view .LVU3884
 11249 3cb3 C4412DEB 		vpor	ymm13, ymm10, ymm12	# vect__58.541, vect__57.536, vect__104.540
 11249      EC
 11250 3cb8 C57E7F2C 		vmovdqu	YMMWORD PTR [rdi+rax], ymm13	# MEM[base: dst_34(D), index: ivtmp.549_114, offset: 0B], vec
 11250      07
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11251              		.loc 1 579 32 is_stmt 1 view .LVU3885
 11252              	.LVL715:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11253              		.loc 1 579 25 view .LVU3886
 11254              	.LBE610:
 575:sieve_extend.c ****     {
 11255              		.loc 1 575 24 view .LVU3887
 575:sieve_extend.c ****     {
 11256              		.loc 1 575 12 view .LVU3888
 11257 3cbd 4883C020 		add	rax, 32	# ivtmp.549,
 11258 3cc1 4539CA   		cmp	r10d, r9d	# tmp164, ivtmp.546
 11259 3cc4 0F863901 		jbe	.L928	#,
 11259      0000
 11260              	.L888:
 11261              	.LVL716:
 11262              	.LBB611:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11263              		.loc 1 577 25 view .LVU3889
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11264              		.loc 1 578 13 view .LVU3890
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11265              		.loc 1 577 32 view .LVU3891
GAS LISTING /tmp/cclewcPz.s 			page 304


 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11266              		.loc 1 577 25 view .LVU3892
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11267              		.loc 1 578 13 view .LVU3893
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11268              		.loc 1 577 32 view .LVU3894
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11269              		.loc 1 577 25 view .LVU3895
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11270              		.loc 1 578 13 view .LVU3896
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11271              		.loc 1 577 32 view .LVU3897
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11272              		.loc 1 577 25 view .LVU3898
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11273              		.loc 1 578 13 view .LVU3899
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11274              		.loc 1 577 32 view .LVU3900
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11275              		.loc 1 577 25 view .LVU3901
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11276              		.loc 1 577 25 is_stmt 0 view .LVU3902
 11277              	.LBE611:
 11278              	.LBB612:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11279              		.loc 1 579 25 is_stmt 1 view .LVU3903
 580:sieve_extend.c ****     }
 11280              		.loc 1 580 13 view .LVU3904
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11281              		.loc 1 579 32 view .LVU3905
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11282              		.loc 1 579 25 view .LVU3906
 580:sieve_extend.c ****     }
 11283              		.loc 1 580 13 view .LVU3907
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11284              		.loc 1 579 32 view .LVU3908
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11285              		.loc 1 579 25 view .LVU3909
 580:sieve_extend.c ****     }
 11286              		.loc 1 580 13 view .LVU3910
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11287              		.loc 1 579 32 view .LVU3911
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11288              		.loc 1 579 25 view .LVU3912
 580:sieve_extend.c ****     }
 11289              		.loc 1 580 13 view .LVU3913
 11290              	.LBE612:
 11291              	.LBB613:
 11292              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11293              		.loc 1 578 25 is_stmt 0 view .LVU3914
 11294 3cca C463FD00 		vpermq	ymm14, YMMWORD PTR [rsi+rax], 85	# vect__102.535, MEM[base: src_35(D), index: ivtmp.549_114
 11294      340655
 11295 3cd1 C4E3FD00 		vpermq	ymm6, YMMWORD PTR 32[rsi+rax], 85	# vect__102.535, MEM[base: src_35(D), index: ivtmp.549_11
 11295      74062055 
 11296              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
GAS LISTING /tmp/cclewcPz.s 			page 305


 11297              		.loc 1 578 34 view .LVU3915
 11298 3cd9 C5FE6F14 		vmovdqu	ymm2, YMMWORD PTR [rsi+rax]	# tmp270, MEM[base: src_35(D), index: ivtmp.549_114, offset: 0
 11298      06
 11299              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11300              		.loc 1 578 25 view .LVU3916
 11301 3cde C463FD00 		vpermq	ymm10, YMMWORD PTR 64[rsi+rax], 85	# vect__102.535, MEM[base: src_35(D), index: ivtmp.549_1
 11301      54064055 
 11302              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11303              		.loc 1 578 34 view .LVU3917
 11304 3ce6 C5FE6F5C 		vmovdqu	ymm3, YMMWORD PTR 32[rsi+rax]	# tmp271, MEM[base: src_35(D), index: ivtmp.549_114, offset:
 11304      0620
 11305 3cec 4183C108 		add	r9d, 8	# ivtmp.546,
 11306              	.LBE613:
 11307              	.LBB614:
 11308              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11309              		.loc 1 580 34 view .LVU3918
 11310 3cf0 C50DD3F8 		vpsrlq	ymm15, ymm14, xmm0	# vect__57.536, vect__102.535, _4
 11311 3cf4 C5CDD3F8 		vpsrlq	ymm7, ymm6, xmm0	# vect__57.536, vect__102.535, _4
 11312              	.LBE614:
 11313              	.LBB615:
 11314              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11315              		.loc 1 578 34 view .LVU3919
 11316 3cf8 C5EDF3E9 		vpsllq	ymm5, ymm2, xmm1	# vect__104.540, tmp270, shift
 11317 3cfc C565F3C1 		vpsllq	ymm8, ymm3, xmm1	# vect__104.540, tmp271, shift
 11318 3d00 C57E6F64 		vmovdqu	ymm12, YMMWORD PTR 64[rsi+rax]	# tmp272, MEM[base: src_35(D), index: ivtmp.549_114, offset
 11318      0640
 11319              	.LBE615:
 11320              	.LBB616:
 11321              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11322              		.loc 1 580 22 view .LVU3920
 11323 3d06 C585EBE5 		vpor	ymm4, ymm15, ymm5	# vect__58.541, vect__57.536, vect__104.540
 11324              	.LBE616:
 11325              	.LBB617:
 11326              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11327              		.loc 1 578 34 view .LVU3921
 11328 3d0a C5FE6F9C 		vmovdqu	ymm3, YMMWORD PTR 128[rsi+rax]	# tmp274, MEM[base: src_35(D), index: ivtmp.549_114, offset
 11328      06800000 
 11328      00
 11329              	.LBE617:
 11330              	.LBB618:
 11331              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11332              		.loc 1 580 22 view .LVU3922
 11333 3d13 C44145EB 		vpor	ymm9, ymm7, ymm8	# vect__58.541, vect__57.536, vect__104.540
 11333      C8
 11334              	.LBE618:
 11335              	.LBB619:
 11336              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11337              		.loc 1 578 25 view .LVU3923
 11338 3d18 C463FD00 		vpermq	ymm15, YMMWORD PTR 96[rsi+rax], 85	# vect__102.535, MEM[base: src_35(D), index: ivtmp.549_1
GAS LISTING /tmp/cclewcPz.s 			page 306


 11338      7C066055 
 11339 3d20 C4E3FD00 		vpermq	ymm7, YMMWORD PTR 128[rsi+rax], 85	# vect__102.535, MEM[base: src_35(D), index: ivtmp.549_1
 11339      BC068000 
 11339      000055
 11340              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11341              		.loc 1 578 34 view .LVU3924
 11342 3d2b C5FE6F6C 		vmovdqu	ymm5, YMMWORD PTR 96[rsi+rax]	# tmp273, MEM[base: src_35(D), index: ivtmp.549_114, offset:
 11342      0660
 11343              	.LBE619:
 11344              	.LBB620:
 11345              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11346              		.loc 1 580 34 view .LVU3925
 11347 3d31 C52DD3D8 		vpsrlq	ymm11, ymm10, xmm0	# vect__57.536, vect__102.535, _4
 11348              	.LBE620:
 11349              	.LBB621:
 11350              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11351              		.loc 1 578 34 view .LVU3926
 11352 3d35 C51DF3E9 		vpsllq	ymm13, ymm12, xmm1	# vect__104.540, tmp272, shift
 11353              	.LBE621:
 11354              	.LBB622:
 11355              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11356              		.loc 1 580 34 view .LVU3927
 11357 3d39 C585D3D0 		vpsrlq	ymm2, ymm15, xmm0	# vect__57.536, vect__102.535, _4
 11358              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11359              		.loc 1 580 22 view .LVU3928
 11360 3d3d C5FE7F24 		vmovdqu	YMMWORD PTR [rdi+rax], ymm4	# MEM[base: dst_34(D), index: ivtmp.549_114, offset: 0B], vect
 11360      07
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11361              		.loc 1 579 32 is_stmt 1 view .LVU3929
 11362              	.LVL717:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11363              		.loc 1 579 25 view .LVU3930
 11364              	.LBE622:
 575:sieve_extend.c ****     {
 11365              		.loc 1 575 24 view .LVU3931
 575:sieve_extend.c ****     {
 11366              		.loc 1 575 12 view .LVU3932
 11367              	.LBB623:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11368              		.loc 1 577 25 view .LVU3933
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11369              		.loc 1 578 13 view .LVU3934
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11370              		.loc 1 577 32 view .LVU3935
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11371              		.loc 1 577 25 view .LVU3936
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11372              		.loc 1 578 13 view .LVU3937
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11373              		.loc 1 577 32 view .LVU3938
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11374              		.loc 1 577 25 view .LVU3939
GAS LISTING /tmp/cclewcPz.s 			page 307


 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11375              		.loc 1 578 13 view .LVU3940
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11376              		.loc 1 577 32 view .LVU3941
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11377              		.loc 1 577 25 view .LVU3942
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11378              		.loc 1 578 13 view .LVU3943
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11379              		.loc 1 577 32 view .LVU3944
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11380              		.loc 1 577 25 view .LVU3945
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11381              		.loc 1 577 25 is_stmt 0 view .LVU3946
 11382              	.LBE623:
 11383              	.LBB624:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11384              		.loc 1 579 25 is_stmt 1 view .LVU3947
 580:sieve_extend.c ****     }
 11385              		.loc 1 580 13 view .LVU3948
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11386              		.loc 1 579 32 view .LVU3949
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11387              		.loc 1 579 25 view .LVU3950
 580:sieve_extend.c ****     }
 11388              		.loc 1 580 13 view .LVU3951
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11389              		.loc 1 579 32 view .LVU3952
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11390              		.loc 1 579 25 view .LVU3953
 580:sieve_extend.c ****     }
 11391              		.loc 1 580 13 view .LVU3954
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11392              		.loc 1 579 32 view .LVU3955
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11393              		.loc 1 579 25 view .LVU3956
 580:sieve_extend.c ****     }
 11394              		.loc 1 580 13 view .LVU3957
 11395              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11396              		.loc 1 580 22 is_stmt 0 view .LVU3958
 11397 3d42 C44125EB 		vpor	ymm14, ymm11, ymm13	# vect__58.541, vect__57.536, vect__104.540
 11397      F5
 11398              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11399              		.loc 1 580 34 view .LVU3959
 11400 3d47 C545D3C0 		vpsrlq	ymm8, ymm7, xmm0	# vect__57.536, vect__102.535, _4
 11401              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11402              		.loc 1 580 22 view .LVU3960
 11403 3d4b C57E7F4C 		vmovdqu	YMMWORD PTR 32[rdi+rax], ymm9	# MEM[base: dst_34(D), index: ivtmp.549_114, offset: 0B], ve
 11403      0720
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11404              		.loc 1 579 32 is_stmt 1 view .LVU3961
 11405              	.LVL718:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11406              		.loc 1 579 25 view .LVU3962
GAS LISTING /tmp/cclewcPz.s 			page 308


 11407              	.LBE624:
 575:sieve_extend.c ****     {
 11408              		.loc 1 575 24 view .LVU3963
 575:sieve_extend.c ****     {
 11409              		.loc 1 575 12 view .LVU3964
 11410              	.LBB625:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11411              		.loc 1 577 25 view .LVU3965
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11412              		.loc 1 578 13 view .LVU3966
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11413              		.loc 1 577 32 view .LVU3967
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11414              		.loc 1 577 25 view .LVU3968
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11415              		.loc 1 578 13 view .LVU3969
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11416              		.loc 1 577 32 view .LVU3970
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11417              		.loc 1 577 25 view .LVU3971
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11418              		.loc 1 578 13 view .LVU3972
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11419              		.loc 1 577 32 view .LVU3973
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11420              		.loc 1 577 25 view .LVU3974
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11421              		.loc 1 578 13 view .LVU3975
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11422              		.loc 1 577 32 view .LVU3976
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11423              		.loc 1 577 25 view .LVU3977
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11424              		.loc 1 577 25 is_stmt 0 view .LVU3978
 11425              	.LBE625:
 11426              	.LBB626:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11427              		.loc 1 579 25 is_stmt 1 view .LVU3979
 580:sieve_extend.c ****     }
 11428              		.loc 1 580 13 view .LVU3980
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11429              		.loc 1 579 32 view .LVU3981
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11430              		.loc 1 579 25 view .LVU3982
 580:sieve_extend.c ****     }
 11431              		.loc 1 580 13 view .LVU3983
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11432              		.loc 1 579 32 view .LVU3984
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11433              		.loc 1 579 25 view .LVU3985
 580:sieve_extend.c ****     }
 11434              		.loc 1 580 13 view .LVU3986
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11435              		.loc 1 579 32 view .LVU3987
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11436              		.loc 1 579 25 view .LVU3988
 580:sieve_extend.c ****     }
GAS LISTING /tmp/cclewcPz.s 			page 309


 11437              		.loc 1 580 13 view .LVU3989
 11438              	.LBE626:
 11439              	.LBB627:
 11440              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11441              		.loc 1 578 25 is_stmt 0 view .LVU3990
 11442 3d51 C463FD00 		vpermq	ymm11, YMMWORD PTR 160[rsi+rax], 85	# vect__102.535, MEM[base: src_35(D), index: ivtmp.549_
 11442      9C06A000 
 11442      000055
 11443              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11444              		.loc 1 578 34 view .LVU3991
 11445 3d5c C5D5F3E1 		vpsllq	ymm4, ymm5, xmm1	# vect__104.540, tmp273, shift
 11446 3d60 C565F3C9 		vpsllq	ymm9, ymm3, xmm1	# vect__104.540, tmp274, shift
 11447 3d64 C57E6FAC 		vmovdqu	ymm13, YMMWORD PTR 160[rsi+rax]	# tmp275, MEM[base: src_35(D), index: ivtmp.549_114, offse
 11447      06A00000 
 11447      00
 11448              	.LBE627:
 11449              	.LBB628:
 11450              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11451              		.loc 1 580 22 view .LVU3992
 11452 3d6d C5EDEBF4 		vpor	ymm6, ymm2, ymm4	# vect__58.541, vect__57.536, vect__104.540
 11453              	.LBE628:
 11454              	.LBB629:
 11455              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11456              		.loc 1 578 34 view .LVU3993
 11457 3d71 C5FE6F9C 		vmovdqu	ymm3, YMMWORD PTR 224[rsi+rax]	# tmp277, MEM[base: src_35(D), index: ivtmp.549_114, offset
 11457      06E00000 
 11457      00
 11458              	.LBE629:
 11459              	.LBB630:
 11460              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11461              		.loc 1 580 22 view .LVU3994
 11462 3d7a C4413DEB 		vpor	ymm10, ymm8, ymm9	# vect__58.541, vect__57.536, vect__104.540
 11462      D1
 11463              	.LBE630:
 11464              	.LBB631:
 11465              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11466              		.loc 1 578 25 view .LVU3995
 11467 3d7f C4E3FD00 		vpermq	ymm2, YMMWORD PTR 192[rsi+rax], 85	# vect__102.535, MEM[base: src_35(D), index: ivtmp.549_1
 11467      9406C000 
 11467      000055
 11468 3d8a C463FD00 		vpermq	ymm8, YMMWORD PTR 224[rsi+rax], 85	# vect__102.535, MEM[base: src_35(D), index: ivtmp.549_1
 11468      8406E000 
 11468      000055
 11469              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11470              		.loc 1 578 34 view .LVU3996
 11471 3d95 C5FE6FA4 		vmovdqu	ymm4, YMMWORD PTR 192[rsi+rax]	# tmp276, MEM[base: src_35(D), index: ivtmp.549_114, offset
 11471      06C00000 
 11471      00
 11472              	.LBE631:
 11473              	.LBB632:
GAS LISTING /tmp/cclewcPz.s 			page 310


 11474              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11475              		.loc 1 580 22 view .LVU3997
 11476 3d9e C57E7F74 		vmovdqu	YMMWORD PTR 64[rdi+rax], ymm14	# MEM[base: dst_34(D), index: ivtmp.549_114, offset: 0B], v
 11476      0740
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11477              		.loc 1 579 32 is_stmt 1 view .LVU3998
 11478              	.LVL719:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11479              		.loc 1 579 25 view .LVU3999
 11480              	.LBE632:
 575:sieve_extend.c ****     {
 11481              		.loc 1 575 24 view .LVU4000
 575:sieve_extend.c ****     {
 11482              		.loc 1 575 12 view .LVU4001
 11483              	.LBB633:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11484              		.loc 1 577 25 view .LVU4002
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11485              		.loc 1 578 13 view .LVU4003
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11486              		.loc 1 577 32 view .LVU4004
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11487              		.loc 1 577 25 view .LVU4005
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11488              		.loc 1 578 13 view .LVU4006
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11489              		.loc 1 577 32 view .LVU4007
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11490              		.loc 1 577 25 view .LVU4008
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11491              		.loc 1 578 13 view .LVU4009
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11492              		.loc 1 577 32 view .LVU4010
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11493              		.loc 1 577 25 view .LVU4011
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11494              		.loc 1 578 13 view .LVU4012
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11495              		.loc 1 577 32 view .LVU4013
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11496              		.loc 1 577 25 view .LVU4014
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11497              		.loc 1 577 25 is_stmt 0 view .LVU4015
 11498              	.LBE633:
 11499              	.LBB634:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11500              		.loc 1 579 25 is_stmt 1 view .LVU4016
 580:sieve_extend.c ****     }
 11501              		.loc 1 580 13 view .LVU4017
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11502              		.loc 1 579 32 view .LVU4018
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11503              		.loc 1 579 25 view .LVU4019
 580:sieve_extend.c ****     }
 11504              		.loc 1 580 13 view .LVU4020
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
GAS LISTING /tmp/cclewcPz.s 			page 311


 11505              		.loc 1 579 32 view .LVU4021
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11506              		.loc 1 579 25 view .LVU4022
 580:sieve_extend.c ****     }
 11507              		.loc 1 580 13 view .LVU4023
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11508              		.loc 1 579 32 view .LVU4024
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11509              		.loc 1 579 25 view .LVU4025
 580:sieve_extend.c ****     }
 11510              		.loc 1 580 13 view .LVU4026
 11511              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11512              		.loc 1 580 34 is_stmt 0 view .LVU4027
 11513 3da4 C525D3E0 		vpsrlq	ymm12, ymm11, xmm0	# vect__57.536, vect__102.535, _4
 11514              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11515              		.loc 1 580 22 view .LVU4028
 11516 3da8 C5FE7F74 		vmovdqu	YMMWORD PTR 96[rdi+rax], ymm6	# MEM[base: dst_34(D), index: ivtmp.549_114, offset: 0B], ve
 11516      0760
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11517              		.loc 1 579 32 is_stmt 1 view .LVU4029
 11518              	.LVL720:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11519              		.loc 1 579 25 view .LVU4030
 11520              	.LBE634:
 575:sieve_extend.c ****     {
 11521              		.loc 1 575 24 view .LVU4031
 575:sieve_extend.c ****     {
 11522              		.loc 1 575 12 view .LVU4032
 11523              	.LBB635:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11524              		.loc 1 577 25 view .LVU4033
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11525              		.loc 1 578 13 view .LVU4034
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11526              		.loc 1 577 32 view .LVU4035
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11527              		.loc 1 577 25 view .LVU4036
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11528              		.loc 1 578 13 view .LVU4037
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11529              		.loc 1 577 32 view .LVU4038
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11530              		.loc 1 577 25 view .LVU4039
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11531              		.loc 1 578 13 view .LVU4040
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11532              		.loc 1 577 32 view .LVU4041
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11533              		.loc 1 577 25 view .LVU4042
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11534              		.loc 1 578 13 view .LVU4043
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11535              		.loc 1 577 32 view .LVU4044
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11536              		.loc 1 577 25 view .LVU4045
GAS LISTING /tmp/cclewcPz.s 			page 312


 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11537              		.loc 1 577 25 is_stmt 0 view .LVU4046
 11538              	.LBE635:
 11539              	.LBB636:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11540              		.loc 1 579 25 is_stmt 1 view .LVU4047
 580:sieve_extend.c ****     }
 11541              		.loc 1 580 13 view .LVU4048
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11542              		.loc 1 579 32 view .LVU4049
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11543              		.loc 1 579 25 view .LVU4050
 580:sieve_extend.c ****     }
 11544              		.loc 1 580 13 view .LVU4051
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11545              		.loc 1 579 32 view .LVU4052
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11546              		.loc 1 579 25 view .LVU4053
 580:sieve_extend.c ****     }
 11547              		.loc 1 580 13 view .LVU4054
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11548              		.loc 1 579 32 view .LVU4055
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11549              		.loc 1 579 25 view .LVU4056
 580:sieve_extend.c ****     }
 11550              		.loc 1 580 13 view .LVU4057
 11551              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11552              		.loc 1 580 22 is_stmt 0 view .LVU4058
 11553 3dae C57E7F94 		vmovdqu	YMMWORD PTR 128[rdi+rax], ymm10	# MEM[base: dst_34(D), index: ivtmp.549_114, offset: 0B], 
 11553      07800000 
 11553      00
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11554              		.loc 1 579 32 is_stmt 1 view .LVU4059
 11555              	.LVL721:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11556              		.loc 1 579 25 view .LVU4060
 11557              	.LBE636:
 575:sieve_extend.c ****     {
 11558              		.loc 1 575 24 view .LVU4061
 575:sieve_extend.c ****     {
 11559              		.loc 1 575 12 view .LVU4062
 11560              	.LBB637:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11561              		.loc 1 577 25 view .LVU4063
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11562              		.loc 1 578 13 view .LVU4064
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11563              		.loc 1 577 32 view .LVU4065
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11564              		.loc 1 577 25 view .LVU4066
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11565              		.loc 1 578 13 view .LVU4067
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11566              		.loc 1 577 32 view .LVU4068
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11567              		.loc 1 577 25 view .LVU4069
GAS LISTING /tmp/cclewcPz.s 			page 313


 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11568              		.loc 1 578 13 view .LVU4070
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11569              		.loc 1 577 32 view .LVU4071
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11570              		.loc 1 577 25 view .LVU4072
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11571              		.loc 1 578 13 view .LVU4073
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11572              		.loc 1 577 32 view .LVU4074
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11573              		.loc 1 577 25 view .LVU4075
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11574              		.loc 1 577 25 is_stmt 0 view .LVU4076
 11575              	.LBE637:
 11576              	.LBB638:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11577              		.loc 1 579 25 is_stmt 1 view .LVU4077
 580:sieve_extend.c ****     }
 11578              		.loc 1 580 13 view .LVU4078
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11579              		.loc 1 579 32 view .LVU4079
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11580              		.loc 1 579 25 view .LVU4080
 580:sieve_extend.c ****     }
 11581              		.loc 1 580 13 view .LVU4081
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11582              		.loc 1 579 32 view .LVU4082
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11583              		.loc 1 579 25 view .LVU4083
 580:sieve_extend.c ****     }
 11584              		.loc 1 580 13 view .LVU4084
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11585              		.loc 1 579 32 view .LVU4085
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11586              		.loc 1 579 25 view .LVU4086
 580:sieve_extend.c ****     }
 11587              		.loc 1 580 13 view .LVU4087
 11588              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11589              		.loc 1 580 34 is_stmt 0 view .LVU4088
 11590 3db7 C5EDD3E8 		vpsrlq	ymm5, ymm2, xmm0	# vect__57.536, vect__102.535, _4
 11591              	.LBE638:
 11592              	.LBB639:
 11593              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11594              		.loc 1 578 34 view .LVU4089
 11595 3dbb C515F3F1 		vpsllq	ymm14, ymm13, xmm1	# vect__104.540, tmp275, shift
 11596              	.LBE639:
 11597              	.LBB640:
 11598              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11599              		.loc 1 580 34 view .LVU4090
 11600 3dbf C53DD3C8 		vpsrlq	ymm9, ymm8, xmm0	# vect__57.536, vect__102.535, _4
 11601              	.LBE640:
 11602              	.LBB641:
 11603              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
GAS LISTING /tmp/cclewcPz.s 			page 314


 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11604              		.loc 1 578 34 view .LVU4091
 11605 3dc3 C5DDF3F1 		vpsllq	ymm6, ymm4, xmm1	# vect__104.540, tmp276, shift
 11606 3dc7 C565F3D1 		vpsllq	ymm10, ymm3, xmm1	# vect__104.540, tmp277, shift
 11607              	.LBE641:
 11608              	.LBB642:
 11609              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11610              		.loc 1 580 22 view .LVU4092
 11611 3dcb C4411DEB 		vpor	ymm15, ymm12, ymm14	# vect__58.541, vect__57.536, vect__104.540
 11611      FE
 11612 3dd0 C5D5EBFE 		vpor	ymm7, ymm5, ymm6	# vect__58.541, vect__57.536, vect__104.540
 11613 3dd4 C57E7FBC 		vmovdqu	YMMWORD PTR 160[rdi+rax], ymm15	# MEM[base: dst_34(D), index: ivtmp.549_114, offset: 0B], 
 11613      07A00000 
 11613      00
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11614              		.loc 1 579 32 is_stmt 1 view .LVU4093
 11615              	.LVL722:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11616              		.loc 1 579 25 view .LVU4094
 11617              	.LBE642:
 575:sieve_extend.c ****     {
 11618              		.loc 1 575 24 view .LVU4095
 575:sieve_extend.c ****     {
 11619              		.loc 1 575 12 view .LVU4096
 11620              	.LBB643:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11621              		.loc 1 577 25 view .LVU4097
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11622              		.loc 1 578 13 view .LVU4098
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11623              		.loc 1 577 32 view .LVU4099
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11624              		.loc 1 577 25 view .LVU4100
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11625              		.loc 1 578 13 view .LVU4101
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11626              		.loc 1 577 32 view .LVU4102
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11627              		.loc 1 577 25 view .LVU4103
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11628              		.loc 1 578 13 view .LVU4104
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11629              		.loc 1 577 32 view .LVU4105
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11630              		.loc 1 577 25 view .LVU4106
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11631              		.loc 1 578 13 view .LVU4107
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11632              		.loc 1 577 32 view .LVU4108
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11633              		.loc 1 577 25 view .LVU4109
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11634              		.loc 1 577 25 is_stmt 0 view .LVU4110
 11635              	.LBE643:
 11636              	.LBB644:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
GAS LISTING /tmp/cclewcPz.s 			page 315


 11637              		.loc 1 579 25 is_stmt 1 view .LVU4111
 580:sieve_extend.c ****     }
 11638              		.loc 1 580 13 view .LVU4112
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11639              		.loc 1 579 32 view .LVU4113
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11640              		.loc 1 579 25 view .LVU4114
 580:sieve_extend.c ****     }
 11641              		.loc 1 580 13 view .LVU4115
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11642              		.loc 1 579 32 view .LVU4116
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11643              		.loc 1 579 25 view .LVU4117
 580:sieve_extend.c ****     }
 11644              		.loc 1 580 13 view .LVU4118
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11645              		.loc 1 579 32 view .LVU4119
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11646              		.loc 1 579 25 view .LVU4120
 580:sieve_extend.c ****     }
 11647              		.loc 1 580 13 view .LVU4121
 11648              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11649              		.loc 1 580 22 is_stmt 0 view .LVU4122
 11650 3ddd C44135EB 		vpor	ymm11, ymm9, ymm10	# vect__58.541, vect__57.536, vect__104.540
 11650      DA
 11651 3de2 C5FE7FBC 		vmovdqu	YMMWORD PTR 192[rdi+rax], ymm7	# MEM[base: dst_34(D), index: ivtmp.549_114, offset: 0B], v
 11651      07C00000 
 11651      00
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11652              		.loc 1 579 32 is_stmt 1 view .LVU4123
 11653              	.LVL723:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11654              		.loc 1 579 25 view .LVU4124
 11655              	.LBE644:
 575:sieve_extend.c ****     {
 11656              		.loc 1 575 24 view .LVU4125
 575:sieve_extend.c ****     {
 11657              		.loc 1 575 12 view .LVU4126
 11658              	.LBB645:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11659              		.loc 1 577 25 view .LVU4127
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11660              		.loc 1 578 13 view .LVU4128
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11661              		.loc 1 577 32 view .LVU4129
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11662              		.loc 1 577 25 view .LVU4130
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11663              		.loc 1 578 13 view .LVU4131
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11664              		.loc 1 577 32 view .LVU4132
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11665              		.loc 1 577 25 view .LVU4133
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11666              		.loc 1 578 13 view .LVU4134
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
GAS LISTING /tmp/cclewcPz.s 			page 316


 11667              		.loc 1 577 32 view .LVU4135
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11668              		.loc 1 577 25 view .LVU4136
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11669              		.loc 1 578 13 view .LVU4137
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11670              		.loc 1 577 32 view .LVU4138
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11671              		.loc 1 577 25 view .LVU4139
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11672              		.loc 1 577 25 is_stmt 0 view .LVU4140
 11673              	.LBE645:
 11674              	.LBB646:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11675              		.loc 1 579 25 is_stmt 1 view .LVU4141
 580:sieve_extend.c ****     }
 11676              		.loc 1 580 13 view .LVU4142
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11677              		.loc 1 579 32 view .LVU4143
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11678              		.loc 1 579 25 view .LVU4144
 580:sieve_extend.c ****     }
 11679              		.loc 1 580 13 view .LVU4145
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11680              		.loc 1 579 32 view .LVU4146
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11681              		.loc 1 579 25 view .LVU4147
 580:sieve_extend.c ****     }
 11682              		.loc 1 580 13 view .LVU4148
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11683              		.loc 1 579 32 view .LVU4149
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11684              		.loc 1 579 25 view .LVU4150
 580:sieve_extend.c ****     }
 11685              		.loc 1 580 13 view .LVU4151
 11686              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11687              		.loc 1 580 22 is_stmt 0 view .LVU4152
 11688 3deb C57E7F9C 		vmovdqu	YMMWORD PTR 224[rdi+rax], ymm11	# MEM[base: dst_34(D), index: ivtmp.549_114, offset: 0B], 
 11688      07E00000 
 11688      00
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11689              		.loc 1 579 32 is_stmt 1 view .LVU4153
 11690              	.LVL724:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11691              		.loc 1 579 25 view .LVU4154
 11692              	.LBE646:
 575:sieve_extend.c ****     {
 11693              		.loc 1 575 24 view .LVU4155
 575:sieve_extend.c ****     {
 11694              		.loc 1 575 12 view .LVU4156
 11695 3df4 48050001 		add	rax, 256	# ivtmp.549,
 11695      0000
 11696 3dfa 4539CA   		cmp	r10d, r9d	# tmp164, ivtmp.546
 11697 3dfd 0F87C7FE 		ja	.L888	#,
 11697      FFFF
 11698              	.L928:
GAS LISTING /tmp/cclewcPz.s 			page 317


 11699 3e03 4589C3   		mov	r11d, r8d	# _25, _25
 11700 3e06 428D0495 		lea	eax, 0[0+r10*4]	# i,
 11700      00000000 
 11701 3e0e 4983C301 		add	r11, 1	# tmp140,
 11702 3e12 49C1E305 		sal	r11, 5	# _105,
 11703 3e16 4C01DF   		add	rdi, r11	# dst, _105
 11704 3e19 4C01DE   		add	rsi, r11	# src, _105
 11705 3e1c C5F877   		vzeroupper
 11706              	.LVL725:
 11707              	.L889:
 582:sieve_extend.c ****     {
 11708              		.loc 1 582 12 view .LVU4157
 11709              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 11710              		.loc 1 582 5 is_stmt 0 view .LVU4158
 11711 3e1f 39C2     		cmp	edx, eax	# size, i
 11712 3e21 0F8E9400 		jle	.L932	#,
 11712      0000
 11713              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11714              		.loc 1 584 35 view .LVU4159
 11715 3e27 4C8B5608 		mov	r10, QWORD PTR 8[rsi]	# _57, MEM[(const uint64_t *)src_30 + 8B]
 11716 3e2b 41B84000 		mov	r8d, 64	# tmp142,
 11716      0000
 11717              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11718              		.loc 1 584 23 view .LVU4160
 11719 3e31 C462F3F7 		shrx	r9, QWORD PTR [rsi], rcx	# tmp143, *src_30, shift
 11719      0E
 11720 3e36 4129C8   		sub	r8d, ecx	# _97, shift
 584:sieve_extend.c ****     }    
 11721              		.loc 1 584 9 is_stmt 1 view .LVU4161
 11722              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11723              		.loc 1 584 43 is_stmt 0 view .LVU4162
 11724 3e39 C442B9F7 		shlx	r11, r10, r8	# tmp145, _57, _97
 11724      DA
 11725              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11726              		.loc 1 584 32 view .LVU4163
 11727 3e3e 4D09D9   		or	r9, r11	# tmp146, tmp145
 11728 3e41 4C890F   		mov	QWORD PTR [rdi], r9	# *dst_86, tmp146
 582:sieve_extend.c ****     {
 11729              		.loc 1 582 22 is_stmt 1 view .LVU4164
 11730              	.LVL726:
 582:sieve_extend.c ****     {
 11731              		.loc 1 582 12 view .LVU4165
 11732              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 11733              		.loc 1 582 22 is_stmt 0 view .LVU4166
 11734 3e44 448D4801 		lea	r9d, 1[rax]	# i,
 11735              	.LVL727:
 11736              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 11737              		.loc 1 582 5 view .LVU4167
 11738 3e48 4439CA   		cmp	edx, r9d	# size, i
 11739 3e4b 7E6D     		jle	.L929	#,
GAS LISTING /tmp/cclewcPz.s 			page 318


 584:sieve_extend.c ****     }    
 11740              		.loc 1 584 9 is_stmt 1 view .LVU4168
 11741              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11742              		.loc 1 584 35 is_stmt 0 view .LVU4169
 11743 3e4d 4C8B4E10 		mov	r9, QWORD PTR 16[rsi]	# _109, MEM[(const uint64_t *)src_30 + 16B]
 11744              	.LVL728:
 11745              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11746              		.loc 1 584 23 view .LVU4170
 11747 3e51 C442F3F7 		shrx	r10, r10, rcx	# tmp148, _57, shift
 11747      D2
 11748              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11749              		.loc 1 584 43 view .LVU4171
 11750 3e56 C442B9F7 		shlx	r11, r9, r8	# tmp149, _109, _97
 11750      D9
 11751              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11752              		.loc 1 584 32 view .LVU4172
 11753 3e5b 4D09DA   		or	r10, r11	# tmp150, tmp149
 11754 3e5e 4C895708 		mov	QWORD PTR 8[rdi], r10	# MEM[(uint64_t *)dst_86 + 8B], tmp150
 582:sieve_extend.c ****     {
 11755              		.loc 1 582 22 is_stmt 1 view .LVU4173
 11756              	.LVL729:
 582:sieve_extend.c ****     {
 11757              		.loc 1 582 12 view .LVU4174
 11758              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 11759              		.loc 1 582 22 is_stmt 0 view .LVU4175
 11760 3e62 448D5002 		lea	r10d, 2[rax]	# i,
 11761              	.LVL730:
 11762              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 11763              		.loc 1 582 5 view .LVU4176
 11764 3e66 4439D2   		cmp	edx, r10d	# size, i
 11765 3e69 7E4F     		jle	.L929	#,
 584:sieve_extend.c ****     }    
 11766              		.loc 1 584 9 is_stmt 1 view .LVU4177
 11767              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11768              		.loc 1 584 35 is_stmt 0 view .LVU4178
 11769 3e6b 4C8B5618 		mov	r10, QWORD PTR 24[rsi]	# _54, MEM[(const uint64_t *)src_30 + 24B]
 11770              	.LVL731:
 11771              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11772              		.loc 1 584 23 view .LVU4179
 11773 3e6f C442F3F7 		shrx	r9, r9, rcx	# tmp152, _109, shift
 11773      C9
 11774              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11775              		.loc 1 584 43 view .LVU4180
 11776 3e74 C442B9F7 		shlx	r11, r10, r8	# tmp153, _54, _97
 11776      DA
 11777              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11778              		.loc 1 584 32 view .LVU4181
GAS LISTING /tmp/cclewcPz.s 			page 319


 11779 3e79 4D09D9   		or	r9, r11	# tmp154, tmp153
 11780 3e7c 4C894F10 		mov	QWORD PTR 16[rdi], r9	# MEM[(uint64_t *)dst_86 + 16B], tmp154
 582:sieve_extend.c ****     {
 11781              		.loc 1 582 22 is_stmt 1 view .LVU4182
 11782              	.LVL732:
 582:sieve_extend.c ****     {
 11783              		.loc 1 582 12 view .LVU4183
 11784              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 11785              		.loc 1 582 22 is_stmt 0 view .LVU4184
 11786 3e80 448D4803 		lea	r9d, 3[rax]	# i,
 11787              	.LVL733:
 11788              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 11789              		.loc 1 582 5 view .LVU4185
 11790 3e84 4439CA   		cmp	edx, r9d	# size, i
 11791 3e87 7E31     		jle	.L929	#,
 584:sieve_extend.c ****     }    
 11792              		.loc 1 584 9 is_stmt 1 view .LVU4186
 11793              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11794              		.loc 1 584 35 is_stmt 0 view .LVU4187
 11795 3e89 4C8B4E20 		mov	r9, QWORD PTR 32[rsi]	# _77, MEM[(const uint64_t *)src_30 + 32B]
 11796              	.LVL734:
 11797              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 11798              		.loc 1 582 22 view .LVU4188
 11799 3e8d 83C004   		add	eax, 4	# i,
 11800              	.LVL735:
 11801              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11802              		.loc 1 584 23 view .LVU4189
 11803 3e90 C442F3F7 		shrx	r10, r10, rcx	# tmp156, _54, shift
 11803      D2
 11804              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11805              		.loc 1 584 43 view .LVU4190
 11806 3e95 C442B9F7 		shlx	r11, r9, r8	# tmp157, _77, _97
 11806      D9
 11807              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11808              		.loc 1 584 32 view .LVU4191
 11809 3e9a 4D09DA   		or	r10, r11	# tmp158, tmp157
 11810              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 11811              		.loc 1 582 5 view .LVU4192
 11812 3e9d 39C2     		cmp	edx, eax	# size, i
 11813              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11814              		.loc 1 584 32 view .LVU4193
 11815 3e9f 4C895718 		mov	QWORD PTR 24[rdi], r10	# MEM[(uint64_t *)dst_86 + 24B], tmp158
 582:sieve_extend.c ****     {
 11816              		.loc 1 582 22 is_stmt 1 view .LVU4194
 11817              	.LVL736:
 582:sieve_extend.c ****     {
 11818              		.loc 1 582 12 view .LVU4195
 11819              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
GAS LISTING /tmp/cclewcPz.s 			page 320


 582:sieve_extend.c ****     {
 11820              		.loc 1 582 5 is_stmt 0 view .LVU4196
 11821 3ea3 7E15     		jle	.L929	#,
 584:sieve_extend.c ****     }    
 11822              		.loc 1 584 9 is_stmt 1 discriminator 2 view .LVU4197
 11823              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11824              		.loc 1 584 43 is_stmt 0 discriminator 2 view .LVU4198
 11825 3ea5 488B5628 		mov	rdx, QWORD PTR 40[rsi]	# MEM[(const uint64_t *)src_30 + 40B], MEM[(const uint64_t *)src_30 + 4
 11826              	.LVL737:
 11827              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11828              		.loc 1 584 23 discriminator 2 view .LVU4199
 11829 3ea9 C4C2F3F7 		shrx	rcx, r9, rcx	# tmp162, _77, shift
 11829      C9
 11830              	.LVL738:
 11831              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11832              		.loc 1 584 43 discriminator 2 view .LVU4200
 11833 3eae C4E2B9F7 		shlx	rsi, rdx, r8	# tmp160, MEM[(const uint64_t *)src_30 + 40B], _97
 11833      F2
 11834              	.LVL739:
 11835              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 11836              		.loc 1 584 32 discriminator 2 view .LVU4201
 11837 3eb3 4809F1   		or	rcx, rsi	# tmp163, tmp160
 11838 3eb6 48894F20 		mov	QWORD PTR 32[rdi], rcx	# MEM[(uint64_t *)dst_86 + 32B], tmp163
 582:sieve_extend.c ****     {
 11839              		.loc 1 582 22 is_stmt 1 discriminator 2 view .LVU4202
 11840              	.LVL740:
 582:sieve_extend.c ****     {
 11841              		.loc 1 582 12 discriminator 2 view .LVU4203
 11842              	.L929:
 11843              	# sieve_extend.c:586: }
 586:sieve_extend.c **** 
 11844              		.loc 1 586 1 is_stmt 0 view .LVU4204
 11845 3eba C3       		ret	
 11846              	.LVL741:
 11847              	.L932:
 586:sieve_extend.c **** 
 11848              		.loc 1 586 1 view .LVU4205
 11849 3ebb C3       		ret	
 11850              	.LVL742:
 11851              	.L931:
 11852              	.LBB647:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11853              		.loc 1 577 25 is_stmt 1 view .LVU4206
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11854              		.loc 1 578 13 view .LVU4207
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11855              		.loc 1 577 32 view .LVU4208
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11856              		.loc 1 577 25 view .LVU4209
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11857              		.loc 1 578 13 view .LVU4210
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11858              		.loc 1 577 32 view .LVU4211
GAS LISTING /tmp/cclewcPz.s 			page 321


 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11859              		.loc 1 577 25 view .LVU4212
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11860              		.loc 1 578 13 view .LVU4213
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11861              		.loc 1 577 32 view .LVU4214
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11862              		.loc 1 577 25 view .LVU4215
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11863              		.loc 1 578 13 view .LVU4216
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11864              		.loc 1 577 32 view .LVU4217
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11865              		.loc 1 577 25 view .LVU4218
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 11866              		.loc 1 577 25 is_stmt 0 view .LVU4219
 11867              	.LBE647:
 11868              	.LBB648:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11869              		.loc 1 579 25 is_stmt 1 view .LVU4220
 580:sieve_extend.c ****     }
 11870              		.loc 1 580 13 view .LVU4221
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11871              		.loc 1 579 32 view .LVU4222
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11872              		.loc 1 579 25 view .LVU4223
 580:sieve_extend.c ****     }
 11873              		.loc 1 580 13 view .LVU4224
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11874              		.loc 1 579 32 view .LVU4225
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11875              		.loc 1 579 25 view .LVU4226
 580:sieve_extend.c ****     }
 11876              		.loc 1 580 13 view .LVU4227
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11877              		.loc 1 579 32 view .LVU4228
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11878              		.loc 1 579 25 view .LVU4229
 580:sieve_extend.c ****     }
 11879              		.loc 1 580 13 view .LVU4230
 11880              	.LBE648:
 11881              	.LBB649:
 11882              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11883              		.loc 1 578 25 is_stmt 0 view .LVU4231
 11884 3ebc C4E3FD00 		vpermq	ymm7, YMMWORD PTR 32[rsi], 85	# vect__102.535, MEM[base: src_35(D), index: ivtmp.549_114, o
 11884      7E2055
 11885 3ec3 41B90200 		mov	r9d, 2	# ivtmp.546,
 11885      0000
 11886              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11887              		.loc 1 578 34 view .LVU4232
 11888 3ec9 C57E6F4E 		vmovdqu	ymm9, YMMWORD PTR 32[rsi]	# tmp278, MEM[base: src_35(D), index: ivtmp.549_114, offset: 0B]
 11888      20
 11889 3ece B8400000 		mov	eax, 64	# ivtmp.549,
 11889      00
 11890              	.LBE649:
GAS LISTING /tmp/cclewcPz.s 			page 322


 11891              	.LBB650:
 11892              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11893              		.loc 1 580 34 view .LVU4233
 11894 3ed3 C545D3C0 		vpsrlq	ymm8, ymm7, xmm0	# vect__57.536, vect__102.535, _4
 11895              	.LBE650:
 11896              	.LBB651:
 11897              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 11898              		.loc 1 578 34 view .LVU4234
 11899 3ed7 C535F3D1 		vpsllq	ymm10, ymm9, xmm1	# vect__104.540, tmp278, shift
 11900              	.LBE651:
 11901              	.LBB652:
 11902              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 11903              		.loc 1 580 22 view .LVU4235
 11904 3edb C4413DEB 		vpor	ymm11, ymm8, ymm10	# vect__58.541, vect__57.536, vect__104.540
 11904      DA
 11905 3ee0 C57E7F5F 		vmovdqu	YMMWORD PTR 32[rdi], ymm11	# MEM[base: dst_34(D), index: ivtmp.549_114, offset: 0B], vect_
 11905      20
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11906              		.loc 1 579 32 is_stmt 1 view .LVU4236
 11907              	.LVL743:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 11908              		.loc 1 579 25 view .LVU4237
 11909              	.LBE652:
 575:sieve_extend.c ****     {
 11910              		.loc 1 575 24 view .LVU4238
 575:sieve_extend.c ****     {
 11911              		.loc 1 575 12 view .LVU4239
 11912 3ee5 E9F6FCFF 		jmp	.L920	#
 11912      FF
 11913              	.LVL744:
 11914              	.L930:
 11915              	# sieve_extend.c:573:     int i = 0;
 573:sieve_extend.c ****     // MSVC: use steps of 2 for SSE, 4 for AVX2, 8 for AVX512
 11916              		.loc 1 573 9 is_stmt 0 view .LVU4240
 11917 3eea 31C0     		xor	eax, eax	# i
 11918 3eec E92EFFFF 		jmp	.L889	#
 11918      FF
 11919              		.cfi_endproc
 11920              	.LFE70:
 11922              		.section	.rodata.str1.8,"aMS",@progbits,1
 11923              		.align 8
 11924              	.LC9:
 11925 0000 52657375 		.string	"Result: Sievesize %ju is expected to have %ju primes. algorithm produced %ju primes\n"
 11925      6C743A20 
 11925      53696576 
 11925      6573697A 
 11925      6520256A 
 11926 0055 000000   		.align 8
 11927              	.LC10:
 11928 0058 4E6F2076 		.string	"No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produced %j
 11928      616C6964 
 11928      20726573 
 11928      756C742E 
 11928      20536965 
GAS LISTING /tmp/cclewcPz.s 			page 323


 11929              		.section	.rodata.str1.1
 11930              	.LC11:
 11931 0023 44656570 		.string	"DeepAnalyzing"
 11931      416E616C 
 11931      797A696E 
 11931      6700
 11932              		.section	.rodata.str1.8
 11933 00bb 00000000 		.align 8
 11933      00
 11934              	.LC12:
 11935 00c0 4E756D62 		.string	"Number %ju (%ju) was marked prime, but %ju * %ju = %ju\n"
 11935      65722025 
 11935      6A752028 
 11935      256A7529 
 11935      20776173 
 11936              		.align 8
 11937              	.LC13:
 11938 00f8 4E756D62 		.string	"Number %ju (%ju) was marked non-prime, but no factors found. So it is prime\n"
 11938      65722025 
 11938      6A752028 
 11938      256A7529 
 11938      20776173 
 11939              		.text
 11940 3ef1 66662E0F 		.p2align 4
 11940      1F840000 
 11940      0000000F 
 11940      1F4000
 11941              		.globl	validatePrimeCount
 11943              	validatePrimeCount:
 11944              	.LVL745:
 11945              	.LFB84:
 958:sieve_extend.c **** 
 11946              		.loc 1 958 76 is_stmt 1 view -0
 11947              		.cfi_startproc
 958:sieve_extend.c **** 
 11948              		.loc 1 958 76 is_stmt 0 view .LVU4242
 11949 3f00 F30F1EFA 		endbr64	
 960:sieve_extend.c ****     counter_t valid_primes = 0;
 11950              		.loc 1 960 5 is_stmt 1 view .LVU4243
 11951              	# sieve_extend.c:958: int validatePrimeCount(struct sieve_state *sieve, int option_verboselevel) {
 958:sieve_extend.c **** 
 11952              		.loc 1 958 76 is_stmt 0 view .LVU4244
 11953 3f04 4157     		push	r15	#
 11954              		.cfi_def_cfa_offset 16
 11955              		.cfi_offset 15, -16
 11956 3f06 4156     		push	r14	#
 11957              		.cfi_def_cfa_offset 24
 11958              		.cfi_offset 14, -24
 11959 3f08 4155     		push	r13	#
 11960              		.cfi_def_cfa_offset 32
 11961              		.cfi_offset 13, -32
 11962 3f0a 4154     		push	r12	#
 11963              		.cfi_def_cfa_offset 40
 11964              		.cfi_offset 12, -40
 11965 3f0c 55       		push	rbp	#
 11966              		.cfi_def_cfa_offset 48
 11967              		.cfi_offset 6, -48
GAS LISTING /tmp/cclewcPz.s 			page 324


 11968 3f0d 4889FD   		mov	rbp, rdi	# sieve, tmp307
 11969 3f10 53       		push	rbx	#
 11970              		.cfi_def_cfa_offset 56
 11971              		.cfi_offset 3, -56
 11972 3f11 89F3     		mov	ebx, esi	# option_verboselevel, tmp308
 11973 3f13 488D6424 		lea	rsp, -56[rsp]	#,
 11973      C8
 11974              		.cfi_def_cfa_offset 112
 11975              	# sieve_extend.c:960:     counter_t primecount = count_primes(sieve);
 960:sieve_extend.c ****     counter_t valid_primes = 0;
 11976              		.loc 1 960 28 view .LVU4245
 11977 3f18 488B17   		mov	rdx, QWORD PTR [rdi]	# _24, MEM[(uint64_t * *)sieve_18(D)]
 11978 3f1b 488B7F08 		mov	rdi, QWORD PTR 8[rdi]	# _25, MEM[(long unsigned int *)sieve_18(D) + 8B]
 11979              	.LVL746:
 11980              	.LBB674:
 11981              	.LBI674:
 929:sieve_extend.c ****     counter_t primeCount = 1;
 11982              		.loc 1 929 18 is_stmt 1 view .LVU4246
 11983              	.LBB675:
 11984              	.LBB676:
 931:sieve_extend.c ****     return primeCount;
 11985              		.loc 1 931 30 view .LVU4247
 11986 3f1f 4C8B4D10 		mov	r9, QWORD PTR 16[rbp]	# pretmp_201, sieve_18(D)->size
 11987              	# sieve_extend.c:931:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 931:sieve_extend.c ****     return primeCount;
 11988              		.loc 1 931 5 is_stmt 0 view .LVU4248
 11989 3f23 4883FF01 		cmp	rdi, 1	# _25,
 11990 3f27 0F860B05 		jbe	.L934	#,
 11990      0000
 11991              	# sieve_extend.c:931:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 931:sieve_extend.c ****     return primeCount;
 11992              		.loc 1 931 20 view .LVU4249
 11993 3f2d B8010000 		mov	eax, 1	# factor,
 11993      00
 11994              	.LBE676:
 11995              	# sieve_extend.c:930:     counter_t primeCount = 1;
 930:sieve_extend.c ****     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(sieve->bitarray, factor+
 11996              		.loc 1 930 15 view .LVU4250
 11997 3f32 41B80100 		mov	r8d, 1	# primeCount,
 11997      0000
 11998              	.LVL747:
 11999 3f38 0F1F8400 		.p2align 4
 11999      00000000 
 12000              		.p2align 3
 12001              	.L937:
 12002              	.LBB679:
 931:sieve_extend.c ****     return primeCount;
 12003              		.loc 1 931 104 is_stmt 1 view .LVU4251
 12004              	# sieve_extend.c:931:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 931:sieve_extend.c ****     return primeCount;
 12005              		.loc 1 931 114 is_stmt 0 view .LVU4252
 12006 3f40 4983C001 		add	r8, 1	# primeCount,
 12007              	.LVL748:
 931:sieve_extend.c ****     return primeCount;
 12008              		.loc 1 931 52 is_stmt 1 view .LVU4253
 12009              	# sieve_extend.c:931:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 931:sieve_extend.c ****     return primeCount;
GAS LISTING /tmp/cclewcPz.s 			page 325


 12010              		.loc 1 931 61 is_stmt 0 view .LVU4254
 12011 3f44 4883C001 		add	rax, 1	# factor,
 12012              	.LVL749:
 12013              	.L1081:
 12014              	.LBB677:
 12015              	.LBI677:
 123:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 12016              		.loc 1 123 25 is_stmt 1 view .LVU4255
 12017              	.LBB678:
 124:sieve_extend.c ****     return index;
 12018              		.loc 1 124 5 view .LVU4256
 124:sieve_extend.c ****     return index;
 12019              		.loc 1 124 11 view .LVU4257
 12020              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12021              		.loc 1 124 21 is_stmt 0 view .LVU4258
 12022 3f48 4889C1   		mov	rcx, rax	# tmp162, factor
 12023 3f4b 48C1E906 		shr	rcx, 6	# tmp162,
 12024              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12025              		.loc 1 124 12 view .LVU4259
 12026 3f4f 4C8B1CCA 		mov	r11, QWORD PTR [rdx+rcx*8]	# *_106,* _24
 12027              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12028              		.loc 1 124 11 view .LVU4260
 12029 3f53 490FA3C3 		bt	r11, rax	# *_106, factor
 12030 3f57 0F83A300 		jnc	.L935	#,
 12030      0000
 124:sieve_extend.c ****     return index;
 12031              		.loc 1 124 58 is_stmt 1 view .LVU4261
 12032              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12033              		.loc 1 124 63 is_stmt 0 view .LVU4262
 12034 3f5d 4C8D6801 		lea	r13, 1[rax]	# tmp235,
 12035              	.LVL750:
 12036              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12037              		.loc 1 124 21 view .LVU4263
 12038 3f61 4D89EE   		mov	r14, r13	# tmp167, factor
 12039              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12040              		.loc 1 124 63 view .LVU4264
 12041 3f64 4C89E8   		mov	rax, r13	# factor, tmp235
 124:sieve_extend.c ****     return index;
 12042              		.loc 1 124 11 is_stmt 1 view .LVU4265
 12043              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12044              		.loc 1 124 21 is_stmt 0 view .LVU4266
 12045 3f67 49C1EE06 		shr	r14, 6	# tmp167,
 12046              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12047              		.loc 1 124 12 view .LVU4267
 12048 3f6b 4E8B3CF2 		mov	r15, QWORD PTR [rdx+r14*8]	# *_35, *_35
 12049              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12050              		.loc 1 124 11 view .LVU4268
 12051 3f6f 4D0FA3EF 		bt	r15, r13	# *_35, factor
GAS LISTING /tmp/cclewcPz.s 			page 326


 12052 3f73 0F838700 		jnc	.L935	#,
 12052      0000
 124:sieve_extend.c ****     return index;
 12053              		.loc 1 124 58 is_stmt 1 view .LVU4269
 12054              	.LVL751:
 12055              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12056              		.loc 1 124 63 is_stmt 0 view .LVU4270
 12057 3f79 4883C001 		add	rax, 1	# factor,
 12058              	.LVL752:
 124:sieve_extend.c ****     return index;
 12059              		.loc 1 124 11 is_stmt 1 view .LVU4271
 12060              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12061              		.loc 1 124 21 is_stmt 0 view .LVU4272
 12062 3f7d 4989C4   		mov	r12, rax	# tmp279, factor
 12063 3f80 49C1EC06 		shr	r12, 6	# tmp279,
 12064              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12065              		.loc 1 124 12 view .LVU4273
 12066 3f84 4A8B34E2 		mov	rsi, QWORD PTR [rdx+r12*8]	# *_35, *_35
 12067              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12068              		.loc 1 124 11 view .LVU4274
 12069 3f88 480FA3C6 		bt	rsi, rax	# *_35, factor
 12070 3f8c 7372     		jnc	.L935	#,
 124:sieve_extend.c ****     return index;
 12071              		.loc 1 124 58 is_stmt 1 view .LVU4275
 12072              	.LVL753:
 12073              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12074              		.loc 1 124 63 is_stmt 0 view .LVU4276
 12075 3f8e 498D4502 		lea	rax, 2[r13]	# factor,
 12076              	.LVL754:
 124:sieve_extend.c ****     return index;
 12077              		.loc 1 124 11 is_stmt 1 view .LVU4277
 12078              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12079              		.loc 1 124 21 is_stmt 0 view .LVU4278
 12080 3f92 4989C2   		mov	r10, rax	# tmp283, factor
 12081 3f95 49C1EA06 		shr	r10, 6	# tmp283,
 12082              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12083              		.loc 1 124 12 view .LVU4279
 12084 3f99 4A8B0CD2 		mov	rcx, QWORD PTR [rdx+r10*8]	# *_35, *_35
 12085              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12086              		.loc 1 124 11 view .LVU4280
 12087 3f9d 480FA3C1 		bt	rcx, rax	# *_35, factor
 12088 3fa1 735D     		jnc	.L935	#,
 124:sieve_extend.c ****     return index;
 12089              		.loc 1 124 58 is_stmt 1 view .LVU4281
 12090              	.LVL755:
 12091              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12092              		.loc 1 124 63 is_stmt 0 view .LVU4282
 12093 3fa3 498D4503 		lea	rax, 3[r13]	# factor,
GAS LISTING /tmp/cclewcPz.s 			page 327


 12094              	.LVL756:
 124:sieve_extend.c ****     return index;
 12095              		.loc 1 124 11 is_stmt 1 view .LVU4283
 12096              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12097              		.loc 1 124 21 is_stmt 0 view .LVU4284
 12098 3fa7 4989C3   		mov	r11, rax	# tmp287, factor
 12099 3faa 49C1EB06 		shr	r11, 6	# tmp287,
 12100              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12101              		.loc 1 124 12 view .LVU4285
 12102 3fae 4E8B34DA 		mov	r14, QWORD PTR [rdx+r11*8]	# *_35, *_35
 12103              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12104              		.loc 1 124 11 view .LVU4286
 12105 3fb2 490FA3C6 		bt	r14, rax	# *_35, factor
 12106 3fb6 7348     		jnc	.L935	#,
 124:sieve_extend.c ****     return index;
 12107              		.loc 1 124 58 is_stmt 1 view .LVU4287
 12108              	.LVL757:
 12109              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12110              		.loc 1 124 63 is_stmt 0 view .LVU4288
 12111 3fb8 498D4504 		lea	rax, 4[r13]	# factor,
 12112              	.LVL758:
 124:sieve_extend.c ****     return index;
 12113              		.loc 1 124 11 is_stmt 1 view .LVU4289
 12114              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12115              		.loc 1 124 21 is_stmt 0 view .LVU4290
 12116 3fbc 4989C7   		mov	r15, rax	# tmp291, factor
 12117 3fbf 49C1EF06 		shr	r15, 6	# tmp291,
 12118              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12119              		.loc 1 124 12 view .LVU4291
 12120 3fc3 4E8B24FA 		mov	r12, QWORD PTR [rdx+r15*8]	# *_35, *_35
 12121              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12122              		.loc 1 124 11 view .LVU4292
 12123 3fc7 490FA3C4 		bt	r12, rax	# *_35, factor
 12124 3fcb 7333     		jnc	.L935	#,
 124:sieve_extend.c ****     return index;
 12125              		.loc 1 124 58 is_stmt 1 view .LVU4293
 12126              	.LVL759:
 12127              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12128              		.loc 1 124 63 is_stmt 0 view .LVU4294
 12129 3fcd 498D4505 		lea	rax, 5[r13]	# factor,
 12130              	.LVL760:
 124:sieve_extend.c ****     return index;
 12131              		.loc 1 124 11 is_stmt 1 view .LVU4295
 12132              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12133              		.loc 1 124 21 is_stmt 0 view .LVU4296
 12134 3fd1 4889C6   		mov	rsi, rax	# tmp295, factor
 12135 3fd4 48C1EE06 		shr	rsi, 6	# tmp295,
 12136              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
GAS LISTING /tmp/cclewcPz.s 			page 328


 124:sieve_extend.c ****     return index;
 12137              		.loc 1 124 12 view .LVU4297
 12138 3fd8 4C8B14F2 		mov	r10, QWORD PTR [rdx+rsi*8]	# *_35, *_35
 12139              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12140              		.loc 1 124 11 view .LVU4298
 12141 3fdc 490FA3C2 		bt	r10, rax	# *_35, factor
 12142 3fe0 731E     		jnc	.L935	#,
 124:sieve_extend.c ****     return index;
 12143              		.loc 1 124 58 is_stmt 1 view .LVU4299
 12144              	.LVL761:
 12145              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12146              		.loc 1 124 63 is_stmt 0 view .LVU4300
 12147 3fe2 498D4506 		lea	rax, 6[r13]	# factor,
 12148              	.LVL762:
 124:sieve_extend.c ****     return index;
 12149              		.loc 1 124 11 is_stmt 1 view .LVU4301
 12150              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12151              		.loc 1 124 21 is_stmt 0 view .LVU4302
 12152 3fe6 4889C1   		mov	rcx, rax	# tmp299, factor
 12153 3fe9 48C1E906 		shr	rcx, 6	# tmp299,
 12154              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12155              		.loc 1 124 12 view .LVU4303
 12156 3fed 4C8B1CCA 		mov	r11, QWORD PTR [rdx+rcx*8]	# *_35, *_35
 12157              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12158              		.loc 1 124 11 view .LVU4304
 12159 3ff1 490FA3C3 		bt	r11, rax	# *_35, factor
 12160 3ff5 7309     		jnc	.L935	#,
 124:sieve_extend.c ****     return index;
 12161              		.loc 1 124 58 is_stmt 1 view .LVU4305
 12162              	.LVL763:
 12163              	# sieve_extend.c:124:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 124:sieve_extend.c ****     return index;
 12164              		.loc 1 124 63 is_stmt 0 view .LVU4306
 12165 3ff7 498D4507 		lea	rax, 7[r13]	# factor,
 12166              	.LVL764:
 124:sieve_extend.c ****     return index;
 12167              		.loc 1 124 11 is_stmt 1 view .LVU4307
 12168 3ffb E948FFFF 		jmp	.L1081	#
 12168      FF
 12169              		.p2align 4,,7
 12170              		.p2align 3
 12171              	.L935:
 12172              	.LVL765:
 124:sieve_extend.c ****     return index;
 12173              		.loc 1 124 11 is_stmt 0 view .LVU4308
 12174              	.LBE678:
 12175              	.LBE677:
 931:sieve_extend.c ****     return primeCount;
 12176              		.loc 1 931 30 is_stmt 1 view .LVU4309
 12177              	# sieve_extend.c:931:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 931:sieve_extend.c ****     return primeCount;
 12178              		.loc 1 931 5 is_stmt 0 view .LVU4310
GAS LISTING /tmp/cclewcPz.s 			page 329


 12179 4000 4839C7   		cmp	rdi, rax	# _25, factor
 12180 4003 0F8737FF 		ja	.L937	#,
 12180      FFFF
 931:sieve_extend.c ****     return primeCount;
 12181              		.loc 1 931 5 view .LVU4311
 12182              	.LBE679:
 932:sieve_extend.c **** }
 12183              		.loc 1 932 5 is_stmt 1 view .LVU4312
 12184              	.LVL766:
 932:sieve_extend.c **** }
 12185              		.loc 1 932 5 is_stmt 0 view .LVU4313
 12186              	.LBE675:
 12187              	.LBE674:
 961:sieve_extend.c ****     switch(sieve->size) {
 12188              		.loc 1 961 5 is_stmt 1 view .LVU4314
 962:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 12189              		.loc 1 962 5 view .LVU4315
 12190 4009 83FB03   		cmp	ebx, 3	# option_verboselevel,
 12191 400c 0F9FC2   		setg	dl	#, tmp172
 12192 400f 4981F9A0 		cmp	r9, 100000	# pretmp_201,
 12192      860100
 12193 4016 0F843406 		je	.L938	#,
 12193      0000
 12194 401c 0F86D402 		jbe	.L1082	#,
 12194      0000
 12195 4022 4981F900 		cmp	r9, 100000000	# pretmp_201,
 12195      E1F505
 12196 4029 0F84E005 		je	.L946	#,
 12196      0000
 12197 402f 90       		.p2align 4,,4
 12198 4030 0F863A03 		jbe	.L1083	#,
 12198      0000
 12199 4036 4981F900 		cmp	r9, 1000000000	# pretmp_201,
 12199      CA9A3B
 12200 403d 0F85F105 		jne	.L944	#,
 12200      0000
 12201 4043 4981F82E 		cmp	r8, 50847534	# primeCount,
 12201      DF0703
 12202              	# sieve_extend.c:971:         case 1000000000:    valid_primes = 50847534; break;
 971:sieve_extend.c ****         default:            valid_primes= 0;
 12203              		.loc 1 971 42 is_stmt 0 view .LVU4316
 12204 404a B92EDF07 		mov	ecx, 50847534	# valid_primes,
 12204      03
 12205 404f 410F94C5 		sete	r13b	#, tmp189
 12206 4053 4421EA   		and	edx, r13d	# _253, tmp189
 12207 4056 4981F82E 		cmp	r8, 50847534	# primeCount,
 12207      DF0703
 12208 405d 450FB6ED 		movzx	r13d, r13b	# <retval>, tmp189
 12209 4061 410F95C4 		setne	r12b	#, _135
 971:sieve_extend.c ****         default:            valid_primes= 0;
 12210              		.loc 1 971 29 is_stmt 1 view .LVU4317
 12211              	.LVL767:
 971:sieve_extend.c ****         default:            valid_primes= 0;
 12212              		.loc 1 971 54 view .LVU4318
 12213 4065 66662E0F 		.p2align 4
 12213      1F840000 
 12213      000000
GAS LISTING /tmp/cclewcPz.s 			page 330


 12214              		.p2align 3
 12215              	.L951:
 975:sieve_extend.c ****     if (valid  && option_verboselevel >= 4) printf("Result: Sievesize %ju is expected to have %ju p
 12216              		.loc 1 975 5 view .LVU4319
 976:sieve_extend.c ****     if (!valid && option_verboselevel >= 1) {
 12217              		.loc 1 976 5 view .LVU4320
 12218              	# sieve_extend.c:976:     if (valid  && option_verboselevel >= 4) printf("Result: Sievesize %ju is 
 976:sieve_extend.c ****     if (!valid && option_verboselevel >= 1) {
 12219              		.loc 1 976 8 is_stmt 0 view .LVU4321
 12220 4070 84D2     		test	dl, dl	# _253
 12221 4072 0F841704 		je	.L952	#,
 12221      0000
 976:sieve_extend.c ****     if (!valid && option_verboselevel >= 1) {
 12222              		.loc 1 976 45 is_stmt 1 discriminator 1 view .LVU4322
 12223              	.LVL768:
 12224              	.LBB681:
 12225              	.LBI681:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 12226              		.loc 3 105 1 discriminator 1 view .LVU4323
 12227              	.LBB682:
 12228              		.loc 3 107 3 discriminator 1 view .LVU4324
 12229              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 12230              		.loc 3 107 10 is_stmt 0 discriminator 1 view .LVU4325
 12231 4078 4C89CA   		mov	rdx, r9	#, pretmp_201
 12232 407b 488D3500 		lea	rsi, .LC9[rip]	#,
 12232      000000
 12233 4082 BF010000 		mov	edi, 1	#,
 12233      00
 12234 4087 31C0     		xor	eax, eax	#
 12235 4089 E8000000 		call	__printf_chk@PLT	#
 12235      00
 12236              	.LVL769:
 12237              		.loc 3 107 10 discriminator 1 view .LVU4326
 12238              	.LBE682:
 12239              	.LBE681:
 977:sieve_extend.c ****         printf("No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produ
 12240              		.loc 1 977 5 is_stmt 1 discriminator 1 view .LVU4327
 12241              	.L953:
 981:sieve_extend.c ****     return (valid);
 12242              		.loc 1 981 5 view .LVU4328
 12243              	# sieve_extend.c:981:     if (!valid && option_verboselevel >= 2) deepAnalyzePrimes(sieve);
 981:sieve_extend.c ****     return (valid);
 12244              		.loc 1 981 8 is_stmt 0 view .LVU4329
 12245 408e 83FB01   		cmp	ebx, 1	# option_verboselevel,
 12246 4091 0F8E4C02 		jle	.L933	#,
 12246      0000
 12247 4097 4584E4   		test	r12b, r12b	# _135
 12248 409a 0F844302 		je	.L933	#,
 12248      0000
 12249              	.L955:
 981:sieve_extend.c ****     return (valid);
 12250              		.loc 1 981 45 is_stmt 1 discriminator 1 view .LVU4330
 12251              	.LBB683:
 12252              	.LBI683:
 935:sieve_extend.c ****     printf("DeepAnalyzing\n");
 12253              		.loc 1 935 13 discriminator 1 view .LVU4331
 12254              	.LVL770:
GAS LISTING /tmp/cclewcPz.s 			page 331


 12255              	.LBB684:
 936:sieve_extend.c ****     counter_t warn_prime = 0;
 12256              		.loc 1 936 5 discriminator 1 view .LVU4332
 12257              	.LBB685:
 12258              	.LBI685:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 12259              		.loc 3 105 1 discriminator 1 view .LVU4333
 12260              	.LBB686:
 12261              		.loc 3 107 3 discriminator 1 view .LVU4334
 12262              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 12263              		.loc 3 107 10 is_stmt 0 discriminator 1 view .LVU4335
 12264 40a0 488D3D00 		lea	rdi, .LC11[rip]	#,
 12264      000000
 12265 40a7 E8000000 		call	puts@PLT	#
 12265      00
 12266              	.LVL771:
 12267              		.loc 3 107 10 discriminator 1 view .LVU4336
 12268              	.LBE686:
 12269              	.LBE685:
 937:sieve_extend.c ****     counter_t warn_nonprime = 0;
 12270              		.loc 1 937 5 is_stmt 1 discriminator 1 view .LVU4337
 938:sieve_extend.c ****     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 12271              		.loc 1 938 5 discriminator 1 view .LVU4338
 939:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 12272              		.loc 1 939 5 discriminator 1 view .LVU4339
 12273              	.LBB687:
 939:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 12274              		.loc 1 939 10 discriminator 1 view .LVU4340
 939:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 12275              		.loc 1 939 31 discriminator 1 view .LVU4341
 12276              	# sieve_extend.c:939:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 939:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 12277              		.loc 1 939 44 is_stmt 0 discriminator 1 view .LVU4342
 12278 40ac 488B7D08 		mov	rdi, QWORD PTR 8[rbp]	# _137, MEM[(uint64_t *)sieve_18(D) + 8B]
 12279              	# sieve_extend.c:939:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 939:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 12280              		.loc 1 939 5 discriminator 1 view .LVU4343
 12281 40b0 4883FF01 		cmp	rdi, 1	# _137,
 12282 40b4 0F862902 		jbe	.L933	#,
 12282      0000
 12283              	.LBB688:
 12284              	.LBB689:
 12285              	.LBB690:
 12286              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 12287              		.loc 3 107 10 view .LVU4344
 12288 40ba 44896C24 		mov	DWORD PTR 36[rsp], r13d	# %sfp, <retval>
 12288      24
 12289              	.LBE690:
 12290              	.LBE689:
 12291              	.LBE688:
 12292              	# sieve_extend.c:939:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 939:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 12293              		.loc 1 939 5 view .LVU4345
 12294 40bf 41BE0200 		mov	r14d, 2	# ivtmp.582,
 12294      0000
 12295 40c5 41BC0300 		mov	r12d, 3	# ivtmp.580,
 12295      0000
GAS LISTING /tmp/cclewcPz.s 			page 332


 12296              	.LBE687:
 12297              	# sieve_extend.c:937:     counter_t warn_prime = 0;
 937:sieve_extend.c ****     counter_t warn_nonprime = 0;
 12298              		.loc 1 937 15 view .LVU4346
 12299 40cb 4531C0   		xor	r8d, r8d	# warn_prime
 12300              	# sieve_extend.c:938:     counter_t warn_nonprime = 0;
 938:sieve_extend.c ****     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 12301              		.loc 1 938 15 view .LVU4347
 12302 40ce 48C74424 		mov	QWORD PTR 24[rsp], 0	# %sfp,
 12302      18000000 
 12302      00
 12303              	.LBB709:
 12304              	# sieve_extend.c:939:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 939:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 12305              		.loc 1 939 20 view .LVU4348
 12306 40d7 41BF0100 		mov	r15d, 1	# prime,
 12306      0000
 12307              	.LBB697:
 12308              	.LBB694:
 12309              	.LBB691:
 12310              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 12311              		.loc 3 107 10 view .LVU4349
 12312 40dd 4989ED   		mov	r13, rbp	# sieve, sieve
 12313              	.LVL772:
 12314              		.p2align 4
 12315              		.p2align 3
 12316              	.L964:
 12317              		.loc 3 107 10 view .LVU4350
 12318              	.LBE691:
 12319              	.LBE694:
 12320              	.LBE697:
 940:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 12321              		.loc 1 940 9 is_stmt 1 view .LVU4351
 12322              	# sieve_extend.c:940:         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { 
 940:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 12323              		.loc 1 940 29 is_stmt 0 view .LVU4352
 12324 40e0 498B6D00 		mov	rbp, QWORD PTR 0[r13]	# MEM[(uint64_t * *)sieve_18(D)], MEM[(uint64_t * *)sieve_18(D)]
 12325              	# sieve_extend.c:940:         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { 
 940:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 12326              		.loc 1 940 30 view .LVU4353
 12327 40e4 4C89FB   		mov	rbx, r15	# tmp198, prime
 12328 40e7 48C1EB06 		shr	rbx, 6	# tmp198,
 12329              	# sieve_extend.c:940:         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { 
 940:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 12330              		.loc 1 940 71 view .LVU4354
 12331 40eb 4C8B4CDD 		mov	r9, QWORD PTR 0[rbp+rbx*8]	# *_47, *_47
 12331      00
 12332 40f0 C4C283F7 		shrx	rcx, r9, r15	# tmp201, *_47, prime
 12332      C9
 12333              	# sieve_extend.c:940:         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { 
 940:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 12334              		.loc 1 940 12 view .LVU4355
 12335 40f5 83E101   		and	ecx, 1	# c,
 12336 40f8 0F84BA02 		je	.L956	#,
 12336      0000
 12337              	.LVL773:
 12338              	.LBB698:
GAS LISTING /tmp/cclewcPz.s 			page 333


 12339              	.LBB699:
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12340              		.loc 1 949 32 is_stmt 1 view .LVU4356
 12341              	.LBE699:
 12342              	# sieve_extend.c:948:             counter_t c_prime = 0;
 948:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 12343              		.loc 1 948 23 is_stmt 0 view .LVU4357
 12344 40fe 31ED     		xor	ebp, ebp	# c_prime
 12345              	.LBB700:
 12346              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12347              		.loc 1 949 13 view .LVU4358
 12348 4100 4885FF   		test	rdi, rdi	# _137
 12349 4103 BE030000 		mov	esi, 3	# ivtmp.572,
 12349      00
 12350 4108 0F84E003 		je	.L1071	#,
 12350      0000
 12351 410e 4989FB   		mov	r11, rdi	# tmp231, _137
 12352 4111 4929CB   		sub	r11, rcx	# tmp231, c
 12353 4114 4183E303 		and	r11d, 3	# tmp231,
 12354 4118 4D89DA   		mov	r10, r11	# tmp232, tmp231
 12355 411b 0F84BF00 		je	.L957	#,
 12355      0000
 12356              	.LVL774:
 950:sieve_extend.c ****             }
 12357              		.loc 1 950 17 is_stmt 1 view .LVU4359
 12358              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12359              		.loc 1 950 48 is_stmt 0 view .LVU4360
 12360 4121 488D0409 		lea	rax, [rcx+rcx]	# tmp239,
 12361 4125 4C39F0   		cmp	rax, r14	# tmp239, ivtmp.582
 12362 4128 7411     		je	.L1011	#,
 12363              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12364              		.loc 1 950 33 view .LVU4361
 12365 412a 31D2     		xor	edx, edx	# tmp241
 12366 412c 4C89E0   		mov	rax, r12	# tmp242, ivtmp.580
 12367 412f 48F7F6   		div	rsi	# ivtmp.572
 12368              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12369              		.loc 1 950 82 view .LVU4362
 12370 4132 31ED     		xor	ebp, ebp	# c_prime
 950:sieve_extend.c ****             }
 12371              		.loc 1 950 82 view .LVU4363
 12372 4134 4885D2   		test	rdx, rdx	# tmp241
 12373 4137 400F94C5 		sete	bpl	#, c_prime
 12374              	.LVL775:
 12375              	.L1011:
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12376              		.loc 1 949 68 is_stmt 1 view .LVU4364
 12377              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12378              		.loc 1 949 69 is_stmt 0 view .LVU4365
 12379 413b 4883C101 		add	rcx, 1	# c,
 12380              	.LVL776:
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12381              		.loc 1 949 32 is_stmt 1 view .LVU4366
GAS LISTING /tmp/cclewcPz.s 			page 334


 12382              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12383              		.loc 1 949 13 is_stmt 0 view .LVU4367
 12384 413f 4839F9   		cmp	rcx, rdi	# c, _137
 12385 4142 0F877801 		ja	.L963	#,
 12385      0000
 12386              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12387              		.loc 1 949 51 view .LVU4368
 12388 4148 4989C9   		mov	r9, rcx	# tmp244, c
 12389 414b BE050000 		mov	esi, 5	# ivtmp.572,
 12389      00
 12390 4150 4C0FAFC9 		imul	r9, rcx	# tmp244, c
 12391              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12392              		.loc 1 949 47 view .LVU4369
 12393 4154 4D39E1   		cmp	r9, r12	# tmp244, ivtmp.580
 12394 4157 0F876301 		ja	.L963	#,
 12394      0000
 12395 415d 4983FA01 		cmp	r10, 1	# tmp232,
 12396 4161 747D     		je	.L957	#,
 12397 4163 4983FA02 		cmp	r10, 2	# tmp232,
 12398 4167 7438     		je	.L1042	#,
 950:sieve_extend.c ****             }
 12399              		.loc 1 950 17 is_stmt 1 view .LVU4370
 12400              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12401              		.loc 1 950 48 is_stmt 0 view .LVU4371
 12402 4169 488D1C09 		lea	rbx, [rcx+rcx]	# tmp245,
 12403 416d 4C39F3   		cmp	rbx, r14	# tmp245, ivtmp.582
 12404 4170 7417     		je	.L1013	#,
 12405              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12406              		.loc 1 950 33 view .LVU4372
 12407 4172 31D2     		xor	edx, edx	# tmp247
 12408 4174 4C89E0   		mov	rax, r12	# tmp248, ivtmp.580
 12409 4177 48F7F6   		div	rsi	# ivtmp.572
 12410              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12411              		.loc 1 950 20 view .LVU4373
 12412 417a 4885D2   		test	rdx, rdx	# tmp247
 12413 417d 410F94C3 		sete	r11b	#, tmp249
 12414              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12415              		.loc 1 950 82 view .LVU4374
 12416 4181 4180FB01 		cmp	r11b, 1	# tmp249,
 12417 4185 4883DDFF 		sbb	rbp, -1	# c_prime,
 12418              	.LVL777:
 12419              	.L1013:
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12420              		.loc 1 949 68 is_stmt 1 view .LVU4375
 12421              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12422              		.loc 1 949 69 is_stmt 0 view .LVU4376
 12423 4189 4883C101 		add	rcx, 1	# c,
 12424              	.LVL778:
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
GAS LISTING /tmp/cclewcPz.s 			page 335


 12425              		.loc 1 949 32 is_stmt 1 view .LVU4377
 12426 418d 4883C602 		add	rsi, 2	# ivtmp.572,
 12427              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12428              		.loc 1 949 51 is_stmt 0 view .LVU4378
 12429 4191 4989CA   		mov	r10, rcx	# tmp250, c
 12430 4194 4C0FAFD1 		imul	r10, rcx	# tmp250, c
 12431              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12432              		.loc 1 949 47 view .LVU4379
 12433 4198 4D39E2   		cmp	r10, r12	# tmp250, ivtmp.580
 12434 419b 0F871F01 		ja	.L963	#,
 12434      0000
 12435              	.L1042:
 950:sieve_extend.c ****             }
 12436              		.loc 1 950 17 is_stmt 1 view .LVU4380
 12437              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12438              		.loc 1 950 48 is_stmt 0 view .LVU4381
 12439 41a1 4C8D0C09 		lea	r9, [rcx+rcx]	# tmp251,
 12440 41a5 4D39F1   		cmp	r9, r14	# tmp251, ivtmp.582
 12441 41a8 7415     		je	.L1016	#,
 12442              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12443              		.loc 1 950 33 view .LVU4382
 12444 41aa 31D2     		xor	edx, edx	# tmp253
 12445 41ac 4C89E0   		mov	rax, r12	# tmp254, ivtmp.580
 12446 41af 48F7F6   		div	rsi	# ivtmp.572
 12447              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12448              		.loc 1 950 20 view .LVU4383
 12449 41b2 4885D2   		test	rdx, rdx	# tmp253
 12450 41b5 0F94C3   		sete	bl	#, tmp255
 12451              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12452              		.loc 1 950 82 view .LVU4384
 12453 41b8 80FB01   		cmp	bl, 1	# tmp255,
 12454 41bb 4883DDFF 		sbb	rbp, -1	# c_prime,
 12455              	.LVL779:
 12456              	.L1016:
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12457              		.loc 1 949 68 is_stmt 1 view .LVU4385
 12458              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12459              		.loc 1 949 69 is_stmt 0 view .LVU4386
 12460 41bf 4883C101 		add	rcx, 1	# c,
 12461              	.LVL780:
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12462              		.loc 1 949 32 is_stmt 1 view .LVU4387
 12463 41c3 4883C602 		add	rsi, 2	# ivtmp.572,
 12464              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12465              		.loc 1 949 51 is_stmt 0 view .LVU4388
 12466 41c7 4989CB   		mov	r11, rcx	# tmp256, c
 12467 41ca 4C0FAFD9 		imul	r11, rcx	# tmp256, c
 12468              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
GAS LISTING /tmp/cclewcPz.s 			page 336


 12469              		.loc 1 949 47 view .LVU4389
 12470 41ce 4D39E3   		cmp	r11, r12	# tmp256, ivtmp.580
 12471 41d1 0F87E900 		ja	.L963	#,
 12471      0000
 12472              	.LVL781:
 12473 41d7 660F1F84 		.p2align 4
 12473      00000000 
 12473      00
 12474              		.p2align 3
 12475              	.L957:
 950:sieve_extend.c ****             }
 12476              		.loc 1 950 17 is_stmt 1 view .LVU4390
 12477              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12478              		.loc 1 950 48 is_stmt 0 view .LVU4391
 12479 41e0 4C8D1409 		lea	r10, [rcx+rcx]	# tmp210,
 12480 41e4 4D39F2   		cmp	r10, r14	# tmp210, ivtmp.582
 12481 41e7 7417     		je	.L962	#,
 12482              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12483              		.loc 1 950 33 view .LVU4392
 12484 41e9 31D2     		xor	edx, edx	# tmp214
 12485 41eb 4C89E0   		mov	rax, r12	# tmp215, ivtmp.580
 12486 41ee 48F7F6   		div	rsi	# ivtmp.572
 12487              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12488              		.loc 1 950 20 view .LVU4393
 12489 41f1 4885D2   		test	rdx, rdx	# tmp214
 12490 41f4 410F94C1 		sete	r9b	#, tmp217
 12491              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12492              		.loc 1 950 82 view .LVU4394
 12493 41f8 4180F901 		cmp	r9b, 1	# tmp217,
 12494 41fc 4883DDFF 		sbb	rbp, -1	# c_prime,
 12495              	.LVL782:
 12496              	.L962:
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12497              		.loc 1 949 68 is_stmt 1 view .LVU4395
 12498              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12499              		.loc 1 949 69 is_stmt 0 view .LVU4396
 12500 4200 4883C101 		add	rcx, 1	# tmp234,
 12501              	.LVL783:
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12502              		.loc 1 949 32 is_stmt 1 view .LVU4397
 12503              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12504              		.loc 1 949 13 is_stmt 0 view .LVU4398
 12505 4204 4839F9   		cmp	rcx, rdi	# tmp234, _137
 12506 4207 0F87B300 		ja	.L963	#,
 12506      0000
 12507              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12508              		.loc 1 949 51 view .LVU4399
 12509 420d 4889CB   		mov	rbx, rcx	# tmp218, tmp234
 12510 4210 4883C602 		add	rsi, 2	# tmp233,
 12511 4214 480FAFD9 		imul	rbx, rcx	# tmp218, tmp234
GAS LISTING /tmp/cclewcPz.s 			page 337


 12512              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12513              		.loc 1 949 47 view .LVU4400
 12514 4218 4C39E3   		cmp	rbx, r12	# tmp218, ivtmp.580
 12515 421b 0F879F00 		ja	.L963	#,
 12515      0000
 950:sieve_extend.c ****             }
 12516              		.loc 1 950 17 is_stmt 1 view .LVU4401
 12517              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12518              		.loc 1 950 48 is_stmt 0 view .LVU4402
 12519 4221 4C8D1C09 		lea	r11, [rcx+rcx]	# tmp257,
 12520 4225 4D39F3   		cmp	r11, r14	# tmp257, ivtmp.582
 12521 4228 7417     		je	.L1020	#,
 12522              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12523              		.loc 1 950 33 view .LVU4403
 12524 422a 31D2     		xor	edx, edx	# tmp259
 12525 422c 4C89E0   		mov	rax, r12	# tmp260, ivtmp.580
 12526 422f 48F7F6   		div	rsi	# tmp233
 12527              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12528              		.loc 1 950 20 view .LVU4404
 12529 4232 4885D2   		test	rdx, rdx	# tmp259
 12530 4235 410F94C2 		sete	r10b	#, tmp261
 12531              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12532              		.loc 1 950 82 view .LVU4405
 12533 4239 4180FA01 		cmp	r10b, 1	# tmp261,
 12534 423d 4883DDFF 		sbb	rbp, -1	# c_prime,
 12535              	.LVL784:
 12536              	.L1020:
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12537              		.loc 1 949 68 is_stmt 1 view .LVU4406
 12538              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12539              		.loc 1 949 69 is_stmt 0 view .LVU4407
 12540 4241 4C8D4901 		lea	r9, 1[rcx]	# c,
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12541              		.loc 1 949 32 is_stmt 1 view .LVU4408
 12542 4245 488D5E02 		lea	rbx, 2[rsi]	# ivtmp.572,
 12543              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12544              		.loc 1 949 51 is_stmt 0 view .LVU4409
 12545 4249 4D89CB   		mov	r11, r9	# tmp264, c
 12546 424c 4D0FAFD9 		imul	r11, r9	# tmp264, c
 12547              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12548              		.loc 1 949 47 view .LVU4410
 12549 4250 4D39E3   		cmp	r11, r12	# tmp264, ivtmp.580
 12550 4253 776B     		ja	.L963	#,
 950:sieve_extend.c ****             }
 12551              		.loc 1 950 17 is_stmt 1 view .LVU4411
 12552              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12553              		.loc 1 950 48 is_stmt 0 view .LVU4412
 12554 4255 4D01C9   		add	r9, r9	# tmp265
GAS LISTING /tmp/cclewcPz.s 			page 338


 12555 4258 4D39F1   		cmp	r9, r14	# tmp265, ivtmp.582
 12556 425b 7417     		je	.L1022	#,
 12557              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12558              		.loc 1 950 33 view .LVU4413
 12559 425d 31D2     		xor	edx, edx	# tmp267
 12560 425f 4C89E0   		mov	rax, r12	# tmp268, ivtmp.580
 12561 4262 48F7F3   		div	rbx	# ivtmp.572
 12562              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12563              		.loc 1 950 20 view .LVU4414
 12564 4265 4885D2   		test	rdx, rdx	# tmp267
 12565 4268 410F94C2 		sete	r10b	#, tmp269
 12566              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12567              		.loc 1 950 82 view .LVU4415
 12568 426c 4180FA01 		cmp	r10b, 1	# tmp269,
 12569 4270 4883DDFF 		sbb	rbp, -1	# c_prime,
 12570              	.LVL785:
 12571              	.L1022:
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12572              		.loc 1 949 68 is_stmt 1 view .LVU4416
 12573              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12574              		.loc 1 949 69 is_stmt 0 view .LVU4417
 12575 4274 4C8D4902 		lea	r9, 2[rcx]	# c,
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12576              		.loc 1 949 32 is_stmt 1 view .LVU4418
 12577 4278 488D5E04 		lea	rbx, 4[rsi]	# ivtmp.572,
 12578              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12579              		.loc 1 949 51 is_stmt 0 view .LVU4419
 12580 427c 4D89CB   		mov	r11, r9	# tmp272, c
 12581 427f 4D0FAFD9 		imul	r11, r9	# tmp272, c
 12582              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12583              		.loc 1 949 47 view .LVU4420
 12584 4283 4D39E3   		cmp	r11, r12	# tmp272, ivtmp.580
 12585 4286 7738     		ja	.L963	#,
 950:sieve_extend.c ****             }
 12586              		.loc 1 950 17 is_stmt 1 view .LVU4421
 12587              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12588              		.loc 1 950 48 is_stmt 0 view .LVU4422
 12589 4288 4D01C9   		add	r9, r9	# tmp273
 12590 428b 4D39F1   		cmp	r9, r14	# tmp273, ivtmp.582
 12591 428e 7417     		je	.L1024	#,
 12592              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12593              		.loc 1 950 33 view .LVU4423
 12594 4290 31D2     		xor	edx, edx	# tmp275
 12595 4292 4C89E0   		mov	rax, r12	# tmp276, ivtmp.580
 12596 4295 48F7F3   		div	rbx	# ivtmp.572
 12597              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12598              		.loc 1 950 20 view .LVU4424
 12599 4298 4885D2   		test	rdx, rdx	# tmp275
GAS LISTING /tmp/cclewcPz.s 			page 339


 12600 429b 410F94C2 		sete	r10b	#, tmp277
 12601              	# sieve_extend.c:950:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_p
 950:sieve_extend.c ****             }
 12602              		.loc 1 950 82 view .LVU4425
 12603 429f 4180FA01 		cmp	r10b, 1	# tmp277,
 12604 42a3 4883DDFF 		sbb	rbp, -1	# c_prime,
 12605              	.LVL786:
 12606              	.L1024:
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12607              		.loc 1 949 68 is_stmt 1 view .LVU4426
 12608              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12609              		.loc 1 949 69 is_stmt 0 view .LVU4427
 12610 42a7 4883C103 		add	rcx, 3	# c,
 12611              	.LVL787:
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12612              		.loc 1 949 32 is_stmt 1 view .LVU4428
 12613 42ab 4883C606 		add	rsi, 6	# ivtmp.572,
 12614              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12615              		.loc 1 949 51 is_stmt 0 view .LVU4429
 12616 42af 4989C9   		mov	r9, rcx	# tmp278, c
 12617 42b2 4C0FAFC9 		imul	r9, rcx	# tmp278, c
 12618              	# sieve_extend.c:949:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12619              		.loc 1 949 47 view .LVU4430
 12620 42b6 4D39E1   		cmp	r9, r12	# tmp278, ivtmp.580
 12621 42b9 0F8621FF 		jbe	.L957	#,
 12621      FFFF
 12622              	.LVL788:
 12623 42bf 90       		.p2align 4
 12624              		.p2align 3
 12625              	.L963:
 949:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 12626              		.loc 1 949 47 view .LVU4431
 12627              	.LBE700:
 952:sieve_extend.c ****         }
 12628              		.loc 1 952 13 is_stmt 1 view .LVU4432
 12629              	# sieve_extend.c:952:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju) 
 952:sieve_extend.c ****         }
 12630              		.loc 1 952 16 is_stmt 0 view .LVU4433
 12631 42c0 4885ED   		test	rbp, rbp	# c_prime
 12632 42c3 0F840C02 		je	.L1084	#,
 12632      0000
 12633              	.LVL789:
 12634              	.L960:
 952:sieve_extend.c ****         }
 12635              		.loc 1 952 16 view .LVU4434
 12636              	.LBE698:
 939:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 12637              		.loc 1 939 52 is_stmt 1 view .LVU4435
 12638              	# sieve_extend.c:939:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 939:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 12639              		.loc 1 939 57 is_stmt 0 view .LVU4436
 12640 42c9 4983C701 		add	r15, 1	# prime,
 12641              	.LVL790:
 939:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
GAS LISTING /tmp/cclewcPz.s 			page 340


 12642              		.loc 1 939 31 is_stmt 1 view .LVU4437
 12643 42cd 4983C402 		add	r12, 2	# ivtmp.580,
 12644 42d1 4983C602 		add	r14, 2	# ivtmp.582,
 12645              	# sieve_extend.c:939:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 939:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 12646              		.loc 1 939 5 is_stmt 0 view .LVU4438
 12647 42d5 4939FF   		cmp	r15, rdi	# prime, _137
 12648 42d8 0F8202FE 		jb	.L964	#,
 12648      FFFF
 12649              	.LVL791:
 12650              	.L1073:
 939:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 12651              		.loc 1 939 5 view .LVU4439
 12652 42de 448B6C24 		mov	r13d, DWORD PTR 36[rsp]	# <retval>, %sfp
 12652      24
 12653              	.LVL792:
 12654              	.L933:
 939:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 12655              		.loc 1 939 5 view .LVU4440
 12656              	.LBE709:
 12657              	.LBE684:
 12658              	.LBE683:
 12659              	# sieve_extend.c:983: }
 983:sieve_extend.c **** 
 12660              		.loc 1 983 1 view .LVU4441
 12661 42e3 488D6424 		lea	rsp, 56[rsp]	#,
 12661      38
 12662              		.cfi_remember_state
 12663              		.cfi_def_cfa_offset 56
 12664 42e8 4489E8   		mov	eax, r13d	#, <retval>
 12665 42eb 5B       		pop	rbx	#
 12666              		.cfi_def_cfa_offset 48
 12667 42ec 5D       		pop	rbp	#
 12668              		.cfi_def_cfa_offset 40
 12669 42ed 415C     		pop	r12	#
 12670              		.cfi_def_cfa_offset 32
 12671 42ef 415D     		pop	r13	#
 12672              		.cfi_def_cfa_offset 24
 12673 42f1 415E     		pop	r14	#
 12674              		.cfi_def_cfa_offset 16
 12675 42f3 415F     		pop	r15	#
 12676              		.cfi_def_cfa_offset 8
 12677 42f5 C3       		ret	
 12678              	.LVL793:
 12679              	.L1082:
 12680              		.cfi_restore_state
 12681              	# sieve_extend.c:962:     switch(sieve->size) {
 962:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 12682              		.loc 1 962 5 view .LVU4442
 12683 42f6 4981F9E8 		cmp	r9, 1000	# pretmp_201,
 12683      030000
 12684 42fd 0F84E502 		je	.L940	#,
 12684      0000
 12685 4303 7633     		jbe	.L1085	#,
 12686 4305 4981F910 		cmp	r9, 10000	# pretmp_201,
 12686      270000
 12687 430c 0F852203 		jne	.L944	#,
GAS LISTING /tmp/cclewcPz.s 			page 341


 12687      0000
 12688 4312 4981F8CD 		cmp	r8, 1229	# primeCount,
 12688      040000
 12689              	# sieve_extend.c:966:         case 10000:         valid_primes = 1229;     break;
 966:sieve_extend.c ****         case 100000:        valid_primes = 9592;     break;
 12690              		.loc 1 966 42 view .LVU4443
 12691 4319 B9CD0400 		mov	ecx, 1229	# valid_primes,
 12691      00
 12692 431e 400F94C6 		sete	sil	#, tmp179
 12693 4322 21F2     		and	edx, esi	# _253, tmp179
 12694 4324 4981F8CD 		cmp	r8, 1229	# primeCount,
 12694      040000
 12695 432b 440FB6EE 		movzx	r13d, sil	# <retval>, tmp179
 12696 432f 410F95C4 		setne	r12b	#, _135
 966:sieve_extend.c ****         case 100000:        valid_primes = 9592;     break;
 12697              		.loc 1 966 29 is_stmt 1 view .LVU4444
 12698              	.LVL794:
 966:sieve_extend.c ****         case 100000:        valid_primes = 9592;     break;
 12699              		.loc 1 966 54 view .LVU4445
 12700              	# sieve_extend.c:966:         case 10000:         valid_primes = 1229;     break;
 966:sieve_extend.c ****         case 100000:        valid_primes = 9592;     break;
 12701              		.loc 1 966 9 is_stmt 0 view .LVU4446
 12702 4333 E938FDFF 		jmp	.L951	#
 12702      FF
 12703              	.LVL795:
 12704              	.L1085:
 12705              	# sieve_extend.c:962:     switch(sieve->size) {
 962:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 12706              		.loc 1 962 5 view .LVU4447
 12707 4338 4983F90A 		cmp	r9, 10	# pretmp_201,
 12708 433c 0F841902 		je	.L942	#,
 12708      0000
 12709 4342 4983F964 		cmp	r9, 100	# pretmp_201,
 12710 4346 0F85E802 		jne	.L944	#,
 12710      0000
 12711 434c 4983F819 		cmp	r8, 25	# primeCount,
 12712 4350 0F94C1   		sete	cl	#, tmp173
 12713 4353 21CA     		and	edx, ecx	# _253, tmp173
 12714 4355 4983F819 		cmp	r8, 25	# primeCount,
 12715 4359 440FB6E9 		movzx	r13d, cl	# <retval>, tmp173
 12716 435d 410F95C4 		setne	r12b	#, _135
 12717              	# sieve_extend.c:964:         case 100:           valid_primes = 25;       break;
 964:sieve_extend.c ****         case 1000:          valid_primes = 168;      break;
 12718              		.loc 1 964 42 view .LVU4448
 12719 4361 B9190000 		mov	ecx, 25	# valid_primes,
 12719      00
 12720 4366 E905FDFF 		jmp	.L951	#
 12720      FF
 12721 436b 0F1F4400 		.p2align 4,,7
 12721      00
 12722              		.p2align 3
 12723              	.L1083:
 12724              	# sieve_extend.c:962:     switch(sieve->size) {
 962:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 12725              		.loc 1 962 5 view .LVU4449
 12726 4370 4981F940 		cmp	r9, 1000000	# pretmp_201,
 12726      420F00
GAS LISTING /tmp/cclewcPz.s 			page 342


 12727 4377 0F84B701 		je	.L948	#,
 12727      0000
 12728 437d 4981F980 		cmp	r9, 10000000	# pretmp_201,
 12728      969800
 12729 4384 0F85AA02 		jne	.L944	#,
 12729      0000
 12730 438a 4981F803 		cmp	r8, 664579	# primeCount,
 12730      240A00
 12731              	# sieve_extend.c:969:         case 10000000:      valid_primes = 664579;   break;
 969:sieve_extend.c ****         case 100000000:     valid_primes = 5761455;  break;
 12732              		.loc 1 969 42 view .LVU4450
 12733 4391 B903240A 		mov	ecx, 664579	# valid_primes,
 12733      00
 12734 4396 410F94C7 		sete	r15b	#, tmp185
 12735 439a 4421FA   		and	edx, r15d	# _253, tmp185
 12736 439d 4981F803 		cmp	r8, 664579	# primeCount,
 12736      240A00
 12737 43a4 450FB6EF 		movzx	r13d, r15b	# <retval>, tmp185
 12738 43a8 410F95C4 		setne	r12b	#, _135
 969:sieve_extend.c ****         case 100000000:     valid_primes = 5761455;  break;
 12739              		.loc 1 969 29 is_stmt 1 view .LVU4451
 12740              	.LVL796:
 969:sieve_extend.c ****         case 100000000:     valid_primes = 5761455;  break;
 12741              		.loc 1 969 54 view .LVU4452
 12742              	# sieve_extend.c:969:         case 10000000:      valid_primes = 664579;   break;
 969:sieve_extend.c ****         case 100000000:     valid_primes = 5761455;  break;
 12743              		.loc 1 969 9 is_stmt 0 view .LVU4453
 12744 43ac E9BFFCFF 		jmp	.L951	#
 12744      FF
 12745              	.LVL797:
 12746              		.p2align 4,,7
 12747 43b1 0F1F8000 		.p2align 3
 12747      000000
 12748              	.L956:
 12749              	.LBB714:
 12750              	.LBB712:
 12751              	.LBB710:
 12752              	.LBB707:
 941:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 12753              		.loc 1 941 32 is_stmt 1 view .LVU4454
 12754              	# sieve_extend.c:941:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 941:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 12755              		.loc 1 941 13 is_stmt 0 view .LVU4455
 12756 43b8 4885FF   		test	rdi, rdi	# _137
 12757 43bb 0F841DFF 		je	.L1073	#,
 12757      FFFF
 12758              	# sieve_extend.c:941:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 941:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 12759              		.loc 1 941 27 view .LVU4456
 12760 43c1 BB010000 		mov	ebx, 1	# c,
 12760      00
 12761 43c6 EB20     		jmp	.L961	#
 12762              	.LVL798:
 12763              		.p2align 4,,7
 12764              		.p2align 3
 12765              	.L970:
 12766              	# sieve_extend.c:943:                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marke
GAS LISTING /tmp/cclewcPz.s 			page 343


 943:sieve_extend.c ****                 }
 12767              		.loc 1 943 35 view .LVU4457
 12768 43c8 4989E8   		mov	r8, rbp	# warn_prime, warn_prime
 12769              	.LVL799:
 12770              	.L959:
 941:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 12771              		.loc 1 941 68 is_stmt 1 view .LVU4458
 12772              	# sieve_extend.c:941:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 941:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 12773              		.loc 1 941 69 is_stmt 0 view .LVU4459
 12774 43cb 4883C301 		add	rbx, 1	# c,
 12775              	.LVL800:
 941:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 12776              		.loc 1 941 32 is_stmt 1 view .LVU4460
 12777              	# sieve_extend.c:941:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 941:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 12778              		.loc 1 941 13 is_stmt 0 view .LVU4461
 12779 43cf 4839FB   		cmp	rbx, rdi	# c, _137
 12780 43d2 0F87F1FE 		ja	.L960	#,
 12780      FFFF
 12781              	# sieve_extend.c:941:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 941:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 12782              		.loc 1 941 51 view .LVU4462
 12783 43d8 4989DB   		mov	r11, rbx	# tmp209, c
 12784 43db 4C0FAFDB 		imul	r11, rbx	# tmp209, c
 12785              	# sieve_extend.c:941:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 941:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 12786              		.loc 1 941 47 view .LVU4463
 12787 43df 4D39E3   		cmp	r11, r12	# tmp209, ivtmp.580
 12788 43e2 0F87E1FE 		ja	.L960	#,
 12788      FFFF
 12789              	.LVL801:
 12790              	.L961:
 942:sieve_extend.c ****                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marked prime, but %ju * %ju
 12791              		.loc 1 942 17 is_stmt 1 view .LVU4464
 12792 43e8 488D2C1B 		lea	rbp, [rbx+rbx]	# _218,
 12793 43ec 31D2     		xor	edx, edx	# tmp204
 12794 43ee 4C89E0   		mov	rax, r12	# tmp203, ivtmp.580
 12795              	# sieve_extend.c:942:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 942:sieve_extend.c ****                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marked prime, but %ju * %ju
 12796              		.loc 1 942 39 is_stmt 0 view .LVU4465
 12797 43f1 488D7501 		lea	rsi, 1[rbp]	# _55,
 12798 43f5 48F7F6   		div	rsi	# _55
 12799              	# sieve_extend.c:942:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 942:sieve_extend.c ****                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marked prime, but %ju * %ju
 12800              		.loc 1 942 48 view .LVU4466
 12801 43f8 4885D2   		test	rdx, rdx	# tmp204
 12802 43fb 75CE     		jne	.L959	#,
 942:sieve_extend.c ****                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marked prime, but %ju * %ju
 12803              		.loc 1 942 48 view .LVU4467
 12804 43fd 4939EE   		cmp	r14, rbp	# ivtmp.582, _218
 12805 4400 74C9     		je	.L959	#,
 943:sieve_extend.c ****                 }
 12806              		.loc 1 943 21 is_stmt 1 view .LVU4468
 12807              	# sieve_extend.c:943:                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marke
 943:sieve_extend.c ****                 }
 12808              		.loc 1 943 24 is_stmt 0 view .LVU4469
GAS LISTING /tmp/cclewcPz.s 			page 344


 12809 4402 4983F81D 		cmp	r8, 29	# warn_prime,
 12810              	# sieve_extend.c:943:                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marke
 943:sieve_extend.c ****                 }
 12811              		.loc 1 943 35 view .LVU4470
 12812 4406 498D6801 		lea	rbp, 1[r8]	# warn_prime,
 12813              	.LVL802:
 12814              	# sieve_extend.c:943:                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marke
 943:sieve_extend.c ****                 }
 12815              		.loc 1 943 24 view .LVU4471
 12816 440a 77BC     		ja	.L970	#,
 943:sieve_extend.c ****                 }
 12817              		.loc 1 943 44 is_stmt 1 view .LVU4472
 12818              	.LVL803:
 12819              	.LBB695:
 12820              	.LBI689:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 12821              		.loc 3 105 1 view .LVU4473
 12822              	.LBB692:
 12823              		.loc 3 107 3 view .LVU4474
 12824              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 12825              		.loc 3 107 10 is_stmt 0 view .LVU4475
 12826 440c 4989F0   		mov	r8, rsi	#, _55
 12827 440f 4989C1   		mov	r9, rax	#, tmp203
 12828 4412 BF010000 		mov	edi, 1	#,
 12828      00
 12829 4417 4C89F9   		mov	rcx, r15	#, prime
 12830 441a 4C892424 		mov	QWORD PTR [rsp], r12	#, ivtmp.580
 12831 441e 4C89E2   		mov	rdx, r12	#, ivtmp.580
 12832 4421 488D3500 		lea	rsi, .LC12[rip]	#,
 12832      000000
 12833 4428 31C0     		xor	eax, eax	#
 12834 442a E8000000 		call	__printf_chk@PLT	#
 12834      00
 12835              	.LVL804:
 12836 442f 498B7D08 		mov	rdi, QWORD PTR 8[r13]	# _137, MEM[(uint64_t *)sieve_18(D) + 8B]
 12837              	.LBE692:
 12838              	.LBE695:
 12839              	# sieve_extend.c:943:                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marke
 943:sieve_extend.c ****                 }
 12840              		.loc 1 943 35 view .LVU4476
 12841 4433 4989E8   		mov	r8, rbp	# warn_prime, warn_prime
 12842              	.LBB696:
 12843              	.LBB693:
 12844              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 12845              		.loc 3 107 10 view .LVU4477
 12846 4436 EB93     		jmp	.L959	#
 12847              	.LVL805:
 12848              	.L934:
 12849              		.loc 3 107 10 view .LVU4478
 12850              	.LBE693:
 12851              	.LBE696:
 12852              	.LBE707:
 12853              	.LBE710:
 12854              	.LBE712:
 12855              	.LBE714:
 12856              	.LBB715:
 12857              	.LBB680:
GAS LISTING /tmp/cclewcPz.s 			page 345


 932:sieve_extend.c **** }
 12858              		.loc 1 932 5 is_stmt 1 view .LVU4479
 932:sieve_extend.c **** }
 12859              		.loc 1 932 5 is_stmt 0 view .LVU4480
 12860              	.LBE680:
 12861              	.LBE715:
 961:sieve_extend.c ****     switch(sieve->size) {
 12862              		.loc 1 961 5 is_stmt 1 view .LVU4481
 962:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 12863              		.loc 1 962 5 view .LVU4482
 12864 4438 4531ED   		xor	r13d, r13d	# <retval>
 12865 443b 4981F9A0 		cmp	r9, 100000	# pretmp_201,
 12865      860100
 12866 4442 41BC0100 		mov	r12d, 1	# _135,
 12866      0000
 12867 4448 41B80100 		mov	r8d, 1	# primeCount,
 12867      0000
 12868 444e 0F842202 		je	.L973	#,
 12868      0000
 12869 4454 0F872201 		ja	.L965	#,
 12869      0000
 12870 445a 4983F964 		cmp	r9, 100	# pretmp_201,
 12871 445e B9190000 		mov	ecx, 25	# valid_primes,
 12871      00
 12872 4463 742A     		je	.L952	#,
 12873              		.p2align 4,,2
 12874 4465 0F863F01 		jbe	.L1086	#,
 12874      0000
 12875 446b 4981F9E8 		cmp	r9, 1000	# pretmp_201,
 12875      030000
 12876              	# sieve_extend.c:965:         case 1000:          valid_primes = 168;      break;
 965:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 12877              		.loc 1 965 42 is_stmt 0 view .LVU4483
 12878 4472 B9A80000 		mov	ecx, 168	# valid_primes,
 12878      00
 12879              	# sieve_extend.c:962:     switch(sieve->size) {
 962:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 12880              		.loc 1 962 5 view .LVU4484
 12881 4477 7416     		je	.L952	#,
 12882 4479 4981F910 		cmp	r9, 10000	# pretmp_201,
 12882      270000
 12883 4480 B9CD0400 		mov	ecx, 1229	# tmp223,
 12883      00
 12884 4485 41BA0000 		mov	r10d, 0	# tmp224,
 12884      0000
 12885 448b 490F45CA 		cmovne	rcx, r10	# tmp223,, valid_primes, tmp224
 12886              	.LVL806:
 12887              	.L952:
 977:sieve_extend.c ****         printf("No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produ
 12888              		.loc 1 977 5 is_stmt 1 view .LVU4485
 12889              	# sieve_extend.c:977:     if (!valid && option_verboselevel >= 1) {
 977:sieve_extend.c ****         printf("No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produ
 12890              		.loc 1 977 8 is_stmt 0 view .LVU4486
 12891 448f 85DB     		test	ebx, ebx	# option_verboselevel
 12892 4491 0F8EF7FB 		jle	.L953	#,
 12892      FFFF
 12893 4497 4584E4   		test	r12b, r12b	# _135
GAS LISTING /tmp/cclewcPz.s 			page 346


 12894 449a 0F84EEFB 		je	.L953	#,
 12894      FFFF
 978:sieve_extend.c ****         if (!valid && option_verboselevel >= 2) show_primes(sieve, default_show_primes_on_error);
 12895              		.loc 1 978 9 is_stmt 1 view .LVU4487
 12896              	.LVL807:
 12897              	.LBB716:
 12898              	.LBI716:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 12899              		.loc 3 105 1 view .LVU4488
 12900              	.LBB717:
 12901              		.loc 3 107 3 view .LVU4489
 12902              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 12903              		.loc 3 107 10 is_stmt 0 view .LVU4490
 12904 44a0 31C0     		xor	eax, eax	#
 12905 44a2 4C89CA   		mov	rdx, r9	#, pretmp_201
 12906 44a5 488D3500 		lea	rsi, .LC10[rip]	#,
 12906      000000
 12907 44ac BF010000 		mov	edi, 1	#,
 12907      00
 12908 44b1 E8000000 		call	__printf_chk@PLT	#
 12908      00
 12909              	.LVL808:
 12910              		.loc 3 107 10 view .LVU4491
 12911              	.LBE717:
 12912              	.LBE716:
 979:sieve_extend.c ****     }
 12913              		.loc 1 979 9 is_stmt 1 view .LVU4492
 12914              	# sieve_extend.c:979:         if (!valid && option_verboselevel >= 2) show_primes(sieve, default_sh
 979:sieve_extend.c ****     }
 12915              		.loc 1 979 12 is_stmt 0 view .LVU4493
 12916 44b6 83FB01   		cmp	ebx, 1	# option_verboselevel,
 12917 44b9 0F8424FE 		je	.L933	#,
 12917      FFFF
 979:sieve_extend.c ****     }
 12918              		.loc 1 979 49 is_stmt 1 discriminator 1 view .LVU4494
 12919 44bf 488D7508 		lea	rsi, 8[rbp]	# tmp195,
 12920 44c3 BA640000 		mov	edx, 100	#,
 12920      00
 12921 44c8 4889EF   		mov	rdi, rbp	#, sieve
 12922 44cb E830E9FF 		call	show_primes.isra.0	#
 12922      FF
 12923              	.LVL809:
 981:sieve_extend.c ****     return (valid);
 12924              		.loc 1 981 5 discriminator 1 view .LVU4495
 12925 44d0 E9CBFBFF 		jmp	.L955	#
 12925      FF
 12926              	.LVL810:
 12927              	.L1084:
 12928              	.LBB718:
 12929              	.LBB713:
 12930              	.LBB711:
 12931              	.LBB708:
 12932              	# sieve_extend.c:952:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju) 
 952:sieve_extend.c ****         }
 12933              		.loc 1 952 44 is_stmt 0 view .LVU4496
 12934 44d5 488B4C24 		mov	rcx, QWORD PTR 24[rsp]	# warn_nonprime, %sfp
 12934      18
GAS LISTING /tmp/cclewcPz.s 			page 347


 12935              	# sieve_extend.c:952:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju) 
 952:sieve_extend.c ****         }
 12936              		.loc 1 952 28 view .LVU4497
 12937 44da 4883F91D 		cmp	rcx, 29	# warn_nonprime,
 12938              	# sieve_extend.c:952:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju) 
 952:sieve_extend.c ****         }
 12939              		.loc 1 952 44 view .LVU4498
 12940 44de 488D5901 		lea	rbx, 1[rcx]	# warn_nonprime,
 12941              	.LVL811:
 12942              	# sieve_extend.c:952:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju) 
 952:sieve_extend.c ****         }
 12943              		.loc 1 952 28 view .LVU4499
 12944 44e2 761D     		jbe	.L968	#,
 12945              	# sieve_extend.c:952:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju) 
 952:sieve_extend.c ****         }
 12946              		.loc 1 952 44 view .LVU4500
 12947 44e4 48895C24 		mov	QWORD PTR 24[rsp], rbx	# %sfp, warn_nonprime
 12947      18
 12948 44e9 E9DBFDFF 		jmp	.L960	#
 12948      FF
 12949              	.LVL812:
 12950              	.L1071:
 952:sieve_extend.c ****         }
 12951              		.loc 1 952 44 view .LVU4501
 12952 44ee 488B5424 		mov	rdx, QWORD PTR 24[rsp]	# warn_nonprime, %sfp
 12952      18
 12953              	# sieve_extend.c:952:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju) 
 952:sieve_extend.c ****         }
 12954              		.loc 1 952 28 view .LVU4502
 12955 44f3 4883FA1D 		cmp	rdx, 29	# warn_nonprime,
 12956              	# sieve_extend.c:952:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju) 
 952:sieve_extend.c ****         }
 12957              		.loc 1 952 44 view .LVU4503
 12958 44f7 488D5A01 		lea	rbx, 1[rdx]	# warn_nonprime,
 12959              	.LVL813:
 12960              	# sieve_extend.c:952:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju) 
 952:sieve_extend.c ****         }
 12961              		.loc 1 952 28 view .LVU4504
 12962 44fb 0F87DDFD 		ja	.L1073	#,
 12962      FFFF
 12963              	.LVL814:
 12964              	.L968:
 12965              	.LBB701:
 12966              	.LBB702:
 12967              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 12968              		.loc 3 107 10 view .LVU4505
 12969 4501 BF010000 		mov	edi, 1	#,
 12969      00
 12970              	.LBE702:
 12971              	.LBE701:
 12972              	# sieve_extend.c:952:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju) 
 952:sieve_extend.c ****         }
 12973              		.loc 1 952 53 view .LVU4506
 12974 4506 4B8D543F 		lea	rdx, 1[r15+r15]	# tmp220,
 12974      01
 12975              	.LBB705:
 12976              	.LBB703:
GAS LISTING /tmp/cclewcPz.s 			page 348


 12977              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 12978              		.loc 3 107 10 view .LVU4507
 12979 450b 4C89F9   		mov	rcx, r15	#, prime
 12980 450e 488D3500 		lea	rsi, .LC13[rip]	#,
 12980      000000
 12981 4515 4C894424 		mov	QWORD PTR 40[rsp], r8	# %sfp, warn_prime
 12981      28
 12982              	.LBE703:
 12983              	.LBE705:
 952:sieve_extend.c ****         }
 12984              		.loc 1 952 53 is_stmt 1 view .LVU4508
 12985              	.LVL815:
 12986              	.LBB706:
 12987              	.LBI701:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 12988              		.loc 3 105 1 view .LVU4509
 12989              	.LBB704:
 12990              		.loc 3 107 3 view .LVU4510
 12991              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 12992              		.loc 3 107 10 is_stmt 0 view .LVU4511
 12993 451a 31C0     		xor	eax, eax	#
 12994 451c E8000000 		call	__printf_chk@PLT	#
 12994      00
 12995              	.LVL816:
 12996              		.loc 3 107 10 view .LVU4512
 12997 4521 498B7D08 		mov	rdi, QWORD PTR 8[r13]	# _137, MEM[(uint64_t *)sieve_18(D) + 8B]
 12998 4525 4C8B4424 		mov	r8, QWORD PTR 40[rsp]	# warn_prime, %sfp
 12998      28
 12999 452a 48895C24 		mov	QWORD PTR 24[rsp], rbx	# %sfp, warn_nonprime
 12999      18
 13000 452f E995FDFF 		jmp	.L960	#
 13000      FF
 13001              	.LVL817:
 13002              	.L948:
 13003              		.loc 3 107 10 view .LVU4513
 13004 4534 4981F8A2 		cmp	r8, 78498	# primeCount,
 13004      320100
 13005              	.LBE704:
 13006              	.LBE706:
 13007              	.LBE708:
 13008              	.LBE711:
 13009              	.LBE713:
 13010              	.LBE718:
 13011              	# sieve_extend.c:968:         case 1000000:       valid_primes = 78498;    break;
 968:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 13012              		.loc 1 968 42 view .LVU4514
 13013 453b B9A23201 		mov	ecx, 78498	# valid_primes,
 13013      00
 13014 4540 410F94C6 		sete	r14b	#, tmp183
 13015 4544 4421F2   		and	edx, r14d	# _253, tmp183
 13016 4547 4981F8A2 		cmp	r8, 78498	# primeCount,
 13016      320100
 13017 454e 450FB6EE 		movzx	r13d, r14b	# <retval>, tmp183
 13018 4552 410F95C4 		setne	r12b	#, _135
 968:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 13019              		.loc 1 968 29 is_stmt 1 view .LVU4515
 13020              	.LVL818:
GAS LISTING /tmp/cclewcPz.s 			page 349


 968:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 13021              		.loc 1 968 54 view .LVU4516
 13022              	# sieve_extend.c:968:         case 1000000:       valid_primes = 78498;    break;
 968:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 13023              		.loc 1 968 9 is_stmt 0 view .LVU4517
 13024 4556 E915FBFF 		jmp	.L951	#
 13024      FF
 13025              	.LVL819:
 13026              	.L942:
 968:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 13027              		.loc 1 968 9 view .LVU4518
 13028 455b 4983F804 		cmp	r8, 4	# primeCount,
 13029              	# sieve_extend.c:963:         case 10:            valid_primes = 4;        break;
 963:sieve_extend.c ****         case 100:           valid_primes = 25;       break;
 13030              		.loc 1 963 42 view .LVU4519
 13031 455f B9040000 		mov	ecx, 4	# valid_primes,
 13031      00
 13032 4564 410F94C2 		sete	r10b	#, tmp175
 13033 4568 4421D2   		and	edx, r10d	# _253, tmp175
 13034 456b 4983F804 		cmp	r8, 4	# primeCount,
 13035 456f 450FB6EA 		movzx	r13d, r10b	# <retval>, tmp175
 13036 4573 410F95C4 		setne	r12b	#, _135
 13037 4577 E9F4FAFF 		jmp	.L951	#
 13037      FF
 13038              	.LVL820:
 13039              	.L965:
 13040              	# sieve_extend.c:962:     switch(sieve->size) {
 962:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 13041              		.loc 1 962 5 view .LVU4520
 13042 457c 4981F900 		cmp	r9, 100000000	# pretmp_201,
 13042      E1F505
 13043              	# sieve_extend.c:970:         case 100000000:     valid_primes = 5761455;  break;
 970:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 13044              		.loc 1 970 42 view .LVU4521
 13045 4583 B9AFE957 		mov	ecx, 5761455	# valid_primes,
 13045      00
 13046              	# sieve_extend.c:962:     switch(sieve->size) {
 962:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 13047              		.loc 1 962 5 view .LVU4522
 13048 4588 0F8401FF 		je	.L952	#,
 13048      FFFF
 13049 458e 762C     		jbe	.L1087	#,
 13050 4590 4981F900 		cmp	r9, 1000000000	# pretmp_201,
 13050      CA9A3B
 13051 4597 B92EDF07 		mov	ecx, 50847534	# tmp227,
 13051      03
 13052 459c B8000000 		mov	eax, 0	# tmp228,
 13052      00
 13053 45a1 480F45C8 		cmovne	rcx, rax	# tmp227,, valid_primes, tmp228
 13054 45a5 E9E5FEFF 		jmp	.L952	#
 13054      FF
 13055              	.L1086:
 13056 45aa 31C9     		xor	ecx, ecx	# valid_primes
 13057 45ac 4983F90A 		cmp	r9, 10	# pretmp_201,
 13058 45b0 0F94C1   		sete	cl	#, valid_primes
 13059 45b3 48C1E102 		sal	rcx, 2	# valid_primes,
 13060 45b7 E9D3FEFF 		jmp	.L952	#
GAS LISTING /tmp/cclewcPz.s 			page 350


 13060      FF
 13061              	.L1087:
 13062 45bc 4981F940 		cmp	r9, 1000000	# pretmp_201,
 13062      420F00
 13063              	# sieve_extend.c:968:         case 1000000:       valid_primes = 78498;    break;
 968:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 13064              		.loc 1 968 42 view .LVU4523
 13065 45c3 B9A23201 		mov	ecx, 78498	# valid_primes,
 13065      00
 13066              	# sieve_extend.c:962:     switch(sieve->size) {
 962:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 13067              		.loc 1 962 5 view .LVU4524
 13068 45c8 0F84C1FE 		je	.L952	#,
 13068      FFFF
 13069 45ce 4981F980 		cmp	r9, 10000000	# pretmp_201,
 13069      969800
 13070 45d5 B903240A 		mov	ecx, 664579	# tmp225,
 13070      00
 13071 45da BE000000 		mov	esi, 0	# tmp226,
 13071      00
 13072 45df 480F45CE 		cmovne	rcx, rsi	# tmp225,, valid_primes, tmp226
 13073 45e3 E9A7FEFF 		jmp	.L952	#
 13073      FF
 13074              	.LVL821:
 13075              	.L940:
 962:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 13076              		.loc 1 962 5 view .LVU4525
 13077 45e8 4981F8A8 		cmp	r8, 168	# primeCount,
 13077      000000
 13078              	# sieve_extend.c:965:         case 1000:          valid_primes = 168;      break;
 965:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 13079              		.loc 1 965 42 view .LVU4526
 13080 45ef B9A80000 		mov	ecx, 168	# valid_primes,
 13080      00
 13081 45f4 410F94C4 		sete	r12b	#, tmp177
 13082 45f8 4421E2   		and	edx, r12d	# _253, tmp177
 13083 45fb 4981F8A8 		cmp	r8, 168	# primeCount,
 13083      000000
 13084 4602 450FB6EC 		movzx	r13d, r12b	# <retval>, tmp177
 13085 4606 410F95C4 		setne	r12b	#, _135
 965:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 13086              		.loc 1 965 29 is_stmt 1 view .LVU4527
 13087              	.LVL822:
 965:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 13088              		.loc 1 965 54 view .LVU4528
 13089              	# sieve_extend.c:965:         case 1000:          valid_primes = 168;      break;
 965:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 13090              		.loc 1 965 9 is_stmt 0 view .LVU4529
 13091 460a E961FAFF 		jmp	.L951	#
 13091      FF
 13092              	.LVL823:
 13093              	.L946:
 965:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 13094              		.loc 1 965 9 view .LVU4530
 13095 460f 4981F8AF 		cmp	r8, 5761455	# primeCount,
 13095      E95700
 13096              	# sieve_extend.c:970:         case 100000000:     valid_primes = 5761455;  break;
GAS LISTING /tmp/cclewcPz.s 			page 351


 970:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 13097              		.loc 1 970 42 view .LVU4531
 13098 4616 B9AFE957 		mov	ecx, 5761455	# valid_primes,
 13098      00
 13099 461b 0F94C0   		sete	al	#, tmp187
 13100 461e 21C2     		and	edx, eax	# _253, tmp187
 13101 4620 4981F8AF 		cmp	r8, 5761455	# primeCount,
 13101      E95700
 13102 4627 440FB6E8 		movzx	r13d, al	# <retval>, tmp187
 13103 462b 410F95C4 		setne	r12b	#, _135
 970:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 13104              		.loc 1 970 29 is_stmt 1 view .LVU4532
 13105              	.LVL824:
 970:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 13106              		.loc 1 970 54 view .LVU4533
 13107              	# sieve_extend.c:970:         case 100000000:     valid_primes = 5761455;  break;
 970:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 13108              		.loc 1 970 9 is_stmt 0 view .LVU4534
 13109 462f E93CFAFF 		jmp	.L951	#
 13109      FF
 13110              	.LVL825:
 13111              	.L944:
 970:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 13112              		.loc 1 970 9 view .LVU4535
 13113 4634 4D85C0   		test	r8, r8	# primeCount
 13114 4637 410F94C3 		sete	r11b	#, tmp191
 13115 463b 4421DA   		and	edx, r11d	# _253, tmp191
 13116 463e 4D85C0   		test	r8, r8	# primeCount
 13117 4641 450FB6EB 		movzx	r13d, r11b	# <retval>, tmp191
 13118 4645 410F95C4 		setne	r12b	#, _135
 972:sieve_extend.c ****     }
 13119              		.loc 1 972 29 is_stmt 1 view .LVU4536
 13120              	# sieve_extend.c:972:         default:            valid_primes= 0;
 972:sieve_extend.c ****     }
 13121              		.loc 1 972 41 is_stmt 0 view .LVU4537
 13122 4649 31C9     		xor	ecx, ecx	# valid_primes
 13123 464b E920FAFF 		jmp	.L951	#
 13123      FF
 13124              	.L938:
 972:sieve_extend.c ****     }
 13125              		.loc 1 972 41 view .LVU4538
 13126 4650 4981F878 		cmp	r8, 9592	# primeCount,
 13126      250000
 13127              	# sieve_extend.c:967:         case 100000:        valid_primes = 9592;     break;
 967:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
 13128              		.loc 1 967 42 view .LVU4539
 13129 4657 B9782500 		mov	ecx, 9592	# valid_primes,
 13129      00
 13130 465c 400F94C7 		sete	dil	#, tmp181
 13131 4660 21FA     		and	edx, edi	# _253, tmp181
 13132 4662 4981F878 		cmp	r8, 9592	# primeCount,
 13132      250000
 13133 4669 440FB6EF 		movzx	r13d, dil	# <retval>, tmp181
 13134 466d 410F95C4 		setne	r12b	#, _135
 967:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
 13135              		.loc 1 967 29 is_stmt 1 view .LVU4540
 13136              	.LVL826:
GAS LISTING /tmp/cclewcPz.s 			page 352


 967:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
 13137              		.loc 1 967 54 view .LVU4541
 13138              	# sieve_extend.c:967:         case 100000:        valid_primes = 9592;     break;
 967:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
 13139              		.loc 1 967 9 is_stmt 0 view .LVU4542
 13140 4671 E9FAF9FF 		jmp	.L951	#
 13140      FF
 13141              	.LVL827:
 13142              	.L973:
 13143              	# sieve_extend.c:967:         case 100000:        valid_primes = 9592;     break;
 967:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
 13144              		.loc 1 967 42 view .LVU4543
 13145 4676 B9782500 		mov	ecx, 9592	# valid_primes,
 13145      00
 13146 467b E90FFEFF 		jmp	.L952	#
 13146      FF
 13147              		.cfi_endproc
 13148              	.LFE84:
 13150              		.section	.rodata.str1.8
 13151 0145 000000   		.align 8
 13152              	.LC14:
 13153 0148 55736167 		.string	"Usage: %s [options] [maximum]\n"
 13153      653A2025 
 13153      73205B6F 
 13153      7074696F 
 13153      6E735D20 
 13154              		.section	.rodata.str1.1
 13155              	.LC15:
 13156 0031 4F707469 		.string	"Options:\n"
 13156      6F6E733A 
 13156      0A00
 13157              		.section	.rodata.str1.8
 13158 0167 00       		.align 8
 13159              	.LC16:
 13160 0168 20202D2D 		.string	"  --verbose <level>  Show more output to a certain level:\n"
 13160      76657262 
 13160      6F736520 
 13160      3C6C6576 
 13160      656C3E20 
 13161 01a3 00000000 		.align 8
 13161      00
 13162              	.LC17:
 13163 01a8 20202020 		.string	"                     1 - show phase progress\n"
 13163      20202020 
 13163      20202020 
 13163      20202020 
 13163      20202020 
 13164 01d6 0000     		.align 8
 13165              	.LC18:
 13166 01d8 20202020 		.string	"                     2 - show general progress within the phase\n"
 13166      20202020 
 13166      20202020 
 13166      20202020 
 13166      20202020 
 13167 0219 00000000 		.align 8
 13167      000000
 13168              	.LC19:
GAS LISTING /tmp/cclewcPz.s 			page 353


 13169 0220 20202020 		.string	"                     3 - show actual work\n"
 13169      20202020 
 13169      20202020 
 13169      20202020 
 13169      20202020 
 13170 024b 00000000 		.align 8
 13170      00
 13171              	.LC20:
 13172 0250 20202D2D 		.string	"  --check            check the correctness of the algorithm\n"
 13172      63686563 
 13172      6B202020 
 13172      20202020 
 13172      20202020 
 13173 028d 000000   		.align 8
 13174              	.LC21:
 13175 0290 20202D2D 		.string	"  --show <maximum>   Show the primes found up to the maximum\n"
 13175      73686F77 
 13175      203C6D61 
 13175      78696D75 
 13175      6D3E2020 
 13176 02ce 0000     		.align 8
 13177              	.LC22:
 13178 02d0 20202D2D 		.string	"  --tune  <level>    find the best settings for the current os and hardware\n"
 13178      74756E65 
 13178      20203C6C 
 13178      6576656C 
 13178      3E202020 
 13179 031d 000000   		.align 8
 13180              	.LC23:
 13181 0320 20202020 		.string	"                     1 - fast tuning\n"
 13181      20202020 
 13181      20202020 
 13181      20202020 
 13181      20202020 
 13182 0346 0000     		.align 8
 13183              	.LC24:
 13184 0348 20202020 		.string	"                     2 - refined tuning\n"
 13184      20202020 
 13184      20202020 
 13184      20202020 
 13184      20202020 
 13185 0371 00000000 		.align 8
 13185      000000
 13186              	.LC25:
 13187 0378 20202020 		.string	"                     3 - maximum tuning (takes long)\n"
 13187      20202020 
 13187      20202020 
 13187      20202020 
 13187      20202020 
 13188              		.text
 13189              		.p2align 4
 13190              		.globl	usage
 13192              	usage:
 13193              	.LVL828:
 13194              	.LFB85:
 985:sieve_extend.c ****     fprintf(stderr, "Usage: %s [options] [maximum]\n", name);
 13195              		.loc 1 985 24 is_stmt 1 view -0
GAS LISTING /tmp/cclewcPz.s 			page 354


 13196              		.cfi_startproc
 985:sieve_extend.c ****     fprintf(stderr, "Usage: %s [options] [maximum]\n", name);
 13197              		.loc 1 985 24 is_stmt 0 view .LVU4545
 13198 4680 F30F1EFA 		endbr64	
 13199 4684 50       		push	rax	#
 13200              		.cfi_def_cfa_offset 16
 13201 4685 58       		pop	rax	#
 13202              		.cfi_def_cfa_offset 8
 986:sieve_extend.c ****     fprintf(stderr, "Options:\n");
 13203              		.loc 1 986 5 is_stmt 1 view .LVU4546
 13204              	.LVL829:
 13205              	.LBB719:
 13206              	.LBI719:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13207              		.loc 3 98 1 view .LVU4547
 13208              	.LBB720:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13209              		.loc 3 100 3 view .LVU4548
 13210              	.LBE720:
 13211              	.LBE719:
 13212              	# sieve_extend.c:985: void usage(char *name) {
 985:sieve_extend.c ****     fprintf(stderr, "Usage: %s [options] [maximum]\n", name);
 13213              		.loc 1 985 24 is_stmt 0 view .LVU4549
 13214 4686 488D6424 		lea	rsp, -8[rsp]	#,
 13214      F8
 13215              		.cfi_def_cfa_offset 16
 13216              	# sieve_extend.c:985: void usage(char *name) {
 985:sieve_extend.c ****     fprintf(stderr, "Usage: %s [options] [maximum]\n", name);
 13217              		.loc 1 985 24 view .LVU4550
 13218 468b 4889F9   		mov	rcx, rdi	# name, tmp107
 13219              	.LBB722:
 13220              	.LBB721:
 13221              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13222              		.loc 3 100 10 view .LVU4551
 13223 468e 488B3D00 		mov	rdi, QWORD PTR stderr[rip]	#, stderr
 13223      000000
 13224              	.LVL830:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13225              		.loc 3 100 10 view .LVU4552
 13226 4695 488D1500 		lea	rdx, .LC14[rip]	#,
 13226      000000
 13227 469c BE010000 		mov	esi, 1	#,
 13227      00
 13228 46a1 31C0     		xor	eax, eax	#
 13229 46a3 E8000000 		call	__fprintf_chk@PLT	#
 13229      00
 13230              	.LVL831:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13231              		.loc 3 100 10 view .LVU4553
 13232              	.LBE721:
 13233              	.LBE722:
 987:sieve_extend.c ****     fprintf(stderr, "  --verbose <level>  Show more output to a certain level:\n");
 13234              		.loc 1 987 5 is_stmt 1 view .LVU4554
 13235              	.LBB723:
 13236              	.LBI723:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
GAS LISTING /tmp/cclewcPz.s 			page 355


 13237              		.loc 3 98 1 view .LVU4555
 13238              	.LBB724:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13239              		.loc 3 100 3 view .LVU4556
 13240              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13241              		.loc 3 100 10 is_stmt 0 view .LVU4557
 13242 46a8 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 13242      000000
 13243 46af BA090000 		mov	edx, 9	#,
 13243      00
 13244 46b4 BE010000 		mov	esi, 1	#,
 13244      00
 13245 46b9 488D3D00 		lea	rdi, .LC15[rip]	#,
 13245      000000
 13246 46c0 E8000000 		call	fwrite@PLT	#
 13246      00
 13247              	.LVL832:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13248              		.loc 3 100 10 view .LVU4558
 13249              	.LBE724:
 13250              	.LBE723:
 988:sieve_extend.c ****     fprintf(stderr, "                     1 - show phase progress\n");
 13251              		.loc 1 988 5 is_stmt 1 view .LVU4559
 13252              	.LBB725:
 13253              	.LBI725:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13254              		.loc 3 98 1 view .LVU4560
 13255              	.LBB726:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13256              		.loc 3 100 3 view .LVU4561
 13257              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13258              		.loc 3 100 10 is_stmt 0 view .LVU4562
 13259 46c5 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 13259      000000
 13260 46cc BA3A0000 		mov	edx, 58	#,
 13260      00
 13261 46d1 BE010000 		mov	esi, 1	#,
 13261      00
 13262 46d6 488D3D00 		lea	rdi, .LC16[rip]	#,
 13262      000000
 13263 46dd E8000000 		call	fwrite@PLT	#
 13263      00
 13264              	.LVL833:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13265              		.loc 3 100 10 view .LVU4563
 13266              	.LBE726:
 13267              	.LBE725:
 989:sieve_extend.c ****     fprintf(stderr, "                     2 - show general progress within the phase\n");
 13268              		.loc 1 989 5 is_stmt 1 view .LVU4564
 13269              	.LBB727:
 13270              	.LBI727:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13271              		.loc 3 98 1 view .LVU4565
 13272              	.LBB728:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
GAS LISTING /tmp/cclewcPz.s 			page 356


 13273              		.loc 3 100 3 view .LVU4566
 13274              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13275              		.loc 3 100 10 is_stmt 0 view .LVU4567
 13276 46e2 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 13276      000000
 13277 46e9 BA2D0000 		mov	edx, 45	#,
 13277      00
 13278 46ee BE010000 		mov	esi, 1	#,
 13278      00
 13279 46f3 488D3D00 		lea	rdi, .LC17[rip]	#,
 13279      000000
 13280 46fa E8000000 		call	fwrite@PLT	#
 13280      00
 13281              	.LVL834:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13282              		.loc 3 100 10 view .LVU4568
 13283              	.LBE728:
 13284              	.LBE727:
 990:sieve_extend.c ****     fprintf(stderr, "                     3 - show actual work\n");
 13285              		.loc 1 990 5 is_stmt 1 view .LVU4569
 13286              	.LBB729:
 13287              	.LBI729:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13288              		.loc 3 98 1 view .LVU4570
 13289              	.LBB730:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13290              		.loc 3 100 3 view .LVU4571
 13291              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13292              		.loc 3 100 10 is_stmt 0 view .LVU4572
 13293 46ff 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 13293      000000
 13294 4706 BA400000 		mov	edx, 64	#,
 13294      00
 13295 470b BE010000 		mov	esi, 1	#,
 13295      00
 13296 4710 488D3D00 		lea	rdi, .LC18[rip]	#,
 13296      000000
 13297 4717 E8000000 		call	fwrite@PLT	#
 13297      00
 13298              	.LVL835:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13299              		.loc 3 100 10 view .LVU4573
 13300              	.LBE730:
 13301              	.LBE729:
 991:sieve_extend.c ****     fprintf(stderr, "  --check            check the correctness of the algorithm\n");
 13302              		.loc 1 991 5 is_stmt 1 view .LVU4574
 13303              	.LBB731:
 13304              	.LBI731:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13305              		.loc 3 98 1 view .LVU4575
 13306              	.LBB732:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13307              		.loc 3 100 3 view .LVU4576
 13308              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
GAS LISTING /tmp/cclewcPz.s 			page 357


 13309              		.loc 3 100 10 is_stmt 0 view .LVU4577
 13310 471c 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 13310      000000
 13311 4723 BA2A0000 		mov	edx, 42	#,
 13311      00
 13312 4728 BE010000 		mov	esi, 1	#,
 13312      00
 13313 472d 488D3D00 		lea	rdi, .LC19[rip]	#,
 13313      000000
 13314 4734 E8000000 		call	fwrite@PLT	#
 13314      00
 13315              	.LVL836:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13316              		.loc 3 100 10 view .LVU4578
 13317              	.LBE732:
 13318              	.LBE731:
 992:sieve_extend.c ****     fprintf(stderr, "  --show <maximum>   Show the primes found up to the maximum\n");
 13319              		.loc 1 992 5 is_stmt 1 view .LVU4579
 13320              	.LBB733:
 13321              	.LBI733:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13322              		.loc 3 98 1 view .LVU4580
 13323              	.LBB734:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13324              		.loc 3 100 3 view .LVU4581
 13325              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13326              		.loc 3 100 10 is_stmt 0 view .LVU4582
 13327 4739 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 13327      000000
 13328 4740 BA3C0000 		mov	edx, 60	#,
 13328      00
 13329 4745 BE010000 		mov	esi, 1	#,
 13329      00
 13330 474a 488D3D00 		lea	rdi, .LC20[rip]	#,
 13330      000000
 13331 4751 E8000000 		call	fwrite@PLT	#
 13331      00
 13332              	.LVL837:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13333              		.loc 3 100 10 view .LVU4583
 13334              	.LBE734:
 13335              	.LBE733:
 993:sieve_extend.c ****     fprintf(stderr, "  --tune  <level>    find the best settings for the current os and hardware\n"
 13336              		.loc 1 993 5 is_stmt 1 view .LVU4584
 13337              	.LBB735:
 13338              	.LBI735:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13339              		.loc 3 98 1 view .LVU4585
 13340              	.LBB736:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13341              		.loc 3 100 3 view .LVU4586
 13342              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13343              		.loc 3 100 10 is_stmt 0 view .LVU4587
 13344 4756 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 13344      000000
GAS LISTING /tmp/cclewcPz.s 			page 358


 13345 475d BA3D0000 		mov	edx, 61	#,
 13345      00
 13346 4762 BE010000 		mov	esi, 1	#,
 13346      00
 13347 4767 488D3D00 		lea	rdi, .LC21[rip]	#,
 13347      000000
 13348 476e E8000000 		call	fwrite@PLT	#
 13348      00
 13349              	.LVL838:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13350              		.loc 3 100 10 view .LVU4588
 13351              	.LBE736:
 13352              	.LBE735:
 994:sieve_extend.c ****     fprintf(stderr, "                     1 - fast tuning\n");
 13353              		.loc 1 994 5 is_stmt 1 view .LVU4589
 13354              	.LBB737:
 13355              	.LBI737:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13356              		.loc 3 98 1 view .LVU4590
 13357              	.LBB738:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13358              		.loc 3 100 3 view .LVU4591
 13359              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13360              		.loc 3 100 10 is_stmt 0 view .LVU4592
 13361 4773 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 13361      000000
 13362 477a BA4C0000 		mov	edx, 76	#,
 13362      00
 13363 477f BE010000 		mov	esi, 1	#,
 13363      00
 13364 4784 488D3D00 		lea	rdi, .LC22[rip]	#,
 13364      000000
 13365 478b E8000000 		call	fwrite@PLT	#
 13365      00
 13366              	.LVL839:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13367              		.loc 3 100 10 view .LVU4593
 13368              	.LBE738:
 13369              	.LBE737:
 995:sieve_extend.c ****     fprintf(stderr, "                     2 - refined tuning\n");
 13370              		.loc 1 995 5 is_stmt 1 view .LVU4594
 13371              	.LBB739:
 13372              	.LBI739:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13373              		.loc 3 98 1 view .LVU4595
 13374              	.LBB740:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13375              		.loc 3 100 3 view .LVU4596
 13376              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13377              		.loc 3 100 10 is_stmt 0 view .LVU4597
 13378 4790 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 13378      000000
 13379 4797 BA250000 		mov	edx, 37	#,
 13379      00
 13380 479c BE010000 		mov	esi, 1	#,
GAS LISTING /tmp/cclewcPz.s 			page 359


 13380      00
 13381 47a1 488D3D00 		lea	rdi, .LC23[rip]	#,
 13381      000000
 13382 47a8 E8000000 		call	fwrite@PLT	#
 13382      00
 13383              	.LVL840:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13384              		.loc 3 100 10 view .LVU4598
 13385              	.LBE740:
 13386              	.LBE739:
 996:sieve_extend.c ****     fprintf(stderr, "                     3 - maximum tuning (takes long)\n");
 13387              		.loc 1 996 5 is_stmt 1 view .LVU4599
 13388              	.LBB741:
 13389              	.LBI741:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13390              		.loc 3 98 1 view .LVU4600
 13391              	.LBB742:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13392              		.loc 3 100 3 view .LVU4601
 13393              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13394              		.loc 3 100 10 is_stmt 0 view .LVU4602
 13395 47ad 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 13395      000000
 13396 47b4 BA280000 		mov	edx, 40	#,
 13396      00
 13397 47b9 BE010000 		mov	esi, 1	#,
 13397      00
 13398 47be 488D3D00 		lea	rdi, .LC24[rip]	#,
 13398      000000
 13399 47c5 E8000000 		call	fwrite@PLT	#
 13399      00
 13400              	.LVL841:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13401              		.loc 3 100 10 view .LVU4603
 13402              	.LBE742:
 13403              	.LBE741:
 997:sieve_extend.c ****     exit(1);
 13404              		.loc 1 997 5 is_stmt 1 view .LVU4604
 13405              	.LBB743:
 13406              	.LBI743:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13407              		.loc 3 98 1 view .LVU4605
 13408              	.LBB744:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13409              		.loc 3 100 3 view .LVU4606
 13410              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13411              		.loc 3 100 10 is_stmt 0 view .LVU4607
 13412 47ca 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 13412      000000
 13413 47d1 488D3D00 		lea	rdi, .LC25[rip]	#,
 13413      000000
 13414 47d8 BA350000 		mov	edx, 53	#,
 13414      00
 13415 47dd BE010000 		mov	esi, 1	#,
 13415      00
GAS LISTING /tmp/cclewcPz.s 			page 360


 13416 47e2 E8000000 		call	fwrite@PLT	#
 13416      00
 13417              	.LVL842:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 13418              		.loc 3 100 10 view .LVU4608
 13419              	.LBE744:
 13420              	.LBE743:
 998:sieve_extend.c **** }
 13421              		.loc 1 998 5 is_stmt 1 view .LVU4609
 13422 47e7 BF010000 		mov	edi, 1	#,
 13422      00
 13423 47ec E8000000 		call	exit@PLT	#
 13423      00
 13424              	.LVL843:
 13425              		.cfi_endproc
 13426              	.LFE85:
 13428              		.section	.rodata.str1.1
 13429              	.LC26:
 13430 003b 256400   		.string	"%d"
 13431              	.LC27:
 13432 003e 2C253033 		.string	",%03d"
 13432      6400
 13433              		.text
 13434 47f1 66662E0F 		.p2align 4
 13434      1F840000 
 13434      0000000F 
 13434      1F4000
 13435              		.globl	printfcomma2
 13437              	printfcomma2:
 13438              	.LVL844:
 13439              	.LFB90:
1044:sieve_extend.c **** 
1045:sieve_extend.c **** static inline void tuning_result_print(tuning_result_type tuning_result) {
1046:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
1047:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
1048:sieve_extend.c ****                             (uintmax_t)tuning_result.smallstep_faster,(uintmax_t)tuning_result.medi
1049:sieve_extend.c ****                             (uintmax_t)tuning_result.passes, (uintmax_t) tuning_result.sample_max,
1050:sieve_extend.c ****                             tuning_result.elapsed_time, tuning_result.sample_duration, tuning_resul
1051:sieve_extend.c **** }
1052:sieve_extend.c **** 
1053:sieve_extend.c **** static tuning_result_type tune(int tune_level, counter_t maxints, int option_verboselevel) {
1054:sieve_extend.c ****     counter_t best_blocksize_bits = default_blocksize;
1055:sieve_extend.c **** 
1056:sieve_extend.c ****     double best_avg = 0;
1057:sieve_extend.c ****     best_blocksize_bits = 0;
1058:sieve_extend.c ****     counter_t best_smallstep_faster = 0;
1059:sieve_extend.c ****     counter_t best_mediumstep_faster = 0;
1060:sieve_extend.c ****     counter_t best_vectorstep_faster = 0;
1061:sieve_extend.c ****     counter_t smallstep_faster_steps = 4;
1062:sieve_extend.c ****     counter_t mediumstep_faster_steps = 4;
1063:sieve_extend.c ****     counter_t vectorstep_faster_steps = 32;
1064:sieve_extend.c ****     counter_t freebits_steps = anticiped_cache_line_bytesize;
1065:sieve_extend.c ****     counter_t sample_max = default_sample_max;
1066:sieve_extend.c ****     double sample_duration = default_sample_duration;
1067:sieve_extend.c **** 
1068:sieve_extend.c ****     // determines the size of the resultset
1069:sieve_extend.c ****     switch (tune_level) {
GAS LISTING /tmp/cclewcPz.s 			page 361


1070:sieve_extend.c ****         case 1:
1071:sieve_extend.c ****             smallstep_faster_steps  = WORD_SIZE/4;
1072:sieve_extend.c ****             mediumstep_faster_steps = WORD_SIZE/4;
1073:sieve_extend.c ****             vectorstep_faster_steps = WORD_SIZE/2;
1074:sieve_extend.c ****             freebits_steps = anticiped_cache_line_bytesize*8*2;
1075:sieve_extend.c ****             sample_max = 8;
1076:sieve_extend.c ****             sample_duration = 0.1;
1077:sieve_extend.c ****             break;
1078:sieve_extend.c ****         case 2:
1079:sieve_extend.c ****             smallstep_faster_steps  = WORD_SIZE/8;
1080:sieve_extend.c ****             mediumstep_faster_steps = WORD_SIZE/8;
1081:sieve_extend.c ****             vectorstep_faster_steps = WORD_SIZE/4;
1082:sieve_extend.c ****             freebits_steps = anticiped_cache_line_bytesize*8;
1083:sieve_extend.c ****             sample_max = 8;
1084:sieve_extend.c ****             sample_duration = 0.2;
1085:sieve_extend.c ****             break;
1086:sieve_extend.c ****         case 3:
1087:sieve_extend.c ****             smallstep_faster_steps  = WORD_SIZE/16;
1088:sieve_extend.c ****             mediumstep_faster_steps = WORD_SIZE/16;
1089:sieve_extend.c ****             vectorstep_faster_steps = WORD_SIZE/16;
1090:sieve_extend.c ****             freebits_steps = anticiped_cache_line_bytesize/2;
1091:sieve_extend.c ****             sample_max = 8;
1092:sieve_extend.c ****             sample_duration = 0.2;
1093:sieve_extend.c ****             break;
1094:sieve_extend.c ****     }
1095:sieve_extend.c ****     
1096:sieve_extend.c ****     if (option_verboselevel >= 1) printf("Tuning..."); 
1097:sieve_extend.c ****     if (option_verboselevel >= 2) printf("\n");
1098:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
1099:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
1100:sieve_extend.c ****     counter_t tuning_results=0;
1101:sieve_extend.c ****     counter_t tuning_result_index=0;
1102:sieve_extend.c ****     
1103:sieve_extend.c ****     for (counter_t smallstep_faster = 0; smallstep_faster <= WORD_SIZE/2; smallstep_faster += small
1104:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
1105:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
1106:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
1107:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
1108:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
1109:sieve_extend.c **** 
1110:sieve_extend.c ****                         // set variables
1111:sieve_extend.c ****                         tuning_results++;
1112:sieve_extend.c ****                         tuning_result[tuning_result_index].maxints = maxints;
1113:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_duration = sample_duration;
1114:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_max = sample_max;
1115:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_kb = blocksize_kb;
1116:sieve_extend.c ****                         tuning_result[tuning_result_index].free_bits = free_bits;
1117:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_bits = blocksize_bits;
1118:sieve_extend.c ****                         tuning_result[tuning_result_index].smallstep_faster = smallstep_faster;
1119:sieve_extend.c ****                         tuning_result[tuning_result_index].mediumstep_faster = mediumstep_faster;
1120:sieve_extend.c ****                         tuning_result[tuning_result_index].vectorstep_faster = vectorstep_faster;
1121:sieve_extend.c ****                         tune_benchmark(tuning_result, tuning_result_index);
1122:sieve_extend.c **** 
1123:sieve_extend.c ****                         if ( tuning_result[tuning_result_index].avg > best_avg) {
1124:sieve_extend.c ****                             best_avg = tuning_result[tuning_result_index].avg;
1125:sieve_extend.c ****                             best_blocksize_bits = blocksize_bits;
1126:sieve_extend.c ****                             best_smallstep_faster = smallstep_faster;
GAS LISTING /tmp/cclewcPz.s 			page 362


1127:sieve_extend.c ****                             best_mediumstep_faster = mediumstep_faster;
1128:sieve_extend.c ****                             best_vectorstep_faster = vectorstep_faster;
1129:sieve_extend.c ****                             if (option_verboselevel >=2) { printf(".(>)"); tuning_result_print(tuni
1130:sieve_extend.c ****                         }
1131:sieve_extend.c ****                         if (option_verboselevel >= 3) { printf("...."); tuning_result_print(tuning_
1132:sieve_extend.c ****                         tuning_result_index++;
1133:sieve_extend.c ****                     }
1134:sieve_extend.c ****                 }
1135:sieve_extend.c ****             }
1136:sieve_extend.c ****         }
1137:sieve_extend.c ****     }
1138:sieve_extend.c ****     if (option_verboselevel >= 2) {
1139:sieve_extend.c ****         printf("%ju results. Inital best blocksize: %ju; best smallstep %ju; best mediumstep %ju; b
1140:sieve_extend.c ****         printf("Best options\n");
1141:sieve_extend.c ****     }
1142:sieve_extend.c ****     counter_t step=0;
1143:sieve_extend.c ****     while (tuning_results>4) {
1144:sieve_extend.c ****         qsort(tuning_result, (size_t)tuning_results, sizeof(tuning_result_type), compare_tuning_res
1145:sieve_extend.c ****         step++;
1146:sieve_extend.c ****         if (option_verboselevel >= 2) {
1147:sieve_extend.c ****             tuning_result_index = 0;
1148:sieve_extend.c ****             printf("(%ju) ",(uintmax_t)step); tuning_result_print(tuning_result[tuning_result_index
1149:sieve_extend.c ****             if (option_verboselevel >= 3) {
1150:sieve_extend.c ****                 for (counter_t tuning_result_index=0; tuning_result_index<min(10,tuning_results); t
1151:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
1152:sieve_extend.c ****                 }
1153:sieve_extend.c ****             }
1154:sieve_extend.c ****         }
1155:sieve_extend.c **** 
1156:sieve_extend.c ****         tuning_results = tuning_results / 2;
1157:sieve_extend.c **** 
1158:sieve_extend.c ****         for (counter_t i=0; i<tuning_results; i++) {
1159:sieve_extend.c ****             tune_benchmark(tuning_result, i);
1160:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
1161:sieve_extend.c ****         }
1162:sieve_extend.c ****         
1163:sieve_extend.c ****     }
1164:sieve_extend.c ****     tuning_result_type best_result = tuning_result[0];
1165:sieve_extend.c ****     if (option_verboselevel >= 1) {
1166:sieve_extend.c ****         tuning_result_index = 0;
1167:sieve_extend.c ****         printf(".Best result:"); tuning_result_print(tuning_result[tuning_result_index]);
1168:sieve_extend.c ****     }
1169:sieve_extend.c **** 
1170:sieve_extend.c ****     free(tuning_result);
1171:sieve_extend.c ****     return best_result;
1172:sieve_extend.c **** }
1173:sieve_extend.c **** 
1174:sieve_extend.c **** void printfcomma2 (int n) {
 13440              		.loc 1 1174 27 view -0
 13441              		.cfi_startproc
 13442              		.loc 1 1174 27 is_stmt 0 view .LVU4611
 13443 4800 F30F1EFA 		endbr64	
1175:sieve_extend.c ****     if (n < 1000) {
 13444              		.loc 1 1175 5 is_stmt 1 view .LVU4612
 13445              	# sieve_extend.c:1174: void printfcomma2 (int n) {
1174:sieve_extend.c ****     if (n < 1000) {
 13446              		.loc 1 1174 27 is_stmt 0 view .LVU4613
GAS LISTING /tmp/cclewcPz.s 			page 363


 13447 4804 4154     		push	r12	#
 13448              		.cfi_def_cfa_offset 16
 13449              		.cfi_offset 12, -16
 13450              	.LBB755:
 13451              	.LBB756:
 13452              	.LBB757:
 13453              	.LBB758:
 13454              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13455              		.loc 3 107 10 view .LVU4614
 13456 4806 89FA     		mov	edx, edi	#, n
 13457              	.LBE758:
 13458              	.LBE757:
 13459              	.LBE756:
 13460              	.LBE755:
 13461              	# sieve_extend.c:1174: void printfcomma2 (int n) {
1174:sieve_extend.c ****     if (n < 1000) {
 13462              		.loc 1 1174 27 view .LVU4615
 13463 4808 4189FC   		mov	r12d, edi	# n, tmp99
 13464 480b 53       		push	rbx	#
 13465              		.cfi_def_cfa_offset 24
 13466              		.cfi_offset 3, -24
 13467              	.LBB762:
 13468              	.LBB761:
 13469              	.LBB760:
 13470              	.LBB759:
 13471              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13472              		.loc 3 107 10 view .LVU4616
 13473 480c 488D3500 		lea	rsi, .LC26[rip]	#,
 13473      000000
 13474              	.LBE759:
 13475              	.LBE760:
 13476              	.LBE761:
 13477              	.LBE762:
 13478              	# sieve_extend.c:1174: void printfcomma2 (int n) {
1174:sieve_extend.c ****     if (n < 1000) {
 13479              		.loc 1 1174 27 view .LVU4617
 13480 4813 488D6424 		lea	rsp, -8[rsp]	#,
 13480      F8
 13481              		.cfi_def_cfa_offset 32
 13482              	# sieve_extend.c:1175:     if (n < 1000) {
 13483              		.loc 1 1175 8 view .LVU4618
 13484 4818 81FFE703 		cmp	edi, 999	# n,
 13484      0000
 13485 481e 7E2E     		jle	.L1093	#,
1176:sieve_extend.c ****         printf ("%d", n);
1177:sieve_extend.c ****         return;
1178:sieve_extend.c ****     }
1179:sieve_extend.c ****     printfcomma2 (n/1000);
 13486              		.loc 1 1179 5 is_stmt 1 view .LVU4619
 13487 4820 4863DF   		movsx	rbx, edi	# n, n
 13488 4823 89F8     		mov	eax, edi	# tmp90, n
 13489 4825 4869DBD3 		imul	rbx, rbx, 274877907	# tmp87, n,
 13489      4D6210
 13490 482c C1F81F   		sar	eax, 31	# tmp90,
 13491 482f 48C1FB26 		sar	rbx, 38	# tmp89,
 13492 4833 29C3     		sub	ebx, eax	# tmp85, tmp90
 13493 4835 89DF     		mov	edi, ebx	#, tmp85
GAS LISTING /tmp/cclewcPz.s 			page 364


 13494              	.LVL845:
 13495              		.loc 1 1179 5 is_stmt 0 view .LVU4620
 13496 4837 E8000000 		call	printfcomma2	#
 13496      00
 13497              	.LVL846:
1180:sieve_extend.c ****     printf (",%03d", n%1000);
 13498              		.loc 1 1180 5 is_stmt 1 view .LVU4621
 13499              	.LBB763:
 13500              	.LBI763:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13501              		.loc 3 105 1 view .LVU4622
 13502              	.LBB764:
 13503              		.loc 3 107 3 view .LVU4623
 13504              	.LBE764:
 13505              	.LBE763:
 13506              	# sieve_extend.c:1180:     printf (",%03d", n%1000);
 13507              		.loc 1 1180 5 is_stmt 0 view .LVU4624
 13508 483c 69CBE803 		imul	ecx, ebx, 1000	# tmp97, tmp85,
 13508      0000
 13509 4842 4489E2   		mov	edx, r12d	# n, n
 13510              	.LBB769:
 13511              	.LBB765:
 13512              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13513              		.loc 3 107 10 view .LVU4625
 13514 4845 488D3500 		lea	rsi, .LC27[rip]	#,
 13514      000000
 13515              	.LBE765:
 13516              	.LBE769:
 13517              	# sieve_extend.c:1180:     printf (",%03d", n%1000);
 13518              		.loc 1 1180 5 view .LVU4626
 13519 484c 29CA     		sub	edx, ecx	# n, tmp97
 13520              	.LVL847:
 13521              	.L1093:
 13522              	# sieve_extend.c:1181: }
1181:sieve_extend.c **** }
 13523              		.loc 1 1181 1 view .LVU4627
 13524 484e 488D6424 		lea	rsp, 8[rsp]	#,
 13524      08
 13525              		.cfi_def_cfa_offset 24
 13526              	.LBB770:
 13527              	.LBB766:
 13528              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13529              		.loc 3 107 10 view .LVU4628
 13530 4853 BF010000 		mov	edi, 1	#,
 13530      00
 13531              	.LBE766:
 13532              	.LBE770:
 13533              	# sieve_extend.c:1181: }
 13534              		.loc 1 1181 1 view .LVU4629
 13535 4858 5B       		pop	rbx	#
 13536              		.cfi_def_cfa_offset 16
 13537              	.LBB771:
 13538              	.LBB767:
 13539              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13540              		.loc 3 107 10 view .LVU4630
 13541 4859 31C0     		xor	eax, eax	#
 13542              	.LBE767:
GAS LISTING /tmp/cclewcPz.s 			page 365


 13543              	.LBE771:
 13544              	# sieve_extend.c:1181: }
 13545              		.loc 1 1181 1 view .LVU4631
 13546 485b 415C     		pop	r12	#
 13547              		.cfi_def_cfa_offset 8
 13548              	.LVL848:
 13549              	.LBB772:
 13550              	.LBB768:
 13551              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13552              		.loc 3 107 10 view .LVU4632
 13553 485d E9000000 		jmp	__printf_chk@PLT	#
 13553      00
 13554              	.LVL849:
 13555              	.LBE768:
 13556              	.LBE772:
 13557              		.cfi_endproc
 13558              	.LFE90:
 13560 4862 66662E0F 		.p2align 4
 13560      1F840000 
 13560      0000000F 
 13560      1F00
 13561              		.globl	printfcomma
 13563              	printfcomma:
 13564              	.LVL850:
 13565              	.LFB91:
1182:sieve_extend.c **** 
1183:sieve_extend.c **** void printfcomma (int n) {
 13566              		.loc 1 1183 26 is_stmt 1 view -0
 13567              		.cfi_startproc
 13568              		.loc 1 1183 26 is_stmt 0 view .LVU4634
 13569 4870 F30F1EFA 		endbr64	
1184:sieve_extend.c ****     if (n < 0) {
 13570              		.loc 1 1184 5 is_stmt 1 view .LVU4635
 13571              	# sieve_extend.c:1183: void printfcomma (int n) {
1183:sieve_extend.c ****     if (n < 0) {
 13572              		.loc 1 1183 26 is_stmt 0 view .LVU4636
 13573 4874 4157     		push	r15	#
 13574              		.cfi_def_cfa_offset 16
 13575              		.cfi_offset 15, -16
 13576 4876 4156     		push	r14	#
 13577              		.cfi_def_cfa_offset 24
 13578              		.cfi_offset 14, -24
 13579 4878 4155     		push	r13	#
 13580              		.cfi_def_cfa_offset 32
 13581              		.cfi_offset 13, -32
 13582 487a 4154     		push	r12	#
 13583              		.cfi_def_cfa_offset 40
 13584              		.cfi_offset 12, -40
 13585 487c 4189FC   		mov	r12d, edi	# n, tmp159
 13586 487f 55       		push	rbp	#
 13587              		.cfi_def_cfa_offset 48
 13588              		.cfi_offset 6, -48
 13589 4880 53       		push	rbx	#
 13590              		.cfi_def_cfa_offset 56
 13591              		.cfi_offset 3, -56
 13592 4881 488D6424 		lea	rsp, -8[rsp]	#,
 13592      F8
GAS LISTING /tmp/cclewcPz.s 			page 366


 13593              		.cfi_def_cfa_offset 64
 13594              	# sieve_extend.c:1184:     if (n < 0) {
 13595              		.loc 1 1184 8 view .LVU4637
 13596 4886 85FF     		test	edi, edi	# n
 13597 4888 0F880A01 		js	.L1103	#,
 13597      0000
 13598              	.LVL851:
 13599              	.L1095:
1185:sieve_extend.c ****         printf ("-");
1186:sieve_extend.c ****         n = -n;
1187:sieve_extend.c ****     }
1188:sieve_extend.c ****     printfcomma2 (n);
 13600              		.loc 1 1188 5 is_stmt 1 view .LVU4638
 13601              	.LBB825:
 13602              	.LBI825:
1174:sieve_extend.c ****     if (n < 1000) {
 13603              		.loc 1 1174 6 view .LVU4639
 13604              	.LBB826:
1175:sieve_extend.c ****         printf ("%d", n);
 13605              		.loc 1 1175 5 view .LVU4640
 13606              	# sieve_extend.c:1175:     if (n < 1000) {
1175:sieve_extend.c ****         printf ("%d", n);
 13607              		.loc 1 1175 8 is_stmt 0 view .LVU4641
 13608 488e 4181FCE7 		cmp	r12d, 999	# n,
 13608      030000
 13609              	.LBB827:
 13610              	.LBB828:
 13611              	.LBB829:
 13612              	.LBB830:
 13613              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13614              		.loc 3 107 10 view .LVU4642
 13615 4895 4489E2   		mov	edx, r12d	#, n
 13616 4898 488D3500 		lea	rsi, .LC26[rip]	#,
 13616      000000
 13617              	.LBE830:
 13618              	.LBE829:
 13619              	.LBE828:
 13620              	.LBE827:
 13621              	# sieve_extend.c:1175:     if (n < 1000) {
1175:sieve_extend.c ****         printf ("%d", n);
 13622              		.loc 1 1175 8 view .LVU4643
 13623 489f 0F8EBF00 		jle	.L1102	#,
 13623      0000
 13624              	.LVL852:
1179:sieve_extend.c ****     printf (",%03d", n%1000);
 13625              		.loc 1 1179 5 is_stmt 1 view .LVU4644
 13626 48a5 4489E3   		mov	ebx, r12d	# n, n
 13627 48a8 4C69EBD3 		imul	r13, rbx, 274877907	# tmp90, n,
 13627      4D6210
 13628 48af 49C1ED26 		shr	r13, 38	# _8,
 13629              	.LVL853:
 13630              	.LBB831:
 13631              	.LBI831:
1174:sieve_extend.c ****     if (n < 1000) {
 13632              		.loc 1 1174 6 view .LVU4645
 13633              	.LBB832:
1175:sieve_extend.c ****         printf ("%d", n);
GAS LISTING /tmp/cclewcPz.s 			page 367


 13634              		.loc 1 1175 5 view .LVU4646
 13635              	# sieve_extend.c:1175:     if (n < 1000) {
1175:sieve_extend.c ****         printf ("%d", n);
 13636              		.loc 1 1175 8 is_stmt 0 view .LVU4647
 13637 48b3 4181FC3F 		cmp	r12d, 999999	# n,
 13637      420F00
 13638 48ba 0F8EC000 		jle	.L1104	#,
 13638      0000
1179:sieve_extend.c ****     printf (",%03d", n%1000);
 13639              		.loc 1 1179 5 is_stmt 1 view .LVU4648
 13640 48c0 4489ED   		mov	ebp, r13d	# _8, _8
 13641 48c3 4C69F5D3 		imul	r14, rbp, 274877907	# tmp98, _8,
 13641      4D6210
 13642 48ca 49C1EE26 		shr	r14, 38	# _10,
 13643              	.LVL854:
 13644              	.LBB833:
 13645              	.LBI833:
1174:sieve_extend.c ****     if (n < 1000) {
 13646              		.loc 1 1174 6 view .LVU4649
 13647              	.LBB834:
1175:sieve_extend.c ****         printf ("%d", n);
 13648              		.loc 1 1175 5 view .LVU4650
 13649              	# sieve_extend.c:1175:     if (n < 1000) {
1175:sieve_extend.c ****         printf ("%d", n);
 13650              		.loc 1 1175 8 is_stmt 0 view .LVU4651
 13651 48ce 4181FCFF 		cmp	r12d, 999999999	# n,
 13651      C99A3B
 13652 48d5 0F8ED500 		jle	.L1105	#,
 13652      0000
1179:sieve_extend.c ****     printf (",%03d", n%1000);
 13653              		.loc 1 1179 5 is_stmt 1 view .LVU4652
 13654              	.LVL855:
 13655              	.LBB835:
 13656              	.LBI835:
1174:sieve_extend.c ****     if (n < 1000) {
 13657              		.loc 1 1174 6 view .LVU4653
 13658              	.LBE835:
 13659              	.LBE834:
 13660              	.LBE833:
 13661              	.LBE832:
 13662              	.LBE831:
 13663              	.LBE826:
 13664              	.LBE825:
1175:sieve_extend.c ****         printf ("%d", n);
 13665              		.loc 1 1175 5 view .LVU4654
 13666              	.LBB901:
 13667              	.LBB896:
 13668              	.LBB883:
 13669              	.LBB880:
 13670              	.LBB868:
 13671              	.LBB866:
 13672              	.LBB852:
 13673              	.LBB836:
 13674              	.LBI836:
1174:sieve_extend.c ****     if (n < 1000) {
 13675              		.loc 1 1174 6 view .LVU4655
 13676              	.LBB837:
GAS LISTING /tmp/cclewcPz.s 			page 368


1176:sieve_extend.c ****         return;
 13677              		.loc 1 1176 9 view .LVU4656
 13678              	.LBB838:
 13679              	.LBI838:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13680              		.loc 3 105 1 view .LVU4657
 13681              	.LBB839:
 13682              		.loc 3 107 3 view .LVU4658
 13683              	.LBE839:
 13684              	.LBE838:
 13685              	.LBE837:
 13686              	.LBE836:
 13687              	.LBE852:
 13688              	# sieve_extend.c:1179:     printfcomma2 (n/1000);
1179:sieve_extend.c ****     printf (",%03d", n%1000);
 13689              		.loc 1 1179 5 is_stmt 0 view .LVU4659
 13690 48db 4589F7   		mov	r15d, r14d	# _10, _10
 13691              	.LBB853:
 13692              	.LBB849:
 13693              	.LBB846:
 13694              	.LBB843:
 13695              	.LBB840:
 13696              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13697              		.loc 3 107 10 view .LVU4660
 13698 48de 488D3500 		lea	rsi, .LC26[rip]	#,
 13698      000000
 13699              	.LBE840:
 13700              	.LBE843:
 13701              	.LBE846:
 13702              	.LBE849:
 13703              	.LBE853:
 13704              	# sieve_extend.c:1179:     printfcomma2 (n/1000);
1179:sieve_extend.c ****     printf (",%03d", n%1000);
 13705              		.loc 1 1179 5 view .LVU4661
 13706 48e5 4D69FFD3 		imul	r15, r15, 274877907	# tmp107, _10,
 13706      4D6210
 13707              	.LBB854:
 13708              	.LBB850:
 13709              	.LBB847:
 13710              	.LBB844:
 13711              	.LBB841:
 13712              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13713              		.loc 3 107 10 view .LVU4662
 13714 48ec BF010000 		mov	edi, 1	#,
 13714      00
 13715 48f1 31C0     		xor	eax, eax	#
 13716              	.LBE841:
 13717              	.LBE844:
 13718              	.LBE847:
 13719              	.LBE850:
 13720              	.LBE854:
 13721              	# sieve_extend.c:1179:     printfcomma2 (n/1000);
1179:sieve_extend.c ****     printf (",%03d", n%1000);
 13722              		.loc 1 1179 5 view .LVU4663
 13723 48f3 49C1EF26 		shr	r15, 38	# tmp105,
 13724              	.LBB855:
 13725              	.LBB851:
GAS LISTING /tmp/cclewcPz.s 			page 369


 13726              	.LBB848:
 13727              	.LBB845:
 13728              	.LBB842:
 13729              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13730              		.loc 3 107 10 view .LVU4664
 13731 48f7 4489FA   		mov	edx, r15d	#, tmp105
 13732              	.LVL856:
 13733              		.loc 3 107 10 view .LVU4665
 13734 48fa E8000000 		call	__printf_chk@PLT	#
 13734      00
 13735              	.LVL857:
 13736              		.loc 3 107 10 view .LVU4666
 13737              	.LBE842:
 13738              	.LBE845:
1177:sieve_extend.c ****     }
 13739              		.loc 1 1177 9 is_stmt 1 view .LVU4667
1177:sieve_extend.c ****     }
 13740              		.loc 1 1177 9 is_stmt 0 view .LVU4668
 13741              	.LBE848:
 13742              	.LBE851:
 13743              	.LBE855:
1180:sieve_extend.c **** }
 13744              		.loc 1 1180 5 is_stmt 1 view .LVU4669
 13745              	.LBB856:
 13746              	.LBI856:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13747              		.loc 3 105 1 view .LVU4670
 13748              	.LBB857:
 13749              		.loc 3 107 3 view .LVU4671
 13750              	.LBE857:
 13751              	.LBE856:
 13752              	# sieve_extend.c:1180:     printf (",%03d", n%1000);
1180:sieve_extend.c **** }
 13753              		.loc 1 1180 5 is_stmt 0 view .LVU4672
 13754 48ff 4169C7E8 		imul	eax, r15d, 1000	# tmp119, tmp105,
 13754      030000
 13755 4906 4489F2   		mov	edx, r14d	# _10, _10
 13756              	.LBB860:
 13757              	.LBB858:
 13758              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13759              		.loc 3 107 10 view .LVU4673
 13760 4909 488D3500 		lea	rsi, .LC27[rip]	#,
 13760      000000
 13761 4910 BF010000 		mov	edi, 1	#,
 13761      00
 13762              	.LBE858:
 13763              	.LBE860:
 13764              	# sieve_extend.c:1180:     printf (",%03d", n%1000);
1180:sieve_extend.c **** }
 13765              		.loc 1 1180 5 view .LVU4674
 13766 4915 29C2     		sub	edx, eax	# _10, tmp119
 13767              	.LBB861:
 13768              	.LBB859:
 13769              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13770              		.loc 3 107 10 view .LVU4675
 13771 4917 31C0     		xor	eax, eax	#
 13772 4919 E8000000 		call	__printf_chk@PLT	#
GAS LISTING /tmp/cclewcPz.s 			page 370


 13772      00
 13773              	.LVL858:
 13774              	.L1100:
 13775              		.loc 3 107 10 view .LVU4676
 13776              	.LBE859:
 13777              	.LBE861:
 13778              	.LBE866:
 13779              	.LBE868:
1180:sieve_extend.c **** }
 13780              		.loc 1 1180 5 is_stmt 1 view .LVU4677
 13781              	.LBB869:
 13782              	.LBI869:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13783              		.loc 3 105 1 view .LVU4678
 13784              	.LBB870:
 13785              		.loc 3 107 3 view .LVU4679
 13786              	.LBE870:
 13787              	.LBE869:
 13788              	# sieve_extend.c:1180:     printf (",%03d", n%1000);
1180:sieve_extend.c **** }
 13789              		.loc 1 1180 5 is_stmt 0 view .LVU4680
 13790 491e 4869D5D3 		imul	rdx, rbp, 274877907	# tmp131, _8,
 13790      4D6210
 13791              	.LBB873:
 13792              	.LBB871:
 13793              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13794              		.loc 3 107 10 view .LVU4681
 13795 4925 488D3500 		lea	rsi, .LC27[rip]	#,
 13795      000000
 13796 492c BF010000 		mov	edi, 1	#,
 13796      00
 13797 4931 31C0     		xor	eax, eax	#
 13798              	.LBE871:
 13799              	.LBE873:
 13800              	# sieve_extend.c:1180:     printf (",%03d", n%1000);
1180:sieve_extend.c **** }
 13801              		.loc 1 1180 5 view .LVU4682
 13802 4933 48C1EA26 		shr	rdx, 38	# tmp129,
 13803 4937 69CAE803 		imul	ecx, edx, 1000	# tmp133, tmp129,
 13803      0000
 13804 493d 4489EA   		mov	edx, r13d	# _8, _8
 13805 4940 29CA     		sub	edx, ecx	# _8, tmp133
 13806              	.LBB874:
 13807              	.LBB872:
 13808              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13809              		.loc 3 107 10 view .LVU4683
 13810 4942 E8000000 		call	__printf_chk@PLT	#
 13810      00
 13811              	.LVL859:
 13812              	.L1098:
 13813              		.loc 3 107 10 view .LVU4684
 13814              	.LBE872:
 13815              	.LBE874:
 13816              	.LBE880:
 13817              	.LBE883:
1180:sieve_extend.c **** }
 13818              		.loc 1 1180 5 is_stmt 1 view .LVU4685
GAS LISTING /tmp/cclewcPz.s 			page 371


 13819              	.LBB884:
 13820              	.LBI884:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13821              		.loc 3 105 1 view .LVU4686
 13822              	.LBB885:
 13823              		.loc 3 107 3 view .LVU4687
 13824              	.LBE885:
 13825              	.LBE884:
 13826              	# sieve_extend.c:1180:     printf (",%03d", n%1000);
1180:sieve_extend.c **** }
 13827              		.loc 1 1180 5 is_stmt 0 view .LVU4688
 13828 4947 4869F3D3 		imul	rsi, rbx, 274877907	# tmp145, n,
 13828      4D6210
 13829 494e 4489E2   		mov	edx, r12d	# n, n
 13830 4951 48C1EE26 		shr	rsi, 38	# tmp143,
 13831 4955 69FEE803 		imul	edi, esi, 1000	# tmp147, tmp143,
 13831      0000
 13832              	.LBB890:
 13833              	.LBB886:
 13834              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13835              		.loc 3 107 10 view .LVU4689
 13836 495b 488D3500 		lea	rsi, .LC27[rip]	#,
 13836      000000
 13837              	.LBE886:
 13838              	.LBE890:
 13839              	# sieve_extend.c:1180:     printf (",%03d", n%1000);
1180:sieve_extend.c **** }
 13840              		.loc 1 1180 5 view .LVU4690
 13841 4962 29FA     		sub	edx, edi	# n, tmp147
 13842              	.LVL860:
 13843              	.L1102:
1180:sieve_extend.c **** }
 13844              		.loc 1 1180 5 view .LVU4691
 13845              	.LBE896:
 13846              	.LBE901:
 13847              	# sieve_extend.c:1189: }
1189:sieve_extend.c **** }
 13848              		.loc 1 1189 1 view .LVU4692
 13849 4964 488D6424 		lea	rsp, 8[rsp]	#,
 13849      08
 13850              		.cfi_remember_state
 13851              		.cfi_def_cfa_offset 56
 13852              	.LBB902:
 13853              	.LBB897:
 13854              	.LBB891:
 13855              	.LBB887:
 13856              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13857              		.loc 3 107 10 view .LVU4693
 13858 4969 BF010000 		mov	edi, 1	#,
 13858      00
 13859              	.LBE887:
 13860              	.LBE891:
 13861              	.LBE897:
 13862              	.LBE902:
 13863              	# sieve_extend.c:1189: }
 13864              		.loc 1 1189 1 view .LVU4694
 13865 496e 5B       		pop	rbx	#
GAS LISTING /tmp/cclewcPz.s 			page 372


 13866              		.cfi_def_cfa_offset 48
 13867              	.LBB903:
 13868              	.LBB898:
 13869              	.LBB892:
 13870              	.LBB888:
 13871              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13872              		.loc 3 107 10 view .LVU4695
 13873 496f 31C0     		xor	eax, eax	#
 13874              	.LBE888:
 13875              	.LBE892:
 13876              	.LBE898:
 13877              	.LBE903:
 13878              	# sieve_extend.c:1189: }
 13879              		.loc 1 1189 1 view .LVU4696
 13880 4971 5D       		pop	rbp	#
 13881              		.cfi_def_cfa_offset 40
 13882 4972 415C     		pop	r12	#
 13883              		.cfi_def_cfa_offset 32
 13884              	.LVL861:
 13885              		.loc 1 1189 1 view .LVU4697
 13886 4974 415D     		pop	r13	#
 13887              		.cfi_def_cfa_offset 24
 13888 4976 415E     		pop	r14	#
 13889              		.cfi_def_cfa_offset 16
 13890 4978 415F     		pop	r15	#
 13891              		.cfi_def_cfa_offset 8
 13892              	.LBB904:
 13893              	.LBB899:
 13894              	.LBB893:
 13895              	.LBB889:
 13896              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13897              		.loc 3 107 10 view .LVU4698
 13898 497a E9000000 		jmp	__printf_chk@PLT	#
 13898      00
 13899              	.LVL862:
 13900 497f 90       		.p2align 4,,7
 13901              		.p2align 3
 13902              	.L1104:
 13903              		.cfi_restore_state
 13904              		.loc 3 107 10 view .LVU4699
 13905              	.LBE889:
 13906              	.LBE893:
 13907              	.LBB894:
 13908              	.LBB881:
 13909              	.LBB875:
 13910              	.LBI875:
1174:sieve_extend.c ****     if (n < 1000) {
 13911              		.loc 1 1174 6 is_stmt 1 view .LVU4700
 13912              	.LBB876:
1176:sieve_extend.c ****         return;
 13913              		.loc 1 1176 9 view .LVU4701
 13914              	.LBB877:
 13915              	.LBI877:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13916              		.loc 3 105 1 view .LVU4702
 13917              	.LBB878:
 13918              		.loc 3 107 3 view .LVU4703
GAS LISTING /tmp/cclewcPz.s 			page 373


 13919              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13920              		.loc 3 107 10 is_stmt 0 view .LVU4704
 13921 4980 4489EA   		mov	edx, r13d	#, _8
 13922              	.LVL863:
 13923              		.loc 3 107 10 view .LVU4705
 13924 4983 488D3500 		lea	rsi, .LC26[rip]	#,
 13924      000000
 13925 498a BF010000 		mov	edi, 1	#,
 13925      00
 13926 498f 31C0     		xor	eax, eax	#
 13927 4991 E8000000 		call	__printf_chk@PLT	#
 13927      00
 13928              	.LVL864:
 13929              		.loc 3 107 10 view .LVU4706
 13930              	.LBE878:
 13931              	.LBE877:
1177:sieve_extend.c ****     }
 13932              		.loc 1 1177 9 is_stmt 1 view .LVU4707
 13933 4996 EBAF     		jmp	.L1098	#
 13934              	.LVL865:
 13935              		.p2align 4,,7
 13936              		.p2align 3
 13937              	.L1103:
1177:sieve_extend.c ****     }
 13938              		.loc 1 1177 9 is_stmt 0 view .LVU4708
 13939              	.LBE876:
 13940              	.LBE875:
 13941              	.LBE881:
 13942              	.LBE894:
 13943              	.LBE899:
 13944              	.LBE904:
1185:sieve_extend.c ****         n = -n;
 13945              		.loc 1 1185 9 is_stmt 1 view .LVU4709
 13946              	.LBB905:
 13947              	.LBI905:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13948              		.loc 3 105 1 view .LVU4710
 13949              	.LBB906:
 13950              		.loc 3 107 3 view .LVU4711
 13951              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13952              		.loc 3 107 10 is_stmt 0 view .LVU4712
 13953 4998 BF2D0000 		mov	edi, 45	#,
 13953      00
 13954              	.LVL866:
 13955              		.loc 3 107 10 view .LVU4713
 13956              	.LBE906:
 13957              	.LBE905:
 13958              	# sieve_extend.c:1186:         n = -n;
1186:sieve_extend.c ****     }
 13959              		.loc 1 1186 11 view .LVU4714
 13960 499d 41F7DC   		neg	r12d	# n
 13961              	.LVL867:
 13962              	.LBB908:
 13963              	.LBB907:
 13964              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13965              		.loc 3 107 10 view .LVU4715
 13966 49a0 E8000000 		call	putchar@PLT	#
GAS LISTING /tmp/cclewcPz.s 			page 374


 13966      00
 13967              	.LVL868:
 13968              		.loc 3 107 10 view .LVU4716
 13969              	.LBE907:
 13970              	.LBE908:
1186:sieve_extend.c ****     }
 13971              		.loc 1 1186 9 is_stmt 1 view .LVU4717
1186:sieve_extend.c ****     }
 13972              		.loc 1 1186 9 is_stmt 0 view .LVU4718
 13973 49a5 E9E4FEFF 		jmp	.L1095	#
 13973      FF
 13974              	.LVL869:
 13975 49aa 660F1F44 		.p2align 4,,7
 13975      0000
 13976              		.p2align 3
 13977              	.L1105:
 13978              	.LBB909:
 13979              	.LBB900:
 13980              	.LBB895:
 13981              	.LBB882:
 13982              	.LBB879:
 13983              	.LBB867:
 13984              	.LBB862:
 13985              	.LBI862:
1174:sieve_extend.c ****     if (n < 1000) {
 13986              		.loc 1 1174 6 is_stmt 1 view .LVU4719
 13987              	.LBB863:
1176:sieve_extend.c ****         return;
 13988              		.loc 1 1176 9 view .LVU4720
 13989              	.LBB864:
 13990              	.LBI864:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 13991              		.loc 3 105 1 view .LVU4721
 13992              	.LBB865:
 13993              		.loc 3 107 3 view .LVU4722
 13994              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 13995              		.loc 3 107 10 is_stmt 0 view .LVU4723
 13996 49b0 4489F2   		mov	edx, r14d	#, _10
 13997              	.LVL870:
 13998              		.loc 3 107 10 view .LVU4724
 13999 49b3 488D3500 		lea	rsi, .LC26[rip]	#,
 13999      000000
 14000 49ba BF010000 		mov	edi, 1	#,
 14000      00
 14001 49bf 31C0     		xor	eax, eax	#
 14002 49c1 E8000000 		call	__printf_chk@PLT	#
 14002      00
 14003              	.LVL871:
 14004              		.loc 3 107 10 view .LVU4725
 14005              	.LBE865:
 14006              	.LBE864:
1177:sieve_extend.c ****     }
 14007              		.loc 1 1177 9 is_stmt 1 view .LVU4726
 14008 49c6 E953FFFF 		jmp	.L1100	#
 14008      FF
 14009              	.LBE863:
 14010              	.LBE862:
GAS LISTING /tmp/cclewcPz.s 			page 375


 14011              	.LBE867:
 14012              	.LBE879:
 14013              	.LBE882:
 14014              	.LBE895:
 14015              	.LBE900:
 14016              	.LBE909:
 14017              		.cfi_endproc
 14018              	.LFE91:
 14020 49cb 0F1F4400 		.p2align 4
 14020      00
 14021              		.globl	benchmark
 14023              	benchmark:
 14024              	.LVL872:
 14025              	.LFB92:
1190:sieve_extend.c **** 
1191:sieve_extend.c **** int benchmark(double max_time, void (*function)(bitword_t*, counter_t ), bitword_t* bitarray, count
 14026              		.loc 1 1191 111 view -0
 14027              		.cfi_startproc
 14028              		.loc 1 1191 111 is_stmt 0 view .LVU4728
 14029 49d0 F30F1EFA 		endbr64	
 14030 49d4 4157     		push	r15	#
 14031              		.cfi_def_cfa_offset 16
 14032              		.cfi_offset 15, -16
 14033 49d6 4156     		push	r14	#
 14034              		.cfi_def_cfa_offset 24
 14035              		.cfi_offset 14, -24
 14036 49d8 4155     		push	r13	#
 14037              		.cfi_def_cfa_offset 32
 14038              		.cfi_offset 13, -32
 14039 49da 4989D5   		mov	r13, rdx	# max, tmp138
 14040 49dd 4154     		push	r12	#
 14041              		.cfi_def_cfa_offset 40
 14042              		.cfi_offset 12, -40
 14043              	# sieve_extend.c:1193:     int passes = 0;
1192:sieve_extend.c ****     struct timespec start_time,end_time;
1193:sieve_extend.c ****     int passes = 0;
 14044              		.loc 1 1193 9 view .LVU4729
 14045 49df 4531E4   		xor	r12d, r12d	# <retval>
 14046              	# sieve_extend.c:1191: int benchmark(double max_time, void (*function)(bitword_t*, counter_t ), bit
1191:sieve_extend.c ****     struct timespec start_time,end_time;
 14047              		.loc 1 1191 111 view .LVU4730
 14048 49e2 55       		push	rbp	#
 14049              		.cfi_def_cfa_offset 48
 14050              		.cfi_offset 6, -48
 14051 49e3 4889F5   		mov	rbp, rsi	# bitarray, tmp137
 14052 49e6 53       		push	rbx	#
 14053              		.cfi_def_cfa_offset 56
 14054              		.cfi_offset 3, -56
 14055 49e7 4889FB   		mov	rbx, rdi	# function, tmp136
 14056              	# sieve_extend.c:1195:     clock_gettime(CLOCK_MONOTONIC,&start_time);
1194:sieve_extend.c ****     double elapsed_time = 0;
1195:sieve_extend.c ****     clock_gettime(CLOCK_MONOTONIC,&start_time);
 14057              		.loc 1 1195 5 view .LVU4731
 14058 49ea BF010000 		mov	edi, 1	#,
 14058      00
 14059              	.LVL873:
 14060              	# sieve_extend.c:1191: int benchmark(double max_time, void (*function)(bitword_t*, counter_t ), bit
GAS LISTING /tmp/cclewcPz.s 			page 376


1191:sieve_extend.c ****     struct timespec start_time,end_time;
 14061              		.loc 1 1191 111 view .LVU4732
 14062 49ef 488D6424 		lea	rsp, -72[rsp]	#,
 14062      B8
 14063              		.cfi_def_cfa_offset 128
 14064              	# sieve_extend.c:1191: int benchmark(double max_time, void (*function)(bitword_t*, counter_t ), bit
1191:sieve_extend.c ****     struct timespec start_time,end_time;
 14065              		.loc 1 1191 111 view .LVU4733
 14066 49f4 C5FB1144 		vmovsd	QWORD PTR 8[rsp], xmm0	# %sfp, tmp135
 14066      2408
 14067              	# sieve_extend.c:1195:     clock_gettime(CLOCK_MONOTONIC,&start_time);
 14068              		.loc 1 1195 5 view .LVU4734
 14069 49fa 488D7424 		lea	rsi, 16[rsp]	# tmp99,
 14069      10
 14070              	.LVL874:
 14071              	# sieve_extend.c:1191: int benchmark(double max_time, void (*function)(bitword_t*, counter_t ), bit
1191:sieve_extend.c ****     struct timespec start_time,end_time;
 14072              		.loc 1 1191 111 view .LVU4735
 14073 49ff 64488B04 		mov	rax, QWORD PTR fs:40	# tmp139, MEM[(<address-space-1> long unsigned int *)40B]
 14073      25280000 
 14073      00
 14074 4a08 48894424 		mov	QWORD PTR 56[rsp], rax	# D.7269, tmp139
 14074      38
 14075 4a0d 31C0     		xor	eax, eax	# tmp139
1192:sieve_extend.c ****     int passes = 0;
 14076              		.loc 1 1192 5 is_stmt 1 view .LVU4736
1193:sieve_extend.c ****     double elapsed_time = 0;
 14077              		.loc 1 1193 5 view .LVU4737
 14078              	.LVL875:
1194:sieve_extend.c ****     double elapsed_time = 0;
 14079              		.loc 1 1194 5 view .LVU4738
 14080              		.loc 1 1195 5 view .LVU4739
 14081 4a0f E8000000 		call	clock_gettime@PLT	#
 14081      00
 14082              	.LVL876:
1196:sieve_extend.c ****     while (elapsed_time <= max_time) {
 14083              		.loc 1 1196 5 view .LVU4740
 14084              		.loc 1 1196 11 view .LVU4741
 14085 4a14 C5FB106C 		vmovsd	xmm5, QWORD PTR 8[rsp]	# max_time, %sfp
 14085      2408
 14086 4a1a C5F92F2D 		vcomisd	xmm5, QWORD PTR .LC6[rip]	# max_time,
 14086      00000000 
 14087 4a22 0F827801 		jb	.L1106	#,
 14087      0000
 14088 4a28 4C8D7424 		lea	r14, 32[rsp]	# tmp111,
 14088      20
 14089              	.LVL877:
 14090              	.L1109:
1197:sieve_extend.c ****         function(bitarray, max);
 14091              		.loc 1 1197 9 view .LVU4742
 14092 4a2d 4C89EE   		mov	rsi, r13	#, max
 14093 4a30 4889EF   		mov	rdi, rbp	#, bitarray
 14094 4a33 FFD3     		call	rbx	# function
 14095              	.LVL878:
1198:sieve_extend.c ****         passes++;
 14096              		.loc 1 1198 9 view .LVU4743
 14097              	# sieve_extend.c:1199:         clock_gettime(CLOCK_MONOTONIC,&end_time);
GAS LISTING /tmp/cclewcPz.s 			page 377


1199:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 14098              		.loc 1 1199 9 is_stmt 0 view .LVU4744
 14099 4a35 4C89F6   		mov	rsi, r14	#, tmp111
 14100 4a38 BF010000 		mov	edi, 1	#,
 14100      00
 14101 4a3d E8000000 		call	clock_gettime@PLT	#
 14101      00
 14102              	.LVL879:
 14103              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
1200:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 14104              		.loc 1 1200 58 view .LVU4745
 14105 4a42 C4E1FB2A 		vcvtsi2sd	xmm0, xmm0, QWORD PTR 40[rsp]	# tmp102, end_time.tv_nsec
 14105      442428
 14106              	# sieve_extend.c:1198:         passes++;
1198:sieve_extend.c ****         passes++;
 14107              		.loc 1 1198 15 view .LVU4746
 14108 4a49 458D7C24 		lea	r15d, 1[r12]	# tmp113,
 14108      01
 14109              	.LVL880:
 14110              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14111              		.loc 1 1200 64 view .LVU4747
 14112 4a4e C4E1F32A 		vcvtsi2sd	xmm1, xmm1, QWORD PTR 16[rsp]	# tmp103, start_time.tv_sec
 14112      4C2410
 14113              	# sieve_extend.c:1198:         passes++;
1198:sieve_extend.c ****         passes++;
 14114              		.loc 1 1198 15 view .LVU4748
 14115 4a55 4589FC   		mov	r12d, r15d	# <retval>, tmp113
1199:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 14116              		.loc 1 1199 9 is_stmt 1 view .LVU4749
 14117              		.loc 1 1200 9 view .LVU4750
 14118              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14119              		.loc 1 1200 104 is_stmt 0 view .LVU4751
 14120 4a58 C4E1E32A 		vcvtsi2sd	xmm3, xmm3, QWORD PTR 24[rsp]	# tmp105, start_time.tv_nsec
 14120      5C2418
 14121              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14122              		.loc 1 1200 40 view .LVU4752
 14123 4a5f C4E1EB2A 		vcvtsi2sd	xmm2, xmm2, QWORD PTR 32[rsp]	# tmp106, end_time.tv_sec
 14123      542420
 14124              	# sieve_extend.c:1196:     while (elapsed_time <= max_time) {
1196:sieve_extend.c ****         function(bitarray, max);
 14125              		.loc 1 1196 11 view .LVU4753
 14126 4a66 C5FB1064 		vmovsd	xmm4, QWORD PTR 8[rsp]	# max_time, %sfp
 14126      2408
 14127 4a6c C4E2F9BB 		vfmsub231sd	xmm1, xmm0, QWORD PTR .LC8[rip]	# _30, tmp102,
 14127      0D000000 
 14127      00
 14128 4a75 C4E2E99D 		vfnmadd132sd	xmm3, xmm2, QWORD PTR .LC8[rip]	# _19, tmp106,
 14128      1D000000 
 14128      00
 14129              	.LVL881:
1196:sieve_extend.c ****         function(bitarray, max);
 14130              		.loc 1 1196 11 is_stmt 1 view .LVU4754
 14131              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14132              		.loc 1 1200 22 is_stmt 0 view .LVU4755
 14133 4a7e C5E358F1 		vaddsd	xmm6, xmm3, xmm1	# elapsed_time, _19, _30
 14134              	# sieve_extend.c:1196:     while (elapsed_time <= max_time) {
1196:sieve_extend.c ****         function(bitarray, max);
GAS LISTING /tmp/cclewcPz.s 			page 378


 14135              		.loc 1 1196 11 view .LVU4756
 14136 4a82 C5F92FE6 		vcomisd	xmm4, xmm6	# max_time, elapsed_time
 14137 4a86 0F821401 		jb	.L1106	#,
 14137      0000
 14138              	.LVL882:
1197:sieve_extend.c ****         passes++;
 14139              		.loc 1 1197 9 is_stmt 1 view .LVU4757
 14140 4a8c 4C89EE   		mov	rsi, r13	#, max
 14141 4a8f 4889EF   		mov	rdi, rbp	#, bitarray
 14142 4a92 FFD3     		call	rbx	# function
 14143              	.LVL883:
1198:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 14144              		.loc 1 1198 9 view .LVU4758
 14145              	# sieve_extend.c:1199:         clock_gettime(CLOCK_MONOTONIC,&end_time);
1199:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 14146              		.loc 1 1199 9 is_stmt 0 view .LVU4759
 14147 4a94 4C89F6   		mov	rsi, r14	#, tmp111
 14148 4a97 BF010000 		mov	edi, 1	#,
 14148      00
 14149 4a9c E8000000 		call	clock_gettime@PLT	#
 14149      00
 14150              	.LVL884:
 14151              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14152              		.loc 1 1200 58 view .LVU4760
 14153 4aa1 C4E1C32A 		vcvtsi2sd	xmm7, xmm7, QWORD PTR 40[rsp]	# tmp114, end_time.tv_nsec
 14153      7C2428
 14154              	# sieve_extend.c:1198:         passes++;
1198:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 14155              		.loc 1 1198 15 view .LVU4761
 14156 4aa8 4183C401 		add	r12d, 1	# <retval>,
 14157              	.LVL885:
1199:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 14158              		.loc 1 1199 9 is_stmt 1 view .LVU4762
 14159              		.loc 1 1200 9 view .LVU4763
 14160              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14161              		.loc 1 1200 64 is_stmt 0 view .LVU4764
 14162 4aac C461BB2A 		vcvtsi2sd	xmm8, xmm8, QWORD PTR 16[rsp]	# tmp115, start_time.tv_sec
 14162      442410
 14163              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14164              		.loc 1 1200 104 view .LVU4765
 14165 4ab3 C461B32A 		vcvtsi2sd	xmm9, xmm9, QWORD PTR 24[rsp]	# tmp117, start_time.tv_nsec
 14165      4C2418
 14166              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14167              		.loc 1 1200 40 view .LVU4766
 14168 4aba C461AB2A 		vcvtsi2sd	xmm10, xmm10, QWORD PTR 32[rsp]	# tmp118, end_time.tv_sec
 14168      542420
 14169              	# sieve_extend.c:1196:     while (elapsed_time <= max_time) {
1196:sieve_extend.c ****         function(bitarray, max);
 14170              		.loc 1 1196 11 view .LVU4767
 14171 4ac1 C57B1064 		vmovsd	xmm12, QWORD PTR 8[rsp]	# max_time, %sfp
 14171      2408
 14172 4ac7 C462C1BB 		vfmsub231sd	xmm8, xmm7, QWORD PTR .LC8[rip]	# _30, tmp114,
 14172      05000000 
 14172      00
 14173 4ad0 C462A99D 		vfnmadd132sd	xmm9, xmm10, QWORD PTR .LC8[rip]	# _19, tmp118,
 14173      0D000000 
 14173      00
GAS LISTING /tmp/cclewcPz.s 			page 379


 14174              	.LVL886:
1196:sieve_extend.c ****         function(bitarray, max);
 14175              		.loc 1 1196 11 is_stmt 1 view .LVU4768
 14176              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14177              		.loc 1 1200 22 is_stmt 0 view .LVU4769
 14178 4ad9 C4413358 		vaddsd	xmm11, xmm9, xmm8	# elapsed_time, _19, _30
 14178      D8
 14179              	# sieve_extend.c:1196:     while (elapsed_time <= max_time) {
1196:sieve_extend.c ****         function(bitarray, max);
 14180              		.loc 1 1196 11 view .LVU4770
 14181 4ade C441792F 		vcomisd	xmm12, xmm11	# max_time, elapsed_time
 14181      E3
 14182 4ae3 0F82B700 		jb	.L1106	#,
 14182      0000
 14183              	.LVL887:
1197:sieve_extend.c ****         passes++;
 14184              		.loc 1 1197 9 is_stmt 1 view .LVU4771
 14185 4ae9 4C89EE   		mov	rsi, r13	#, max
 14186 4aec 4889EF   		mov	rdi, rbp	#, bitarray
 14187 4aef FFD3     		call	rbx	# function
 14188              	.LVL888:
1198:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 14189              		.loc 1 1198 9 view .LVU4772
 14190              	# sieve_extend.c:1199:         clock_gettime(CLOCK_MONOTONIC,&end_time);
1199:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 14191              		.loc 1 1199 9 is_stmt 0 view .LVU4773
 14192 4af1 4C89F6   		mov	rsi, r14	#, tmp111
 14193 4af4 BF010000 		mov	edi, 1	#,
 14193      00
 14194 4af9 E8000000 		call	clock_gettime@PLT	#
 14194      00
 14195              	.LVL889:
 14196              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14197              		.loc 1 1200 58 view .LVU4774
 14198 4afe C461932A 		vcvtsi2sd	xmm13, xmm13, QWORD PTR 40[rsp]	# tmp121, end_time.tv_nsec
 14198      6C2428
 14199              	# sieve_extend.c:1198:         passes++;
1198:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 14200              		.loc 1 1198 15 view .LVU4775
 14201 4b05 458D6702 		lea	r12d, 2[r15]	# <retval>,
 14202              	.LVL890:
1199:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 14203              		.loc 1 1199 9 is_stmt 1 view .LVU4776
 14204              		.loc 1 1200 9 view .LVU4777
 14205              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14206              		.loc 1 1200 64 is_stmt 0 view .LVU4778
 14207 4b09 C4618B2A 		vcvtsi2sd	xmm14, xmm14, QWORD PTR 16[rsp]	# tmp122, start_time.tv_sec
 14207      742410
 14208              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14209              		.loc 1 1200 104 view .LVU4779
 14210 4b10 C461832A 		vcvtsi2sd	xmm15, xmm15, QWORD PTR 24[rsp]	# tmp124, start_time.tv_nsec
 14210      7C2418
 14211              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14212              		.loc 1 1200 40 view .LVU4780
 14213 4b17 C4E1D32A 		vcvtsi2sd	xmm5, xmm5, QWORD PTR 32[rsp]	# tmp125, end_time.tv_sec
 14213      6C2420
 14214              	# sieve_extend.c:1196:     while (elapsed_time <= max_time) {
GAS LISTING /tmp/cclewcPz.s 			page 380


1196:sieve_extend.c ****         function(bitarray, max);
 14215              		.loc 1 1196 11 view .LVU4781
 14216 4b1e C5FB104C 		vmovsd	xmm1, QWORD PTR 8[rsp]	# max_time, %sfp
 14216      2408
 14217 4b24 C46291BB 		vfmsub231sd	xmm14, xmm13, QWORD PTR .LC8[rip]	# _30, tmp121,
 14217      35000000 
 14217      00
 14218 4b2d C462D19D 		vfnmadd132sd	xmm15, xmm5, QWORD PTR .LC8[rip]	# _19, tmp125,
 14218      3D000000 
 14218      00
 14219              	.LVL891:
1196:sieve_extend.c ****         function(bitarray, max);
 14220              		.loc 1 1196 11 is_stmt 1 view .LVU4782
 14221              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14222              		.loc 1 1200 22 is_stmt 0 view .LVU4783
 14223 4b36 C4C10358 		vaddsd	xmm0, xmm15, xmm14	# elapsed_time, _19, _30
 14223      C6
 14224              	# sieve_extend.c:1196:     while (elapsed_time <= max_time) {
1196:sieve_extend.c ****         function(bitarray, max);
 14225              		.loc 1 1196 11 view .LVU4784
 14226 4b3b C5F92FC8 		vcomisd	xmm1, xmm0	# max_time, elapsed_time
 14227 4b3f 725F     		jb	.L1106	#,
 14228              	.LVL892:
1197:sieve_extend.c ****         passes++;
 14229              		.loc 1 1197 9 is_stmt 1 view .LVU4785
 14230 4b41 4C89EE   		mov	rsi, r13	#, max
 14231 4b44 4889EF   		mov	rdi, rbp	#, bitarray
 14232 4b47 FFD3     		call	rbx	# function
 14233              	.LVL893:
1198:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 14234              		.loc 1 1198 9 view .LVU4786
 14235              	# sieve_extend.c:1199:         clock_gettime(CLOCK_MONOTONIC,&end_time);
1199:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 14236              		.loc 1 1199 9 is_stmt 0 view .LVU4787
 14237 4b49 4C89F6   		mov	rsi, r14	#, tmp111
 14238 4b4c BF010000 		mov	edi, 1	#,
 14238      00
 14239 4b51 E8000000 		call	clock_gettime@PLT	#
 14239      00
 14240              	.LVL894:
 14241              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14242              		.loc 1 1200 58 view .LVU4788
 14243 4b56 C4E1E32A 		vcvtsi2sd	xmm3, xmm3, QWORD PTR 40[rsp]	# tmp128, end_time.tv_nsec
 14243      5C2428
 14244              	# sieve_extend.c:1198:         passes++;
1198:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 14245              		.loc 1 1198 15 view .LVU4789
 14246 4b5d 458D6703 		lea	r12d, 3[r15]	# <retval>,
 14247              	.LVL895:
1199:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 14248              		.loc 1 1199 9 is_stmt 1 view .LVU4790
 14249              		.loc 1 1200 9 view .LVU4791
 14250              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14251              		.loc 1 1200 64 is_stmt 0 view .LVU4792
 14252 4b61 C4E1CB2A 		vcvtsi2sd	xmm6, xmm6, QWORD PTR 16[rsp]	# tmp129, start_time.tv_sec
 14252      742410
 14253              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
GAS LISTING /tmp/cclewcPz.s 			page 381


 14254              		.loc 1 1200 104 view .LVU4793
 14255 4b68 C4E1DB2A 		vcvtsi2sd	xmm4, xmm4, QWORD PTR 24[rsp]	# tmp131, start_time.tv_nsec
 14255      642418
 14256              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14257              		.loc 1 1200 40 view .LVU4794
 14258 4b6f C4E1EB2A 		vcvtsi2sd	xmm2, xmm2, QWORD PTR 32[rsp]	# tmp132, end_time.tv_sec
 14258      542420
 14259              	# sieve_extend.c:1196:     while (elapsed_time <= max_time) {
1196:sieve_extend.c ****         function(bitarray, max);
 14260              		.loc 1 1196 11 view .LVU4795
 14261 4b76 C57B1044 		vmovsd	xmm8, QWORD PTR 8[rsp]	# max_time, %sfp
 14261      2408
 14262 4b7c C4E2E1BB 		vfmsub231sd	xmm6, xmm3, QWORD PTR .LC8[rip]	# _30, tmp128,
 14262      35000000 
 14262      00
 14263 4b85 C4E2E99D 		vfnmadd132sd	xmm4, xmm2, QWORD PTR .LC8[rip]	# _19, tmp132,
 14263      25000000 
 14263      00
 14264              	.LVL896:
1196:sieve_extend.c ****         function(bitarray, max);
 14265              		.loc 1 1196 11 is_stmt 1 view .LVU4796
 14266              	# sieve_extend.c:1200:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 14267              		.loc 1 1200 22 is_stmt 0 view .LVU4797
 14268 4b8e C5DB58FE 		vaddsd	xmm7, xmm4, xmm6	# elapsed_time, _19, _30
 14269              	# sieve_extend.c:1196:     while (elapsed_time <= max_time) {
1196:sieve_extend.c ****         function(bitarray, max);
 14270              		.loc 1 1196 11 view .LVU4798
 14271 4b92 C5792FC7 		vcomisd	xmm8, xmm7	# max_time, elapsed_time
 14272 4b96 0F8391FE 		jnb	.L1109	#,
 14272      FFFF
 14273              	.LVL897:
 14274 4b9c 0F1F4000 		.p2align 4
 14275              		.p2align 3
 14276              	.L1106:
 14277              	# sieve_extend.c:1203: }
1201:sieve_extend.c ****     }
1202:sieve_extend.c ****     return passes;
1203:sieve_extend.c **** }
 14278              		.loc 1 1203 1 view .LVU4799
 14279 4ba0 488B4424 		mov	rax, QWORD PTR 56[rsp]	# tmp140, D.7269
 14279      38
 14280 4ba5 64483304 		xor	rax, QWORD PTR fs:40	# tmp140, MEM[(<address-space-1> long unsigned int *)40B]
 14280      25280000 
 14280      00
 14281 4bae 7513     		jne	.L1122	#,
 14282 4bb0 488D6424 		lea	rsp, 72[rsp]	#,
 14282      48
 14283              		.cfi_remember_state
 14284              		.cfi_def_cfa_offset 56
 14285 4bb5 4489E0   		mov	eax, r12d	#, <retval>
 14286 4bb8 5B       		pop	rbx	#
 14287              		.cfi_def_cfa_offset 48
 14288              	.LVL898:
 14289              		.loc 1 1203 1 view .LVU4800
 14290 4bb9 5D       		pop	rbp	#
 14291              		.cfi_def_cfa_offset 40
 14292              	.LVL899:
GAS LISTING /tmp/cclewcPz.s 			page 382


 14293              		.loc 1 1203 1 view .LVU4801
 14294 4bba 415C     		pop	r12	#
 14295              		.cfi_def_cfa_offset 32
 14296 4bbc 415D     		pop	r13	#
 14297              		.cfi_def_cfa_offset 24
 14298              	.LVL900:
 14299              		.loc 1 1203 1 view .LVU4802
 14300 4bbe 415E     		pop	r14	#
 14301              		.cfi_def_cfa_offset 16
 14302 4bc0 415F     		pop	r15	#
 14303              		.cfi_def_cfa_offset 8
 14304 4bc2 C3       		ret	
 14305              	.LVL901:
 14306              	.L1122:
 14307              		.cfi_restore_state
 14308              		.loc 1 1203 1 view .LVU4803
 14309 4bc3 E8000000 		call	__stack_chk_fail@PLT	#
 14309      00
 14310              	.LVL902:
 14311              		.cfi_endproc
 14312              	.LFE92:
 14314 4bc8 0F1F8400 		.p2align 4
 14314      00000000 
 14315              		.globl	test
 14317              	test:
 14318              	.LVL903:
 14319              	.LFB93:
1204:sieve_extend.c **** 
1205:sieve_extend.c **** void test(bitword_t* __restrict bitarray, counter_t max) {
 14320              		.loc 1 1205 58 is_stmt 1 view -0
 14321              		.cfi_startproc
 14322              		.loc 1 1205 58 is_stmt 0 view .LVU4805
 14323 4bd0 F30F1EFA 		endbr64	
 14324              	.LBB911:
1206:sieve_extend.c ****     //#pragma GCC unroll 16
1207:sieve_extend.c ****     #pragma GCC ivdep 
1208:sieve_extend.c ****     for (counter_t x=0; x<max; x++) {
 14325              		.loc 1 1208 10 is_stmt 1 view .LVU4806
 14326              	.LVL904:
 14327              		.loc 1 1208 25 view .LVU4807
 14328              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
 14329              		.loc 1 1208 5 is_stmt 0 view .LVU4808
 14330 4bd4 4885F6   		test	rsi, rsi	# max
 14331 4bd7 0F846901 		je	.L1165	#,
 14331      0000
 14332 4bdd 4889F1   		mov	rcx, rsi	# tmp97, max
 14333              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
 14334              		.loc 1 1208 20 view .LVU4809
 14335 4be0 31C0     		xor	eax, eax	# x
 14336 4be2 83E107   		and	ecx, 7	# tmp97,
 14337              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
1209:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14338              		.loc 1 1209 34 view .LVU4810
 14339 4be5 BA010000 		mov	edx, 1	# tmp92,
 14339      00
 14340 4bea 0F84AD00 		je	.L1125	#,
 14340      0000
GAS LISTING /tmp/cclewcPz.s 			page 383


 14341 4bf0 4883F901 		cmp	rcx, 1	# tmp97,
 14342 4bf4 0F848600 		je	.L1150	#,
 14342      0000
 14343 4bfa 4883F902 		cmp	rcx, 2	# tmp97,
 14344 4bfe 746C     		je	.L1151	#,
 14345 4c00 4883F903 		cmp	rcx, 3	# tmp97,
 14346 4c04 7452     		je	.L1152	#,
 14347 4c06 4883F904 		cmp	rcx, 4	# tmp97,
 14348 4c0a 7438     		je	.L1153	#,
 14349 4c0c 4883F905 		cmp	rcx, 5	# tmp97,
 14350 4c10 741E     		je	.L1154	#,
 14351 4c12 4883F906 		cmp	rcx, 6	# tmp97,
 14352 4c16 0F852C01 		jne	.L1166	#,
 14352      0000
 14353              	.LVL905:
 14354              	.L1155:
 14355              		.loc 1 1209 9 is_stmt 1 view .LVU4811
 14356              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14357              		.loc 1 1209 18 is_stmt 0 view .LVU4812
 14358 4c1c 4989C1   		mov	r9, rax	# tmp122, x
 14359              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14360              		.loc 1 1209 34 view .LVU4813
 14361 4c1f C462F9F7 		shlx	r8, rdx, rax	# tmp123, tmp92, x
 14361      C2
 14362              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14363              		.loc 1 1209 18 view .LVU4814
 14364 4c24 49C1E906 		shr	r9, 6	# tmp122,
 14365              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14366              		.loc 1 1208 33 view .LVU4815
 14367 4c28 4883C001 		add	rax, 1	# x,
 14368              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14369              		.loc 1 1209 34 view .LVU4816
 14370 4c2c 4E8904CF 		mov	QWORD PTR [rdi+r9*8], r8	# *_4, tmp123
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14371              		.loc 1 1208 32 is_stmt 1 view .LVU4817
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14372              		.loc 1 1208 25 view .LVU4818
 14373              	.L1154:
 14374              		.loc 1 1209 9 view .LVU4819
 14375              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14376              		.loc 1 1209 18 is_stmt 0 view .LVU4820
 14377 4c30 4989C2   		mov	r10, rax	# tmp124, x
 14378              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14379              		.loc 1 1209 34 view .LVU4821
 14380 4c33 C462F9F7 		shlx	r11, rdx, rax	# tmp125, tmp92, x
 14380      DA
 14381              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14382              		.loc 1 1209 18 view .LVU4822
 14383 4c38 49C1EA06 		shr	r10, 6	# tmp124,
 14384              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14385              		.loc 1 1208 33 view .LVU4823
 14386 4c3c 4883C001 		add	rax, 1	# x,
 14387              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14388              		.loc 1 1209 34 view .LVU4824
 14389 4c40 4E891CD7 		mov	QWORD PTR [rdi+r10*8], r11	# *_4, tmp125
GAS LISTING /tmp/cclewcPz.s 			page 384


1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14390              		.loc 1 1208 32 is_stmt 1 view .LVU4825
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14391              		.loc 1 1208 25 view .LVU4826
 14392              	.L1153:
 14393              		.loc 1 1209 9 view .LVU4827
 14394              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14395              		.loc 1 1209 18 is_stmt 0 view .LVU4828
 14396 4c44 4889C1   		mov	rcx, rax	# tmp126, x
 14397              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14398              		.loc 1 1209 34 view .LVU4829
 14399 4c47 C462F9F7 		shlx	r9, rdx, rax	# tmp127, tmp92, x
 14399      CA
 14400              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14401              		.loc 1 1209 18 view .LVU4830
 14402 4c4c 48C1E906 		shr	rcx, 6	# tmp126,
 14403              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14404              		.loc 1 1208 33 view .LVU4831
 14405 4c50 4883C001 		add	rax, 1	# x,
 14406              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14407              		.loc 1 1209 34 view .LVU4832
 14408 4c54 4C890CCF 		mov	QWORD PTR [rdi+rcx*8], r9	# *_4, tmp127
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14409              		.loc 1 1208 32 is_stmt 1 view .LVU4833
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14410              		.loc 1 1208 25 view .LVU4834
 14411              	.L1152:
 14412              		.loc 1 1209 9 view .LVU4835
 14413              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14414              		.loc 1 1209 18 is_stmt 0 view .LVU4836
 14415 4c58 4989C2   		mov	r10, rax	# tmp128, x
 14416              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14417              		.loc 1 1209 34 view .LVU4837
 14418 4c5b C462F9F7 		shlx	r8, rdx, rax	# tmp129, tmp92, x
 14418      C2
 14419              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14420              		.loc 1 1209 18 view .LVU4838
 14421 4c60 49C1EA06 		shr	r10, 6	# tmp128,
 14422              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14423              		.loc 1 1208 33 view .LVU4839
 14424 4c64 4883C001 		add	rax, 1	# x,
 14425              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14426              		.loc 1 1209 34 view .LVU4840
 14427 4c68 4E8904D7 		mov	QWORD PTR [rdi+r10*8], r8	# *_4, tmp129
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14428              		.loc 1 1208 32 is_stmt 1 view .LVU4841
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14429              		.loc 1 1208 25 view .LVU4842
 14430              	.L1151:
 14431              		.loc 1 1209 9 view .LVU4843
 14432              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14433              		.loc 1 1209 18 is_stmt 0 view .LVU4844
 14434 4c6c 4989C3   		mov	r11, rax	# tmp130, x
 14435              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14436              		.loc 1 1209 34 view .LVU4845
GAS LISTING /tmp/cclewcPz.s 			page 385


 14437 4c6f C4E2F9F7 		shlx	rcx, rdx, rax	# tmp131, tmp92, x
 14437      CA
 14438              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14439              		.loc 1 1209 18 view .LVU4846
 14440 4c74 49C1EB06 		shr	r11, 6	# tmp130,
 14441              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14442              		.loc 1 1208 33 view .LVU4847
 14443 4c78 4883C001 		add	rax, 1	# x,
 14444              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14445              		.loc 1 1209 34 view .LVU4848
 14446 4c7c 4A890CDF 		mov	QWORD PTR [rdi+r11*8], rcx	# *_4, tmp131
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14447              		.loc 1 1208 32 is_stmt 1 view .LVU4849
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14448              		.loc 1 1208 25 view .LVU4850
 14449              	.L1150:
 14450              		.loc 1 1209 9 view .LVU4851
 14451              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14452              		.loc 1 1209 18 is_stmt 0 view .LVU4852
 14453 4c80 4989C1   		mov	r9, rax	# tmp132, x
 14454              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14455              		.loc 1 1209 34 view .LVU4853
 14456 4c83 C462F9F7 		shlx	r10, rdx, rax	# tmp133, tmp92, x
 14456      D2
 14457              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14458              		.loc 1 1209 18 view .LVU4854
 14459 4c88 49C1E906 		shr	r9, 6	# tmp132,
 14460              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14461              		.loc 1 1208 33 view .LVU4855
 14462 4c8c 4883C001 		add	rax, 1	# x,
 14463              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14464              		.loc 1 1209 34 view .LVU4856
 14465 4c90 4E8914CF 		mov	QWORD PTR [rdi+r9*8], r10	# *_4, tmp133
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14466              		.loc 1 1208 32 is_stmt 1 view .LVU4857
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14467              		.loc 1 1208 25 view .LVU4858
 14468              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14469              		.loc 1 1208 5 is_stmt 0 view .LVU4859
 14470 4c94 4839C6   		cmp	rsi, rax	# max, x
 14471 4c97 0F84BD00 		je	.L1167	#,
 14471      0000
 14472              	.L1125:
 14473              		.loc 1 1209 9 is_stmt 1 discriminator 3 view .LVU4860
 14474              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14475              		.loc 1 1208 33 is_stmt 0 discriminator 3 view .LVU4861
 14476 4c9d 488D4801 		lea	rcx, 1[rax]	# tmp98,
 14477              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14478              		.loc 1 1209 18 discriminator 3 view .LVU4862
 14479 4ca1 4989C3   		mov	r11, rax	# tmp90, x
 14480 4ca4 49C1EB06 		shr	r11, 6	# tmp90,
 14481 4ca8 4989C9   		mov	r9, rcx	# tmp100, tmp98
 14482 4cab 49C1E906 		shr	r9, 6	# tmp100,
GAS LISTING /tmp/cclewcPz.s 			page 386


 14483              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14484              		.loc 1 1209 34 discriminator 3 view .LVU4863
 14485 4caf C462F9F7 		shlx	r8, rdx, rax	# tmp93, tmp92, x
 14485      C2
 14486 4cb4 C462F1F7 		shlx	r10, rdx, rcx	# tmp101, tmp92, tmp98
 14486      D2
 14487 4cb9 4E8904DF 		mov	QWORD PTR [rdi+r11*8], r8	# *_4, tmp93
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14488              		.loc 1 1208 32 is_stmt 1 discriminator 3 view .LVU4864
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14489              		.loc 1 1208 25 discriminator 3 view .LVU4865
 14490              		.loc 1 1209 9 discriminator 3 view .LVU4866
 14491              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14492              		.loc 1 1209 34 is_stmt 0 discriminator 3 view .LVU4867
 14493 4cbd 4E8914CF 		mov	QWORD PTR [rdi+r9*8], r10	# *_4, tmp101
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14494              		.loc 1 1208 32 is_stmt 1 discriminator 3 view .LVU4868
 14495              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14496              		.loc 1 1208 33 is_stmt 0 discriminator 3 view .LVU4869
 14497 4cc1 4C8D5802 		lea	r11, 2[rax]	# x,
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14498              		.loc 1 1208 25 is_stmt 1 discriminator 3 view .LVU4870
 14499              		.loc 1 1209 9 discriminator 3 view .LVU4871
 14500              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14501              		.loc 1 1208 33 is_stmt 0 discriminator 3 view .LVU4872
 14502 4cc5 4C8D4803 		lea	r9, 3[rax]	# x,
 14503              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14504              		.loc 1 1209 18 discriminator 3 view .LVU4873
 14505 4cc9 4D89D8   		mov	r8, r11	# tmp103, x
 14506 4ccc 49C1E806 		shr	r8, 6	# tmp103,
 14507 4cd0 4D89CA   		mov	r10, r9	# tmp106, x
 14508 4cd3 49C1EA06 		shr	r10, 6	# tmp106,
 14509              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14510              		.loc 1 1209 34 discriminator 3 view .LVU4874
 14511 4cd7 C4E2A1F7 		shlx	rcx, rdx, r11	# tmp104, tmp92, x
 14511      CA
 14512 4cdc C462B1F7 		shlx	r11, rdx, r9	# tmp107, tmp92, x
 14512      DA
 14513 4ce1 4A890CC7 		mov	QWORD PTR [rdi+r8*8], rcx	# *_4, tmp104
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14514              		.loc 1 1208 32 is_stmt 1 discriminator 3 view .LVU4875
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14515              		.loc 1 1208 25 discriminator 3 view .LVU4876
 14516              		.loc 1 1209 9 discriminator 3 view .LVU4877
 14517              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14518              		.loc 1 1209 34 is_stmt 0 discriminator 3 view .LVU4878
 14519 4ce5 4E891CD7 		mov	QWORD PTR [rdi+r10*8], r11	# *_4, tmp107
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14520              		.loc 1 1208 32 is_stmt 1 discriminator 3 view .LVU4879
 14521              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14522              		.loc 1 1208 33 is_stmt 0 discriminator 3 view .LVU4880
 14523 4ce9 488D4804 		lea	rcx, 4[rax]	# x,
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14524              		.loc 1 1208 25 is_stmt 1 discriminator 3 view .LVU4881
GAS LISTING /tmp/cclewcPz.s 			page 387


 14525              		.loc 1 1209 9 discriminator 3 view .LVU4882
 14526              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14527              		.loc 1 1208 33 is_stmt 0 discriminator 3 view .LVU4883
 14528 4ced 4C8D5005 		lea	r10, 5[rax]	# x,
 14529              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14530              		.loc 1 1209 18 discriminator 3 view .LVU4884
 14531 4cf1 4989C8   		mov	r8, rcx	# tmp109, x
 14532 4cf4 49C1E806 		shr	r8, 6	# tmp109,
 14533 4cf8 4D89D3   		mov	r11, r10	# tmp112, x
 14534 4cfb 49C1EB06 		shr	r11, 6	# tmp112,
 14535              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14536              		.loc 1 1209 34 discriminator 3 view .LVU4885
 14537 4cff C462F1F7 		shlx	r9, rdx, rcx	# tmp110, tmp92, x
 14537      CA
 14538 4d04 C4E2A9F7 		shlx	rcx, rdx, r10	# tmp113, tmp92, x
 14538      CA
 14539 4d09 4E890CC7 		mov	QWORD PTR [rdi+r8*8], r9	# *_4, tmp110
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14540              		.loc 1 1208 32 is_stmt 1 discriminator 3 view .LVU4886
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14541              		.loc 1 1208 25 discriminator 3 view .LVU4887
 14542              		.loc 1 1209 9 discriminator 3 view .LVU4888
 14543              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14544              		.loc 1 1209 34 is_stmt 0 discriminator 3 view .LVU4889
 14545 4d0d 4A890CDF 		mov	QWORD PTR [rdi+r11*8], rcx	# *_4, tmp113
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14546              		.loc 1 1208 32 is_stmt 1 discriminator 3 view .LVU4890
 14547              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14548              		.loc 1 1208 33 is_stmt 0 discriminator 3 view .LVU4891
 14549 4d11 4C8D4806 		lea	r9, 6[rax]	# x,
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14550              		.loc 1 1208 25 is_stmt 1 discriminator 3 view .LVU4892
 14551              		.loc 1 1209 9 discriminator 3 view .LVU4893
 14552              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14553              		.loc 1 1208 33 is_stmt 0 discriminator 3 view .LVU4894
 14554 4d15 4C8D5807 		lea	r11, 7[rax]	# x,
 14555              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14556              		.loc 1 1209 18 discriminator 3 view .LVU4895
 14557 4d19 4D89C8   		mov	r8, r9	# tmp115, x
 14558              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14559              		.loc 1 1209 34 discriminator 3 view .LVU4896
 14560 4d1c C462B1F7 		shlx	r10, rdx, r9	# tmp116, tmp92, x
 14560      D2
 14561              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14562              		.loc 1 1208 33 discriminator 3 view .LVU4897
 14563 4d21 4883C008 		add	rax, 8	# x,
 14564              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14565              		.loc 1 1209 18 discriminator 3 view .LVU4898
 14566 4d25 49C1E806 		shr	r8, 6	# tmp115,
 14567 4d29 4D89D9   		mov	r9, r11	# tmp118, x
 14568 4d2c 49C1E906 		shr	r9, 6	# tmp118,
 14569              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
GAS LISTING /tmp/cclewcPz.s 			page 388


 14570              		.loc 1 1208 5 discriminator 3 view .LVU4899
 14571 4d30 4839C6   		cmp	rsi, rax	# max, x
 14572              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14573              		.loc 1 1209 34 discriminator 3 view .LVU4900
 14574 4d33 C4E2A1F7 		shlx	rcx, rdx, r11	# tmp119, tmp92, x
 14574      CA
 14575 4d38 4E8914C7 		mov	QWORD PTR [rdi+r8*8], r10	# *_4, tmp116
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14576              		.loc 1 1208 32 is_stmt 1 discriminator 3 view .LVU4901
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14577              		.loc 1 1208 25 discriminator 3 view .LVU4902
 14578              		.loc 1 1209 9 discriminator 3 view .LVU4903
 14579              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
 14580              		.loc 1 1209 34 is_stmt 0 discriminator 3 view .LVU4904
 14581 4d3c 4A890CCF 		mov	QWORD PTR [rdi+r9*8], rcx	# *_4, tmp119
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14582              		.loc 1 1208 32 is_stmt 1 discriminator 3 view .LVU4905
 14583              	.LVL906:
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14584              		.loc 1 1208 25 discriminator 3 view .LVU4906
 14585              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14586              		.loc 1 1208 5 is_stmt 0 discriminator 3 view .LVU4907
 14587 4d40 0F8557FF 		jne	.L1125	#,
 14587      FFFF
 14588              	.LVL907:
 14589              	.L1165:
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14590              		.loc 1 1208 5 discriminator 3 view .LVU4908
 14591              	.LBE911:
 14592              	# sieve_extend.c:1211: }
1210:sieve_extend.c ****     }
1211:sieve_extend.c **** }
 14593              		.loc 1 1211 1 view .LVU4909
 14594 4d46 C3       		ret	
 14595              	.LVL908:
 14596              		.p2align 4,,7
 14597 4d47 90       		.p2align 3
 14598              	.L1166:
 14599              	.LBB912:
1209:sieve_extend.c ****     }
 14600              		.loc 1 1209 9 is_stmt 1 view .LVU4910
 14601              	# sieve_extend.c:1209:         bitarray[wordindex(x)] = markmask(x);
1209:sieve_extend.c ****     }
 14602              		.loc 1 1209 34 is_stmt 0 view .LVU4911
 14603 4d48 48C704C7 		mov	QWORD PTR [rdi+rax*8], 1	# *_4,
 14603      01000000 
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14604              		.loc 1 1208 32 is_stmt 1 view .LVU4912
 14605              	.LVL909:
 14606              	# sieve_extend.c:1208:     for (counter_t x=0; x<max; x++) {
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14607              		.loc 1 1208 33 is_stmt 0 view .LVU4913
 14608 4d50 B8010000 		mov	eax, 1	# x,
 14608      00
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14609              		.loc 1 1208 25 is_stmt 1 view .LVU4914
GAS LISTING /tmp/cclewcPz.s 			page 389


 14610 4d55 E9C2FEFF 		jmp	.L1155	#
 14610      FF
 14611              	.L1167:
1208:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 14612              		.loc 1 1208 25 is_stmt 0 view .LVU4915
 14613 4d5a C3       		ret	
 14614              	.LBE912:
 14615              		.cfi_endproc
 14616              	.LFE93:
 14618 4d5b 0F1F4400 		.p2align 4
 14618      00
 14619              		.globl	test2
 14621              	test2:
 14622              	.LFB104:
 14623              		.cfi_startproc
 14624 4d60 F30F1EFA 		endbr64	
 14625 4d64 4885F6   		test	rsi, rsi	# max
 14626 4d67 0F846901 		je	.L1210	#,
 14626      0000
 14627 4d6d 4889F1   		mov	rcx, rsi	# tmp97, max
 14628 4d70 31C0     		xor	eax, eax	# x
 14629 4d72 83E107   		and	ecx, 7	# tmp97,
 14630 4d75 BA010000 		mov	edx, 1	# tmp92,
 14630      00
 14631 4d7a 0F84AD00 		je	.L1170	#,
 14631      0000
 14632 4d80 4883F901 		cmp	rcx, 1	# tmp97,
 14633 4d84 0F848600 		je	.L1195	#,
 14633      0000
 14634 4d8a 4883F902 		cmp	rcx, 2	# tmp97,
 14635 4d8e 746C     		je	.L1196	#,
 14636 4d90 4883F903 		cmp	rcx, 3	# tmp97,
 14637 4d94 7452     		je	.L1197	#,
 14638 4d96 4883F904 		cmp	rcx, 4	# tmp97,
 14639 4d9a 7438     		je	.L1198	#,
 14640 4d9c 4883F905 		cmp	rcx, 5	# tmp97,
 14641 4da0 741E     		je	.L1199	#,
 14642 4da2 4883F906 		cmp	rcx, 6	# tmp97,
 14643 4da6 0F852C01 		jne	.L1211	#,
 14643      0000
 14644              	.L1200:
 14645 4dac 4989C1   		mov	r9, rax	# tmp122, x
 14646 4daf C462F9F7 		shlx	r8, rdx, rax	# tmp123, tmp92, x
 14646      C2
 14647 4db4 49C1E906 		shr	r9, 6	# tmp122,
 14648 4db8 4883C001 		add	rax, 1	# x,
 14649 4dbc 4E8904CF 		mov	QWORD PTR [rdi+r9*8], r8	# *_9, tmp123
 14650              	.L1199:
 14651 4dc0 4989C2   		mov	r10, rax	# tmp124, x
 14652 4dc3 C462F9F7 		shlx	r11, rdx, rax	# tmp125, tmp92, x
 14652      DA
 14653 4dc8 49C1EA06 		shr	r10, 6	# tmp124,
 14654 4dcc 4883C001 		add	rax, 1	# x,
 14655 4dd0 4E891CD7 		mov	QWORD PTR [rdi+r10*8], r11	# *_9, tmp125
 14656              	.L1198:
 14657 4dd4 4889C1   		mov	rcx, rax	# tmp126, x
 14658 4dd7 C462F9F7 		shlx	r9, rdx, rax	# tmp127, tmp92, x
GAS LISTING /tmp/cclewcPz.s 			page 390


 14658      CA
 14659 4ddc 48C1E906 		shr	rcx, 6	# tmp126,
 14660 4de0 4883C001 		add	rax, 1	# x,
 14661 4de4 4C890CCF 		mov	QWORD PTR [rdi+rcx*8], r9	# *_9, tmp127
 14662              	.L1197:
 14663 4de8 4989C2   		mov	r10, rax	# tmp128, x
 14664 4deb C462F9F7 		shlx	r8, rdx, rax	# tmp129, tmp92, x
 14664      C2
 14665 4df0 49C1EA06 		shr	r10, 6	# tmp128,
 14666 4df4 4883C001 		add	rax, 1	# x,
 14667 4df8 4E8904D7 		mov	QWORD PTR [rdi+r10*8], r8	# *_9, tmp129
 14668              	.L1196:
 14669 4dfc 4989C3   		mov	r11, rax	# tmp130, x
 14670 4dff C4E2F9F7 		shlx	rcx, rdx, rax	# tmp131, tmp92, x
 14670      CA
 14671 4e04 49C1EB06 		shr	r11, 6	# tmp130,
 14672 4e08 4883C001 		add	rax, 1	# x,
 14673 4e0c 4A890CDF 		mov	QWORD PTR [rdi+r11*8], rcx	# *_9, tmp131
 14674              	.L1195:
 14675 4e10 4989C1   		mov	r9, rax	# tmp132, x
 14676 4e13 C462F9F7 		shlx	r10, rdx, rax	# tmp133, tmp92, x
 14676      D2
 14677 4e18 49C1E906 		shr	r9, 6	# tmp132,
 14678 4e1c 4883C001 		add	rax, 1	# x,
 14679 4e20 4E8914CF 		mov	QWORD PTR [rdi+r9*8], r10	# *_9, tmp133
 14680 4e24 4839C6   		cmp	rsi, rax	# max, x
 14681 4e27 0F84BD00 		je	.L1212	#,
 14681      0000
 14682              	.L1170:
 14683 4e2d 488D4801 		lea	rcx, 1[rax]	# tmp98,
 14684 4e31 4989C3   		mov	r11, rax	# tmp90, x
 14685 4e34 49C1EB06 		shr	r11, 6	# tmp90,
 14686 4e38 4989C9   		mov	r9, rcx	# tmp100, tmp98
 14687 4e3b 49C1E906 		shr	r9, 6	# tmp100,
 14688 4e3f C462F9F7 		shlx	r8, rdx, rax	# tmp93, tmp92, x
 14688      C2
 14689 4e44 C462F1F7 		shlx	r10, rdx, rcx	# tmp101, tmp92, tmp98
 14689      D2
 14690 4e49 4E8904DF 		mov	QWORD PTR [rdi+r11*8], r8	# *_9, tmp93
 14691 4e4d 4E8914CF 		mov	QWORD PTR [rdi+r9*8], r10	# *_9, tmp101
 14692 4e51 4C8D5802 		lea	r11, 2[rax]	# x,
 14693 4e55 4C8D4803 		lea	r9, 3[rax]	# x,
 14694 4e59 4D89D8   		mov	r8, r11	# tmp103, x
 14695 4e5c 49C1E806 		shr	r8, 6	# tmp103,
 14696 4e60 4D89CA   		mov	r10, r9	# tmp106, x
 14697 4e63 49C1EA06 		shr	r10, 6	# tmp106,
 14698 4e67 C4E2A1F7 		shlx	rcx, rdx, r11	# tmp104, tmp92, x
 14698      CA
 14699 4e6c C462B1F7 		shlx	r11, rdx, r9	# tmp107, tmp92, x
 14699      DA
 14700 4e71 4A890CC7 		mov	QWORD PTR [rdi+r8*8], rcx	# *_9, tmp104
 14701 4e75 4E891CD7 		mov	QWORD PTR [rdi+r10*8], r11	# *_9, tmp107
 14702 4e79 488D4804 		lea	rcx, 4[rax]	# x,
 14703 4e7d 4C8D5005 		lea	r10, 5[rax]	# x,
 14704 4e81 4989C8   		mov	r8, rcx	# tmp109, x
 14705 4e84 49C1E806 		shr	r8, 6	# tmp109,
 14706 4e88 4D89D3   		mov	r11, r10	# tmp112, x
GAS LISTING /tmp/cclewcPz.s 			page 391


 14707 4e8b 49C1EB06 		shr	r11, 6	# tmp112,
 14708 4e8f C462F1F7 		shlx	r9, rdx, rcx	# tmp110, tmp92, x
 14708      CA
 14709 4e94 C4E2A9F7 		shlx	rcx, rdx, r10	# tmp113, tmp92, x
 14709      CA
 14710 4e99 4E890CC7 		mov	QWORD PTR [rdi+r8*8], r9	# *_9, tmp110
 14711 4e9d 4A890CDF 		mov	QWORD PTR [rdi+r11*8], rcx	# *_9, tmp113
 14712 4ea1 4C8D4806 		lea	r9, 6[rax]	# x,
 14713 4ea5 4C8D5807 		lea	r11, 7[rax]	# x,
 14714 4ea9 4D89C8   		mov	r8, r9	# tmp115, x
 14715 4eac C462B1F7 		shlx	r10, rdx, r9	# tmp116, tmp92, x
 14715      D2
 14716 4eb1 4883C008 		add	rax, 8	# x,
 14717 4eb5 49C1E806 		shr	r8, 6	# tmp115,
 14718 4eb9 4D89D9   		mov	r9, r11	# tmp118, x
 14719 4ebc 49C1E906 		shr	r9, 6	# tmp118,
 14720 4ec0 4839C6   		cmp	rsi, rax	# max, x
 14721 4ec3 C4E2A1F7 		shlx	rcx, rdx, r11	# tmp119, tmp92, x
 14721      CA
 14722 4ec8 4E8914C7 		mov	QWORD PTR [rdi+r8*8], r10	# *_9, tmp116
 14723 4ecc 4A890CCF 		mov	QWORD PTR [rdi+r9*8], rcx	# *_9, tmp119
 14724 4ed0 0F8557FF 		jne	.L1170	#,
 14724      FFFF
 14725              	.L1210:
 14726 4ed6 C3       		ret	
 14727              		.p2align 4,,7
 14728 4ed7 90       		.p2align 3
 14729              	.L1211:
 14730 4ed8 48C704C7 		mov	QWORD PTR [rdi+rax*8], 1	# *_9,
 14730      01000000 
 14731 4ee0 B8010000 		mov	eax, 1	# x,
 14731      00
 14732 4ee5 E9C2FEFF 		jmp	.L1200	#
 14732      FF
 14733              	.L1212:
 14734 4eea C3       		ret	
 14735              		.cfi_endproc
 14736              	.LFE104:
 14738 4eeb 0F1F4400 		.p2align 4
 14738      00
 14739              		.globl	test3
 14741              	test3:
 14742              	.LVL910:
 14743              	.LFB95:
1212:sieve_extend.c **** 
1213:sieve_extend.c **** void test2(bitword_t* __restrict bitarray, counter_t max) {
1214:sieve_extend.c ****     //#pragma GCC unroll 16
1215:sieve_extend.c ****     #pragma GCC ivdep 
1216:sieve_extend.c ****     for (counter_t x=0; x<max; x++) {
1217:sieve_extend.c ****         *(bitarray+wordindex(x)) = markmask(x);
1218:sieve_extend.c ****     }
1219:sieve_extend.c **** }
1220:sieve_extend.c **** 
1221:sieve_extend.c **** void test3(bitword_t* __restrict bitarray, counter_t max) {
 14744              		.loc 1 1221 59 is_stmt 1 view -0
 14745              		.cfi_startproc
 14746              		.loc 1 1221 59 is_stmt 0 view .LVU4917
GAS LISTING /tmp/cclewcPz.s 			page 392


 14747 4ef0 F30F1EFA 		endbr64	
1222:sieve_extend.c ****     for (register counter_t x=0; x<max; ) {
 14748              		.loc 1 1222 5 is_stmt 1 view .LVU4918
 14749              	.LBB913:
 14750              		.loc 1 1222 10 view .LVU4919
 14751              	.LVL911:
 14752              		.loc 1 1222 34 view .LVU4920
 14753              	# sieve_extend.c:1222:     for (register counter_t x=0; x<max; ) {
 14754              		.loc 1 1222 5 is_stmt 0 view .LVU4921
 14755 4ef4 4885F6   		test	rsi, rsi	# max
 14756 4ef7 0F840401 		je	.L1237	#,
 14756      0000
 14757              	# sieve_extend.c:1222:     for (register counter_t x=0; x<max; ) {
 14758              		.loc 1 1222 29 view .LVU4922
 14759 4efd 31C0     		xor	eax, eax	# x
 14760              	.LBB914:
 14761              	# sieve_extend.c:1228:             mask |= markmask(x);
1223:sieve_extend.c ****         register bitword_t mask = SAFE_ZERO;
1224:sieve_extend.c ****         register counter_t index_word = wordstart(x);
1225:sieve_extend.c **** 
1226:sieve_extend.c ****         #pragma GCC ivdep
1227:sieve_extend.c ****         do {
1228:sieve_extend.c ****             mask |= markmask(x);
 14762              		.loc 1 1228 21 view .LVU4923
 14763 4eff 41BA0100 		mov	r10d, 1	# tmp95,
 14763      0000
 14764              	.LVL912:
 14765 4f05 66662E0F 		.p2align 4
 14765      1F840000 
 14765      000000
 14766              		.p2align 3
 14767              	.L1216:
1223:sieve_extend.c ****         register bitword_t mask = SAFE_ZERO;
 14768              		.loc 1 1223 9 is_stmt 1 view .LVU4924
1224:sieve_extend.c **** 
 14769              		.loc 1 1224 9 view .LVU4925
 14770              	# sieve_extend.c:1224:         register counter_t index_word = wordstart(x);
1224:sieve_extend.c **** 
 14771              		.loc 1 1224 28 is_stmt 0 view .LVU4926
 14772 4f10 4989C0   		mov	r8, rax	# index_word, x
 14773              	# sieve_extend.c:1223:         register bitword_t mask = SAFE_ZERO;
1223:sieve_extend.c ****         register bitword_t mask = SAFE_ZERO;
 14774              		.loc 1 1223 28 view .LVU4927
 14775 4f13 31C9     		xor	ecx, ecx	# mask
 14776              	# sieve_extend.c:1224:         register counter_t index_word = wordstart(x);
1224:sieve_extend.c **** 
 14777              		.loc 1 1224 28 view .LVU4928
 14778 4f15 4983E0C0 		and	r8, -64	# index_word,
 14779              	.LVL913:
 14780              	.L1215:
 14781              		.loc 1 1228 13 is_stmt 1 discriminator 1 view .LVU4929
 14782              	# sieve_extend.c:1229:             x++;
1229:sieve_extend.c ****             x++;
 14783              		.loc 1 1229 14 is_stmt 0 discriminator 1 view .LVU4930
 14784 4f19 4C8D4801 		lea	r9, 1[rax]	# tmp98,
 14785              	# sieve_extend.c:1228:             mask |= markmask(x);
1228:sieve_extend.c ****             x++;
GAS LISTING /tmp/cclewcPz.s 			page 393


 14786              		.loc 1 1228 21 discriminator 1 view .LVU4931
 14787 4f1d C4C2F9F7 		shlx	rdx, r10, rax	# tmp94, tmp95, x
 14787      D2
 14788              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
1230:sieve_extend.c ****         } while(wordstart(x)==index_word);
 14789              		.loc 1 1230 17 discriminator 1 view .LVU4932
 14790 4f22 4D89CB   		mov	r11, r9	# tmp96, x
 14791              	# sieve_extend.c:1228:             mask |= markmask(x);
1228:sieve_extend.c ****             x++;
 14792              		.loc 1 1228 18 discriminator 1 view .LVU4933
 14793 4f25 4809D1   		or	rcx, rdx	# mask, tmp94
 14794              	.LVL914:
1229:sieve_extend.c ****             x++;
 14795              		.loc 1 1229 13 is_stmt 1 discriminator 1 view .LVU4934
 14796              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14797              		.loc 1 1230 17 is_stmt 0 discriminator 1 view .LVU4935
 14798 4f28 4983E3C0 		and	r11, -64	# tmp96,
 14799              	# sieve_extend.c:1229:             x++;
1229:sieve_extend.c ****             x++;
 14800              		.loc 1 1229 14 discriminator 1 view .LVU4936
 14801 4f2c 4C89C8   		mov	rax, r9	# x, tmp98
 14802              	.LVL915:
 14803              		.loc 1 1230 16 is_stmt 1 discriminator 1 view .LVU4937
 14804              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14805              		.loc 1 1230 9 is_stmt 0 discriminator 1 view .LVU4938
 14806 4f2f 4D39C3   		cmp	r11, r8	# tmp96, index_word
 14807 4f32 0F85B800 		jne	.L1236	#,
 14807      0000
1228:sieve_extend.c ****             x++;
 14808              		.loc 1 1228 13 is_stmt 1 view .LVU4939
 14809              	# sieve_extend.c:1229:             x++;
1229:sieve_extend.c ****             x++;
 14810              		.loc 1 1229 14 is_stmt 0 view .LVU4940
 14811 4f38 4883C001 		add	rax, 1	# x,
 14812              	.LVL916:
 14813              	# sieve_extend.c:1228:             mask |= markmask(x);
1228:sieve_extend.c ****             x++;
 14814              		.loc 1 1228 21 view .LVU4941
 14815 4f3c C4C2B1F7 		shlx	rdx, r10, r9	# tmp99, tmp95, x
 14815      D2
 14816              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14817              		.loc 1 1230 17 view .LVU4942
 14818 4f41 4989C3   		mov	r11, rax	# tmp100, x
 14819              	# sieve_extend.c:1228:             mask |= markmask(x);
1228:sieve_extend.c ****             x++;
 14820              		.loc 1 1228 18 view .LVU4943
 14821 4f44 4809D1   		or	rcx, rdx	# mask, tmp99
 14822              	.LVL917:
1229:sieve_extend.c ****             x++;
 14823              		.loc 1 1229 13 is_stmt 1 view .LVU4944
 14824              		.loc 1 1230 16 view .LVU4945
 14825              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14826              		.loc 1 1230 17 is_stmt 0 view .LVU4946
 14827 4f47 4983E3C0 		and	r11, -64	# tmp100,
 14828              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14829              		.loc 1 1230 9 view .LVU4947
 14830 4f4b 4D39C3   		cmp	r11, r8	# tmp100, index_word
GAS LISTING /tmp/cclewcPz.s 			page 394


 14831 4f4e 0F859C00 		jne	.L1236	#,
 14831      0000
1228:sieve_extend.c ****             x++;
 14832              		.loc 1 1228 13 is_stmt 1 view .LVU4948
 14833              	# sieve_extend.c:1228:             mask |= markmask(x);
1228:sieve_extend.c ****             x++;
 14834              		.loc 1 1228 21 is_stmt 0 view .LVU4949
 14835 4f54 C4C2F9F7 		shlx	rax, r10, rax	# tmp101, tmp95, x
 14835      C2
 14836              	.LVL918:
 14837              	# sieve_extend.c:1228:             mask |= markmask(x);
1228:sieve_extend.c ****             x++;
 14838              		.loc 1 1228 18 view .LVU4950
 14839 4f59 4809C1   		or	rcx, rax	# mask, tmp101
 14840              	.LVL919:
1229:sieve_extend.c ****             x++;
 14841              		.loc 1 1229 13 is_stmt 1 view .LVU4951
 14842              	# sieve_extend.c:1229:             x++;
1229:sieve_extend.c ****             x++;
 14843              		.loc 1 1229 14 is_stmt 0 view .LVU4952
 14844 4f5c 498D4102 		lea	rax, 2[r9]	# x,
 14845              	.LVL920:
 14846              		.loc 1 1230 16 is_stmt 1 view .LVU4953
 14847              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14848              		.loc 1 1230 17 is_stmt 0 view .LVU4954
 14849 4f60 4889C2   		mov	rdx, rax	# tmp102, x
 14850 4f63 4883E2C0 		and	rdx, -64	# tmp102,
 14851              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14852              		.loc 1 1230 9 view .LVU4955
 14853 4f67 4C39C2   		cmp	rdx, r8	# tmp102, index_word
 14854 4f6a 0F858000 		jne	.L1236	#,
 14854      0000
1228:sieve_extend.c ****             x++;
 14855              		.loc 1 1228 13 is_stmt 1 view .LVU4956
 14856              	# sieve_extend.c:1228:             mask |= markmask(x);
1228:sieve_extend.c ****             x++;
 14857              		.loc 1 1228 21 is_stmt 0 view .LVU4957
 14858 4f70 C442F9F7 		shlx	r11, r10, rax	# tmp103, tmp95, x
 14858      DA
 14859              	# sieve_extend.c:1229:             x++;
1229:sieve_extend.c ****             x++;
 14860              		.loc 1 1229 14 view .LVU4958
 14861 4f75 498D4103 		lea	rax, 3[r9]	# x,
 14862              	.LVL921:
 14863              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14864              		.loc 1 1230 17 view .LVU4959
 14865 4f79 4889C2   		mov	rdx, rax	# tmp104, x
 14866              	# sieve_extend.c:1228:             mask |= markmask(x);
1228:sieve_extend.c ****             x++;
 14867              		.loc 1 1228 18 view .LVU4960
 14868 4f7c 4C09D9   		or	rcx, r11	# mask, tmp103
 14869              	.LVL922:
1229:sieve_extend.c ****             x++;
 14870              		.loc 1 1229 13 is_stmt 1 view .LVU4961
 14871              		.loc 1 1230 16 view .LVU4962
 14872              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14873              		.loc 1 1230 17 is_stmt 0 view .LVU4963
GAS LISTING /tmp/cclewcPz.s 			page 395


 14874 4f7f 4883E2C0 		and	rdx, -64	# tmp104,
 14875              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14876              		.loc 1 1230 9 view .LVU4964
 14877 4f83 4C39C2   		cmp	rdx, r8	# tmp104, index_word
 14878 4f86 7568     		jne	.L1236	#,
1228:sieve_extend.c ****             x++;
 14879              		.loc 1 1228 13 is_stmt 1 view .LVU4965
 14880              	# sieve_extend.c:1228:             mask |= markmask(x);
1228:sieve_extend.c ****             x++;
 14881              		.loc 1 1228 21 is_stmt 0 view .LVU4966
 14882 4f88 C4C2F9F7 		shlx	rax, r10, rax	# tmp105, tmp95, x
 14882      C2
 14883              	.LVL923:
 14884              	# sieve_extend.c:1228:             mask |= markmask(x);
1228:sieve_extend.c ****             x++;
 14885              		.loc 1 1228 18 view .LVU4967
 14886 4f8d 4809C1   		or	rcx, rax	# mask, tmp105
 14887              	.LVL924:
1229:sieve_extend.c ****             x++;
 14888              		.loc 1 1229 13 is_stmt 1 view .LVU4968
 14889              	# sieve_extend.c:1229:             x++;
1229:sieve_extend.c ****             x++;
 14890              		.loc 1 1229 14 is_stmt 0 view .LVU4969
 14891 4f90 498D4104 		lea	rax, 4[r9]	# x,
 14892              	.LVL925:
 14893              		.loc 1 1230 16 is_stmt 1 view .LVU4970
 14894              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14895              		.loc 1 1230 17 is_stmt 0 view .LVU4971
 14896 4f94 4989C3   		mov	r11, rax	# tmp106, x
 14897 4f97 4983E3C0 		and	r11, -64	# tmp106,
 14898              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14899              		.loc 1 1230 9 view .LVU4972
 14900 4f9b 4D39C3   		cmp	r11, r8	# tmp106, index_word
 14901 4f9e 7550     		jne	.L1236	#,
1228:sieve_extend.c ****             x++;
 14902              		.loc 1 1228 13 is_stmt 1 view .LVU4973
 14903              	# sieve_extend.c:1228:             mask |= markmask(x);
1228:sieve_extend.c ****             x++;
 14904              		.loc 1 1228 21 is_stmt 0 view .LVU4974
 14905 4fa0 C4C2F9F7 		shlx	rdx, r10, rax	# tmp107, tmp95, x
 14905      D2
 14906              	# sieve_extend.c:1229:             x++;
1229:sieve_extend.c ****             x++;
 14907              		.loc 1 1229 14 view .LVU4975
 14908 4fa5 498D4105 		lea	rax, 5[r9]	# x,
 14909              	.LVL926:
 14910              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14911              		.loc 1 1230 17 view .LVU4976
 14912 4fa9 4989C3   		mov	r11, rax	# tmp108, x
 14913              	# sieve_extend.c:1228:             mask |= markmask(x);
1228:sieve_extend.c ****             x++;
 14914              		.loc 1 1228 18 view .LVU4977
 14915 4fac 4809D1   		or	rcx, rdx	# mask, tmp107
 14916              	.LVL927:
1229:sieve_extend.c ****             x++;
 14917              		.loc 1 1229 13 is_stmt 1 view .LVU4978
 14918              		.loc 1 1230 16 view .LVU4979
GAS LISTING /tmp/cclewcPz.s 			page 396


 14919              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14920              		.loc 1 1230 17 is_stmt 0 view .LVU4980
 14921 4faf 4983E3C0 		and	r11, -64	# tmp108,
 14922              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14923              		.loc 1 1230 9 view .LVU4981
 14924 4fb3 4D39C3   		cmp	r11, r8	# tmp108, index_word
 14925 4fb6 7538     		jne	.L1236	#,
1228:sieve_extend.c ****             x++;
 14926              		.loc 1 1228 13 is_stmt 1 view .LVU4982
 14927              	# sieve_extend.c:1228:             mask |= markmask(x);
1228:sieve_extend.c ****             x++;
 14928              		.loc 1 1228 21 is_stmt 0 view .LVU4983
 14929 4fb8 C4C2F9F7 		shlx	rax, r10, rax	# tmp109, tmp95, x
 14929      C2
 14930              	.LVL928:
 14931              	# sieve_extend.c:1228:             mask |= markmask(x);
1228:sieve_extend.c ****             x++;
 14932              		.loc 1 1228 18 view .LVU4984
 14933 4fbd 4809C1   		or	rcx, rax	# mask, tmp109
 14934              	.LVL929:
1229:sieve_extend.c ****             x++;
 14935              		.loc 1 1229 13 is_stmt 1 view .LVU4985
 14936              	# sieve_extend.c:1229:             x++;
1229:sieve_extend.c ****             x++;
 14937              		.loc 1 1229 14 is_stmt 0 view .LVU4986
 14938 4fc0 498D4106 		lea	rax, 6[r9]	# x,
 14939              	.LVL930:
 14940              		.loc 1 1230 16 is_stmt 1 view .LVU4987
 14941              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14942              		.loc 1 1230 17 is_stmt 0 view .LVU4988
 14943 4fc4 4889C2   		mov	rdx, rax	# tmp110, x
 14944 4fc7 4883E2C0 		and	rdx, -64	# tmp110,
 14945              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14946              		.loc 1 1230 9 view .LVU4989
 14947 4fcb 4C39C2   		cmp	rdx, r8	# tmp110, index_word
 14948 4fce 7520     		jne	.L1236	#,
1228:sieve_extend.c ****             x++;
 14949              		.loc 1 1228 13 is_stmt 1 view .LVU4990
 14950              	# sieve_extend.c:1228:             mask |= markmask(x);
1228:sieve_extend.c ****             x++;
 14951              		.loc 1 1228 21 is_stmt 0 view .LVU4991
 14952 4fd0 C442F9F7 		shlx	r11, r10, rax	# tmp111, tmp95, x
 14952      DA
 14953              	# sieve_extend.c:1229:             x++;
1229:sieve_extend.c ****             x++;
 14954              		.loc 1 1229 14 view .LVU4992
 14955 4fd5 498D4107 		lea	rax, 7[r9]	# x,
 14956              	.LVL931:
 14957              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14958              		.loc 1 1230 17 view .LVU4993
 14959 4fd9 4989C1   		mov	r9, rax	# tmp112, x
 14960              	.LVL932:
 14961              	# sieve_extend.c:1228:             mask |= markmask(x);
1228:sieve_extend.c ****             x++;
 14962              		.loc 1 1228 18 view .LVU4994
 14963 4fdc 4C09D9   		or	rcx, r11	# mask, tmp111
 14964              	.LVL933:
GAS LISTING /tmp/cclewcPz.s 			page 397


1229:sieve_extend.c ****             x++;
 14965              		.loc 1 1229 13 is_stmt 1 view .LVU4995
 14966              		.loc 1 1230 16 view .LVU4996
 14967              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14968              		.loc 1 1230 17 is_stmt 0 view .LVU4997
 14969 4fdf 4983E1C0 		and	r9, -64	# tmp112,
 14970              	# sieve_extend.c:1230:         } while(wordstart(x)==index_word);
 14971              		.loc 1 1230 9 view .LVU4998
 14972 4fe3 4D39C1   		cmp	r9, r8	# tmp112, index_word
 14973 4fe6 0F842DFF 		je	.L1215	#,
 14973      FFFF
 14974 4fec 0F1F4000 		.p2align 4
 14975              		.p2align 3
 14976              	.L1236:
1231:sieve_extend.c ****         bitarray[wordindex(index_word)] = mask;
 14977              		.loc 1 1231 9 is_stmt 1 view .LVU4999
 14978              	# sieve_extend.c:1231:         bitarray[wordindex(index_word)] = mask;
 14979              		.loc 1 1231 18 is_stmt 0 view .LVU5000
 14980 4ff0 49C1E806 		shr	r8, 6	# tmp97,
 14981              	.LVL934:
 14982              		.loc 1 1231 18 view .LVU5001
 14983              	.LBE914:
 14984              	# sieve_extend.c:1222:     for (register counter_t x=0; x<max; ) {
1222:sieve_extend.c ****         register bitword_t mask = SAFE_ZERO;
 14985              		.loc 1 1222 5 view .LVU5002
 14986 4ff4 4839C6   		cmp	rsi, rax	# max, x
 14987              	.LBB915:
 14988              	# sieve_extend.c:1231:         bitarray[wordindex(index_word)] = mask;
 14989              		.loc 1 1231 41 view .LVU5003
 14990 4ff7 4A890CC7 		mov	QWORD PTR [rdi+r8*8], rcx	# *_6, mask
 14991              		.loc 1 1231 41 view .LVU5004
 14992              	.LBE915:
1222:sieve_extend.c ****         register bitword_t mask = SAFE_ZERO;
 14993              		.loc 1 1222 34 is_stmt 1 view .LVU5005
 14994              	# sieve_extend.c:1222:     for (register counter_t x=0; x<max; ) {
1222:sieve_extend.c ****         register bitword_t mask = SAFE_ZERO;
 14995              		.loc 1 1222 5 is_stmt 0 view .LVU5006
 14996 4ffb 0F870FFF 		ja	.L1216	#,
 14996      FFFF
 14997              	.LVL935:
 14998              	.L1237:
1222:sieve_extend.c ****         register bitword_t mask = SAFE_ZERO;
 14999              		.loc 1 1222 5 view .LVU5007
 15000              	.LBE913:
 15001              	# sieve_extend.c:1233: }
1232:sieve_extend.c ****     }
1233:sieve_extend.c **** }
 15002              		.loc 1 1233 1 view .LVU5008
 15003 5001 C3       		ret	
 15004              		.cfi_endproc
 15005              	.LFE95:
 15007              		.section	.rodata.str1.1
 15008              	.LC29:
 15009 0044 5573696E 		.string	"Using Pointers"
 15009      6720506F 
 15009      696E7465 
 15009      727300
GAS LISTING /tmp/cclewcPz.s 			page 398


 15010              	.LC30:
 15011 0053 2D2D6865 		.string	"--help"
 15011      6C7000
 15012              	.LC31:
 15013 005a 2D2D7665 		.string	"--verbose"
 15013      72626F73 
 15013      6500
 15014              	.LC32:
 15015 0064 4E6F2076 		.string	"No verbose level specified\n"
 15015      6572626F 
 15015      7365206C 
 15015      6576656C 
 15015      20737065 
 15016              		.section	.rodata.str1.8
 15017 03ae 0000     		.align 8
 15018              	.LC33:
 15019 03b0 4572726F 		.string	"Error: Invalid measurement time: %s\n"
 15019      723A2049 
 15019      6E76616C 
 15019      6964206D 
 15019      65617375 
 15020              		.section	.rodata.str1.1
 15021              	.LC34:
 15022 0080 56657262 		.string	"Verbose level set to %d\n"
 15022      6F736520 
 15022      6C657665 
 15022      6C207365 
 15022      7420746F 
 15023              	.LC35:
 15024 0099 2D2D6368 		.string	"--check"
 15024      65636B00 
 15025              	.LC36:
 15026 00a1 2D2D7475 		.string	"--tune"
 15026      6E6500
 15027              	.LC37:
 15028 00a8 4E6F2074 		.string	"No tune level specified\n"
 15028      756E6520 
 15028      6C657665 
 15028      6C207370 
 15028      65636966 
 15029              		.section	.rodata.str1.8
 15030 03d5 000000   		.align 8
 15031              	.LC38:
 15032 03d8 4572726F 		.string	"Error: Invalid tune level: %s\n"
 15032      723A2049 
 15032      6E76616C 
 15032      69642074 
 15032      756E6520 
 15033              		.section	.rodata.str1.1
 15034              	.LC39:
 15035 00c1 54756E65 		.string	"Tune level set to %d\n"
 15035      206C6576 
 15035      656C2073 
 15035      65742074 
 15035      6F202564 
 15036              	.LC40:
 15037 00d7 2D2D7368 		.string	"--show"
GAS LISTING /tmp/cclewcPz.s 			page 399


 15037      6F7700
 15038              	.LC41:
 15039 00de 4E6F2073 		.string	"No show maximum specified\n"
 15039      686F7720 
 15039      6D617869 
 15039      6D756D20 
 15039      73706563 
 15040              	.LC42:
 15041 00f9 256A7500 		.string	"%ju"
 15042              		.section	.rodata.str1.8
 15043 03f7 00       		.align 8
 15044              	.LC43:
 15045 03f8 4572726F 		.string	"Error: Invalid show maximum: %s\n"
 15045      723A2049 
 15045      6E76616C 
 15045      69642073 
 15045      686F7720 
 15046              		.section	.rodata.str1.1
 15047              	.LC44:
 15048 00fd 53686F77 		.string	"Show maximum set to %ju\n"
 15048      206D6178 
 15048      696D756D 
 15048      20736574 
 15048      20746F20 
 15049              	.LC45:
 15050 0116 496E7661 		.string	"Invalid size %s\n"
 15050      6C696420 
 15050      73697A65 
 15050      2025730A 
 15050      00
 15051              	.LC46:
 15052 0127 56616C69 		.string	"Validating... "
 15052      64617469 
 15052      6E672E2E 
 15052      2E2000
 15053              	.LC47:
 15054 0136 2E2E2E43 		.string	"...Checking size %ju ..."
 15054      6865636B 
 15054      696E6720 
 15054      73697A65 
 15054      20256A75 
 15055              	.LC48:
 15056 014f 2E626C6F 		.string	".blocksize %ju-"
 15056      636B7369 
 15056      7A652025 
 15056      6A752D00 
 15057              	.LC49:
 15058 015f 76616C69 		.string	"valid;"
 15058      643B00
 15059              	.LC50:
 15060 0166 2E2E2E56 		.string	"...Valid algorithm"
 15060      616C6964 
 15060      20616C67 
 15060      6F726974 
 15060      686D00
 15061              	.LC51:
 15062 0179 54756E69 		.string	"Tuning..."
GAS LISTING /tmp/cclewcPz.s 			page 400


 15062      6E672E2E 
 15062      2E00
 15063              	.LC52:
 15064 0183 2E283E29 		.string	".(>)"
 15064      00
 15065              		.section	.rodata.str1.8
 15066 0419 00000000 		.align 8
 15066      000000
 15067              	.LC53:
 15068 0420 626C6F63 		.string	"blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector %
 15068      6B73697A 
 15068      655F6269 
 15068      74732025 
 15068      31306A75 
 15069              		.section	.rodata.str1.1
 15070              	.LC54:
 15071 0188 2E2E2E2E 		.string	"...."
 15071      00
 15072              		.section	.rodata.str1.8
 15073 04a7 00       		.align 8
 15074              	.LC55:
 15075 04a8 256A7520 		.string	"%ju results. Inital best blocksize: %ju; best smallstep %ju; best mediumstep %ju; best ve
 15075      72657375 
 15075      6C74732E 
 15075      20496E69 
 15075      74616C20 
 15076              		.section	.rodata.str1.1
 15077              	.LC56:
 15078 018d 42657374 		.string	"Best options"
 15078      206F7074 
 15078      696F6E73 
 15078      00
 15079              	.LC57:
 15080 019a 28256A75 		.string	"(%ju) "
 15080      292000
 15081              	.LC58:
 15082 01a1 2E2E2E00 		.string	"..."
 15083              	.LC59:
 15084 01a5 2E426573 		.string	".Best result:"
 15084      74207265 
 15084      73756C74 
 15084      3A00
 15085              		.section	.rodata.str1.8
 15086 050f 00       		.align 8
 15087              	.LC60:
 15088 0510 42656E63 		.string	"Benchmarking... with blocksize %ju steps: %ju/%ju/%ju\n"
 15088      686D6172 
 15088      6B696E67 
 15088      2E2E2E20 
 15088      77697468 
 15089 0547 00       		.align 8
 15090              	.LC62:
 15091 0548 726F6769 		.string	"rogiervandam_extend;%ju;%f;1;algorithm=other,faithful=yes,bits=1\n"
 15091      65727661 
 15091      6E64616D 
 15091      5F657874 
 15091      656E643B 
GAS LISTING /tmp/cclewcPz.s 			page 401


 15092 058a 00000000 		.align 8
 15092      0000
 15093              	.LC63:
 15094 0590 50617373 		.string	"Passes - per 5 seconds: %f - per second %f\n"
 15094      6573202D 
 15094      20706572 
 15094      20352073 
 15094      65636F6E 
 15095              		.section	.rodata.str1.1
 15096              	.LC64:
 15097 01b3 53686F77 		.string	"Show result set:"
 15097      20726573 
 15097      756C7420 
 15097      7365743A 
 15097      00
 15098              		.section	.text.startup,"ax",@progbits
 15099              		.p2align 4
 15100              		.globl	main
 15102              	main:
 15103              	.LVL936:
 15104              	.LFB96:
1234:sieve_extend.c **** 
1235:sieve_extend.c **** //void test4(bitword_t* __restrict bitarray, counter_t max) {
1236:sieve_extend.c **** //    bitvector_t* bitvector = (bitvector_t*) bitarray;
1237:sieve_extend.c **** //    for (register int x=0; x<max; ) {
1238:sieve_extend.c **** //        register bitvector_t mask = {};
1239:sieve_extend.c **** //        register counter_t index_vector = vectorstart(x);
1240:sieve_extend.c **** //        register counter_t index_word = wordindex(x);
1241:sieve_extend.c **** //        register word = wordindex(x);
1242:sieve_extend.c **** //        #pragma GCC ivdep
1243:sieve_extend.c **** //        do {
1244:sieve_extend.c **** //            mask[word[] |= markmask(x);
1245:sieve_extend.c **** //            x++;
1246:sieve_extend.c **** //            word =
1247:sieve_extend.c **** //        } while(wordstart(x)==index_word);
1248:sieve_extend.c **** //        bitvector[wordindex(index_word)] = mask;
1249:sieve_extend.c **** //    }
1250:sieve_extend.c **** //}
1251:sieve_extend.c **** 
1252:sieve_extend.c **** int main(int argc, char *argv[]) {
 15105              		.loc 1 1252 34 is_stmt 1 view -0
 15106              		.cfi_startproc
 15107              		.loc 1 1252 34 is_stmt 0 view .LVU5010
 15108 0000 F30F1EFA 		endbr64	
 15109 0004 4157     		push	r15	#
 15110              		.cfi_def_cfa_offset 16
 15111              		.cfi_offset 15, -16
 15112 0006 4156     		push	r14	#
 15113              		.cfi_def_cfa_offset 24
 15114              		.cfi_offset 14, -24
 15115 0008 4155     		push	r13	#
 15116              		.cfi_def_cfa_offset 32
 15117              		.cfi_offset 13, -32
 15118 000a 4154     		push	r12	#
 15119              		.cfi_def_cfa_offset 40
 15120              		.cfi_offset 12, -40
 15121 000c 55       		push	rbp	#
GAS LISTING /tmp/cclewcPz.s 			page 402


 15122              		.cfi_def_cfa_offset 48
 15123              		.cfi_offset 6, -48
 15124 000d 53       		push	rbx	#
 15125              		.cfi_def_cfa_offset 56
 15126              		.cfi_offset 3, -56
 15127 000e 488DA424 		lea	rsp, -248[rsp]	#,
 15127      08FFFFFF 
 15128              		.cfi_def_cfa_offset 304
 15129              	# sieve_extend.c:1252: int main(int argc, char *argv[]) {
 15130              		.loc 1 1252 34 view .LVU5011
 15131 0016 64488B04 		mov	rax, QWORD PTR fs:40	# tmp571, MEM[(<address-space-1> long unsigned int *)40B]
 15131      25280000 
 15131      00
 15132 001f 48898424 		mov	QWORD PTR 232[rsp], rax	# D.7424, tmp571
 15132      E8000000 
 15133 0027 31C0     		xor	eax, eax	# tmp571
1253:sieve_extend.c ****     
1254:sieve_extend.c ****     // struct sieve_state* sieve_instance = sieve(1000000, default_blocksize);
1255:sieve_extend.c ****     // int passes1 = benchmark(1, test , sieve_instance->bitarray, 500000);
1256:sieve_extend.c ****     // int passes2 = benchmark(1, test2, sieve_instance->bitarray, 500000);
1257:sieve_extend.c ****     // int passes3 = benchmark(1, test3, sieve_instance->bitarray, 500000);
1258:sieve_extend.c ****     // delete_sieve(sieve_instance);
1259:sieve_extend.c ****     // printf("Passes1:"); printfcomma2(passes1);printf("\n");
1260:sieve_extend.c ****     // printf("Passes2:"); printfcomma2(passes2);printf("\n");
1261:sieve_extend.c ****     // printf("Passes3:"); printfcomma2(passes3);printf("\n");
1262:sieve_extend.c ****     // exit(0);
1263:sieve_extend.c ****     
1264:sieve_extend.c ****     
1265:sieve_extend.c ****     counter_t option_maxFactor  = default_sieve_limit;
 15134              		.loc 1 1265 5 is_stmt 1 view .LVU5012
 15135              	# sieve_extend.c:1265:     counter_t option_maxFactor  = default_sieve_limit;
 15136              		.loc 1 1265 15 is_stmt 0 view .LVU5013
 15137 0029 48C78424 		mov	QWORD PTR 176[rsp], 1000000	# option_maxFactor,
 15137      B0000000 
 15137      40420F00 
1266:sieve_extend.c ****     counter_t option_showMaxFactor = default_showMaxFactor;
 15138              		.loc 1 1266 5 is_stmt 1 view .LVU5014
 15139              	.LBB1024:
 15140              	# sieve_extend.c:1271:     for (int arg=1; arg < argc; arg++) {
1267:sieve_extend.c ****     int option_verboselevel = default_verbose_level;
1268:sieve_extend.c ****     int option_check = default_check_level;
1269:sieve_extend.c ****     int option_tunelevel = default_tune_level;
1270:sieve_extend.c **** 
1271:sieve_extend.c ****     for (int arg=1; arg < argc; arg++) {
 15141              		.loc 1 1271 5 is_stmt 0 view .LVU5015
 15142 0035 83FF01   		cmp	edi, 1	# argc,
 15143              	.LBE1024:
 15144              	# sieve_extend.c:1266:     counter_t option_showMaxFactor = default_showMaxFactor;
1266:sieve_extend.c ****     counter_t option_showMaxFactor = default_showMaxFactor;
 15145              		.loc 1 1266 15 view .LVU5016
 15146 0038 48C78424 		mov	QWORD PTR 184[rsp], 0	# option_showMaxFactor,
 15146      B8000000 
 15146      00000000 
1267:sieve_extend.c ****     int option_verboselevel = default_verbose_level;
 15147              		.loc 1 1267 5 is_stmt 1 view .LVU5017
 15148              	# sieve_extend.c:1267:     int option_verboselevel = default_verbose_level;
1267:sieve_extend.c ****     int option_verboselevel = default_verbose_level;
GAS LISTING /tmp/cclewcPz.s 			page 403


 15149              		.loc 1 1267 9 is_stmt 0 view .LVU5018
 15150 0044 C78424A8 		mov	DWORD PTR 168[rsp], 2	# option_verboselevel,
 15150      00000002 
 15150      000000
1268:sieve_extend.c ****     int option_tunelevel = default_tune_level;
 15151              		.loc 1 1268 5 is_stmt 1 view .LVU5019
 15152              	.LVL937:
1269:sieve_extend.c **** 
 15153              		.loc 1 1269 5 view .LVU5020
 15154              	# sieve_extend.c:1269:     int option_tunelevel = default_tune_level;
1269:sieve_extend.c **** 
 15155              		.loc 1 1269 9 is_stmt 0 view .LVU5021
 15156 004f C78424AC 		mov	DWORD PTR 172[rsp], 2	# option_tunelevel,
 15156      00000002 
 15156      000000
 15157              		.loc 1 1271 5 is_stmt 1 view .LVU5022
 15158              	.LBB1049:
 15159              		.loc 1 1271 10 view .LVU5023
 15160              	.LVL938:
 15161              		.loc 1 1271 21 view .LVU5024
 15162              	# sieve_extend.c:1271:     for (int arg=1; arg < argc; arg++) {
 15163              		.loc 1 1271 5 is_stmt 0 view .LVU5025
 15164 005a 0F8E2C05 		jle	.L1256	#,
 15164      0000
 15165 0060 89FD     		mov	ebp, edi	# argc, tmp527
 15166 0062 4989F4   		mov	r12, rsi	# argv, tmp528
 15167              	# sieve_extend.c:1271:     for (int arg=1; arg < argc; arg++) {
 15168              		.loc 1 1271 14 view .LVU5026
 15169 0065 BB010000 		mov	ebx, 1	# arg,
 15169      00
 15170 006a 4C8D2D00 		lea	r13, .LC30[rip]	# tmp467,
 15170      000000
 15171              	# sieve_extend.c:1273:         else if (strcmp(argv[arg], "--verbose")==0) {
1272:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1273:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15172              		.loc 1 1273 18 view .LVU5027
 15173 0071 4C8D3500 		lea	r14, .LC31[rip]	# tmp482,
 15173      000000
 15174 0078 EB66     		jmp	.L1239	#
 15175              	.LVL939:
 15176 007a 660F1F44 		.p2align 4,,7
 15176      0000
 15177              		.p2align 3
 15178              	.L1375:
1274:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No verbose level specified\n"); usage(argv[0]); }
 15179              		.loc 1 1274 13 is_stmt 1 view .LVU5028
 15180              	# sieve_extend.c:1274:             if (++arg >= argc) { fprintf(stderr, "No verbose level specified
 15181              		.loc 1 1274 16 is_stmt 0 view .LVU5029
 15182 0080 83C301   		add	ebx, 1	# arg,
 15183              	.LVL940:
 15184              		.loc 1 1274 16 view .LVU5030
 15185 0083 39DD     		cmp	ebp, ebx	# argc, arg
 15186 0085 0F8E2B0F 		jle	.L1373	#,
 15186      0000
1275:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option_verboselevel > 4) {
 15187              		.loc 1 1275 13 is_stmt 1 view .LVU5031
 15188              	# sieve_extend.c:1275:             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option
GAS LISTING /tmp/cclewcPz.s 			page 404


 15189              		.loc 1 1275 28 is_stmt 0 view .LVU5032
 15190 008b 4D8D7C04 		lea	r15, 8[r12+rax]	# _16,
 15190      08
 15191              	# sieve_extend.c:1275:             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option
 15192              		.loc 1 1275 17 view .LVU5033
 15193 0090 488D9424 		lea	rdx, 168[rsp]	# tmp303,
 15193      A8000000 
 15194 0098 498B3F   		mov	rdi, QWORD PTR [r15]	#, *_16
 15195 009b 31C0     		xor	eax, eax	#
 15196 009d 488D3500 		lea	rsi, .LC26[rip]	#,
 15196      000000
 15197 00a4 E8000000 		call	__isoc99_sscanf@PLT	#
 15197      00
 15198              	.LVL941:
 15199              	# sieve_extend.c:1275:             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option
 15200              		.loc 1 1275 16 view .LVU5034
 15201 00a9 83F801   		cmp	eax, 1	# tmp529,
 15202 00ac 0F850C05 		jne	.L1245	#,
 15202      0000
 15203              	# sieve_extend.c:1275:             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option
 15204              		.loc 1 1275 91 discriminator 1 view .LVU5035
 15205 00b2 8B9424A8 		mov	edx, DWORD PTR 168[rsp]	# option_verboselevel.16_19, option_verboselevel
 15205      000000
 15206              	# sieve_extend.c:1275:             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option
 15207              		.loc 1 1275 68 discriminator 1 view .LVU5036
 15208 00b9 83FA04   		cmp	edx, 4	# option_verboselevel.16_19,
 15209 00bc 0F8FFC04 		jg	.L1245	#,
 15209      0000
1276:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid measurement time: %s\n", argv[arg]); usage(argv[0])
1277:sieve_extend.c ****             }
1278:sieve_extend.c ****             printf("Verbose level set to %d\n",option_verboselevel);
 15210              		.loc 1 1278 13 is_stmt 1 view .LVU5037
 15211              	.LVL942:
 15212              	.LBB1025:
 15213              	.LBI1025:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15214              		.loc 3 105 1 view .LVU5038
 15215              	.LBB1026:
 15216              		.loc 3 107 3 view .LVU5039
 15217              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15218              		.loc 3 107 10 is_stmt 0 view .LVU5040
 15219 00c2 488D3500 		lea	rsi, .LC34[rip]	#,
 15219      000000
 15220 00c9 BF010000 		mov	edi, 1	#,
 15220      00
 15221 00ce 31C0     		xor	eax, eax	#
 15222 00d0 E8000000 		call	__printf_chk@PLT	#
 15222      00
 15223              	.LVL943:
 15224              	.L1247:
 15225              		.loc 3 107 10 view .LVU5041
 15226              	.LBE1026:
 15227              	.LBE1025:
1271:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15228              		.loc 1 1271 33 is_stmt 1 discriminator 2 view .LVU5042
 15229              	# sieve_extend.c:1271:     for (int arg=1; arg < argc; arg++) {
1271:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
GAS LISTING /tmp/cclewcPz.s 			page 405


 15230              		.loc 1 1271 36 is_stmt 0 discriminator 2 view .LVU5043
 15231 00d5 83C301   		add	ebx, 1	# arg,
 15232              	.LVL944:
1271:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15233              		.loc 1 1271 21 is_stmt 1 discriminator 2 view .LVU5044
 15234              	# sieve_extend.c:1271:     for (int arg=1; arg < argc; arg++) {
1271:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15235              		.loc 1 1271 5 is_stmt 0 discriminator 2 view .LVU5045
 15236 00d8 39DD     		cmp	ebp, ebx	# argc, arg
 15237 00da 0F8E0001 		jle	.L1374	#,
 15237      0000
 15238              	.LVL945:
 15239              	.L1239:
1272:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15240              		.loc 1 1272 9 is_stmt 1 view .LVU5046
 15241              	# sieve_extend.c:1272:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1272:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15242              		.loc 1 1272 24 is_stmt 0 view .LVU5047
 15243 00e0 4863C3   		movsx	rax, ebx	# arg, arg
 15244              	# sieve_extend.c:1272:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1272:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15245              		.loc 1 1272 13 view .LVU5048
 15246 00e3 41B90700 		mov	r9d, 7	# tmp292,
 15246      0000
 15247              	# sieve_extend.c:1272:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1272:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15248              		.loc 1 1272 24 view .LVU5049
 15249 00e9 48C1E003 		sal	rax, 3	# _2,
 15250              	# sieve_extend.c:1272:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1272:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15251              		.loc 1 1272 13 view .LVU5050
 15252 00ed 4C89EF   		mov	rdi, r13	# tmp291, tmp467
 15253              	# sieve_extend.c:1272:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1272:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15254              		.loc 1 1272 24 view .LVU5051
 15255 00f0 4D8D3C04 		lea	r15, [r12+rax]	# _3,
 15256              	# sieve_extend.c:1272:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1272:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15257              		.loc 1 1272 13 view .LVU5052
 15258 00f4 4C89C9   		mov	rcx, r9	# tmp493, tmp292
 15259 00f7 4D8B07   		mov	r8, QWORD PTR [r15]	# _4, *_3
 15260 00fa 4C89C6   		mov	rsi, r8	# _4, _4
 15261 00fd F3A6     		repz cmpsb
 15262 00ff 0F97C2   		seta	dl	#, tmp293
 15263 0102 80DA00   		sbb	dl, 0	# _5
 15264              	# sieve_extend.c:1272:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1272:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 15265              		.loc 1 1272 12 view .LVU5053
 15266 0105 84D2     		test	dl, dl	# _5
 15267 0107 0F84CE04 		je	.L1371	#,
 15267      0000
1273:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No verbose level specified\n"); usage(argv[0]); }
 15268              		.loc 1 1273 14 is_stmt 1 view .LVU5054
 15269              	# sieve_extend.c:1273:         else if (strcmp(argv[arg], "--verbose")==0) {
1273:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No verbose level specified\n"); usage(argv[0]); }
 15270              		.loc 1 1273 18 is_stmt 0 view .LVU5055
 15271 010d B90A0000 		mov	ecx, 10	# tmp298,
GAS LISTING /tmp/cclewcPz.s 			page 406


 15271      00
 15272 0112 4C89C6   		mov	rsi, r8	# _4, _4
 15273 0115 4C89F7   		mov	rdi, r14	# tmp297, tmp482
 15274 0118 F3A6     		repz cmpsb
 15275 011a 410F97C2 		seta	r10b	#, tmp299
 15276 011e 4180DA00 		sbb	r10b, 0	# _11
 15277              	# sieve_extend.c:1273:         else if (strcmp(argv[arg], "--verbose")==0) {
1273:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No verbose level specified\n"); usage(argv[0]); }
 15278              		.loc 1 1273 17 view .LVU5056
 15279 0122 4584D2   		test	r10b, r10b	# _11
 15280 0125 0F8455FF 		je	.L1375	#,
 15280      FFFF
1279:sieve_extend.c ****         } 
1280:sieve_extend.c ****         else if (strcmp(argv[arg], "--check")==0) { option_check=1; }
 15281              		.loc 1 1280 14 is_stmt 1 view .LVU5057
 15282              	# sieve_extend.c:1280:         else if (strcmp(argv[arg], "--check")==0) { option_check=1; }
 15283              		.loc 1 1280 18 is_stmt 0 view .LVU5058
 15284 012b B9080000 		mov	ecx, 8	# tmp308,
 15284      00
 15285 0130 4C89C6   		mov	rsi, r8	# _4, _4
 15286 0133 488D3D00 		lea	rdi, .LC35[rip]	# tmp307,
 15286      000000
 15287 013a F3A6     		repz cmpsb
 15288 013c 410F97C3 		seta	r11b	#, tmp309
 15289 0140 4180DB00 		sbb	r11b, 0	# _23
 15290              	# sieve_extend.c:1280:         else if (strcmp(argv[arg], "--check")==0) { option_check=1; }
 15291              		.loc 1 1280 17 view .LVU5059
 15292 0144 4584DB   		test	r11b, r11b	# _23
 15293 0147 748C     		je	.L1247	#,
1281:sieve_extend.c ****         else if (strcmp(argv[arg], "--tune")==0) { option_tunelevel=0;
 15294              		.loc 1 1281 14 is_stmt 1 view .LVU5060
 15295              	# sieve_extend.c:1281:         else if (strcmp(argv[arg], "--tune")==0) { option_tunelevel=0;
 15296              		.loc 1 1281 18 is_stmt 0 view .LVU5061
 15297 0149 4C89C6   		mov	rsi, r8	# _4, _4
 15298 014c 488D3D00 		lea	rdi, .LC36[rip]	# tmp313,
 15298      000000
 15299 0153 4C89C9   		mov	rcx, r9	# tmp499, tmp292
 15300 0156 F3A6     		repz cmpsb
 15301 0158 0F97C2   		seta	dl	#, tmp315
 15302 015b 80DA00   		sbb	dl, 0	# _24
 15303              	# sieve_extend.c:1281:         else if (strcmp(argv[arg], "--tune")==0) { option_tunelevel=0;
 15304              		.loc 1 1281 17 view .LVU5062
 15305 015e 84D2     		test	dl, dl	# _24
 15306 0160 0F855A01 		jne	.L1248	#,
 15306      0000
 15307              		.loc 1 1281 52 is_stmt 1 discriminator 1 view .LVU5063
 15308              	# sieve_extend.c:1281:         else if (strcmp(argv[arg], "--tune")==0) { option_tunelevel=0;
 15309              		.loc 1 1281 68 is_stmt 0 discriminator 1 view .LVU5064
 15310 0166 C78424AC 		mov	DWORD PTR 172[rsp], 0	# option_tunelevel,
 15310      00000000 
 15310      000000
1282:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No tune level specified\n"); usage(argv[0]); }
 15311              		.loc 1 1282 13 is_stmt 1 discriminator 1 view .LVU5065
 15312              	# sieve_extend.c:1282:             if (++arg >= argc) { fprintf(stderr, "No tune level specified\n"
 15313              		.loc 1 1282 16 is_stmt 0 discriminator 1 view .LVU5066
 15314 0171 83C301   		add	ebx, 1	# arg,
 15315              	.LVL946:
GAS LISTING /tmp/cclewcPz.s 			page 407


 15316              		.loc 1 1282 16 discriminator 1 view .LVU5067
 15317 0174 39DD     		cmp	ebp, ebx	# argc, arg
 15318 0176 0F8E7A0E 		jle	.L1376	#,
 15318      0000
1283:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tunelevel > 4) {
 15319              		.loc 1 1283 13 is_stmt 1 view .LVU5068
 15320              	# sieve_extend.c:1283:             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tu
 15321              		.loc 1 1283 28 is_stmt 0 view .LVU5069
 15322 017c 4D8D7C04 		lea	r15, 8[r12+rax]	# _29,
 15322      08
 15323              	# sieve_extend.c:1283:             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tu
 15324              		.loc 1 1283 17 view .LVU5070
 15325 0181 488D9424 		lea	rdx, 172[rsp]	# tmp319,
 15325      AC000000 
 15326 0189 498B3F   		mov	rdi, QWORD PTR [r15]	#, *_29
 15327 018c 31C0     		xor	eax, eax	#
 15328 018e 488D3500 		lea	rsi, .LC26[rip]	#,
 15328      000000
 15329 0195 E8000000 		call	__isoc99_sscanf@PLT	#
 15329      00
 15330              	.LVL947:
 15331              	# sieve_extend.c:1283:             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tu
 15332              		.loc 1 1283 16 view .LVU5071
 15333 019a 83F801   		cmp	eax, 1	# tmp530,
 15334 019d 0F85350E 		jne	.L1250	#,
 15334      0000
 15335              	# sieve_extend.c:1283:             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tu
 15336              		.loc 1 1283 85 discriminator 1 view .LVU5072
 15337 01a3 8B9424AC 		mov	edx, DWORD PTR 172[rsp]	# option_tunelevel.20_32, option_tunelevel
 15337      000000
 15338              	# sieve_extend.c:1283:             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tu
 15339              		.loc 1 1283 65 discriminator 1 view .LVU5073
 15340 01aa 83FA04   		cmp	edx, 4	# option_tunelevel.20_32,
 15341 01ad 0F8F250E 		jg	.L1250	#,
 15341      0000
1284:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid tune level: %s\n", argv[arg]); usage(argv[0]);
1285:sieve_extend.c ****             }
1286:sieve_extend.c ****             printf("Tune level set to %d\n",option_tunelevel);
 15342              		.loc 1 1286 13 is_stmt 1 view .LVU5074
 15343              	.LVL948:
 15344              	.LBB1027:
 15345              	.LBI1027:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15346              		.loc 3 105 1 view .LVU5075
 15347              	.LBB1028:
 15348              		.loc 3 107 3 view .LVU5076
 15349              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15350              		.loc 3 107 10 is_stmt 0 view .LVU5077
 15351 01b3 31C0     		xor	eax, eax	#
 15352 01b5 488D3500 		lea	rsi, .LC39[rip]	#,
 15352      000000
 15353 01bc BF010000 		mov	edi, 1	#,
 15353      00
 15354              	.LBE1028:
 15355              	.LBE1027:
 15356              	# sieve_extend.c:1271:     for (int arg=1; arg < argc; arg++) {
1271:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
GAS LISTING /tmp/cclewcPz.s 			page 408


 15357              		.loc 1 1271 36 view .LVU5078
 15358 01c1 83C301   		add	ebx, 1	# arg,
 15359              	.LVL949:
 15360              	.LBB1030:
 15361              	.LBB1029:
 15362              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15363              		.loc 3 107 10 view .LVU5079
 15364 01c4 E8000000 		call	__printf_chk@PLT	#
 15364      00
 15365              	.LVL950:
 15366              		.loc 3 107 10 view .LVU5080
 15367              	.LBE1029:
 15368              	.LBE1030:
1271:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15369              		.loc 1 1271 33 is_stmt 1 view .LVU5081
1271:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15370              		.loc 1 1271 21 view .LVU5082
 15371              	# sieve_extend.c:1271:     for (int arg=1; arg < argc; arg++) {
1271:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15372              		.loc 1 1271 5 is_stmt 0 view .LVU5083
 15373 01c9 39DD     		cmp	ebp, ebx	# argc, arg
 15374 01cb 0F8F0FFF 		jg	.L1239	#,
 15374      FFFF
 15375 01d1 66662E0F 		.p2align 4
 15375      1F840000 
 15375      0000000F 
 15375      1F4000
 15376              		.p2align 3
 15377              	.L1374:
1271:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15378              		.loc 1 1271 5 view .LVU5084
 15379              	.LBE1049:
1287:sieve_extend.c ****         }
1288:sieve_extend.c ****         else if (strcmp(argv[arg], "--show")==0) { option_showMaxFactor=0;
1289:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
1290:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
1291:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
1292:sieve_extend.c ****             }
1293:sieve_extend.c ****             printf("Show maximum set to %ju\n",(uintmax_t)option_showMaxFactor);
1294:sieve_extend.c ****         }
1295:sieve_extend.c ****         else if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_maxFactor) != 1) {
1296:sieve_extend.c ****             fprintf(stderr, "Invalid size %s\n",argv[arg]); usage(argv[0]); 
1297:sieve_extend.c ****             printf("Maximum set to %ju\n",(uintmax_t)option_maxFactor);
1298:sieve_extend.c ****         }
1299:sieve_extend.c ****     }
1300:sieve_extend.c **** 
1301:sieve_extend.c ****     if (option_runonce) { // used for stats and debugging
 15380              		.loc 1 1301 5 is_stmt 1 view .LVU5085
1302:sieve_extend.c ****         struct sieve_state* sieve_instance = sieve(option_maxFactor, default_blocksize);
1303:sieve_extend.c ****         printf("\nResult set:\n");
1304:sieve_extend.c ****         show_primes(sieve_instance, option_showMaxFactor);
1305:sieve_extend.c ****         int valid = validatePrimeCount(sieve_instance,3);
1306:sieve_extend.c ****         if (!valid) printf("The sieve is NOT valid\n");
1307:sieve_extend.c ****         else printf("The sieve is VALID\n");
1308:sieve_extend.c ****         delete_sieve(sieve_instance);
1309:sieve_extend.c ****         exit(0);
1310:sieve_extend.c ****     }
GAS LISTING /tmp/cclewcPz.s 			page 409


1311:sieve_extend.c **** 
1312:sieve_extend.c ****     struct timespec start_time,end_time;
 15381              		.loc 1 1312 5 view .LVU5086
1313:sieve_extend.c **** 
1314:sieve_extend.c ****     if (option_verboselevel >=1) {
 15382              		.loc 1 1314 5 view .LVU5087
 15383              	# sieve_extend.c:1314:     if (option_verboselevel >=1) {
 15384              		.loc 1 1314 8 is_stmt 0 view .LVU5088
 15385 01e0 8BAC24A8 		mov	ebp, DWORD PTR 168[rsp]	#, option_verboselevel
 15385      000000
 15386              	.LVL951:
 15387              		.loc 1 1314 8 view .LVU5089
 15388 01e7 85ED     		test	ebp, ebp	#
 15389 01e9 0F8F9D03 		jg	.L1256	#,
 15389      0000
 15390              	.LVL952:
 15391              	.L1257:
1315:sieve_extend.c ****         #if __APPLE__
1316:sieve_extend.c ****             printf("Apple detected. Using arrays instead of pointers\n");
1317:sieve_extend.c ****         #else
1318:sieve_extend.c ****             printf("Using Pointers\n");
1319:sieve_extend.c ****         #endif
1320:sieve_extend.c ****     }
1321:sieve_extend.c ****         
1322:sieve_extend.c ****     if (option_check) {
1323:sieve_extend.c ****         // Count the number of primes and validate the result
1324:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Validating... ");
1325:sieve_extend.c ****         if (option_verboselevel >= 2) printf("\n");
 15392              		.loc 1 1325 9 is_stmt 1 view .LVU5090
 15393              	# sieve_extend.c:1325:         if (option_verboselevel >= 2) printf("\n");
 15394              		.loc 1 1325 12 is_stmt 0 view .LVU5091
 15395 01ef 83BC24A8 		cmp	DWORD PTR 168[rsp], 1	# option_verboselevel,
 15395      00000001 
 15396 01f7 7E0A     		jle	.L1258	#,
 15397              		.loc 1 1325 39 is_stmt 1 view .LVU5092
 15398              	.LVL953:
 15399              	.LBB1050:
 15400              	.LBI1050:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15401              		.loc 3 105 1 view .LVU5093
 15402              	.LBB1051:
 15403              		.loc 3 107 3 view .LVU5094
 15404              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15405              		.loc 3 107 10 is_stmt 0 view .LVU5095
 15406 01f9 BF0A0000 		mov	edi, 10	#,
 15406      00
 15407 01fe E8000000 		call	putchar@PLT	#
 15407      00
 15408              	.LVL954:
 15409              	.L1258:
 15410              		.loc 3 107 10 view .LVU5096
 15411              	.LBE1051:
 15412              	.LBE1050:
 15413              	.LBB1052:
 15414              	# sieve_extend.c:1271:     for (int arg=1; arg < argc; arg++) {
1271:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15415              		.loc 1 1271 14 view .LVU5097
GAS LISTING /tmp/cclewcPz.s 			page 410


 15416 0203 C7442428 		mov	DWORD PTR 40[rsp], 7	# %sfp,
 15416      07000000 
 15417 020b 41BD6400 		mov	r13d, 100	# sieveSize_check,
 15417      0000
 15418              	.LBE1052:
 15419              	.LBB1053:
 15420              	.LBB1054:
 15421              	.LBB1055:
 15422              	.LBB1056:
 15423              	.LBB1057:
 15424              	.LBB1058:
 15425              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15426              		.loc 3 107 10 view .LVU5098
 15427 0211 4C8D3500 		lea	r14, .LC48[rip]	# tmp481,
 15427      000000
 15428              	.L1265:
 15429              	.LVL955:
 15430              		.loc 3 107 10 view .LVU5099
 15431              	.LBE1058:
 15432              	.LBE1057:
 15433              	.LBE1056:
 15434              	.LBE1055:
1326:sieve_extend.c **** 
1327:sieve_extend.c ****         // validate algorithm - run one time for all sizes
1328:sieve_extend.c ****         for (counter_t sieveSize_check = 100; sieveSize_check <= 100000000; sieveSize_check *=10) {
1329:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 15435              		.loc 1 1329 13 is_stmt 1 view .LVU5100
 15436              	# sieve_extend.c:1329:             if (option_verboselevel >= 2) printf("...Checking size %ju ...",
 15437              		.loc 1 1329 37 is_stmt 0 view .LVU5101
 15438 0218 8B8424A8 		mov	eax, DWORD PTR 168[rsp]	# prephitmp_67, option_verboselevel
 15438      000000
 15439              	# sieve_extend.c:1329:             if (option_verboselevel >= 2) printf("...Checking size %ju ...",
 15440              		.loc 1 1329 16 view .LVU5102
 15441 021f 83F801   		cmp	eax, 1	# prephitmp_67,
 15442 0222 7E1D     		jle	.L1259	#,
 15443              		.loc 1 1329 43 is_stmt 1 view .LVU5103
 15444              	.LVL956:
 15445              	.LBB1074:
 15446              	.LBI1074:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15447              		.loc 3 105 1 view .LVU5104
 15448              	.LBB1075:
 15449              		.loc 3 107 3 view .LVU5105
 15450              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15451              		.loc 3 107 10 is_stmt 0 view .LVU5106
 15452 0224 4C89EA   		mov	rdx, r13	#, sieveSize_check
 15453 0227 488D3500 		lea	rsi, .LC47[rip]	#,
 15453      000000
 15454 022e BF010000 		mov	edi, 1	#,
 15454      00
 15455 0233 31C0     		xor	eax, eax	#
 15456 0235 E8000000 		call	__printf_chk@PLT	#
 15456      00
 15457              	.LVL957:
 15458 023a 8B8424A8 		mov	eax, DWORD PTR 168[rsp]	# prephitmp_67, option_verboselevel
 15458      000000
 15459              	.LVL958:
GAS LISTING /tmp/cclewcPz.s 			page 411


 15460              	.L1259:
 15461              		.loc 3 107 10 view .LVU5107
 15462              	.LBE1075:
 15463              	.LBE1074:
 15464              	.LBE1054:
 15465              	.LBE1053:
 15466              	.LBB1084:
 15467              	# sieve_extend.c:1271:     for (int arg=1; arg < argc; arg++) {
1271:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15468              		.loc 1 1271 14 view .LVU5108
 15469 0241 41BC0500 		mov	r12d, 5	# ivtmp_69,
 15469      0000
 15470 0247 BD000400 		mov	ebp, 1024	# blocksize_bits,
 15470      00
 15471 024c EB56     		jmp	.L1263	#
 15472              	.LVL959:
 15473 024e 6690     		.p2align 4,,7
 15474              		.p2align 3
 15475              	.L1260:
1271:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 15476              		.loc 1 1271 14 view .LVU5109
 15477              	.LBE1084:
 15478              	.LBB1085:
 15479              	.LBB1081:
 15480              	.LBB1076:
 15481              	.LBB1069:
1330:sieve_extend.c ****             struct sieve_state *sieve_instance_check;
1331:sieve_extend.c ****             for (counter_t blocksize_bits=1024; blocksize_bits<=2*1024*8; blocksize_bits *= 2) {
1332:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
1333:sieve_extend.c ****                 sieve_instance_check = sieve(sieveSize_check, blocksize_bits);
 15482              		.loc 1 1333 17 is_stmt 1 view .LVU5110
 15483              	# sieve_extend.c:1333:                 sieve_instance_check = sieve(sieveSize_check, blocksize_bits
 15484              		.loc 1 1333 40 is_stmt 0 view .LVU5111
 15485 0250 4889EE   		mov	rsi, rbp	#, blocksize_bits
 15486 0253 4C89EF   		mov	rdi, r13	#, sieveSize_check
 15487 0256 E8000000 		call	sieve	#
 15487      00
 15488              	.LVL960:
 15489              	# sieve_extend.c:1334:                 int valid = validatePrimeCount(sieve_instance_check,option_v
1334:sieve_extend.c ****                 int valid = validatePrimeCount(sieve_instance_check,option_verboselevel);
 15490              		.loc 1 1334 29 view .LVU5112
 15491 025b 8BB424A8 		mov	esi, DWORD PTR 168[rsp]	#, option_verboselevel
 15491      000000
 15492              	# sieve_extend.c:1333:                 sieve_instance_check = sieve(sieveSize_check, blocksize_bits
1333:sieve_extend.c ****                 int valid = validatePrimeCount(sieve_instance_check,option_verboselevel);
 15493              		.loc 1 1333 40 view .LVU5113
 15494 0262 4989C7   		mov	r15, rax	# sieve_instance_check, tmp533
 15495              	.LVL961:
 15496              		.loc 1 1334 17 is_stmt 1 view .LVU5114
 15497              	# sieve_extend.c:1334:                 int valid = validatePrimeCount(sieve_instance_check,option_v
 15498              		.loc 1 1334 29 is_stmt 0 view .LVU5115
 15499 0265 4889C7   		mov	rdi, rax	#, sieve_instance_check
 15500 0268 E8000000 		call	validatePrimeCount	#
 15500      00
 15501              	.LVL962:
 15502              	.LBB1060:
 15503              	.LBB1061:
GAS LISTING /tmp/cclewcPz.s 			page 412


 15504              	# sieve_extend.c:118:     free(sieve->bitarray);
 118:sieve_extend.c ****     free(sieve);
 15505              		.loc 1 118 5 view .LVU5116
 15506 026d 498B3F   		mov	rdi, QWORD PTR [r15]	#, sieve_instance_check_130->bitarray
 15507              	.LBE1061:
 15508              	.LBE1060:
 15509              	# sieve_extend.c:1334:                 int valid = validatePrimeCount(sieve_instance_check,option_v
 15510              		.loc 1 1334 29 view .LVU5117
 15511 0270 89C3     		mov	ebx, eax	# valid, tmp534
 15512              	.LVL963:
1335:sieve_extend.c ****                 delete_sieve(sieve_instance_check);
 15513              		.loc 1 1335 17 is_stmt 1 view .LVU5118
 15514              	.LBB1063:
 15515              	.LBI1060:
 117:sieve_extend.c ****     free(sieve->bitarray);
 15516              		.loc 1 117 13 view .LVU5119
 15517              	.LBB1062:
 118:sieve_extend.c ****     free(sieve);
 15518              		.loc 1 118 5 view .LVU5120
 15519 0272 E8000000 		call	free@PLT	#
 15519      00
 15520              	.LVL964:
 119:sieve_extend.c **** }
 15521              		.loc 1 119 5 view .LVU5121
 15522 0277 4C89FF   		mov	rdi, r15	#, sieve_instance_check
 15523 027a E8000000 		call	free@PLT	#
 15523      00
 15524              	.LVL965:
 119:sieve_extend.c **** }
 15525              		.loc 1 119 5 is_stmt 0 view .LVU5122
 15526              	.LBE1062:
 15527              	.LBE1063:
1336:sieve_extend.c ****                 if (!valid) return 0; else if (option_verboselevel >= 3) printf("valid;");
 15528              		.loc 1 1336 17 is_stmt 1 view .LVU5123
 15529              	# sieve_extend.c:1336:                 if (!valid) return 0; else if (option_verboselevel >= 3) pri
 15530              		.loc 1 1336 20 is_stmt 0 view .LVU5124
 15531 027f 85DB     		test	ebx, ebx	# valid
 15532 0281 0F84D902 		je	.L1301	#,
 15532      0000
 15533              		.loc 1 1336 44 is_stmt 1 discriminator 2 view .LVU5125
 15534              	# sieve_extend.c:1336:                 if (!valid) return 0; else if (option_verboselevel >= 3) pri
 15535              		.loc 1 1336 68 is_stmt 0 discriminator 2 view .LVU5126
 15536 0287 8B8424A8 		mov	eax, DWORD PTR 168[rsp]	# prephitmp_67, option_verboselevel
 15536      000000
 15537              	# sieve_extend.c:1336:                 if (!valid) return 0; else if (option_verboselevel >= 3) pri
 15538              		.loc 1 1336 47 discriminator 2 view .LVU5127
 15539 028e 83F802   		cmp	eax, 2	# prephitmp_67,
 15540 0291 0F8FE900 		jg	.L1377	#,
 15540      0000
 15541              	.LBE1069:
1331:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15542              		.loc 1 1331 75 is_stmt 1 discriminator 2 view .LVU5128
 15543              	# sieve_extend.c:1331:             for (counter_t blocksize_bits=1024; blocksize_bits<=2*1024*8; bl
1331:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15544              		.loc 1 1331 90 is_stmt 0 discriminator 2 view .LVU5129
 15545 0297 4801ED   		add	rbp, rbp	# blocksize_bits
 15546              	.LVL966:
GAS LISTING /tmp/cclewcPz.s 			page 413


1331:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15547              		.loc 1 1331 49 is_stmt 1 discriminator 2 view .LVU5130
 15548              	# sieve_extend.c:1331:             for (counter_t blocksize_bits=1024; blocksize_bits<=2*1024*8; bl
1331:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15549              		.loc 1 1331 13 is_stmt 0 discriminator 2 view .LVU5131
 15550 029a 4183EC01 		sub	r12d, 1	# ivtmp_69,
 15551 029e 0F840301 		je	.L1378	#,
 15551      0000
 15552              	.LVL967:
 15553              	.L1263:
 15554              	.LBB1070:
1332:sieve_extend.c ****                 sieve_instance_check = sieve(sieveSize_check, blocksize_bits);
 15555              		.loc 1 1332 17 is_stmt 1 view .LVU5132
 15556              	# sieve_extend.c:1332:                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uint
1332:sieve_extend.c ****                 sieve_instance_check = sieve(sieveSize_check, blocksize_bits);
 15557              		.loc 1 1332 20 is_stmt 0 view .LVU5133
 15558 02a4 83F802   		cmp	eax, 2	# prephitmp_67,
 15559 02a7 7EA7     		jle	.L1260	#,
1332:sieve_extend.c ****                 sieve_instance_check = sieve(sieveSize_check, blocksize_bits);
 15560              		.loc 1 1332 47 is_stmt 1 view .LVU5134
 15561              	.LVL968:
 15562              	.LBB1064:
 15563              	.LBI1057:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15564              		.loc 3 105 1 view .LVU5135
 15565              	.LBB1059:
 15566              		.loc 3 107 3 view .LVU5136
 15567              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15568              		.loc 3 107 10 is_stmt 0 view .LVU5137
 15569 02a9 4889EA   		mov	rdx, rbp	#, blocksize_bits
 15570 02ac 4C89F6   		mov	rsi, r14	#, tmp481
 15571 02af BF010000 		mov	edi, 1	#,
 15571      00
 15572 02b4 31C0     		xor	eax, eax	#
 15573 02b6 E8000000 		call	__printf_chk@PLT	#
 15573      00
 15574              	.LVL969:
 15575 02bb EB93     		jmp	.L1260	#
 15576              	.LVL970:
 15577 02bd 0F1F00   		.p2align 4,,7
 15578              		.p2align 3
 15579              	.L1248:
 15580              		.loc 3 107 10 view .LVU5138
 15581              	.LBE1059:
 15582              	.LBE1064:
 15583              	.LBE1070:
 15584              	.LBE1076:
 15585              	.LBE1081:
 15586              	.LBE1085:
 15587              	.LBB1086:
1288:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
 15588              		.loc 1 1288 14 is_stmt 1 view .LVU5139
 15589              	# sieve_extend.c:1288:         else if (strcmp(argv[arg], "--show")==0) { option_showMaxFactor=0;
1288:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
 15590              		.loc 1 1288 18 is_stmt 0 view .LVU5140
 15591 02c0 4C89C9   		mov	rcx, r9	# tmp292, tmp292
 15592 02c3 4C89C6   		mov	rsi, r8	# _4, _4
GAS LISTING /tmp/cclewcPz.s 			page 414


 15593 02c6 488D3D00 		lea	rdi, .LC40[rip]	# tmp323,
 15593      000000
 15594 02cd F3A6     		repz cmpsb
 15595 02cf 410F97C1 		seta	r9b	#, tmp325
 15596 02d3 4180D900 		sbb	r9b, 0	# _36
 15597              	# sieve_extend.c:1288:         else if (strcmp(argv[arg], "--show")==0) { option_showMaxFactor=0;
1288:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
 15598              		.loc 1 1288 17 view .LVU5141
 15599 02d7 4584C9   		test	r9b, r9b	# _36
 15600 02da 756C     		jne	.L1252	#,
1288:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
 15601              		.loc 1 1288 52 is_stmt 1 discriminator 1 view .LVU5142
 15602              	# sieve_extend.c:1288:         else if (strcmp(argv[arg], "--show")==0) { option_showMaxFactor=0;
1288:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
 15603              		.loc 1 1288 72 is_stmt 0 discriminator 1 view .LVU5143
 15604 02dc 48C78424 		mov	QWORD PTR 184[rsp], 0	# option_showMaxFactor,
 15604      B8000000 
 15604      00000000 
1289:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
 15605              		.loc 1 1289 13 is_stmt 1 discriminator 1 view .LVU5144
 15606              	# sieve_extend.c:1289:             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\
1289:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
 15607              		.loc 1 1289 16 is_stmt 0 discriminator 1 view .LVU5145
 15608 02e8 83C301   		add	ebx, 1	# arg,
 15609              	.LVL971:
1289:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
 15610              		.loc 1 1289 16 discriminator 1 view .LVU5146
 15611 02eb 39DD     		cmp	ebp, ebx	# argc, arg
 15612 02ed 0F8E2E0D 		jle	.L1379	#,
 15612      0000
1290:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
 15613              		.loc 1 1290 13 is_stmt 1 view .LVU5147
 15614              	# sieve_extend.c:1290:             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) 
1290:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
 15615              		.loc 1 1290 28 is_stmt 0 view .LVU5148
 15616 02f3 4D8D7C04 		lea	r15, 8[r12+rax]	# _41,
 15616      08
 15617              	# sieve_extend.c:1290:             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) 
1290:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
 15618              		.loc 1 1290 17 view .LVU5149
 15619 02f8 488D9424 		lea	rdx, 184[rsp]	# tmp329,
 15619      B8000000 
 15620 0300 498B3F   		mov	rdi, QWORD PTR [r15]	#, *_41
 15621 0303 31C0     		xor	eax, eax	#
 15622 0305 488D3500 		lea	rsi, .LC42[rip]	#,
 15622      000000
 15623 030c E8000000 		call	__isoc99_sscanf@PLT	#
 15623      00
 15624              	.LVL972:
 15625              	# sieve_extend.c:1290:             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) 
1290:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
 15626              		.loc 1 1290 16 view .LVU5150
 15627 0311 83F801   		cmp	eax, 1	# tmp531,
 15628 0314 0F85CD0C 		jne	.L1254	#,
 15628      0000
 15629              	# sieve_extend.c:1290:             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) 
1290:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
GAS LISTING /tmp/cclewcPz.s 			page 415


 15630              		.loc 1 1290 106 discriminator 1 view .LVU5151
 15631 031a 488B9424 		mov	rdx, QWORD PTR 184[rsp]	# option_showMaxFactor.24_44, option_showMaxFactor
 15631      B8000000 
 15632              	# sieve_extend.c:1290:             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) 
1290:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
 15633              		.loc 1 1290 82 discriminator 1 view .LVU5152
 15634 0322 483B9424 		cmp	rdx, QWORD PTR 176[rsp]	# option_showMaxFactor.24_44, option_maxFactor
 15634      B0000000 
 15635 032a 0F87B70C 		ja	.L1254	#,
 15635      0000
1293:sieve_extend.c ****         }
 15636              		.loc 1 1293 13 is_stmt 1 view .LVU5153
 15637              	.LVL973:
 15638              	.LBB1031:
 15639              	.LBI1031:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15640              		.loc 3 105 1 view .LVU5154
 15641              	.LBB1032:
 15642              		.loc 3 107 3 view .LVU5155
 15643              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15644              		.loc 3 107 10 is_stmt 0 view .LVU5156
 15645 0330 488D3500 		lea	rsi, .LC44[rip]	#,
 15645      000000
 15646 0337 BF010000 		mov	edi, 1	#,
 15646      00
 15647 033c 31C0     		xor	eax, eax	#
 15648 033e E8000000 		call	__printf_chk@PLT	#
 15648      00
 15649              	.LVL974:
 15650 0343 E98DFDFF 		jmp	.L1247	#
 15650      FF
 15651              	.LVL975:
 15652              		.p2align 4,,7
 15653              		.p2align 3
 15654              	.L1252:
 15655              		.loc 3 107 10 view .LVU5157
 15656              	.LBE1032:
 15657              	.LBE1031:
1295:sieve_extend.c ****             fprintf(stderr, "Invalid size %s\n",argv[arg]); usage(argv[0]); 
 15658              		.loc 1 1295 14 is_stmt 1 view .LVU5158
 15659              	# sieve_extend.c:1295:         else if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_maxFactor) != 
1295:sieve_extend.c ****             fprintf(stderr, "Invalid size %s\n",argv[arg]); usage(argv[0]); 
 15660              		.loc 1 1295 18 is_stmt 0 view .LVU5159
 15661 0348 31C0     		xor	eax, eax	#
 15662 034a 488D9424 		lea	rdx, 176[rsp]	# tmp331,
 15662      B0000000 
 15663 0352 488D3500 		lea	rsi, .LC42[rip]	#,
 15663      000000
 15664 0359 4C89C7   		mov	rdi, r8	#, _4
 15665 035c E8000000 		call	__isoc99_sscanf@PLT	#
 15665      00
 15666              	.LVL976:
 15667              	# sieve_extend.c:1295:         else if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_maxFactor) != 
1295:sieve_extend.c ****             fprintf(stderr, "Invalid size %s\n",argv[arg]); usage(argv[0]); 
 15668              		.loc 1 1295 17 view .LVU5160
 15669 0361 83F801   		cmp	eax, 1	# tmp532,
 15670 0364 0F846BFD 		je	.L1247	#,
GAS LISTING /tmp/cclewcPz.s 			page 416


 15670      FFFF
1296:sieve_extend.c ****             printf("Maximum set to %ju\n",(uintmax_t)option_maxFactor);
 15671              		.loc 1 1296 13 is_stmt 1 view .LVU5161
 15672              	.LVL977:
 15673              	.LBB1033:
 15674              	.LBI1033:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15675              		.loc 3 98 1 view .LVU5162
 15676              	.LBB1034:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15677              		.loc 3 100 3 view .LVU5163
 15678              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15679              		.loc 3 100 10 is_stmt 0 view .LVU5164
 15680 036a 498B0F   		mov	rcx, QWORD PTR [r15]	#, *_3
 15681 036d 488D1500 		lea	rdx, .LC45[rip]	#,
 15681      000000
 15682 0374 E94F0200 		jmp	.L1370	#
 15682      00
 15683              	.LVL978:
 15684 0379 0F1F8000 		.p2align 4,,7
 15684      000000
 15685              		.p2align 3
 15686              	.L1377:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 15687              		.loc 3 100 10 view .LVU5165
 15688              	.LBE1034:
 15689              	.LBE1033:
 15690              	.LBE1086:
 15691              	.LBB1087:
 15692              	.LBB1082:
 15693              	.LBB1077:
 15694              	.LBB1071:
 15695              		.loc 1 1336 74 is_stmt 1 view .LVU5166
 15696              	.LBB1065:
 15697              	.LBI1065:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15698              		.loc 3 105 1 view .LVU5167
 15699              	.LBB1066:
 15700              		.loc 3 107 3 view .LVU5168
 15701              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15702              		.loc 3 107 10 is_stmt 0 view .LVU5169
 15703 0380 31C0     		xor	eax, eax	#
 15704 0382 488D3500 		lea	rsi, .LC49[rip]	#,
 15704      000000
 15705 0389 BF010000 		mov	edi, 1	#,
 15705      00
 15706              	.LBE1066:
 15707              	.LBE1065:
 15708              	.LBE1071:
 15709              	# sieve_extend.c:1331:             for (counter_t blocksize_bits=1024; blocksize_bits<=2*1024*8; bl
1331:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15710              		.loc 1 1331 90 view .LVU5170
 15711 038e 4801ED   		add	rbp, rbp	# blocksize_bits
 15712              	.LVL979:
 15713              	.LBB1072:
 15714              	.LBB1068:
GAS LISTING /tmp/cclewcPz.s 			page 417


 15715              	.LBB1067:
 15716              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15717              		.loc 3 107 10 view .LVU5171
 15718 0391 E8000000 		call	__printf_chk@PLT	#
 15718      00
 15719              	.LVL980:
 15720 0396 8B8424A8 		mov	eax, DWORD PTR 168[rsp]	# prephitmp_67, option_verboselevel
 15720      000000
 15721              	.LVL981:
 15722              		.loc 3 107 10 view .LVU5172
 15723              	.LBE1067:
 15724              	.LBE1068:
 15725              	.LBE1072:
1331:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15726              		.loc 1 1331 75 is_stmt 1 view .LVU5173
1331:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15727              		.loc 1 1331 49 view .LVU5174
 15728              	# sieve_extend.c:1331:             for (counter_t blocksize_bits=1024; blocksize_bits<=2*1024*8; bl
1331:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15729              		.loc 1 1331 13 is_stmt 0 view .LVU5175
 15730 039d 4183EC01 		sub	r12d, 1	# ivtmp_69,
 15731 03a1 0F85FDFE 		jne	.L1263	#,
 15731      FFFF
 15732              	.L1378:
1331:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 15733              		.loc 1 1331 13 view .LVU5176
 15734              	.LBE1077:
1337:sieve_extend.c ****             }
1338:sieve_extend.c ****             if (option_verboselevel >= 2) printf("\n");
 15735              		.loc 1 1338 13 is_stmt 1 view .LVU5177
 15736              	# sieve_extend.c:1338:             if (option_verboselevel >= 2) printf("\n");
 15737              		.loc 1 1338 16 is_stmt 0 view .LVU5178
 15738 03a7 83F801   		cmp	eax, 1	# prephitmp_67,
 15739 03aa 7E0A     		jle	.L1264	#,
 15740              		.loc 1 1338 43 is_stmt 1 view .LVU5179
 15741              	.LVL982:
 15742              	.LBB1078:
 15743              	.LBI1078:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15744              		.loc 3 105 1 view .LVU5180
 15745              	.LBB1079:
 15746              		.loc 3 107 3 view .LVU5181
 15747              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15748              		.loc 3 107 10 is_stmt 0 view .LVU5182
 15749 03ac BF0A0000 		mov	edi, 10	#,
 15749      00
 15750 03b1 E8000000 		call	putchar@PLT	#
 15750      00
 15751              	.LVL983:
 15752              	.L1264:
 15753              		.loc 3 107 10 view .LVU5183
 15754              	.LBE1079:
 15755              	.LBE1078:
 15756              	.LBE1082:
1328:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 15757              		.loc 1 1328 77 is_stmt 1 discriminator 2 view .LVU5184
 15758              	# sieve_extend.c:1328:         for (counter_t sieveSize_check = 100; sieveSize_check <= 100000000; 
GAS LISTING /tmp/cclewcPz.s 			page 418


1328:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 15759              		.loc 1 1328 93 is_stmt 0 discriminator 2 view .LVU5185
 15760 03b6 4F8D6CAD 		lea	r13, 0[r13+r13*4]	# tmp337,
 15760      00
 15761              	.LVL984:
1328:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 15762              		.loc 1 1328 93 discriminator 2 view .LVU5186
 15763 03bb 4D01ED   		add	r13, r13	# sieveSize_check
 15764              	.LVL985:
1328:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 15765              		.loc 1 1328 47 is_stmt 1 discriminator 2 view .LVU5187
 15766              	# sieve_extend.c:1328:         for (counter_t sieveSize_check = 100; sieveSize_check <= 100000000; 
1328:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 15767              		.loc 1 1328 9 is_stmt 0 discriminator 2 view .LVU5188
 15768 03be 836C2428 		sub	DWORD PTR 40[rsp], 1	# %sfp,
 15768      01
 15769 03c3 0F854FFE 		jne	.L1265	#,
 15769      FFFF
 15770              	.LBE1087:
1339:sieve_extend.c ****         }
1340:sieve_extend.c ****         if (option_verboselevel >= 1) printf("...Valid algorithm\n");
 15771              		.loc 1 1340 9 is_stmt 1 view .LVU5189
 15772              	# sieve_extend.c:1340:         if (option_verboselevel >= 1) printf("...Valid algorithm\n");
 15773              		.loc 1 1340 12 is_stmt 0 view .LVU5190
 15774 03c9 83BC24A8 		cmp	DWORD PTR 168[rsp], 0	# option_verboselevel,
 15774      00000000 
 15775 03d1 0F8FCC09 		jg	.L1380	#,
 15775      0000
1341:sieve_extend.c ****     }
1342:sieve_extend.c ****     
1343:sieve_extend.c ****     counter_t best_blocksize_bits = default_blocksize;
 15776              		.loc 1 1343 5 is_stmt 1 view .LVU5191
 15777              	.LVL986:
1344:sieve_extend.c ****     if (option_tunelevel) {
 15778              		.loc 1 1344 5 view .LVU5192
 15779              	# sieve_extend.c:1344:     if (option_tunelevel) {
 15780              		.loc 1 1344 9 is_stmt 0 view .LVU5193
 15781 03d7 448B8424 		mov	r8d, DWORD PTR 172[rsp]	# option_tunelevel.41_405, option_tunelevel
 15781      AC000000 
 15782              	# sieve_extend.c:1343:     counter_t best_blocksize_bits = default_blocksize;
1343:sieve_extend.c ****     if (option_tunelevel) {
 15783              		.loc 1 1343 15 view .LVU5194
 15784 03df 41BC00FC 		mov	r12d, 261120	# best_result$blocksize_bits,
 15784      0300
 15785              	# sieve_extend.c:1344:     if (option_tunelevel) {
 15786              		.loc 1 1344 8 view .LVU5195
 15787 03e5 4585C0   		test	r8d, r8d	# option_tunelevel.41_405
 15788 03e8 0F85B802 		jne	.L1381	#,
 15788      0000
 15789              	.LVL987:
 15790              	.L1294:
 15791              	.LBB1088:
1345:sieve_extend.c ****         tuning_result_type tuning_result = tune(option_tunelevel, option_maxFactor, option_verbosel
1346:sieve_extend.c ****         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
1347:sieve_extend.c ****         global_MEDIUMSTEP_FASTER = tuning_result.mediumstep_faster;
1348:sieve_extend.c ****         global_VECTORSTEP_FASTER = tuning_result.vectorstep_faster;
1349:sieve_extend.c ****         best_blocksize_bits = tuning_result.blocksize_bits;
GAS LISTING /tmp/cclewcPz.s 			page 419


1350:sieve_extend.c ****     }
1351:sieve_extend.c **** 
1352:sieve_extend.c ****     double max_time = default_sieve_duration;
1353:sieve_extend.c ****     if (best_blocksize_bits > 0) {
1354:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
1355:sieve_extend.c ****         counter_t passes = 0;
 15792              		.loc 1 1355 9 is_stmt 1 view .LVU5196
1356:sieve_extend.c ****         counter_t blocksize_bits = best_blocksize_bits;
 15793              		.loc 1 1356 9 view .LVU5197
1357:sieve_extend.c ****         double elapsed_time = 0;
 15794              		.loc 1 1357 9 view .LVU5198
1358:sieve_extend.c ****         struct sieve_state *sieve_instance;
 15795              		.loc 1 1358 9 view .LVU5199
1359:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&start_time);
 15796              		.loc 1 1359 9 view .LVU5200
 15797 03ee 488DB424 		lea	rsi, 192[rsp]	# tmp440,
 15797      C0000000 
 15798 03f6 BF010000 		mov	edi, 1	#,
 15798      00
 15799 03fb E8000000 		call	clock_gettime@PLT	#
 15799      00
 15800              	.LVL988:
1360:sieve_extend.c ****         while (elapsed_time <= max_time) {
 15801              		.loc 1 1360 9 view .LVU5201
 15802              		.loc 1 1360 15 view .LVU5202
 15803              	# sieve_extend.c:1355:         counter_t passes = 0;
1355:sieve_extend.c ****         counter_t blocksize_bits = best_blocksize_bits;
 15804              		.loc 1 1355 19 is_stmt 0 view .LVU5203
 15805 0400 4531FF   		xor	r15d, r15d	# passes
 15806 0403 4C8DAC24 		lea	r13, 208[rsp]	# tmp464,
 15806      D0000000 
 15807              	.LVL989:
 15808              	.L1295:
1361:sieve_extend.c ****             sieve_instance = sieve(option_maxFactor, blocksize_bits);//blocksize_bits);
 15809              		.loc 1 1361 13 is_stmt 1 view .LVU5204
 15810              	# sieve_extend.c:1361:             sieve_instance = sieve(option_maxFactor, blocksize_bits);//block
 15811              		.loc 1 1361 30 is_stmt 0 view .LVU5205
 15812 040b 488BBC24 		mov	rdi, QWORD PTR 176[rsp]	#, option_maxFactor
 15812      B0000000 
 15813 0413 4C89E6   		mov	rsi, r12	#, best_result$blocksize_bits
 15814              	# sieve_extend.c:1363:             passes++;
1362:sieve_extend.c ****             delete_sieve(sieve_instance);
1363:sieve_extend.c ****             passes++;
 15815              		.loc 1 1363 19 view .LVU5206
 15816 0416 4983C701 		add	r15, 1	# passes,
 15817              	# sieve_extend.c:1361:             sieve_instance = sieve(option_maxFactor, blocksize_bits);//block
1361:sieve_extend.c ****             sieve_instance = sieve(option_maxFactor, blocksize_bits);//blocksize_bits);
 15818              		.loc 1 1361 30 view .LVU5207
 15819 041a E8000000 		call	sieve	#
 15819      00
 15820              	.LVL990:
 15821              	.LBB1089:
 15822              	.LBB1090:
 15823              	# sieve_extend.c:118:     free(sieve->bitarray);
 118:sieve_extend.c ****     free(sieve);
 15824              		.loc 1 118 5 view .LVU5208
 15825 041f 488B38   		mov	rdi, QWORD PTR [rax]	#, sieve_instance_148->bitarray
GAS LISTING /tmp/cclewcPz.s 			page 420


 15826              	.LBE1090:
 15827              	.LBE1089:
 15828              	# sieve_extend.c:1361:             sieve_instance = sieve(option_maxFactor, blocksize_bits);//block
1361:sieve_extend.c ****             sieve_instance = sieve(option_maxFactor, blocksize_bits);//blocksize_bits);
 15829              		.loc 1 1361 30 view .LVU5209
 15830 0422 4989C6   		mov	r14, rax	# sieve_instance, tmp536
 15831              	.LVL991:
1362:sieve_extend.c ****             delete_sieve(sieve_instance);
 15832              		.loc 1 1362 13 is_stmt 1 view .LVU5210
 15833              	.LBB1094:
 15834              	.LBI1089:
 117:sieve_extend.c ****     free(sieve->bitarray);
 15835              		.loc 1 117 13 view .LVU5211
 15836              	.LBB1091:
 118:sieve_extend.c ****     free(sieve);
 15837              		.loc 1 118 5 view .LVU5212
 15838 0425 E8000000 		call	free@PLT	#
 15838      00
 15839              	.LVL992:
 119:sieve_extend.c **** }
 15840              		.loc 1 119 5 view .LVU5213
 15841 042a 4C89F7   		mov	rdi, r14	#, sieve_instance
 15842 042d E8000000 		call	free@PLT	#
 15842      00
 15843              	.LVL993:
 119:sieve_extend.c **** }
 15844              		.loc 1 119 5 is_stmt 0 view .LVU5214
 15845              	.LBE1091:
 15846              	.LBE1094:
 15847              		.loc 1 1363 13 is_stmt 1 view .LVU5215
1364:sieve_extend.c ****             clock_gettime(CLOCK_MONOTONIC,&end_time);
 15848              		.loc 1 1364 13 view .LVU5216
 15849 0432 4C89EE   		mov	rsi, r13	#, tmp464
 15850 0435 BF010000 		mov	edi, 1	#,
 15850      00
 15851 043a E8000000 		call	clock_gettime@PLT	#
 15851      00
 15852              	.LVL994:
1365:sieve_extend.c ****             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time
 15853              		.loc 1 1365 13 view .LVU5217
 15854              	# sieve_extend.c:1365:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 15855              		.loc 1 1365 62 is_stmt 0 view .LVU5218
 15856 043f C4E1D32A 		vcvtsi2sd	xmm5, xmm5, QWORD PTR 216[rsp]	# tmp443, end_time.tv_nsec
 15856      AC24D800 
 15856      0000
 15857              	# sieve_extend.c:1365:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 15858              		.loc 1 1365 68 view .LVU5219
 15859 0449 C4E1EB2A 		vcvtsi2sd	xmm2, xmm2, QWORD PTR 192[rsp]	# tmp444, start_time.tv_sec
 15859      9424C000 
 15859      0000
 15860              	# sieve_extend.c:1365:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 15861              		.loc 1 1365 108 view .LVU5220
 15862 0453 C461BB2A 		vcvtsi2sd	xmm8, xmm8, QWORD PTR 200[rsp]	# tmp446, start_time.tv_nsec
 15862      8424C800 
 15862      0000
 15863              	# sieve_extend.c:1365:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 15864              		.loc 1 1365 44 view .LVU5221
GAS LISTING /tmp/cclewcPz.s 			page 421


 15865 045d C461B32A 		vcvtsi2sd	xmm9, xmm9, QWORD PTR 208[rsp]	# tmp447, end_time.tv_sec
 15865      8C24D000 
 15865      0000
 15866              	# sieve_extend.c:1360:         while (elapsed_time <= max_time) {
1360:sieve_extend.c ****             sieve_instance = sieve(option_maxFactor, blocksize_bits);//blocksize_bits);
 15867              		.loc 1 1360 15 view .LVU5222
 15868 0467 C57B1015 		vmovsd	xmm10, QWORD PTR .LC61[rip]	# tmp649,
 15868      00000000 
 15869 046f C4E2E99B 		vfmsub132sd	xmm5, xmm2, QWORD PTR .LC8[rip]	# _305, tmp444,
 15869      2D000000 
 15869      00
 15870 0478 C462B19D 		vfnmadd132sd	xmm8, xmm9, QWORD PTR .LC8[rip]	# _306, tmp447,
 15870      05000000 
 15870      00
 15871              	# sieve_extend.c:1365:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 15872              		.loc 1 1365 26 view .LVU5223
 15873 0481 C4C15358 		vaddsd	xmm0, xmm5, xmm8	# elapsed_time, _305, _306
 15873      C0
 15874              	.LVL995:
1360:sieve_extend.c ****             sieve_instance = sieve(option_maxFactor, blocksize_bits);//blocksize_bits);
 15875              		.loc 1 1360 15 is_stmt 1 view .LVU5224
 15876 0486 C5792FD0 		vcomisd	xmm10, xmm0	# tmp649, elapsed_time
 15877 048a 0F828500 		jb	.L1367	#,
 15877      0000
 15878              	.LVL996:
1361:sieve_extend.c ****             delete_sieve(sieve_instance);
 15879              		.loc 1 1361 13 view .LVU5225
 15880              	# sieve_extend.c:1361:             sieve_instance = sieve(option_maxFactor, blocksize_bits);//block
1361:sieve_extend.c ****             delete_sieve(sieve_instance);
 15881              		.loc 1 1361 30 is_stmt 0 view .LVU5226
 15882 0490 488BBC24 		mov	rdi, QWORD PTR 176[rsp]	#, option_maxFactor
 15882      B0000000 
 15883 0498 4C89E6   		mov	rsi, r12	#, best_result$blocksize_bits
 15884              	# sieve_extend.c:1363:             passes++;
1363:sieve_extend.c ****             clock_gettime(CLOCK_MONOTONIC,&end_time);
 15885              		.loc 1 1363 19 view .LVU5227
 15886 049b 4983C701 		add	r15, 1	# passes,
 15887              	# sieve_extend.c:1361:             sieve_instance = sieve(option_maxFactor, blocksize_bits);//block
1361:sieve_extend.c ****             delete_sieve(sieve_instance);
 15888              		.loc 1 1361 30 view .LVU5228
 15889 049f E8000000 		call	sieve	#
 15889      00
 15890              	.LVL997:
 15891              	.LBB1095:
 15892              	.LBB1092:
 15893              	# sieve_extend.c:118:     free(sieve->bitarray);
 118:sieve_extend.c ****     free(sieve);
 15894              		.loc 1 118 5 view .LVU5229
 15895 04a4 488B38   		mov	rdi, QWORD PTR [rax]	#, sieve_instance_148->bitarray
 15896              	.LBE1092:
 15897              	.LBE1095:
 15898              	# sieve_extend.c:1361:             sieve_instance = sieve(option_maxFactor, blocksize_bits);//block
1361:sieve_extend.c ****             delete_sieve(sieve_instance);
 15899              		.loc 1 1361 30 view .LVU5230
 15900 04a7 4889C5   		mov	rbp, rax	# sieve_instance, tmp538
1362:sieve_extend.c ****             passes++;
 15901              		.loc 1 1362 13 is_stmt 1 view .LVU5231
GAS LISTING /tmp/cclewcPz.s 			page 422


 15902              	.LVL998:
 15903              	.LBB1096:
 117:sieve_extend.c ****     free(sieve->bitarray);
 15904              		.loc 1 117 13 view .LVU5232
 15905              	.LBB1093:
 118:sieve_extend.c ****     free(sieve);
 15906              		.loc 1 118 5 view .LVU5233
 15907 04aa E8000000 		call	free@PLT	#
 15907      00
 15908              	.LVL999:
 119:sieve_extend.c **** }
 15909              		.loc 1 119 5 view .LVU5234
 15910 04af 4889EF   		mov	rdi, rbp	#, sieve_instance
 15911 04b2 E8000000 		call	free@PLT	#
 15911      00
 15912              	.LVL1000:
 119:sieve_extend.c **** }
 15913              		.loc 1 119 5 is_stmt 0 view .LVU5235
 15914              	.LBE1093:
 15915              	.LBE1096:
1363:sieve_extend.c ****             clock_gettime(CLOCK_MONOTONIC,&end_time);
 15916              		.loc 1 1363 13 is_stmt 1 view .LVU5236
1364:sieve_extend.c ****             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time
 15917              		.loc 1 1364 13 view .LVU5237
 15918 04b7 4C89EE   		mov	rsi, r13	#, tmp464
 15919 04ba BF010000 		mov	edi, 1	#,
 15919      00
 15920 04bf E8000000 		call	clock_gettime@PLT	#
 15920      00
 15921              	.LVL1001:
 15922              		.loc 1 1365 13 view .LVU5238
 15923              	# sieve_extend.c:1365:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 15924              		.loc 1 1365 62 is_stmt 0 view .LVU5239
 15925 04c4 C461A32A 		vcvtsi2sd	xmm11, xmm11, QWORD PTR 216[rsp]	# tmp521, end_time.tv_nsec
 15925      9C24D800 
 15925      0000
 15926              	# sieve_extend.c:1365:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 15927              		.loc 1 1365 68 view .LVU5240
 15928 04ce C4619B2A 		vcvtsi2sd	xmm12, xmm12, QWORD PTR 192[rsp]	# tmp522, start_time.tv_sec
 15928      A424C000 
 15928      0000
 15929              	# sieve_extend.c:1365:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 15930              		.loc 1 1365 108 view .LVU5241
 15931 04d8 C461932A 		vcvtsi2sd	xmm13, xmm13, QWORD PTR 200[rsp]	# tmp524, start_time.tv_nsec
 15931      AC24C800 
 15931      0000
 15932              	# sieve_extend.c:1365:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 15933              		.loc 1 1365 44 view .LVU5242
 15934 04e2 C4618B2A 		vcvtsi2sd	xmm14, xmm14, QWORD PTR 208[rsp]	# tmp525, end_time.tv_sec
 15934      B424D000 
 15934      0000
 15935              	# sieve_extend.c:1360:         while (elapsed_time <= max_time) {
1360:sieve_extend.c ****             sieve_instance = sieve(option_maxFactor, blocksize_bits);//blocksize_bits);
 15936              		.loc 1 1360 15 view .LVU5243
 15937 04ec C57B103D 		vmovsd	xmm15, QWORD PTR .LC61[rip]	# tmp656,
 15937      00000000 
 15938 04f4 C462999B 		vfmsub132sd	xmm11, xmm12, QWORD PTR .LC8[rip]	# _305, tmp522,
GAS LISTING /tmp/cclewcPz.s 			page 423


 15938      1D000000 
 15938      00
 15939 04fd C462899D 		vfnmadd132sd	xmm13, xmm14, QWORD PTR .LC8[rip]	# _306, tmp525,
 15939      2D000000 
 15939      00
 15940              	# sieve_extend.c:1365:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 15941              		.loc 1 1365 26 view .LVU5244
 15942 0506 C4C12358 		vaddsd	xmm0, xmm11, xmm13	# elapsed_time, _305, _306
 15942      C5
 15943              	.LVL1002:
1360:sieve_extend.c ****             sieve_instance = sieve(option_maxFactor, blocksize_bits);//blocksize_bits);
 15944              		.loc 1 1360 15 is_stmt 1 view .LVU5245
 15945 050b C5792FF8 		vcomisd	xmm15, xmm0	# tmp656, elapsed_time
 15946 050f 0F83F6FE 		jnb	.L1295	#,
 15946      FFFF
 15947              	.L1367:
1366:sieve_extend.c ****         }
1367:sieve_extend.c ****         printf("rogiervandam_extend;%ju;%f;1;algorithm=other,faithful=yes,bits=1\n", (uintmax_t)pas
 15948              		.loc 1 1367 9 view .LVU5246
 15949              	.LVL1003:
 15950              	.LBB1097:
 15951              	.LBI1097:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15952              		.loc 3 105 1 view .LVU5247
 15953              	.LBB1098:
 15954              		.loc 3 107 3 view .LVU5248
 15955              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15956              		.loc 3 107 10 is_stmt 0 view .LVU5249
 15957 0515 4C89FA   		mov	rdx, r15	#, passes
 15958 0518 488D3500 		lea	rsi, .LC62[rip]	#,
 15958      000000
 15959 051f BF010000 		mov	edi, 1	#,
 15959      00
 15960 0524 B8010000 		mov	eax, 1	#,
 15960      00
 15961 0529 C5FB1144 		vmovsd	QWORD PTR 40[rsp], xmm0	# %sfp, elapsed_time
 15961      2428
 15962 052f E8000000 		call	__printf_chk@PLT	#
 15962      00
 15963              	.LVL1004:
 15964              		.loc 3 107 10 view .LVU5250
 15965              	.LBE1098:
 15966              	.LBE1097:
1368:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Passes - per 5 seconds: %f - per second %f\n", 5*pass
 15967              		.loc 1 1368 9 is_stmt 1 view .LVU5251
 15968              	# sieve_extend.c:1368:         if (option_verboselevel >= 1) printf("Passes - per 5 seconds: %f - p
 15969              		.loc 1 1368 12 is_stmt 0 view .LVU5252
 15970 0534 83BC24A8 		cmp	DWORD PTR 168[rsp], 0	# option_verboselevel,
 15970      00000000 
 15971 053c 0F8FF500 		jg	.L1382	#,
 15971      0000
 15972              	.LVL1005:
 15973              	.L1293:
 15974              		.loc 1 1368 12 view .LVU5253
 15975              	.LBE1088:
1369:sieve_extend.c ****     }
1370:sieve_extend.c ****     
GAS LISTING /tmp/cclewcPz.s 			page 424


1371:sieve_extend.c ****     if (option_showMaxFactor > 0) {
 15976              		.loc 1 1371 5 is_stmt 1 view .LVU5254
 15977              	# sieve_extend.c:1371:     if (option_showMaxFactor > 0) {
 15978              		.loc 1 1371 8 is_stmt 0 view .LVU5255
 15979 0542 4883BC24 		cmp	QWORD PTR 184[rsp], 0	# option_showMaxFactor,
 15979      B8000000 
 15979      00
 15980 054b 0F859300 		jne	.L1383	#,
 15980      0000
 15981 0551 66662E0F 		.p2align 4
 15981      1F840000 
 15981      0000000F 
 15981      1F4000
 15982              		.p2align 3
 15983              	.L1301:
 15984              	.LBB1105:
 15985              	.LBB1083:
 15986              	.LBB1080:
 15987              	.LBB1073:
1336:sieve_extend.c ****             }
 15988              		.loc 1 1336 29 is_stmt 1 discriminator 1 view .LVU5256
 15989              	.LBE1073:
 15990              	.LBE1080:
 15991              	.LBE1083:
 15992              	.LBE1105:
 15993              	# sieve_extend.c:1378: }
1372:sieve_extend.c ****         printf("Show result set:\n");
1373:sieve_extend.c ****         struct sieve_state* sieve_instance = sieve(option_maxFactor, option_maxFactor);
1374:sieve_extend.c ****         show_primes(sieve_instance, option_showMaxFactor);
1375:sieve_extend.c ****         delete_sieve(sieve_instance);
1376:sieve_extend.c ****         printf("\n");
1377:sieve_extend.c ****     }
1378:sieve_extend.c **** }
 15994              		.loc 1 1378 1 is_stmt 0 discriminator 1 view .LVU5257
 15995 0560 488B8424 		mov	rax, QWORD PTR 232[rsp]	# tmp572, D.7424
 15995      E8000000 
 15996 0568 64483304 		xor	rax, QWORD PTR fs:40	# tmp572, MEM[(<address-space-1> long unsigned int *)40B]
 15996      25280000 
 15996      00
 15997 0571 0F85A50A 		jne	.L1384	#,
 15997      0000
 15998              	# sieve_extend.c:1378: }
 15999              		.loc 1 1378 1 view .LVU5258
 16000 0577 488DA424 		lea	rsp, 248[rsp]	#,
 16000      F8000000 
 16001              		.cfi_remember_state
 16002              		.cfi_def_cfa_offset 56
 16003 057f 31C0     		xor	eax, eax	#
 16004 0581 5B       		pop	rbx	#
 16005              		.cfi_def_cfa_offset 48
 16006 0582 5D       		pop	rbp	#
 16007              		.cfi_def_cfa_offset 40
 16008 0583 415C     		pop	r12	#
 16009              		.cfi_def_cfa_offset 32
 16010 0585 415D     		pop	r13	#
 16011              		.cfi_def_cfa_offset 24
 16012 0587 415E     		pop	r14	#
GAS LISTING /tmp/cclewcPz.s 			page 425


 16013              		.cfi_def_cfa_offset 16
 16014 0589 415F     		pop	r15	#
 16015              		.cfi_def_cfa_offset 8
 16016 058b C3       		ret	
 16017              	.L1256:
 16018              		.cfi_restore_state
1318:sieve_extend.c ****         #endif
 16019              		.loc 1 1318 13 is_stmt 1 view .LVU5259
 16020              	.LVL1006:
 16021              	.LBB1106:
 16022              	.LBI1106:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16023              		.loc 3 105 1 view .LVU5260
 16024              	.LBB1107:
 16025              		.loc 3 107 3 view .LVU5261
 16026              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16027              		.loc 3 107 10 is_stmt 0 view .LVU5262
 16028 058c 488D3D00 		lea	rdi, .LC29[rip]	#,
 16028      000000
 16029 0593 E8000000 		call	puts@PLT	#
 16029      00
 16030              	.LVL1007:
 16031              		.loc 3 107 10 view .LVU5263
 16032              	.LBE1107:
 16033              	.LBE1106:
1322:sieve_extend.c ****         // Count the number of primes and validate the result
 16034              		.loc 1 1322 5 is_stmt 1 view .LVU5264
1324:sieve_extend.c ****         if (option_verboselevel >= 2) printf("\n");
 16035              		.loc 1 1324 9 view .LVU5265
 16036              	# sieve_extend.c:1324:         if (option_verboselevel >= 1) printf("Validating... ");
1324:sieve_extend.c ****         if (option_verboselevel >= 2) printf("\n");
 16037              		.loc 1 1324 12 is_stmt 0 view .LVU5266
 16038 0598 83BC24A8 		cmp	DWORD PTR 168[rsp], 0	# option_verboselevel,
 16038      00000000 
 16039 05a0 0F8E49FC 		jle	.L1257	#,
 16039      FFFF
1324:sieve_extend.c ****         if (option_verboselevel >= 2) printf("\n");
 16040              		.loc 1 1324 39 is_stmt 1 view .LVU5267
 16041              	.LVL1008:
 16042              	.LBB1108:
 16043              	.LBI1108:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16044              		.loc 3 105 1 view .LVU5268
 16045              	.LBB1109:
 16046              		.loc 3 107 3 view .LVU5269
 16047              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16048              		.loc 3 107 10 is_stmt 0 view .LVU5270
 16049 05a6 488D3500 		lea	rsi, .LC46[rip]	#,
 16049      000000
 16050 05ad BF010000 		mov	edi, 1	#,
 16050      00
 16051 05b2 31C0     		xor	eax, eax	#
 16052 05b4 E8000000 		call	__printf_chk@PLT	#
 16052      00
 16053              	.LVL1009:
 16054 05b9 E931FCFF 		jmp	.L1257	#
 16054      FF
GAS LISTING /tmp/cclewcPz.s 			page 426


 16055              	.LVL1010:
 16056              	.L1245:
 16057              		.loc 3 107 10 view .LVU5271
 16058              	.LBE1109:
 16059              	.LBE1108:
 16060              	.LBB1110:
1276:sieve_extend.c ****             }
 16061              		.loc 1 1276 17 is_stmt 1 view .LVU5272
 16062              	.LBB1035:
 16063              	.LBI1035:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16064              		.loc 3 98 1 view .LVU5273
 16065              	.LBB1036:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16066              		.loc 3 100 3 view .LVU5274
 16067              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16068              		.loc 3 100 10 is_stmt 0 view .LVU5275
 16069 05be 498B0F   		mov	rcx, QWORD PTR [r15]	#, *_16
 16070 05c1 488D1500 		lea	rdx, .LC33[rip]	#,
 16070      000000
 16071              	.LVL1011:
 16072              	.L1370:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16073              		.loc 3 100 10 view .LVU5276
 16074              	.LBE1036:
 16075              	.LBE1035:
 16076              	.LBB1037:
 16077              	.LBB1038:
 16078 05c8 488B3D00 		mov	rdi, QWORD PTR stderr[rip]	#, stderr
 16078      000000
 16079 05cf BE010000 		mov	esi, 1	#,
 16079      00
 16080 05d4 31C0     		xor	eax, eax	#
 16081 05d6 E8000000 		call	__fprintf_chk@PLT	#
 16081      00
 16082              	.LVL1012:
 16083              	.L1371:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16084              		.loc 3 100 10 view .LVU5277
 16085              	.LBE1038:
 16086              	.LBE1037:
1284:sieve_extend.c ****             }
 16087              		.loc 1 1284 80 is_stmt 1 view .LVU5278
 16088 05db 498B3C24 		mov	rdi, QWORD PTR [r12]	#, *argv_161(D)
 16089 05df E8000000 		call	usage	#
 16089      00
 16090              	.LVL1013:
 16091              	.L1383:
1284:sieve_extend.c ****             }
 16092              		.loc 1 1284 80 is_stmt 0 view .LVU5279
 16093              	.LBE1110:
 16094              	.LBB1111:
1372:sieve_extend.c ****         struct sieve_state* sieve_instance = sieve(option_maxFactor, option_maxFactor);
 16095              		.loc 1 1372 9 is_stmt 1 view .LVU5280
 16096              	.LBB1112:
 16097              	.LBI1112:
GAS LISTING /tmp/cclewcPz.s 			page 427


 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16098              		.loc 3 105 1 view .LVU5281
 16099              	.LBB1113:
 16100              		.loc 3 107 3 view .LVU5282
 16101              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16102              		.loc 3 107 10 is_stmt 0 view .LVU5283
 16103 05e4 488D3D00 		lea	rdi, .LC64[rip]	#,
 16103      000000
 16104 05eb E8000000 		call	puts@PLT	#
 16104      00
 16105              	.LVL1014:
 16106              		.loc 3 107 10 view .LVU5284
 16107              	.LBE1113:
 16108              	.LBE1112:
1373:sieve_extend.c ****         show_primes(sieve_instance, option_showMaxFactor);
 16109              		.loc 1 1373 9 is_stmt 1 view .LVU5285
 16110              	# sieve_extend.c:1373:         struct sieve_state* sieve_instance = sieve(option_maxFactor, option_
1373:sieve_extend.c ****         show_primes(sieve_instance, option_showMaxFactor);
 16111              		.loc 1 1373 46 is_stmt 0 view .LVU5286
 16112 05f0 488BBC24 		mov	rdi, QWORD PTR 176[rsp]	# option_maxFactor.52_94, option_maxFactor
 16112      B0000000 
 16113 05f8 4889FE   		mov	rsi, rdi	#, option_maxFactor.52_94
 16114 05fb E8000000 		call	sieve	#
 16114      00
 16115              	.LVL1015:
 16116              	# sieve_extend.c:1374:         show_primes(sieve_instance, option_showMaxFactor);
1374:sieve_extend.c ****         delete_sieve(sieve_instance);
 16117              		.loc 1 1374 9 view .LVU5287
 16118 0600 488B9424 		mov	rdx, QWORD PTR 184[rsp]	#, option_showMaxFactor
 16118      B8000000 
 16119              	# sieve_extend.c:1373:         struct sieve_state* sieve_instance = sieve(option_maxFactor, option_
1373:sieve_extend.c ****         show_primes(sieve_instance, option_showMaxFactor);
 16120              		.loc 1 1373 46 view .LVU5288
 16121 0608 4989C4   		mov	r12, rax	# sieve_instance, tmp537
 16122              	.LVL1016:
1374:sieve_extend.c ****         delete_sieve(sieve_instance);
 16123              		.loc 1 1374 9 is_stmt 1 view .LVU5289
 16124 060b 488D7008 		lea	rsi, 8[rax]	# tmp462,
 16125 060f 4889C7   		mov	rdi, rax	#, sieve_instance
 16126 0612 E8000000 		call	show_primes.isra.0	#
 16126      00
 16127              	.LVL1017:
1375:sieve_extend.c ****         printf("\n");
 16128              		.loc 1 1375 9 view .LVU5290
 16129              	.LBB1114:
 16130              	.LBI1114:
 117:sieve_extend.c ****     free(sieve->bitarray);
 16131              		.loc 1 117 13 view .LVU5291
 16132              	.LBB1115:
 118:sieve_extend.c ****     free(sieve);
 16133              		.loc 1 118 5 view .LVU5292
 16134 0617 498B3C24 		mov	rdi, QWORD PTR [r12]	#, sieve_instance_153->bitarray
 16135 061b E8000000 		call	free@PLT	#
 16135      00
 16136              	.LVL1018:
 119:sieve_extend.c **** }
 16137              		.loc 1 119 5 view .LVU5293
GAS LISTING /tmp/cclewcPz.s 			page 428


 16138 0620 4C89E7   		mov	rdi, r12	#, sieve_instance
 16139 0623 E8000000 		call	free@PLT	#
 16139      00
 16140              	.LVL1019:
 119:sieve_extend.c **** }
 16141              		.loc 1 119 5 is_stmt 0 view .LVU5294
 16142              	.LBE1115:
 16143              	.LBE1114:
1376:sieve_extend.c ****     }
 16144              		.loc 1 1376 9 is_stmt 1 view .LVU5295
 16145              	.LBB1116:
 16146              	.LBI1116:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16147              		.loc 3 105 1 view .LVU5296
 16148              	.LBB1117:
 16149              		.loc 3 107 3 view .LVU5297
 16150              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16151              		.loc 3 107 10 is_stmt 0 view .LVU5298
 16152 0628 BF0A0000 		mov	edi, 10	#,
 16152      00
 16153 062d E8000000 		call	putchar@PLT	#
 16153      00
 16154              	.LVL1020:
 16155 0632 E929FFFF 		jmp	.L1301	#
 16155      FF
 16156              	.LVL1021:
 16157              	.L1382:
 16158              		.loc 3 107 10 view .LVU5299
 16159              	.LBE1117:
 16160              	.LBE1116:
 16161              	.LBE1111:
 16162              	.LBB1118:
1368:sieve_extend.c ****     }
 16163              		.loc 1 1368 39 is_stmt 1 discriminator 1 view .LVU5300
 16164              	.LBB1099:
 16165              	.LBI1099:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16166              		.loc 3 105 1 discriminator 1 view .LVU5301
 16167              	.LBB1100:
 16168              		.loc 3 107 3 discriminator 1 view .LVU5302
 16169              	.LBE1100:
 16170              	.LBE1099:
 16171              	# sieve_extend.c:1368:         if (option_verboselevel >= 1) printf("Passes - per 5 seconds: %f - p
1368:sieve_extend.c ****     }
 16172              		.loc 1 1368 39 is_stmt 0 discriminator 1 view .LVU5303
 16173 0637 C4C1FB2A 		vcvtsi2sd	xmm0, xmm0, r15	# tmp450, passes
 16173      C7
 16174 063c 4D85FF   		test	r15, r15	# passes
 16175 063f C5FB1074 		vmovsd	xmm6, QWORD PTR 40[rsp]	# elapsed_time, %sfp
 16175      2428
 16176 0645 7919     		jns	.L1298	#,
 16177 0647 4C89F9   		mov	rcx, r15	# tmp452, passes
 16178 064a 4D89FA   		mov	r10, r15	# tmp453, passes
 16179 064d 48D1E9   		shr	rcx	# tmp452
 16180 0650 4183E201 		and	r10d, 1	# tmp453,
 16181 0654 4C09D1   		or	rcx, r10	# tmp517, tmp453
 16182 0657 C4E1C32A 		vcvtsi2sd	xmm7, xmm7, rcx	# tmp451, tmp517
GAS LISTING /tmp/cclewcPz.s 			page 429


 16182      F9
 16183 065c C5C358C7 		vaddsd	xmm0, xmm7, xmm7	# tmp450, tmp451, tmp451
 16184              	.L1298:
1368:sieve_extend.c ****     }
 16185              		.loc 1 1368 39 discriminator 1 view .LVU5304
 16186 0660 C5FB5ECE 		vdivsd	xmm1, xmm0, xmm6	# tmp454, tmp450, elapsed_time
 16187              	# sieve_extend.c:1368:         if (option_verboselevel >= 1) printf("Passes - per 5 seconds: %f - p
1368:sieve_extend.c ****     }
 16188              		.loc 1 1368 95 discriminator 1 view .LVU5305
 16189 0664 4B8D14BF 		lea	rdx, [r15+r15*4]	# tmp455,
 16190              	# sieve_extend.c:1368:         if (option_verboselevel >= 1) printf("Passes - per 5 seconds: %f - p
1368:sieve_extend.c ****     }
 16191              		.loc 1 1368 39 discriminator 1 view .LVU5306
 16192 0668 4885D2   		test	rdx, rdx	# tmp455
 16193 066b C4E1E32A 		vcvtsi2sd	xmm3, xmm3, rdx	# tmp456, tmp455
 16193      DA
 16194 0670 7915     		jns	.L1300	#,
 16195 0672 4989D3   		mov	r11, rdx	# tmp458, tmp455
 16196 0675 83E201   		and	edx, 1	# tmp459,
 16197 0678 49D1EB   		shr	r11	# tmp458
 16198 067b 4909D3   		or	r11, rdx	# tmp518, tmp459
 16199 067e C4C1DB2A 		vcvtsi2sd	xmm4, xmm4, r11	# tmp457, tmp518
 16199      E3
 16200 0683 C5DB58DC 		vaddsd	xmm3, xmm4, xmm4	# tmp456, tmp457, tmp457
 16201              	.L1300:
 16202 0687 C5E35EC6 		vdivsd	xmm0, xmm3, xmm6	# tmp460, tmp456, elapsed_time
 16203              	.LBB1102:
 16204              	.LBB1101:
 16205              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16206              		.loc 3 107 10 discriminator 1 view .LVU5307
 16207 068b 488D3500 		lea	rsi, .LC63[rip]	#,
 16207      000000
 16208 0692 BF010000 		mov	edi, 1	#,
 16208      00
 16209 0697 B8020000 		mov	eax, 2	#,
 16209      00
 16210 069c E8000000 		call	__printf_chk@PLT	#
 16210      00
 16211              	.LVL1022:
 16212 06a1 E99CFEFF 		jmp	.L1293	#
 16212      FF
 16213              	.LVL1023:
 16214              	.L1381:
 16215              		.loc 3 107 10 discriminator 1 view .LVU5308
 16216              	.LBE1101:
 16217              	.LBE1102:
 16218              	.LBE1118:
 16219              	.LBB1119:
1345:sieve_extend.c ****         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
 16220              		.loc 1 1345 9 is_stmt 1 view .LVU5309
 16221              	# sieve_extend.c:1345:         tuning_result_type tuning_result = tune(option_tunelevel, option_max
1345:sieve_extend.c ****         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
 16222              		.loc 1 1345 44 is_stmt 0 view .LVU5310
 16223 06a6 448B9424 		mov	r10d, DWORD PTR 168[rsp]	# option_verboselevel.42_64, option_verboselevel
 16223      A8000000 
 16224 06ae 4183E801 		sub	r8d, 1	#,
 16225 06b2 4C8B9C24 		mov	r11, QWORD PTR 176[rsp]	# option_maxFactor.43_65, option_maxFactor
GAS LISTING /tmp/cclewcPz.s 			page 430


 16225      B0000000 
 16226 06ba 4183F802 		cmp	r8d, 2	# _215,
 16227 06be 44895424 		mov	DWORD PTR 104[rsp], r10d	# %sfp, option_verboselevel.42_64
 16227      68
 16228 06c3 4C899C24 		mov	QWORD PTR 136[rsp], r11	# %sfp, option_maxFactor.43_65
 16228      88000000 
 16229              	.LVL1024:
 16230              	.LBB1120:
 16231              	.LBI1120:
1053:sieve_extend.c ****     counter_t best_blocksize_bits = default_blocksize;
 16232              		.loc 1 1053 27 is_stmt 1 view .LVU5311
 16233              	.LBB1121:
1054:sieve_extend.c **** 
 16234              		.loc 1 1054 5 view .LVU5312
1056:sieve_extend.c ****     best_blocksize_bits = 0;
 16235              		.loc 1 1056 5 view .LVU5313
1057:sieve_extend.c ****     counter_t best_smallstep_faster = 0;
 16236              		.loc 1 1057 5 view .LVU5314
1058:sieve_extend.c ****     counter_t best_mediumstep_faster = 0;
 16237              		.loc 1 1058 5 view .LVU5315
1059:sieve_extend.c ****     counter_t best_vectorstep_faster = 0;
 16238              		.loc 1 1059 5 view .LVU5316
1060:sieve_extend.c ****     counter_t smallstep_faster_steps = 4;
 16239              		.loc 1 1060 5 view .LVU5317
1061:sieve_extend.c ****     counter_t mediumstep_faster_steps = 4;
 16240              		.loc 1 1061 5 view .LVU5318
1062:sieve_extend.c ****     counter_t vectorstep_faster_steps = 32;
 16241              		.loc 1 1062 5 view .LVU5319
1063:sieve_extend.c ****     counter_t freebits_steps = anticiped_cache_line_bytesize;
 16242              		.loc 1 1063 5 view .LVU5320
1064:sieve_extend.c ****     counter_t sample_max = default_sample_max;
 16243              		.loc 1 1064 5 view .LVU5321
1065:sieve_extend.c ****     double sample_duration = default_sample_duration;
 16244              		.loc 1 1065 5 view .LVU5322
1066:sieve_extend.c **** 
 16245              		.loc 1 1066 5 view .LVU5323
1069:sieve_extend.c ****         case 1:
 16246              		.loc 1 1069 5 view .LVU5324
 16247 06cb 0F86EA07 		jbe	.L1302	#,
 16247      0000
 16248 06d1 C5FB1035 		vmovsd	xmm6, QWORD PTR .LC28[rip]	# sample_duration,
 16248      00000000 
 16249 06d9 48C74424 		mov	QWORD PTR 120[rsp], 5	# %sfp,
 16249      78050000 
 16249      00
 16250 06e2 48C74424 		mov	QWORD PTR 112[rsp], 128	# %sfp,
 16250      70800000 
 16250      00
 16251 06eb 48C78424 		mov	QWORD PTR 144[rsp], 32	# %sfp,
 16251      90000000 
 16251      20000000 
 16252 06f7 48C78424 		mov	QWORD PTR 152[rsp], 4	# %sfp,
 16252      98000000 
 16252      04000000 
 16253 0703 C5FB11B4 		vmovsd	QWORD PTR 128[rsp], xmm6	# %sfp, sample_duration
 16253      24800000 
 16253      00
GAS LISTING /tmp/cclewcPz.s 			page 431


 16254              	.LVL1025:
 16255              	.L1270:
1098:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 16256              		.loc 1 1098 5 view .LVU5325
 16257              	# sieve_extend.c:1098:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1098:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 16258              		.loc 1 1098 33 is_stmt 0 view .LVU5326
 16259 070c B8400000 		mov	eax, 64	# tmp350,
 16259      00
 16260 0711 31D2     		xor	edx, edx	# tmp349
 16261 0713 48F7B424 		div	QWORD PTR 152[rsp]	# %sfp
 16261      98000000 
 16262              	# sieve_extend.c:1098:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1098:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 16263              		.loc 1 1098 254 view .LVU5327
 16264 071b 31D2     		xor	edx, edx	# tmp357
 16265              	# sieve_extend.c:1100:     counter_t tuning_results=0;
1100:sieve_extend.c ****     counter_t tuning_result_index=0;
 16266              		.loc 1 1100 15 view .LVU5328
 16267 071d 4531FF   		xor	r15d, r15d	# tuning_results
 16268              	# sieve_extend.c:1098:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1098:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 16269              		.loc 1 1098 83 view .LVU5329
 16270 0720 488D7801 		lea	rdi, 1[rax]	# _232,
 16271              	.LVL1026:
1099:sieve_extend.c ****     counter_t tuning_results=0;
 16272              		.loc 1 1099 5 is_stmt 1 view .LVU5330
 16273              	# sieve_extend.c:1098:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1098:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 16274              		.loc 1 1098 254 is_stmt 0 view .LVU5331
 16275 0724 B8001000 		mov	eax, 4096	# tmp358,
 16275      00
 16276 0729 48F77424 		div	QWORD PTR 112[rsp]	# %sfp
 16276      70
 16277              	.LVL1027:
 16278              	# sieve_extend.c:1098:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1098:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 16279              		.loc 1 1098 148 view .LVU5332
 16280 072e 31D2     		xor	edx, edx	# tmp367
 16281              	# sieve_extend.c:1099:     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_r
1099:sieve_extend.c ****     counter_t tuning_results=0;
 16282              		.loc 1 1099 41 view .LVU5333
 16283 0730 480FAFC7 		imul	rax, rdi	# tmp363, _232
 16284              	.LVL1028:
1099:sieve_extend.c ****     counter_t tuning_results=0;
 16285              		.loc 1 1099 41 view .LVU5334
 16286 0734 480FAFF8 		imul	rdi, rax	# tmp364, tmp363
 16287              	.LVL1029:
 16288              	# sieve_extend.c:1098:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1098:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 16289              		.loc 1 1098 148 view .LVU5335
 16290 0738 B8000100 		mov	eax, 256	# tmp368,
 16290      00
 16291 073d 48F7B424 		div	QWORD PTR 144[rsp]	# %sfp
 16291      90000000 
 16292              	# sieve_extend.c:1098:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1098:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
GAS LISTING /tmp/cclewcPz.s 			page 432


 16293              		.loc 1 1098 201 view .LVU5336
 16294 0745 4883C001 		add	rax, 1	# tmp373,
 16295              	# sieve_extend.c:1099:     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_r
1099:sieve_extend.c ****     counter_t tuning_results=0;
 16296              		.loc 1 1099 41 view .LVU5337
 16297 0749 480FAFF8 		imul	rdi, rax	# tmp374, tmp373
 16298 074d 48C1E708 		sal	rdi, 8	# tmp374,
 16299 0751 E8000000 		call	malloc@PLT	#
 16299      00
 16300              	.LVL1030:
 16301              	# sieve_extend.c:1056:     double best_avg = 0;
1056:sieve_extend.c ****     best_blocksize_bits = 0;
 16302              		.loc 1 1056 12 view .LVU5338
 16303 0756 C5F157C9 		vxorpd	xmm1, xmm1, xmm1	# best_avg
 16304              	# sieve_extend.c:1099:     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_r
1099:sieve_extend.c ****     counter_t tuning_results=0;
 16305              		.loc 1 1099 41 view .LVU5339
 16306 075a 48894424 		mov	QWORD PTR 64[rsp], rax	# %sfp, tmp535
 16306      40
 16307              	.LVL1031:
1100:sieve_extend.c ****     counter_t tuning_result_index=0;
 16308              		.loc 1 1100 5 is_stmt 1 view .LVU5340
1101:sieve_extend.c ****     
 16309              		.loc 1 1101 5 view .LVU5341
1103:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16310              		.loc 1 1103 5 view .LVU5342
 16311              	.LBB1122:
1103:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16312              		.loc 1 1103 10 view .LVU5343
1103:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16313              		.loc 1 1103 42 view .LVU5344
 16314              	.LBE1122:
 16315              	# sieve_extend.c:1060:     counter_t best_vectorstep_faster = 0;
1060:sieve_extend.c ****     counter_t smallstep_faster_steps = 4;
 16316              		.loc 1 1060 15 is_stmt 0 view .LVU5345
 16317 075f 48C74424 		mov	QWORD PTR 96[rsp], 0	# %sfp,
 16317      60000000 
 16317      00
 16318              	# sieve_extend.c:1059:     counter_t best_mediumstep_faster = 0;
1059:sieve_extend.c ****     counter_t best_vectorstep_faster = 0;
 16319              		.loc 1 1059 15 view .LVU5346
 16320 0768 48C74424 		mov	QWORD PTR 88[rsp], 0	# %sfp,
 16320      58000000 
 16320      00
 16321              	# sieve_extend.c:1058:     counter_t best_smallstep_faster = 0;
1058:sieve_extend.c ****     counter_t best_mediumstep_faster = 0;
 16322              		.loc 1 1058 15 view .LVU5347
 16323 0771 48C74424 		mov	QWORD PTR 80[rsp], 0	# %sfp,
 16323      50000000 
 16323      00
 16324              	# sieve_extend.c:1057:     best_blocksize_bits = 0;
1057:sieve_extend.c ****     counter_t best_smallstep_faster = 0;
 16325              		.loc 1 1057 25 view .LVU5348
 16326 077a 48C74424 		mov	QWORD PTR 72[rsp], 0	# %sfp,
 16326      48000000 
 16326      00
 16327              	.LBB1152:
GAS LISTING /tmp/cclewcPz.s 			page 433


 16328              	# sieve_extend.c:1103:     for (counter_t smallstep_faster = 0; smallstep_faster <= WORD_SIZE/2; sm
1103:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16329              		.loc 1 1103 20 view .LVU5349
 16330 0783 48C74424 		mov	QWORD PTR 48[rsp], 0	# %sfp,
 16330      30000000 
 16330      00
 16331              	.LBE1152:
 16332              	# sieve_extend.c:1056:     double best_avg = 0;
1056:sieve_extend.c ****     best_blocksize_bits = 0;
 16333              		.loc 1 1056 12 view .LVU5350
 16334 078c C5FB114C 		vmovsd	QWORD PTR 56[rsp], xmm1	# %sfp, best_avg
 16334      2438
 16335              	.LVL1032:
 16336              	.L1272:
 16337              	.LBB1153:
 16338              	.LBB1123:
1104:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 16339              		.loc 1 1104 62 is_stmt 1 view .LVU5351
 16340              	.LBB1124:
 16341              	.LBB1125:
 16342              	# sieve_extend.c:1106:                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_
1106:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16343              		.loc 1 1106 32 is_stmt 0 view .LVU5352
 16344 0792 4C8B4424 		mov	r8, QWORD PTR 48[rsp]	# smallstep_faster, %sfp
 16344      30
 16345 0797 4C894424 		mov	QWORD PTR 40[rsp], r8	# %sfp, smallstep_faster
 16345      28
 16346              	.LVL1033:
 16347 079c 0F1F4000 		.p2align 4
 16348              		.p2align 3
 16349              	.L1284:
1106:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16350              		.loc 1 1106 32 view .LVU5353
 16351              	.LBE1125:
1105:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 16352              		.loc 1 1105 67 is_stmt 1 view .LVU5354
 16353              	.LBB1148:
 16354              	# sieve_extend.c:1106:                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_
1106:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16355              		.loc 1 1106 32 is_stmt 0 view .LVU5355
 16356 07a0 4C8B7424 		mov	r14, QWORD PTR 40[rsp]	# vectorstep_faster, %sfp
 16356      28
 16357              	.LVL1034:
 16358 07a5 66662E0F 		.p2align 4
 16358      1F840000 
 16358      000000
 16359              		.p2align 3
 16360              	.L1282:
1106:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16361              		.loc 1 1106 50 is_stmt 1 view .LVU5356
 16362              	.LBB1126:
 16363              	# sieve_extend.c:1107:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1107:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16364              		.loc 1 1107 36 is_stmt 0 view .LVU5357
 16365 07b0 C744246C 		mov	DWORD PTR 108[rsp], 6	# %sfp,
 16365      06000000 
 16366              	.LBE1126:
GAS LISTING /tmp/cclewcPz.s 			page 434


 16367              	# sieve_extend.c:1106:                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_
1106:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16368              		.loc 1 1106 32 view .LVU5358
 16369 07b8 41BC0001 		mov	r12d, 256	# blocksize_kb,
 16369      0000
 16370              	.LVL1035:
 16371 07be 6690     		.p2align 4
 16372              		.p2align 3
 16373              	.L1280:
 16374              	.LBB1146:
1107:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16375              		.loc 1 1107 49 is_stmt 1 view .LVU5359
 16376 07c0 4F8D147F 		lea	r10, [r15+r15*2]	# tmp401,
 16377              	# sieve_extend.c:1107:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1107:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16378              		.loc 1 1107 134 is_stmt 0 view .LVU5360
 16379 07c4 4C89E3   		mov	rbx, r12	# ivtmp.653, blocksize_kb
 16380 07c7 4C8B5C24 		mov	r11, QWORD PTR 64[rsp]	# tuning_result, %sfp
 16380      40
 16381              	# sieve_extend.c:1107:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1107:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16382              		.loc 1 1107 36 view .LVU5361
 16383 07cc 31ED     		xor	ebp, ebp	# free_bits
 16384 07ce 49C1E205 		sal	r10, 5	# tmp402,
 16385              	# sieve_extend.c:1107:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1107:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16386              		.loc 1 1107 134 view .LVU5362
 16387 07d2 48C1E30D 		sal	rbx, 13	# ivtmp.653,
 16388 07d6 4F8D2C13 		lea	r13, [r11+r10]	# ivtmp.652,
 16389 07da EB4F     		jmp	.L1278	#
 16390              	.LVL1036:
 16391 07dc 0F1F4000 		.p2align 4,,7
 16392              		.p2align 3
 16393              	.L1275:
 16394              	.LBB1127:
1124:sieve_extend.c ****                             best_blocksize_bits = blocksize_bits;
 16395              		.loc 1 1124 29 is_stmt 1 view .LVU5363
1125:sieve_extend.c ****                             best_smallstep_faster = smallstep_faster;
 16396              		.loc 1 1125 29 view .LVU5364
1126:sieve_extend.c ****                             best_mediumstep_faster = mediumstep_faster;
 16397              		.loc 1 1126 29 view .LVU5365
1127:sieve_extend.c ****                             best_vectorstep_faster = vectorstep_faster;
 16398              		.loc 1 1127 29 view .LVU5366
1128:sieve_extend.c ****                             if (option_verboselevel >=2) { printf(".(>)"); tuning_result_print(tuni
 16399              		.loc 1 1128 29 view .LVU5367
1129:sieve_extend.c ****                         }
 16400              		.loc 1 1129 29 view .LVU5368
 16401              	# sieve_extend.c:1129:                             if (option_verboselevel >=2) { printf(".(>)"); t
1129:sieve_extend.c ****                         }
 16402              		.loc 1 1129 32 is_stmt 0 view .LVU5369
 16403 07e0 837C2468 		cmp	DWORD PTR 104[rsp], 1	# %sfp,
 16403      01
 16404 07e5 0F8F0504 		jg	.L1385	#,
 16404      0000
1129:sieve_extend.c ****                         }
 16405              		.loc 1 1129 32 view .LVU5370
 16406 07eb 488B7424 		mov	rsi, QWORD PTR 40[rsp]	# mediumstep_faster, %sfp
GAS LISTING /tmp/cclewcPz.s 			page 435


 16406      28
 16407 07f0 488B5424 		mov	rdx, QWORD PTR 48[rsp]	# smallstep_faster, %sfp
 16407      30
 16408 07f5 4C897424 		mov	QWORD PTR 96[rsp], r14	# %sfp, vectorstep_faster
 16408      60
 16409              	# sieve_extend.c:1124:                             best_avg = tuning_result[tuning_result_index].av
1124:sieve_extend.c ****                             best_blocksize_bits = blocksize_bits;
 16410              		.loc 1 1124 38 view .LVU5371
 16411 07fa C5FB115C 		vmovsd	QWORD PTR 56[rsp], xmm3	# %sfp, _256
 16411      2438
 16412 0800 48897424 		mov	QWORD PTR 88[rsp], rsi	# %sfp, mediumstep_faster
 16412      58
 16413              	# sieve_extend.c:1125:                             best_blocksize_bits = blocksize_bits;
1125:sieve_extend.c ****                             best_smallstep_faster = smallstep_faster;
 16414              		.loc 1 1125 49 view .LVU5372
 16415 0805 48895C24 		mov	QWORD PTR 72[rsp], rbx	# %sfp, ivtmp.653
 16415      48
 16416 080a 48895424 		mov	QWORD PTR 80[rsp], rdx	# %sfp, smallstep_faster
 16416      50
 16417              	.LVL1037:
 16418              	.L1273:
1132:sieve_extend.c ****                     }
 16419              		.loc 1 1132 25 is_stmt 1 view .LVU5373
1132:sieve_extend.c ****                     }
 16420              		.loc 1 1132 25 is_stmt 0 view .LVU5374
 16421              	.LBE1127:
1107:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16422              		.loc 1 1107 141 is_stmt 1 view .LVU5375
 16423              	# sieve_extend.c:1107:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1107:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16424              		.loc 1 1107 151 is_stmt 0 view .LVU5376
 16425 080f 488B5424 		mov	rdx, QWORD PTR 112[rsp]	# freebits_steps, %sfp
 16425      70
 16426 0814 4983C560 		add	r13, 96	# ivtmp.652,
 16427 0818 4801D5   		add	rbp, rdx	# free_bits, freebits_steps
 16428              	.LVL1038:
1107:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16429              		.loc 1 1107 49 is_stmt 1 view .LVU5377
 16430 081b 4829D3   		sub	rbx, rdx	# ivtmp.653, freebits_steps
 16431              	.LVL1039:
 16432              	# sieve_extend.c:1107:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1107:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 16433              		.loc 1 1107 21 is_stmt 0 view .LVU5378
 16434 081e 4881FDFF 		cmp	rbp, 4095	# free_bits,
 16434      0F0000
 16435 0825 0F87ED00 		ja	.L1274	#,
 16435      0000
 16436              	.LVL1040:
 16437              	.L1278:
 16438              	.LBB1144:
1108:sieve_extend.c **** 
 16439              		.loc 1 1108 25 is_stmt 1 view .LVU5379
1111:sieve_extend.c ****                         tuning_result[tuning_result_index].maxints = maxints;
 16440              		.loc 1 1111 25 view .LVU5380
 16441              	# sieve_extend.c:1118:                         tuning_result[tuning_result_index].smallstep_faster 
1118:sieve_extend.c ****                         tuning_result[tuning_result_index].mediumstep_faster = mediumstep_faster;
 16442              		.loc 1 1118 77 is_stmt 0 view .LVU5381
GAS LISTING /tmp/cclewcPz.s 			page 436


 16443 082b 488B7C24 		mov	rdi, QWORD PTR 48[rsp]	# smallstep_faster, %sfp
 16443      30
 16444 0830 4C89FE   		mov	rsi, r15	# tuning_results, tuning_results
 16445              	# sieve_extend.c:1112:                         tuning_result[tuning_result_index].maxints = maxints
1112:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_duration = sample_duration;
 16446              		.loc 1 1112 68 view .LVU5382
 16447 0833 488B8C24 		mov	rcx, QWORD PTR 136[rsp]	# option_maxFactor.43_65, %sfp
 16447      88000000 
 16448              	# sieve_extend.c:1111:                         tuning_results++;
1111:sieve_extend.c ****                         tuning_result[tuning_result_index].maxints = maxints;
 16449              		.loc 1 1111 39 view .LVU5383
 16450 083b 4983C701 		add	r15, 1	# tuning_results,
 16451              	.LVL1041:
1112:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_duration = sample_duration;
 16452              		.loc 1 1112 25 is_stmt 1 view .LVU5384
 16453              	# sieve_extend.c:1114:                         tuning_result[tuning_result_index].sample_max = samp
1114:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_kb = blocksize_kb;
 16454              		.loc 1 1114 71 is_stmt 0 view .LVU5385
 16455 083f 4C8B4C24 		mov	r9, QWORD PTR 120[rsp]	# sample_max, %sfp
 16455      78
 16456              	# sieve_extend.c:1119:                         tuning_result[tuning_result_index].mediumstep_faster
1119:sieve_extend.c ****                         tuning_result[tuning_result_index].vectorstep_faster = vectorstep_faster;
 16457              		.loc 1 1119 78 view .LVU5386
 16458 0844 488B4424 		mov	rax, QWORD PTR 40[rsp]	# mediumstep_faster, %sfp
 16458      28
 16459              	# sieve_extend.c:1118:                         tuning_result[tuning_result_index].smallstep_faster 
1118:sieve_extend.c ****                         tuning_result[tuning_result_index].mediumstep_faster = mediumstep_faster;
 16460              		.loc 1 1118 77 view .LVU5387
 16461 0849 49897D20 		mov	QWORD PTR 32[r13], rdi	# MEM[base: _520, offset: 32B], smallstep_faster
 16462              	# sieve_extend.c:1121:                         tune_benchmark(tuning_result, tuning_result_index);
1121:sieve_extend.c **** 
 16463              		.loc 1 1121 25 view .LVU5388
 16464 084d 488B7C24 		mov	rdi, QWORD PTR 64[rsp]	#, %sfp
 16464      40
 16465              	# sieve_extend.c:1113:                         tuning_result[tuning_result_index].sample_duration =
1113:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_max = sample_max;
 16466              		.loc 1 1113 76 view .LVU5389
 16467 0852 C5FB10A4 		vmovsd	xmm4, QWORD PTR 128[rsp]	# sample_duration, %sfp
 16467      24800000 
 16467      00
 16468              	# sieve_extend.c:1112:                         tuning_result[tuning_result_index].maxints = maxints
1112:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_duration = sample_duration;
 16469              		.loc 1 1112 68 view .LVU5390
 16470 085b 49894D00 		mov	QWORD PTR 0[r13], rcx	# MEM[base: _520, offset: 0B], option_maxFactor.43_65
1113:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_max = sample_max;
 16471              		.loc 1 1113 25 is_stmt 1 view .LVU5391
 16472              	# sieve_extend.c:1114:                         tuning_result[tuning_result_index].sample_max = samp
1114:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_kb = blocksize_kb;
 16473              		.loc 1 1114 71 is_stmt 0 view .LVU5392
 16474 085f 4D894D38 		mov	QWORD PTR 56[r13], r9	# MEM[base: _520, offset: 56B], sample_max
 16475              	# sieve_extend.c:1115:                         tuning_result[tuning_result_index].blocksize_kb = bl
1115:sieve_extend.c ****                         tuning_result[tuning_result_index].free_bits = free_bits;
 16476              		.loc 1 1115 73 view .LVU5393
 16477 0863 4D896510 		mov	QWORD PTR 16[r13], r12	# MEM[base: _520, offset: 16B], blocksize_kb
 16478              	# sieve_extend.c:1116:                         tuning_result[tuning_result_index].free_bits = free_
1116:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_bits = blocksize_bits;
 16479              		.loc 1 1116 70 view .LVU5394
GAS LISTING /tmp/cclewcPz.s 			page 437


 16480 0867 49896D18 		mov	QWORD PTR 24[r13], rbp	# MEM[base: _520, offset: 24B], free_bits
 16481              	# sieve_extend.c:1117:                         tuning_result[tuning_result_index].blocksize_bits = 
1117:sieve_extend.c ****                         tuning_result[tuning_result_index].smallstep_faster = smallstep_faster;
 16482              		.loc 1 1117 75 view .LVU5395
 16483 086b 49895D08 		mov	QWORD PTR 8[r13], rbx	# MEM[base: _520, offset: 8B], ivtmp.653
 16484              	# sieve_extend.c:1119:                         tuning_result[tuning_result_index].mediumstep_faster
1119:sieve_extend.c ****                         tuning_result[tuning_result_index].vectorstep_faster = vectorstep_faster;
 16485              		.loc 1 1119 78 view .LVU5396
 16486 086f 49894528 		mov	QWORD PTR 40[r13], rax	# MEM[base: _520, offset: 40B], mediumstep_faster
 16487              	# sieve_extend.c:1120:                         tuning_result[tuning_result_index].vectorstep_faster
1120:sieve_extend.c ****                         tune_benchmark(tuning_result, tuning_result_index);
 16488              		.loc 1 1120 78 view .LVU5397
 16489 0873 4D897530 		mov	QWORD PTR 48[r13], r14	# MEM[base: _520, offset: 48B], vectorstep_faster
 16490              	# sieve_extend.c:1113:                         tuning_result[tuning_result_index].sample_duration =
1113:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_max = sample_max;
 16491              		.loc 1 1113 76 view .LVU5398
 16492 0877 C4C17B11 		vmovsd	QWORD PTR 64[r13], xmm4	# MEM[base: _520, offset: 64B], sample_duration
 16492      6540
1114:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_kb = blocksize_kb;
 16493              		.loc 1 1114 25 is_stmt 1 view .LVU5399
1115:sieve_extend.c ****                         tuning_result[tuning_result_index].free_bits = free_bits;
 16494              		.loc 1 1115 25 view .LVU5400
1116:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_bits = blocksize_bits;
 16495              		.loc 1 1116 25 view .LVU5401
1117:sieve_extend.c ****                         tuning_result[tuning_result_index].smallstep_faster = smallstep_faster;
 16496              		.loc 1 1117 25 view .LVU5402
1118:sieve_extend.c ****                         tuning_result[tuning_result_index].mediumstep_faster = mediumstep_faster;
 16497              		.loc 1 1118 25 view .LVU5403
1119:sieve_extend.c ****                         tuning_result[tuning_result_index].vectorstep_faster = vectorstep_faster;
 16498              		.loc 1 1119 25 view .LVU5404
1120:sieve_extend.c ****                         tune_benchmark(tuning_result, tuning_result_index);
 16499              		.loc 1 1120 25 view .LVU5405
1121:sieve_extend.c **** 
 16500              		.loc 1 1121 25 view .LVU5406
 16501 087d E8000000 		call	tune_benchmark	#
 16501      00
 16502              	.LVL1042:
1123:sieve_extend.c ****                             best_avg = tuning_result[tuning_result_index].avg;
 16503              		.loc 1 1123 25 view .LVU5407
 16504              	# sieve_extend.c:1123:                         if ( tuning_result[tuning_result_index].avg > best_a
1123:sieve_extend.c ****                             best_avg = tuning_result[tuning_result_index].avg;
 16505              		.loc 1 1123 64 is_stmt 0 view .LVU5408
 16506 0882 C4C17B10 		vmovsd	xmm3, QWORD PTR 88[r13]	# _256, MEM[base: _520, offset: 88B]
 16506      5D58
 16507              	# sieve_extend.c:1123:                         if ( tuning_result[tuning_result_index].avg > best_a
1123:sieve_extend.c ****                             best_avg = tuning_result[tuning_result_index].avg;
 16508              		.loc 1 1123 28 view .LVU5409
 16509 0888 C5F92F5C 		vcomisd	xmm3, QWORD PTR 56[rsp]	# _256, %sfp
 16509      2438
 16510 088e 0F874CFF 		ja	.L1275	#,
 16510      FFFF
 16511              	.L1276:
1131:sieve_extend.c ****                         tuning_result_index++;
 16512              		.loc 1 1131 25 is_stmt 1 view .LVU5410
 16513              	# sieve_extend.c:1131:                         if (option_verboselevel >= 3) { printf("...."); tuni
1131:sieve_extend.c ****                         tuning_result_index++;
 16514              		.loc 1 1131 28 is_stmt 0 view .LVU5411
GAS LISTING /tmp/cclewcPz.s 			page 438


 16515 0894 837C2468 		cmp	DWORD PTR 104[rsp], 2	# %sfp,
 16515      02
 16516 0899 0F8E70FF 		jle	.L1273	#,
 16516      FFFF
1131:sieve_extend.c ****                         tuning_result_index++;
 16517              		.loc 1 1131 57 is_stmt 1 view .LVU5412
 16518              	.LVL1043:
 16519              	.LBB1128:
 16520              	.LBI1128:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16521              		.loc 3 105 1 view .LVU5413
 16522              	.LBB1129:
 16523              		.loc 3 107 3 view .LVU5414
 16524              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16525              		.loc 3 107 10 is_stmt 0 view .LVU5415
 16526 089f 488D3500 		lea	rsi, .LC54[rip]	#,
 16526      000000
 16527 08a6 BF010000 		mov	edi, 1	#,
 16527      00
 16528 08ab 31C0     		xor	eax, eax	#
 16529 08ad E8000000 		call	__printf_chk@PLT	#
 16529      00
 16530              	.LVL1044:
 16531              		.loc 3 107 10 view .LVU5416
 16532              	.LBE1129:
 16533              	.LBE1128:
1131:sieve_extend.c ****                         tuning_result_index++;
 16534              		.loc 1 1131 73 is_stmt 1 view .LVU5417
 16535              	.LBB1130:
 16536              	.LBI1130:
1045:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
 16537              		.loc 1 1045 20 view .LVU5418
 16538              	.LBB1131:
1046:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
 16539              		.loc 1 1046 5 view .LVU5419
 16540              	.LBB1132:
 16541              	.LBI1132:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16542              		.loc 3 105 1 view .LVU5420
 16543              	.LBB1133:
 16544              		.loc 3 107 3 view .LVU5421
 16545              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16546              		.loc 3 107 10 is_stmt 0 view .LVU5422
 16547 08b2 498B4538 		mov	rax, QWORD PTR 56[r13]	# MEM[base: _520, offset: 56B], MEM[base: _520, offset: 56B]
 16548 08b6 BF010000 		mov	edi, 1	#,
 16548      00
 16549 08bb C4C17B10 		vmovsd	xmm0, QWORD PTR 80[r13]	# MEM[base: _520, offset: 80B], MEM[base: _520, offset: 80B]
 16549      4550
 16550 08c1 498B4D10 		mov	rcx, QWORD PTR 16[r13]	# MEM[base: _520, offset: 16B], MEM[base: _520, offset: 16B]
 16551 08c5 498B5508 		mov	rdx, QWORD PTR 8[r13]	# MEM[base: _520, offset: 8B], MEM[base: _520, offset: 8B]
 16552 08c9 48894424 		mov	QWORD PTR 24[rsp], rax	#, MEM[base: _520, offset: 56B]
 16552      18
 16553 08ce B8030000 		mov	eax, 3	#,
 16553      00
 16554 08d3 498B7548 		mov	rsi, QWORD PTR 72[r13]	# MEM[base: _520, offset: 72B], MEM[base: _520, offset: 72B]
 16555 08d7 48897424 		mov	QWORD PTR 16[rsp], rsi	#, MEM[base: _520, offset: 72B]
 16555      10
GAS LISTING /tmp/cclewcPz.s 			page 439


 16556 08dc 488D3500 		lea	rsi, .LC53[rip]	#,
 16556      000000
 16557 08e3 4D8B4530 		mov	r8, QWORD PTR 48[r13]	# MEM[base: _520, offset: 48B], MEM[base: _520, offset: 48B]
 16558 08e7 4C894424 		mov	QWORD PTR 8[rsp], r8	#, MEM[base: _520, offset: 48B]
 16558      08
 16559 08ec 4D8B5528 		mov	r10, QWORD PTR 40[r13]	# MEM[base: _520, offset: 40B], MEM[base: _520, offset: 40B]
 16560 08f0 4C891424 		mov	QWORD PTR [rsp], r10	#, MEM[base: _520, offset: 40B]
 16561 08f4 4D8B4D20 		mov	r9, QWORD PTR 32[r13]	#, MEM[base: _520, offset: 32B]
 16562 08f8 4D8B4518 		mov	r8, QWORD PTR 24[r13]	#, MEM[base: _520, offset: 24B]
 16563 08fc C4C17B10 		vmovsd	xmm2, QWORD PTR 88[r13]	#, MEM[base: _520, offset: 88B]
 16563      5558
 16564 0902 C4C17B10 		vmovsd	xmm1, QWORD PTR 64[r13]	#, MEM[base: _520, offset: 64B]
 16564      4D40
 16565 0908 E8000000 		call	__printf_chk@PLT	#
 16565      00
 16566              	.LVL1045:
 16567              		.loc 3 107 10 view .LVU5423
 16568              	.LBE1133:
 16569              	.LBE1132:
 16570              	# sieve_extend.c:1051: }
1051:sieve_extend.c **** 
 16571              		.loc 1 1051 1 view .LVU5424
 16572 090d E9FDFEFF 		jmp	.L1273	#
 16572      FF
 16573              	.LVL1046:
 16574              		.p2align 4,,7
 16575 0912 660F1F44 		.p2align 3
 16575      0000
 16576              	.L1274:
1051:sieve_extend.c **** 
 16577              		.loc 1 1051 1 view .LVU5425
 16578              	.LBE1131:
 16579              	.LBE1130:
 16580              	.LBE1144:
 16581              	.LBE1146:
1106:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16582              		.loc 1 1106 67 is_stmt 1 view .LVU5426
 16583              	# sieve_extend.c:1106:                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_
1106:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16584              		.loc 1 1106 80 is_stmt 0 view .LVU5427
 16585 0918 49D1EC   		shr	r12	# blocksize_kb
 16586              	.LVL1047:
1106:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16587              		.loc 1 1106 50 is_stmt 1 view .LVU5428
 16588              	# sieve_extend.c:1106:                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_
1106:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 16589              		.loc 1 1106 17 is_stmt 0 view .LVU5429
 16590 091b 836C246C 		sub	DWORD PTR 108[rsp], 1	# %sfp,
 16590      01
 16591 0920 0F859AFE 		jne	.L1280	#,
 16591      FFFF
 16592              	.LBE1148:
1105:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 16593              		.loc 1 1105 101 is_stmt 1 view .LVU5430
 16594              	# sieve_extend.c:1105:             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep
1105:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 16595              		.loc 1 1105 119 is_stmt 0 view .LVU5431
GAS LISTING /tmp/cclewcPz.s 			page 440


 16596 0926 4C03B424 		add	r14, QWORD PTR 144[rsp]	# vectorstep_faster, %sfp
 16596      90000000 
 16597              	.LVL1048:
1105:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 16598              		.loc 1 1105 67 is_stmt 1 view .LVU5432
 16599              	# sieve_extend.c:1105:             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep
1105:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 16600              		.loc 1 1105 13 is_stmt 0 view .LVU5433
 16601 092e 4981FE00 		cmp	r14, 256	# vectorstep_faster,
 16601      010000
 16602 0935 0F8675FE 		jbe	.L1282	#,
 16602      FFFF
 16603              	.LBE1124:
1104:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 16604              		.loc 1 1104 94 is_stmt 1 view .LVU5434
 16605              	# sieve_extend.c:1104:         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_fast
1104:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 16606              		.loc 1 1104 112 is_stmt 0 view .LVU5435
 16607 093b 4C8BB424 		mov	r14, QWORD PTR 152[rsp]	# smallstep_faster_steps, %sfp
 16607      98000000 
 16608              	.LVL1049:
1104:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 16609              		.loc 1 1104 112 view .LVU5436
 16610 0943 4C017424 		add	QWORD PTR 40[rsp], r14	# %sfp, smallstep_faster_steps
 16610      28
 16611              	.LVL1050:
1104:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 16612              		.loc 1 1104 112 view .LVU5437
 16613 0948 4C8B6424 		mov	r12, QWORD PTR 40[rsp]	# mediumstep_faster, %sfp
 16613      28
 16614              	.LVL1051:
1104:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 16615              		.loc 1 1104 62 is_stmt 1 view .LVU5438
 16616              	# sieve_extend.c:1104:         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_fast
1104:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 16617              		.loc 1 1104 9 is_stmt 0 view .LVU5439
 16618 094d 4983FC40 		cmp	r12, 64	# mediumstep_faster,
 16619 0951 0F8649FE 		jbe	.L1284	#,
 16619      FFFF
 16620              	.LBE1123:
1103:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16621              		.loc 1 1103 75 is_stmt 1 view .LVU5440
 16622              	# sieve_extend.c:1103:     for (counter_t smallstep_faster = 0; smallstep_faster <= WORD_SIZE/2; sm
1103:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16623              		.loc 1 1103 92 is_stmt 0 view .LVU5441
 16624 0957 488B9C24 		mov	rbx, QWORD PTR 152[rsp]	# smallstep_faster_steps, %sfp
 16624      98000000 
 16625 095f 48015C24 		add	QWORD PTR 48[rsp], rbx	# %sfp, smallstep_faster_steps
 16625      30
 16626              	.LVL1052:
1103:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16627              		.loc 1 1103 92 view .LVU5442
 16628 0964 4C8B6C24 		mov	r13, QWORD PTR 48[rsp]	# smallstep_faster, %sfp
 16628      30
 16629              	.LVL1053:
1103:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16630              		.loc 1 1103 42 is_stmt 1 view .LVU5443
GAS LISTING /tmp/cclewcPz.s 			page 441


 16631              	# sieve_extend.c:1103:     for (counter_t smallstep_faster = 0; smallstep_faster <= WORD_SIZE/2; sm
1103:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 16632              		.loc 1 1103 5 is_stmt 0 view .LVU5444
 16633 0969 4983FD20 		cmp	r13, 32	# smallstep_faster,
 16634 096d 0F861FFE 		jbe	.L1272	#,
 16634      FFFF
 16635              	.LBE1153:
1138:sieve_extend.c ****         printf("%ju results. Inital best blocksize: %ju; best smallstep %ju; best mediumstep %ju; b
 16636              		.loc 1 1138 5 is_stmt 1 view .LVU5445
 16637              	# sieve_extend.c:1138:     if (option_verboselevel >= 2) {
1138:sieve_extend.c ****         printf("%ju results. Inital best blocksize: %ju; best smallstep %ju; best mediumstep %ju; b
 16638              		.loc 1 1138 8 is_stmt 0 view .LVU5446
 16639 0973 837C2468 		cmp	DWORD PTR 104[rsp], 1	# %sfp,
 16639      01
 16640 0978 7E3A     		jle	.L1285	#,
1139:sieve_extend.c ****         printf("Best options\n");
 16641              		.loc 1 1139 9 is_stmt 1 view .LVU5447
 16642              	.LVL1054:
 16643              	.LBB1154:
 16644              	.LBI1154:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16645              		.loc 3 105 1 view .LVU5448
 16646              	.LBB1155:
 16647              		.loc 3 107 3 view .LVU5449
 16648              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16649              		.loc 3 107 10 is_stmt 0 view .LVU5450
 16650 097a 488B6C24 		mov	rbp, QWORD PTR 96[rsp]	# best_vectorstep_faster, %sfp
 16650      60
 16651              	.LVL1055:
 16652              		.loc 3 107 10 view .LVU5451
 16653 097f BF010000 		mov	edi, 1	#,
 16653      00
 16654 0984 4C8B4C24 		mov	r9, QWORD PTR 88[rsp]	#, %sfp
 16654      58
 16655 0989 4C89FA   		mov	rdx, r15	#, tuning_results
 16656 098c 4C8B4424 		mov	r8, QWORD PTR 80[rsp]	#, %sfp
 16656      50
 16657 0991 488D3500 		lea	rsi, .LC55[rip]	#,
 16657      000000
 16658 0998 488B4C24 		mov	rcx, QWORD PTR 72[rsp]	#, %sfp
 16658      48
 16659 099d 31C0     		xor	eax, eax	#
 16660 099f 48892C24 		mov	QWORD PTR [rsp], rbp	#, best_vectorstep_faster
 16661 09a3 E8000000 		call	__printf_chk@PLT	#
 16661      00
 16662              	.LVL1056:
 16663              		.loc 3 107 10 view .LVU5452
 16664              	.LBE1155:
 16665              	.LBE1154:
1140:sieve_extend.c ****     }
 16666              		.loc 1 1140 9 is_stmt 1 view .LVU5453
 16667              	.LBB1156:
 16668              	.LBI1156:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16669              		.loc 3 105 1 view .LVU5454
 16670              	.LBB1157:
 16671              		.loc 3 107 3 view .LVU5455
GAS LISTING /tmp/cclewcPz.s 			page 442


 16672              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16673              		.loc 3 107 10 is_stmt 0 view .LVU5456
 16674 09a8 488D3D00 		lea	rdi, .LC56[rip]	#,
 16674      000000
 16675 09af E8000000 		call	puts@PLT	#
 16675      00
 16676              	.LVL1057:
 16677              	.L1285:
 16678              		.loc 3 107 10 view .LVU5457
 16679              	.LBE1157:
 16680              	.LBE1156:
 16681              	.LBB1158:
 16682              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16683              		.loc 1 1158 24 view .LVU5458
 16684 09b4 4531DB   		xor	r11d, r11d	# step
 16685              	.LBE1158:
 16686              	.LBB1159:
 16687              	# sieve_extend.c:1150:                 for (counter_t tuning_result_index=0; tuning_result_index<mi
1150:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 16688              		.loc 1 1150 75 view .LVU5459
 16689 09b7 41BE0A00 		mov	r14d, 10	# tmp476,
 16689      0000
 16690 09bd 4C8B6C24 		mov	r13, QWORD PTR 120[rsp]	# sample_max, %sfp
 16690      78
 16691              	.LVL1058:
1150:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 16692              		.loc 1 1150 75 view .LVU5460
 16693 09c2 4C8B6424 		mov	r12, QWORD PTR 64[rsp]	# tuning_result, %sfp
 16693      40
 16694              	.LVL1059:
1150:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 16695              		.loc 1 1150 75 view .LVU5461
 16696 09c7 4C895C24 		mov	QWORD PTR 48[rsp], r11	# %sfp, step
 16696      30
 16697              	.LVL1060:
 16698              	.L1290:
1150:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 16699              		.loc 1 1150 75 view .LVU5462
 16700              	.LBE1159:
1143:sieve_extend.c ****         qsort(tuning_result, (size_t)tuning_results, sizeof(tuning_result_type), compare_tuning_res
 16701              		.loc 1 1143 11 is_stmt 1 view .LVU5463
 16702 09cc 4983FF04 		cmp	r15, 4	# tuning_results,
 16703 09d0 0F862E04 		jbe	.L1386	#,
 16703      0000
1144:sieve_extend.c ****         step++;
 16704              		.loc 1 1144 9 view .LVU5464
 16705 09d6 488D0D00 		lea	rcx, compare_tuning_result[rip]	#,
 16705      000000
 16706 09dd BA600000 		mov	edx, 96	#,
 16706      00
 16707 09e2 4C89FE   		mov	rsi, r15	#, tuning_results
 16708 09e5 4C89E7   		mov	rdi, r12	#, tuning_result
 16709 09e8 E8000000 		call	qsort@PLT	#
 16709      00
 16710              	.LVL1061:
1145:sieve_extend.c ****         if (option_verboselevel >= 2) {
GAS LISTING /tmp/cclewcPz.s 			page 443


 16711              		.loc 1 1145 9 view .LVU5465
1146:sieve_extend.c ****             tuning_result_index = 0;
 16712              		.loc 1 1146 9 view .LVU5466
 16713              	# sieve_extend.c:1145:         step++;
1145:sieve_extend.c ****         if (option_verboselevel >= 2) {
 16714              		.loc 1 1145 13 is_stmt 0 view .LVU5467
 16715 09ed 48834424 		add	QWORD PTR 48[rsp], 1	# %sfp,
 16715      3001
 16716              	.LVL1062:
 16717              	# sieve_extend.c:1146:         if (option_verboselevel >= 2) {
1146:sieve_extend.c ****             tuning_result_index = 0;
 16718              		.loc 1 1146 12 view .LVU5468
 16719 09f3 837C2468 		cmp	DWORD PTR 104[rsp], 1	# %sfp,
 16719      01
 16720 09f8 0F8F8902 		jg	.L1286	#,
 16720      0000
 16721              	.L1288:
1156:sieve_extend.c **** 
 16722              		.loc 1 1156 9 is_stmt 1 view .LVU5469
 16723              	# sieve_extend.c:1156:         tuning_results = tuning_results / 2;
1156:sieve_extend.c **** 
 16724              		.loc 1 1156 24 is_stmt 0 view .LVU5470
 16725 09fe 49D1EF   		shr	r15	# tuning_results
 16726              	.LVL1063:
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16727              		.loc 1 1158 9 is_stmt 1 view .LVU5471
 16728              	.LBB1168:
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16729              		.loc 1 1158 14 view .LVU5472
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16730              		.loc 1 1158 29 view .LVU5473
 16731              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16732              		.loc 1 1158 24 is_stmt 0 view .LVU5474
 16733 0a01 31ED     		xor	ebp, ebp	# i
 16734 0a03 4D89FB   		mov	r11, r15	# tmp490, tuning_results
 16735 0a06 498D5C24 		lea	rbx, 56[r12]	# ivtmp.634,
 16735      38
 16736 0a0b 4183E307 		and	r11d, 7	# tmp490,
 16737 0a0f 0F84D300 		je	.L1287	#,
 16737      0000
 16738 0a15 4983FB01 		cmp	r11, 1	# tmp490,
 16739 0a19 0F84AA00 		je	.L1345	#,
 16739      0000
 16740 0a1f 4983FB02 		cmp	r11, 2	# tmp490,
 16741 0a23 0F848A00 		je	.L1346	#,
 16741      0000
 16742 0a29 4983FB03 		cmp	r11, 3	# tmp490,
 16743 0a2d 746E     		je	.L1347	#,
 16744 0a2f 4983FB04 		cmp	r11, 4	# tmp490,
 16745 0a33 7452     		je	.L1348	#,
 16746 0a35 4983FB05 		cmp	r11, 5	# tmp490,
 16747 0a39 7436     		je	.L1349	#,
 16748 0a3b 4983FB06 		cmp	r11, 6	# tmp490,
 16749 0a3f 741A     		je	.L1350	#,
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16750              		.loc 1 1159 13 is_stmt 1 view .LVU5475
GAS LISTING /tmp/cclewcPz.s 			page 444


 16751 0a41 31F6     		xor	esi, esi	#
 16752 0a43 4C89E7   		mov	rdi, r12	#, tuning_result
 16753 0a46 E8000000 		call	tune_benchmark	#
 16753      00
 16754              	.LVL1064:
1160:sieve_extend.c ****         }
 16755              		.loc 1 1160 13 view .LVU5476
 16756              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16757              		.loc 1 1158 48 is_stmt 0 view .LVU5477
 16758 0a4b BD010000 		mov	ebp, 1	# i,
 16758      00
 16759              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16760              		.loc 1 1160 41 view .LVU5478
 16761 0a50 4C012B   		add	QWORD PTR [rbx], r13	# MEM[base: _159, offset: 0B], sample_max
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16762              		.loc 1 1158 47 is_stmt 1 view .LVU5479
 16763              	.LVL1065:
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16764              		.loc 1 1158 29 view .LVU5480
 16765 0a53 498D9C24 		lea	rbx, 152[r12]	# ivtmp.634,
 16765      98000000 
 16766              	.L1350:
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16767              		.loc 1 1159 13 view .LVU5481
 16768 0a5b 4889EE   		mov	rsi, rbp	#, i
 16769 0a5e 4C89E7   		mov	rdi, r12	#, tuning_result
 16770 0a61 E8000000 		call	tune_benchmark	#
 16770      00
 16771              	.LVL1066:
1160:sieve_extend.c ****         }
 16772              		.loc 1 1160 13 view .LVU5482
 16773              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16774              		.loc 1 1158 48 is_stmt 0 view .LVU5483
 16775 0a66 4883C501 		add	rbp, 1	# i,
 16776              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16777              		.loc 1 1160 41 view .LVU5484
 16778 0a6a 4C012B   		add	QWORD PTR [rbx], r13	# MEM[base: _159, offset: 0B], sample_max
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16779              		.loc 1 1158 47 is_stmt 1 view .LVU5485
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16780              		.loc 1 1158 29 view .LVU5486
 16781 0a6d 4883C360 		add	rbx, 96	# ivtmp.634,
 16782              	.L1349:
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16783              		.loc 1 1159 13 view .LVU5487
 16784 0a71 4889EE   		mov	rsi, rbp	#, i
 16785 0a74 4C89E7   		mov	rdi, r12	#, tuning_result
 16786 0a77 E8000000 		call	tune_benchmark	#
 16786      00
 16787              	.LVL1067:
1160:sieve_extend.c ****         }
 16788              		.loc 1 1160 13 view .LVU5488
 16789              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
GAS LISTING /tmp/cclewcPz.s 			page 445


1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16790              		.loc 1 1158 48 is_stmt 0 view .LVU5489
 16791 0a7c 4883C501 		add	rbp, 1	# i,
 16792              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16793              		.loc 1 1160 41 view .LVU5490
 16794 0a80 4C012B   		add	QWORD PTR [rbx], r13	# MEM[base: _159, offset: 0B], sample_max
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16795              		.loc 1 1158 47 is_stmt 1 view .LVU5491
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16796              		.loc 1 1158 29 view .LVU5492
 16797 0a83 4883C360 		add	rbx, 96	# ivtmp.634,
 16798              	.L1348:
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16799              		.loc 1 1159 13 view .LVU5493
 16800 0a87 4889EE   		mov	rsi, rbp	#, i
 16801 0a8a 4C89E7   		mov	rdi, r12	#, tuning_result
 16802 0a8d E8000000 		call	tune_benchmark	#
 16802      00
 16803              	.LVL1068:
1160:sieve_extend.c ****         }
 16804              		.loc 1 1160 13 view .LVU5494
 16805              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16806              		.loc 1 1158 48 is_stmt 0 view .LVU5495
 16807 0a92 4883C501 		add	rbp, 1	# i,
 16808              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16809              		.loc 1 1160 41 view .LVU5496
 16810 0a96 4C012B   		add	QWORD PTR [rbx], r13	# MEM[base: _159, offset: 0B], sample_max
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16811              		.loc 1 1158 47 is_stmt 1 view .LVU5497
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16812              		.loc 1 1158 29 view .LVU5498
 16813 0a99 4883C360 		add	rbx, 96	# ivtmp.634,
 16814              	.L1347:
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16815              		.loc 1 1159 13 view .LVU5499
 16816 0a9d 4889EE   		mov	rsi, rbp	#, i
 16817 0aa0 4C89E7   		mov	rdi, r12	#, tuning_result
 16818 0aa3 E8000000 		call	tune_benchmark	#
 16818      00
 16819              	.LVL1069:
1160:sieve_extend.c ****         }
 16820              		.loc 1 1160 13 view .LVU5500
 16821              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16822              		.loc 1 1158 48 is_stmt 0 view .LVU5501
 16823 0aa8 4883C501 		add	rbp, 1	# i,
 16824              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16825              		.loc 1 1160 41 view .LVU5502
 16826 0aac 4C012B   		add	QWORD PTR [rbx], r13	# MEM[base: _159, offset: 0B], sample_max
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16827              		.loc 1 1158 47 is_stmt 1 view .LVU5503
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16828              		.loc 1 1158 29 view .LVU5504
GAS LISTING /tmp/cclewcPz.s 			page 446


 16829 0aaf 4883C360 		add	rbx, 96	# ivtmp.634,
 16830              	.L1346:
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16831              		.loc 1 1159 13 view .LVU5505
 16832 0ab3 4889EE   		mov	rsi, rbp	#, i
 16833 0ab6 4C89E7   		mov	rdi, r12	#, tuning_result
 16834 0ab9 E8000000 		call	tune_benchmark	#
 16834      00
 16835              	.LVL1070:
1160:sieve_extend.c ****         }
 16836              		.loc 1 1160 13 view .LVU5506
 16837              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16838              		.loc 1 1158 48 is_stmt 0 view .LVU5507
 16839 0abe 4883C501 		add	rbp, 1	# i,
 16840              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16841              		.loc 1 1160 41 view .LVU5508
 16842 0ac2 4C012B   		add	QWORD PTR [rbx], r13	# MEM[base: _159, offset: 0B], sample_max
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16843              		.loc 1 1158 47 is_stmt 1 view .LVU5509
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16844              		.loc 1 1158 29 view .LVU5510
 16845 0ac5 4883C360 		add	rbx, 96	# ivtmp.634,
 16846              	.L1345:
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16847              		.loc 1 1159 13 view .LVU5511
 16848 0ac9 4889EE   		mov	rsi, rbp	#, i
 16849 0acc 4C89E7   		mov	rdi, r12	#, tuning_result
 16850              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16851              		.loc 1 1158 48 is_stmt 0 view .LVU5512
 16852 0acf 4883C501 		add	rbp, 1	# i,
 16853              	# sieve_extend.c:1159:             tune_benchmark(tuning_result, i);
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16854              		.loc 1 1159 13 view .LVU5513
 16855 0ad3 E8000000 		call	tune_benchmark	#
 16855      00
 16856              	.LVL1071:
1160:sieve_extend.c ****         }
 16857              		.loc 1 1160 13 is_stmt 1 view .LVU5514
 16858              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16859              		.loc 1 1160 41 is_stmt 0 view .LVU5515
 16860 0ad8 4C012B   		add	QWORD PTR [rbx], r13	# MEM[base: _159, offset: 0B], sample_max
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16861              		.loc 1 1158 47 is_stmt 1 view .LVU5516
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16862              		.loc 1 1158 29 view .LVU5517
 16863 0adb 4883C360 		add	rbx, 96	# ivtmp.634,
 16864              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16865              		.loc 1 1158 9 is_stmt 0 view .LVU5518
 16866 0adf 4939EF   		cmp	r15, rbp	# tuning_results, i
 16867 0ae2 0F84E4FE 		je	.L1290	#,
 16867      FFFF
 16868              	.L1287:
GAS LISTING /tmp/cclewcPz.s 			page 447


1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16869              		.loc 1 1159 13 is_stmt 1 view .LVU5519
 16870 0ae8 4889EE   		mov	rsi, rbp	#, i
 16871 0aeb 4C89E7   		mov	rdi, r12	#, tuning_result
 16872 0aee E8000000 		call	tune_benchmark	#
 16872      00
 16873              	.LVL1072:
1160:sieve_extend.c ****         }
 16874              		.loc 1 1160 13 view .LVU5520
 16875 0af3 488D7B60 		lea	rdi, 96[rbx]	# tmp492,
 16876              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16877              		.loc 1 1160 41 is_stmt 0 view .LVU5521
 16878 0af7 4C012B   		add	QWORD PTR [rbx], r13	# MEM[base: _159, offset: 0B], sample_max
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16879              		.loc 1 1158 47 is_stmt 1 view .LVU5522
 16880 0afa 48897C24 		mov	QWORD PTR 40[rsp], rdi	# %sfp, tmp492
 16880      28
 16881              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16882              		.loc 1 1158 48 is_stmt 0 view .LVU5523
 16883 0aff 488D7501 		lea	rsi, 1[rbp]	# tmp491,
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16884              		.loc 1 1158 29 is_stmt 1 view .LVU5524
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16885              		.loc 1 1159 13 view .LVU5525
 16886 0b03 4C89E7   		mov	rdi, r12	#, tuning_result
 16887 0b06 E8000000 		call	tune_benchmark	#
 16887      00
 16888              	.LVL1073:
1160:sieve_extend.c ****         }
 16889              		.loc 1 1160 13 view .LVU5526
 16890              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16891              		.loc 1 1160 41 is_stmt 0 view .LVU5527
 16892 0b0b 4C8B4C24 		mov	r9, QWORD PTR 40[rsp]	# tmp492, %sfp
 16892      28
 16893 0b10 488D83C0 		lea	rax, 192[rbx]	# ivtmp.634,
 16893      000000
 16894              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16895              		.loc 1 1158 48 view .LVU5528
 16896 0b17 488D7502 		lea	rsi, 2[rbp]	# i,
 16897              	# sieve_extend.c:1159:             tune_benchmark(tuning_result, i);
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16898              		.loc 1 1159 13 view .LVU5529
 16899 0b1b 4C89E7   		mov	rdi, r12	#, tuning_result
 16900 0b1e 48894424 		mov	QWORD PTR 40[rsp], rax	# %sfp, ivtmp.634
 16900      28
 16901              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16902              		.loc 1 1160 41 view .LVU5530
 16903 0b23 4D0129   		add	QWORD PTR [r9], r13	# MEM[base: _159, offset: 0B], sample_max
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16904              		.loc 1 1158 47 is_stmt 1 view .LVU5531
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16905              		.loc 1 1158 29 view .LVU5532
GAS LISTING /tmp/cclewcPz.s 			page 448


1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16906              		.loc 1 1159 13 view .LVU5533
 16907 0b26 E8000000 		call	tune_benchmark	#
 16907      00
 16908              	.LVL1074:
1160:sieve_extend.c ****         }
 16909              		.loc 1 1160 13 view .LVU5534
 16910              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16911              		.loc 1 1160 41 is_stmt 0 view .LVU5535
 16912 0b2b 488B7424 		mov	rsi, QWORD PTR 40[rsp]	# ivtmp.634, %sfp
 16912      28
 16913 0b30 4C8D8320 		lea	r8, 288[rbx]	# ivtmp.634,
 16913      010000
 16914 0b37 4C894424 		mov	QWORD PTR 40[rsp], r8	# %sfp, ivtmp.634
 16914      28
 16915              	# sieve_extend.c:1159:             tune_benchmark(tuning_result, i);
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16916              		.loc 1 1159 13 view .LVU5536
 16917 0b3c 4C89E7   		mov	rdi, r12	#, tuning_result
 16918              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16919              		.loc 1 1160 41 view .LVU5537
 16920 0b3f 4C012E   		add	QWORD PTR [rsi], r13	# MEM[base: _159, offset: 0B], sample_max
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16921              		.loc 1 1158 47 is_stmt 1 view .LVU5538
 16922              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16923              		.loc 1 1158 48 is_stmt 0 view .LVU5539
 16924 0b42 488D7503 		lea	rsi, 3[rbp]	# i,
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16925              		.loc 1 1158 29 is_stmt 1 view .LVU5540
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16926              		.loc 1 1159 13 view .LVU5541
 16927 0b46 E8000000 		call	tune_benchmark	#
 16927      00
 16928              	.LVL1075:
1160:sieve_extend.c ****         }
 16929              		.loc 1 1160 13 view .LVU5542
 16930              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16931              		.loc 1 1160 41 is_stmt 0 view .LVU5543
 16932 0b4b 4C8B5424 		mov	r10, QWORD PTR 40[rsp]	# ivtmp.634, %sfp
 16932      28
 16933 0b50 488D9380 		lea	rdx, 384[rbx]	# ivtmp.634,
 16933      010000
 16934              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16935              		.loc 1 1158 48 view .LVU5544
 16936 0b57 488D7504 		lea	rsi, 4[rbp]	# i,
 16937              	# sieve_extend.c:1159:             tune_benchmark(tuning_result, i);
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16938              		.loc 1 1159 13 view .LVU5545
 16939 0b5b 4C89E7   		mov	rdi, r12	#, tuning_result
 16940 0b5e 48895424 		mov	QWORD PTR 40[rsp], rdx	# %sfp, ivtmp.634
 16940      28
 16941              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
GAS LISTING /tmp/cclewcPz.s 			page 449


1160:sieve_extend.c ****         }
 16942              		.loc 1 1160 41 view .LVU5546
 16943 0b63 4D012A   		add	QWORD PTR [r10], r13	# MEM[base: _159, offset: 0B], sample_max
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16944              		.loc 1 1158 47 is_stmt 1 view .LVU5547
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16945              		.loc 1 1158 29 view .LVU5548
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16946              		.loc 1 1159 13 view .LVU5549
 16947 0b66 E8000000 		call	tune_benchmark	#
 16947      00
 16948              	.LVL1076:
1160:sieve_extend.c ****         }
 16949              		.loc 1 1160 13 view .LVU5550
 16950              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16951              		.loc 1 1160 41 is_stmt 0 view .LVU5551
 16952 0b6b 488B4C24 		mov	rcx, QWORD PTR 40[rsp]	# ivtmp.634, %sfp
 16952      28
 16953 0b70 4C8D9BE0 		lea	r11, 480[rbx]	# ivtmp.634,
 16953      010000
 16954              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16955              		.loc 1 1158 48 view .LVU5552
 16956 0b77 488D7505 		lea	rsi, 5[rbp]	# i,
 16957              	# sieve_extend.c:1159:             tune_benchmark(tuning_result, i);
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16958              		.loc 1 1159 13 view .LVU5553
 16959 0b7b 4C89E7   		mov	rdi, r12	#, tuning_result
 16960 0b7e 4C895C24 		mov	QWORD PTR 40[rsp], r11	# %sfp, ivtmp.634
 16960      28
 16961              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16962              		.loc 1 1160 41 view .LVU5554
 16963 0b83 4C0129   		add	QWORD PTR [rcx], r13	# MEM[base: _159, offset: 0B], sample_max
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16964              		.loc 1 1158 47 is_stmt 1 view .LVU5555
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16965              		.loc 1 1158 29 view .LVU5556
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16966              		.loc 1 1159 13 view .LVU5557
 16967 0b86 E8000000 		call	tune_benchmark	#
 16967      00
 16968              	.LVL1077:
1160:sieve_extend.c ****         }
 16969              		.loc 1 1160 13 view .LVU5558
 16970              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16971              		.loc 1 1160 41 is_stmt 0 view .LVU5559
 16972 0b8b 488B7C24 		mov	rdi, QWORD PTR 40[rsp]	# ivtmp.634, %sfp
 16972      28
 16973 0b90 4C8D8B40 		lea	r9, 576[rbx]	# ivtmp.634,
 16973      020000
 16974 0b97 4C894C24 		mov	QWORD PTR 40[rsp], r9	# %sfp, ivtmp.634
 16974      28
 16975              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
GAS LISTING /tmp/cclewcPz.s 			page 450


 16976              		.loc 1 1158 48 view .LVU5560
 16977 0b9c 488D7506 		lea	rsi, 6[rbp]	# i,
 16978              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16979              		.loc 1 1160 41 view .LVU5561
 16980 0ba0 4C012F   		add	QWORD PTR [rdi], r13	# MEM[base: _159, offset: 0B], sample_max
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16981              		.loc 1 1158 47 is_stmt 1 view .LVU5562
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16982              		.loc 1 1158 29 view .LVU5563
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16983              		.loc 1 1159 13 view .LVU5564
 16984 0ba3 4C89E7   		mov	rdi, r12	#, tuning_result
 16985 0ba6 E8000000 		call	tune_benchmark	#
 16985      00
 16986              	.LVL1078:
1160:sieve_extend.c ****         }
 16987              		.loc 1 1160 13 view .LVU5565
 16988              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 16989              		.loc 1 1160 41 is_stmt 0 view .LVU5566
 16990 0bab 488B4424 		mov	rax, QWORD PTR 40[rsp]	# ivtmp.634, %sfp
 16990      28
 16991              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 16992              		.loc 1 1158 48 view .LVU5567
 16993 0bb0 488D7507 		lea	rsi, 7[rbp]	# i,
 16994 0bb4 4C8D83A0 		lea	r8, 672[rbx]	# ivtmp.634,
 16994      020000
 16995              	# sieve_extend.c:1159:             tune_benchmark(tuning_result, i);
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 16996              		.loc 1 1159 13 view .LVU5568
 16997 0bbb 4C89E7   		mov	rdi, r12	#, tuning_result
 16998 0bbe 4C894424 		mov	QWORD PTR 40[rsp], r8	# %sfp, ivtmp.634
 16998      28
 16999              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17000              		.loc 1 1158 48 view .LVU5569
 17001 0bc3 4883C508 		add	rbp, 8	# i,
 17002              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
1160:sieve_extend.c ****         }
 17003              		.loc 1 1160 41 view .LVU5570
 17004 0bc7 4C0128   		add	QWORD PTR [rax], r13	# MEM[base: _159, offset: 0B], sample_max
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17005              		.loc 1 1158 47 is_stmt 1 view .LVU5571
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17006              		.loc 1 1158 29 view .LVU5572
1159:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 17007              		.loc 1 1159 13 view .LVU5573
 17008 0bca 4881C300 		add	rbx, 768	# ivtmp.634,
 17008      030000
 17009 0bd1 E8000000 		call	tune_benchmark	#
 17009      00
 17010              	.LVL1079:
1160:sieve_extend.c ****         }
 17011              		.loc 1 1160 13 view .LVU5574
 17012              	# sieve_extend.c:1160:             tuning_result[i].sample_max += sample_max;
GAS LISTING /tmp/cclewcPz.s 			page 451


1160:sieve_extend.c ****         }
 17013              		.loc 1 1160 41 is_stmt 0 view .LVU5575
 17014 0bd6 488B7424 		mov	rsi, QWORD PTR 40[rsp]	# ivtmp.634, %sfp
 17014      28
 17015 0bdb 4C012E   		add	QWORD PTR [rsi], r13	# MEM[base: _159, offset: 0B], sample_max
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17016              		.loc 1 1158 47 is_stmt 1 view .LVU5576
 17017              	.LVL1080:
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17018              		.loc 1 1158 29 view .LVU5577
 17019              	# sieve_extend.c:1158:         for (counter_t i=0; i<tuning_results; i++) {
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17020              		.loc 1 1158 9 is_stmt 0 view .LVU5578
 17021 0bde 4939EF   		cmp	r15, rbp	# tuning_results, i
 17022 0be1 0F8501FF 		jne	.L1287	#,
 17022      FFFF
 17023 0be7 E9E0FDFF 		jmp	.L1290	#
 17023      FF
 17024              	.LVL1081:
 17025 0bec 0F1F4000 		.p2align 4,,7
 17026              		.p2align 3
 17027              	.L1385:
1158:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 17028              		.loc 1 1158 9 view .LVU5579
 17029              	.LBE1168:
 17030              	.LBB1169:
 17031              	.LBB1151:
 17032              	.LBB1150:
 17033              	.LBB1149:
 17034              	.LBB1147:
 17035              	.LBB1145:
 17036              	.LBB1134:
 17037              	.LBB1135:
 17038              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17039              		.loc 3 107 10 view .LVU5580
 17040 0bf0 488D3500 		lea	rsi, .LC52[rip]	#,
 17040      000000
 17041 0bf7 BF010000 		mov	edi, 1	#,
 17041      00
 17042 0bfc C5FB115C 		vmovsd	QWORD PTR 56[rsp], xmm3	# %sfp, _256
 17042      2438
 17043              	.LBE1135:
 17044              	.LBE1134:
1129:sieve_extend.c ****                         }
 17045              		.loc 1 1129 60 is_stmt 1 view .LVU5581
 17046              	.LVL1082:
 17047              	.LBB1137:
 17048              	.LBI1134:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17049              		.loc 3 105 1 view .LVU5582
 17050              	.LBB1136:
 17051              		.loc 3 107 3 view .LVU5583
 17052              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17053              		.loc 3 107 10 is_stmt 0 view .LVU5584
 17054 0c02 31C0     		xor	eax, eax	#
 17055 0c04 E8000000 		call	__printf_chk@PLT	#
 17055      00
GAS LISTING /tmp/cclewcPz.s 			page 452


 17056              	.LVL1083:
 17057              		.loc 3 107 10 view .LVU5585
 17058              	.LBE1136:
 17059              	.LBE1137:
1129:sieve_extend.c ****                         }
 17060              		.loc 1 1129 76 is_stmt 1 view .LVU5586
 17061              	.LBB1138:
 17062              	.LBI1138:
1045:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
 17063              		.loc 1 1045 20 view .LVU5587
 17064              	.LBB1139:
1046:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
 17065              		.loc 1 1046 5 view .LVU5588
 17066              	.LBB1140:
 17067              	.LBI1140:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17068              		.loc 3 105 1 view .LVU5589
 17069              	.LBB1141:
 17070              		.loc 3 107 3 view .LVU5590
 17071              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17072              		.loc 3 107 10 is_stmt 0 view .LVU5591
 17073 0c09 4D8B4538 		mov	r8, QWORD PTR 56[r13]	# MEM[base: _520, offset: 56B], MEM[base: _520, offset: 56B]
 17074 0c0d BF010000 		mov	edi, 1	#,
 17074      00
 17075 0c12 498B4D10 		mov	rcx, QWORD PTR 16[r13]	# MEM[base: _520, offset: 16B], MEM[base: _520, offset: 16B]
 17076 0c16 488D3500 		lea	rsi, .LC53[rip]	#,
 17076      000000
 17077 0c1d C4C17B10 		vmovsd	xmm0, QWORD PTR 80[r13]	# MEM[base: _520, offset: 80B], MEM[base: _520, offset: 80B]
 17077      4550
 17078 0c23 B8030000 		mov	eax, 3	#,
 17078      00
 17079 0c28 498B5508 		mov	rdx, QWORD PTR 8[r13]	# MEM[base: _520, offset: 8B], MEM[base: _520, offset: 8B]
 17080 0c2c 4C894424 		mov	QWORD PTR 24[rsp], r8	#, MEM[base: _520, offset: 56B]
 17080      18
 17081 0c31 4D8B5548 		mov	r10, QWORD PTR 72[r13]	# MEM[base: _520, offset: 72B], MEM[base: _520, offset: 72B]
 17082 0c35 4C895424 		mov	QWORD PTR 16[rsp], r10	#, MEM[base: _520, offset: 72B]
 17082      10
 17083 0c3a 4D8B5D30 		mov	r11, QWORD PTR 48[r13]	# MEM[base: _520, offset: 48B], MEM[base: _520, offset: 48B]
 17084 0c3e 4C895C24 		mov	QWORD PTR 8[rsp], r11	#, MEM[base: _520, offset: 48B]
 17084      08
 17085 0c43 4D8B4D28 		mov	r9, QWORD PTR 40[r13]	# MEM[base: _520, offset: 40B], MEM[base: _520, offset: 40B]
 17086 0c47 4C890C24 		mov	QWORD PTR [rsp], r9	#, MEM[base: _520, offset: 40B]
 17087 0c4b 4D8B4D20 		mov	r9, QWORD PTR 32[r13]	#, MEM[base: _520, offset: 32B]
 17088 0c4f 4D8B4518 		mov	r8, QWORD PTR 24[r13]	#, MEM[base: _520, offset: 24B]
 17089 0c53 C4C17B10 		vmovsd	xmm2, QWORD PTR 88[r13]	#, MEM[base: _520, offset: 88B]
 17089      5558
 17090 0c59 C4C17B10 		vmovsd	xmm1, QWORD PTR 64[r13]	#, MEM[base: _520, offset: 64B]
 17090      4D40
 17091 0c5f E8000000 		call	__printf_chk@PLT	#
 17091      00
 17092              	.LVL1084:
 17093              		.loc 3 107 10 view .LVU5592
 17094              	.LBE1141:
 17095              	.LBE1140:
 17096              	# sieve_extend.c:1051: }
1051:sieve_extend.c **** 
 17097              		.loc 1 1051 1 view .LVU5593
GAS LISTING /tmp/cclewcPz.s 			page 453


 17098 0c64 488B4C24 		mov	rcx, QWORD PTR 40[rsp]	# mediumstep_faster, %sfp
 17098      28
 17099 0c69 488B7C24 		mov	rdi, QWORD PTR 48[rsp]	# smallstep_faster, %sfp
 17099      30
 17100 0c6e 4C897424 		mov	QWORD PTR 96[rsp], r14	# %sfp, vectorstep_faster
 17100      60
 17101              	.LBE1139:
 17102              	.LBE1138:
 17103              	# sieve_extend.c:1125:                             best_blocksize_bits = blocksize_bits;
1125:sieve_extend.c ****                             best_smallstep_faster = smallstep_faster;
 17104              		.loc 1 1125 49 view .LVU5594
 17105 0c73 48895C24 		mov	QWORD PTR 72[rsp], rbx	# %sfp, ivtmp.653
 17105      48
 17106              	.LBB1143:
 17107              	.LBB1142:
 17108              	# sieve_extend.c:1051: }
1051:sieve_extend.c **** 
 17109              		.loc 1 1051 1 view .LVU5595
 17110 0c78 48894C24 		mov	QWORD PTR 88[rsp], rcx	# %sfp, mediumstep_faster
 17110      58
 17111 0c7d 48897C24 		mov	QWORD PTR 80[rsp], rdi	# %sfp, smallstep_faster
 17111      50
 17112 0c82 E90DFCFF 		jmp	.L1276	#
 17112      FF
 17113              	.LVL1085:
 17114              	.L1286:
1051:sieve_extend.c **** 
 17115              		.loc 1 1051 1 view .LVU5596
 17116              	.LBE1142:
 17117              	.LBE1143:
 17118              	.LBE1145:
 17119              	.LBE1147:
 17120              	.LBE1149:
 17121              	.LBE1150:
 17122              	.LBE1151:
 17123              	.LBE1169:
1147:sieve_extend.c ****             printf("(%ju) ",(uintmax_t)step); tuning_result_print(tuning_result[tuning_result_index
 17124              		.loc 1 1147 13 is_stmt 1 view .LVU5597
1148:sieve_extend.c ****             if (option_verboselevel >= 3) {
 17125              		.loc 1 1148 13 view .LVU5598
 17126              	.LBB1170:
 17127              	.LBI1170:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17128              		.loc 3 105 1 view .LVU5599
 17129              	.LBB1171:
 17130              		.loc 3 107 3 view .LVU5600
 17131              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17132              		.loc 3 107 10 is_stmt 0 view .LVU5601
 17133 0c87 488B5424 		mov	rdx, QWORD PTR 48[rsp]	#, %sfp
 17133      30
 17134 0c8c 488D3500 		lea	rsi, .LC57[rip]	#,
 17134      000000
 17135 0c93 BF010000 		mov	edi, 1	#,
 17135      00
 17136 0c98 31C0     		xor	eax, eax	#
 17137 0c9a E8000000 		call	__printf_chk@PLT	#
 17137      00
GAS LISTING /tmp/cclewcPz.s 			page 454


 17138              	.LVL1086:
 17139              		.loc 3 107 10 view .LVU5602
 17140              	.LBE1171:
 17141              	.LBE1170:
1148:sieve_extend.c ****             if (option_verboselevel >= 3) {
 17142              		.loc 1 1148 47 is_stmt 1 view .LVU5603
 17143              	.LBB1172:
 17144              	.LBI1172:
1045:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
 17145              		.loc 1 1045 20 view .LVU5604
 17146              	.LBB1173:
1046:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
 17147              		.loc 1 1046 5 view .LVU5605
 17148              	.LBB1174:
 17149              	.LBI1174:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17150              		.loc 3 105 1 view .LVU5606
 17151              	.LBB1175:
 17152              		.loc 3 107 3 view .LVU5607
 17153              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17154              		.loc 3 107 10 is_stmt 0 view .LVU5608
 17155 0c9f 498B5C24 		mov	rbx, QWORD PTR 56[r12]	# MEM[(struct tuning_result_type *)tuning_result_242 + 56B], MEM[(struc
 17155      38
 17156 0ca4 488D3500 		lea	rsi, .LC53[rip]	#,
 17156      000000
 17157 0cab C4C17B10 		vmovsd	xmm0, QWORD PTR 80[r12]	# MEM[(struct tuning_result_type *)tuning_result_242 + 80B], MEM[(s
 17157      442450
 17158 0cb2 498B4C24 		mov	rcx, QWORD PTR 16[r12]	# MEM[(struct tuning_result_type *)tuning_result_242 + 16B], MEM[(struc
 17158      10
 17159 0cb7 498B5424 		mov	rdx, QWORD PTR 8[r12]	# MEM[(struct tuning_result_type *)tuning_result_242 + 8B], MEM[(struct 
 17159      08
 17160 0cbc 48895C24 		mov	QWORD PTR 24[rsp], rbx	#, MEM[(struct tuning_result_type *)tuning_result_242 + 56B]
 17160      18
 17161 0cc1 498B7C24 		mov	rdi, QWORD PTR 72[r12]	# MEM[(struct tuning_result_type *)tuning_result_242 + 72B], MEM[(struc
 17161      48
 17162 0cc6 48897C24 		mov	QWORD PTR 16[rsp], rdi	#, MEM[(struct tuning_result_type *)tuning_result_242 + 72B]
 17162      10
 17163 0ccb BF010000 		mov	edi, 1	#,
 17163      00
 17164 0cd0 4D8B4C24 		mov	r9, QWORD PTR 48[r12]	# MEM[(struct tuning_result_type *)tuning_result_242 + 48B], MEM[(struct
 17164      30
 17165 0cd5 4C894C24 		mov	QWORD PTR 8[rsp], r9	#, MEM[(struct tuning_result_type *)tuning_result_242 + 48B]
 17165      08
 17166 0cda 498B4424 		mov	rax, QWORD PTR 40[r12]	# MEM[(struct tuning_result_type *)tuning_result_242 + 40B], MEM[(struc
 17166      28
 17167 0cdf 48890424 		mov	QWORD PTR [rsp], rax	#, MEM[(struct tuning_result_type *)tuning_result_242 + 40B]
 17168 0ce3 B8030000 		mov	eax, 3	#,
 17168      00
 17169 0ce8 4D8B4C24 		mov	r9, QWORD PTR 32[r12]	#, MEM[(struct tuning_result_type *)tuning_result_242 + 32B]
 17169      20
 17170 0ced 4D8B4424 		mov	r8, QWORD PTR 24[r12]	#, MEM[(struct tuning_result_type *)tuning_result_242 + 24B]
 17170      18
 17171 0cf2 C4C17B10 		vmovsd	xmm2, QWORD PTR 88[r12]	#, MEM[(struct tuning_result_type *)tuning_result_242 + 88B]
 17171      542458
 17172 0cf9 C4C17B10 		vmovsd	xmm1, QWORD PTR 64[r12]	#, MEM[(struct tuning_result_type *)tuning_result_242 + 64B]
 17172      4C2440
 17173 0d00 E8000000 		call	__printf_chk@PLT	#
GAS LISTING /tmp/cclewcPz.s 			page 455


 17173      00
 17174              	.LVL1087:
 17175              		.loc 3 107 10 view .LVU5609
 17176              	.LBE1175:
 17177              	.LBE1174:
 17178              	.LBE1173:
 17179              	.LBE1172:
1149:sieve_extend.c ****                 for (counter_t tuning_result_index=0; tuning_result_index<min(10,tuning_results); t
 17180              		.loc 1 1149 13 is_stmt 1 view .LVU5610
 17181              	# sieve_extend.c:1149:             if (option_verboselevel >= 3) {
1149:sieve_extend.c ****                 for (counter_t tuning_result_index=0; tuning_result_index<min(10,tuning_results); t
 17182              		.loc 1 1149 16 is_stmt 0 view .LVU5611
 17183 0d05 837C2468 		cmp	DWORD PTR 104[rsp], 2	# %sfp,
 17183      02
 17184 0d0a 0F84EEFC 		je	.L1288	#,
 17184      FFFF
 17185 0d10 498D5C24 		lea	rbx, 8[r12]	# ivtmp.640,
 17185      08
 17186              	.LBB1176:
 17187              	# sieve_extend.c:1150:                 for (counter_t tuning_result_index=0; tuning_result_index<mi
1150:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 17188              		.loc 1 1150 32 view .LVU5612
 17189 0d15 31ED     		xor	ebp, ebp	# tuning_result_index
 17190              	.L1289:
 17191              	.LVL1088:
1151:sieve_extend.c ****                 }
 17192              		.loc 1 1151 21 is_stmt 1 view .LVU5613
 17193              	.LBB1160:
 17194              	.LBI1160:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17195              		.loc 3 105 1 view .LVU5614
 17196              	.LBB1161:
 17197              		.loc 3 107 3 view .LVU5615
 17198              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17199              		.loc 3 107 10 is_stmt 0 view .LVU5616
 17200 0d17 488D3500 		lea	rsi, .LC58[rip]	#,
 17200      000000
 17201 0d1e BF010000 		mov	edi, 1	#,
 17201      00
 17202 0d23 31C0     		xor	eax, eax	#
 17203              	.LBE1161:
 17204              	.LBE1160:
 17205              	# sieve_extend.c:1150:                 for (counter_t tuning_result_index=0; tuning_result_index<mi
1150:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 17206              		.loc 1 1150 118 view .LVU5617
 17207 0d25 4883C501 		add	rbp, 1	# tuning_result_index,
 17208              	.LVL1089:
 17209              	.LBB1163:
 17210              	.LBB1162:
 17211              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17212              		.loc 3 107 10 view .LVU5618
 17213 0d29 E8000000 		call	__printf_chk@PLT	#
 17213      00
 17214              	.LVL1090:
 17215              		.loc 3 107 10 view .LVU5619
 17216              	.LBE1162:
 17217              	.LBE1163:
GAS LISTING /tmp/cclewcPz.s 			page 456


1151:sieve_extend.c ****                 }
 17218              		.loc 1 1151 36 is_stmt 1 view .LVU5620
 17219              	.LBB1164:
 17220              	.LBI1164:
1045:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
 17221              		.loc 1 1045 20 view .LVU5621
 17222              	.LBB1165:
1046:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
 17223              		.loc 1 1046 5 view .LVU5622
 17224              	.LBB1166:
 17225              	.LBI1166:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17226              		.loc 3 105 1 view .LVU5623
 17227              	.LBB1167:
 17228              		.loc 3 107 3 view .LVU5624
 17229              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17230              		.loc 3 107 10 is_stmt 0 view .LVU5625
 17231 0d2e 488B7330 		mov	rsi, QWORD PTR 48[rbx]	# MEM[base: _224, offset: 48B], MEM[base: _224, offset: 48B]
 17232 0d32 BF010000 		mov	edi, 1	#,
 17232      00
 17233 0d37 488B4B08 		mov	rcx, QWORD PTR 8[rbx]	# MEM[base: _224, offset: 8B], MEM[base: _224, offset: 8B]
 17234 0d3b B8030000 		mov	eax, 3	#,
 17234      00
 17235 0d40 C5FB1043 		vmovsd	xmm0, QWORD PTR 72[rbx]	# MEM[base: _224, offset: 72B], MEM[base: _224, offset: 72B]
 17235      48
 17236 0d45 4883C360 		add	rbx, 96	# ivtmp.640,
 17237 0d49 48897424 		mov	QWORD PTR 24[rsp], rsi	#, MEM[base: _224, offset: 48B]
 17237      18
 17238 0d4e 488D3500 		lea	rsi, .LC53[rip]	#,
 17238      000000
 17239 0d55 4C8B43E0 		mov	r8, QWORD PTR -32[rbx]	# MEM[base: _224, offset: 64B], MEM[base: _224, offset: 64B]
 17240 0d59 4C894424 		mov	QWORD PTR 16[rsp], r8	#, MEM[base: _224, offset: 64B]
 17240      10
 17241 0d5e 4C8B53C8 		mov	r10, QWORD PTR -56[rbx]	# MEM[base: _224, offset: 40B], MEM[base: _224, offset: 40B]
 17242 0d62 4C895424 		mov	QWORD PTR 8[rsp], r10	#, MEM[base: _224, offset: 40B]
 17242      08
 17243 0d67 488B53C0 		mov	rdx, QWORD PTR -64[rbx]	# MEM[base: _224, offset: 32B], MEM[base: _224, offset: 32B]
 17244 0d6b 48891424 		mov	QWORD PTR [rsp], rdx	#, MEM[base: _224, offset: 32B]
 17245 0d6f 4C8B4BB8 		mov	r9, QWORD PTR -72[rbx]	#, MEM[base: _224, offset: 24B]
 17246 0d73 4C8B43B0 		mov	r8, QWORD PTR -80[rbx]	#, MEM[base: _224, offset: 16B]
 17247 0d77 488B53A0 		mov	rdx, QWORD PTR -96[rbx]	#, MEM[base: _224, offset: 0B]
 17248 0d7b C5FB1053 		vmovsd	xmm2, QWORD PTR -16[rbx]	#, MEM[base: _224, offset: 80B]
 17248      F0
 17249 0d80 C5FB104B 		vmovsd	xmm1, QWORD PTR -40[rbx]	#, MEM[base: _224, offset: 56B]
 17249      D8
 17250 0d85 E8000000 		call	__printf_chk@PLT	#
 17250      00
 17251              	.LVL1091:
 17252              		.loc 3 107 10 view .LVU5626
 17253              	.LBE1167:
 17254              	.LBE1166:
 17255              	.LBE1165:
 17256              	.LBE1164:
1150:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 17257              		.loc 1 1150 99 is_stmt 1 view .LVU5627
1150:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 17258              		.loc 1 1150 55 view .LVU5628
GAS LISTING /tmp/cclewcPz.s 			page 457


 17259              	# sieve_extend.c:1150:                 for (counter_t tuning_result_index=0; tuning_result_index<mi
1150:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 17260              		.loc 1 1150 75 is_stmt 0 view .LVU5629
 17261 0d8a 4983FF0A 		cmp	r15, 10	# tuning_results,
 17262 0d8e 4C89F1   		mov	rcx, r14	# tmp424, tmp476
 17263 0d91 490F46CF 		cmovbe	rcx, r15	# tuning_results,, tmp424
 17264              	# sieve_extend.c:1150:                 for (counter_t tuning_result_index=0; tuning_result_index<mi
1150:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 17265              		.loc 1 1150 17 view .LVU5630
 17266 0d95 4839CD   		cmp	rbp, rcx	# tuning_result_index, tmp424
 17267 0d98 0F8279FF 		jb	.L1289	#,
 17267      FFFF
 17268 0d9e E95BFCFF 		jmp	.L1288	#
 17268      FF
 17269              	.LVL1092:
 17270              	.L1380:
1150:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 17271              		.loc 1 1150 17 view .LVU5631
 17272              	.LBE1176:
 17273              	.LBE1121:
 17274              	.LBE1120:
 17275              	.LBE1119:
1340:sieve_extend.c ****     }
 17276              		.loc 1 1340 39 is_stmt 1 view .LVU5632
 17277              	.LBB1195:
 17278              	.LBI1195:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17279              		.loc 3 105 1 view .LVU5633
 17280              	.LBB1196:
 17281              		.loc 3 107 3 view .LVU5634
 17282              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17283              		.loc 3 107 10 is_stmt 0 view .LVU5635
 17284 0da3 488D3D00 		lea	rdi, .LC50[rip]	#,
 17284      000000
 17285              	.LBE1196:
 17286              	.LBE1195:
 17287              	# sieve_extend.c:1343:     counter_t best_blocksize_bits = default_blocksize;
1343:sieve_extend.c ****     if (option_tunelevel) {
 17288              		.loc 1 1343 15 view .LVU5636
 17289 0daa 41BC00FC 		mov	r12d, 261120	# best_result$blocksize_bits,
 17289      0300
 17290              	.LBB1198:
 17291              	.LBB1197:
 17292              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17293              		.loc 3 107 10 view .LVU5637
 17294 0db0 E8000000 		call	puts@PLT	#
 17294      00
 17295              	.LVL1093:
 17296              		.loc 3 107 10 view .LVU5638
 17297              	.LBE1197:
 17298              	.LBE1198:
1343:sieve_extend.c ****     if (option_tunelevel) {
 17299              		.loc 1 1343 5 is_stmt 1 view .LVU5639
1344:sieve_extend.c ****         tuning_result_type tuning_result = tune(option_tunelevel, option_maxFactor, option_verbosel
 17300              		.loc 1 1344 5 view .LVU5640
 17301              	# sieve_extend.c:1344:     if (option_tunelevel) {
1344:sieve_extend.c ****         tuning_result_type tuning_result = tune(option_tunelevel, option_maxFactor, option_verbosel
GAS LISTING /tmp/cclewcPz.s 			page 458


 17302              		.loc 1 1344 9 is_stmt 0 view .LVU5641
 17303 0db5 448B8424 		mov	r8d, DWORD PTR 172[rsp]	# option_tunelevel.41_63, option_tunelevel
 17303      AC000000 
 17304              	# sieve_extend.c:1344:     if (option_tunelevel) {
1344:sieve_extend.c ****         tuning_result_type tuning_result = tune(option_tunelevel, option_maxFactor, option_verbosel
 17305              		.loc 1 1344 8 view .LVU5642
 17306 0dbd 4585C0   		test	r8d, r8d	# option_tunelevel.41_63
 17307 0dc0 0F858701 		jne	.L1387	#,
 17307      0000
 17308              	.LVL1094:
 17309              	.L1267:
 17310              	.LBB1199:
1354:sieve_extend.c ****         counter_t passes = 0;
 17311              		.loc 1 1354 9 is_stmt 1 view .LVU5643
 17312              	# sieve_extend.c:1354:         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize
1354:sieve_extend.c ****         counter_t passes = 0;
 17313              		.loc 1 1354 12 is_stmt 0 view .LVU5644
 17314 0dc6 83BC24A8 		cmp	DWORD PTR 168[rsp], 0	# option_verboselevel,
 17314      00000000 
 17315 0dce 0F8E1AF6 		jle	.L1294	#,
 17315      FFFF
1354:sieve_extend.c ****         counter_t passes = 0;
 17316              		.loc 1 1354 39 is_stmt 1 discriminator 1 view .LVU5645
 17317              	.LVL1095:
 17318              	.LBB1103:
 17319              	.LBI1103:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17320              		.loc 3 105 1 discriminator 1 view .LVU5646
 17321              	.LBB1104:
 17322              		.loc 3 107 3 discriminator 1 view .LVU5647
 17323              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17324              		.loc 3 107 10 is_stmt 0 discriminator 1 view .LVU5648
 17325 0dd4 4C8B0D00 		mov	r9, QWORD PTR global_VECTORSTEP_FASTER[rip]	#, global_VECTORSTEP_FASTER
 17325      000000
 17326 0ddb 4C89E2   		mov	rdx, r12	#, best_result$blocksize_bits
 17327 0dde 4C8B0500 		mov	r8, QWORD PTR global_MEDIUMSTEP_FASTER[rip]	#, global_MEDIUMSTEP_FASTER
 17327      000000
 17328 0de5 488D3500 		lea	rsi, .LC60[rip]	#,
 17328      000000
 17329 0dec 488B0D00 		mov	rcx, QWORD PTR global_SMALLSTEP_FASTER[rip]	#, global_SMALLSTEP_FASTER
 17329      000000
 17330 0df3 BF010000 		mov	edi, 1	#,
 17330      00
 17331 0df8 31C0     		xor	eax, eax	#
 17332 0dfa E8000000 		call	__printf_chk@PLT	#
 17332      00
 17333              	.LVL1096:
 17334 0dff E9EAF5FF 		jmp	.L1294	#
 17334      FF
 17335              	.LVL1097:
 17336              	.L1386:
 17337              		.loc 3 107 10 discriminator 1 view .LVU5649
 17338              	.LBE1104:
 17339              	.LBE1103:
 17340              	.LBE1199:
 17341              	.LBB1200:
 17342              	.LBB1192:
GAS LISTING /tmp/cclewcPz.s 			page 459


 17343              	.LBB1189:
1164:sieve_extend.c ****     if (option_verboselevel >= 1) {
 17344              		.loc 1 1164 5 is_stmt 1 view .LVU5650
 17345              	# sieve_extend.c:1164:     tuning_result_type best_result = tuning_result[0];
1164:sieve_extend.c ****     if (option_verboselevel >= 1) {
 17346              		.loc 1 1164 24 is_stmt 0 view .LVU5651
 17347 0e04 4C8B7C24 		mov	r15, QWORD PTR 64[rsp]	# tuning_result, %sfp
 17347      40
 17348              	.LVL1098:
 17349              	# sieve_extend.c:1165:     if (option_verboselevel >= 1) {
1165:sieve_extend.c ****         tuning_result_index = 0;
 17350              		.loc 1 1165 8 view .LVU5652
 17351 0e09 837C2468 		cmp	DWORD PTR 104[rsp], 0	# %sfp,
 17351      00
 17352              	# sieve_extend.c:1164:     tuning_result_type best_result = tuning_result[0];
1164:sieve_extend.c ****     if (option_verboselevel >= 1) {
 17353              		.loc 1 1164 24 view .LVU5653
 17354 0e0e 4D8B6708 		mov	r12, QWORD PTR 8[r15]	# best_result$blocksize_bits, MEM[(struct tuning_result_type *)tuning_re
 17355              	.LVL1099:
1164:sieve_extend.c ****     if (option_verboselevel >= 1) {
 17356              		.loc 1 1164 24 view .LVU5654
 17357 0e12 4D8B7720 		mov	r14, QWORD PTR 32[r15]	# best_result$smallstep_faster, MEM[(struct tuning_result_type *)tuning
 17358 0e16 498B6F28 		mov	rbp, QWORD PTR 40[r15]	# best_result$mediumstep_faster, MEM[(struct tuning_result_type *)tunin
 17359 0e1a 498B5F30 		mov	rbx, QWORD PTR 48[r15]	# best_result$vectorstep_faster, MEM[(struct tuning_result_type *)tunin
1165:sieve_extend.c ****         tuning_result_index = 0;
 17360              		.loc 1 1165 5 is_stmt 1 view .LVU5655
 17361              	# sieve_extend.c:1165:     if (option_verboselevel >= 1) {
1165:sieve_extend.c ****         tuning_result_index = 0;
 17362              		.loc 1 1165 8 is_stmt 0 view .LVU5656
 17363 0e1e 7E6E     		jle	.L1292	#,
1166:sieve_extend.c ****         printf(".Best result:"); tuning_result_print(tuning_result[tuning_result_index]);
 17364              		.loc 1 1166 9 is_stmt 1 view .LVU5657
 17365              	.LVL1100:
1167:sieve_extend.c ****     }
 17366              		.loc 1 1167 9 view .LVU5658
 17367              	.LBB1177:
 17368              	.LBI1177:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17369              		.loc 3 105 1 view .LVU5659
 17370              	.LBB1178:
 17371              		.loc 3 107 3 view .LVU5660
 17372              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17373              		.loc 3 107 10 is_stmt 0 view .LVU5661
 17374 0e20 488D3500 		lea	rsi, .LC59[rip]	#,
 17374      000000
 17375 0e27 BF010000 		mov	edi, 1	#,
 17375      00
 17376 0e2c 31C0     		xor	eax, eax	#
 17377 0e2e E8000000 		call	__printf_chk@PLT	#
 17377      00
 17378              	.LVL1101:
 17379              		.loc 3 107 10 view .LVU5662
 17380              	.LBE1178:
 17381              	.LBE1177:
1167:sieve_extend.c ****     }
 17382              		.loc 1 1167 34 is_stmt 1 view .LVU5663
 17383              	.LBB1179:
GAS LISTING /tmp/cclewcPz.s 			page 460


 17384              	.LBI1179:
1045:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
 17385              		.loc 1 1045 20 view .LVU5664
 17386              	.LBB1180:
1046:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
 17387              		.loc 1 1046 5 view .LVU5665
 17388              	.LBB1181:
 17389              	.LBI1181:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17390              		.loc 3 105 1 view .LVU5666
 17391              	.LBB1182:
 17392              		.loc 3 107 3 view .LVU5667
 17393              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17394              		.loc 3 107 10 is_stmt 0 view .LVU5668
 17395 0e33 4D8B4F38 		mov	r9, QWORD PTR 56[r15]	# MEM[(struct tuning_result_type *)tuning_result_242 + 56B], MEM[(struct
 17396 0e37 BF010000 		mov	edi, 1	#,
 17396      00
 17397 0e3c C4C17B10 		vmovsd	xmm0, QWORD PTR 80[r15]	# MEM[(struct tuning_result_type *)tuning_result_242 + 80B], MEM[(s
 17397      4750
 17398 0e42 498B4F10 		mov	rcx, QWORD PTR 16[r15]	# MEM[(struct tuning_result_type *)tuning_result_242 + 16B], MEM[(struc
 17399 0e46 498B5708 		mov	rdx, QWORD PTR 8[r15]	# MEM[(struct tuning_result_type *)tuning_result_242 + 8B], MEM[(struct 
 17400 0e4a 4C894C24 		mov	QWORD PTR 24[rsp], r9	#, MEM[(struct tuning_result_type *)tuning_result_242 + 56B]
 17400      18
 17401 0e4f 498B4748 		mov	rax, QWORD PTR 72[r15]	# MEM[(struct tuning_result_type *)tuning_result_242 + 72B], MEM[(struc
 17402 0e53 48894424 		mov	QWORD PTR 16[rsp], rax	#, MEM[(struct tuning_result_type *)tuning_result_242 + 72B]
 17402      10
 17403 0e58 B8030000 		mov	eax, 3	#,
 17403      00
 17404 0e5d 498B7730 		mov	rsi, QWORD PTR 48[r15]	# MEM[(struct tuning_result_type *)tuning_result_242 + 48B], MEM[(struc
 17405 0e61 48897424 		mov	QWORD PTR 8[rsp], rsi	#, MEM[(struct tuning_result_type *)tuning_result_242 + 48B]
 17405      08
 17406 0e66 488D3500 		lea	rsi, .LC53[rip]	#,
 17406      000000
 17407 0e6d 4D8B4728 		mov	r8, QWORD PTR 40[r15]	# MEM[(struct tuning_result_type *)tuning_result_242 + 40B], MEM[(struct
 17408 0e71 4C890424 		mov	QWORD PTR [rsp], r8	#, MEM[(struct tuning_result_type *)tuning_result_242 + 40B]
 17409 0e75 4D8B4F20 		mov	r9, QWORD PTR 32[r15]	#, MEM[(struct tuning_result_type *)tuning_result_242 + 32B]
 17410 0e79 4D8B4718 		mov	r8, QWORD PTR 24[r15]	#, MEM[(struct tuning_result_type *)tuning_result_242 + 24B]
 17411 0e7d C4C17B10 		vmovsd	xmm2, QWORD PTR 88[r15]	#, MEM[(struct tuning_result_type *)tuning_result_242 + 88B]
 17411      5758
 17412 0e83 C4C17B10 		vmovsd	xmm1, QWORD PTR 64[r15]	#, MEM[(struct tuning_result_type *)tuning_result_242 + 64B]
 17412      4F40
 17413 0e89 E8000000 		call	__printf_chk@PLT	#
 17413      00
 17414              	.LVL1102:
 17415              	.L1292:
 17416              		.loc 3 107 10 view .LVU5669
 17417              	.LBE1182:
 17418              	.LBE1181:
 17419              	.LBE1180:
 17420              	.LBE1179:
1170:sieve_extend.c ****     return best_result;
 17421              		.loc 1 1170 5 is_stmt 1 view .LVU5670
 17422 0e8e 488B7C24 		mov	rdi, QWORD PTR 64[rsp]	#, %sfp
 17422      40
 17423 0e93 E8000000 		call	free@PLT	#
 17423      00
 17424              	.LVL1103:
GAS LISTING /tmp/cclewcPz.s 			page 461


1171:sieve_extend.c **** }
 17425              		.loc 1 1171 5 view .LVU5671
1171:sieve_extend.c **** }
 17426              		.loc 1 1171 5 is_stmt 0 view .LVU5672
 17427              	.LBE1189:
 17428              	.LBE1192:
1346:sieve_extend.c ****         global_MEDIUMSTEP_FASTER = tuning_result.mediumstep_faster;
 17429              		.loc 1 1346 9 is_stmt 1 view .LVU5673
 17430              	# sieve_extend.c:1346:         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
1346:sieve_extend.c ****         global_MEDIUMSTEP_FASTER = tuning_result.mediumstep_faster;
 17431              		.loc 1 1346 33 is_stmt 0 view .LVU5674
 17432 0e98 4C893500 		mov	QWORD PTR global_SMALLSTEP_FASTER[rip], r14	# global_SMALLSTEP_FASTER, best_result$smallstep_f
 17432      000000
1347:sieve_extend.c ****         global_VECTORSTEP_FASTER = tuning_result.vectorstep_faster;
 17433              		.loc 1 1347 9 is_stmt 1 view .LVU5675
 17434              	.LBE1200:
 17435              	# sieve_extend.c:1353:     if (best_blocksize_bits > 0) {
1353:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 17436              		.loc 1 1353 8 is_stmt 0 view .LVU5676
 17437 0e9f 4D85E4   		test	r12, r12	# best_result$blocksize_bits
 17438              	.LBB1201:
 17439              	# sieve_extend.c:1347:         global_MEDIUMSTEP_FASTER = tuning_result.mediumstep_faster;
1347:sieve_extend.c ****         global_VECTORSTEP_FASTER = tuning_result.vectorstep_faster;
 17440              		.loc 1 1347 34 view .LVU5677
 17441 0ea2 48892D00 		mov	QWORD PTR global_MEDIUMSTEP_FASTER[rip], rbp	# global_MEDIUMSTEP_FASTER, best_result$mediumste
 17441      000000
1348:sieve_extend.c ****         best_blocksize_bits = tuning_result.blocksize_bits;
 17442              		.loc 1 1348 9 is_stmt 1 view .LVU5678
 17443              	# sieve_extend.c:1348:         global_VECTORSTEP_FASTER = tuning_result.vectorstep_faster;
1348:sieve_extend.c ****         best_blocksize_bits = tuning_result.blocksize_bits;
 17444              		.loc 1 1348 34 is_stmt 0 view .LVU5679
 17445 0ea9 48891D00 		mov	QWORD PTR global_VECTORSTEP_FASTER[rip], rbx	# global_VECTORSTEP_FASTER, best_result$vectorste
 17445      000000
1349:sieve_extend.c ****     }
 17446              		.loc 1 1349 9 is_stmt 1 view .LVU5680
 17447              	.LVL1104:
1349:sieve_extend.c ****     }
 17448              		.loc 1 1349 9 is_stmt 0 view .LVU5681
 17449              	.LBE1201:
1352:sieve_extend.c ****     if (best_blocksize_bits > 0) {
 17450              		.loc 1 1352 5 is_stmt 1 view .LVU5682
1353:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 17451              		.loc 1 1353 5 view .LVU5683
 17452              	# sieve_extend.c:1353:     if (best_blocksize_bits > 0) {
1353:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 17453              		.loc 1 1353 8 is_stmt 0 view .LVU5684
 17454 0eb0 0F848CF6 		je	.L1293	#,
 17454      FFFF
 17455 0eb6 E90BFFFF 		jmp	.L1267	#
 17455      FF
 17456              	.LVL1105:
 17457              	.L1302:
1353:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 17458              		.loc 1 1353 8 view .LVU5685
 17459 0ebb 488D3D00 		lea	rdi, CSWTCH.120[rip]	# tmp339,
 17459      000000
 17460 0ec2 4C8D0D00 		lea	r9, CSWTCH.121[rip]	# tmp341,
GAS LISTING /tmp/cclewcPz.s 			page 462


 17460      000000
 17461 0ec9 488D2D00 		lea	rbp, CSWTCH.122[rip]	# tmp343,
 17461      000000
 17462              	.LVL1106:
1353:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 17463              		.loc 1 1353 8 view .LVU5686
 17464 0ed0 488D1D00 		lea	rbx, CSWTCH.123[rip]	# tmp345,
 17464      000000
 17465              	.LVL1107:
1353:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 17466              		.loc 1 1353 8 view .LVU5687
 17467 0ed7 4A8B0CC7 		mov	rcx, QWORD PTR [rdi+r8*8]	# smallstep_faster_steps, CSWTCH.120
 17468 0edb 4F8B34C1 		mov	r14, QWORD PTR [r9+r8*8]	# vectorstep_faster_steps, CSWTCH.121
 17469 0edf 4E8B7CC5 		mov	r15, QWORD PTR 0[rbp+r8*8]	# freebits_steps, CSWTCH.122
 17469      00
 17470              	.LVL1108:
1353:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 17471              		.loc 1 1353 8 view .LVU5688
 17472 0ee4 C4A17B10 		vmovsd	xmm7, QWORD PTR [rbx+r8*8]	# sample_duration, CSWTCH.123
 17472      3CC3
 17473 0eea 48898C24 		mov	QWORD PTR 152[rsp], rcx	# %sfp, smallstep_faster_steps
 17473      98000000 
 17474 0ef2 4C89B424 		mov	QWORD PTR 144[rsp], r14	# %sfp, vectorstep_faster_steps
 17474      90000000 
 17475 0efa 4C897C24 		mov	QWORD PTR 112[rsp], r15	# %sfp, freebits_steps
 17475      70
 17476              	.LBB1202:
 17477              	# sieve_extend.c:1271:     for (int arg=1; arg < argc; arg++) {
1271:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 17478              		.loc 1 1271 14 view .LVU5689
 17479 0eff 48C74424 		mov	QWORD PTR 120[rsp], 8	# %sfp,
 17479      78080000 
 17479      00
 17480 0f08 C5FB11BC 		vmovsd	QWORD PTR 128[rsp], xmm7	# %sfp, sample_duration
 17480      24800000 
 17480      00
 17481              	.L1268:
 17482              	.LVL1109:
1271:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 17483              		.loc 1 1271 14 view .LVU5690
 17484              	.LBE1202:
 17485              	.LBB1203:
 17486              	.LBB1193:
 17487              	.LBB1190:
1096:sieve_extend.c ****     if (option_verboselevel >= 2) printf("\n");
 17488              		.loc 1 1096 5 is_stmt 1 view .LVU5691
 17489              	# sieve_extend.c:1096:     if (option_verboselevel >= 1) printf("Tuning..."); 
1096:sieve_extend.c ****     if (option_verboselevel >= 2) printf("\n");
 17490              		.loc 1 1096 8 is_stmt 0 view .LVU5692
 17491 0f11 448B6C24 		mov	r13d, DWORD PTR 104[rsp]	# option_verboselevel.42_64, %sfp
 17491      68
 17492              	.LVL1110:
1096:sieve_extend.c ****     if (option_verboselevel >= 2) printf("\n");
 17493              		.loc 1 1096 8 view .LVU5693
 17494 0f16 4585ED   		test	r13d, r13d	# option_verboselevel.42_64
 17495 0f19 0F8EEDF7 		jle	.L1270	#,
 17495      FFFF
GAS LISTING /tmp/cclewcPz.s 			page 463


1096:sieve_extend.c ****     if (option_verboselevel >= 2) printf("\n");
 17496              		.loc 1 1096 35 is_stmt 1 view .LVU5694
 17497              	.LVL1111:
 17498              	.LBB1183:
 17499              	.LBI1183:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17500              		.loc 3 105 1 view .LVU5695
 17501              	.LBB1184:
 17502              		.loc 3 107 3 view .LVU5696
 17503              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17504              		.loc 3 107 10 is_stmt 0 view .LVU5697
 17505 0f1f 31C0     		xor	eax, eax	#
 17506 0f21 488D3500 		lea	rsi, .LC51[rip]	#,
 17506      000000
 17507 0f28 BF010000 		mov	edi, 1	#,
 17507      00
 17508              	.LBE1184:
 17509              	.LBE1183:
 17510              	# sieve_extend.c:1097:     if (option_verboselevel >= 2) printf("\n");
1097:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
 17511              		.loc 1 1097 8 view .LVU5698
 17512 0f2d 4489EB   		mov	ebx, r13d	# option_verboselevel.42_64, option_verboselevel.42_64
 17513              	.LBB1186:
 17514              	.LBB1185:
 17515              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17516              		.loc 3 107 10 view .LVU5699
 17517 0f30 E8000000 		call	__printf_chk@PLT	#
 17517      00
 17518              	.LVL1112:
 17519              		.loc 3 107 10 view .LVU5700
 17520              	.LBE1185:
 17521              	.LBE1186:
1097:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
 17522              		.loc 1 1097 5 is_stmt 1 view .LVU5701
 17523              	# sieve_extend.c:1097:     if (option_verboselevel >= 2) printf("\n");
1097:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
 17524              		.loc 1 1097 8 is_stmt 0 view .LVU5702
 17525 0f35 83EB01   		sub	ebx, 1	# option_verboselevel.42_64,
 17526 0f38 0F84CEF7 		je	.L1270	#,
 17526      FFFF
1097:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
 17527              		.loc 1 1097 35 is_stmt 1 view .LVU5703
 17528              	.LVL1113:
 17529              	.LBB1187:
 17530              	.LBI1187:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17531              		.loc 3 105 1 view .LVU5704
 17532              	.LBB1188:
 17533              		.loc 3 107 3 view .LVU5705
 17534              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17535              		.loc 3 107 10 is_stmt 0 view .LVU5706
 17536 0f3e BF0A0000 		mov	edi, 10	#,
 17536      00
 17537 0f43 E8000000 		call	putchar@PLT	#
 17537      00
 17538              	.LVL1114:
 17539 0f48 E9BFF7FF 		jmp	.L1270	#
GAS LISTING /tmp/cclewcPz.s 			page 464


 17539      FF
 17540              	.LVL1115:
 17541              	.L1387:
 17542              		.loc 3 107 10 view .LVU5707
 17543              	.LBE1188:
 17544              	.LBE1187:
 17545              	.LBE1190:
 17546              	.LBE1193:
1345:sieve_extend.c ****         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
 17547              		.loc 1 1345 9 is_stmt 1 view .LVU5708
 17548              	# sieve_extend.c:1345:         tuning_result_type tuning_result = tune(option_tunelevel, option_max
1345:sieve_extend.c ****         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
 17549              		.loc 1 1345 44 is_stmt 0 view .LVU5709
 17550 0f4d 8B9424A8 		mov	edx, DWORD PTR 168[rsp]	# option_verboselevel.42_64, option_verboselevel
 17550      000000
 17551 0f54 4183E801 		sub	r8d, 1	#,
 17552 0f58 488BB424 		mov	rsi, QWORD PTR 176[rsp]	# option_maxFactor.43_65, option_maxFactor
 17552      B0000000 
 17553 0f60 4183F802 		cmp	r8d, 2	# _215,
 17554 0f64 89542468 		mov	DWORD PTR 104[rsp], edx	# %sfp, option_verboselevel.42_64
 17555 0f68 4889B424 		mov	QWORD PTR 136[rsp], rsi	# %sfp, option_maxFactor.43_65
 17555      88000000 
 17556              	.LVL1116:
 17557              	.LBB1194:
1053:sieve_extend.c ****     counter_t best_blocksize_bits = default_blocksize;
 17558              		.loc 1 1053 27 is_stmt 1 view .LVU5710
 17559              	.LBB1191:
1054:sieve_extend.c **** 
 17560              		.loc 1 1054 5 view .LVU5711
1056:sieve_extend.c ****     best_blocksize_bits = 0;
 17561              		.loc 1 1056 5 view .LVU5712
1057:sieve_extend.c ****     counter_t best_smallstep_faster = 0;
 17562              		.loc 1 1057 5 view .LVU5713
1058:sieve_extend.c ****     counter_t best_mediumstep_faster = 0;
 17563              		.loc 1 1058 5 view .LVU5714
1059:sieve_extend.c ****     counter_t best_vectorstep_faster = 0;
 17564              		.loc 1 1059 5 view .LVU5715
1060:sieve_extend.c ****     counter_t smallstep_faster_steps = 4;
 17565              		.loc 1 1060 5 view .LVU5716
1061:sieve_extend.c ****     counter_t mediumstep_faster_steps = 4;
 17566              		.loc 1 1061 5 view .LVU5717
1062:sieve_extend.c ****     counter_t vectorstep_faster_steps = 32;
 17567              		.loc 1 1062 5 view .LVU5718
1063:sieve_extend.c ****     counter_t freebits_steps = anticiped_cache_line_bytesize;
 17568              		.loc 1 1063 5 view .LVU5719
1064:sieve_extend.c ****     counter_t sample_max = default_sample_max;
 17569              		.loc 1 1064 5 view .LVU5720
1065:sieve_extend.c ****     double sample_duration = default_sample_duration;
 17570              		.loc 1 1065 5 view .LVU5721
1066:sieve_extend.c **** 
 17571              		.loc 1 1066 5 view .LVU5722
1069:sieve_extend.c ****         case 1:
 17572              		.loc 1 1069 5 view .LVU5723
 17573 0f70 0F8645FF 		jbe	.L1302	#,
 17573      FFFF
 17574 0f76 C5FB1005 		vmovsd	xmm0, QWORD PTR .LC28[rip]	# sample_duration,
 17574      00000000 
GAS LISTING /tmp/cclewcPz.s 			page 465


 17575 0f7e 48C74424 		mov	QWORD PTR 120[rsp], 5	# %sfp,
 17575      78050000 
 17575      00
 17576 0f87 48C74424 		mov	QWORD PTR 112[rsp], 128	# %sfp,
 17576      70800000 
 17576      00
 17577 0f90 48C78424 		mov	QWORD PTR 144[rsp], 32	# %sfp,
 17577      90000000 
 17577      20000000 
 17578 0f9c 48C78424 		mov	QWORD PTR 152[rsp], 4	# %sfp,
 17578      98000000 
 17578      04000000 
 17579 0fa8 C5FB1184 		vmovsd	QWORD PTR 128[rsp], xmm0	# %sfp, sample_duration
 17579      24800000 
 17579      00
 17580 0fb1 E95BFFFF 		jmp	.L1268	#
 17580      FF
 17581              	.LVL1117:
 17582              	.L1373:
1069:sieve_extend.c ****         case 1:
 17583              		.loc 1 1069 5 is_stmt 0 view .LVU5724
 17584              	.LBE1191:
 17585              	.LBE1194:
 17586              	.LBE1203:
 17587              	.LBB1204:
1274:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option_verboselevel > 4) {
 17588              		.loc 1 1274 34 is_stmt 1 discriminator 1 view .LVU5725
 17589              	.LBB1040:
 17590              	.LBI1040:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17591              		.loc 3 98 1 discriminator 1 view .LVU5726
 17592              	.LBB1041:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17593              		.loc 3 100 3 discriminator 1 view .LVU5727
 17594              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17595              		.loc 3 100 10 is_stmt 0 discriminator 1 view .LVU5728
 17596 0fb6 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 17596      000000
 17597 0fbd BA1B0000 		mov	edx, 27	#,
 17597      00
 17598 0fc2 BE010000 		mov	esi, 1	#,
 17598      00
 17599 0fc7 488D3D00 		lea	rdi, .LC32[rip]	#,
 17599      000000
 17600 0fce E8000000 		call	fwrite@PLT	#
 17600      00
 17601              	.LVL1118:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17602              		.loc 3 100 10 discriminator 1 view .LVU5729
 17603              	.LBE1041:
 17604              	.LBE1040:
1274:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option_verboselevel > 4) {
 17605              		.loc 1 1274 83 is_stmt 1 discriminator 1 view .LVU5730
 17606 0fd3 E903F6FF 		jmp	.L1371	#
 17606      FF
 17607              	.L1250:
GAS LISTING /tmp/cclewcPz.s 			page 466


1284:sieve_extend.c ****             }
 17608              		.loc 1 1284 17 view .LVU5731
 17609              	.LVL1119:
 17610              	.LBB1042:
 17611              	.LBI1037:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17612              		.loc 3 98 1 view .LVU5732
 17613              	.LBB1039:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17614              		.loc 3 100 3 view .LVU5733
 17615              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17616              		.loc 3 100 10 is_stmt 0 view .LVU5734
 17617 0fd8 498B0F   		mov	rcx, QWORD PTR [r15]	#, *_29
 17618 0fdb 488D1500 		lea	rdx, .LC38[rip]	#,
 17618      000000
 17619 0fe2 E9E1F5FF 		jmp	.L1370	#
 17619      FF
 17620              	.LVL1120:
 17621              	.L1254:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17622              		.loc 3 100 10 view .LVU5735
 17623              	.LBE1039:
 17624              	.LBE1042:
1291:sieve_extend.c ****             }
 17625              		.loc 1 1291 17 is_stmt 1 view .LVU5736
 17626              	.LBB1043:
 17627              	.LBI1043:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17628              		.loc 3 98 1 view .LVU5737
 17629              	.LBB1044:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17630              		.loc 3 100 3 view .LVU5738
 17631              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17632              		.loc 3 100 10 is_stmt 0 view .LVU5739
 17633 0fe7 498B0F   		mov	rcx, QWORD PTR [r15]	#, *_41
 17634 0fea 488D1500 		lea	rdx, .LC43[rip]	#,
 17634      000000
 17635 0ff1 E9D2F5FF 		jmp	.L1370	#
 17635      FF
 17636              	.LVL1121:
 17637              	.L1376:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17638              		.loc 3 100 10 view .LVU5740
 17639              	.LBE1044:
 17640              	.LBE1043:
1282:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tunelevel > 4) {
 17641              		.loc 1 1282 34 is_stmt 1 discriminator 1 view .LVU5741
 17642              	.LBB1045:
 17643              	.LBI1045:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17644              		.loc 3 98 1 discriminator 1 view .LVU5742
 17645              	.LBB1046:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17646              		.loc 3 100 3 discriminator 1 view .LVU5743
 17647              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
GAS LISTING /tmp/cclewcPz.s 			page 467


 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17648              		.loc 3 100 10 is_stmt 0 discriminator 1 view .LVU5744
 17649 0ff6 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 17649      000000
 17650 0ffd 488D3D00 		lea	rdi, .LC37[rip]	#,
 17650      000000
 17651 1004 BA180000 		mov	edx, 24	#,
 17651      00
 17652 1009 BE010000 		mov	esi, 1	#,
 17652      00
 17653 100e E8000000 		call	fwrite@PLT	#
 17653      00
 17654              	.LVL1122:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17655              		.loc 3 100 10 discriminator 1 view .LVU5745
 17656              	.LBE1046:
 17657              	.LBE1045:
1282:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tunelevel > 4) {
 17658              		.loc 1 1282 80 is_stmt 1 discriminator 1 view .LVU5746
 17659 1013 498B3C24 		mov	rdi, QWORD PTR [r12]	#, *argv_161(D)
 17660 1017 E8000000 		call	usage	#
 17660      00
 17661              	.LVL1123:
 17662              	.L1384:
1282:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tunelevel > 4) {
 17663              		.loc 1 1282 80 is_stmt 0 discriminator 1 view .LVU5747
 17664              	.LBE1204:
 17665              	# sieve_extend.c:1378: }
 17666              		.loc 1 1378 1 view .LVU5748
 17667 101c E8000000 		call	__stack_chk_fail@PLT	#
 17667      00
 17668              	.LVL1124:
 17669              	.L1379:
 17670              	.LBB1205:
1289:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
 17671              		.loc 1 1289 34 is_stmt 1 discriminator 1 view .LVU5749
 17672              	.LBB1047:
 17673              	.LBI1047:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17674              		.loc 3 98 1 discriminator 1 view .LVU5750
 17675              	.LBB1048:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17676              		.loc 3 100 3 discriminator 1 view .LVU5751
 17677              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17678              		.loc 3 100 10 is_stmt 0 discriminator 1 view .LVU5752
 17679 1021 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 17679      000000
 17680 1028 488D3D00 		lea	rdi, .LC41[rip]	#,
 17680      000000
 17681 102f BA1A0000 		mov	edx, 26	#,
 17681      00
 17682 1034 BE010000 		mov	esi, 1	#,
 17682      00
 17683 1039 E8000000 		call	fwrite@PLT	#
 17683      00
 17684              	.LVL1125:
GAS LISTING /tmp/cclewcPz.s 			page 468


 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 17685              		.loc 3 100 10 discriminator 1 view .LVU5753
 17686              	.LBE1048:
 17687              	.LBE1047:
1289:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
 17688              		.loc 1 1289 82 is_stmt 1 discriminator 1 view .LVU5754
 17689 103e 498B3C24 		mov	rdi, QWORD PTR [r12]	#, *argv_161(D)
 17690 1042 E8000000 		call	usage	#
 17690      00
 17691              	.LVL1126:
 17692              	.LBE1205:
 17693              		.cfi_endproc
 17694              	.LFE96:
 17696              		.section	.rodata
 17697              		.align 16
 17700              	CSWTCH.123:
 17701 0000 9A999999 		.long	2576980378
 17702 0004 9999B93F 		.long	1069128089
 17703 0008 9A999999 		.long	2576980378
 17704 000c 9999C93F 		.long	1070176665
 17705 0010 9A999999 		.long	2576980378
 17706 0014 9999C93F 		.long	1070176665
 17707 0018 00000000 		.align 16
 17707      00000000 
 17710              	CSWTCH.122:
 17711 0020 00080000 		.quad	2048
 17711      00000000 
 17712 0028 00040000 		.quad	1024
 17712      00000000 
 17713 0030 40000000 		.quad	64
 17713      00000000 
 17714 0038 00000000 		.align 16
 17714      00000000 
 17717              	CSWTCH.121:
 17718 0040 20000000 		.quad	32
 17718      00000000 
 17719 0048 10000000 		.quad	16
 17719      00000000 
 17720 0050 04000000 		.quad	4
 17720      00000000 
 17721 0058 00000000 		.align 16
 17721      00000000 
 17724              	CSWTCH.120:
 17725 0060 10000000 		.quad	16
 17725      00000000 
 17726 0068 08000000 		.quad	8
 17726      00000000 
 17727 0070 04000000 		.quad	4
 17727      00000000 
 17728              		.globl	debug_hitpoint
 17729              		.bss
 17730              		.align 32
 17733              	debug_hitpoint:
 17734 0000 00000000 		.zero	40
 17734      00000000 
 17734      00000000 
 17734      00000000 
GAS LISTING /tmp/cclewcPz.s 			page 469


 17734      00000000 
 17735              		.globl	global_VECTORSTEP_FASTER
 17736              		.data
 17737              		.align 8
 17740              	global_VECTORSTEP_FASTER:
 17741 0000 80000000 		.quad	128
 17741      00000000 
 17742              		.globl	global_MEDIUMSTEP_FASTER
 17743              		.bss
 17744              		.align 8
 17747              	global_MEDIUMSTEP_FASTER:
 17748 0028 00000000 		.zero	8
 17748      00000000 
 17749              		.globl	global_SMALLSTEP_FASTER
 17750              		.align 8
 17753              	global_SMALLSTEP_FASTER:
 17754 0030 00000000 		.zero	8
 17754      00000000 
 17755              		.section	.rodata.cst32,"aM",@progbits,32
 17756              		.align 32
 17757              	.LC0:
 17758 0000 00000000 		.quad	0
 17758      00000000 
 17759 0008 01000000 		.quad	1
 17759      00000000 
 17760 0010 02000000 		.quad	2
 17760      00000000 
 17761 0018 03000000 		.quad	3
 17761      00000000 
 17762              		.align 32
 17763              	.LC1:
 17764 0020 08000000 		.quad	8
 17764      00000000 
 17765 0028 08000000 		.quad	8
 17765      00000000 
 17766 0030 08000000 		.quad	8
 17766      00000000 
 17767 0038 08000000 		.quad	8
 17767      00000000 
 17768              		.align 32
 17769              	.LC2:
 17770 0040 04000000 		.quad	4
 17770      00000000 
 17771 0048 04000000 		.quad	4
 17771      00000000 
 17772 0050 04000000 		.quad	4
 17772      00000000 
 17773 0058 04000000 		.quad	4
 17773      00000000 
 17774              		.align 32
 17775              	.LC3:
 17776 0060 3F000000 		.long	63
 17777 0064 3F000000 		.long	63
 17778 0068 3F000000 		.long	63
 17779 006c 3F000000 		.long	63
 17780 0070 3F000000 		.long	63
 17781 0074 3F000000 		.long	63
GAS LISTING /tmp/cclewcPz.s 			page 470


 17782 0078 3F000000 		.long	63
 17783 007c 3F000000 		.long	63
 17784              		.section	.rodata.cst8,"aM",@progbits,8
 17785              		.align 8
 17786              	.LC6:
 17787 0000 00000000 		.long	0
 17788 0004 00000000 		.long	0
 17789              		.align 8
 17790              	.LC7:
 17791 0008 00000000 		.long	0
 17792 000c 0000F87F 		.long	2146959360
 17793              		.align 8
 17794              	.LC8:
 17795 0010 95D626E8 		.long	3894859413
 17796 0014 0B2E113E 		.long	1041313291
 17797              		.align 8
 17798              	.LC28:
 17799 0018 9A999999 		.long	2576980378
 17800 001c 9999B93F 		.long	1069128089
 17801              		.align 8
 17802              	.LC61:
 17803 0020 00000000 		.long	0
 17804 0024 00001440 		.long	1075052544
 17805              		.text
 17806              	.Letext0:
 17807              		.file 4 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 17808              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types.h"
 17809              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 17810              		.file 7 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 17811              		.file 8 "/usr/include/stdio.h"
 17812              		.file 9 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 17813              		.file 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h"
 17814              		.file 11 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
 17815              		.file 12 "/usr/include/stdint.h"
 17816              		.file 13 "/usr/include/time.h"
 17817              		.file 14 "/usr/include/math.h"
 17818              		.file 15 "/usr/include/stdlib.h"
 17819              		.file 16 "<built-in>"
 43431              		.section	.note.gnu.property,"a"
 43432              		.align 8
 43433 0000 04000000 		.long	 1f - 0f
 43434 0004 10000000 		.long	 4f - 1f
 43435 0008 05000000 		.long	 5
 43436              	0:
 43437 000c 474E5500 		.string	 "GNU"
 43438              	1:
 43439              		.align 8
 43440 0010 020000C0 		.long	 0xc0000002
 43441 0014 04000000 		.long	 3f - 2f
 43442              	2:
 43443 0018 03000000 		.long	 0x3
 43444              	3:
 43445 001c 00000000 		.align 8
 43446              	4:
GAS LISTING /tmp/cclewcPz.s 			page 471


DEFINED SYMBOLS
                            *ABS*:0000000000000000 sieve_extend.c
     /tmp/cclewcPz.s:86     .text:0000000000000000 extendSieve_smallSize
     /tmp/cclewcPz.s:17757  .rodata.cst32:0000000000000000 .LC0
     /tmp/cclewcPz.s:17763  .rodata.cst32:0000000000000020 .LC1
     /tmp/cclewcPz.s:17769  .rodata.cst32:0000000000000040 .LC2
     /tmp/cclewcPz.s:17775  .rodata.cst32:0000000000000060 .LC3
     /tmp/cclewcPz.s:1227   .text:00000000000006c0 extendSieve_shiftright_base
     /tmp/cclewcPz.s:2291   .text:0000000000000e00 compare_tuning_result
     /tmp/cclewcPz.s:2317   .text:0000000000000e20 setBitsTrue_largeRange_vector
     /tmp/cclewcPz.s:4116   .text:00000000000017f0 extendSieve_aligned
     /tmp/cclewcPz.s:5005   .text:0000000000001d70 extendSieve_shiftleft
     /tmp/cclewcPz.s:7679   .text:0000000000002e00 show_primes.isra.0
     /tmp/cclewcPz.s:7674   .rodata.str1.1:0000000000000006 .LC5
     /tmp/cclewcPz.s:7672   .rodata.str1.1:0000000000000000 .LC4
     /tmp/cclewcPz.s:8086   .text:0000000000002fa0 sieve
     /tmp/cclewcPz.s:17740  .data:0000000000000000 global_VECTORSTEP_FASTER
     /tmp/cclewcPz.s:10564  .text:0000000000003a00 tune_benchmark
     /tmp/cclewcPz.s:17747  .bss:0000000000000028 global_MEDIUMSTEP_FASTER
     /tmp/cclewcPz.s:17753  .bss:0000000000000030 global_SMALLSTEP_FASTER
     /tmp/cclewcPz.s:17790  .rodata.cst8:0000000000000008 .LC7
     /tmp/cclewcPz.s:17794  .rodata.cst8:0000000000000010 .LC8
     /tmp/cclewcPz.s:10781  .text:0000000000003b40 shiftvec
     /tmp/cclewcPz.s:11943  .text:0000000000003f00 validatePrimeCount
     /tmp/cclewcPz.s:11924  .rodata.str1.8:0000000000000000 .LC9
     /tmp/cclewcPz.s:11930  .rodata.str1.1:0000000000000023 .LC11
     /tmp/cclewcPz.s:11934  .rodata.str1.8:00000000000000c0 .LC12
     /tmp/cclewcPz.s:11927  .rodata.str1.8:0000000000000058 .LC10
     /tmp/cclewcPz.s:11937  .rodata.str1.8:00000000000000f8 .LC13
     /tmp/cclewcPz.s:13192  .text:0000000000004680 usage
     /tmp/cclewcPz.s:13152  .rodata.str1.8:0000000000000148 .LC14
     /tmp/cclewcPz.s:13155  .rodata.str1.1:0000000000000031 .LC15
     /tmp/cclewcPz.s:13159  .rodata.str1.8:0000000000000168 .LC16
     /tmp/cclewcPz.s:13162  .rodata.str1.8:00000000000001a8 .LC17
     /tmp/cclewcPz.s:13165  .rodata.str1.8:00000000000001d8 .LC18
     /tmp/cclewcPz.s:13168  .rodata.str1.8:0000000000000220 .LC19
     /tmp/cclewcPz.s:13171  .rodata.str1.8:0000000000000250 .LC20
     /tmp/cclewcPz.s:13174  .rodata.str1.8:0000000000000290 .LC21
     /tmp/cclewcPz.s:13177  .rodata.str1.8:00000000000002d0 .LC22
     /tmp/cclewcPz.s:13180  .rodata.str1.8:0000000000000320 .LC23
     /tmp/cclewcPz.s:13183  .rodata.str1.8:0000000000000348 .LC24
     /tmp/cclewcPz.s:13186  .rodata.str1.8:0000000000000378 .LC25
     /tmp/cclewcPz.s:13437  .text:0000000000004800 printfcomma2
     /tmp/cclewcPz.s:13429  .rodata.str1.1:000000000000003b .LC26
     /tmp/cclewcPz.s:13431  .rodata.str1.1:000000000000003e .LC27
     /tmp/cclewcPz.s:13563  .text:0000000000004870 printfcomma
     /tmp/cclewcPz.s:14023  .text:00000000000049d0 benchmark
     /tmp/cclewcPz.s:17786  .rodata.cst8:0000000000000000 .LC6
     /tmp/cclewcPz.s:14317  .text:0000000000004bd0 test
     /tmp/cclewcPz.s:14621  .text:0000000000004d60 test2
     /tmp/cclewcPz.s:14741  .text:0000000000004ef0 test3
     /tmp/cclewcPz.s:15102  .text.startup:0000000000000000 main
     /tmp/cclewcPz.s:15010  .rodata.str1.1:0000000000000053 .LC30
     /tmp/cclewcPz.s:15012  .rodata.str1.1:000000000000005a .LC31
     /tmp/cclewcPz.s:15021  .rodata.str1.1:0000000000000080 .LC34
     /tmp/cclewcPz.s:15023  .rodata.str1.1:0000000000000099 .LC35
     /tmp/cclewcPz.s:15025  .rodata.str1.1:00000000000000a1 .LC36
GAS LISTING /tmp/cclewcPz.s 			page 472


     /tmp/cclewcPz.s:15034  .rodata.str1.1:00000000000000c1 .LC39
     /tmp/cclewcPz.s:15055  .rodata.str1.1:000000000000014f .LC48
     /tmp/cclewcPz.s:15053  .rodata.str1.1:0000000000000136 .LC47
     /tmp/cclewcPz.s:15036  .rodata.str1.1:00000000000000d7 .LC40
     /tmp/cclewcPz.s:15040  .rodata.str1.1:00000000000000f9 .LC42
     /tmp/cclewcPz.s:15047  .rodata.str1.1:00000000000000fd .LC44
     /tmp/cclewcPz.s:15049  .rodata.str1.1:0000000000000116 .LC45
     /tmp/cclewcPz.s:15057  .rodata.str1.1:000000000000015f .LC49
     /tmp/cclewcPz.s:17802  .rodata.cst8:0000000000000020 .LC61
     /tmp/cclewcPz.s:15090  .rodata.str1.8:0000000000000548 .LC62
     /tmp/cclewcPz.s:15008  .rodata.str1.1:0000000000000044 .LC29
     /tmp/cclewcPz.s:15051  .rodata.str1.1:0000000000000127 .LC46
     /tmp/cclewcPz.s:15018  .rodata.str1.8:00000000000003b0 .LC33
     /tmp/cclewcPz.s:15096  .rodata.str1.1:00000000000001b3 .LC64
     /tmp/cclewcPz.s:15093  .rodata.str1.8:0000000000000590 .LC63
     /tmp/cclewcPz.s:17798  .rodata.cst8:0000000000000018 .LC28
     /tmp/cclewcPz.s:15070  .rodata.str1.1:0000000000000188 .LC54
     /tmp/cclewcPz.s:15067  .rodata.str1.8:0000000000000420 .LC53
     /tmp/cclewcPz.s:15074  .rodata.str1.8:00000000000004a8 .LC55
     /tmp/cclewcPz.s:15077  .rodata.str1.1:000000000000018d .LC56
     /tmp/cclewcPz.s:15063  .rodata.str1.1:0000000000000183 .LC52
     /tmp/cclewcPz.s:15079  .rodata.str1.1:000000000000019a .LC57
     /tmp/cclewcPz.s:15081  .rodata.str1.1:00000000000001a1 .LC58
     /tmp/cclewcPz.s:15059  .rodata.str1.1:0000000000000166 .LC50
     /tmp/cclewcPz.s:15087  .rodata.str1.8:0000000000000510 .LC60
     /tmp/cclewcPz.s:15083  .rodata.str1.1:00000000000001a5 .LC59
     /tmp/cclewcPz.s:17724  .rodata:0000000000000060 CSWTCH.120
     /tmp/cclewcPz.s:17717  .rodata:0000000000000040 CSWTCH.121
     /tmp/cclewcPz.s:17710  .rodata:0000000000000020 CSWTCH.122
     /tmp/cclewcPz.s:17700  .rodata:0000000000000000 CSWTCH.123
     /tmp/cclewcPz.s:15061  .rodata.str1.1:0000000000000179 .LC51
     /tmp/cclewcPz.s:15014  .rodata.str1.1:0000000000000064 .LC32
     /tmp/cclewcPz.s:15031  .rodata.str1.8:00000000000003d8 .LC38
     /tmp/cclewcPz.s:15044  .rodata.str1.8:00000000000003f8 .LC43
     /tmp/cclewcPz.s:15027  .rodata.str1.1:00000000000000a8 .LC37
     /tmp/cclewcPz.s:15038  .rodata.str1.1:00000000000000de .LC41
     /tmp/cclewcPz.s:17733  .bss:0000000000000000 debug_hitpoint

UNDEFINED SYMBOLS
__stack_chk_fail
_GLOBAL_OFFSET_TABLE_
memcpy
__printf_chk
putchar
aligned_alloc
clock_gettime
free
puts
stderr
__fprintf_chk
fwrite
exit
__isoc99_sscanf
malloc
qsort
