GAS LISTING /tmp/ccNeV1of.s 			page 1


   1              		.file	"sieve_extend.c"
   2              		.intel_syntax noprefix
   3              	# GNU C17 (Ubuntu 9.4.0-1ubuntu1~20.04.1) version 9.4.0 (x86_64-linux-gnu)
   4              	#	compiled by GNU C version 9.4.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl ve
   5              	
   6              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   7              	# options passed:  -imultiarch x86_64-linux-gnu sieve_extend.c
   8              	# -march=skylake -mmmx -mno-3dnow -msse -msse2 -msse3 -mssse3 -mno-sse4a
   9              	# -mcx16 -msahf -mmovbe -maes -mno-sha -mpclmul -mpopcnt -mabm -mno-lwp
  10              	# -mfma -mno-fma4 -mno-xop -mbmi -mno-sgx -mbmi2 -mno-pconfig -mno-wbnoinvd
  11              	# -mno-tbm -mavx2 -msse4.2 -msse4.1 -mlzcnt -mrtm -mhle -mrdrnd -mf16c
  12              	# -mfsgsbase -mrdseed -mprfchw -madx -mfxsr -mxsave -mxsaveopt -mno-avx512f
  13              	# -mno-avx512er -mno-avx512cd -mno-avx512pf -mno-prefetchwt1 -mclflushopt
  14              	# -mxsavec -mxsaves -mno-avx512dq -mno-avx512bw -mno-avx512vl
  15              	# -mno-avx512ifma -mno-avx512vbmi -mno-avx5124fmaps -mno-avx5124vnniw
  16              	# -mno-clwb -mno-mwaitx -mno-clzero -mno-pku -mno-rdpid -mno-gfni
  17              	# -mno-shstk -mno-avx512vbmi2 -mno-avx512vnni -mno-vaes -mno-vpclmulqdq
  18              	# -mno-avx512bitalg -mno-avx512vpopcntdq -mno-movdiri -mno-movdir64b
  19              	# -mno-waitpkg -mno-cldemote -mno-ptwrite -mtune=intel -masm=intel
  20              	# -malign-data=cacheline -mavx -g -Ofast -Wextra -Wall -Wno-unused-function
  21              	# -funroll-all-loops -fno-asynchronous-unwind-tables -fno-exceptions
  22              	# -fverbose-asm -fstack-protector-strong -Wformat-security
  23              	# -fstack-clash-protection -fcf-protection
  24              	# options enabled:  -fPIC -fPIE -faggressive-loop-optimizations
  25              	# -falign-functions -falign-jumps -falign-labels -falign-loops
  26              	# -fassociative-math -fassume-phsa -fauto-inc-dec -fbranch-count-reg
  27              	# -fcaller-saves -fcode-hoisting -fcombine-stack-adjustments -fcommon
  28              	# -fcompare-elim -fcprop-registers -fcrossjumping -fcse-follow-jumps
  29              	# -fcx-limited-range -fdefer-pop -fdelete-null-pointer-checks
  30              	# -fdevirtualize -fdevirtualize-speculatively -fdwarf2-cfi-asm
  31              	# -fearly-inlining -feliminate-unused-debug-types -fexpensive-optimizations
  32              	# -ffinite-math-only -fforward-propagate -ffp-int-builtin-inexact
  33              	# -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  34              	# -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  35              	# -fif-conversion -fif-conversion2 -findirect-inlining -finline
  36              	# -finline-atomics -finline-functions -finline-functions-called-once
  37              	# -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  38              	# -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  39              	# -fipa-ra -fipa-reference -fipa-reference-addressable -fipa-sra
  40              	# -fipa-stack-alignment -fipa-vrp -fira-hoist-pressure
  41              	# -fira-share-save-slots -fira-share-spill-slots
  42              	# -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  43              	# -fleading-underscore -flifetime-dse -floop-interchange
  44              	# -floop-unroll-and-jam -flra-remat -flto-odr-type-merging
  45              	# -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  46              	# -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  47              	# -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  48              	# -fpredictive-commoning -fprefetch-loop-arrays -freciprocal-math -free
  49              	# -freg-struct-return -frename-registers -freorder-blocks
  50              	# -freorder-blocks-and-partition -freorder-functions -frerun-cse-after-loop
  51              	# -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  52              	# -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  53              	# -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  54              	# -fsched-stalled-insns-dep -fschedule-fusion -fschedule-insns2
  55              	# -fsemantic-interposition -fshow-column -fshrink-wrap
  56              	# -fshrink-wrap-separate -fsplit-ivs-in-unroller -fsplit-loops
  57              	# -fsplit-paths -fsplit-wide-types -fssa-backprop -fssa-phiopt
GAS LISTING /tmp/ccNeV1of.s 			page 2


  58              	# -fstack-clash-protection -fstack-protector-strong -fstdarg-opt
  59              	# -fstore-merging -fstrict-aliasing -fstrict-volatile-bitfields
  60              	# -fsync-libcalls -fthread-jumps -ftoplevel-reorder -ftree-bit-ccp
  61              	# -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  62              	# -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  63              	# -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  64              	# -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  65              	# -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  66              	# -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  67              	# -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  68              	# -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  69              	# -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time
  70              	# -funroll-all-loops -funroll-loops -funsafe-math-optimizations
  71              	# -funswitch-loops -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  72              	# -fversion-loops-for-strides -fweb -fzero-initialized-in-bss
  73              	# -m128bit-long-double -m64 -m80387 -mabm -maccumulate-outgoing-args -madx
  74              	# -maes -malign-stringops -mavx -mavx2 -mbmi -mbmi2 -mclflushopt -mcx16
  75              	# -mf16c -mfancy-math-387 -mfma -mfp-ret-in-387 -mfsgsbase -mfxsr -mglibc
  76              	# -mhle -mlong-double-80 -mlzcnt -mmmx -mmovbe -mpclmul -mpopcnt -mprfchw
  77              	# -mpush-args -mrdrnd -mrdseed -mred-zone -mrtm -msahf -msse -msse2 -msse3
  78              	# -msse4 -msse4.1 -msse4.2 -mssse3 -mstv -mtls-direct-seg-refs -mvzeroupper
  79              	# -mxsave -mxsavec -mxsaveopt -mxsaves
  80              	
  81              		.text
  82              	.Ltext0:
  83              		.cfi_sections	.debug_frame
  84              		.p2align 4
  86              	extendSieve_smallSize:
  87              	.LVL0:
  88              	.LFB68:
  89              		.file 1 "sieve_extend.c"
   1:sieve_extend.c **** #include <stdio.h>
   2:sieve_extend.c **** #include <stdlib.h>
   3:sieve_extend.c **** #include <stdint.h>
   4:sieve_extend.c **** #include <time.h>
   5:sieve_extend.c **** #include <math.h>
   6:sieve_extend.c **** #include <string.h>
   7:sieve_extend.c **** 
   8:sieve_extend.c **** //add debug in front of a line to only compile it if the value below is set to 1 (or !=0)
   9:sieve_extend.c **** #define option_runonce 0
  10:sieve_extend.c **** #define debug if (option_runonce)
  11:sieve_extend.c **** #define debug2 if (option_runonce>=2)
  12:sieve_extend.c **** 
  13:sieve_extend.c **** #define default_sieve_limit 1000000
  14:sieve_extend.c **** #define default_blocksize (32*1024*8-1024)
  15:sieve_extend.c **** #define default_sieve_duration 5
  16:sieve_extend.c **** #define default_sample_duration 0.1
  17:sieve_extend.c **** #define default_sample_max 5
  18:sieve_extend.c **** #define default_verbose_level 2
  19:sieve_extend.c **** #define default_tune_level 0
  20:sieve_extend.c **** #define default_check_level 1
  21:sieve_extend.c **** #define default_show_primes_on_error 100
  22:sieve_extend.c **** #define default_showMaxFactor (0 || option_runonce?100:0)
  23:sieve_extend.c **** #define anticiped_cache_line_bytesize 128
  24:sieve_extend.c **** 
  25:sieve_extend.c **** // 64 bit
  26:sieve_extend.c **** #define TYPE uint64_t
GAS LISTING /tmp/ccNeV1of.s 			page 3


  27:sieve_extend.c **** 
  28:sieve_extend.c **** // calculate the rest dynamically
  29:sieve_extend.c **** #define counter_t TYPE
  30:sieve_extend.c **** #define bitshift_t TYPE
  31:sieve_extend.c **** #define bitword_t uint64_t
  32:sieve_extend.c **** 
  33:sieve_extend.c **** #define WORD_SIZE (sizeof(bitword_t)*8)
  34:sieve_extend.c **** #define WORD_SIZE_counter ((counter_t)WORD_SIZE)
  35:sieve_extend.c **** #define WORD_SIZE_bitshift ((bitshift_t)WORD_SIZE)
  36:sieve_extend.c **** #define pow(base,pow) (pow*((base>>pow)&1U))
  37:sieve_extend.c **** //#define SHIFT ((bitshift_t)(pow(WORD_SIZE,1)+pow(WORD_SIZE,2)+pow(WORD_SIZE,3)+pow(WORD_SIZE,4)+p
  38:sieve_extend.c **** #define SHIFT_WORD ((bitshift_t)(pow(WORD_SIZE,1)+pow(WORD_SIZE,2)+pow(WORD_SIZE,3)+pow(WORD_SIZE,4
  39:sieve_extend.c **** 
  40:sieve_extend.c **** #define VECTOR_ELEMENTS 4
  41:sieve_extend.c **** #define VECTOR_SIZE_bytes (sizeof(bitword_t)*VECTOR_ELEMENTS)
  42:sieve_extend.c **** #define VECTOR_SIZE_counter (VECTOR_SIZE_bytes*8)
  43:sieve_extend.c **** #define VECTOR_SIZE (VECTOR_SIZE_bytes*8)
  44:sieve_extend.c **** #define SHIFT_VECTOR ((bitshift_t)(pow(VECTOR_SIZE,1)+pow(VECTOR_SIZE,2)+pow(VECTOR_SIZE,3)+pow(VEC
  45:sieve_extend.c **** 
  46:sieve_extend.c **** typedef bitword_t bitvector_t __attribute__ ((vector_size(VECTOR_SIZE_bytes)));
  47:sieve_extend.c **** 
  48:sieve_extend.c **** // globals for tuning
  49:sieve_extend.c **** counter_t global_SMALLSTEP_FASTER = 0;
  50:sieve_extend.c **** counter_t global_MEDIUMSTEP_FASTER = 0;
  51:sieve_extend.c **** counter_t global_VECTORSTEP_FASTER = VECTOR_SIZE/2;
  52:sieve_extend.c **** 
  53:sieve_extend.c **** #define SAFE_SHIFTBIT (bitshift_t)1U
  54:sieve_extend.c **** #define SAFE_ZERO  (bitword_t)0U
  55:sieve_extend.c **** #define BITWORD_SHIFTBIT (bitword_t)1U
  56:sieve_extend.c **** #define WORDMASK ((~SAFE_ZERO)>>(WORD_SIZE_bitshift-SHIFT_WORD))
  57:sieve_extend.c **** #define VECTORMASK ((~SAFE_ZERO)>>(WORD_SIZE_bitshift-SHIFT_VECTOR))
  58:sieve_extend.c **** // #define SMALLSTEP_FASTER ((counter_t)0)
  59:sieve_extend.c **** // #define MEDIUMSTEP_FASTER ((counter_t)16)
  60:sieve_extend.c **** // #define VECTORSTEP_FASTER ((counter_t)128)
  61:sieve_extend.c **** 
  62:sieve_extend.c **** #define SMALLSTEP_FASTER ((counter_t)global_SMALLSTEP_FASTER)
  63:sieve_extend.c **** #define MEDIUMSTEP_FASTER ((counter_t)global_MEDIUMSTEP_FASTER)
  64:sieve_extend.c **** #define VECTORSTEP_FASTER ((counter_t)global_VECTORSTEP_FASTER)
  65:sieve_extend.c **** 
  66:sieve_extend.c **** #define wordindex(index) (((counter_t)index) >> (bitshift_t)SHIFT_WORD)
  67:sieve_extend.c **** #define wordend(index) ((counter_t)index|WORDMASK)
  68:sieve_extend.c **** #define wordstart(index) ((counter_t)index&~WORDMASK)
  69:sieve_extend.c **** #define vectorindex(index) (((counter_t)index) >> (bitshift_t)SHIFT_VECTOR)
  70:sieve_extend.c **** #define vectorstart(index) (((counter_t)index) & (counter_t)~VECTORMASK)
  71:sieve_extend.c **** #define vectorfromword(word) ((counter_t)(word)>>(SHIFT_VECTOR-SHIFT_WORD))
  72:sieve_extend.c **** 
  73:sieve_extend.c **** // modern processors do a & over the shiftssize, so we only have to do that ourselve when using the
  74:sieve_extend.c **** #define bitindex(index) ((bitshift_t)(index))
  75:sieve_extend.c **** // #define bitindex(index) ((bitshift_t)(index)&((bitword_t)(WORD_SIZE-1)))
  76:sieve_extend.c **** //#define bitindex_calc(index) ((bitshift_t)(index)&((bitshift_t)(WORD_SIZE_bitshift-SAFE_SHIFTBIT)
  77:sieve_extend.c **** #define bitindex_calc(index) ((bitshift_t)(index)&((bitshift_t)(WORDMASK)))
  78:sieve_extend.c **** #define  markmask(index) (BITWORD_SHIFTBIT << bitindex(index))
  79:sieve_extend.c **** #define  markmask_calc(index) (BITWORD_SHIFTBIT << bitindex_calc(index))
  80:sieve_extend.c **** // #define chopmask(index) ((SAFE_SHIFTBIT << bitindex(index))-SAFE_SHIFTBIT)
  81:sieve_extend.c **** // #define chopmask2(index) (((bitword_t)2U << bitindex(index))-SAFE_SHIFTBIT)
  82:sieve_extend.c **** #define chopmask(index) (~SAFE_ZERO >> (WORD_SIZE-1-bitindex_calc(index)))
  83:sieve_extend.c **** #define keepmask(index) (~SAFE_ZERO << (bitindex_calc(index)))
GAS LISTING /tmp/ccNeV1of.s 			page 4


  84:sieve_extend.c **** #define chopmask2(index) chopmask(index)
  85:sieve_extend.c **** #define real(bit) (bit*2+1)
  86:sieve_extend.c **** 
  87:sieve_extend.c **** #define min(a,b) ((a<b) ? a : b)
  88:sieve_extend.c **** #define uintsafeminus(a,b) ((a>b)?(a-b):0)
  89:sieve_extend.c **** 
  90:sieve_extend.c **** #define likely(x)       (__builtin_expect((x),1))
  91:sieve_extend.c **** #define unlikely(x)     (__builtin_expect((x),0))
  92:sieve_extend.c **** 
  93:sieve_extend.c **** counter_t debug_hitpoint[5] = { 0,0,0,0,0};
  94:sieve_extend.c **** 
  95:sieve_extend.c **** struct sieve_t {
  96:sieve_extend.c ****     bitword_t* bitarray;
  97:sieve_extend.c ****     counter_t  bits;
  98:sieve_extend.c ****     counter_t  size;
  99:sieve_extend.c **** };
 100:sieve_extend.c **** 
 101:sieve_extend.c **** #include "debugtools.h"
 102:sieve_extend.c **** 
 103:sieve_extend.c **** // use cache lines as much as possible - alignment might be key
 104:sieve_extend.c **** #define ceiling(x,y) (((x) + (y) - 1) / (y)) // Return the smallest multiple N of y such that:  x <
 105:sieve_extend.c **** static struct sieve_t *sieve_create(counter_t size) {
 106:sieve_extend.c ****     struct sieve_t *sieve = aligned_alloc(8, sizeof(struct sieve_t));
 107:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 108:sieve_extend.c **** 
 109:sieve_extend.c ****     sieve->bitarray = aligned_alloc((size_t)anticiped_cache_line_bytesize, (size_t)memSize );
 110:sieve_extend.c ****     sieve->bits     = size >> 1;
 111:sieve_extend.c ****     sieve->size     = size;
 112:sieve_extend.c **** 
 113:sieve_extend.c ****     // moved clearing the sieve with 0 to the sieve_block_extend
 114:sieve_extend.c ****     // it gave weird malloc problems at this point
 115:sieve_extend.c ****     return sieve;
 116:sieve_extend.c **** }
 117:sieve_extend.c **** 
 118:sieve_extend.c **** static void sieve_delete(struct sieve_t *sieve) {
 119:sieve_extend.c ****     free(sieve->bitarray);
 120:sieve_extend.c ****     free(sieve);
 121:sieve_extend.c **** }
 122:sieve_extend.c **** 
 123:sieve_extend.c **** // not much performance gain at smaller sieves, but its's nice to have an implementation
 124:sieve_extend.c **** static inline counter_t searchBitFalse(bitword_t* bitarray, register counter_t index) {
 125:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 126:sieve_extend.c ****     return index;
 127:sieve_extend.c **** }
 128:sieve_extend.c **** 
 129:sieve_extend.c **** // not much performance gain at smaller sieves, but its's nice to have an implementation
 130:sieve_extend.c **** static inline counter_t searchBitFalse_longRange(bitword_t* bitarray, register counter_t index) {
 131:sieve_extend.c ****     // return searchBitFalse(bitarray, index);
 132:sieve_extend.c **** 
 133:sieve_extend.c ****    register counter_t index_word = wordindex(index);
 134:sieve_extend.c ****    bitshift_t index_bit  = bitindex_calc(index);
 135:sieve_extend.c ****    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[index_word] >> index_bi
 136:sieve_extend.c ****    index += distance;
 137:sieve_extend.c ****    distance += index_bit;
 138:sieve_extend.c **** 
 139:sieve_extend.c ****    while unlikely(distance == WORD_SIZE_bitshift) { // to prevent a bug from optimzer
 140:sieve_extend.c ****        index_word++;
GAS LISTING /tmp/ccNeV1of.s 			page 5


 141:sieve_extend.c ****        distance = (bitshift_t) __builtin_ctzll(~(bitarray[index_word]));
 142:sieve_extend.c ****        index += distance;
 143:sieve_extend.c ****    }
 144:sieve_extend.c **** 
 145:sieve_extend.c ****    return index;
 146:sieve_extend.c **** }
 147:sieve_extend.c **** 
 148:sieve_extend.c **** 
 149:sieve_extend.c **** static inline void applyMask_array(bitword_t* __restrict bitarray, const counter_t step, const coun
 150:sieve_extend.c ****     register const counter_t step_2 = step * 2;
 151:sieve_extend.c ****     register const counter_t step_3 = step * 3;
 152:sieve_extend.c ****     register const counter_t step_4 = step * 4;
 153:sieve_extend.c ****     register const counter_t range_stop_word = wordindex(range_stop);
 154:sieve_extend.c ****     const counter_t loop_stop_word = (range_stop_word > step_3) ? (range_stop_word - step_3) : (cou
 155:sieve_extend.c **** 
 156:sieve_extend.c ****     #pragma GCC ivdep
 157:sieve_extend.c ****     for (;index_word < loop_stop_word;  index_word += step_4) {
 158:sieve_extend.c ****         bitarray[index_word         ] |= mask;
 159:sieve_extend.c ****         bitarray[index_word + step  ] |= mask;
 160:sieve_extend.c ****         bitarray[index_word + step_2] |= mask;
 161:sieve_extend.c ****         bitarray[index_word + step_3] |= mask;
 162:sieve_extend.c ****     }
 163:sieve_extend.c **** 
 164:sieve_extend.c ****     #pragma GCC ivdep
 165:sieve_extend.c ****     while (index_word < range_stop_word) {
 166:sieve_extend.c ****         bitarray[index_word] |= mask;
 167:sieve_extend.c ****         index_word += step;
 168:sieve_extend.c ****     }
 169:sieve_extend.c **** 
 170:sieve_extend.c ****     if (index_word == wordindex(range_stop)) {
 171:sieve_extend.c ****         bitarray[wordindex(range_stop)] |= (mask & chopmask(range_stop)); //only needed if blocks n
 172:sieve_extend.c ****         
 173:sieve_extend.c ****     }
 174:sieve_extend.c **** }
 175:sieve_extend.c **** 
 176:sieve_extend.c **** static inline void applyMask_ptr(bitword_t* __restrict bitarray, const counter_t step, const counte
 177:sieve_extend.c ****    const counter_t range_stop_word = wordindex(range_stop);
 178:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 179:sieve_extend.c ****    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_stop
 180:sieve_extend.c **** 
 181:sieve_extend.c ****    //#pragma GCC unroll 10
 182:sieve_extend.c ****    #pragma GCC ivdep
 183:sieve_extend.c ****    while likely(index_ptr < fast_loop_ptr) {
 184:sieve_extend.c ****        *index_ptr |= mask;
 185:sieve_extend.c ****        index_ptr+=step;
 186:sieve_extend.c ****        *index_ptr |= mask;
 187:sieve_extend.c ****        index_ptr+=step;
 188:sieve_extend.c ****        *index_ptr |= mask;
 189:sieve_extend.c ****        index_ptr+=step;
 190:sieve_extend.c ****        *index_ptr |= mask;
 191:sieve_extend.c ****        index_ptr+=step;
 192:sieve_extend.c ****        *index_ptr |= mask;
 193:sieve_extend.c ****        index_ptr+=step;
 194:sieve_extend.c ****    }
 195:sieve_extend.c **** 
 196:sieve_extend.c ****    register const bitword_t* __restrict range_stop_ptr = &bitarray[(range_stop_word)];
 197:sieve_extend.c ****    while likely(index_ptr < range_stop_ptr) {
GAS LISTING /tmp/ccNeV1of.s 			page 6


 198:sieve_extend.c ****        *index_ptr |= mask;
 199:sieve_extend.c ****        index_ptr+=step;
 200:sieve_extend.c ****    }
 201:sieve_extend.c **** 
 202:sieve_extend.c ****    if (index_ptr == range_stop_ptr) { // index_ptr could also end above range_stop_ptr, depending o
 203:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 204:sieve_extend.c ****    }
 205:sieve_extend.c **** }
 206:sieve_extend.c **** 
 207:sieve_extend.c **** // set bits by creating a pattern and then extending it to word and range size
 208:sieve_extend.c **** static inline void setBitsTrue_smallStep(bitword_t* __restrict bitarray, const counter_t range_star
 209:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using smallstep (%ju occurances)
 210:sieve_extend.c **** 
 211:sieve_extend.c ****     // build the pattern in a word
 212:sieve_extend.c **** 	register bitword_t pattern = BITWORD_SHIFTBIT;
 213:sieve_extend.c ****     for (bitshift_t patternsize = step; patternsize <= WORD_SIZE_bitshift; patternsize += patternsi
 214:sieve_extend.c ****         pattern |= (pattern << patternsize);
 215:sieve_extend.c **** 
 216:sieve_extend.c ****     // debug if (step==13) { printf("Before\n"); dump_bitarray(bitarray,10); }
 217:sieve_extend.c ****     
 218:sieve_extend.c ****     // initialize loop variables and stop if this is it
 219:sieve_extend.c ****     const counter_t range_stop_word = wordindex(range_stop);
 220:sieve_extend.c ****     register counter_t range_start_word = wordindex(range_start);
 221:sieve_extend.c ****      if (range_start_word >= range_stop_word) { // shortcut
 222:sieve_extend.c ****        bitarray[range_start_word] |= (pattern << bitindex(range_start)) & chopmask(range_stop);
 223:sieve_extend.c ****         //  debug if (step==13) { printf("After\n"); dump_bitarray(bitarray,10); }
 224:sieve_extend.c ****        return;
 225:sieve_extend.c ****     }
 226:sieve_extend.c ****     
 227:sieve_extend.c ****     bitarray[range_start_word] |= (pattern << bitindex(range_start));
 228:sieve_extend.c **** 
 229:sieve_extend.c ****    // from now on, we are before range_stop_word
 230:sieve_extend.c ****    // first word is special, because it should not set bits before the range_start_bit
 231:sieve_extend.c ****    register bitshift_t pattern_size = WORD_SIZE_bitshift - (WORD_SIZE_bitshift % step);
 232:sieve_extend.c ****    register bitshift_t pattern_shift = step - (WORD_SIZE_bitshift % step);
 233:sieve_extend.c ****    register bitshift_t shift = (bitindex_calc(range_start))%step ;
 234:sieve_extend.c ****    counter_t loop_range = range_stop_word - range_start_word;
 235:sieve_extend.c ****    //#pragma GCC unroll 16
 236:sieve_extend.c ****    #pragma GCC ivdep
 237:sieve_extend.c ****    for (counter_t i=1; i <= loop_range; i++) {
 238:sieve_extend.c ****         bitshift_t totalshift = (shift+i*pattern_shift) % step;
 239:sieve_extend.c ****        bitarray[range_start_word+i] |=  (pattern >> (pattern_size-totalshift)) | (pattern << (total
 240:sieve_extend.c **** 
 241:sieve_extend.c ****         // bitarray[range_start_word+i] |=  (pattern >> (pattern_size-((shift+i*pattern_shift) % st
 242:sieve_extend.c ****    }
 243:sieve_extend.c ****    bitarray[range_stop_word] &= chopmask(range_stop);
 244:sieve_extend.c **** 
 245:sieve_extend.c **** //    for(counter_t check=range_start; check<=range_stop; check+=step) {
 246:sieve_extend.c **** //         if (!(bitarray[wordindex(check)] & markmask(check))) {
 247:sieve_extend.c **** //             printf("Bit %ju not set\n",check);
 248:sieve_extend.c **** //             dump_bitarray(bitarray,4);
 249:sieve_extend.c **** //             printWord(pattern); printf("\n");
 250:sieve_extend.c **** //             exit(0);
 251:sieve_extend.c **** //         }
 252:sieve_extend.c **** //    }
 253:sieve_extend.c **** 
 254:sieve_extend.c ****     // pattern = (pattern << (bitindex_calc(range_start) % step)); // correct for inital offset
GAS LISTING /tmp/ccNeV1of.s 			page 7


 255:sieve_extend.c ****     // const register bitshift_t pattern_shift = WORD_SIZE_bitshift % step;
 256:sieve_extend.c ****     // const register bitshift_t pattern_shift_flipped = WORD_SIZE_bitshift - pattern_shift - patte
 257:sieve_extend.c ****     // const register counter_t loop_range = range_stop_word - range_start_word;
 258:sieve_extend.c ****     // //#pragma GCC unroll 16
 259:sieve_extend.c ****     // #pragma GCC ivdep
 260:sieve_extend.c ****     // for (counter_t i=1; i <= loop_range; i++) {
 261:sieve_extend.c ****     //     pattern = (pattern >> pattern_shift) | (pattern << pattern_shift_flipped);
 262:sieve_extend.c ****     //     bitarray[range_start_word+i] |= pattern;
 263:sieve_extend.c ****     // }
 264:sieve_extend.c ****     // bitarray[range_stop_word] &= chopmask(range_stop);
 265:sieve_extend.c **** }
 266:sieve_extend.c **** 
 267:sieve_extend.c **** // Medium steps could be within the same word (e.g. less than 64 bits apart).
 268:sieve_extend.c **** // By joining the masks and then writing to memory, we might save some time.
 269:sieve_extend.c **** // This is especially true for small steps over long ranges
 270:sieve_extend.c **** // but it needs tuning, because there is some overhead of checking if the next step is in the same 
 271:sieve_extend.c **** static void  setBitsTrue_mediumStep(bitword_t* __restrict bitarray, const counter_t range_start, co
 272:sieve_extend.c ****     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * step;
 273:sieve_extend.c **** 
 274:sieve_extend.c ****     if (range_stop_unique > range_stop) { // the range will not repeat itself; no need to try to re
 275:sieve_extend.c ****         debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using mediumstep-unique (%ju
 276:sieve_extend.c **** 
 277:sieve_extend.c ****         #pragma GCC ivdep
 278:sieve_extend.c ****         for (register counter_t index = range_start; index <= range_stop;) {
 279:sieve_extend.c ****             register counter_t index_word = wordindex(index);
 280:sieve_extend.c ****             register bitword_t mask = SAFE_ZERO;
 281:sieve_extend.c ****             #pragma GCC ivdep
 282:sieve_extend.c ****             do {
 283:sieve_extend.c ****                 mask |= markmask(index);
 284:sieve_extend.c ****                 index += step;
 285:sieve_extend.c ****             } while (index_word == wordindex(index));
 286:sieve_extend.c ****             // for (; index_word == wordindex(index);  index += step) 
 287:sieve_extend.c ****             //     mask |= markmask(index);
 288:sieve_extend.c ****             bitarray[index_word] |= mask;
 289:sieve_extend.c ****         }
 290:sieve_extend.c ****     }
 291:sieve_extend.c ****     else { // this mask will reoccur at a interval of step words -> fill mask and reapply as a inte
 292:sieve_extend.c ****         debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using mediumstep-repeat (%ju
 293:sieve_extend.c ****         
 294:sieve_extend.c ****         #pragma GCC ivdep
 295:sieve_extend.c ****         for (register counter_t index = range_start; index <= range_stop_unique;) {
 296:sieve_extend.c ****             register counter_t index_word = wordindex(index);
 297:sieve_extend.c ****             register bitword_t mask = SAFE_ZERO;
 298:sieve_extend.c ****             #pragma GCC ivdep
 299:sieve_extend.c ****             do {
 300:sieve_extend.c ****                 mask |= markmask(index);
 301:sieve_extend.c ****                 index += step;
 302:sieve_extend.c ****             } while (index_word == wordindex(index));
 303:sieve_extend.c ****             // #pragma GCC ivdep
 304:sieve_extend.c ****             // for (; index_word == wordindex(index);  index += step) 
 305:sieve_extend.c ****             //     mask |= markmask(index);
 306:sieve_extend.c ****             #if __APPLE__
 307:sieve_extend.c ****                applyMask_array(bitarray, step, range_stop, mask, index_word);
 308:sieve_extend.c ****             #else
 309:sieve_extend.c ****                applyMask_ptr(bitarray, step, range_stop, mask, index_word);
 310:sieve_extend.c ****             #endif
 311:sieve_extend.c ****         }
GAS LISTING /tmp/ccNeV1of.s 			page 8


 312:sieve_extend.c ****     }
 313:sieve_extend.c **** }
 314:sieve_extend.c **** 
 315:sieve_extend.c **** // large steps in small ranges (< WORD_SIZE * step) mean the mask is unique
 316:sieve_extend.c **** static inline void setBitsTrue_largeSteps(bitword_t* __restrict bitarray, const counter_t range_sta
 317:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largesteps (%ju occurances
 318:sieve_extend.c ****     
 319:sieve_extend.c ****     //#pragma GCC unroll 16
 320:sieve_extend.c ****     #pragma GCC ivdep
 321:sieve_extend.c ****     for (counter_t index = range_start; index <= range_stop; index += step) {
 322:sieve_extend.c ****         bitarray[wordindex(index)] |= markmask(index);
 323:sieve_extend.c ****     }
 324:sieve_extend.c **** }
 325:sieve_extend.c **** 
 326:sieve_extend.c **** static inline void setBitsTrue_largeSteps_unroll(bitword_t* __restrict bitarray, const counter_t ra
 327:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largesteps (%ju occurances
 328:sieve_extend.c ****     
 329:sieve_extend.c ****     counter_t loop_iterations = (range_stop - range_start) / step;
 330:sieve_extend.c ****     //#pragma GCC unroll 16
 331:sieve_extend.c ****     #pragma GCC ivdep 
 332:sieve_extend.c ****     for (register counter_t i = 0; i <= loop_iterations; i++) {
 333:sieve_extend.c ****          bitarray[wordindex(range_start+i*step)] |= markmask(range_start+i*step);
 334:sieve_extend.c ****     }
 335:sieve_extend.c **** }
 336:sieve_extend.c **** 
 337:sieve_extend.c **** // small ranges (< WORD_SIZE * step) mean the mask is unique
 338:sieve_extend.c **** static void setBitsTrue_race(bitword_t* bitarray, counter_t index1, counter_t index2, const counter
 339:sieve_extend.c ****     debug printf("Setting bits step %ju and %ju in %ju bit range (%ju-%ju) using race (%ju occuranc
 340:sieve_extend.c **** 
 341:sieve_extend.c ****     counter_t index1_word = wordindex(index1);
 342:sieve_extend.c ****     counter_t index2_word = wordindex(index2);
 343:sieve_extend.c ****     
 344:sieve_extend.c ****     while (1) {
 345:sieve_extend.c ****         if (index1_word == index2_word) {
 346:sieve_extend.c ****             bitword_t mask = SAFE_ZERO;
 347:sieve_extend.c ****             counter_t index_word = index1_word;
 348:sieve_extend.c ****             do {
 349:sieve_extend.c ****                 mask |= markmask(index1);
 350:sieve_extend.c ****                 index1 += step1;
 351:sieve_extend.c ****                 index1_word = wordindex(index1);
 352:sieve_extend.c ****             } while (index1_word == index_word);
 353:sieve_extend.c ****             do {
 354:sieve_extend.c ****                 mask |= markmask(index2);
 355:sieve_extend.c ****                 index2 += step2;
 356:sieve_extend.c ****                 index2_word = wordindex(index2);
 357:sieve_extend.c ****             } while (index2_word == index_word);
 358:sieve_extend.c ****             bitarray[index_word] |= mask;
 359:sieve_extend.c ****         }
 360:sieve_extend.c **** 
 361:sieve_extend.c ****         // because step is larger, index2 is the most likely to get out of bounds first
 362:sieve_extend.c ****         if (index2 > range_stop) {
 363:sieve_extend.c ****             while (index1 <= range_stop) {
 364:sieve_extend.c ****                 bitarray[wordindex(index1)] |= markmask(index1);
 365:sieve_extend.c ****                 index1 += step1;
 366:sieve_extend.c ****             }
 367:sieve_extend.c ****             return;
 368:sieve_extend.c ****         }
GAS LISTING /tmp/ccNeV1of.s 			page 9


 369:sieve_extend.c **** 
 370:sieve_extend.c ****         if (index1 > range_stop) {
 371:sieve_extend.c ****             while (index2 <= range_stop) {
 372:sieve_extend.c ****                 bitarray[wordindex(index2)] |= markmask(index2);
 373:sieve_extend.c ****                 index2 += step2;
 374:sieve_extend.c ****             }
 375:sieve_extend.c ****             return;
 376:sieve_extend.c ****         }
 377:sieve_extend.c **** 
 378:sieve_extend.c ****         while (index1_word < index2_word) {
 379:sieve_extend.c ****             bitarray[index1_word] |= markmask(index1);
 380:sieve_extend.c ****             index1 += step1;
 381:sieve_extend.c ****             index1_word = wordindex(index1);
 382:sieve_extend.c ****         }
 383:sieve_extend.c ****         
 384:sieve_extend.c ****         while (index2_word < index1_word){
 385:sieve_extend.c ****             bitarray[index2_word] |= markmask(index2);
 386:sieve_extend.c ****             index2 += step2;
 387:sieve_extend.c ****             index2_word = wordindex(index2);
 388:sieve_extend.c ****         }
 389:sieve_extend.c **** 
 390:sieve_extend.c ****     }
 391:sieve_extend.c **** }
 392:sieve_extend.c **** 
 393:sieve_extend.c **** // Large ranges (> WORD_SIZE * step) mean the same mask can be reused
 394:sieve_extend.c **** static inline void setBitsTrue_largeRange(bitword_t* __restrict bitarray, const counter_t range_sta
 395:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange (%ju occurances
 396:sieve_extend.c ****     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * step;
 397:sieve_extend.c **** 
 398:sieve_extend.c ****     //#pragma GCC unroll 16
 399:sieve_extend.c ****     #pragma GCC ivdep
 400:sieve_extend.c ****     for (register counter_t index = range_start; index < range_stop_unique; index += step) {
 401:sieve_extend.c ****         #if __APPLE__
 402:sieve_extend.c ****             applyMask_array(bitarray, step, range_stop, markmask(index), wordindex(index));
 403:sieve_extend.c ****         #else
 404:sieve_extend.c ****             applyMask_ptr(bitarray, step, range_stop, markmask(index), wordindex(index));
 405:sieve_extend.c ****         #endif
 406:sieve_extend.c ****     }
 407:sieve_extend.c **** }
 408:sieve_extend.c **** 
 409:sieve_extend.c **** 
 410:sieve_extend.c **** static inline void applyMask_vector_ptr(bitvector_t* __restrict bitarray, const counter_t step, con
 411:sieve_extend.c ****     const counter_t range_stop_vector = vectorindex(range_stop);
 412:sieve_extend.c ****     register bitvector_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_vec
 413:sieve_extend.c ****     register bitvector_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_s
 414:sieve_extend.c ****     
 415:sieve_extend.c ****     //#pragma GCC unroll 16
 416:sieve_extend.c ****     #pragma GCC ivdep
 417:sieve_extend.c ****     while likely(index_ptr < fast_loop_ptr) {
 418:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 419:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 420:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 421:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 422:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 423:sieve_extend.c ****     }
 424:sieve_extend.c ****     
 425:sieve_extend.c ****     register const bitvector_t* __restrict range_stop_ptr = &bitarray[(range_stop_vector)];
GAS LISTING /tmp/ccNeV1of.s 			page 10


 426:sieve_extend.c ****     while likely(index_ptr <= range_stop_ptr) {
 427:sieve_extend.c ****         *index_ptr |= mask; index_ptr+=step;
 428:sieve_extend.c ****     }
 429:sieve_extend.c **** }
 430:sieve_extend.c **** 
 431:sieve_extend.c **** static inline void applyMask_vector_array(bitvector_t* __restrict bitarray_vector, const counter_t 
 432:sieve_extend.c **** 
 433:sieve_extend.c **** //    bitvector_t* __restrict bitarray_vector = __builtin_assume_aligned( (bitvector_t*) bitarray_w
 434:sieve_extend.c ****     register counter_t current_vector = index_vector;
 435:sieve_extend.c ****     register const counter_t range_stop_vector = vectorindex(range_stop);
 436:sieve_extend.c ****     register const counter_t step_2 = step * 2;
 437:sieve_extend.c ****     register const counter_t step_3 = step * 3;
 438:sieve_extend.c ****     register const counter_t step_4 = step * 4;
 439:sieve_extend.c **** 
 440:sieve_extend.c ****     if (current_vector+step_4 <= range_stop_vector) {
 441:sieve_extend.c ****         register const counter_t loop_stop_vector = (range_stop_vector > step_4) ? (range_stop_vect
 442:sieve_extend.c ****         //#pragma GCC unroll 16
 443:sieve_extend.c ****         #pragma GCC ivdep
 444:sieve_extend.c ****         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 445:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 448:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 449:sieve_extend.c ****         }
 450:sieve_extend.c ****     }
 451:sieve_extend.c ****     
 452:sieve_extend.c ****     //#pragma GCC unroll 16
 453:sieve_extend.c ****     #pragma GCC ivdep 
 454:sieve_extend.c ****     for(; current_vector <= range_stop_vector; current_vector += step) {
 455:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 456:sieve_extend.c ****     }
 457:sieve_extend.c ****     
 458:sieve_extend.c **** }
 459:sieve_extend.c **** 
 460:sieve_extend.c **** static void setBitsTrue_largeRange_vector(bitword_t* __restrict bitarray_word, counter_t range_star
 461:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange vector (%ju occ
 462:sieve_extend.c **** 
 463:sieve_extend.c ****     bitvector_t* __restrict bitarray_vector = __builtin_assume_aligned( (bitvector_t*) bitarray_wor
 464:sieve_extend.c ****     counter_t range_start_atvector = vectorstart(range_start);
 465:sieve_extend.c ****     if likely((range_start_atvector + step) < range_start) { // not the first step possible in this
 466:sieve_extend.c ****         debug { printf("Range start+step %ju not at start of vector %ju\n",(uintmax_t)range_start+(
 467:sieve_extend.c **** 
 468:sieve_extend.c ****         range_start_atvector += VECTOR_SIZE; // find next vector
 469:sieve_extend.c ****         if (unlikely(range_start_atvector > range_stop)) { // we should not be here; just handle wi
 470:sieve_extend.c ****             debug2 printf("..Marking and returning without vector\n");
 471:sieve_extend.c **** 
 472:sieve_extend.c ****             for (counter_t index = range_start; index <= range_stop; index += step) 
 473:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 474:sieve_extend.c ****             return;                 
 475:sieve_extend.c ****         }
 476:sieve_extend.c **** 
 477:sieve_extend.c ****         debug2 printf("..Marking without vector until %ju\n",(uintmax_t)range_start_atvector);
 478:sieve_extend.c ****         // register counter_t index = range_start; // outside to later adjust range_start
 479:sieve_extend.c ****         //#pragma GCC unroll 16
 480:sieve_extend.c ****         #pragma GCC ivdep 
 481:sieve_extend.c ****         for (; range_start <= range_start_atvector; range_start += step) 
 482:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
GAS LISTING /tmp/ccNeV1of.s 			page 11


 483:sieve_extend.c ****     }
 484:sieve_extend.c ****     
 485:sieve_extend.c ****     const counter_t range_stop_unique =  min(range_start + VECTOR_SIZE_counter * step, range_stop);
 486:sieve_extend.c **** 
 487:sieve_extend.c ****     //#pragma GCC unroll 16
 488:sieve_extend.c ****     #pragma GCC ivdep 
 489:sieve_extend.c ****     for (counter_t index = range_start; index < range_stop_unique;) {
 490:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 491:sieve_extend.c ****         register bitvector_t quadmask = { };
 492:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 493:sieve_extend.c ****         
 494:sieve_extend.c ****         // build a quadmask
 495:sieve_extend.c ****         //#pragma GCC unroll 16
 496:sieve_extend.c ****         #pragma GCC ivdep 
 497:sieve_extend.c ****         do {
 498:sieve_extend.c ****             quadmask[word] |= markmask(index);
 499:sieve_extend.c ****             index += step;
 500:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 501:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 502:sieve_extend.c ****         
 503:sieve_extend.c ****         // use mask on all n*step multiples
 504:sieve_extend.c ****         register counter_t current_vector = current_vector_start_word >> (SHIFT_VECTOR - SHIFT_WORD
 505:sieve_extend.c ****         // const counter_t range_stop_vector = vectorindex(range_stop);
 506:sieve_extend.c **** 
 507:sieve_extend.c ****         applyMask_vector_array(bitarray_vector, step, range_stop, quadmask, current_vector);
 508:sieve_extend.c ****     }
 509:sieve_extend.c **** }
 510:sieve_extend.c **** 
 511:sieve_extend.c **** static void extendSieve_smallSize(bitword_t* __restrict bitarray, const counter_t source_start, con
  90              		.loc 1 511 153 view -0
  91              		.cfi_startproc
 512:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
  92              		.loc 1 512 5 view .LVU1
 513:sieve_extend.c ****     // debug { printf("...At start. "); dump_bitarray(bitarray, 4); }
 514:sieve_extend.c **** 
 515:sieve_extend.c ****     const counter_t source_word = wordindex(source_start);
  93              		.loc 1 515 5 view .LVU2
 516:sieve_extend.c ****     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_start)) | (bitarray[sou
  94              		.loc 1 516 5 view .LVU3
  95              	# sieve_extend.c:511: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 511:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
  96              		.loc 1 511 153 is_stmt 0 view .LVU4
  97 0000 55       		push	rbp	#
  98              		.cfi_def_cfa_offset 16
  99              		.cfi_offset 6, -16
 100 0001 4989D1   		mov	r9, rdx	# size, tmp576
 101              	# sieve_extend.c:515:     const counter_t source_word = wordindex(source_start);
 515:sieve_extend.c ****     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_start)) | (bitarray[sou
 102              		.loc 1 515 21 view .LVU5
 103 0004 4889F0   		mov	rax, rsi	# source_word, source_start
 104              	# sieve_extend.c:511: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 511:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 105              		.loc 1 511 153 view .LVU6
 106 0007 4889E5   		mov	rbp, rsp	#,
 107              		.cfi_def_cfa_register 6
 108              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 109              		.loc 1 516 134 view .LVU7
GAS LISTING /tmp/ccNeV1of.s 			page 12


 110 000a 89F2     		mov	edx, esi	# tmp334, source_start
 111              	.LVL1:
 112              	# sieve_extend.c:511: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 511:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 113              		.loc 1 511 153 view .LVU8
 114 000c 4157     		push	r15	#
 115              	# sieve_extend.c:515:     const counter_t source_word = wordindex(source_start);
 515:sieve_extend.c ****     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_start)) | (bitarray[sou
 116              		.loc 1 515 21 view .LVU9
 117 000e 48C1E806 		shr	rax, 6	# source_word,
 118              	.LVL2:
 119              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 120              		.loc 1 516 134 view .LVU10
 121 0012 83E23F   		and	edx, 63	# tmp334,
 122              	# sieve_extend.c:511: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 511:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 123              		.loc 1 511 153 view .LVU11
 124 0015 4156     		push	r14	#
 125              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 126              		.loc 1 516 133 view .LVU12
 127 0017 41B84000 		mov	r8d, 64	# tmp336,
 127      0000
 128              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 129              		.loc 1 516 167 view .LVU13
 130 001d 4589CB   		mov	r11d, r9d	# tmp342, size
 131              	# sieve_extend.c:511: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 511:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 132              		.loc 1 511 153 view .LVU14
 133 0020 4155     		push	r13	#
 134              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 135              		.loc 1 516 133 view .LVU15
 136 0022 4129D0   		sub	r8d, edx	# tmp335, tmp334
 137              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 138              		.loc 1 516 167 view .LVU16
 139 0025 41F7D3   		not	r11d	# tmp342
 140              	# sieve_extend.c:511: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 511:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 141              		.loc 1 511 153 view .LVU17
 142 0028 4154     		push	r12	#
 143              		.cfi_offset 15, -24
 144              		.cfi_offset 14, -32
 145              		.cfi_offset 13, -40
 146              		.cfi_offset 12, -48
 147              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 148              		.loc 1 516 167 view .LVU18
 149 002a 49C7C4FF 		mov	r12, -1	# tmp345,
 149      FFFFFF
 150 0031 C442A3F7 		shrx	r13, r12, r11	# tmp344, tmp345, tmp342
 150      EC
 151              	# sieve_extend.c:511: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 511:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 152              		.loc 1 511 153 view .LVU19
 153 0036 53       		push	rbx	#
 154              		.cfi_offset 3, -56
 155 0037 4889CB   		mov	rbx, rcx	# destination_stop, tmp577
 156              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 157              		.loc 1 516 58 view .LVU20
GAS LISTING /tmp/ccNeV1of.s 			page 13


 158 003a 488B0CC7 		mov	rcx, QWORD PTR [rdi+rax*8]	# *_5, *_5
 159              	.LVL3:
 160              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 161              		.loc 1 516 112 view .LVU21
 162 003e C462B9F7 		shlx	r8, QWORD PTR 8[rdi+rax*8], r8	# tmp337, *_11, tmp335
 162      44C708
 163              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 164              		.loc 1 516 58 view .LVU22
 165 0045 C462CBF7 		shrx	r10, rcx, rsi	# tmp339, *_5, source_start
 165      D1
 166              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 167              		.loc 1 516 85 view .LVU23
 168 004a 4D09D0   		or	r8, r10	# tmp341, tmp339
 169              	# sieve_extend.c:511: static void extendSieve_smallSize(bitword_t* __restrict bitarray, const count
 511:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using smallsize (%ju copies)\
 170              		.loc 1 511 153 view .LVU24
 171 004d 4883E4E0 		and	rsp, -32	#,
 172              	# sieve_extend.c:516:     register bitword_t pattern = ((bitarray[source_word] >> bitindex(source_s
 173              		.loc 1 516 24 view .LVU25
 174 0051 4D21E8   		and	r8, r13	# pattern, tmp344
 175              	.LVL4:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 176              		.loc 1 517 5 is_stmt 1 view .LVU26
 177              	.LBB326:
 178              		.loc 1 517 10 view .LVU27
 179              		.loc 1 517 54 view .LVU28
 180              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 181              		.loc 1 517 5 is_stmt 0 view .LVU29
 182 0054 4983F940 		cmp	r9, 64	# size,
 183 0058 0F87C200 		ja	.L2	#,
 183      0000
 184 005e 4D89CE   		mov	r14, r9	# pattern_size, size
 185              	.LVL5:
 186              	.L3:
 518:sieve_extend.c ****         pattern |= (pattern << pattern_size);
 187              		.loc 1 518 9 is_stmt 1 discriminator 3 view .LVU30
 188              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 189              		.loc 1 517 103 is_stmt 0 discriminator 3 view .LVU31
 190 0061 4B8D0436 		lea	rax, [r14+r14]	# pattern_size,
 191              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 192              		.loc 1 518 29 discriminator 3 view .LVU32
 193 0065 C44289F7 		shlx	r15, r8, r14	# _23, pattern, pattern_size
 193      F8
 194              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 195              		.loc 1 518 17 discriminator 3 view .LVU33
 196 006a 4D09F8   		or	r8, r15	# pattern, _23
 197              	.LVL6:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 198              		.loc 1 517 90 is_stmt 1 discriminator 3 view .LVU34
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 199              		.loc 1 517 54 discriminator 3 view .LVU35
 200              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 201              		.loc 1 517 5 is_stmt 0 discriminator 3 view .LVU36
 202 006d 4883F840 		cmp	rax, 64	# pattern_size,
 203 0071 0F87A900 		ja	.L2	#,
GAS LISTING /tmp/ccNeV1of.s 			page 14


 203      0000
 204              		.loc 1 518 9 is_stmt 1 view .LVU37
 205              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 206              		.loc 1 517 103 is_stmt 0 view .LVU38
 207 0077 4A8D0CB5 		lea	rcx, 0[0+r14*4]	# pattern_size,
 207      00000000 
 208              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 209              		.loc 1 518 29 view .LVU39
 210 007f C4C2F9F7 		shlx	rdx, r8, rax	# _23, pattern, pattern_size
 210      D0
 211              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 212              		.loc 1 518 17 view .LVU40
 213 0084 4909D0   		or	r8, rdx	# pattern, _23
 214              	.LVL7:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 215              		.loc 1 517 90 is_stmt 1 view .LVU41
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 216              		.loc 1 517 54 view .LVU42
 217              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 218              		.loc 1 517 5 is_stmt 0 view .LVU43
 219 0087 4883F940 		cmp	rcx, 64	# pattern_size,
 220 008b 0F878F00 		ja	.L2	#,
 220      0000
 221              		.loc 1 518 9 is_stmt 1 view .LVU44
 222              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 223              		.loc 1 517 103 is_stmt 0 view .LVU45
 224 0091 4E8D1CF5 		lea	r11, 0[0+r14*8]	# pattern_size,
 224      00000000 
 225              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 226              		.loc 1 518 29 view .LVU46
 227 0099 C442F1F7 		shlx	r10, r8, rcx	# _23, pattern, pattern_size
 227      D0
 228              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 229              		.loc 1 518 17 view .LVU47
 230 009e 4D09D0   		or	r8, r10	# pattern, _23
 231              	.LVL8:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 232              		.loc 1 517 90 is_stmt 1 view .LVU48
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 233              		.loc 1 517 54 view .LVU49
 234              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 235              		.loc 1 517 5 is_stmt 0 view .LVU50
 236 00a1 4983FB40 		cmp	r11, 64	# pattern_size,
 237 00a5 7779     		ja	.L2	#,
 238              		.loc 1 518 9 is_stmt 1 view .LVU51
 239              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 240              		.loc 1 517 103 is_stmt 0 view .LVU52
 241 00a7 4D89F5   		mov	r13, r14	# pattern_size, pattern_size
 242              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 243              		.loc 1 518 29 view .LVU53
 244 00aa C442A1F7 		shlx	r12, r8, r11	# _23, pattern, pattern_size
 244      E0
GAS LISTING /tmp/ccNeV1of.s 			page 15


 245              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 246              		.loc 1 517 103 view .LVU54
 247 00af 49C1E504 		sal	r13, 4	# pattern_size,
 248              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 249              		.loc 1 518 17 view .LVU55
 250 00b3 4D09E0   		or	r8, r12	# pattern, _23
 251              	.LVL9:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 252              		.loc 1 517 90 is_stmt 1 view .LVU56
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 253              		.loc 1 517 54 view .LVU57
 254              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 255              		.loc 1 517 5 is_stmt 0 view .LVU58
 256 00b6 4983FD40 		cmp	r13, 64	# pattern_size,
 257 00ba 7764     		ja	.L2	#,
 258              		.loc 1 518 9 is_stmt 1 view .LVU59
 259              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 260              		.loc 1 517 103 is_stmt 0 view .LVU60
 261 00bc 4C89F0   		mov	rax, r14	# pattern_size, pattern_size
 262              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 263              		.loc 1 518 29 view .LVU61
 264 00bf C44291F7 		shlx	r15, r8, r13	# _23, pattern, pattern_size
 264      F8
 265              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 266              		.loc 1 517 103 view .LVU62
 267 00c4 48C1E005 		sal	rax, 5	# pattern_size,
 268              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 269              		.loc 1 518 17 view .LVU63
 270 00c8 4D09F8   		or	r8, r15	# pattern, _23
 271              	.LVL10:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 272              		.loc 1 517 90 is_stmt 1 view .LVU64
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 273              		.loc 1 517 54 view .LVU65
 274              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 275              		.loc 1 517 5 is_stmt 0 view .LVU66
 276 00cb 4883F840 		cmp	rax, 64	# pattern_size,
 277 00cf 774F     		ja	.L2	#,
 278              		.loc 1 518 9 is_stmt 1 view .LVU67
 279              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 280              		.loc 1 517 103 is_stmt 0 view .LVU68
 281 00d1 4C89F1   		mov	rcx, r14	# pattern_size, pattern_size
 282              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 283              		.loc 1 518 29 view .LVU69
 284 00d4 C4C2F9F7 		shlx	rdx, r8, rax	# _23, pattern, pattern_size
 284      D0
 285              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 286              		.loc 1 517 103 view .LVU70
 287 00d9 48C1E106 		sal	rcx, 6	# pattern_size,
 288              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
GAS LISTING /tmp/ccNeV1of.s 			page 16


 289              		.loc 1 518 17 view .LVU71
 290 00dd 4909D0   		or	r8, rdx	# pattern, _23
 291              	.LVL11:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 292              		.loc 1 517 90 is_stmt 1 view .LVU72
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 293              		.loc 1 517 54 view .LVU73
 294              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 295              		.loc 1 517 5 is_stmt 0 view .LVU74
 296 00e0 4883F940 		cmp	rcx, 64	# pattern_size,
 297 00e4 773A     		ja	.L2	#,
 298              		.loc 1 518 9 is_stmt 1 view .LVU75
 299              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 300              		.loc 1 517 103 is_stmt 0 view .LVU76
 301 00e6 4D89F3   		mov	r11, r14	# pattern_size, pattern_size
 302              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 303              		.loc 1 518 29 view .LVU77
 304 00e9 C442F1F7 		shlx	r10, r8, rcx	# _23, pattern, pattern_size
 304      D0
 305              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 306              		.loc 1 517 103 view .LVU78
 307 00ee 49C1E307 		sal	r11, 7	# pattern_size,
 308              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 309              		.loc 1 518 17 view .LVU79
 310 00f2 4D09D0   		or	r8, r10	# pattern, _23
 311              	.LVL12:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 312              		.loc 1 517 90 is_stmt 1 view .LVU80
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 313              		.loc 1 517 54 view .LVU81
 314              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 315              		.loc 1 517 5 is_stmt 0 view .LVU82
 316 00f5 4983FB40 		cmp	r11, 64	# pattern_size,
 317 00f9 7725     		ja	.L2	#,
 318              		.loc 1 518 9 is_stmt 1 view .LVU83
 319              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 320              		.loc 1 517 103 is_stmt 0 view .LVU84
 321 00fb 49C1E608 		sal	r14, 8	# pattern_size,
 322              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 323              		.loc 1 518 29 view .LVU85
 324 00ff C442A1F7 		shlx	r12, r8, r11	# _23, pattern, pattern_size
 324      E0
 325              	# sieve_extend.c:518:         pattern |= (pattern << pattern_size);
 326              		.loc 1 518 17 view .LVU86
 327 0104 4D09E0   		or	r8, r12	# pattern, _23
 328              	.LVL13:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 329              		.loc 1 517 90 is_stmt 1 view .LVU87
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 330              		.loc 1 517 54 view .LVU88
 331              	# sieve_extend.c:517:     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZ
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
GAS LISTING /tmp/ccNeV1of.s 			page 17


 332              		.loc 1 517 5 is_stmt 0 view .LVU89
 333 0107 4983FE40 		cmp	r14, 64	# pattern_size,
 334 010b 0F8650FF 		jbe	.L3	#,
 334      FFFF
 335              	.LVL14:
 336 0111 66662E0F 		.p2align 4
 336      1F840000 
 336      0000000F 
 336      1F4000
 337              		.p2align 3
 338              	.L2:
 517:sieve_extend.c ****     for (bitshift_t pattern_size = (bitshift_t)size; pattern_size <= WORD_SIZE_bitshift; pattern_si
 339              		.loc 1 517 5 view .LVU90
 340              	.LBE326:
 519:sieve_extend.c **** 
 520:sieve_extend.c ****     const counter_t destination_start = source_start + size;
 341              		.loc 1 520 5 is_stmt 1 view .LVU91
 342              	# sieve_extend.c:520:     const counter_t destination_start = source_start + size;
 343              		.loc 1 520 21 is_stmt 0 view .LVU92
 344 0120 4A8D0C0E 		lea	rcx, [rsi+r9]	# destination_start,
 345              	.LVL15:
 521:sieve_extend.c ****     counter_t destination_start_word = wordindex(destination_start);
 346              		.loc 1 521 5 is_stmt 1 view .LVU93
 347              	# sieve_extend.c:522:     counter_t destination_stop_word = wordindex(destination_stop);
 522:sieve_extend.c ****     counter_t destination_stop_word = wordindex(destination_stop);
 348              		.loc 1 522 15 is_stmt 0 view .LVU94
 349 0124 4989DC   		mov	r12, rbx	# destination_stop_word, destination_stop
 350              	# sieve_extend.c:521:     counter_t destination_start_word = wordindex(destination_start);
 521:sieve_extend.c ****     counter_t destination_start_word = wordindex(destination_start);
 351              		.loc 1 521 15 view .LVU95
 352 0127 4989CB   		mov	r11, rcx	# destination_start_word, destination_start
 353 012a F7D3     		not	ebx	# tmp348
 354              	.LVL16:
 521:sieve_extend.c ****     counter_t destination_start_word = wordindex(destination_start);
 355              		.loc 1 521 15 view .LVU96
 356 012c 49C1EB06 		shr	r11, 6	# destination_start_word,
 357              	.LVL17:
 358              		.loc 1 522 5 is_stmt 1 view .LVU97
 359 0130 49C7C5FF 		mov	r13, -1	# tmp350,
 359      FFFFFF
 360              	# sieve_extend.c:522:     counter_t destination_stop_word = wordindex(destination_stop);
 361              		.loc 1 522 15 is_stmt 0 view .LVU98
 362 0137 49C1EC06 		shr	r12, 6	# destination_stop_word,
 363              	.LVL18:
 523:sieve_extend.c ****     if (destination_start_word >= destination_stop_word) {
 364              		.loc 1 523 5 is_stmt 1 view .LVU99
 365 013b 4A8D34DD 		lea	rsi, 0[0+r11*8]	# _116,
 365      00000000 
 366              	.LVL19:
 367              		.loc 1 523 5 is_stmt 0 view .LVU100
 368 0143 4C8D3437 		lea	r14, [rdi+rsi]	# _117,
 369              	# sieve_extend.c:523:     if (destination_start_word >= destination_stop_word) {
 370              		.loc 1 523 8 view .LVU101
 371 0147 4D39E3   		cmp	r11, r12	# destination_start_word, destination_stop_word
 372 014a C4C2F1F7 		shlx	rax, r8, rcx	# _120, pattern, destination_start
 372      C0
 373 014f 4D8B3E   		mov	r15, QWORD PTR [r14]	# pretmp_118, *_117
GAS LISTING /tmp/ccNeV1of.s 			page 18


 374 0152 C4C2E3F7 		shrx	rbx, r13, rbx	# _124, tmp350, tmp348
 374      DD
 375 0157 0F833305 		jnb	.L49	#,
 375      0000
 524:sieve_extend.c ****         bitarray[destination_start_word] |= (pattern << bitindex(destination_start)) & chopmask(des
 525:sieve_extend.c ****         return;
 526:sieve_extend.c ****     }
 527:sieve_extend.c **** 
 528:sieve_extend.c ****     bitarray[destination_start_word] |= (pattern << bitindex(destination_start));
 376              		.loc 1 528 5 is_stmt 1 view .LVU102
 377              	# sieve_extend.c:528:     bitarray[destination_start_word] |= (pattern << bitindex(destination_star
 378              		.loc 1 528 38 is_stmt 0 view .LVU103
 379 015d 4C09F8   		or	rax, r15	# tmp353, pretmp_118
 380              	# sieve_extend.c:531:     register const bitshift_t pattern_shift = WORD_SIZE_counter % size;
 529:sieve_extend.c **** 
 530:sieve_extend.c ****     // TODO: refactor according to smallstep
 531:sieve_extend.c ****     register const bitshift_t pattern_shift = WORD_SIZE_counter % size;
 381              		.loc 1 531 31 view .LVU104
 382 0160 31D2     		xor	edx, edx	# tmp355
 383              	# sieve_extend.c:528:     bitarray[destination_start_word] |= (pattern << bitindex(destination_star
 528:sieve_extend.c **** 
 384              		.loc 1 528 38 view .LVU105
 385 0162 498906   		mov	QWORD PTR [r14], rax	# *_117, tmp353
 386              		.loc 1 531 5 is_stmt 1 view .LVU106
 387              	# sieve_extend.c:531:     register const bitshift_t pattern_shift = WORD_SIZE_counter % size;
 388              		.loc 1 531 31 is_stmt 0 view .LVU107
 389 0165 41BE4000 		mov	r14d, 64	# tmp354,
 389      0000
 390 016b 4C89F0   		mov	rax, r14	# tmp356, tmp354
 391 016e 488D7437 		lea	rsi, 8[rdi+rsi]	# vectp.146,
 391      08
 392 0173 49F7F1   		div	r9	# size
 393              	.LVL20:
 532:sieve_extend.c ****     register const bitshift_t pattern_size = WORD_SIZE_bitshift - pattern_shift;
 394              		.loc 1 532 5 is_stmt 1 view .LVU108
 533:sieve_extend.c ****     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destination_start)) & WORDMASK;
 395              		.loc 1 533 5 view .LVU109
 534:sieve_extend.c ****     register counter_t loop_range = destination_stop_word - destination_start_word;
 396              		.loc 1 534 5 view .LVU110
 397 0176 48C1EE03 		shr	rsi, 3	# tmp363,
 398              	# sieve_extend.c:534:     register counter_t loop_range = destination_stop_word - destination_start
 399              		.loc 1 534 24 is_stmt 0 view .LVU111
 400 017a 4D89E1   		mov	r9, r12	# loop_range, destination_stop_word
 401              	.LVL21:
 402              	# sieve_extend.c:533:     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destinati
 533:sieve_extend.c ****     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destination_start)) & WORDMASK;
 403              		.loc 1 533 89 view .LVU112
 404 017d 48F7D9   		neg	rcx	# tmp359
 405              	.LVL22:
 406              	# sieve_extend.c:534:     register counter_t loop_range = destination_stop_word - destination_start
 407              		.loc 1 534 24 view .LVU113
 408 0180 4D29D9   		sub	r9, r11	# loop_range, destination_start_word
 409              	.LVL23:
 535:sieve_extend.c ****     destination_start_word++;
 410              		.loc 1 535 5 is_stmt 1 view .LVU114
 411              	# sieve_extend.c:532:     register const bitshift_t pattern_size = WORD_SIZE_bitshift - pattern_shi
 532:sieve_extend.c ****     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destination_start)) & WORDMASK;
GAS LISTING /tmp/ccNeV1of.s 			page 19


 412              		.loc 1 532 31 is_stmt 0 view .LVU115
 413 0183 4C89F0   		mov	rax, r14	# tmp354, tmp354
 414 0186 48F7DE   		neg	rsi	# tmp364
 415              	# sieve_extend.c:533:     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destinati
 533:sieve_extend.c ****     register counter_t loop_range = destination_stop_word - destination_start_word;
 416              		.loc 1 533 25 view .LVU116
 417 0189 83E13F   		and	ecx, 63	# shift,
 418              	.LVL24:
 533:sieve_extend.c ****     register counter_t loop_range = destination_stop_word - destination_start_word;
 419              		.loc 1 533 25 view .LVU117
 420 018c 83E603   		and	esi, 3	# prolog_loop_niters.147,
 421              	# sieve_extend.c:535:     destination_start_word++;
 422              		.loc 1 535 27 view .LVU118
 423 018f 4D8D5301 		lea	r10, 1[r11]	# destination_start_word,
 424              	.LVL25:
 425              	.LBB327:
 536:sieve_extend.c ****     
 537:sieve_extend.c ****     //#pragma GCC unroll 16
 538:sieve_extend.c ****     #pragma GCC ivdep
 539:sieve_extend.c ****     for (counter_t i=0; i<=loop_range; ++i ) {
 426              		.loc 1 539 10 is_stmt 1 view .LVU119
 427              		.loc 1 539 25 view .LVU120
 428 0193 4D8D6901 		lea	r13, 1[r9]	# niters.145,
 429 0197 894C24F4 		mov	DWORD PTR -12[rsp], ecx	# %sfp, shift
 430 019b 895424F8 		mov	DWORD PTR -8[rsp], edx	# %sfp, tmp355
 431              	.LBE327:
 432              	# sieve_extend.c:532:     register const bitshift_t pattern_size = WORD_SIZE_bitshift - pattern_shi
 532:sieve_extend.c ****     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destination_start)) & WORDMASK;
 433              		.loc 1 532 31 is_stmt 0 view .LVU121
 434 019f 4829D0   		sub	rax, rdx	# tmp354, tmp355
 435              	.LVL26:
 532:sieve_extend.c ****     register bitshift_t shift = (WORD_SIZE_bitshift - bitindex_calc(destination_start)) & WORDMASK;
 436              		.loc 1 532 31 view .LVU122
 437 01a2 894424FC 		mov	DWORD PTR -4[rsp], eax	# %sfp, pattern_size
 438 01a6 4983F90A 		cmp	r9, 10	# loop_range,
 439 01aa 0F860505 		jbe	.L11	#,
 439      0000
 440 01b0 4885F6   		test	rsi, rsi	# prolog_loop_niters.147
 441 01b3 0F84F404 		je	.L12	#,
 441      0000
 442              	.LBB328:
 540:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 443              		.loc 1 540 9 is_stmt 1 view .LVU123
 444              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 445              		.loc 1 540 72 is_stmt 0 view .LVU124
 446 01b9 4189C7   		mov	r15d, eax	# tmp365, pattern_size
 447 01bc 4129CF   		sub	r15d, ecx	# tmp365, shift
 448              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 449              		.loc 1 540 55 view .LVU125
 450 01bf C44281F7 		shlx	r14, r8, r15	# tmp366, pattern, tmp365
 450      F0
 451              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 452              		.loc 1 540 127 view .LVU126
 453 01c4 C442F3F7 		shrx	r15, r8, rcx	# tmp367, pattern, shift
 453      F8
 454              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 455              		.loc 1 540 116 view .LVU127
GAS LISTING /tmp/ccNeV1of.s 			page 20


 456 01c9 4D09FE   		or	r14, r15	# tmp368, tmp367
 457 01cc 4E8934D7 		mov	QWORD PTR [rdi+r10*8], r14	# *_317, tmp368
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 458              		.loc 1 539 40 is_stmt 1 view .LVU128
 459              	.LVL27:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 460              		.loc 1 539 25 view .LVU129
 461 01d0 4883FE01 		cmp	rsi, 1	# prolog_loop_niters.147,
 462              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 463              		.loc 1 539 40 is_stmt 0 view .LVU130
 464 01d4 41BE0100 		mov	r14d, 1	# i,
 464      0000
 465 01da 7452     		je	.L7	#,
 466              		.loc 1 540 9 is_stmt 1 view .LVU131
 467              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 468              		.loc 1 540 81 is_stmt 0 view .LVU132
 469 01dc 448D3411 		lea	r14d, [rcx+rdx]	# tmp369,
 470              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 471              		.loc 1 540 72 view .LVU133
 472 01e0 4189C7   		mov	r15d, eax	# tmp371, pattern_size
 473              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 474              		.loc 1 540 99 view .LVU134
 475 01e3 4183E63F 		and	r14d, 63	# _328,
 476              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 477              		.loc 1 540 72 view .LVU135
 478 01e7 4529F7   		sub	r15d, r14d	# tmp371, _328
 479              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 480              		.loc 1 540 127 view .LVU136
 481 01ea C4428BF7 		shrx	r14, r8, r14	# tmp373, pattern, _328
 481      F0
 482              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 483              		.loc 1 540 55 view .LVU137
 484 01ef C44281F7 		shlx	r15, r8, r15	# tmp372, pattern, tmp371
 484      F8
 485              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 486              		.loc 1 540 116 view .LVU138
 487 01f4 4D09FE   		or	r14, r15	# tmp374, tmp372
 488 01f7 4E8974DF 		mov	QWORD PTR 16[rdi+r11*8], r14	# *_334, tmp374
 488      10
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 489              		.loc 1 539 40 is_stmt 1 view .LVU139
 490              	.LVL28:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 491              		.loc 1 539 25 view .LVU140
 492 01fc 4883FE03 		cmp	rsi, 3	# prolog_loop_niters.147,
 493              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 494              		.loc 1 539 40 is_stmt 0 view .LVU141
 495 0200 41BE0200 		mov	r14d, 2	# i,
 495      0000
 496 0206 7526     		jne	.L7	#,
 497              		.loc 1 540 9 is_stmt 1 view .LVU142
 498              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 499              		.loc 1 540 81 is_stmt 0 view .LVU143
 500 0208 448D3451 		lea	r14d, [rcx+rdx*2]	# tmp376,
 501              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
GAS LISTING /tmp/ccNeV1of.s 			page 21


 502              		.loc 1 540 72 view .LVU144
 503 020c 4189C7   		mov	r15d, eax	# tmp378, pattern_size
 504              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 505              		.loc 1 540 99 view .LVU145
 506 020f 4183E63F 		and	r14d, 63	# _104,
 507              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 508              		.loc 1 540 72 view .LVU146
 509 0213 4529F7   		sub	r15d, r14d	# tmp378, _104
 510              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 511              		.loc 1 540 127 view .LVU147
 512 0216 C4428BF7 		shrx	r14, r8, r14	# tmp380, pattern, _104
 512      F0
 513              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 514              		.loc 1 540 55 view .LVU148
 515 021b C44281F7 		shlx	r15, r8, r15	# tmp379, pattern, tmp378
 515      F8
 516              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 517              		.loc 1 540 116 view .LVU149
 518 0220 4D09FE   		or	r14, r15	# tmp381, tmp379
 519 0223 4E8974DF 		mov	QWORD PTR 24[rdi+r11*8], r14	# *_94, tmp381
 519      18
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 520              		.loc 1 539 40 is_stmt 1 view .LVU150
 521              	.LVL29:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 522              		.loc 1 539 25 view .LVU151
 523              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 524              		.loc 1 539 40 is_stmt 0 view .LVU152
 525 0228 41BE0300 		mov	r14d, 3	# i,
 525      0000
 526              	.LVL30:
 527              	.L7:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 528              		.loc 1 539 40 view .LVU153
 529 022e 4929F5   		sub	r13, rsi	# niters.148, prolog_loop_niters.147
 530 0231 4C01D6   		add	rsi, r10	# tmp388, destination_start_word
 531 0234 4D89EB   		mov	r11, r13	# bnd.149, niters.148
 532 0237 C4C1F96E 		vmovq	xmm3, r14	# i, i
 532      DE
 533 023c 49C1EB03 		shr	r11, 3	# bnd.149,
 534 0240 488D34F7 		lea	rsi, [rdi+rsi*8]	# ivtmp.167,
 535 0244 49C1E306 		sal	r11, 6	# tmp391,
 536 0248 C4627D59 		vpbroadcastq	ymm9, xmm3	# tmp382, i
 536      CB
 537 024d C4C1F96E 		vmovq	xmm4, r8	# pattern, pattern
 537      E0
 538 0252 4D8D3C33 		lea	r15, [r11+rsi]	# _344,
 539 0256 4183E340 		and	r11d, 64	# tmp391,
 540 025a C535D435 		vpaddq	ymm14, ymm9, YMMWORD PTR .LC0[rip]	# vect_vec_iv_.152, tmp382,
 540      00000000 
 541 0262 C4E27D58 		vpbroadcastd	ymm6, DWORD PTR -8[rsp]	# vect_cst__146, %sfp
 541      7424F8
 542 0269 C4E27D59 		vpbroadcastq	ymm2, xmm4	# vect_cst__156, pattern
 542      D4
 543 026e C4E27D58 		vpbroadcastd	ymm5, DWORD PTR -12[rsp]	# vect_cst__148, %sfp
 543      6C24F4
GAS LISTING /tmp/ccNeV1of.s 			page 22


 544 0275 C4627D58 		vpbroadcastd	ymm12, DWORD PTR -4[rsp]	# vect_cst__152, %sfp
 544      6424FC
 545 027c C57D6F05 		vmovdqa	ymm8, YMMWORD PTR .LC1[rip]	# tmp496,
 545      00000000 
 546 0284 C5FD6F3D 		vmovdqa	ymm7, YMMWORD PTR .LC2[rip]	# tmp497,
 546      00000000 
 547 028c C57D6F2D 		vmovdqa	ymm13, YMMWORD PTR .LC3[rip]	# tmp498,
 547      00000000 
 548 0294 0F849600 		je	.L9	#,
 548      0000
 549              	.LVL31:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 550              		.loc 1 539 40 view .LVU154
 551 029a C57D7FF1 		vmovdqa	ymm1, ymm14	# vect_vec_iv_.152, vect_vec_iv_.152
 552 029e 4883C640 		add	rsi, 64	# ivtmp.167,
 553              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 554              		.loc 1 540 81 view .LVU155
 555 02a2 C575D4D7 		vpaddq	ymm10, ymm1, ymm7	# vect_vec_iv_.152, vect_vec_iv_.152, tmp497
 556 02a6 C4410DD4 		vpaddq	ymm14, ymm14, ymm8	# vect_vec_iv_.152, vect_vec_iv_.152, tmp496
 556      F0
 557              		.loc 1 540 9 is_stmt 1 view .LVU156
 558              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 559              		.loc 1 540 81 is_stmt 0 view .LVU157
 560 02ab C4C37546 		vperm2i128	ymm0, ymm1, ymm10, 32	# tmp538, vect_vec_iv_.152, vect_vec_iv_.152,
 560      C220
 561 02b1 C4437546 		vperm2i128	ymm11, ymm1, ymm10, 49	# tmp539, vect_vec_iv_.152, vect_vec_iv_.152,
 561      DA31
 562 02b7 C57D70F8 		vpshufd	ymm15, ymm0, 216	# tmp540, tmp538,
 562      D8
 563 02bc C4C17D70 		vpshufd	ymm3, ymm11, 216	# tmp541, tmp539,
 563      DBD8
 564 02c2 C5056CCB 		vpunpcklqdq	ymm9, ymm15, ymm3	# tmp542, tmp540, tmp541
 565 02c6 C4C24D40 		vpmulld	ymm4, ymm6, ymm9	# vect__45.154, vect_cst__146, tmp542
 565      E1
 566              	.LVL32:
 567              		.loc 1 540 81 view .LVU158
 568 02cb C5DDFECD 		vpaddd	ymm1, ymm4, ymm5	# vect__47.155, vect__45.154, vect_cst__148
 569              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 570              		.loc 1 540 99 view .LVU159
 571 02cf C4C175DB 		vpand	ymm0, ymm1, ymm13	# vect__48.156, vect__47.155, tmp498
 571      C5
 572              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 573              		.loc 1 540 72 view .LVU160
 574 02d4 C51DFAF8 		vpsubd	ymm15, ymm12, ymm0	# vect__49.157, vect_cst__152, vect__48.156
 575              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 576              		.loc 1 540 116 view .LVU161
 577 02d8 C4627D35 		vpmovzxdq	ymm11, xmm0	#, vect__48.156
 577      D8
 578 02dd C4427D35 		vpmovzxdq	ymm10, xmm15	#, vect__49.157
 578      D7
 579 02e2 C442ED45 		vpsrlvq	ymm9, ymm2, ymm11	# vect_patt_136.161, vect_cst__156, vect_patt_137.160
 579      CB
 580 02e7 C4C2ED47 		vpsllvq	ymm3, ymm2, ymm10	# vect_patt_138.159, vect_cst__156, vect_patt_139.158
 580      DA
 581 02ec C4637D39 		vextracti128	xmm1, ymm15, 0x1	# tmp554, vect__49.157
 581      F901
 582 02f2 C4C165EB 		vpor	ymm4, ymm3, ymm9	# vect__55.162, vect_patt_138.159, vect_patt_136.161
GAS LISTING /tmp/ccNeV1of.s 			page 23


 582      E1
 583 02f7 C4E37D39 		vextracti128	xmm0, ymm0, 0x1	# tmp557, vect__48.156
 583      C001
 584 02fd C4627D35 		vpmovzxdq	ymm15, xmm1	# vect_patt_139.158, tmp554
 584      F9
 585 0302 C4E27D35 		vpmovzxdq	ymm3, xmm0	# vect_patt_137.160, tmp557
 585      D8
 586 0307 C442ED47 		vpsllvq	ymm10, ymm2, ymm15	# vect_patt_138.159, vect_cst__156, vect_patt_139.158
 586      D7
 587 030c C462ED45 		vpsrlvq	ymm11, ymm2, ymm3	# vect_patt_136.161, vect_cst__156, vect_patt_137.160
 587      DB
 588              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 589              		.loc 1 540 44 view .LVU162
 590 0311 C5FD7F66 		vmovdqa	YMMWORD PTR -64[rsi], ymm4	# MEM[base: _341, offset: 0B], vect__55.162
 590      C0
 591              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 592              		.loc 1 540 116 view .LVU163
 593 0316 C4412DEB 		vpor	ymm9, ymm10, ymm11	# vect__55.162, vect_patt_138.159, vect_patt_136.161
 593      CB
 594              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 595              		.loc 1 540 44 view .LVU164
 596 031b C57D7F4E 		vmovdqa	YMMWORD PTR -32[rsi], ymm9	# MEM[base: _341, offset: 32B], vect__55.162
 596      E0
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 597              		.loc 1 539 40 is_stmt 1 view .LVU165
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 598              		.loc 1 539 25 view .LVU166
 599 0320 4C39FE   		cmp	rsi, r15	# ivtmp.167, _344
 600 0323 0F841201 		je	.L37	#,
 600      0000
 601 0329 0F1F8000 		.p2align 4
 601      000000
 602              		.p2align 3
 603              	.L9:
 604              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 605              		.loc 1 540 81 is_stmt 0 discriminator 3 view .LVU167
 606 0330 C58DD4CF 		vpaddq	ymm1, ymm14, ymm7	# vect_vec_iv_.152, vect_vec_iv_.152, tmp497
 607 0334 C4C10DD4 		vpaddq	ymm4, ymm14, ymm8	# vect_vec_iv_.152, vect_vec_iv_.152, tmp496
 607      E0
 608              		.loc 1 540 9 is_stmt 1 discriminator 3 view .LVU168
 609              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 610              		.loc 1 540 81 is_stmt 0 discriminator 3 view .LVU169
 611 0339 C4630D46 		vperm2i128	ymm15, ymm14, ymm1, 32	# tmp398, vect_vec_iv_.152, vect_vec_iv_.152,
 611      F920
 612 033f C4630D46 		vperm2i128	ymm14, ymm14, ymm1, 49	# tmp399, vect_vec_iv_.152, vect_vec_iv_.152,
 612      F131
 613 0345 C4417D70 		vpshufd	ymm10, ymm15, 216	# tmp396, tmp398,
 613      D7D8
 614 034b 4883EE80 		sub	rsi, -128	# ivtmp.167,
 615 034f C4C17D70 		vpshufd	ymm0, ymm14, 216	# tmp397, tmp399,
 615      C6D8
 616 0355 C5AD6CD8 		vpunpcklqdq	ymm3, ymm10, ymm0	# tmp400, tmp396, tmp397
 617 0359 C4624D40 		vpmulld	ymm11, ymm6, ymm3	# vect__45.154, vect_cst__146, tmp400
 617      DB
 618 035e C525FECD 		vpaddd	ymm9, ymm11, ymm5	# vect__47.155, vect__45.154, vect_cst__148
 619              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 620              		.loc 1 540 99 discriminator 3 view .LVU170
GAS LISTING /tmp/ccNeV1of.s 			page 24


 621 0362 C44135DB 		vpand	ymm15, ymm9, ymm13	# vect__48.156, vect__47.155, tmp498
 621      FD
 622              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 623              		.loc 1 540 72 discriminator 3 view .LVU171
 624 0367 C4C11DFA 		vpsubd	ymm1, ymm12, ymm15	# vect__49.157, vect_cst__152, vect__48.156
 624      CF
 625              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 626              		.loc 1 540 116 discriminator 3 view .LVU172
 627 036c C4C27D35 		vpmovzxdq	ymm0, xmm15	#, vect__48.156
 627      C7
 628 0371 C4627D35 		vpmovzxdq	ymm14, xmm1	#, vect__49.157
 628      F1
 629 0376 C4E2ED45 		vpsrlvq	ymm3, ymm2, ymm0	# vect_patt_136.161, vect_cst__156, vect_patt_137.160
 629      D8
 630 037b C442ED47 		vpsllvq	ymm10, ymm2, ymm14	# vect_patt_138.159, vect_cst__156, vect_patt_139.158
 630      D6
 631 0380 C4C37D39 		vextracti128	xmm9, ymm1, 0x1	# tmp412, vect__49.157
 631      C901
 632 0386 C52DEBDB 		vpor	ymm11, ymm10, ymm3	# vect__55.162, vect_patt_138.159, vect_patt_136.161
 633 038a C4437D39 		vextracti128	xmm15, ymm15, 0x1	# tmp415, vect__48.156
 633      FF01
 634 0390 C4C27D35 		vpmovzxdq	ymm1, xmm9	# vect_patt_139.158, tmp412
 634      C9
 635 0395 C4427D35 		vpmovzxdq	ymm10, xmm15	# vect_patt_137.160, tmp415
 635      D7
 636 039a C462ED47 		vpsllvq	ymm14, ymm2, ymm1	# vect_patt_138.159, vect_cst__156, vect_patt_139.158
 636      F1
 637 039f C4C2ED45 		vpsrlvq	ymm0, ymm2, ymm10	# vect_patt_136.161, vect_cst__156, vect_patt_137.160
 637      C2
 638              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 639              		.loc 1 540 44 discriminator 3 view .LVU173
 640 03a4 C57D7F5E 		vmovdqa	YMMWORD PTR -128[rsi], ymm11	# MEM[base: _341, offset: 0B], vect__55.162
 640      80
 641              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 642              		.loc 1 540 81 discriminator 3 view .LVU174
 643 03a9 C55DD4DF 		vpaddq	ymm11, ymm4, ymm7	# vect_vec_iv_.152, vect_vec_iv_.152, tmp497
 644              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 645              		.loc 1 540 116 discriminator 3 view .LVU175
 646 03ad C58DEBD8 		vpor	ymm3, ymm14, ymm0	# vect__55.162, vect_patt_138.159, vect_patt_136.161
 647              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 648              		.loc 1 540 81 discriminator 3 view .LVU176
 649 03b1 C4435D46 		vperm2i128	ymm9, ymm4, ymm11, 32	# tmp513, vect_vec_iv_.152, vect_vec_iv_.152,
 649      CB20
 650 03b7 C4C17D70 		vpshufd	ymm1, ymm9, 216	# tmp515, tmp513,
 650      C9D8
 651 03bd C4415DD4 		vpaddq	ymm14, ymm4, ymm8	# vect_vec_iv_.152, vect_vec_iv_.152, tmp496
 651      F0
 652              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 653              		.loc 1 540 44 discriminator 3 view .LVU177
 654 03c2 C5FD7F5E 		vmovdqa	YMMWORD PTR -96[rsi], ymm3	# MEM[base: _341, offset: 32B], vect__55.162
 654      A0
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 655              		.loc 1 539 40 is_stmt 1 discriminator 3 view .LVU178
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 656              		.loc 1 539 25 discriminator 3 view .LVU179
 657              		.loc 1 540 9 discriminator 3 view .LVU180
 658              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
GAS LISTING /tmp/ccNeV1of.s 			page 25


 659              		.loc 1 540 81 is_stmt 0 discriminator 3 view .LVU181
 660 03c7 C4C35D46 		vperm2i128	ymm4, ymm4, ymm11, 49	# tmp514, vect_vec_iv_.152, vect_vec_iv_.152,
 660      E331
 661 03cd C57D70FC 		vpshufd	ymm15, ymm4, 216	# tmp516, tmp514,
 661      D8
 662 03d2 C441756C 		vpunpcklqdq	ymm10, ymm1, ymm15	# tmp517, tmp515, tmp516
 662      D7
 663 03d7 C4C24D40 		vpmulld	ymm0, ymm6, ymm10	# vect__45.154, vect_cst__146, tmp517
 663      C2
 664 03dc C5FDFEDD 		vpaddd	ymm3, ymm0, ymm5	# vect__47.155, vect__45.154, vect_cst__148
 665              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 666              		.loc 1 540 99 discriminator 3 view .LVU182
 667 03e0 C44165DB 		vpand	ymm9, ymm3, ymm13	# vect__48.156, vect__47.155, tmp498
 667      CD
 668              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 669              		.loc 1 540 72 discriminator 3 view .LVU183
 670 03e5 C4C11DFA 		vpsubd	ymm4, ymm12, ymm9	# vect__49.157, vect_cst__152, vect__48.156
 670      E1
 671              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 672              		.loc 1 540 116 discriminator 3 view .LVU184
 673 03ea C4427D35 		vpmovzxdq	ymm15, xmm9	#, vect__48.156
 673      F9
 674 03ef C4627D35 		vpmovzxdq	ymm11, xmm4	#, vect__49.157
 674      DC
 675 03f4 C442ED45 		vpsrlvq	ymm10, ymm2, ymm15	# vect_patt_136.161, vect_cst__156, vect_patt_137.160
 675      D7
 676 03f9 C4C2ED47 		vpsllvq	ymm1, ymm2, ymm11	# vect_patt_138.159, vect_cst__156, vect_patt_139.158
 676      CB
 677 03fe C4E37D39 		vextracti128	xmm3, ymm4, 0x1	# tmp529, vect__49.157
 677      E301
 678 0404 C4C175EB 		vpor	ymm0, ymm1, ymm10	# vect__55.162, vect_patt_138.159, vect_patt_136.161
 678      C2
 679 0409 C4437D39 		vextracti128	xmm9, ymm9, 0x1	# tmp532, vect__48.156
 679      C901
 680 040f C4E27D35 		vpmovzxdq	ymm4, xmm3	# vect_patt_139.158, tmp529
 680      E3
 681 0414 C4C27D35 		vpmovzxdq	ymm1, xmm9	# vect_patt_137.160, tmp532
 681      C9
 682 0419 C462ED47 		vpsllvq	ymm11, ymm2, ymm4	# vect_patt_138.159, vect_cst__156, vect_patt_139.158
 682      DC
 683 041e C462ED45 		vpsrlvq	ymm15, ymm2, ymm1	# vect_patt_136.161, vect_cst__156, vect_patt_137.160
 683      F9
 684              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 685              		.loc 1 540 44 discriminator 3 view .LVU185
 686 0423 C5FD7F46 		vmovdqa	YMMWORD PTR -64[rsi], ymm0	# MEM[base: _341, offset: 0B], vect__55.162
 686      C0
 687              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 688              		.loc 1 540 116 discriminator 3 view .LVU186
 689 0428 C44125EB 		vpor	ymm10, ymm11, ymm15	# vect__55.162, vect_patt_138.159, vect_patt_136.161
 689      D7
 690              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 691              		.loc 1 540 44 discriminator 3 view .LVU187
 692 042d C57D7F56 		vmovdqa	YMMWORD PTR -32[rsi], ymm10	# MEM[base: _341, offset: 32B], vect__55.162
 692      E0
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 693              		.loc 1 539 40 is_stmt 1 discriminator 3 view .LVU188
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
GAS LISTING /tmp/ccNeV1of.s 			page 26


 694              		.loc 1 539 25 discriminator 3 view .LVU189
 695 0432 4C39FE   		cmp	rsi, r15	# ivtmp.167, _344
 696 0435 0F85F5FE 		jne	.L9	#,
 696      FFFF
 697              	.L37:
 698 043b 4C89EE   		mov	rsi, r13	# niters_vector_mult_vf.150, niters.148
 699 043e 4883E6F8 		and	rsi, -8	# niters_vector_mult_vf.150,
 700 0442 4901F6   		add	r14, rsi	# tmp.151, niters_vector_mult_vf.150
 701 0445 4939F5   		cmp	r13, rsi	# niters.148, niters_vector_mult_vf.150
 702 0448 0F845A02 		je	.L50	#,
 702      0000
 703 044e C5F877   		vzeroupper
 704              	.L6:
 705              	.LVL33:
 706              		.loc 1 540 9 view .LVU190
 707              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 708              		.loc 1 540 81 is_stmt 0 view .LVU191
 709 0451 4189D7   		mov	r15d, edx	# tmp418, tmp355
 710              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 711              		.loc 1 540 72 view .LVU192
 712 0454 4189C5   		mov	r13d, eax	# tmp421, pattern_size
 713              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 714              		.loc 1 540 81 view .LVU193
 715 0457 450FAFFE 		imul	r15d, r14d	# tmp418, tmp.151
 716              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 717              		.loc 1 540 17 view .LVU194
 718 045b 4F8D1C16 		lea	r11, [r14+r10]	# tmp420,
 719              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 720              		.loc 1 540 81 view .LVU195
 721 045f 4101CF   		add	r15d, ecx	# tmp419, shift
 722              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 723              		.loc 1 540 99 view .LVU196
 724 0462 4183E73F 		and	r15d, 63	# _49,
 725              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 726              		.loc 1 540 127 view .LVU197
 727 0466 C4C283F7 		shrx	rsi, r8, r15	# tmp423, pattern, _49
 727      F0
 728              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 729              		.loc 1 540 72 view .LVU198
 730 046b 4529FD   		sub	r13d, r15d	# tmp421, _49
 731              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 732              		.loc 1 539 40 view .LVU199
 733 046e 4D8D7E01 		lea	r15, 1[r14]	# i,
 734              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 735              		.loc 1 540 55 view .LVU200
 736 0472 C44291F7 		shlx	r13, r8, r13	# tmp422, pattern, tmp421
 736      E8
 737              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 738              		.loc 1 540 116 view .LVU201
 739 0477 4C09EE   		or	rsi, r13	# tmp424, tmp422
 740 047a 4A8934DF 		mov	QWORD PTR [rdi+r11*8], rsi	# *_55, tmp424
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 741              		.loc 1 539 40 is_stmt 1 view .LVU202
 742              	.LVL34:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 743              		.loc 1 539 25 view .LVU203
GAS LISTING /tmp/ccNeV1of.s 			page 27


 744              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 745              		.loc 1 539 5 is_stmt 0 view .LVU204
 746 047e 4D39CF   		cmp	r15, r9	# i, loop_range
 747 0481 0F87F101 		ja	.L10	#,
 747      0000
 748              		.loc 1 540 9 is_stmt 1 view .LVU205
 749              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 750              		.loc 1 540 81 is_stmt 0 view .LVU206
 751 0487 4189D3   		mov	r11d, edx	# tmp425, tmp355
 752              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 753              		.loc 1 540 72 view .LVU207
 754 048a 4189C5   		mov	r13d, eax	# tmp428, pattern_size
 755              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 756              		.loc 1 540 81 view .LVU208
 757 048d 450FAFDF 		imul	r11d, r15d	# tmp425, i
 758              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 759              		.loc 1 540 17 view .LVU209
 760 0491 4D01D7   		add	r15, r10	# tmp427, destination_start_word
 761              	.LVL35:
 762              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 763              		.loc 1 540 81 view .LVU210
 764 0494 4101CB   		add	r11d, ecx	# tmp426, shift
 765              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 766              		.loc 1 540 99 view .LVU211
 767 0497 4183E33F 		and	r11d, 63	# _83,
 768              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 769              		.loc 1 540 72 view .LVU212
 770 049b 4529DD   		sub	r13d, r11d	# tmp428, _83
 771              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 772              		.loc 1 540 127 view .LVU213
 773 049e C442A3F7 		shrx	r11, r8, r11	# tmp430, pattern, _83
 773      D8
 774              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 775              		.loc 1 540 55 view .LVU214
 776 04a3 C4C291F7 		shlx	rsi, r8, r13	# tmp429, pattern, tmp428
 776      F0
 777              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 778              		.loc 1 540 116 view .LVU215
 779 04a8 4C09DE   		or	rsi, r11	# tmp431, tmp430
 780 04ab 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_181, tmp431
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 781              		.loc 1 539 40 is_stmt 1 view .LVU216
 782 04af 4D8D7E02 		lea	r15, 2[r14]	# i,
 783              	.LVL36:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 784              		.loc 1 539 25 view .LVU217
 785              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 786              		.loc 1 539 5 is_stmt 0 view .LVU218
 787 04b3 4D39F9   		cmp	r9, r15	# loop_range, i
 788 04b6 0F82BC01 		jb	.L10	#,
 788      0000
 789              		.loc 1 540 9 is_stmt 1 view .LVU219
 790              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 791              		.loc 1 540 81 is_stmt 0 view .LVU220
 792 04bc 89D6     		mov	esi, edx	# tmp432, tmp355
GAS LISTING /tmp/ccNeV1of.s 			page 28


 793              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 794              		.loc 1 540 72 view .LVU221
 795 04be 4189C5   		mov	r13d, eax	# tmp435, pattern_size
 796              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 797              		.loc 1 540 81 view .LVU222
 798 04c1 410FAFF7 		imul	esi, r15d	# tmp432, i
 799              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 800              		.loc 1 540 17 view .LVU223
 801 04c5 4D01D7   		add	r15, r10	# tmp434, destination_start_word
 802              	.LVL37:
 803              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 804              		.loc 1 540 81 view .LVU224
 805 04c8 01CE     		add	esi, ecx	# tmp433, shift
 806              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 807              		.loc 1 540 99 view .LVU225
 808 04ca 83E63F   		and	esi, 63	# _190,
 809              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 810              		.loc 1 540 72 view .LVU226
 811 04cd 4129F5   		sub	r13d, esi	# tmp435, _190
 812              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 813              		.loc 1 540 127 view .LVU227
 814 04d0 C4C2CBF7 		shrx	rsi, r8, rsi	# tmp437, pattern, _190
 814      F0
 815              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 816              		.loc 1 540 55 view .LVU228
 817 04d5 C44291F7 		shlx	r11, r8, r13	# tmp436, pattern, tmp435
 817      D8
 818              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 819              		.loc 1 540 116 view .LVU229
 820 04da 4C09DE   		or	rsi, r11	# tmp438, tmp436
 821 04dd 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_196, tmp438
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 822              		.loc 1 539 40 is_stmt 1 view .LVU230
 823 04e1 4D8D7E03 		lea	r15, 3[r14]	# i,
 824              	.LVL38:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 825              		.loc 1 539 25 view .LVU231
 826              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 827              		.loc 1 539 5 is_stmt 0 view .LVU232
 828 04e5 4D39F9   		cmp	r9, r15	# loop_range, i
 829 04e8 0F828A01 		jb	.L10	#,
 829      0000
 830              		.loc 1 540 9 is_stmt 1 view .LVU233
 831              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 832              		.loc 1 540 81 is_stmt 0 view .LVU234
 833 04ee 4189D3   		mov	r11d, edx	# tmp439, tmp355
 834              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 835              		.loc 1 540 72 view .LVU235
 836 04f1 4189C5   		mov	r13d, eax	# tmp442, pattern_size
 837              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 838              		.loc 1 540 81 view .LVU236
 839 04f4 450FAFDF 		imul	r11d, r15d	# tmp439, i
 840              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 841              		.loc 1 540 17 view .LVU237
 842 04f8 4D01D7   		add	r15, r10	# tmp441, destination_start_word
 843              	.LVL39:
GAS LISTING /tmp/ccNeV1of.s 			page 29


 844              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 845              		.loc 1 540 81 view .LVU238
 846 04fb 4101CB   		add	r11d, ecx	# tmp440, shift
 847              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 848              		.loc 1 540 99 view .LVU239
 849 04fe 4183E33F 		and	r11d, 63	# _205,
 850              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 851              		.loc 1 540 127 view .LVU240
 852 0502 C4C2A3F7 		shrx	rsi, r8, r11	# tmp444, pattern, _205
 852      F0
 853              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 854              		.loc 1 540 72 view .LVU241
 855 0507 4529DD   		sub	r13d, r11d	# tmp442, _205
 856              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 857              		.loc 1 540 55 view .LVU242
 858 050a C44291F7 		shlx	r13, r8, r13	# tmp443, pattern, tmp442
 858      E8
 859              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 860              		.loc 1 540 116 view .LVU243
 861 050f 4C09EE   		or	rsi, r13	# tmp445, tmp443
 862 0512 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_211, tmp445
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 863              		.loc 1 539 40 is_stmt 1 view .LVU244
 864 0516 4D8D7E04 		lea	r15, 4[r14]	# i,
 865              	.LVL40:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 866              		.loc 1 539 25 view .LVU245
 867              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 868              		.loc 1 539 5 is_stmt 0 view .LVU246
 869 051a 4D39F9   		cmp	r9, r15	# loop_range, i
 870 051d 0F825501 		jb	.L10	#,
 870      0000
 871              		.loc 1 540 9 is_stmt 1 view .LVU247
 872              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 873              		.loc 1 540 81 is_stmt 0 view .LVU248
 874 0523 4189D3   		mov	r11d, edx	# tmp446, tmp355
 875              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 876              		.loc 1 540 72 view .LVU249
 877 0526 4189C5   		mov	r13d, eax	# tmp449, pattern_size
 878              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 879              		.loc 1 540 81 view .LVU250
 880 0529 450FAFDF 		imul	r11d, r15d	# tmp446, i
 881              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 882              		.loc 1 540 17 view .LVU251
 883 052d 4D01D7   		add	r15, r10	# tmp448, destination_start_word
 884              	.LVL41:
 885              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 886              		.loc 1 540 81 view .LVU252
 887 0530 4101CB   		add	r11d, ecx	# tmp447, shift
 888              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 889              		.loc 1 540 99 view .LVU253
 890 0533 4183E33F 		and	r11d, 63	# _220,
 891              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 892              		.loc 1 540 127 view .LVU254
 893 0537 C4C2A3F7 		shrx	rsi, r8, r11	# tmp451, pattern, _220
 893      F0
GAS LISTING /tmp/ccNeV1of.s 			page 30


 894              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 895              		.loc 1 540 72 view .LVU255
 896 053c 4529DD   		sub	r13d, r11d	# tmp449, _220
 897              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 898              		.loc 1 540 55 view .LVU256
 899 053f C44291F7 		shlx	r13, r8, r13	# tmp450, pattern, tmp449
 899      E8
 900              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 901              		.loc 1 540 116 view .LVU257
 902 0544 4C09EE   		or	rsi, r13	# tmp452, tmp450
 903 0547 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_226, tmp452
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 904              		.loc 1 539 40 is_stmt 1 view .LVU258
 905 054b 4D8D7E05 		lea	r15, 5[r14]	# i,
 906              	.LVL42:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 907              		.loc 1 539 25 view .LVU259
 908              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 909              		.loc 1 539 5 is_stmt 0 view .LVU260
 910 054f 4D39F9   		cmp	r9, r15	# loop_range, i
 911 0552 0F822001 		jb	.L10	#,
 911      0000
 912              		.loc 1 540 9 is_stmt 1 view .LVU261
 913              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 914              		.loc 1 540 81 is_stmt 0 view .LVU262
 915 0558 4189D3   		mov	r11d, edx	# tmp453, tmp355
 916              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 917              		.loc 1 540 72 view .LVU263
 918 055b 4189C5   		mov	r13d, eax	# tmp456, pattern_size
 919              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 920              		.loc 1 540 81 view .LVU264
 921 055e 450FAFDF 		imul	r11d, r15d	# tmp453, i
 922              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 923              		.loc 1 540 17 view .LVU265
 924 0562 4D01D7   		add	r15, r10	# tmp455, destination_start_word
 925              	.LVL43:
 926              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 927              		.loc 1 540 81 view .LVU266
 928 0565 4101CB   		add	r11d, ecx	# tmp454, shift
 929              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 930              		.loc 1 540 99 view .LVU267
 931 0568 4183E33F 		and	r11d, 63	# _235,
 932              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 933              		.loc 1 540 127 view .LVU268
 934 056c C4C2A3F7 		shrx	rsi, r8, r11	# tmp458, pattern, _235
 934      F0
 935              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 936              		.loc 1 540 72 view .LVU269
 937 0571 4529DD   		sub	r13d, r11d	# tmp456, _235
 938              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 939              		.loc 1 540 55 view .LVU270
 940 0574 C44291F7 		shlx	r13, r8, r13	# tmp457, pattern, tmp456
 940      E8
 941              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 942              		.loc 1 540 116 view .LVU271
 943 0579 4C09EE   		or	rsi, r13	# tmp459, tmp457
GAS LISTING /tmp/ccNeV1of.s 			page 31


 944 057c 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_241, tmp459
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 945              		.loc 1 539 40 is_stmt 1 view .LVU272
 946 0580 4D8D7E06 		lea	r15, 6[r14]	# i,
 947              	.LVL44:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 948              		.loc 1 539 25 view .LVU273
 949              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 950              		.loc 1 539 5 is_stmt 0 view .LVU274
 951 0584 4D39F9   		cmp	r9, r15	# loop_range, i
 952 0587 0F82EB00 		jb	.L10	#,
 952      0000
 953              		.loc 1 540 9 is_stmt 1 view .LVU275
 954              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 955              		.loc 1 540 81 is_stmt 0 view .LVU276
 956 058d 4189D3   		mov	r11d, edx	# tmp460, tmp355
 957              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 958              		.loc 1 540 72 view .LVU277
 959 0590 4189C5   		mov	r13d, eax	# tmp463, pattern_size
 960              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 961              		.loc 1 540 81 view .LVU278
 962 0593 450FAFDF 		imul	r11d, r15d	# tmp460, i
 963              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 964              		.loc 1 540 17 view .LVU279
 965 0597 4D01D7   		add	r15, r10	# tmp462, destination_start_word
 966              	.LVL45:
 967              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 968              		.loc 1 540 81 view .LVU280
 969 059a 4101CB   		add	r11d, ecx	# tmp461, shift
 970              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 971              		.loc 1 540 99 view .LVU281
 972 059d 4183E33F 		and	r11d, 63	# _250,
 973              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 974              		.loc 1 540 127 view .LVU282
 975 05a1 C4C2A3F7 		shrx	rsi, r8, r11	# tmp465, pattern, _250
 975      F0
 976              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 977              		.loc 1 540 72 view .LVU283
 978 05a6 4529DD   		sub	r13d, r11d	# tmp463, _250
 979              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 980              		.loc 1 540 55 view .LVU284
 981 05a9 C44291F7 		shlx	r13, r8, r13	# tmp464, pattern, tmp463
 981      E8
 982              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 983              		.loc 1 540 116 view .LVU285
 984 05ae 4C09EE   		or	rsi, r13	# tmp466, tmp464
 985 05b1 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_256, tmp466
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 986              		.loc 1 539 40 is_stmt 1 view .LVU286
 987 05b5 4D8D7E07 		lea	r15, 7[r14]	# i,
 988              	.LVL46:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 989              		.loc 1 539 25 view .LVU287
 990              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 991              		.loc 1 539 5 is_stmt 0 view .LVU288
GAS LISTING /tmp/ccNeV1of.s 			page 32


 992 05b9 4D39F9   		cmp	r9, r15	# loop_range, i
 993 05bc 0F82B600 		jb	.L10	#,
 993      0000
 994              		.loc 1 540 9 is_stmt 1 view .LVU289
 995              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 996              		.loc 1 540 81 is_stmt 0 view .LVU290
 997 05c2 4189D3   		mov	r11d, edx	# tmp467, tmp355
 998              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 999              		.loc 1 540 72 view .LVU291
 1000 05c5 4189C5   		mov	r13d, eax	# tmp470, pattern_size
 1001              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1002              		.loc 1 540 81 view .LVU292
 1003 05c8 450FAFDF 		imul	r11d, r15d	# tmp467, i
 1004              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1005              		.loc 1 540 17 view .LVU293
 1006 05cc 4D01D7   		add	r15, r10	# tmp469, destination_start_word
 1007              	.LVL47:
 1008              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1009              		.loc 1 540 81 view .LVU294
 1010 05cf 4101CB   		add	r11d, ecx	# tmp468, shift
 1011              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1012              		.loc 1 540 99 view .LVU295
 1013 05d2 4183E33F 		and	r11d, 63	# _265,
 1014              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1015              		.loc 1 540 127 view .LVU296
 1016 05d6 C4C2A3F7 		shrx	rsi, r8, r11	# tmp472, pattern, _265
 1016      F0
 1017              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1018              		.loc 1 540 72 view .LVU297
 1019 05db 4529DD   		sub	r13d, r11d	# tmp470, _265
 1020              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1021              		.loc 1 540 55 view .LVU298
 1022 05de C44291F7 		shlx	r13, r8, r13	# tmp471, pattern, tmp470
 1022      E8
 1023              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1024              		.loc 1 540 116 view .LVU299
 1025 05e3 4C09EE   		or	rsi, r13	# tmp473, tmp471
 1026 05e6 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_271, tmp473
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1027              		.loc 1 539 40 is_stmt 1 view .LVU300
 1028 05ea 4D8D7E08 		lea	r15, 8[r14]	# i,
 1029              	.LVL48:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1030              		.loc 1 539 25 view .LVU301
 1031              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1032              		.loc 1 539 5 is_stmt 0 view .LVU302
 1033 05ee 4D39F9   		cmp	r9, r15	# loop_range, i
 1034 05f1 0F828100 		jb	.L10	#,
 1034      0000
 1035              		.loc 1 540 9 is_stmt 1 view .LVU303
 1036              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1037              		.loc 1 540 81 is_stmt 0 view .LVU304
 1038 05f7 4189D3   		mov	r11d, edx	# tmp474, tmp355
 1039              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1040              		.loc 1 540 72 view .LVU305
 1041 05fa 4189C5   		mov	r13d, eax	# tmp477, pattern_size
GAS LISTING /tmp/ccNeV1of.s 			page 33


 1042              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1043              		.loc 1 540 81 view .LVU306
 1044 05fd 450FAFDF 		imul	r11d, r15d	# tmp474, i
 1045              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1046              		.loc 1 540 17 view .LVU307
 1047 0601 4D01D7   		add	r15, r10	# tmp476, destination_start_word
 1048              	.LVL49:
 1049              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1050              		.loc 1 540 81 view .LVU308
 1051 0604 4101CB   		add	r11d, ecx	# tmp475, shift
 1052              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1053              		.loc 1 540 99 view .LVU309
 1054 0607 4183E33F 		and	r11d, 63	# _280,
 1055              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1056              		.loc 1 540 127 view .LVU310
 1057 060b C4C2A3F7 		shrx	rsi, r8, r11	# tmp479, pattern, _280
 1057      F0
 1058              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1059              		.loc 1 540 72 view .LVU311
 1060 0610 4529DD   		sub	r13d, r11d	# tmp477, _280
 1061              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1062              		.loc 1 540 55 view .LVU312
 1063 0613 C44291F7 		shlx	r13, r8, r13	# tmp478, pattern, tmp477
 1063      E8
 1064              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1065              		.loc 1 540 116 view .LVU313
 1066 0618 4C09EE   		or	rsi, r13	# tmp480, tmp478
 1067 061b 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_286, tmp480
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1068              		.loc 1 539 40 is_stmt 1 view .LVU314
 1069 061f 4D8D7E09 		lea	r15, 9[r14]	# i,
 1070              	.LVL50:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1071              		.loc 1 539 25 view .LVU315
 1072              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1073              		.loc 1 539 5 is_stmt 0 view .LVU316
 1074 0623 4D39F9   		cmp	r9, r15	# loop_range, i
 1075 0626 7250     		jb	.L10	#,
 1076              		.loc 1 540 9 is_stmt 1 view .LVU317
 1077              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1078              		.loc 1 540 81 is_stmt 0 view .LVU318
 1079 0628 4189D3   		mov	r11d, edx	# tmp481, tmp355
 1080              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1081              		.loc 1 540 72 view .LVU319
 1082 062b 4189C5   		mov	r13d, eax	# tmp484, pattern_size
 1083              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1084              		.loc 1 540 81 view .LVU320
 1085 062e 450FAFDF 		imul	r11d, r15d	# tmp481, i
 1086              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1087              		.loc 1 539 40 view .LVU321
 1088 0632 4983C60A 		add	r14, 10	# i,
 1089              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1090              		.loc 1 540 17 view .LVU322
 1091 0636 4D01D7   		add	r15, r10	# tmp483, destination_start_word
 1092              	.LVL51:
GAS LISTING /tmp/ccNeV1of.s 			page 34


 1093              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1094              		.loc 1 540 81 view .LVU323
 1095 0639 4101CB   		add	r11d, ecx	# tmp482, shift
 1096              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1097              		.loc 1 540 99 view .LVU324
 1098 063c 4183E33F 		and	r11d, 63	# _295,
 1099              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1100              		.loc 1 540 127 view .LVU325
 1101 0640 C4C2A3F7 		shrx	rsi, r8, r11	# tmp486, pattern, _295
 1101      F0
 1102              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1103              		.loc 1 540 72 view .LVU326
 1104 0645 4529DD   		sub	r13d, r11d	# tmp484, _295
 1105              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1106              		.loc 1 540 55 view .LVU327
 1107 0648 C44291F7 		shlx	r13, r8, r13	# tmp485, pattern, tmp484
 1107      E8
 1108              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1109              		.loc 1 540 116 view .LVU328
 1110 064d 4C09EE   		or	rsi, r13	# tmp487, tmp485
 1111              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1112              		.loc 1 539 5 view .LVU329
 1113 0650 4D39F1   		cmp	r9, r14	# loop_range, i
 1114              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1115              		.loc 1 540 116 view .LVU330
 1116 0653 4A8934FF 		mov	QWORD PTR [rdi+r15*8], rsi	# *_301, tmp487
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1117              		.loc 1 539 40 is_stmt 1 view .LVU331
 1118              	.LVL52:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1119              		.loc 1 539 25 view .LVU332
 1120              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1121              		.loc 1 539 5 is_stmt 0 view .LVU333
 1122 0657 721F     		jb	.L10	#,
 1123              		.loc 1 540 9 is_stmt 1 view .LVU334
 1124              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1125              		.loc 1 540 81 is_stmt 0 view .LVU335
 1126 0659 410FAFD6 		imul	edx, r14d	# tmp488, i
 1127              	.LVL53:
 1128              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1129              		.loc 1 540 17 view .LVU336
 1130 065d 4D01D6   		add	r14, r10	# tmp490, destination_start_word
 1131              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1132              		.loc 1 540 81 view .LVU337
 1133 0660 01D1     		add	ecx, edx	# tmp489, tmp488
 1134              	.LVL54:
 1135              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1136              		.loc 1 540 99 view .LVU338
 1137 0662 83E13F   		and	ecx, 63	# _108,
 1138              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1139              		.loc 1 540 72 view .LVU339
 1140 0665 29C8     		sub	eax, ecx	# tmp491, _108
 1141              	.LVL55:
 1142              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1143              		.loc 1 540 55 view .LVU340
GAS LISTING /tmp/ccNeV1of.s 			page 35


 1144 0667 C4C2F9F7 		shlx	rdx, r8, rax	# tmp492, pattern, tmp491
 1144      D0
 1145              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1146              		.loc 1 540 127 view .LVU341
 1147 066c C442F3F7 		shrx	r8, r8, rcx	# tmp493, pattern, _108
 1147      C0
 1148              	.LVL56:
 1149              	# sieve_extend.c:540:         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((sh
 1150              		.loc 1 540 116 view .LVU342
 1151 0671 4909D0   		or	r8, rdx	# tmp494, tmp492
 1152 0674 4E8904F7 		mov	QWORD PTR [rdi+r14*8], r8	# *_42, tmp494
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1153              		.loc 1 539 40 is_stmt 1 view .LVU343
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1154              		.loc 1 539 25 view .LVU344
 1155              	.L10:
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1156              		.loc 1 539 25 is_stmt 0 view .LVU345
 1157              	.LBE328:
 541:sieve_extend.c ****     }
 542:sieve_extend.c ****     bitarray[destination_stop_word] &= chopmask(destination_stop);
 1158              		.loc 1 542 5 is_stmt 1 view .LVU346
 1159              	# sieve_extend.c:542:     bitarray[destination_stop_word] &= chopmask(destination_stop);
 1160              		.loc 1 542 37 is_stmt 0 view .LVU347
 1161 0678 4A211CE7 		and	QWORD PTR [rdi+r12*8], rbx	# *_57, _124
 1162              	# sieve_extend.c:543: }
 543:sieve_extend.c **** }
 1163              		.loc 1 543 1 view .LVU348
 1164 067c 488D65D8 		lea	rsp, -40[rbp]	#,
 1165 0680 5B       		pop	rbx	#
 1166 0681 415C     		pop	r12	#
 1167              	.LVL57:
 1168              		.loc 1 543 1 view .LVU349
 1169 0683 415D     		pop	r13	#
 1170 0685 415E     		pop	r14	#
 1171 0687 415F     		pop	r15	#
 1172 0689 5D       		pop	rbp	#
 1173              		.cfi_remember_state
 1174              		.cfi_def_cfa 7, 8
 1175 068a C3       		ret	
 1176              	.LVL58:
 1177 068b 0F1F4400 		.p2align 4,,7
 1177      00
 1178              		.p2align 3
 1179              	.L49:
 1180              		.cfi_restore_state
 524:sieve_extend.c ****         return;
 1181              		.loc 1 524 9 is_stmt 1 view .LVU350
 1182              	# sieve_extend.c:524:         bitarray[destination_start_word] |= (pattern << bitindex(destination_
 524:sieve_extend.c ****         return;
 1183              		.loc 1 524 86 is_stmt 0 view .LVU351
 1184 0690 4821D8   		and	rax, rbx	# tmp351, _124
 1185              	# sieve_extend.c:524:         bitarray[destination_start_word] |= (pattern << bitindex(destination_
 524:sieve_extend.c ****         return;
 1186              		.loc 1 524 42 view .LVU352
 1187 0693 4C09F8   		or	rax, r15	# tmp352, pretmp_118
 1188 0696 498906   		mov	QWORD PTR [r14], rax	# *_117, tmp352
GAS LISTING /tmp/ccNeV1of.s 			page 36


 525:sieve_extend.c ****     }
 1189              		.loc 1 525 9 is_stmt 1 view .LVU353
 1190              	# sieve_extend.c:543: }
 1191              		.loc 1 543 1 is_stmt 0 view .LVU354
 1192 0699 488D65D8 		lea	rsp, -40[rbp]	#,
 1193 069d 5B       		pop	rbx	#
 1194 069e 415C     		pop	r12	#
 1195              	.LVL59:
 1196              		.loc 1 543 1 view .LVU355
 1197 06a0 415D     		pop	r13	#
 1198 06a2 415E     		pop	r14	#
 1199 06a4 415F     		pop	r15	#
 1200 06a6 5D       		pop	rbp	#
 1201              		.cfi_remember_state
 1202              		.cfi_def_cfa 7, 8
 1203 06a7 C3       		ret	
 1204              	.LVL60:
 1205              	.L50:
 1206              		.cfi_restore_state
 1207              		.loc 1 543 1 view .LVU356
 1208 06a8 C5F877   		vzeroupper
 1209 06ab EBCB     		jmp	.L10	#
 1210              	.LVL61:
 1211              	.L12:
 1212              	.LBB329:
 1213              	# sieve_extend.c:539:     for (counter_t i=0; i<=loop_range; ++i ) {
 539:sieve_extend.c ****         bitarray[destination_start_word+i] = (pattern << (pattern_size - ((shift+i*pattern_shift) &
 1214              		.loc 1 539 20 view .LVU357
 1215 06ad 4531F6   		xor	r14d, r14d	# i
 1216 06b0 E979FBFF 		jmp	.L7	#
 1216      FF
 1217              	.L11:
 1218 06b5 4531F6   		xor	r14d, r14d	# tmp.151
 1219              		.p2align 4,,2
 1220 06b8 E994FDFF 		jmp	.L6	#
 1220      FF
 1221              	.LBE329:
 1222              		.cfi_endproc
 1223              	.LFE68:
 1225 06bd 0F1F00   		.p2align 4
 1226              		.globl	compare_tuning_result
 1228              	compare_tuning_result:
 1229              	.LVL62:
 1230              	.LFB86:
 544:sieve_extend.c **** 
 545:sieve_extend.c **** static void extendSieve_aligned(bitword_t* bitarray, const counter_t source_start, const counter_t 
 546:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using aligned (%ju copies)\n"
 547:sieve_extend.c **** 
 548:sieve_extend.c ****     const counter_t destination_stop_word = wordindex(destination_stop);
 549:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 550:sieve_extend.c ****     counter_t source_word = wordindex(source_start);
 551:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
 552:sieve_extend.c ****     
 553:sieve_extend.c ****     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 554:sieve_extend.c **** 
 555:sieve_extend.c ****     while (copy_word + size <= destination_stop_word) {
 556:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
GAS LISTING /tmp/ccNeV1of.s 			page 37


 557:sieve_extend.c ****         copy_word += size;
 558:sieve_extend.c ****     }
 559:sieve_extend.c **** 
 560:sieve_extend.c ****    while (copy_word < destination_stop_word) {
 561:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 562:sieve_extend.c ****         source_word++;
 563:sieve_extend.c ****         copy_word++;
 564:sieve_extend.c ****     }
 565:sieve_extend.c **** 
 566:sieve_extend.c **** }
 567:sieve_extend.c **** 
 568:sieve_extend.c **** //https://stackoverflow.com/questions/1898153/how-to-determine-if-memory-is-aligned
 569:sieve_extend.c **** #define is_unaligned(POINTER, BYTE_COUNT) (((uintptr_t)(const void *)(POINTER)) % (BYTE_COUNT))
 570:sieve_extend.c **** 
 571:sieve_extend.c **** void shiftvec(uint64_t* __restrict dst, const uint64_t* __restrict src, int size, int shift)
 572:sieve_extend.c **** {
 573:sieve_extend.c ****     int i = 0;
 574:sieve_extend.c ****     // MSVC: use steps of 2 for SSE, 4 for AVX2, 8 for AVX512
 575:sieve_extend.c ****     for (; i+4 < size; i+=4,dst+=4,src+=4)
 576:sieve_extend.c ****     {
 577:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 578:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 579:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 580:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 581:sieve_extend.c ****     }
 582:sieve_extend.c ****     for (; i < size; ++i,++src,++dst)
 583:sieve_extend.c ****     {
 584:sieve_extend.c ****         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 585:sieve_extend.c ****     }    
 586:sieve_extend.c **** }
 587:sieve_extend.c **** 
 588:sieve_extend.c **** #define forward_distance 4
 589:sieve_extend.c **** static void extendSieve_shiftright_vector(bitword_t* bitarray, const counter_t source_start, const 
 590:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 591:sieve_extend.c ****    
 592:sieve_extend.c ****     bitvector_t* bitarray_vector = (bitvector_t*) bitarray;
 593:sieve_extend.c **** 
 594:sieve_extend.c ****     const counter_t destination_stop_word = wordindex(destination_stop);
 595:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 596:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_calc(source_start);
 597:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 598:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 599:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 600:sieve_extend.c **** 
 601:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start in to not lose data
 602:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 603:sieve_extend.c ****                                 & keepmask(copy_start);
 604:sieve_extend.c **** 
 605:sieve_extend.c ****     if (copy_word >= destination_stop_word) { 
 606:sieve_extend.c ****         return; // rapid exit for one word variant
 607:sieve_extend.c ****     }
 608:sieve_extend.c **** 
 609:sieve_extend.c ****     copy_word++;
 610:sieve_extend.c **** 
 611:sieve_extend.c ****     debug printf("..copy distance %ju\n",(uintmax_t) copy_word - (uintmax_t) source_word);
 612:sieve_extend.c ****     if (((copy_word - source_word) > 8)) {
 613:sieve_extend.c **** 
GAS LISTING /tmp/ccNeV1of.s 			page 38


 614:sieve_extend.c ****         // move one vector further
 615:sieve_extend.c ****         counter_t target_word = wordindex(vectorstart(source_start+size)+VECTOR_SIZE_counter);
 616:sieve_extend.c ****         counter_t delta_word   = 4-((copy_word-source_word-1) % 4);
 617:sieve_extend.c ****         if (delta_word==0) { 
 618:sieve_extend.c ****             target_word += 8;
 619:sieve_extend.c ****         }
 620:sieve_extend.c **** 
 621:sieve_extend.c ****         debug printf("..source_word %ju copy_word %ju mod %ju target_word %ju\n",source_word, copy_
 622:sieve_extend.c **** 
 623:sieve_extend.c ****         for (; copy_word < target_word; copy_word++, source_word++ ) {
 624:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 625:sieve_extend.c ****         }
 626:sieve_extend.c **** 
 627:sieve_extend.c ****         if (delta_word==0) { 
 628:sieve_extend.c ****             delta_word = 4;
 629:sieve_extend.c ****             source_word += 4;
 630:sieve_extend.c ****         }
 631:sieve_extend.c **** 
 632:sieve_extend.c ****         counter_t source_vector = vectorfromword(source_word+1);
 633:sieve_extend.c ****         counter_t copy_vector = vectorfromword(copy_word);
 634:sieve_extend.c **** 
 635:sieve_extend.c ****         // debug printf("..using vectors source_vector %ju copy vector %ju target_word %ju delta_wo
 636:sieve_extend.c **** 
 637:sieve_extend.c ****         const bitvector_t shuffle1 = { delta_word-1, delta_word, delta_word+1, delta_word+2 };
 638:sieve_extend.c ****         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2, delta_word+3 };
 639:sieve_extend.c ****         const bitvector_t shift_vector = { shift, shift, shift, shift };
 640:sieve_extend.c ****         const bitvector_t shift_flipped_vector = { shift_flipped, shift_flipped, shift_flipped, shi
 641:sieve_extend.c **** 
 642:sieve_extend.c ****         counter_t target_vector = vectorindex(destination_stop);
 643:sieve_extend.c **** 
 644:sieve_extend.c ****         // debug printf("..should be copy from source_word %ju to %ju, but takes vector %ju to %ju 
 645:sieve_extend.c **** 
 646:sieve_extend.c ****         // dump_bitarray(bitarray, copy_word+4);
 647:sieve_extend.c **** 
 648:sieve_extend.c ****         // debug printf("Will copy from %ju to %ju  vector %ju to %ju at copy_word %ju\n",source_ve
 649:sieve_extend.c ****         for (; copy_vector <= target_vector; copy_vector++, source_vector++ ) {
 650:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 651:sieve_extend.c ****             bitvector_t source1 = bitarray_vector[source_vector+1];
 652:sieve_extend.c ****             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped_vector
 653:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 654:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 655:sieve_extend.c ****             // copy_word += 4;
 656:sieve_extend.c ****             // source_word += 4;
 657:sieve_extend.c ****         }
 658:sieve_extend.c **** 
 659:sieve_extend.c ****         target_word = target_vector*4;
 660:sieve_extend.c ****         for (; copy_word <= target_word; copy_word++, source_word++ ) {
 661:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 662:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 663:sieve_extend.c ****             debug printf("Copy_word = %ju\n",copy_word);
 664:sieve_extend.c ****             if (shouldbe != asis) {
 665:sieve_extend.c ****                 printf("ERROR expected at copy_word %ju\n", copy_word);
 666:sieve_extend.c ****                 printWord(shouldbe);
 667:sieve_extend.c ****                 printf("\n");
 668:sieve_extend.c ****                 printf("But is\n");
 669:sieve_extend.c ****                 printWord(asis);
 670:sieve_extend.c ****                 printf("\n");
GAS LISTING /tmp/ccNeV1of.s 			page 39


 671:sieve_extend.c ****                 // dump_bitarray(bitarray, copy_word+4);
 672:sieve_extend.c ****                 exit(0);
 673:sieve_extend.c ****             }
 674:sieve_extend.c ****             else {
 675:sieve_extend.c ****                 // debug printf("Correct for copy_word %ju\n",copy_word);
 676:sieve_extend.c ****             }
 677:sieve_extend.c ****         }
 678:sieve_extend.c **** 
 679:sieve_extend.c ****         // copy_word += 4;
 680:sieve_extend.c ****         // source_word += 4;
 681:sieve_extend.c **** 
 682:sieve_extend.c **** 
 683:sieve_extend.c ****         #pragma GCC ivdep 
 684:sieve_extend.c ****         for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 685:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 686:sieve_extend.c ****         }
 687:sieve_extend.c ****         bitarray[copy_word] &= chopmask(destination_stop);
 688:sieve_extend.c ****     }
 689:sieve_extend.c ****     else {
 690:sieve_extend.c ****         register counter_t i = 0;
 691:sieve_extend.c ****         bitword_t* copy_ptr   = &bitarray[copy_word];
 692:sieve_extend.c ****         bitword_t* source_ptr = &bitarray[source_word];
 693:sieve_extend.c ****         bitword_t* dest_ptr   = &bitarray[destination_stop_word];
 694:sieve_extend.c ****         counter_t size_word_ptr   = dest_ptr - copy_ptr;
 695:sieve_extend.c ****         for (; i <= size_word_ptr; i++)
 696:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 697:sieve_extend.c ****     }
 698:sieve_extend.c **** }
 699:sieve_extend.c **** 
 700:sieve_extend.c **** static inline counter_t extendSieve_shiftleft_unrolled(bitword_t* bitarray, const counter_t aligned
 701:sieve_extend.c ****     const counter_t fast_loop_stop_word = (aligned_copy_word>2) ? (aligned_copy_word - 2) : 0; // s
 702:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 703:sieve_extend.c ****     counter_t distance = 0;
 704:sieve_extend.c ****     while (copy_word < fast_loop_stop_word) {
 705:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 706:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 707:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 708:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 709:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 710:sieve_extend.c ****         copy_word += 2;
 711:sieve_extend.c ****         source_word += 2;
 712:sieve_extend.c ****         distance += 2;
 713:sieve_extend.c ****     }
 714:sieve_extend.c ****     return distance;
 715:sieve_extend.c **** }
 716:sieve_extend.c **** 
 717:sieve_extend.c **** 
 718:sieve_extend.c **** 
 719:sieve_extend.c **** 
 720:sieve_extend.c **** static void extendSieve_shiftright_ivdep(bitword_t* bitarray, const counter_t source_start, const c
 721:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 722:sieve_extend.c ****    
 723:sieve_extend.c ****     const counter_t destination_stop_word = wordindex(destination_stop);
 724:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 725:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_calc(source_start);
 726:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 727:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
GAS LISTING /tmp/ccNeV1of.s 			page 40


 728:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 729:sieve_extend.c **** 
 730:sieve_extend.c ****     if (copy_word >= destination_stop_word) { 
 731:sieve_extend.c ****         bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start in to not lose da
 732:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 733:sieve_extend.c ****                                 & keepmask(copy_start) & chopmask(destination_stop);
 734:sieve_extend.c ****         return; // rapid exit for one word variant
 735:sieve_extend.c ****     }
 736:sieve_extend.c **** 
 737:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start in to not lose data
 738:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 739:sieve_extend.c ****                                 & keepmask(copy_start);
 740:sieve_extend.c **** 
 741:sieve_extend.c ****     copy_word++;
 742:sieve_extend.c **** 
 743:sieve_extend.c ****     debug { printf("...start - %ju - %ju - end\n",(uintmax_t)wordindex(copy_start), (uintmax_t)dest
 744:sieve_extend.c **** 
 745:sieve_extend.c ****     if (size >= WORD_SIZE_counter) {
 746:sieve_extend.c ****         register const counter_t loop_distance = destination_stop_word - copy_word;
 747:sieve_extend.c **** 
 748:sieve_extend.c ****         //#pragma GCC unroll 16
 749:sieve_extend.c ****         #pragma GCC ivdep
 750:sieve_extend.c ****         for (register counter_t i = 0; i <loop_distance; i++) {
 751:sieve_extend.c ****             bitarray[copy_word+i] = (bitarray[source_word+i] >> shift_flipped) | (bitarray[source_w
 752:sieve_extend.c ****         }
 753:sieve_extend.c ****         source_word += loop_distance; copy_word+= loop_distance;
 754:sieve_extend.c ****     }
 755:sieve_extend.c **** 
 756:sieve_extend.c ****     for (; copy_word <= destination_stop_word; copy_word++,source_word++ ) {
 757:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 758:sieve_extend.c ****     }
 759:sieve_extend.c ****     bitarray[copy_word] &= chopmask(destination_stop);
 760:sieve_extend.c **** 
 761:sieve_extend.c **** }
 762:sieve_extend.c **** 
 763:sieve_extend.c **** static void  extendSieve_shiftright_base(bitword_t* bitarray, const counter_t source_start, const c
 764:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 765:sieve_extend.c ****    
 766:sieve_extend.c ****     const counter_t destination_stop_word = wordindex(destination_stop);
 767:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 768:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_calc(source_start);
 769:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 770:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 771:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 772:sieve_extend.c **** 
 773:sieve_extend.c ****     if (copy_word >= destination_stop_word) { 
 774:sieve_extend.c ****         bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start in to not lose da
 775:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 776:sieve_extend.c ****                                 & keepmask(copy_start) & chopmask(destination_stop);
 777:sieve_extend.c ****         return; // rapid exit for one word variant
 778:sieve_extend.c ****     }
 779:sieve_extend.c **** 
 780:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start in to not lose data
 781:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 782:sieve_extend.c ****                                 & keepmask(copy_start);
 783:sieve_extend.c ****     
 784:sieve_extend.c ****     copy_word++;
GAS LISTING /tmp/ccNeV1of.s 			page 41


 785:sieve_extend.c **** 
 786:sieve_extend.c ****     debug { printf("...start - %ju - %ju - end\n",(uintmax_t)wordindex(copy_start), (uintmax_t)dest
 787:sieve_extend.c **** 
 788:sieve_extend.c ****     for (; copy_word <= destination_stop_word; copy_word++, source_word++ ) 
 789:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1] <
 790:sieve_extend.c ****     // bitarray[copy_word] &= chopmask(destination_stop);
 791:sieve_extend.c **** 
 792:sieve_extend.c **** }
 793:sieve_extend.c **** 
 794:sieve_extend.c **** static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source_start, const counter_
 795:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 796:sieve_extend.c **** 
 797:sieve_extend.c ****     const counter_t destination_stop_word = wordindex(destination_stop);
 798:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 799:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_calc(copy_start);
 800:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 801:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 802:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 803:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 804:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 805:sieve_extend.c ****                              & ~chopmask(copy_start); // because this is the first word, dont copy 
 806:sieve_extend.c **** 
 807:sieve_extend.c ****     copy_word++;
 808:sieve_extend.c ****     source_word++;
 809:sieve_extend.c **** 
 810:sieve_extend.c ****     const counter_t aligned_copy_word = min(source_word + size, destination_stop_word); // after <<
 811:sieve_extend.c ****     const counter_t distance  = extendSieve_shiftleft_unrolled(bitarray, aligned_copy_word, shift, 
 812:sieve_extend.c ****     source_word += distance;
 813:sieve_extend.c ****     copy_word += distance;
 814:sieve_extend.c **** 
 815:sieve_extend.c ****      debug { counter_t fast_loop_stop_word = uintsafeminus(aligned_copy_word,2); printf("...start -
 816:sieve_extend.c **** 
 817:sieve_extend.c ****     #pragma GCC ivdep
 818:sieve_extend.c ****     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 819:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 820:sieve_extend.c ****     }
 821:sieve_extend.c **** 
 822:sieve_extend.c ****     if (copy_word >= destination_stop_word) return;
 823:sieve_extend.c **** 
 824:sieve_extend.c ****     source_word = copy_word - size; // recalibrate
 825:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 826:sieve_extend.c **** 
 827:sieve_extend.c ****     #pragma GCC ivdep
 828:sieve_extend.c ****     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 829:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 830:sieve_extend.c **** 
 831:sieve_extend.c ****     #pragma GCC ivdep
 832:sieve_extend.c ****     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 833:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 834:sieve_extend.c **** 
 835:sieve_extend.c **** 
 836:sieve_extend.c ****  }
 837:sieve_extend.c **** 
 838:sieve_extend.c **** static inline void extendSieve(bitword_t* bitarray, const counter_t source_start, const counter_t s
 839:sieve_extend.c ****     if (size < WORD_SIZE_counter)   {
 840:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 841:sieve_extend.c ****         return; // rapid exit for small sizes
GAS LISTING /tmp/ccNeV1of.s 			page 42


 842:sieve_extend.c ****     }
 843:sieve_extend.c **** 
 844:sieve_extend.c ****     const counter_t copy_start  = source_start + size;
 845:sieve_extend.c ****     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 846:sieve_extend.c ****     const bitshift_t source_bit = bitindex_calc(source_start);
 847:sieve_extend.c **** 
 848:sieve_extend.c ****     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_start, size, destinatio
 849:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
 850:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 851:sieve_extend.c **** }
 852:sieve_extend.c **** 
 853:sieve_extend.c **** static void sieve_block_stripe(bitword_t* bitarray, const counter_t block_start, const counter_t bl
 854:sieve_extend.c ****     counter_t prime = prime_start;
 855:sieve_extend.c ****     counter_t start = 0;
 856:sieve_extend.c ****     counter_t step  = prime * 2 + 1;
 857:sieve_extend.c **** 
 858:sieve_extend.c ****     debug printf("Block strip for block %ju - %ju\n",(uintmax_t)block_start,(uintmax_t)block_stop);
 859:sieve_extend.c ****     
 860:sieve_extend.c ****     while (prime*step <= block_stop) {
 861:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 862:sieve_extend.c ****             start = block_start + prime + prime - ((block_start + prime) % step);
 863:sieve_extend.c ****         else 
 864:sieve_extend.c ****             start = prime * prime * 2 + prime * 2;
 865:sieve_extend.c **** 
 866:sieve_extend.c ****         if (step < VECTORSTEP_FASTER) {
 867:sieve_extend.c ****             setBitsTrue_largeRange_vector(bitarray, start, step, block_stop);
 868:sieve_extend.c ****             prime = searchBitFalse(bitarray, prime+1 );
 869:sieve_extend.c ****         }
 870:sieve_extend.c ****         else {
 871:sieve_extend.c ****             setBitsTrue_largeRange(bitarray, start, step, block_stop);
 872:sieve_extend.c ****             prime = searchBitFalse_longRange(bitarray, prime+1 );
 873:sieve_extend.c ****         }
 874:sieve_extend.c **** 
 875:sieve_extend.c ****         start = prime * prime * 2 + prime * 2;
 876:sieve_extend.c ****         step  = prime * 2 + 1;
 877:sieve_extend.c ****     }
 878:sieve_extend.c **** }
 879:sieve_extend.c **** 
 880:sieve_extend.c **** struct block {
 881:sieve_extend.c ****     counter_t pattern_size; // size of pattern applied 
 882:sieve_extend.c ****     counter_t pattern_start; // start of pattern
 883:sieve_extend.c ****     counter_t prime; // next prime to be striped
 884:sieve_extend.c **** };
 885:sieve_extend.c **** 
 886:sieve_extend.c **** // returns prime that could not be handled:
 887:sieve_extend.c **** // start is too large
 888:sieve_extend.c **** // range is too big
 889:sieve_extend.c **** static struct block sieve_block_extend(struct sieve_t *sieve, const counter_t block_start, const co
 890:sieve_extend.c ****     register counter_t prime   = 0;
 891:sieve_extend.c ****     counter_t patternsize_bits = 1;
 892:sieve_extend.c ****     counter_t pattern_start    = 0;
 893:sieve_extend.c ****     counter_t range_stop       = block_start;
 894:sieve_extend.c ****     bitword_t* bitarray        = sieve->bitarray;
 895:sieve_extend.c ****     struct block block = { .prime = 0, .pattern_start = 0, .pattern_size = 0 };
 896:sieve_extend.c **** 
 897:sieve_extend.c ****     sieve->bitarray[0] = SAFE_ZERO; // only the first word has to be cleared; the rest is populated
 898:sieve_extend.c ****     
GAS LISTING /tmp/ccNeV1of.s 			page 43


 899:sieve_extend.c ****     for (;range_stop < block_stop;) {
 900:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 901:sieve_extend.c ****         counter_t start = prime * prime * 2 + prime * 2;
 902:sieve_extend.c ****         if unlikely(start > block_stop) break;
 903:sieve_extend.c **** 
 904:sieve_extend.c ****         const counter_t step  = prime * 2 + 1;
 905:sieve_extend.c ****         if (block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start + prime
 906:sieve_extend.c **** 
 907:sieve_extend.c ****         range_stop = block_start + patternsize_bits * step * 2;  // range is x2 so the second block
 908:sieve_extend.c ****         block.pattern_size = patternsize_bits;
 909:sieve_extend.c ****         block.pattern_start = pattern_start;
 910:sieve_extend.c ****         if (range_stop > block_stop) return block; //range_stop = block_stop;
 911:sieve_extend.c **** 
 912:sieve_extend.c ****         if (patternsize_bits>1) {
 913:sieve_extend.c ****             pattern_start = block_start | patternsize_bits;
 914:sieve_extend.c ****             extendSieve(bitarray, pattern_start, patternsize_bits, range_stop);
 915:sieve_extend.c ****         }
 916:sieve_extend.c ****         patternsize_bits *= step;
 917:sieve_extend.c **** 
 918:sieve_extend.c ****         // if      (step < SMALLSTEP_FASTER)      setBitsTrue_smallStep (bitarray, start, (bitshift
 919:sieve_extend.c ****         // else if (step < MEDIUMSTEP_FASTER)     setBitsTrue_mediumStep(bitarray, start, step, ran
 920:sieve_extend.c ****         if (step < VECTORSTEP_FASTER)     setBitsTrue_largeRange_vector(bitarray, start, step, rang
 921:sieve_extend.c ****         else                              setBitsTrue_largeRange(bitarray, start, step, range_stop)
 922:sieve_extend.c ****         block.prime = prime;
 923:sieve_extend.c ****     } 
 924:sieve_extend.c **** 
 925:sieve_extend.c ****     return block;
 926:sieve_extend.c **** }
 927:sieve_extend.c **** 
 928:sieve_extend.c **** static struct sieve_t* sieve_shake(const counter_t maxints, const counter_t blocksize) {
 929:sieve_extend.c ****     struct sieve_t *sieve = sieve_create(maxints);
 930:sieve_extend.c ****     bitword_t* bitarray = sieve->bitarray;
 931:sieve_extend.c **** 
 932:sieve_extend.c ****     debug printf("Running sieve to find all primes up to %ju with blocksize %ju\n",(uintmax_t)maxin
 933:sieve_extend.c **** 
 934:sieve_extend.c ****     // fill the whole sieve bij adding en copying incrementally
 935:sieve_extend.c ****     struct block block = sieve_block_extend(sieve, 0, sieve->bits);
 936:sieve_extend.c ****     extendSieve(bitarray, block.pattern_start, block.pattern_size, sieve->bits);
 937:sieve_extend.c ****     counter_t startprime = block.prime;
 938:sieve_extend.c **** 
 939:sieve_extend.c ****     // //#pragma GCC unroll 8
 940:sieve_extend.c ****     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= sieve->bits; block_sta
 941:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 942:sieve_extend.c ****         counter_t prime = searchBitFalse(bitarray, startprime);
 943:sieve_extend.c ****         sieve_block_stripe(bitarray, block_start, block_stop, prime);
 944:sieve_extend.c ****     } 
 945:sieve_extend.c **** 
 946:sieve_extend.c ****     return sieve;
 947:sieve_extend.c **** }
 948:sieve_extend.c **** 
 949:sieve_extend.c **** static struct sieve_t *sieve_blockbyblock(const counter_t maxints, const counter_t blocksize) {
 950:sieve_extend.c ****     struct sieve_t *sieve = sieve_create(maxints);
 951:sieve_extend.c ****     counter_t prime     = 1;
 952:sieve_extend.c ****     bitword_t* bitarray = sieve->bitarray;
 953:sieve_extend.c ****     for(counter_t index=0; index<wordindex(maxints/2); index++) {
 954:sieve_extend.c ****         bitarray[index]=SAFE_ZERO;
 955:sieve_extend.c ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 44


 956:sieve_extend.c **** 
 957:sieve_extend.c ****     debug printf("Running sieve to find all primes up to %ju with blocksize %ju\n",(uintmax_t)maxin
 958:sieve_extend.c **** 
 959:sieve_extend.c ****     // //#pragma GCC unroll 8
 960:sieve_extend.c ****     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= sieve->bits; block_sta
 961:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 962:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime);
 963:sieve_extend.c ****         sieve_block_stripe(bitarray, block_start, block_stop, prime);
 964:sieve_extend.c ****     } 
 965:sieve_extend.c **** 
 966:sieve_extend.c ****     return sieve;
 967:sieve_extend.c **** }
 968:sieve_extend.c **** 
 969:sieve_extend.c **** static void show_primes(struct sieve_t *sieve, counter_t maxFactor) {
 970:sieve_extend.c ****     counter_t primeCount = 1;    // We already have 2
 971:sieve_extend.c ****     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(sieve->bitarray, factor+
 972:sieve_extend.c ****         primeCount++;
 973:sieve_extend.c ****         if (factor < maxFactor/2) {
 974:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 975:sieve_extend.c ****             if (primeCount % 10 == 0) printf("\n");
 976:sieve_extend.c ****         }
 977:sieve_extend.c ****     }
 978:sieve_extend.c ****     printf("\nFound %ju primes until %ju\n",(uintmax_t)primeCount, (uintmax_t)sieve->bits*2+1);
 979:sieve_extend.c **** }
 980:sieve_extend.c **** 
 981:sieve_extend.c **** static counter_t count_primes(struct sieve_t *sieve) {
 982:sieve_extend.c ****     counter_t primeCount = 1;
 983:sieve_extend.c ****     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(sieve->bitarray, factor+
 984:sieve_extend.c ****     return primeCount;
 985:sieve_extend.c **** }
 986:sieve_extend.c **** 
 987:sieve_extend.c **** static void deepAnalyzePrimes(struct sieve_t *sieve) {
 988:sieve_extend.c ****     printf("DeepAnalyzing\n");
 989:sieve_extend.c ****     counter_t warn_prime = 0;
 990:sieve_extend.c ****     counter_t warn_nonprime = 0;
 991:sieve_extend.c ****     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 992:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 993:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 994:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 995:sieve_extend.c ****                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marked prime, but %ju * %ju
 996:sieve_extend.c ****                 }
 997:sieve_extend.c ****             }
 998:sieve_extend.c ****         }
 999:sieve_extend.c ****         else {
1000:sieve_extend.c ****             counter_t c_prime = 0;
1001:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1002:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
1003:sieve_extend.c ****             }
1004:sieve_extend.c ****             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju) was marked non-prime, 
1005:sieve_extend.c ****         }
1006:sieve_extend.c ****     }
1007:sieve_extend.c **** }
1008:sieve_extend.c **** 
1009:sieve_extend.c **** 
1010:sieve_extend.c **** int validatePrimeCount(struct sieve_t *sieve, int option_verboselevel) {
1011:sieve_extend.c **** 
1012:sieve_extend.c ****     counter_t primecount = count_primes(sieve);
GAS LISTING /tmp/ccNeV1of.s 			page 45


1013:sieve_extend.c ****     counter_t valid_primes = 0;
1014:sieve_extend.c ****     switch(sieve->size) {
1015:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
1016:sieve_extend.c ****         case 100:           valid_primes = 25;       break;
1017:sieve_extend.c ****         case 1000:          valid_primes = 168;      break;
1018:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
1019:sieve_extend.c ****         case 100000:        valid_primes = 9592;     break;
1020:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
1021:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
1022:sieve_extend.c ****         case 100000000:     valid_primes = 5761455;  break;
1023:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
1024:sieve_extend.c ****         default:            valid_primes= 0;
1025:sieve_extend.c ****     }
1026:sieve_extend.c **** 
1027:sieve_extend.c ****     int valid = (valid_primes == primecount);
1028:sieve_extend.c ****     if (valid  && option_verboselevel >= 4) printf("Result: Sievesize %ju is expected to have %ju p
1029:sieve_extend.c ****     if (!valid && option_verboselevel >= 1) {
1030:sieve_extend.c ****         printf("No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produ
1031:sieve_extend.c ****         if (!valid && option_verboselevel >= 2) show_primes(sieve, default_show_primes_on_error);
1032:sieve_extend.c ****     }
1033:sieve_extend.c ****     if (!valid && option_verboselevel >= 2) deepAnalyzePrimes(sieve);
1034:sieve_extend.c ****     return (valid);
1035:sieve_extend.c **** }
1036:sieve_extend.c **** 
1037:sieve_extend.c **** void usage(char *name) {
1038:sieve_extend.c ****     fprintf(stderr, "Usage: %s [options] [maximum]\n", name);
1039:sieve_extend.c ****     fprintf(stderr, "Options:\n");
1040:sieve_extend.c ****     fprintf(stderr, "  --verbose <level>  Show more output to a certain level:\n");
1041:sieve_extend.c ****     fprintf(stderr, "                     1 - show phase progress\n");
1042:sieve_extend.c ****     fprintf(stderr, "                     2 - show general progress within the phase\n");
1043:sieve_extend.c ****     fprintf(stderr, "                     3 - show actual work\n");
1044:sieve_extend.c ****     fprintf(stderr, "  --check            check the correctness of the algorithm\n");
1045:sieve_extend.c ****     fprintf(stderr, "  --show <maximum>   Show the primes found up to the maximum\n");
1046:sieve_extend.c ****     fprintf(stderr, "  --tune  <level>    find the best settings for the current os and hardware\n"
1047:sieve_extend.c ****     fprintf(stderr, "                     1 - fast tuning\n");
1048:sieve_extend.c ****     fprintf(stderr, "                     2 - refined tuning\n");
1049:sieve_extend.c ****     fprintf(stderr, "                     3 - maximum tuning (takes long)\n");
1050:sieve_extend.c ****     exit(1);
1051:sieve_extend.c **** }
1052:sieve_extend.c **** 
1053:sieve_extend.c **** typedef struct  {
1054:sieve_extend.c ****     counter_t maxints;
1055:sieve_extend.c ****     counter_t blocksize_bits;
1056:sieve_extend.c ****     counter_t blocksize_kb;
1057:sieve_extend.c ****     counter_t free_bits;
1058:sieve_extend.c ****     counter_t smallstep_faster;
1059:sieve_extend.c ****     counter_t mediumstep_faster;
1060:sieve_extend.c ****     counter_t vectorstep_faster;
1061:sieve_extend.c ****     counter_t sample_max;
1062:sieve_extend.c ****     double    sample_duration;
1063:sieve_extend.c ****     counter_t passes;
1064:sieve_extend.c ****     double    elapsed_time;
1065:sieve_extend.c ****     double    avg;
1066:sieve_extend.c **** } tuning_result_type;
1067:sieve_extend.c **** 
1068:sieve_extend.c **** int compare_tuning_result(const void *a, const void *b) {
 1231              		.loc 1 1068 57 is_stmt 1 view -0
GAS LISTING /tmp/ccNeV1of.s 			page 46


 1232              		.cfi_startproc
 1233              		.loc 1 1068 57 is_stmt 0 view .LVU359
 1234 06c0 F30F1EFA 		endbr64	
1069:sieve_extend.c ****     tuning_result_type *resultA = (tuning_result_type *)a;
 1235              		.loc 1 1069 5 is_stmt 1 view .LVU360
 1236              	.LVL63:
1070:sieve_extend.c ****     tuning_result_type *resultB = (tuning_result_type *)b;
 1237              		.loc 1 1070 5 view .LVU361
1071:sieve_extend.c ****     return (resultB->avg > resultA->avg ? 1 : -1);
 1238              		.loc 1 1071 5 view .LVU362
 1239              	# sieve_extend.c:1071:     return (resultB->avg > resultA->avg ? 1 : -1);
 1240              		.loc 1 1071 45 is_stmt 0 view .LVU363
 1241 06c4 C5FB1046 		vmovsd	xmm0, QWORD PTR 88[rsi]	# MEM[(struct tuning_result_type *)b_5(D)].avg, MEM[(struct tuning_
 1241      58
 1242 06c9 31C0     		xor	eax, eax	# <retval>
 1243 06cb C5F92F47 		vcomisd	xmm0, QWORD PTR 88[rdi]	# MEM[(struct tuning_result_type *)b_5(D)].avg, MEM[(struct tuning
 1243      58
 1244 06d0 0F97C0   		seta	al	#, <retval>
 1245 06d3 8D4400FF 		lea	eax, -1[rax+rax]	# <retval>,
 1246              	# sieve_extend.c:1072: }
1072:sieve_extend.c **** }
 1247              		.loc 1 1072 1 view .LVU364
 1248 06d7 C3       		ret	
 1249              		.cfi_endproc
 1250              	.LFE86:
 1252 06d8 0F1F8400 		.p2align 4
 1252      00000000 
 1254              	setBitsTrue_largeRange_vector:
 1255              	.LVL64:
 1256              	.LFB67:
 460:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange vector (%ju occ
 1257              		.loc 1 460 153 is_stmt 1 view -0
 1258              		.cfi_startproc
 460:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange vector (%ju occ
 1259              		.loc 1 460 153 is_stmt 0 view .LVU366
 1260 06e0 55       		push	rbp	#
 1261              		.cfi_def_cfa_offset 16
 1262              		.cfi_offset 6, -16
 1263 06e1 4889E5   		mov	rbp, rsp	#,
 1264              		.cfi_def_cfa_register 6
 1265 06e4 4157     		push	r15	#
 1266 06e6 4156     		push	r14	#
 1267 06e8 4155     		push	r13	#
 1268 06ea 4154     		push	r12	#
 1269 06ec 53       		push	rbx	#
 1270 06ed 4883E4E0 		and	rsp, -32	#,
 1271 06f1 488D6424 		lea	rsp, -96[rsp]	#,
 1271      A0
 1272              		.cfi_offset 15, -24
 1273              		.cfi_offset 14, -32
 1274              		.cfi_offset 13, -40
 1275              		.cfi_offset 12, -48
 1276              		.cfi_offset 3, -56
 1277              	# sieve_extend.c:460: static void setBitsTrue_largeRange_vector(bitword_t* __restrict bitarray_word
 460:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange vector (%ju occ
 1278              		.loc 1 460 153 view .LVU367
 1279 06f6 64488B04 		mov	rax, QWORD PTR fs:40	# tmp511, MEM[(<address-space-1> long unsigned int *)40B]
GAS LISTING /tmp/ccNeV1of.s 			page 47


 1279      25280000 
 1279      00
 1280 06ff 48894424 		mov	QWORD PTR 88[rsp], rax	# D.6794, tmp511
 1280      58
 1281 0704 31C0     		xor	eax, eax	# tmp511
 461:sieve_extend.c **** 
 1282              		.loc 1 461 5 is_stmt 1 view .LVU368
 463:sieve_extend.c ****     counter_t range_start_atvector = vectorstart(range_start);
 1283              		.loc 1 463 5 view .LVU369
 1284              	.LVL65:
 464:sieve_extend.c ****     if likely((range_start_atvector + step) < range_start) { // not the first step possible in this
 1285              		.loc 1 464 5 view .LVU370
 1286              	# sieve_extend.c:464:     counter_t range_start_atvector = vectorstart(range_start);
 464:sieve_extend.c ****     if likely((range_start_atvector + step) < range_start) { // not the first step possible in this
 1287              		.loc 1 464 15 is_stmt 0 view .LVU371
 1288 0706 4889F0   		mov	rax, rsi	# range_start_atvector, range_start
 1289 0709 30C0     		xor	al, al	# range_start_atvector
 1290              	.LVL66:
 465:sieve_extend.c ****         debug { printf("Range start+step %ju not at start of vector %ju\n",(uintmax_t)range_start+(
 1291              		.loc 1 465 5 is_stmt 1 view .LVU372
 1292              	# sieve_extend.c:465:     if likely((range_start_atvector + step) < range_start) { // not the first
 465:sieve_extend.c ****         debug { printf("Range start+step %ju not at start of vector %ju\n",(uintmax_t)range_start+(
 1293              		.loc 1 465 8 is_stmt 0 view .LVU373
 1294 070b 4C8D0410 		lea	r8, [rax+rdx]	# tmp174,
 1295 070f 4939F0   		cmp	r8, rsi	# tmp174, range_start
 1296 0712 0F83F800 		jnb	.L55	#,
 1296      0000
 466:sieve_extend.c **** 
 1297              		.loc 1 466 9 is_stmt 1 view .LVU374
 468:sieve_extend.c ****         if (unlikely(range_start_atvector > range_stop)) { // we should not be here; just handle wi
 1298              		.loc 1 468 9 view .LVU375
 1299              	# sieve_extend.c:468:         range_start_atvector += VECTOR_SIZE; // find next vector
 468:sieve_extend.c ****         if (unlikely(range_start_atvector > range_stop)) { // we should not be here; just handle wi
 1300              		.loc 1 468 30 is_stmt 0 view .LVU376
 1301 0718 48050001 		add	rax, 256	# range_start_atvector,
 1301      0000
 1302              	.LVL67:
 469:sieve_extend.c ****             debug2 printf("..Marking and returning without vector\n");
 1303              		.loc 1 469 9 is_stmt 1 view .LVU377
 1304              	# sieve_extend.c:469:         if (unlikely(range_start_atvector > range_stop)) { // we should not b
 469:sieve_extend.c ****             debug2 printf("..Marking and returning without vector\n");
 1305              		.loc 1 469 12 is_stmt 0 view .LVU378
 1306 071e 4839C8   		cmp	rax, rcx	# range_start_atvector, range_stop
 1307 0721 0F876909 		ja	.L56	#,
 1307      0000
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1308              		.loc 1 481 16 is_stmt 1 view .LVU379
 1309              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1310              		.loc 1 481 9 is_stmt 0 view .LVU380
 1311 0727 4839C6   		cmp	rsi, rax	# range_start, range_start_atvector
 1312              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1313              		.loc 1 482 54 view .LVU381
 1314 072a 41BA0100 		mov	r10d, 1	# tmp184,
 1314      0000
 1315              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
GAS LISTING /tmp/ccNeV1of.s 			page 48


 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1316              		.loc 1 481 9 view .LVU382
 1317 0730 0F87DA00 		ja	.L55	#,
 1317      0000
 1318              	.LVL68:
 1319              	.L57:
 482:sieve_extend.c ****     }
 1320              		.loc 1 482 13 is_stmt 1 discriminator 2 view .LVU383
 1321              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1322              		.loc 1 482 51 is_stmt 0 discriminator 2 view .LVU384
 1323 0736 4889F3   		mov	rbx, rsi	# tmp180, range_start
 1324              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1325              		.loc 1 482 54 discriminator 2 view .LVU385
 1326 0739 C442C9F7 		shlx	r9, r10, rsi	# tmp183, tmp184, range_start
 1326      CA
 1327              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1328              		.loc 1 482 51 discriminator 2 view .LVU386
 1329 073e 48C1EB06 		shr	rbx, 6	# tmp180,
 1330              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1331              		.loc 1 481 65 discriminator 2 view .LVU387
 1332 0742 4801D6   		add	rsi, rdx	# range_start, step
 1333              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1334              		.loc 1 482 51 discriminator 2 view .LVU388
 1335 0745 4C090CDF 		or	QWORD PTR [rdi+rbx*8], r9	# *_21, tmp183
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1336              		.loc 1 481 53 is_stmt 1 discriminator 2 view .LVU389
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1337              		.loc 1 481 16 discriminator 2 view .LVU390
 1338              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1339              		.loc 1 481 9 is_stmt 0 discriminator 2 view .LVU391
 1340 0749 4839F0   		cmp	rax, rsi	# range_start_atvector, range_start
 1341 074c 0F82BE00 		jb	.L55	#,
 1341      0000
 482:sieve_extend.c ****     }
 1342              		.loc 1 482 13 is_stmt 1 view .LVU392
 1343              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1344              		.loc 1 482 51 is_stmt 0 view .LVU393
 1345 0752 4989F3   		mov	r11, rsi	# tmp419, range_start
 1346              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1347              		.loc 1 482 54 view .LVU394
 1348 0755 C442C9F7 		shlx	r12, r10, rsi	# tmp422, tmp184, range_start
 1348      E2
 1349              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1350              		.loc 1 482 51 view .LVU395
 1351 075a 49C1EB06 		shr	r11, 6	# tmp419,
 1352              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1353              		.loc 1 481 65 view .LVU396
GAS LISTING /tmp/ccNeV1of.s 			page 49


 1354 075e 4801D6   		add	rsi, rdx	# range_start, step
 1355              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1356              		.loc 1 482 51 view .LVU397
 1357 0761 4E0924DF 		or	QWORD PTR [rdi+r11*8], r12	# *_21, tmp422
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1358              		.loc 1 481 53 is_stmt 1 view .LVU398
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1359              		.loc 1 481 16 view .LVU399
 1360              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1361              		.loc 1 481 9 is_stmt 0 view .LVU400
 1362 0765 4839F0   		cmp	rax, rsi	# range_start_atvector, range_start
 1363 0768 0F82A200 		jb	.L55	#,
 1363      0000
 482:sieve_extend.c ****     }
 1364              		.loc 1 482 13 is_stmt 1 view .LVU401
 1365              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1366              		.loc 1 482 51 is_stmt 0 view .LVU402
 1367 076e 4989F5   		mov	r13, rsi	# tmp423, range_start
 1368              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1369              		.loc 1 482 54 view .LVU403
 1370 0771 C442C9F7 		shlx	r14, r10, rsi	# tmp426, tmp184, range_start
 1370      F2
 1371              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1372              		.loc 1 482 51 view .LVU404
 1373 0776 49C1ED06 		shr	r13, 6	# tmp423,
 1374              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1375              		.loc 1 481 65 view .LVU405
 1376 077a 4801D6   		add	rsi, rdx	# range_start, step
 1377              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1378              		.loc 1 482 51 view .LVU406
 1379 077d 4E0934EF 		or	QWORD PTR [rdi+r13*8], r14	# *_21, tmp426
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1380              		.loc 1 481 53 is_stmt 1 view .LVU407
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1381              		.loc 1 481 16 view .LVU408
 1382              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1383              		.loc 1 481 9 is_stmt 0 view .LVU409
 1384 0781 4839F0   		cmp	rax, rsi	# range_start_atvector, range_start
 1385 0784 0F828600 		jb	.L55	#,
 1385      0000
 482:sieve_extend.c ****     }
 1386              		.loc 1 482 13 is_stmt 1 view .LVU410
 1387              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1388              		.loc 1 482 51 is_stmt 0 view .LVU411
 1389 078a 4989F7   		mov	r15, rsi	# tmp427, range_start
 1390              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1391              		.loc 1 482 54 view .LVU412
GAS LISTING /tmp/ccNeV1of.s 			page 50


 1392 078d C442C9F7 		shlx	r8, r10, rsi	# tmp430, tmp184, range_start
 1392      C2
 1393              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1394              		.loc 1 482 51 view .LVU413
 1395 0792 49C1EF06 		shr	r15, 6	# tmp427,
 1396              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1397              		.loc 1 481 65 view .LVU414
 1398 0796 4801D6   		add	rsi, rdx	# range_start, step
 1399              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1400              		.loc 1 482 51 view .LVU415
 1401 0799 4E0904FF 		or	QWORD PTR [rdi+r15*8], r8	# *_21, tmp430
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1402              		.loc 1 481 53 is_stmt 1 view .LVU416
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1403              		.loc 1 481 16 view .LVU417
 1404              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1405              		.loc 1 481 9 is_stmt 0 view .LVU418
 1406 079d 4839F0   		cmp	rax, rsi	# range_start_atvector, range_start
 1407 07a0 726E     		jb	.L55	#,
 482:sieve_extend.c ****     }
 1408              		.loc 1 482 13 is_stmt 1 view .LVU419
 1409              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1410              		.loc 1 482 51 is_stmt 0 view .LVU420
 1411 07a2 4889F3   		mov	rbx, rsi	# tmp431, range_start
 1412              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1413              		.loc 1 482 54 view .LVU421
 1414 07a5 C442C9F7 		shlx	r9, r10, rsi	# tmp434, tmp184, range_start
 1414      CA
 1415              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1416              		.loc 1 482 51 view .LVU422
 1417 07aa 48C1EB06 		shr	rbx, 6	# tmp431,
 1418              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1419              		.loc 1 481 65 view .LVU423
 1420 07ae 4801D6   		add	rsi, rdx	# range_start, step
 1421              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1422              		.loc 1 482 51 view .LVU424
 1423 07b1 4C090CDF 		or	QWORD PTR [rdi+rbx*8], r9	# *_21, tmp434
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1424              		.loc 1 481 53 is_stmt 1 view .LVU425
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1425              		.loc 1 481 16 view .LVU426
 1426              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1427              		.loc 1 481 9 is_stmt 0 view .LVU427
 1428 07b5 4839F0   		cmp	rax, rsi	# range_start_atvector, range_start
 1429 07b8 7256     		jb	.L55	#,
 482:sieve_extend.c ****     }
 1430              		.loc 1 482 13 is_stmt 1 view .LVU428
GAS LISTING /tmp/ccNeV1of.s 			page 51


 1431              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1432              		.loc 1 482 51 is_stmt 0 view .LVU429
 1433 07ba 4989F3   		mov	r11, rsi	# tmp435, range_start
 1434              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1435              		.loc 1 482 54 view .LVU430
 1436 07bd C442C9F7 		shlx	r12, r10, rsi	# tmp438, tmp184, range_start
 1436      E2
 1437              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1438              		.loc 1 482 51 view .LVU431
 1439 07c2 49C1EB06 		shr	r11, 6	# tmp435,
 1440              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1441              		.loc 1 481 65 view .LVU432
 1442 07c6 4801D6   		add	rsi, rdx	# range_start, step
 1443              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1444              		.loc 1 482 51 view .LVU433
 1445 07c9 4E0924DF 		or	QWORD PTR [rdi+r11*8], r12	# *_21, tmp438
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1446              		.loc 1 481 53 is_stmt 1 view .LVU434
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1447              		.loc 1 481 16 view .LVU435
 1448              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1449              		.loc 1 481 9 is_stmt 0 view .LVU436
 1450 07cd 4839F0   		cmp	rax, rsi	# range_start_atvector, range_start
 1451 07d0 723E     		jb	.L55	#,
 482:sieve_extend.c ****     }
 1452              		.loc 1 482 13 is_stmt 1 view .LVU437
 1453              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1454              		.loc 1 482 51 is_stmt 0 view .LVU438
 1455 07d2 4989F5   		mov	r13, rsi	# tmp439, range_start
 1456              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1457              		.loc 1 482 54 view .LVU439
 1458 07d5 C442C9F7 		shlx	r14, r10, rsi	# tmp442, tmp184, range_start
 1458      F2
 1459              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1460              		.loc 1 482 51 view .LVU440
 1461 07da 49C1ED06 		shr	r13, 6	# tmp439,
 1462              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1463              		.loc 1 481 65 view .LVU441
 1464 07de 4801D6   		add	rsi, rdx	# range_start, step
 1465              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1466              		.loc 1 482 51 view .LVU442
 1467 07e1 4E0934EF 		or	QWORD PTR [rdi+r13*8], r14	# *_21, tmp442
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1468              		.loc 1 481 53 is_stmt 1 view .LVU443
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1469              		.loc 1 481 16 view .LVU444
GAS LISTING /tmp/ccNeV1of.s 			page 52


 1470              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1471              		.loc 1 481 9 is_stmt 0 view .LVU445
 1472 07e5 4839F0   		cmp	rax, rsi	# range_start_atvector, range_start
 1473 07e8 7226     		jb	.L55	#,
 482:sieve_extend.c ****     }
 1474              		.loc 1 482 13 is_stmt 1 view .LVU446
 1475              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1476              		.loc 1 482 51 is_stmt 0 view .LVU447
 1477 07ea 4989F7   		mov	r15, rsi	# tmp443, range_start
 1478              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1479              		.loc 1 482 54 view .LVU448
 1480 07ed C442C9F7 		shlx	r8, r10, rsi	# tmp446, tmp184, range_start
 1480      C2
 1481              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1482              		.loc 1 482 51 view .LVU449
 1483 07f2 49C1EF06 		shr	r15, 6	# tmp443,
 1484              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1485              		.loc 1 481 65 view .LVU450
 1486 07f6 4801D6   		add	rsi, rdx	# range_start, step
 1487              	# sieve_extend.c:482:             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 482:sieve_extend.c ****     }
 1488              		.loc 1 482 51 view .LVU451
 1489 07f9 4E0904FF 		or	QWORD PTR [rdi+r15*8], r8	# *_21, tmp446
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1490              		.loc 1 481 53 is_stmt 1 view .LVU452
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1491              		.loc 1 481 16 view .LVU453
 1492              	# sieve_extend.c:481:         for (; range_start <= range_start_atvector; range_start += step) 
 481:sieve_extend.c ****             bitarray_word[wordindex(range_start)] |= markmask(range_start);
 1493              		.loc 1 481 9 is_stmt 0 view .LVU454
 1494 07fd 4839F0   		cmp	rax, rsi	# range_start_atvector, range_start
 1495 0800 0F8330FF 		jnb	.L57	#,
 1495      FFFF
 1496 0806 662E0F1F 		.p2align 4
 1496      84000000 
 1496      0000
 1497              		.p2align 3
 1498              	.L55:
 485:sieve_extend.c **** 
 1499              		.loc 1 485 5 is_stmt 1 view .LVU455
 1500              	# sieve_extend.c:485:     const counter_t range_stop_unique =  min(range_start + VECTOR_SIZE_counte
 485:sieve_extend.c **** 
 1501              		.loc 1 485 42 is_stmt 0 view .LVU456
 1502 0810 4989D2   		mov	r10, rdx	# tmp185, step
 1503 0813 49C1E208 		sal	r10, 8	# tmp185,
 1504 0817 4901F2   		add	r10, rsi	# tmp186, range_start
 1505              	# sieve_extend.c:485:     const counter_t range_stop_unique =  min(range_start + VECTOR_SIZE_counte
 485:sieve_extend.c **** 
 1506              		.loc 1 485 21 view .LVU457
 1507 081a 4939CA   		cmp	r10, rcx	# tmp186, range_stop
 1508 081d 4C0F47D1 		cmova	r10, rcx	# tmp186,, range_stop_unique, range_stop
 1509              	.LVL69:
GAS LISTING /tmp/ccNeV1of.s 			page 53


 1510              	.LBB336:
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 1511              		.loc 1 489 10 is_stmt 1 view .LVU458
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 1512              		.loc 1 489 41 view .LVU459
 1513              	# sieve_extend.c:489:     for (counter_t index = range_start; index < range_stop_unique;) {
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 1514              		.loc 1 489 5 is_stmt 0 view .LVU460
 1515 0821 4C39D6   		cmp	rsi, r10	# range_start, range_stop_unique
 1516 0824 0F83EA04 		jnb	.L54	#,
 1516      0000
 1517              	.LBB337:
 1518              	.LBB338:
 1519              	.LBB339:
 1520              	# sieve_extend.c:435:     register const counter_t range_stop_vector = vectorindex(range_stop);
 435:sieve_extend.c ****     register const counter_t step_2 = step * 2;
 1521              		.loc 1 435 30 view .LVU461
 1522 082a 48C1E908 		shr	rcx, 8	# range_stop,
 1523              	.LVL70:
 1524              	# sieve_extend.c:438:     register const counter_t step_4 = step * 4;
 438:sieve_extend.c **** 
 1525              		.loc 1 438 30 view .LVU462
 1526 082e 4C8D2C95 		lea	r13, 0[0+rdx*4]	# step_4,
 1526      00000000 
 1527              	.LBB340:
 1528              	# sieve_extend.c:441:         register const counter_t loop_stop_vector = (range_stop_vector > step
 441:sieve_extend.c ****         //#pragma GCC unroll 16
 1529              		.loc 1 441 113 view .LVU463
 1530 0836 4889CB   		mov	rbx, rcx	# iftmp.57_71, range_stop_vector
 1531              	.LBE340:
 1532              	# sieve_extend.c:435:     register const counter_t range_stop_vector = vectorindex(range_stop);
 435:sieve_extend.c ****     register const counter_t step_2 = step * 2;
 1533              		.loc 1 435 30 view .LVU464
 1534 0839 4989C8   		mov	r8, rcx	# range_stop_vector, range_stop
 1535              	.LBB341:
 1536              	# sieve_extend.c:441:         register const counter_t loop_stop_vector = (range_stop_vector > step
 441:sieve_extend.c ****         //#pragma GCC unroll 16
 1537              		.loc 1 441 113 view .LVU465
 1538 083c 4C29EB   		sub	rbx, r13	# iftmp.57_71, step_4
 1539 083f 4883FA01 		cmp	rdx, 1	# step,
 1540 0843 0F85EE04 		jne	.L235	#,
 1540      0000
 1541 0849 4883F904 		cmp	rcx, 4	# range_stop_vector,
 1542 084d BA000000 		mov	edx, 0	# tmp208,
 1542      00
 1543              	.LVL71:
 441:sieve_extend.c ****         //#pragma GCC unroll 16
 1544              		.loc 1 441 113 view .LVU466
 1545              	.LBE341:
 1546              	.LBE339:
 1547              	.LBE338:
 1548              	# sieve_extend.c:491:         register bitvector_t quadmask = { };
 491:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 1549              		.loc 1 491 30 view .LVU467
 1550 0852 C5E9EFD2 		vpxor	xmm2, xmm2, xmm2	# tmp209
 1551              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
GAS LISTING /tmp/ccNeV1of.s 			page 54


 1552              		.loc 1 498 31 view .LVU468
 1553 0856 41BB0100 		mov	r11d, 1	# tmp213,
 1553      0000
 1554 085c 480F46DA 		cmovbe	rbx, rdx	# iftmp.57_71,, iftmp.57_164, tmp208
 1555              	.LVL72:
 1556              		.p2align 4
 1557              		.p2align 3
 1558              	.L72:
 490:sieve_extend.c ****         register bitvector_t quadmask = { };
 1559              		.loc 1 490 9 is_stmt 1 view .LVU469
 1560              	# sieve_extend.c:490:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 490:sieve_extend.c ****         register bitvector_t quadmask = { };
 1561              		.loc 1 490 54 is_stmt 0 view .LVU470
 1562 0860 4889F1   		mov	rcx, rsi	# current_vector, range_start
 1563              	# sieve_extend.c:492:         register counter_t word = wordindex(index) - current_vector_start_wor
 492:sieve_extend.c ****         
 1564              		.loc 1 492 35 view .LVU471
 1565 0863 4889F0   		mov	rax, rsi	# tmp210, range_start
 1566              	# sieve_extend.c:490:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 490:sieve_extend.c ****         register bitvector_t quadmask = { };
 1567              		.loc 1 490 54 view .LVU472
 1568 0866 48C1E908 		shr	rcx, 8	# current_vector,
 1569              	# sieve_extend.c:492:         register counter_t word = wordindex(index) - current_vector_start_wor
 492:sieve_extend.c ****         
 1570              		.loc 1 492 35 view .LVU473
 1571 086a 48C1E806 		shr	rax, 6	# tmp210,
 1572              	# sieve_extend.c:490:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 490:sieve_extend.c ****         register bitvector_t quadmask = { };
 1573              		.loc 1 490 25 view .LVU474
 1574 086e 4C8D2C8D 		lea	r13, 0[0+rcx*4]	# current_vector_start_word,
 1574      00000000 
 1575              	.LVL73:
 491:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 1576              		.loc 1 491 9 is_stmt 1 view .LVU475
 1577              	# sieve_extend.c:491:         register bitvector_t quadmask = { };
 491:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 1578              		.loc 1 491 30 is_stmt 0 view .LVU476
 1579 0876 C5FD7F54 		vmovdqa	YMMWORD PTR 32[rsp], ymm2	# quadmask, tmp209
 1579      2420
 492:sieve_extend.c ****         
 1580              		.loc 1 492 9 is_stmt 1 view .LVU477
 1581              	# sieve_extend.c:492:         register counter_t word = wordindex(index) - current_vector_start_wor
 492:sieve_extend.c ****         
 1582              		.loc 1 492 28 is_stmt 0 view .LVU478
 1583 087c 4C29E8   		sub	rax, r13	# word, current_vector_start_word
 1584              	.LVL74:
 1585              	.L67:
 498:sieve_extend.c ****             index += step;
 1586              		.loc 1 498 13 is_stmt 1 view .LVU479
 1587              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 1588              		.loc 1 498 31 is_stmt 0 view .LVU480
 1589 087f C442C9F7 		shlx	r9, r11, rsi	# tmp212, tmp213, range_start
 1589      CB
 1590              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 1591              		.loc 1 498 28 view .LVU481
GAS LISTING /tmp/ccNeV1of.s 			page 55


 1592 0884 4C094CC4 		or	QWORD PTR 32[rsp+rax*8], r9	# quadmask, tmp212
 1592      20
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1593              		.loc 1 499 13 is_stmt 1 view .LVU482
 1594              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1595              		.loc 1 499 19 is_stmt 0 view .LVU483
 1596 0889 488D4601 		lea	rax, 1[rsi]	# tmp236,
 1597              	.LVL75:
 1598              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1599              		.loc 1 500 20 view .LVU484
 1600 088d 4989C7   		mov	r15, rax	# tmp214, range_start
 1601              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1602              		.loc 1 499 19 view .LVU485
 1603 0890 4889C6   		mov	rsi, rax	# range_start, tmp236
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1604              		.loc 1 500 13 is_stmt 1 view .LVU486
 1605              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1606              		.loc 1 500 20 is_stmt 0 view .LVU487
 1607 0893 49C1EF06 		shr	r15, 6	# tmp214,
 1608              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1609              		.loc 1 500 18 view .LVU488
 1610 0897 4D29EF   		sub	r15, r13	# word, current_vector_start_word
 501:sieve_extend.c ****         
 1611              		.loc 1 501 17 is_stmt 1 view .LVU489
 1612              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 1613              		.loc 1 501 9 is_stmt 0 view .LVU490
 1614 089a 4983FF03 		cmp	r15, 3	# word,
 1615 089e 0F87EC00 		ja	.L208	#,
 1615      0000
 498:sieve_extend.c ****             index += step;
 1616              		.loc 1 498 13 is_stmt 1 view .LVU491
 1617              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1618              		.loc 1 499 19 is_stmt 0 view .LVU492
 1619 08a4 4883C601 		add	rsi, 1	# range_start,
 1620              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 1621              		.loc 1 498 31 view .LVU493
 1622 08a8 C442F9F7 		shlx	r12, r11, rax	# tmp349, tmp213, range_start
 1622      E3
 1623              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1624              		.loc 1 500 20 view .LVU494
 1625 08ad 4989F6   		mov	r14, rsi	# tmp350, range_start
 1626              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 1627              		.loc 1 498 28 view .LVU495
 1628 08b0 4E0964FC 		or	QWORD PTR 32[rsp+r15*8], r12	# quadmask, tmp349
 1628      20
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1629              		.loc 1 499 13 is_stmt 1 view .LVU496
GAS LISTING /tmp/ccNeV1of.s 			page 56


 1630              	.LVL76:
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1631              		.loc 1 500 13 view .LVU497
 1632              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1633              		.loc 1 500 20 is_stmt 0 view .LVU498
 1634 08b5 49C1EE06 		shr	r14, 6	# tmp350,
 1635              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1636              		.loc 1 500 18 view .LVU499
 1637 08b9 4D29EE   		sub	r14, r13	# word, current_vector_start_word
 501:sieve_extend.c ****         
 1638              		.loc 1 501 17 is_stmt 1 view .LVU500
 1639              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 1640              		.loc 1 501 9 is_stmt 0 view .LVU501
 1641 08bc 4983FE03 		cmp	r14, 3	# word,
 1642 08c0 0F87CA00 		ja	.L208	#,
 1642      0000
 498:sieve_extend.c ****             index += step;
 1643              		.loc 1 498 13 is_stmt 1 view .LVU502
 1644              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 1645              		.loc 1 498 31 is_stmt 0 view .LVU503
 1646 08c6 C4C2C9F7 		shlx	rsi, r11, rsi	# tmp352, tmp213, range_start
 1646      F3
 1647              	.LVL77:
 1648              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 1649              		.loc 1 498 28 view .LVU504
 1650 08cb 4A0974F4 		or	QWORD PTR 32[rsp+r14*8], rsi	# quadmask, tmp352
 1650      20
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1651              		.loc 1 499 13 is_stmt 1 view .LVU505
 1652              	.LVL78:
 1653              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1654              		.loc 1 499 19 is_stmt 0 view .LVU506
 1655 08d0 488D7002 		lea	rsi, 2[rax]	# range_start,
 1656              	.LVL79:
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1657              		.loc 1 500 13 is_stmt 1 view .LVU507
 1658              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1659              		.loc 1 500 20 is_stmt 0 view .LVU508
 1660 08d4 4889F2   		mov	rdx, rsi	# tmp353, range_start
 1661 08d7 48C1EA06 		shr	rdx, 6	# tmp353,
 1662              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1663              		.loc 1 500 18 view .LVU509
 1664 08db 4C29EA   		sub	rdx, r13	# word, current_vector_start_word
 501:sieve_extend.c ****         
 1665              		.loc 1 501 17 is_stmt 1 view .LVU510
 1666              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 1667              		.loc 1 501 9 is_stmt 0 view .LVU511
 1668 08de 4883FA03 		cmp	rdx, 3	# word,
GAS LISTING /tmp/ccNeV1of.s 			page 57


 1669 08e2 0F87A800 		ja	.L208	#,
 1669      0000
 498:sieve_extend.c ****             index += step;
 1670              		.loc 1 498 13 is_stmt 1 view .LVU512
 1671              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 1672              		.loc 1 498 31 is_stmt 0 view .LVU513
 1673 08e8 C442C9F7 		shlx	r9, r11, rsi	# tmp355, tmp213, range_start
 1673      CB
 1674              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1675              		.loc 1 499 19 view .LVU514
 1676 08ed 488D7003 		lea	rsi, 3[rax]	# range_start,
 1677              	.LVL80:
 1678              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1679              		.loc 1 500 20 view .LVU515
 1680 08f1 4989F7   		mov	r15, rsi	# tmp356, range_start
 1681              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 1682              		.loc 1 498 28 view .LVU516
 1683 08f4 4C094CD4 		or	QWORD PTR 32[rsp+rdx*8], r9	# quadmask, tmp355
 1683      20
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1684              		.loc 1 499 13 is_stmt 1 view .LVU517
 1685              	.LVL81:
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1686              		.loc 1 500 13 view .LVU518
 1687              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1688              		.loc 1 500 20 is_stmt 0 view .LVU519
 1689 08f9 49C1EF06 		shr	r15, 6	# tmp356,
 1690              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1691              		.loc 1 500 18 view .LVU520
 1692 08fd 4D29EF   		sub	r15, r13	# word, current_vector_start_word
 501:sieve_extend.c ****         
 1693              		.loc 1 501 17 is_stmt 1 view .LVU521
 1694              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 1695              		.loc 1 501 9 is_stmt 0 view .LVU522
 1696 0900 4983FF03 		cmp	r15, 3	# word,
 1697 0904 0F878600 		ja	.L208	#,
 1697      0000
 498:sieve_extend.c ****             index += step;
 1698              		.loc 1 498 13 is_stmt 1 view .LVU523
 1699              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 1700              		.loc 1 498 31 is_stmt 0 view .LVU524
 1701 090a C442C9F7 		shlx	r12, r11, rsi	# tmp358, tmp213, range_start
 1701      E3
 1702              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1703              		.loc 1 499 19 view .LVU525
 1704 090f 488D7004 		lea	rsi, 4[rax]	# range_start,
 1705              	.LVL82:
 1706              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
GAS LISTING /tmp/ccNeV1of.s 			page 58


 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1707              		.loc 1 500 20 view .LVU526
 1708 0913 4989F6   		mov	r14, rsi	# tmp359, range_start
 1709              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 1710              		.loc 1 498 28 view .LVU527
 1711 0916 4E0964FC 		or	QWORD PTR 32[rsp+r15*8], r12	# quadmask, tmp358
 1711      20
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1712              		.loc 1 499 13 is_stmt 1 view .LVU528
 1713              	.LVL83:
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1714              		.loc 1 500 13 view .LVU529
 1715              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1716              		.loc 1 500 20 is_stmt 0 view .LVU530
 1717 091b 49C1EE06 		shr	r14, 6	# tmp359,
 1718              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1719              		.loc 1 500 18 view .LVU531
 1720 091f 4D29EE   		sub	r14, r13	# word, current_vector_start_word
 501:sieve_extend.c ****         
 1721              		.loc 1 501 17 is_stmt 1 view .LVU532
 1722              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 1723              		.loc 1 501 9 is_stmt 0 view .LVU533
 1724 0922 4983FE03 		cmp	r14, 3	# word,
 1725 0926 7768     		ja	.L208	#,
 498:sieve_extend.c ****             index += step;
 1726              		.loc 1 498 13 is_stmt 1 view .LVU534
 1727              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 1728              		.loc 1 498 31 is_stmt 0 view .LVU535
 1729 0928 C4C2C9F7 		shlx	rsi, r11, rsi	# tmp361, tmp213, range_start
 1729      F3
 1730              	.LVL84:
 1731              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 1732              		.loc 1 498 28 view .LVU536
 1733 092d 4A0974F4 		or	QWORD PTR 32[rsp+r14*8], rsi	# quadmask, tmp361
 1733      20
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1734              		.loc 1 499 13 is_stmt 1 view .LVU537
 1735              	.LVL85:
 1736              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1737              		.loc 1 499 19 is_stmt 0 view .LVU538
 1738 0932 488D7005 		lea	rsi, 5[rax]	# range_start,
 1739              	.LVL86:
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1740              		.loc 1 500 13 is_stmt 1 view .LVU539
 1741              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1742              		.loc 1 500 20 is_stmt 0 view .LVU540
 1743 0936 4889F2   		mov	rdx, rsi	# tmp362, range_start
 1744 0939 48C1EA06 		shr	rdx, 6	# tmp362,
 1745              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
GAS LISTING /tmp/ccNeV1of.s 			page 59


 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1746              		.loc 1 500 18 view .LVU541
 1747 093d 4C29EA   		sub	rdx, r13	# word, current_vector_start_word
 501:sieve_extend.c ****         
 1748              		.loc 1 501 17 is_stmt 1 view .LVU542
 1749              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 1750              		.loc 1 501 9 is_stmt 0 view .LVU543
 1751 0940 4883FA03 		cmp	rdx, 3	# word,
 1752 0944 774A     		ja	.L208	#,
 498:sieve_extend.c ****             index += step;
 1753              		.loc 1 498 13 is_stmt 1 view .LVU544
 1754              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 1755              		.loc 1 498 31 is_stmt 0 view .LVU545
 1756 0946 C442C9F7 		shlx	r9, r11, rsi	# tmp364, tmp213, range_start
 1756      CB
 1757              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1758              		.loc 1 499 19 view .LVU546
 1759 094b 488D7006 		lea	rsi, 6[rax]	# range_start,
 1760              	.LVL87:
 1761              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1762              		.loc 1 500 20 view .LVU547
 1763 094f 4989F7   		mov	r15, rsi	# tmp365, range_start
 1764              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 1765              		.loc 1 498 28 view .LVU548
 1766 0952 4C094CD4 		or	QWORD PTR 32[rsp+rdx*8], r9	# quadmask, tmp364
 1766      20
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1767              		.loc 1 499 13 is_stmt 1 view .LVU549
 1768              	.LVL88:
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1769              		.loc 1 500 13 view .LVU550
 1770              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1771              		.loc 1 500 20 is_stmt 0 view .LVU551
 1772 0957 49C1EF06 		shr	r15, 6	# tmp365,
 1773              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1774              		.loc 1 500 18 view .LVU552
 1775 095b 4D29EF   		sub	r15, r13	# word, current_vector_start_word
 501:sieve_extend.c ****         
 1776              		.loc 1 501 17 is_stmt 1 view .LVU553
 1777              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 1778              		.loc 1 501 9 is_stmt 0 view .LVU554
 1779 095e 4983FF03 		cmp	r15, 3	# word,
 1780 0962 772C     		ja	.L208	#,
 498:sieve_extend.c ****             index += step;
 1781              		.loc 1 498 13 is_stmt 1 view .LVU555
 1782              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 1783              		.loc 1 498 31 is_stmt 0 view .LVU556
 1784 0964 C442C9F7 		shlx	r12, r11, rsi	# tmp367, tmp213, range_start
GAS LISTING /tmp/ccNeV1of.s 			page 60


 1784      E3
 1785              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1786              		.loc 1 499 19 view .LVU557
 1787 0969 488D7007 		lea	rsi, 7[rax]	# range_start,
 1788              	.LVL89:
 1789              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1790              		.loc 1 500 20 view .LVU558
 1791 096d 4889F0   		mov	rax, rsi	# tmp368, range_start
 1792              	.LVL90:
 1793              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 1794              		.loc 1 498 28 view .LVU559
 1795 0970 4E0964FC 		or	QWORD PTR 32[rsp+r15*8], r12	# quadmask, tmp367
 1795      20
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 1796              		.loc 1 499 13 is_stmt 1 view .LVU560
 1797              	.LVL91:
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1798              		.loc 1 500 13 view .LVU561
 1799              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1800              		.loc 1 500 20 is_stmt 0 view .LVU562
 1801 0975 48C1E806 		shr	rax, 6	# tmp368,
 1802              	.LVL92:
 1803              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 1804              		.loc 1 500 18 view .LVU563
 1805 0979 4C29E8   		sub	rax, r13	# word, current_vector_start_word
 1806              	.LVL93:
 501:sieve_extend.c ****         
 1807              		.loc 1 501 17 is_stmt 1 view .LVU564
 1808              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 1809              		.loc 1 501 9 is_stmt 0 view .LVU565
 1810 097c 4883F803 		cmp	rax, 3	# word,
 1811 0980 0F86F9FE 		jbe	.L67	#,
 1811      FFFF
 1812              	.LVL94:
 1813 0986 662E0F1F 		.p2align 4
 1813      84000000 
 1813      0000
 1814              		.p2align 3
 1815              	.L208:
 504:sieve_extend.c ****         // const counter_t range_stop_vector = vectorindex(range_stop);
 1816              		.loc 1 504 9 is_stmt 1 view .LVU566
 507:sieve_extend.c ****     }
 1817              		.loc 1 507 9 view .LVU567
 1818 0990 C5FD6F44 		vmovdqa	ymm0, YMMWORD PTR 32[rsp]	# quadmask.56_166, quadmask
 1818      2420
 1819              	.LVL95:
 1820              	.LBB346:
 1821              	.LBI338:
 431:sieve_extend.c **** 
 1822              		.loc 1 431 20 view .LVU568
 1823              	.LBB344:
GAS LISTING /tmp/ccNeV1of.s 			page 61


 434:sieve_extend.c ****     register const counter_t range_stop_vector = vectorindex(range_stop);
 1824              		.loc 1 434 5 view .LVU569
 435:sieve_extend.c ****     register const counter_t step_2 = step * 2;
 1825              		.loc 1 435 5 view .LVU570
 436:sieve_extend.c ****     register const counter_t step_3 = step * 3;
 1826              		.loc 1 436 5 view .LVU571
 437:sieve_extend.c ****     register const counter_t step_4 = step * 4;
 1827              		.loc 1 437 5 view .LVU572
 438:sieve_extend.c **** 
 1828              		.loc 1 438 5 view .LVU573
 440:sieve_extend.c ****         register const counter_t loop_stop_vector = (range_stop_vector > step_4) ? (range_stop_vect
 1829              		.loc 1 440 5 view .LVU574
 1830              	# sieve_extend.c:440:     if (current_vector+step_4 <= range_stop_vector) {
 440:sieve_extend.c ****         register const counter_t loop_stop_vector = (range_stop_vector > step_4) ? (range_stop_vect
 1831              		.loc 1 440 23 is_stmt 0 view .LVU575
 1832 0996 488D5104 		lea	rdx, 4[rcx]	# current_vector,
 1833              	# sieve_extend.c:440:     if (current_vector+step_4 <= range_stop_vector) {
 440:sieve_extend.c ****         register const counter_t loop_stop_vector = (range_stop_vector > step_4) ? (range_stop_vect
 1834              		.loc 1 440 8 view .LVU576
 1835 099a 4939D0   		cmp	r8, rdx	# range_stop_vector, current_vector
 1836 099d 0F820D02 		jb	.L68	#,
 1836      0000
 1837              	.LBB342:
 441:sieve_extend.c ****         //#pragma GCC unroll 16
 1838              		.loc 1 441 9 is_stmt 1 view .LVU577
 1839              	.LVL96:
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 1840              		.loc 1 444 15 view .LVU578
 1841              	# sieve_extend.c:444:         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 1842              		.loc 1 444 9 is_stmt 0 view .LVU579
 1843 09a3 4839CB   		cmp	rbx, rcx	# iftmp.57_164, current_vector
 1844 09a6 0F820402 		jb	.L68	#,
 1844      0000
 1845 09ac 4989D9   		mov	r9, rbx	# tmp231, iftmp.57_164
 1846 09af 4989CD   		mov	r13, rcx	# current_vector, current_vector
 1847              	.LVL97:
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 1848              		.loc 1 444 9 view .LVU580
 1849 09b2 49C1E505 		sal	r13, 5	# current_vector,
 1850 09b6 4929D1   		sub	r9, rdx	# tmp231, current_vector
 1851 09b9 4983C104 		add	r9, 4	# tmp232,
 1852 09bd 4901FD   		add	r13, rdi	# ivtmp.192, bitarray_word
 1853 09c0 49C1E902 		shr	r9, 2	# tmp230,
 1854 09c4 4183E103 		and	r9d, 3	# tmp230,
 1855 09c8 0F84A101 		je	.L69	#,
 1855      0000
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 1856              		.loc 1 445 13 is_stmt 1 view .LVU581
 1857              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 1858              		.loc 1 445 52 is_stmt 0 view .LVU582
 1859 09ce C4417DEB 		vpor	ymm12, ymm0, YMMWORD PTR 0[r13]	# tmp335, quadmask.56_166, MEM[base: _102, offset: 0B]
 1859      6500
 1860              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 1861              		.loc 1 446 52 view .LVU583
GAS LISTING /tmp/ccNeV1of.s 			page 62


 1862 09d4 C4417DEB 		vpor	ymm13, ymm0, YMMWORD PTR 32[r13]	# tmp336, quadmask.56_166, MEM[base: _102, offset: 32B]
 1862      6D20
 1863              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 1864              		.loc 1 447 52 view .LVU584
 1865 09da C4417DEB 		vpor	ymm14, ymm0, YMMWORD PTR 64[r13]	# tmp337, quadmask.56_166, MEM[base: _102, offset: 64B]
 1865      7540
 1866              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
 448:sieve_extend.c ****         }
 1867              		.loc 1 448 52 view .LVU585
 1868 09e0 C4417DEB 		vpor	ymm15, ymm0, YMMWORD PTR 96[r13]	# tmp338, quadmask.56_166, MEM[base: _102, offset: 96B]
 1868      7D60
 1869              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 1870              		.loc 1 445 52 view .LVU586
 1871 09e6 C4417D7F 		vmovdqa	YMMWORD PTR 0[r13], ymm12	# MEM[base: _102, offset: 0B], tmp335
 1871      6500
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 1872              		.loc 1 446 13 is_stmt 1 view .LVU587
 1873 09ec 4983ED80 		sub	r13, -128	# ivtmp.192,
 1874              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 1875              		.loc 1 446 52 is_stmt 0 view .LVU588
 1876 09f0 C4417D7F 		vmovdqa	YMMWORD PTR -96[r13], ymm13	# MEM[base: _102, offset: 32B], tmp336
 1876      6DA0
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 1877              		.loc 1 447 13 is_stmt 1 view .LVU589
 1878              	# sieve_extend.c:444:         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 1879              		.loc 1 444 66 is_stmt 0 view .LVU590
 1880 09f6 4889D1   		mov	rcx, rdx	# current_vector, current_vector
 1881              	.LVL98:
 1882              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 1883              		.loc 1 447 52 view .LVU591
 1884 09f9 C4417D7F 		vmovdqa	YMMWORD PTR -64[r13], ymm14	# MEM[base: _102, offset: 64B], tmp337
 1884      75C0
 448:sieve_extend.c ****         }
 1885              		.loc 1 448 13 is_stmt 1 view .LVU592
 1886              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
 448:sieve_extend.c ****         }
 1887              		.loc 1 448 52 is_stmt 0 view .LVU593
 1888 09ff C4417D7F 		vmovdqa	YMMWORD PTR -32[r13], ymm15	# MEM[base: _102, offset: 96B], tmp338
 1888      7DE0
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 1889              		.loc 1 444 51 is_stmt 1 view .LVU594
 1890              	.LVL99:
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 1891              		.loc 1 444 15 view .LVU595
 1892              	# sieve_extend.c:444:         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 1893              		.loc 1 444 9 is_stmt 0 view .LVU596
 1894 0a05 4839DA   		cmp	rdx, rbx	# current_vector, iftmp.57_164
 1895 0a08 0F87A201 		ja	.L68	#,
 1895      0000
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 1896              		.loc 1 444 9 view .LVU597
GAS LISTING /tmp/ccNeV1of.s 			page 63


 1897 0a0e 4983F901 		cmp	r9, 1	# tmp233,
 1898 0a12 488D5204 		lea	rdx, 4[rdx]	# current_vector,
 1899              	.LVL100:
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 1900              		.loc 1 444 9 view .LVU598
 1901 0a16 0F845301 		je	.L69	#,
 1901      0000
 1902 0a1c 4983F902 		cmp	r9, 2	# tmp233,
 1903 0a20 7438     		je	.L172	#,
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 1904              		.loc 1 445 13 is_stmt 1 view .LVU599
 1905              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 1906              		.loc 1 445 52 is_stmt 0 view .LVU600
 1907 0a22 C4C17DEB 		vpor	ymm1, ymm0, YMMWORD PTR 0[r13]	# tmp339, quadmask.56_166, MEM[base: _102, offset: 0B]
 1907      4D00
 1908              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 1909              		.loc 1 446 52 view .LVU601
 1910 0a28 C4C17DEB 		vpor	ymm3, ymm0, YMMWORD PTR 32[r13]	# tmp340, quadmask.56_166, MEM[base: _102, offset: 32B]
 1910      5D20
 1911              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 1912              		.loc 1 447 52 view .LVU602
 1913 0a2e C4C17DEB 		vpor	ymm4, ymm0, YMMWORD PTR 64[r13]	# tmp341, quadmask.56_166, MEM[base: _102, offset: 64B]
 1913      6540
 1914              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
 448:sieve_extend.c ****         }
 1915              		.loc 1 448 52 view .LVU603
 1916 0a34 C4C17DEB 		vpor	ymm5, ymm0, YMMWORD PTR 96[r13]	# tmp342, quadmask.56_166, MEM[base: _102, offset: 96B]
 1916      6D60
 1917              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 1918              		.loc 1 445 52 view .LVU604
 1919 0a3a C4C17D7F 		vmovdqa	YMMWORD PTR 0[r13], ymm1	# MEM[base: _102, offset: 0B], tmp339
 1919      4D00
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 1920              		.loc 1 446 13 is_stmt 1 view .LVU605
 1921 0a40 488D5108 		lea	rdx, 8[rcx]	# current_vector,
 1922              	.LVL101:
 1923              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 1924              		.loc 1 446 52 is_stmt 0 view .LVU606
 1925 0a44 C4C17D7F 		vmovdqa	YMMWORD PTR 32[r13], ymm3	# MEM[base: _102, offset: 32B], tmp340
 1925      5D20
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 1926              		.loc 1 447 13 is_stmt 1 view .LVU607
 1927 0a4a 4983ED80 		sub	r13, -128	# ivtmp.192,
 1928              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 1929              		.loc 1 447 52 is_stmt 0 view .LVU608
 1930 0a4e C4C17D7F 		vmovdqa	YMMWORD PTR -64[r13], ymm4	# MEM[base: _102, offset: 64B], tmp341
 1930      65C0
 448:sieve_extend.c ****         }
 1931              		.loc 1 448 13 is_stmt 1 view .LVU609
 1932              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
 448:sieve_extend.c ****         }
GAS LISTING /tmp/ccNeV1of.s 			page 64


 1933              		.loc 1 448 52 is_stmt 0 view .LVU610
 1934 0a54 C4C17D7F 		vmovdqa	YMMWORD PTR -32[r13], ymm5	# MEM[base: _102, offset: 96B], tmp342
 1934      6DE0
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 1935              		.loc 1 444 51 is_stmt 1 view .LVU611
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 1936              		.loc 1 444 15 view .LVU612
 1937              	.LVL102:
 1938              	.L172:
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 1939              		.loc 1 445 13 view .LVU613
 1940              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 1941              		.loc 1 445 52 is_stmt 0 view .LVU614
 1942 0a5a C4C17DEB 		vpor	ymm6, ymm0, YMMWORD PTR 0[r13]	# tmp344, quadmask.56_166, MEM[base: _102, offset: 0B]
 1942      7500
 1943              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 1944              		.loc 1 446 52 view .LVU615
 1945 0a60 C4C17DEB 		vpor	ymm7, ymm0, YMMWORD PTR 32[r13]	# tmp345, quadmask.56_166, MEM[base: _102, offset: 32B]
 1945      7D20
 1946              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 1947              		.loc 1 447 52 view .LVU616
 1948 0a66 C4417DEB 		vpor	ymm8, ymm0, YMMWORD PTR 64[r13]	# tmp346, quadmask.56_166, MEM[base: _102, offset: 64B]
 1948      4540
 1949              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
 448:sieve_extend.c ****         }
 1950              		.loc 1 448 52 view .LVU617
 1951 0a6c C4417DEB 		vpor	ymm9, ymm0, YMMWORD PTR 96[r13]	# tmp347, quadmask.56_166, MEM[base: _102, offset: 96B]
 1951      4D60
 1952              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 1953              		.loc 1 445 52 view .LVU618
 1954 0a72 C4C17D7F 		vmovdqa	YMMWORD PTR 0[r13], ymm6	# MEM[base: _102, offset: 0B], tmp344
 1954      7500
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 1955              		.loc 1 446 13 is_stmt 1 view .LVU619
 1956 0a78 488D5204 		lea	rdx, 4[rdx]	# current_vector,
 1957              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 1958              		.loc 1 446 52 is_stmt 0 view .LVU620
 1959 0a7c C4C17D7F 		vmovdqa	YMMWORD PTR 32[r13], ymm7	# MEM[base: _102, offset: 32B], tmp345
 1959      7D20
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 1960              		.loc 1 447 13 is_stmt 1 view .LVU621
 1961 0a82 4983ED80 		sub	r13, -128	# ivtmp.192,
 1962              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 1963              		.loc 1 447 52 is_stmt 0 view .LVU622
 1964 0a86 C4417D7F 		vmovdqa	YMMWORD PTR -64[r13], ymm8	# MEM[base: _102, offset: 64B], tmp346
 1964      45C0
 448:sieve_extend.c ****         }
 1965              		.loc 1 448 13 is_stmt 1 view .LVU623
 1966              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
 448:sieve_extend.c ****         }
 1967              		.loc 1 448 52 is_stmt 0 view .LVU624
GAS LISTING /tmp/ccNeV1of.s 			page 65


 1968 0a8c C4417D7F 		vmovdqa	YMMWORD PTR -32[r13], ymm9	# MEM[base: _102, offset: 96B], tmp347
 1968      4DE0
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 1969              		.loc 1 444 51 is_stmt 1 view .LVU625
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 1970              		.loc 1 444 15 view .LVU626
 1971 0a92 E9D80000 		jmp	.L69	#
 1971      00
 1972              	.LVL103:
 1973              		.p2align 4,,7
 1974 0a97 90       		.p2align 3
 1975              	.L236:
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 1976              		.loc 1 445 13 view .LVU627
 1977              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 1978              		.loc 1 445 52 is_stmt 0 view .LVU628
 1979 0a98 C4C17DEB 		vpor	ymm1, ymm0, YMMWORD PTR 128[r13]	# tmp251, quadmask.56_166, MEM[base: _102, offset: 0B]
 1979      8D800000 
 1979      00
 1980              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 1981              		.loc 1 446 52 view .LVU629
 1982 0aa1 C4C17DEB 		vpor	ymm3, ymm0, YMMWORD PTR 160[r13]	# tmp252, quadmask.56_166, MEM[base: _102, offset: 32B]
 1982      9DA00000 
 1982      00
 1983              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 1984              		.loc 1 447 52 view .LVU630
 1985 0aaa C4C17DEB 		vpor	ymm4, ymm0, YMMWORD PTR 192[r13]	# tmp253, quadmask.56_166, MEM[base: _102, offset: 64B]
 1985      A5C00000 
 1985      00
 1986              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
 448:sieve_extend.c ****         }
 1987              		.loc 1 448 52 view .LVU631
 1988 0ab3 C4C17DEB 		vpor	ymm5, ymm0, YMMWORD PTR 224[r13]	# tmp254, quadmask.56_166, MEM[base: _102, offset: 96B]
 1988      ADE00000 
 1988      00
 1989              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 1990              		.loc 1 445 52 view .LVU632
 1991 0abc C4C17DEB 		vpor	ymm6, ymm0, YMMWORD PTR 256[r13]	# tmp258, quadmask.56_166, MEM[base: _102, offset: 0B]
 1991      B5000100 
 1991      00
 1992              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 1993              		.loc 1 446 52 view .LVU633
 1994 0ac5 C4C17DEB 		vpor	ymm7, ymm0, YMMWORD PTR 288[r13]	# tmp259, quadmask.56_166, MEM[base: _102, offset: 32B]
 1994      BD200100 
 1994      00
 1995              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 1996              		.loc 1 447 52 view .LVU634
 1997 0ace C4417DEB 		vpor	ymm8, ymm0, YMMWORD PTR 320[r13]	# tmp260, quadmask.56_166, MEM[base: _102, offset: 64B]
 1997      85400100 
 1997      00
 1998              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
GAS LISTING /tmp/ccNeV1of.s 			page 66


 448:sieve_extend.c ****         }
 1999              		.loc 1 448 52 view .LVU635
 2000 0ad7 C4417DEB 		vpor	ymm9, ymm0, YMMWORD PTR 352[r13]	# tmp261, quadmask.56_166, MEM[base: _102, offset: 96B]
 2000      8D600100 
 2000      00
 2001              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2002              		.loc 1 445 52 view .LVU636
 2003 0ae0 C4417DEB 		vpor	ymm10, ymm0, YMMWORD PTR 384[r13]	# tmp265, quadmask.56_166, MEM[base: _102, offset: 0B]
 2003      95800100 
 2003      00
 2004              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2005              		.loc 1 446 52 view .LVU637
 2006 0ae9 C4417DEB 		vpor	ymm11, ymm0, YMMWORD PTR 416[r13]	# tmp266, quadmask.56_166, MEM[base: _102, offset: 32B]
 2006      9DA00100 
 2006      00
 2007              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2008              		.loc 1 447 52 view .LVU638
 2009 0af2 C4417DEB 		vpor	ymm12, ymm0, YMMWORD PTR 448[r13]	# tmp267, quadmask.56_166, MEM[base: _102, offset: 64B]
 2009      A5C00100 
 2009      00
 2010              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
 448:sieve_extend.c ****         }
 2011              		.loc 1 448 52 view .LVU639
 2012 0afb C4417DEB 		vpor	ymm13, ymm0, YMMWORD PTR 480[r13]	# tmp268, quadmask.56_166, MEM[base: _102, offset: 96B]
 2012      ADE00100 
 2012      00
 2013              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2014              		.loc 1 445 52 view .LVU640
 2015 0b04 C4C17D7F 		vmovdqa	YMMWORD PTR 128[r13], ymm1	# MEM[base: _102, offset: 0B], tmp251
 2015      8D800000 
 2015      00
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2016              		.loc 1 446 13 is_stmt 1 view .LVU641
 2017 0b0d 488D5210 		lea	rdx, 16[rdx]	# current_vector,
 2018              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2019              		.loc 1 446 52 is_stmt 0 view .LVU642
 2020 0b11 C4C17D7F 		vmovdqa	YMMWORD PTR 160[r13], ymm3	# MEM[base: _102, offset: 32B], tmp252
 2020      9DA00000 
 2020      00
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2021              		.loc 1 447 13 is_stmt 1 view .LVU643
 2022 0b1a 4981C500 		add	r13, 512	# ivtmp.192,
 2022      020000
 2023              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2024              		.loc 1 447 52 is_stmt 0 view .LVU644
 2025 0b21 C4C17D7F 		vmovdqa	YMMWORD PTR -320[r13], ymm4	# MEM[base: _102, offset: 64B], tmp253
 2025      A5C0FEFF 
 2025      FF
 448:sieve_extend.c ****         }
 2026              		.loc 1 448 13 is_stmt 1 view .LVU645
 2027              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
GAS LISTING /tmp/ccNeV1of.s 			page 67


 448:sieve_extend.c ****         }
 2028              		.loc 1 448 52 is_stmt 0 view .LVU646
 2029 0b2a C4C17D7F 		vmovdqa	YMMWORD PTR -288[r13], ymm5	# MEM[base: _102, offset: 96B], tmp254
 2029      ADE0FEFF 
 2029      FF
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2030              		.loc 1 444 51 is_stmt 1 view .LVU647
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2031              		.loc 1 444 15 view .LVU648
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2032              		.loc 1 445 13 view .LVU649
 2033              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2034              		.loc 1 445 52 is_stmt 0 view .LVU650
 2035 0b33 C4C17D7F 		vmovdqa	YMMWORD PTR -256[r13], ymm6	# MEM[base: _102, offset: 0B], tmp258
 2035      B500FFFF 
 2035      FF
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2036              		.loc 1 446 13 is_stmt 1 view .LVU651
 2037              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2038              		.loc 1 446 52 is_stmt 0 view .LVU652
 2039 0b3c C4C17D7F 		vmovdqa	YMMWORD PTR -224[r13], ymm7	# MEM[base: _102, offset: 32B], tmp259
 2039      BD20FFFF 
 2039      FF
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2040              		.loc 1 447 13 is_stmt 1 view .LVU653
 2041              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2042              		.loc 1 447 52 is_stmt 0 view .LVU654
 2043 0b45 C4417D7F 		vmovdqa	YMMWORD PTR -192[r13], ymm8	# MEM[base: _102, offset: 64B], tmp260
 2043      8540FFFF 
 2043      FF
 448:sieve_extend.c ****         }
 2044              		.loc 1 448 13 is_stmt 1 view .LVU655
 2045              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
 448:sieve_extend.c ****         }
 2046              		.loc 1 448 52 is_stmt 0 view .LVU656
 2047 0b4e C4417D7F 		vmovdqa	YMMWORD PTR -160[r13], ymm9	# MEM[base: _102, offset: 96B], tmp261
 2047      8D60FFFF 
 2047      FF
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2048              		.loc 1 444 51 is_stmt 1 view .LVU657
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2049              		.loc 1 444 15 view .LVU658
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2050              		.loc 1 445 13 view .LVU659
 2051              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2052              		.loc 1 445 52 is_stmt 0 view .LVU660
 2053 0b57 C4417D7F 		vmovdqa	YMMWORD PTR -128[r13], ymm10	# MEM[base: _102, offset: 0B], tmp265
 2053      5580
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2054              		.loc 1 446 13 is_stmt 1 view .LVU661
 2055              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2056              		.loc 1 446 52 is_stmt 0 view .LVU662
GAS LISTING /tmp/ccNeV1of.s 			page 68


 2057 0b5d C4417D7F 		vmovdqa	YMMWORD PTR -96[r13], ymm11	# MEM[base: _102, offset: 32B], tmp266
 2057      5DA0
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2058              		.loc 1 447 13 is_stmt 1 view .LVU663
 2059              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2060              		.loc 1 447 52 is_stmt 0 view .LVU664
 2061 0b63 C4417D7F 		vmovdqa	YMMWORD PTR -64[r13], ymm12	# MEM[base: _102, offset: 64B], tmp267
 2061      65C0
 448:sieve_extend.c ****         }
 2062              		.loc 1 448 13 is_stmt 1 view .LVU665
 2063              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
 448:sieve_extend.c ****         }
 2064              		.loc 1 448 52 is_stmt 0 view .LVU666
 2065 0b69 C4417D7F 		vmovdqa	YMMWORD PTR -32[r13], ymm13	# MEM[base: _102, offset: 96B], tmp268
 2065      6DE0
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2066              		.loc 1 444 51 is_stmt 1 view .LVU667
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2067              		.loc 1 444 15 view .LVU668
 2068              	.LVL104:
 2069              	.L69:
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2070              		.loc 1 445 13 view .LVU669
 2071              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2072              		.loc 1 445 52 is_stmt 0 view .LVU670
 2073 0b6f C4417DEB 		vpor	ymm10, ymm0, YMMWORD PTR 0[r13]	# tmp217, quadmask.56_166, MEM[base: _102, offset: 0B]
 2073      5500
 2074              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2075              		.loc 1 446 52 view .LVU671
 2076 0b75 C4417DEB 		vpor	ymm11, ymm0, YMMWORD PTR 32[r13]	# tmp218, quadmask.56_166, MEM[base: _102, offset: 32B]
 2076      5D20
 2077              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2078              		.loc 1 447 52 view .LVU672
 2079 0b7b C4417DEB 		vpor	ymm12, ymm0, YMMWORD PTR 64[r13]	# tmp219, quadmask.56_166, MEM[base: _102, offset: 64B]
 2079      6540
 2080              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
 448:sieve_extend.c ****         }
 2081              		.loc 1 448 52 view .LVU673
 2082 0b81 C4417DEB 		vpor	ymm13, ymm0, YMMWORD PTR 96[r13]	# tmp220, quadmask.56_166, MEM[base: _102, offset: 96B]
 2082      6D60
 2083              	# sieve_extend.c:444:         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2084              		.loc 1 444 9 view .LVU674
 2085 0b87 4839DA   		cmp	rdx, rbx	# current_vector, iftmp.57_164
 2086              	# sieve_extend.c:444:         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2087              		.loc 1 444 66 view .LVU675
 2088 0b8a 4889D1   		mov	rcx, rdx	# current_vector, current_vector
 2089              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2090              		.loc 1 445 52 view .LVU676
 2091 0b8d C4417D7F 		vmovdqa	YMMWORD PTR 0[r13], ymm10	# MEM[base: _102, offset: 0B], tmp217
 2091      5500
GAS LISTING /tmp/ccNeV1of.s 			page 69


 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2092              		.loc 1 446 13 is_stmt 1 view .LVU677
 2093              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2094              		.loc 1 446 52 is_stmt 0 view .LVU678
 2095 0b93 C4417D7F 		vmovdqa	YMMWORD PTR 32[r13], ymm11	# MEM[base: _102, offset: 32B], tmp218
 2095      5D20
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2096              		.loc 1 447 13 is_stmt 1 view .LVU679
 2097              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2098              		.loc 1 447 52 is_stmt 0 view .LVU680
 2099 0b99 C4417D7F 		vmovdqa	YMMWORD PTR 64[r13], ymm12	# MEM[base: _102, offset: 64B], tmp219
 2099      6540
 448:sieve_extend.c ****         }
 2100              		.loc 1 448 13 is_stmt 1 view .LVU681
 2101              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
 448:sieve_extend.c ****         }
 2102              		.loc 1 448 52 is_stmt 0 view .LVU682
 2103 0b9f C4417D7F 		vmovdqa	YMMWORD PTR 96[r13], ymm13	# MEM[base: _102, offset: 96B], tmp220
 2103      6D60
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2104              		.loc 1 444 51 is_stmt 1 view .LVU683
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2105              		.loc 1 444 15 view .LVU684
 2106              	# sieve_extend.c:444:         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2107              		.loc 1 444 9 is_stmt 0 view .LVU685
 2108 0ba5 0F86EDFE 		jbe	.L236	#,
 2108      FFFF
 2109              	.LVL105:
 2110 0bab 0F1F4400 		.p2align 4
 2110      00
 2111              		.p2align 3
 2112              	.L68:
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2113              		.loc 1 444 9 view .LVU686
 2114              	.LBE342:
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2115              		.loc 1 454 11 is_stmt 1 view .LVU687
 2116              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2117              		.loc 1 454 5 is_stmt 0 view .LVU688
 2118 0bb0 4939C8   		cmp	r8, rcx	# range_stop_vector, current_vector
 2119 0bb3 0F824F01 		jb	.L70	#,
 2119      0000
 2120 0bb9 4989CF   		mov	r15, rcx	# tmp221, current_vector
 2121 0bbc 4D89C4   		mov	r12, r8	# tmp226, range_stop_vector
 2122 0bbf 49C1E705 		sal	r15, 5	# tmp221,
 2123 0bc3 4929CC   		sub	r12, rcx	# tmp226, current_vector
 2124              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2125              		.loc 1 454 63 view .LVU689
 2126 0bc6 4C8D6901 		lea	r13, 1[rcx]	# current_vector,
 2127 0bca 4901FF   		add	r15, rdi	# ivtmp.202, bitarray_word
 2128 0bcd 4183E407 		and	r12d, 7	# tmp227,
 455:sieve_extend.c ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 70


 2129              		.loc 1 455 9 is_stmt 1 view .LVU690
 2130              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2131              		.loc 1 455 41 is_stmt 0 view .LVU691
 2132 0bd1 C4417DEB 		vpor	ymm14, ymm0, YMMWORD PTR [r15]	# tmp222, quadmask.56_166, MEM[base: _177, offset: 0B]
 2132      37
 2133              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2134              		.loc 1 454 5 view .LVU692
 2135 0bd6 4D39E8   		cmp	r8, r13	# range_stop_vector, current_vector
 2136 0bd9 498D4720 		lea	rax, 32[r15]	# ivtmp.202,
 2137              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2138              		.loc 1 455 41 view .LVU693
 2139 0bdd C4417D7F 		vmovdqa	YMMWORD PTR [r15], ymm14	# MEM[base: _177, offset: 0B], tmp222
 2139      37
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2140              		.loc 1 454 48 is_stmt 1 view .LVU694
 2141              	.LVL106:
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2142              		.loc 1 454 11 view .LVU695
 2143              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2144              		.loc 1 454 5 is_stmt 0 view .LVU696
 2145 0be2 0F822001 		jb	.L70	#,
 2145      0000
 2146 0be8 4D85E4   		test	r12, r12	# tmp227
 2147 0beb 0F84A100 		je	.L71	#,
 2147      0000
 2148 0bf1 4983FC01 		cmp	r12, 1	# tmp227,
 2149 0bf5 0F848200 		je	.L166	#,
 2149      0000
 2150 0bfb 4983FC02 		cmp	r12, 2	# tmp227,
 2151 0bff 746C     		je	.L167	#,
 2152 0c01 4983FC03 		cmp	r12, 3	# tmp227,
 2153 0c05 7456     		je	.L168	#,
 2154 0c07 4983FC04 		cmp	r12, 4	# tmp227,
 2155 0c0b 7440     		je	.L169	#,
 2156 0c0d 4983FC05 		cmp	r12, 5	# tmp227,
 2157 0c11 742A     		je	.L170	#,
 2158 0c13 4983FC06 		cmp	r12, 6	# tmp227,
 2159 0c17 7414     		je	.L171	#,
 455:sieve_extend.c ****     }
 2160              		.loc 1 455 9 is_stmt 1 view .LVU697
 2161              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2162              		.loc 1 455 41 is_stmt 0 view .LVU698
 2163 0c19 C4417DEB 		vpor	ymm15, ymm0, YMMWORD PTR 32[r15]	# tmp328, quadmask.56_166, MEM[base: _177, offset: 0B]
 2163      7F20
 2164              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2165              		.loc 1 454 63 view .LVU699
 2166 0c1f 4C8D6902 		lea	r13, 2[rcx]	# current_vector,
 2167              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2168              		.loc 1 455 41 view .LVU700
 2169 0c23 C4417D7F 		vmovdqa	YMMWORD PTR 32[r15], ymm15	# MEM[base: _177, offset: 0B], tmp328
GAS LISTING /tmp/ccNeV1of.s 			page 71


 2169      7F20
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2170              		.loc 1 454 48 is_stmt 1 view .LVU701
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2171              		.loc 1 454 11 view .LVU702
 2172 0c29 498D4740 		lea	rax, 64[r15]	# ivtmp.202,
 2173              	.L171:
 455:sieve_extend.c ****     }
 2174              		.loc 1 455 9 view .LVU703
 2175              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2176              		.loc 1 455 41 is_stmt 0 view .LVU704
 2177 0c2d C5FDEB08 		vpor	ymm1, ymm0, YMMWORD PTR [rax]	# tmp329, quadmask.56_166, MEM[base: _177, offset: 0B]
 2178              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2179              		.loc 1 454 63 view .LVU705
 2180 0c31 4983C501 		add	r13, 1	# current_vector,
 2181              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2182              		.loc 1 455 41 view .LVU706
 2183 0c35 C5FD7F08 		vmovdqa	YMMWORD PTR [rax], ymm1	# MEM[base: _177, offset: 0B], tmp329
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2184              		.loc 1 454 48 is_stmt 1 view .LVU707
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2185              		.loc 1 454 11 view .LVU708
 2186 0c39 4883C020 		add	rax, 32	# ivtmp.202,
 2187              	.LVL107:
 2188              	.L170:
 455:sieve_extend.c ****     }
 2189              		.loc 1 455 9 view .LVU709
 2190              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2191              		.loc 1 455 41 is_stmt 0 view .LVU710
 2192 0c3d C5FDEB18 		vpor	ymm3, ymm0, YMMWORD PTR [rax]	# tmp330, quadmask.56_166, MEM[base: _177, offset: 0B]
 2193              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2194              		.loc 1 454 63 view .LVU711
 2195 0c41 4983C501 		add	r13, 1	# current_vector,
 2196              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2197              		.loc 1 455 41 view .LVU712
 2198 0c45 C5FD7F18 		vmovdqa	YMMWORD PTR [rax], ymm3	# MEM[base: _177, offset: 0B], tmp330
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2199              		.loc 1 454 48 is_stmt 1 view .LVU713
 2200              	.LVL108:
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2201              		.loc 1 454 11 view .LVU714
 2202 0c49 4883C020 		add	rax, 32	# ivtmp.202,
 2203              	.LVL109:
 2204              	.L169:
 455:sieve_extend.c ****     }
 2205              		.loc 1 455 9 view .LVU715
 2206              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2207              		.loc 1 455 41 is_stmt 0 view .LVU716
 2208 0c4d C5FDEB20 		vpor	ymm4, ymm0, YMMWORD PTR [rax]	# tmp331, quadmask.56_166, MEM[base: _177, offset: 0B]
 2209              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
GAS LISTING /tmp/ccNeV1of.s 			page 72


 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2210              		.loc 1 454 63 view .LVU717
 2211 0c51 4983C501 		add	r13, 1	# current_vector,
 2212              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2213              		.loc 1 455 41 view .LVU718
 2214 0c55 C5FD7F20 		vmovdqa	YMMWORD PTR [rax], ymm4	# MEM[base: _177, offset: 0B], tmp331
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2215              		.loc 1 454 48 is_stmt 1 view .LVU719
 2216              	.LVL110:
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2217              		.loc 1 454 11 view .LVU720
 2218 0c59 4883C020 		add	rax, 32	# ivtmp.202,
 2219              	.LVL111:
 2220              	.L168:
 455:sieve_extend.c ****     }
 2221              		.loc 1 455 9 view .LVU721
 2222              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2223              		.loc 1 455 41 is_stmt 0 view .LVU722
 2224 0c5d C5FDEB28 		vpor	ymm5, ymm0, YMMWORD PTR [rax]	# tmp332, quadmask.56_166, MEM[base: _177, offset: 0B]
 2225              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2226              		.loc 1 454 63 view .LVU723
 2227 0c61 4983C501 		add	r13, 1	# current_vector,
 2228              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2229              		.loc 1 455 41 view .LVU724
 2230 0c65 C5FD7F28 		vmovdqa	YMMWORD PTR [rax], ymm5	# MEM[base: _177, offset: 0B], tmp332
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2231              		.loc 1 454 48 is_stmt 1 view .LVU725
 2232              	.LVL112:
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2233              		.loc 1 454 11 view .LVU726
 2234 0c69 4883C020 		add	rax, 32	# ivtmp.202,
 2235              	.LVL113:
 2236              	.L167:
 455:sieve_extend.c ****     }
 2237              		.loc 1 455 9 view .LVU727
 2238              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2239              		.loc 1 455 41 is_stmt 0 view .LVU728
 2240 0c6d C5FDEB30 		vpor	ymm6, ymm0, YMMWORD PTR [rax]	# tmp333, quadmask.56_166, MEM[base: _177, offset: 0B]
 2241              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2242              		.loc 1 454 63 view .LVU729
 2243 0c71 4983C501 		add	r13, 1	# current_vector,
 2244              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2245              		.loc 1 455 41 view .LVU730
 2246 0c75 C5FD7F30 		vmovdqa	YMMWORD PTR [rax], ymm6	# MEM[base: _177, offset: 0B], tmp333
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2247              		.loc 1 454 48 is_stmt 1 view .LVU731
 2248              	.LVL114:
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2249              		.loc 1 454 11 view .LVU732
 2250 0c79 4883C020 		add	rax, 32	# ivtmp.202,
GAS LISTING /tmp/ccNeV1of.s 			page 73


 2251              	.LVL115:
 2252              	.L166:
 455:sieve_extend.c ****     }
 2253              		.loc 1 455 9 view .LVU733
 2254              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2255              		.loc 1 455 41 is_stmt 0 view .LVU734
 2256 0c7d C5FDEB38 		vpor	ymm7, ymm0, YMMWORD PTR [rax]	# tmp334, quadmask.56_166, MEM[base: _177, offset: 0B]
 2257              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2258              		.loc 1 454 63 view .LVU735
 2259 0c81 4983C501 		add	r13, 1	# current_vector,
 2260              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2261              		.loc 1 455 41 view .LVU736
 2262 0c85 C5FD7F38 		vmovdqa	YMMWORD PTR [rax], ymm7	# MEM[base: _177, offset: 0B], tmp334
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2263              		.loc 1 454 48 is_stmt 1 view .LVU737
 2264              	.LVL116:
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2265              		.loc 1 454 11 view .LVU738
 2266 0c89 4883C020 		add	rax, 32	# ivtmp.202,
 2267              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2268              		.loc 1 454 5 is_stmt 0 view .LVU739
 2269 0c8d 4D39E8   		cmp	r8, r13	# range_stop_vector, current_vector
 2270 0c90 7276     		jb	.L70	#,
 2271              	.LVL117:
 2272              	.L71:
 455:sieve_extend.c ****     }
 2273              		.loc 1 455 9 is_stmt 1 view .LVU740
 2274              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2275              		.loc 1 455 41 is_stmt 0 view .LVU741
 2276 0c92 C57DEB00 		vpor	ymm8, ymm0, YMMWORD PTR [rax]	# tmp272, quadmask.56_166, MEM[base: _177, offset: 0B]
 2277 0c96 C57DEB48 		vpor	ymm9, ymm0, YMMWORD PTR 32[rax]	# tmp275, quadmask.56_166, MEM[base: _177, offset: 0B]
 2277      20
 2278 0c9b C57DEB50 		vpor	ymm10, ymm0, YMMWORD PTR 64[rax]	# tmp278, quadmask.56_166, MEM[base: _177, offset: 0B]
 2278      40
 2279 0ca0 C57DEB58 		vpor	ymm11, ymm0, YMMWORD PTR 96[rax]	# tmp281, quadmask.56_166, MEM[base: _177, offset: 0B]
 2279      60
 2280 0ca5 C57DEBA0 		vpor	ymm12, ymm0, YMMWORD PTR 128[rax]	# tmp284, quadmask.56_166, MEM[base: _177, offset: 0B]
 2280      80000000 
 2281 0cad C57DEBA8 		vpor	ymm13, ymm0, YMMWORD PTR 160[rax]	# tmp287, quadmask.56_166, MEM[base: _177, offset: 0B]
 2281      A0000000 
 2282 0cb5 C57DEBB0 		vpor	ymm14, ymm0, YMMWORD PTR 192[rax]	# tmp290, quadmask.56_166, MEM[base: _177, offset: 0B]
 2282      C0000000 
 2283 0cbd C57DEBB8 		vpor	ymm15, ymm0, YMMWORD PTR 224[rax]	# tmp293, quadmask.56_166, MEM[base: _177, offset: 0B]
 2283      E0000000 
 2284              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2285              		.loc 1 454 63 view .LVU742
 2286 0cc5 4983C508 		add	r13, 8	# current_vector,
 2287 0cc9 48050001 		add	rax, 256	# ivtmp.202,
 2287      0000
 2288              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 74


 2289              		.loc 1 455 41 view .LVU743
 2290 0ccf C57D7F80 		vmovdqa	YMMWORD PTR -256[rax], ymm8	# MEM[base: _177, offset: 0B], tmp272
 2290      00FFFFFF 
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2291              		.loc 1 454 48 is_stmt 1 view .LVU744
 2292              	.LVL118:
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2293              		.loc 1 454 11 view .LVU745
 455:sieve_extend.c ****     }
 2294              		.loc 1 455 9 view .LVU746
 2295              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2296              		.loc 1 455 41 is_stmt 0 view .LVU747
 2297 0cd7 C57D7F88 		vmovdqa	YMMWORD PTR -224[rax], ymm9	# MEM[base: _177, offset: 0B], tmp275
 2297      20FFFFFF 
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2298              		.loc 1 454 48 is_stmt 1 view .LVU748
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2299              		.loc 1 454 11 view .LVU749
 455:sieve_extend.c ****     }
 2300              		.loc 1 455 9 view .LVU750
 2301              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2302              		.loc 1 455 41 is_stmt 0 view .LVU751
 2303 0cdf C57D7F90 		vmovdqa	YMMWORD PTR -192[rax], ymm10	# MEM[base: _177, offset: 0B], tmp278
 2303      40FFFFFF 
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2304              		.loc 1 454 48 is_stmt 1 view .LVU752
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2305              		.loc 1 454 11 view .LVU753
 455:sieve_extend.c ****     }
 2306              		.loc 1 455 9 view .LVU754
 2307              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2308              		.loc 1 455 41 is_stmt 0 view .LVU755
 2309 0ce7 C57D7F98 		vmovdqa	YMMWORD PTR -160[rax], ymm11	# MEM[base: _177, offset: 0B], tmp281
 2309      60FFFFFF 
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2310              		.loc 1 454 48 is_stmt 1 view .LVU756
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2311              		.loc 1 454 11 view .LVU757
 455:sieve_extend.c ****     }
 2312              		.loc 1 455 9 view .LVU758
 2313              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2314              		.loc 1 455 41 is_stmt 0 view .LVU759
 2315 0cef C57D7F60 		vmovdqa	YMMWORD PTR -128[rax], ymm12	# MEM[base: _177, offset: 0B], tmp284
 2315      80
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2316              		.loc 1 454 48 is_stmt 1 view .LVU760
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2317              		.loc 1 454 11 view .LVU761
 455:sieve_extend.c ****     }
 2318              		.loc 1 455 9 view .LVU762
 2319              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2320              		.loc 1 455 41 is_stmt 0 view .LVU763
GAS LISTING /tmp/ccNeV1of.s 			page 75


 2321 0cf4 C57D7F68 		vmovdqa	YMMWORD PTR -96[rax], ymm13	# MEM[base: _177, offset: 0B], tmp287
 2321      A0
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2322              		.loc 1 454 48 is_stmt 1 view .LVU764
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2323              		.loc 1 454 11 view .LVU765
 455:sieve_extend.c ****     }
 2324              		.loc 1 455 9 view .LVU766
 2325              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2326              		.loc 1 455 41 is_stmt 0 view .LVU767
 2327 0cf9 C57D7F70 		vmovdqa	YMMWORD PTR -64[rax], ymm14	# MEM[base: _177, offset: 0B], tmp290
 2327      C0
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2328              		.loc 1 454 48 is_stmt 1 view .LVU768
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2329              		.loc 1 454 11 view .LVU769
 455:sieve_extend.c ****     }
 2330              		.loc 1 455 9 view .LVU770
 2331              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2332              		.loc 1 455 41 is_stmt 0 view .LVU771
 2333 0cfe C57D7F78 		vmovdqa	YMMWORD PTR -32[rax], ymm15	# MEM[base: _177, offset: 0B], tmp293
 2333      E0
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2334              		.loc 1 454 48 is_stmt 1 view .LVU772
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2335              		.loc 1 454 11 view .LVU773
 2336              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2337              		.loc 1 454 5 is_stmt 0 view .LVU774
 2338 0d03 4D39E8   		cmp	r8, r13	# range_stop_vector, current_vector
 2339 0d06 738A     		jnb	.L71	#,
 2340              	.LVL119:
 2341              	.L70:
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2342              		.loc 1 454 5 view .LVU775
 2343              	.LBE344:
 2344              	.LBE346:
 2345              	.LBE337:
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 2346              		.loc 1 489 41 is_stmt 1 view .LVU776
 2347              	# sieve_extend.c:489:     for (counter_t index = range_start; index < range_stop_unique;) {
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 2348              		.loc 1 489 5 is_stmt 0 view .LVU777
 2349 0d08 4939F2   		cmp	r10, rsi	# range_stop_unique, range_start
 2350 0d0b 0F874FFB 		ja	.L72	#,
 2350      FFFF
 2351              	.LVL120:
 2352              	.L234:
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 2353              		.loc 1 489 5 view .LVU778
 2354 0d11 C5F877   		vzeroupper
 2355              	.L54:
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 2356              		.loc 1 489 5 view .LVU779
 2357              	.LBE336:
GAS LISTING /tmp/ccNeV1of.s 			page 76


 2358              	# sieve_extend.c:509: }
 509:sieve_extend.c **** 
 2359              		.loc 1 509 1 view .LVU780
 2360 0d14 488B4424 		mov	rax, QWORD PTR 88[rsp]	# tmp512, D.6794
 2360      58
 2361 0d19 64483304 		xor	rax, QWORD PTR fs:40	# tmp512, MEM[(<address-space-1> long unsigned int *)40B]
 2361      25280000 
 2361      00
 2362 0d22 0F855C04 		jne	.L237	#,
 2362      0000
 2363 0d28 488D65D8 		lea	rsp, -40[rbp]	#,
 2364 0d2c 5B       		pop	rbx	#
 2365 0d2d 415C     		pop	r12	#
 2366 0d2f 415D     		pop	r13	#
 2367 0d31 415E     		pop	r14	#
 2368 0d33 415F     		pop	r15	#
 2369 0d35 5D       		pop	rbp	#
 2370              		.cfi_remember_state
 2371              		.cfi_def_cfa 7, 8
 2372 0d36 C3       		ret	
 2373              	.LVL121:
 2374              	.L235:
 2375              		.cfi_restore_state
 509:sieve_extend.c **** 
 2376              		.loc 1 509 1 view .LVU781
 2377 0d37 4C39E9   		cmp	rcx, r13	# range_stop_vector, step_4
 2378 0d3a B8000000 		mov	eax, 0	# tmp188,
 2378      00
 2379              	.LVL122:
 509:sieve_extend.c **** 
 2380              		.loc 1 509 1 view .LVU782
 2381 0d3f 4889D1   		mov	rcx, rdx	# _200, step
 2382 0d42 4989D1   		mov	r9, rdx	# _207, step
 2383 0d45 480F47C3 		cmova	rax, rbx	# iftmp.57_71,, tmp188
 2384 0d49 488D1C52 		lea	rbx, [rdx+rdx*2]	# tmp191,
 2385 0d4d 4989D4   		mov	r12, rdx	# _211, step
 2386              	.LBB349:
 2387              	.LBB348:
 2388              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2389              		.loc 1 498 31 view .LVU783
 2390 0d50 41BB0100 		mov	r11d, 1	# tmp197,
 2390      0000
 2391 0d56 48C1E107 		sal	rcx, 7	# _200,
 2392 0d5a 4C895424 		mov	QWORD PTR 16[rsp], r10	# %sfp, range_stop_unique
 2392      10
 2393 0d5f 4989CA   		mov	r10, rcx	# _200, _200
 2394              	.LVL123:
 498:sieve_extend.c ****             index += step;
 2395              		.loc 1 498 31 view .LVU784
 2396 0d62 48897C24 		mov	QWORD PTR 24[rsp], rdi	# %sfp, bitarray_word
 2396      18
 2397 0d67 4889C7   		mov	rdi, rax	# iftmp.57_93, iftmp.57_93
 2398              	.LVL124:
 498:sieve_extend.c ****             index += step;
 2399              		.loc 1 498 31 view .LVU785
 2400 0d6a 49C1E105 		sal	r9, 5	# _207,
GAS LISTING /tmp/ccNeV1of.s 			page 77


 2401 0d6e 48C1E305 		sal	rbx, 5	# tmp192,
 2402              	# sieve_extend.c:491:         register bitvector_t quadmask = { };
 491:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 2403              		.loc 1 491 30 view .LVU786
 2404 0d72 C5E9EFD2 		vpxor	xmm2, xmm2, xmm2	# tmp193
 2405 0d76 49C1E406 		sal	r12, 6	# _211,
 2406 0d7a 660F1F44 		.p2align 4
 2406      0000
 2407              		.p2align 3
 2408              	.L66:
 490:sieve_extend.c ****         register bitvector_t quadmask = { };
 2409              		.loc 1 490 9 is_stmt 1 view .LVU787
 2410              	# sieve_extend.c:490:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 490:sieve_extend.c ****         register bitvector_t quadmask = { };
 2411              		.loc 1 490 54 is_stmt 0 view .LVU788
 2412 0d80 4889F0   		mov	rax, rsi	# current_vector, range_start
 2413              	# sieve_extend.c:492:         register counter_t word = wordindex(index) - current_vector_start_wor
 492:sieve_extend.c ****         
 2414              		.loc 1 492 35 view .LVU789
 2415 0d83 4989F6   		mov	r14, rsi	# tmp194, range_start
 2416              	# sieve_extend.c:490:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 490:sieve_extend.c ****         register bitvector_t quadmask = { };
 2417              		.loc 1 490 54 view .LVU790
 2418 0d86 48C1E808 		shr	rax, 8	# current_vector,
 2419              	# sieve_extend.c:492:         register counter_t word = wordindex(index) - current_vector_start_wor
 492:sieve_extend.c ****         
 2420              		.loc 1 492 35 view .LVU791
 2421 0d8a 49C1EE06 		shr	r14, 6	# tmp194,
 2422              	# sieve_extend.c:490:         const counter_t current_vector_start_word =  vectorindex(index) << (S
 490:sieve_extend.c ****         register bitvector_t quadmask = { };
 2423              		.loc 1 490 25 view .LVU792
 2424 0d8e 488D0C85 		lea	rcx, 0[0+rax*4]	# current_vector_start_word,
 2424      00000000 
 2425              	.LVL125:
 491:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 2426              		.loc 1 491 9 is_stmt 1 view .LVU793
 2427              	# sieve_extend.c:491:         register bitvector_t quadmask = { };
 491:sieve_extend.c ****         register counter_t word = wordindex(index) - current_vector_start_word;
 2428              		.loc 1 491 30 is_stmt 0 view .LVU794
 2429 0d96 C5FD7F54 		vmovdqa	YMMWORD PTR 32[rsp], ymm2	# quadmask, tmp193
 2429      2420
 492:sieve_extend.c ****         
 2430              		.loc 1 492 9 is_stmt 1 view .LVU795
 2431              	# sieve_extend.c:492:         register counter_t word = wordindex(index) - current_vector_start_wor
 492:sieve_extend.c ****         
 2432              		.loc 1 492 28 is_stmt 0 view .LVU796
 2433 0d9c 4929CE   		sub	r14, rcx	# word, current_vector_start_word
 2434              	.LVL126:
 2435              	.L61:
 498:sieve_extend.c ****             index += step;
 2436              		.loc 1 498 13 is_stmt 1 discriminator 1 view .LVU797
 2437              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2438              		.loc 1 498 31 is_stmt 0 discriminator 1 view .LVU798
 2439 0d9f C442C9F7 		shlx	r15, r11, rsi	# tmp196, tmp197, range_start
 2439      FB
 2440              	# sieve_extend.c:499:             index += step;
GAS LISTING /tmp/ccNeV1of.s 			page 78


 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2441              		.loc 1 499 19 discriminator 1 view .LVU799
 2442 0da4 4801D6   		add	rsi, rdx	# range_start, step
 2443              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2444              		.loc 1 498 28 discriminator 1 view .LVU800
 2445 0da7 4E097CF4 		or	QWORD PTR 32[rsp+r14*8], r15	# quadmask, tmp196
 2445      20
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2446              		.loc 1 499 13 is_stmt 1 discriminator 1 view .LVU801
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2447              		.loc 1 500 13 discriminator 1 view .LVU802
 2448              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2449              		.loc 1 500 20 is_stmt 0 discriminator 1 view .LVU803
 2450 0dac 4989F6   		mov	r14, rsi	# tmp198, range_start
 2451              	.LVL127:
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2452              		.loc 1 500 20 discriminator 1 view .LVU804
 2453 0daf 49C1EE06 		shr	r14, 6	# tmp198,
 2454              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2455              		.loc 1 500 18 discriminator 1 view .LVU805
 2456 0db3 4929CE   		sub	r14, rcx	# word, current_vector_start_word
 501:sieve_extend.c ****         
 2457              		.loc 1 501 17 is_stmt 1 discriminator 1 view .LVU806
 2458              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 2459              		.loc 1 501 9 is_stmt 0 discriminator 1 view .LVU807
 2460 0db6 4983FE03 		cmp	r14, 3	# word,
 2461 0dba 0F87E000 		ja	.L209	#,
 2461      0000
 498:sieve_extend.c ****             index += step;
 2462              		.loc 1 498 13 is_stmt 1 view .LVU808
 2463              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2464              		.loc 1 498 31 is_stmt 0 view .LVU809
 2465 0dc0 C442C9F7 		shlx	r15, r11, rsi	# tmp399, tmp197, range_start
 2465      FB
 2466              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2467              		.loc 1 499 19 view .LVU810
 2468 0dc5 4801D6   		add	rsi, rdx	# range_start, step
 2469              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2470              		.loc 1 498 28 view .LVU811
 2471 0dc8 4E097CF4 		or	QWORD PTR 32[rsp+r14*8], r15	# quadmask, tmp399
 2471      20
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2472              		.loc 1 499 13 is_stmt 1 view .LVU812
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2473              		.loc 1 500 13 view .LVU813
 2474              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2475              		.loc 1 500 20 is_stmt 0 view .LVU814
 2476 0dcd 4989F6   		mov	r14, rsi	# tmp400, range_start
 2477 0dd0 49C1EE06 		shr	r14, 6	# tmp400,
GAS LISTING /tmp/ccNeV1of.s 			page 79


 2478              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2479              		.loc 1 500 18 view .LVU815
 2480 0dd4 4929CE   		sub	r14, rcx	# word, current_vector_start_word
 501:sieve_extend.c ****         
 2481              		.loc 1 501 17 is_stmt 1 view .LVU816
 2482              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 2483              		.loc 1 501 9 is_stmt 0 view .LVU817
 2484 0dd7 4983FE03 		cmp	r14, 3	# word,
 2485 0ddb 0F87BF00 		ja	.L209	#,
 2485      0000
 498:sieve_extend.c ****             index += step;
 2486              		.loc 1 498 13 is_stmt 1 view .LVU818
 2487              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2488              		.loc 1 498 31 is_stmt 0 view .LVU819
 2489 0de1 C442C9F7 		shlx	r15, r11, rsi	# tmp402, tmp197, range_start
 2489      FB
 2490              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2491              		.loc 1 499 19 view .LVU820
 2492 0de6 4801D6   		add	rsi, rdx	# range_start, step
 2493              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2494              		.loc 1 498 28 view .LVU821
 2495 0de9 4E097CF4 		or	QWORD PTR 32[rsp+r14*8], r15	# quadmask, tmp402
 2495      20
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2496              		.loc 1 499 13 is_stmt 1 view .LVU822
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2497              		.loc 1 500 13 view .LVU823
 2498              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2499              		.loc 1 500 20 is_stmt 0 view .LVU824
 2500 0dee 4989F6   		mov	r14, rsi	# tmp403, range_start
 2501 0df1 49C1EE06 		shr	r14, 6	# tmp403,
 2502              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2503              		.loc 1 500 18 view .LVU825
 2504 0df5 4929CE   		sub	r14, rcx	# word, current_vector_start_word
 501:sieve_extend.c ****         
 2505              		.loc 1 501 17 is_stmt 1 view .LVU826
 2506              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 2507              		.loc 1 501 9 is_stmt 0 view .LVU827
 2508 0df8 4983FE03 		cmp	r14, 3	# word,
 2509 0dfc 0F879E00 		ja	.L209	#,
 2509      0000
 498:sieve_extend.c ****             index += step;
 2510              		.loc 1 498 13 is_stmt 1 view .LVU828
 2511              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2512              		.loc 1 498 31 is_stmt 0 view .LVU829
 2513 0e02 C442C9F7 		shlx	r15, r11, rsi	# tmp405, tmp197, range_start
 2513      FB
 2514              	# sieve_extend.c:499:             index += step;
GAS LISTING /tmp/ccNeV1of.s 			page 80


 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2515              		.loc 1 499 19 view .LVU830
 2516 0e07 4801D6   		add	rsi, rdx	# range_start, step
 2517              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2518              		.loc 1 498 28 view .LVU831
 2519 0e0a 4E097CF4 		or	QWORD PTR 32[rsp+r14*8], r15	# quadmask, tmp405
 2519      20
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2520              		.loc 1 499 13 is_stmt 1 view .LVU832
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2521              		.loc 1 500 13 view .LVU833
 2522              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2523              		.loc 1 500 20 is_stmt 0 view .LVU834
 2524 0e0f 4989F6   		mov	r14, rsi	# tmp406, range_start
 2525 0e12 49C1EE06 		shr	r14, 6	# tmp406,
 2526              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2527              		.loc 1 500 18 view .LVU835
 2528 0e16 4929CE   		sub	r14, rcx	# word, current_vector_start_word
 501:sieve_extend.c ****         
 2529              		.loc 1 501 17 is_stmt 1 view .LVU836
 2530              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 2531              		.loc 1 501 9 is_stmt 0 view .LVU837
 2532 0e19 4983FE03 		cmp	r14, 3	# word,
 2533 0e1d 0F877D00 		ja	.L209	#,
 2533      0000
 498:sieve_extend.c ****             index += step;
 2534              		.loc 1 498 13 is_stmt 1 view .LVU838
 2535              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2536              		.loc 1 498 31 is_stmt 0 view .LVU839
 2537 0e23 C442C9F7 		shlx	r15, r11, rsi	# tmp408, tmp197, range_start
 2537      FB
 2538              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2539              		.loc 1 499 19 view .LVU840
 2540 0e28 4801D6   		add	rsi, rdx	# range_start, step
 2541              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2542              		.loc 1 498 28 view .LVU841
 2543 0e2b 4E097CF4 		or	QWORD PTR 32[rsp+r14*8], r15	# quadmask, tmp408
 2543      20
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2544              		.loc 1 499 13 is_stmt 1 view .LVU842
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2545              		.loc 1 500 13 view .LVU843
 2546              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2547              		.loc 1 500 20 is_stmt 0 view .LVU844
 2548 0e30 4989F6   		mov	r14, rsi	# tmp409, range_start
 2549 0e33 49C1EE06 		shr	r14, 6	# tmp409,
 2550              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2551              		.loc 1 500 18 view .LVU845
GAS LISTING /tmp/ccNeV1of.s 			page 81


 2552 0e37 4929CE   		sub	r14, rcx	# word, current_vector_start_word
 501:sieve_extend.c ****         
 2553              		.loc 1 501 17 is_stmt 1 view .LVU846
 2554              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 2555              		.loc 1 501 9 is_stmt 0 view .LVU847
 2556 0e3a 4983FE03 		cmp	r14, 3	# word,
 2557 0e3e 7760     		ja	.L209	#,
 498:sieve_extend.c ****             index += step;
 2558              		.loc 1 498 13 is_stmt 1 view .LVU848
 2559              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2560              		.loc 1 498 31 is_stmt 0 view .LVU849
 2561 0e40 C442C9F7 		shlx	r15, r11, rsi	# tmp411, tmp197, range_start
 2561      FB
 2562              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2563              		.loc 1 499 19 view .LVU850
 2564 0e45 4801D6   		add	rsi, rdx	# range_start, step
 2565              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2566              		.loc 1 498 28 view .LVU851
 2567 0e48 4E097CF4 		or	QWORD PTR 32[rsp+r14*8], r15	# quadmask, tmp411
 2567      20
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2568              		.loc 1 499 13 is_stmt 1 view .LVU852
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2569              		.loc 1 500 13 view .LVU853
 2570              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2571              		.loc 1 500 20 is_stmt 0 view .LVU854
 2572 0e4d 4989F6   		mov	r14, rsi	# tmp412, range_start
 2573 0e50 49C1EE06 		shr	r14, 6	# tmp412,
 2574              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2575              		.loc 1 500 18 view .LVU855
 2576 0e54 4929CE   		sub	r14, rcx	# word, current_vector_start_word
 501:sieve_extend.c ****         
 2577              		.loc 1 501 17 is_stmt 1 view .LVU856
 2578              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 2579              		.loc 1 501 9 is_stmt 0 view .LVU857
 2580 0e57 4983FE03 		cmp	r14, 3	# word,
 2581 0e5b 7743     		ja	.L209	#,
 498:sieve_extend.c ****             index += step;
 2582              		.loc 1 498 13 is_stmt 1 view .LVU858
 2583              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2584              		.loc 1 498 31 is_stmt 0 view .LVU859
 2585 0e5d C442C9F7 		shlx	r15, r11, rsi	# tmp414, tmp197, range_start
 2585      FB
 2586              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2587              		.loc 1 499 19 view .LVU860
 2588 0e62 4801D6   		add	rsi, rdx	# range_start, step
 2589              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
GAS LISTING /tmp/ccNeV1of.s 			page 82


 2590              		.loc 1 498 28 view .LVU861
 2591 0e65 4E097CF4 		or	QWORD PTR 32[rsp+r14*8], r15	# quadmask, tmp414
 2591      20
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2592              		.loc 1 499 13 is_stmt 1 view .LVU862
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2593              		.loc 1 500 13 view .LVU863
 2594              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2595              		.loc 1 500 20 is_stmt 0 view .LVU864
 2596 0e6a 4989F6   		mov	r14, rsi	# tmp415, range_start
 2597 0e6d 49C1EE06 		shr	r14, 6	# tmp415,
 2598              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2599              		.loc 1 500 18 view .LVU865
 2600 0e71 4929CE   		sub	r14, rcx	# word, current_vector_start_word
 501:sieve_extend.c ****         
 2601              		.loc 1 501 17 is_stmt 1 view .LVU866
 2602              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 501:sieve_extend.c ****         
 2603              		.loc 1 501 9 is_stmt 0 view .LVU867
 2604 0e74 4983FE03 		cmp	r14, 3	# word,
 2605 0e78 7726     		ja	.L209	#,
 498:sieve_extend.c ****             index += step;
 2606              		.loc 1 498 13 is_stmt 1 view .LVU868
 2607              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2608              		.loc 1 498 31 is_stmt 0 view .LVU869
 2609 0e7a C442C9F7 		shlx	r15, r11, rsi	# tmp417, tmp197, range_start
 2609      FB
 2610              	# sieve_extend.c:499:             index += step;
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2611              		.loc 1 499 19 view .LVU870
 2612 0e7f 4801D6   		add	rsi, rdx	# range_start, step
 2613              	# sieve_extend.c:498:             quadmask[word] |= markmask(index);
 498:sieve_extend.c ****             index += step;
 2614              		.loc 1 498 28 view .LVU871
 2615 0e82 4E097CF4 		or	QWORD PTR 32[rsp+r14*8], r15	# quadmask, tmp417
 2615      20
 499:sieve_extend.c ****             word = wordindex(index) - current_vector_start_word;
 2616              		.loc 1 499 13 is_stmt 1 view .LVU872
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2617              		.loc 1 500 13 view .LVU873
 2618              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2619              		.loc 1 500 20 is_stmt 0 view .LVU874
 2620 0e87 4989F6   		mov	r14, rsi	# tmp418, range_start
 2621 0e8a 49C1EE06 		shr	r14, 6	# tmp418,
 2622              	.LVL128:
 2623              	# sieve_extend.c:500:             word = wordindex(index) - current_vector_start_word;
 500:sieve_extend.c ****         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
 2624              		.loc 1 500 18 view .LVU875
 2625 0e8e 4929CE   		sub	r14, rcx	# word, current_vector_start_word
 2626              	.LVL129:
 501:sieve_extend.c ****         
 2627              		.loc 1 501 17 is_stmt 1 view .LVU876
 2628              	# sieve_extend.c:501:         } while (word < (VECTOR_ELEMENTS));// && index <= range_stop_unique);
GAS LISTING /tmp/ccNeV1of.s 			page 83


 501:sieve_extend.c ****         
 2629              		.loc 1 501 9 is_stmt 0 view .LVU877
 2630 0e91 4983FE03 		cmp	r14, 3	# word,
 2631 0e95 0F8604FF 		jbe	.L61	#,
 2631      FFFF
 2632              	.LVL130:
 2633 0e9b 0F1F4400 		.p2align 4
 2633      00
 2634              		.p2align 3
 2635              	.L209:
 504:sieve_extend.c ****         // const counter_t range_stop_vector = vectorindex(range_stop);
 2636              		.loc 1 504 9 is_stmt 1 view .LVU878
 507:sieve_extend.c ****     }
 2637              		.loc 1 507 9 view .LVU879
 2638 0ea0 C5FD6F44 		vmovdqa	ymm0, YMMWORD PTR 32[rsp]	# quadmask.56_36, quadmask
 2638      2420
 2639              	.LVL131:
 2640              	.LBB347:
 431:sieve_extend.c **** 
 2641              		.loc 1 431 20 view .LVU880
 2642              	.LBB345:
 434:sieve_extend.c ****     register const counter_t range_stop_vector = vectorindex(range_stop);
 2643              		.loc 1 434 5 view .LVU881
 435:sieve_extend.c ****     register const counter_t step_2 = step * 2;
 2644              		.loc 1 435 5 view .LVU882
 436:sieve_extend.c ****     register const counter_t step_3 = step * 3;
 2645              		.loc 1 436 5 view .LVU883
 437:sieve_extend.c ****     register const counter_t step_4 = step * 4;
 2646              		.loc 1 437 5 view .LVU884
 438:sieve_extend.c **** 
 2647              		.loc 1 438 5 view .LVU885
 440:sieve_extend.c ****         register const counter_t loop_stop_vector = (range_stop_vector > step_4) ? (range_stop_vect
 2648              		.loc 1 440 5 view .LVU886
 2649              	# sieve_extend.c:440:     if (current_vector+step_4 <= range_stop_vector) {
 440:sieve_extend.c ****         register const counter_t loop_stop_vector = (range_stop_vector > step_4) ? (range_stop_vect
 2650              		.loc 1 440 23 is_stmt 0 view .LVU887
 2651 0ea6 4E8D3428 		lea	r14, [rax+r13]	# current_vector,
 2652              	# sieve_extend.c:440:     if (current_vector+step_4 <= range_stop_vector) {
 440:sieve_extend.c ****         register const counter_t loop_stop_vector = (range_stop_vector > step_4) ? (range_stop_vect
 2653              		.loc 1 440 8 view .LVU888
 2654 0eaa 4D39F0   		cmp	r8, r14	# range_stop_vector, current_vector
 2655 0ead 0F820501 		jb	.L62	#,
 2655      0000
 2656              	.LBB343:
 441:sieve_extend.c ****         //#pragma GCC unroll 16
 2657              		.loc 1 441 9 is_stmt 1 view .LVU889
 2658              	.LVL132:
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2659              		.loc 1 444 15 view .LVU890
 2660              	# sieve_extend.c:444:         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2661              		.loc 1 444 9 is_stmt 0 view .LVU891
 2662 0eb3 4839F8   		cmp	rax, rdi	# current_vector, iftmp.57_93
 2663 0eb6 0F87FC00 		ja	.L62	#,
 2663      0000
 2664 0ebc 488B4C24 		mov	rcx, QWORD PTR 24[rsp]	# bitarray_word, %sfp
 2664      18
GAS LISTING /tmp/ccNeV1of.s 			page 84


 2665              	.LVL133:
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2666              		.loc 1 444 9 view .LVU892
 2667 0ec1 48C1E005 		sal	rax, 5	# tmp200,
 2668              	.LVL134:
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2669              		.loc 1 444 9 view .LVU893
 2670 0ec5 4801C1   		add	rcx, rax	# ivtmp.220, tmp200
 2671              	.L63:
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2672              		.loc 1 445 13 is_stmt 1 view .LVU894
 2673              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2674              		.loc 1 445 52 is_stmt 0 view .LVU895
 2675 0ec8 C5FDEB09 		vpor	ymm1, ymm0, YMMWORD PTR [rcx]	# tmp201, quadmask.56_36, MEM[base: _204, offset: 0B]
 2676              	# sieve_extend.c:444:         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2677              		.loc 1 444 66 view .LVU896
 2678 0ecc 4C89F0   		mov	rax, r14	# current_vector, current_vector
 2679              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2680              		.loc 1 445 52 view .LVU897
 2681 0ecf C5FD7F09 		vmovdqa	YMMWORD PTR [rcx], ymm1	# MEM[base: _204, offset: 0B], tmp201
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2682              		.loc 1 446 13 is_stmt 1 view .LVU898
 2683              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2684              		.loc 1 446 52 is_stmt 0 view .LVU899
 2685 0ed3 C4A17DEB 		vpor	ymm3, ymm0, YMMWORD PTR [rcx+r9]	# tmp202, quadmask.56_36, MEM[base: _204, index: _207, offse
 2685      1C09
 2686 0ed9 C4A17D7F 		vmovdqa	YMMWORD PTR [rcx+r9], ymm3	# MEM[base: _204, index: _207, offset: 0B], tmp202
 2686      1C09
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2687              		.loc 1 447 13 is_stmt 1 view .LVU900
 2688              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2689              		.loc 1 447 52 is_stmt 0 view .LVU901
 2690 0edf C4A17DEB 		vpor	ymm4, ymm0, YMMWORD PTR [rcx+r12]	# tmp203, quadmask.56_36, MEM[base: _204, index: _211, offs
 2690      2421
 2691 0ee5 C4A17D7F 		vmovdqa	YMMWORD PTR [rcx+r12], ymm4	# MEM[base: _204, index: _211, offset: 0B], tmp203
 2691      2421
 448:sieve_extend.c ****         }
 2692              		.loc 1 448 13 is_stmt 1 view .LVU902
 2693              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
 448:sieve_extend.c ****         }
 2694              		.loc 1 448 52 is_stmt 0 view .LVU903
 2695 0eeb C5FDEB2C 		vpor	ymm5, ymm0, YMMWORD PTR [rcx+rbx]	# tmp204, quadmask.56_36, MEM[base: _204, index: _215, offs
 2695      19
 2696 0ef0 C5FD7F2C 		vmovdqa	YMMWORD PTR [rcx+rbx], ymm5	# MEM[base: _204, index: _215, offset: 0B], tmp204
 2696      19
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2697              		.loc 1 444 51 is_stmt 1 view .LVU904
 2698              	.LVL135:
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2699              		.loc 1 444 15 view .LVU905
 2700 0ef5 4C01D1   		add	rcx, r10	# ivtmp.220, _200
 2701              	# sieve_extend.c:444:         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
GAS LISTING /tmp/ccNeV1of.s 			page 85


 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2702              		.loc 1 444 9 is_stmt 0 view .LVU906
 2703 0ef8 4939FE   		cmp	r14, rdi	# current_vector, iftmp.57_93
 2704 0efb 0F87B700 		ja	.L62	#,
 2704      0000
 2705              	.LVL136:
 2706              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2707              		.loc 1 445 52 view .LVU907
 2708 0f01 C5FDEB31 		vpor	ymm6, ymm0, YMMWORD PTR [rcx]	# tmp241, quadmask.56_36, MEM[base: _204, offset: 0B]
 2709 0f05 4F8D3C2E 		lea	r15, [r14+r13]	# current_vector,
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2710              		.loc 1 445 13 is_stmt 1 view .LVU908
 2711              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2712              		.loc 1 445 52 is_stmt 0 view .LVU909
 2713 0f09 C5FD7F31 		vmovdqa	YMMWORD PTR [rcx], ymm6	# MEM[base: _204, offset: 0B], tmp241
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2714              		.loc 1 446 13 is_stmt 1 view .LVU910
 2715              	# sieve_extend.c:444:         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2716              		.loc 1 444 66 is_stmt 0 view .LVU911
 2717 0f0d 4C89F8   		mov	rax, r15	# current_vector, current_vector
 2718              	.LVL137:
 2719              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2720              		.loc 1 446 52 view .LVU912
 2721 0f10 C4A17DEB 		vpor	ymm7, ymm0, YMMWORD PTR [rcx+r9]	# tmp242, quadmask.56_36, MEM[base: _204, index: _207, offse
 2721      3C09
 2722 0f16 C4A17D7F 		vmovdqa	YMMWORD PTR [rcx+r9], ymm7	# MEM[base: _204, index: _207, offset: 0B], tmp242
 2722      3C09
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2723              		.loc 1 447 13 is_stmt 1 view .LVU913
 2724              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2725              		.loc 1 447 52 is_stmt 0 view .LVU914
 2726 0f1c C4217DEB 		vpor	ymm8, ymm0, YMMWORD PTR [rcx+r12]	# tmp243, quadmask.56_36, MEM[base: _204, index: _211, offs
 2726      0421
 2727 0f22 C4217D7F 		vmovdqa	YMMWORD PTR [rcx+r12], ymm8	# MEM[base: _204, index: _211, offset: 0B], tmp243
 2727      0421
 448:sieve_extend.c ****         }
 2728              		.loc 1 448 13 is_stmt 1 view .LVU915
 2729              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
 448:sieve_extend.c ****         }
 2730              		.loc 1 448 52 is_stmt 0 view .LVU916
 2731 0f28 C57DEB0C 		vpor	ymm9, ymm0, YMMWORD PTR [rcx+rbx]	# tmp244, quadmask.56_36, MEM[base: _204, index: _215, offs
 2731      19
 2732 0f2d C57D7F0C 		vmovdqa	YMMWORD PTR [rcx+rbx], ymm9	# MEM[base: _204, index: _215, offset: 0B], tmp244
 2732      19
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2733              		.loc 1 444 51 is_stmt 1 view .LVU917
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2734              		.loc 1 444 15 view .LVU918
 2735 0f32 4C01D1   		add	rcx, r10	# ivtmp.220, _200
 2736              	# sieve_extend.c:444:         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2737              		.loc 1 444 9 is_stmt 0 view .LVU919
GAS LISTING /tmp/ccNeV1of.s 			page 86


 2738 0f35 4939FF   		cmp	r15, rdi	# current_vector, iftmp.57_93
 2739 0f38 777E     		ja	.L62	#,
 2740              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2741              		.loc 1 445 52 view .LVU920
 2742 0f3a C57DEB11 		vpor	ymm10, ymm0, YMMWORD PTR [rcx]	# tmp389, quadmask.56_36, MEM[base: _204, offset: 0B]
 2743 0f3e 4F8D342F 		lea	r14, [r15+r13]	# current_vector,
 2744              	.LVL138:
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2745              		.loc 1 445 13 is_stmt 1 view .LVU921
 2746              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2747              		.loc 1 445 52 is_stmt 0 view .LVU922
 2748 0f42 C57D7F11 		vmovdqa	YMMWORD PTR [rcx], ymm10	# MEM[base: _204, offset: 0B], tmp389
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2749              		.loc 1 446 13 is_stmt 1 view .LVU923
 2750              	# sieve_extend.c:444:         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2751              		.loc 1 444 66 is_stmt 0 view .LVU924
 2752 0f46 4C89F0   		mov	rax, r14	# current_vector, current_vector
 2753              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2754              		.loc 1 446 52 view .LVU925
 2755 0f49 C4217DEB 		vpor	ymm11, ymm0, YMMWORD PTR [rcx+r9]	# tmp390, quadmask.56_36, MEM[base: _204, index: _207, offs
 2755      1C09
 2756 0f4f C4217D7F 		vmovdqa	YMMWORD PTR [rcx+r9], ymm11	# MEM[base: _204, index: _207, offset: 0B], tmp390
 2756      1C09
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2757              		.loc 1 447 13 is_stmt 1 view .LVU926
 2758              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2759              		.loc 1 447 52 is_stmt 0 view .LVU927
 2760 0f55 C4217DEB 		vpor	ymm12, ymm0, YMMWORD PTR [rcx+r12]	# tmp391, quadmask.56_36, MEM[base: _204, index: _211, off
 2760      2421
 2761 0f5b C4217D7F 		vmovdqa	YMMWORD PTR [rcx+r12], ymm12	# MEM[base: _204, index: _211, offset: 0B], tmp391
 2761      2421
 448:sieve_extend.c ****         }
 2762              		.loc 1 448 13 is_stmt 1 view .LVU928
 2763              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
 448:sieve_extend.c ****         }
 2764              		.loc 1 448 52 is_stmt 0 view .LVU929
 2765 0f61 C57DEB2C 		vpor	ymm13, ymm0, YMMWORD PTR [rcx+rbx]	# tmp392, quadmask.56_36, MEM[base: _204, index: _215, off
 2765      19
 2766 0f66 C57D7F2C 		vmovdqa	YMMWORD PTR [rcx+rbx], ymm13	# MEM[base: _204, index: _215, offset: 0B], tmp392
 2766      19
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2767              		.loc 1 444 51 is_stmt 1 view .LVU930
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2768              		.loc 1 444 15 view .LVU931
 2769 0f6b 4C01D1   		add	rcx, r10	# ivtmp.220, _200
 2770              	# sieve_extend.c:444:         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2771              		.loc 1 444 9 is_stmt 0 view .LVU932
 2772 0f6e 4939FE   		cmp	r14, rdi	# current_vector, iftmp.57_93
 2773 0f71 7745     		ja	.L62	#,
 2774              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
GAS LISTING /tmp/ccNeV1of.s 			page 87


 2775              		.loc 1 445 52 view .LVU933
 2776 0f73 C57DEB31 		vpor	ymm14, ymm0, YMMWORD PTR [rcx]	# tmp395, quadmask.56_36, MEM[base: _204, offset: 0B]
 2777 0f77 4F8D3C2E 		lea	r15, [r14+r13]	# current_vector,
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2778              		.loc 1 445 13 is_stmt 1 view .LVU934
 2779              	# sieve_extend.c:445:             bitarray_vector[current_vector       ] |= mask;
 445:sieve_extend.c ****             bitarray_vector[current_vector+step  ] |= mask;
 2780              		.loc 1 445 52 is_stmt 0 view .LVU935
 2781 0f7b C57D7F31 		vmovdqa	YMMWORD PTR [rcx], ymm14	# MEM[base: _204, offset: 0B], tmp395
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2782              		.loc 1 446 13 is_stmt 1 view .LVU936
 2783              	# sieve_extend.c:444:         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2784              		.loc 1 444 66 is_stmt 0 view .LVU937
 2785 0f7f 4C89F8   		mov	rax, r15	# current_vector, current_vector
 2786              	# sieve_extend.c:446:             bitarray_vector[current_vector+step  ] |= mask;
 446:sieve_extend.c ****             bitarray_vector[current_vector+step_2] |= mask;
 2787              		.loc 1 446 52 view .LVU938
 2788 0f82 C4217DEB 		vpor	ymm15, ymm0, YMMWORD PTR [rcx+r9]	# tmp396, quadmask.56_36, MEM[base: _204, index: _207, offs
 2788      3C09
 2789 0f88 C4217D7F 		vmovdqa	YMMWORD PTR [rcx+r9], ymm15	# MEM[base: _204, index: _207, offset: 0B], tmp396
 2789      3C09
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2790              		.loc 1 447 13 is_stmt 1 view .LVU939
 2791              	# sieve_extend.c:447:             bitarray_vector[current_vector+step_2] |= mask;
 447:sieve_extend.c ****             bitarray_vector[current_vector+step_3] |= mask;
 2792              		.loc 1 447 52 is_stmt 0 view .LVU940
 2793 0f8e C4A17DEB 		vpor	ymm1, ymm0, YMMWORD PTR [rcx+r12]	# tmp397, quadmask.56_36, MEM[base: _204, index: _211, offs
 2793      0C21
 2794 0f94 C4A17D7F 		vmovdqa	YMMWORD PTR [rcx+r12], ymm1	# MEM[base: _204, index: _211, offset: 0B], tmp397
 2794      0C21
 448:sieve_extend.c ****         }
 2795              		.loc 1 448 13 is_stmt 1 view .LVU941
 2796              	# sieve_extend.c:448:             bitarray_vector[current_vector+step_3] |= mask;
 448:sieve_extend.c ****         }
 2797              		.loc 1 448 52 is_stmt 0 view .LVU942
 2798 0f9a C5FDEB1C 		vpor	ymm3, ymm0, YMMWORD PTR [rcx+rbx]	# tmp398, quadmask.56_36, MEM[base: _204, index: _215, offs
 2798      19
 2799 0f9f C5FD7F1C 		vmovdqa	YMMWORD PTR [rcx+rbx], ymm3	# MEM[base: _204, index: _215, offset: 0B], tmp398
 2799      19
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2800              		.loc 1 444 51 is_stmt 1 view .LVU943
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2801              		.loc 1 444 15 view .LVU944
 2802 0fa4 4C01D1   		add	rcx, r10	# ivtmp.220, _200
 2803              	# sieve_extend.c:444:         for(; current_vector <= loop_stop_vector; current_vector += step_4) {
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2804              		.loc 1 444 9 is_stmt 0 view .LVU945
 2805 0fa7 4939FF   		cmp	r15, rdi	# current_vector, iftmp.57_93
 2806 0faa 770C     		ja	.L62	#,
 2807              	.LVL139:
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2808              		.loc 1 444 9 view .LVU946
 2809 0fac 4F8D342F 		lea	r14, [r15+r13]	# current_vector,
 2810              	.LVL140:
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2811              		.loc 1 444 9 view .LVU947
GAS LISTING /tmp/ccNeV1of.s 			page 88


 2812 0fb0 E913FFFF 		jmp	.L63	#
 2812      FF
 2813              	.LVL141:
 2814              		.p2align 4,,7
 2815 0fb5 0F1F00   		.p2align 3
 2816              	.L62:
 444:sieve_extend.c ****             bitarray_vector[current_vector       ] |= mask;
 2817              		.loc 1 444 9 view .LVU948
 2818              	.LBE343:
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2819              		.loc 1 454 11 is_stmt 1 view .LVU949
 2820              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2821              		.loc 1 454 5 is_stmt 0 view .LVU950
 2822 0fb8 4939C0   		cmp	r8, rax	# range_stop_vector, current_vector
 2823 0fbb 0F82BF00 		jb	.L64	#,
 2823      0000
 2824 0fc1 4989C7   		mov	r15, rax	# tmp205, current_vector
 2825 0fc4 49C1E705 		sal	r15, 5	# tmp205,
 2826 0fc8 4C037C24 		add	r15, QWORD PTR 24[rsp]	# ivtmp.214, %sfp
 2826      18
 2827              	.L65:
 455:sieve_extend.c ****     }
 2828              		.loc 1 455 9 is_stmt 1 view .LVU951
 2829              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2830              		.loc 1 454 63 is_stmt 0 view .LVU952
 2831 0fcd 4C8D3410 		lea	r14, [rax+rdx]	# current_vector,
 2832              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2833              		.loc 1 455 41 view .LVU953
 2834 0fd1 C4C17DEB 		vpor	ymm4, ymm0, YMMWORD PTR [r15]	# tmp206, quadmask.56_36, MEM[base: _196, offset: 0B]
 2834      27
 2835              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2836              		.loc 1 454 5 view .LVU954
 2837 0fd6 4D39F0   		cmp	r8, r14	# range_stop_vector, current_vector
 2838 0fd9 4B8D0C0F 		lea	rcx, [r15+r9]	# ivtmp.214,
 2839              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2840              		.loc 1 455 41 view .LVU955
 2841 0fdd C4C17D7F 		vmovdqa	YMMWORD PTR [r15], ymm4	# MEM[base: _196, offset: 0B], tmp206
 2841      27
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2842              		.loc 1 454 48 is_stmt 1 view .LVU956
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2843              		.loc 1 454 11 view .LVU957
 2844              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2845              		.loc 1 454 5 is_stmt 0 view .LVU958
 2846 0fe2 0F829800 		jb	.L64	#,
 2846      0000
 455:sieve_extend.c ****     }
 2847              		.loc 1 455 9 is_stmt 1 view .LVU959
 2848              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2849              		.loc 1 455 41 is_stmt 0 view .LVU960
GAS LISTING /tmp/ccNeV1of.s 			page 89


 2850 0fe8 C5FDEB29 		vpor	ymm5, ymm0, YMMWORD PTR [rcx]	# tmp369, quadmask.56_36, MEM[base: _196, offset: 0B]
 2851              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2852              		.loc 1 454 63 view .LVU961
 2853 0fec 4901D6   		add	r14, rdx	# current_vector, step
 2854              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2855              		.loc 1 455 41 view .LVU962
 2856 0fef C5FD7F29 		vmovdqa	YMMWORD PTR [rcx], ymm5	# MEM[base: _196, offset: 0B], tmp369
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2857              		.loc 1 454 48 is_stmt 1 view .LVU963
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2858              		.loc 1 454 11 view .LVU964
 2859 0ff3 4C01C9   		add	rcx, r9	# ivtmp.214, _207
 2860              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2861              		.loc 1 454 5 is_stmt 0 view .LVU965
 2862 0ff6 4D39F0   		cmp	r8, r14	# range_stop_vector, current_vector
 2863 0ff9 0F828100 		jb	.L64	#,
 2863      0000
 455:sieve_extend.c ****     }
 2864              		.loc 1 455 9 is_stmt 1 view .LVU966
 2865              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2866              		.loc 1 455 41 is_stmt 0 view .LVU967
 2867 0fff C5FDEB31 		vpor	ymm6, ymm0, YMMWORD PTR [rcx]	# tmp372, quadmask.56_36, MEM[base: _196, offset: 0B]
 2868              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2869              		.loc 1 454 63 view .LVU968
 2870 1003 4901D6   		add	r14, rdx	# current_vector, step
 2871              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2872              		.loc 1 455 41 view .LVU969
 2873 1006 C5FD7F31 		vmovdqa	YMMWORD PTR [rcx], ymm6	# MEM[base: _196, offset: 0B], tmp372
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2874              		.loc 1 454 48 is_stmt 1 view .LVU970
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2875              		.loc 1 454 11 view .LVU971
 2876 100a 4C01C9   		add	rcx, r9	# ivtmp.214, _207
 2877              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2878              		.loc 1 454 5 is_stmt 0 view .LVU972
 2879 100d 4D39F0   		cmp	r8, r14	# range_stop_vector, current_vector
 2880 1010 726E     		jb	.L64	#,
 455:sieve_extend.c ****     }
 2881              		.loc 1 455 9 is_stmt 1 view .LVU973
 2882              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2883              		.loc 1 455 41 is_stmt 0 view .LVU974
 2884 1012 C5FDEB39 		vpor	ymm7, ymm0, YMMWORD PTR [rcx]	# tmp375, quadmask.56_36, MEM[base: _196, offset: 0B]
 2885              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2886              		.loc 1 454 63 view .LVU975
 2887 1016 4901D6   		add	r14, rdx	# current_vector, step
 2888              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2889              		.loc 1 455 41 view .LVU976
GAS LISTING /tmp/ccNeV1of.s 			page 90


 2890 1019 C5FD7F39 		vmovdqa	YMMWORD PTR [rcx], ymm7	# MEM[base: _196, offset: 0B], tmp375
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2891              		.loc 1 454 48 is_stmt 1 view .LVU977
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2892              		.loc 1 454 11 view .LVU978
 2893 101d 4C01C9   		add	rcx, r9	# ivtmp.214, _207
 2894              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2895              		.loc 1 454 5 is_stmt 0 view .LVU979
 2896 1020 4D39F0   		cmp	r8, r14	# range_stop_vector, current_vector
 2897 1023 725B     		jb	.L64	#,
 455:sieve_extend.c ****     }
 2898              		.loc 1 455 9 is_stmt 1 view .LVU980
 2899              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2900              		.loc 1 455 41 is_stmt 0 view .LVU981
 2901 1025 C57DEB01 		vpor	ymm8, ymm0, YMMWORD PTR [rcx]	# tmp378, quadmask.56_36, MEM[base: _196, offset: 0B]
 2902              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2903              		.loc 1 454 63 view .LVU982
 2904 1029 4901D6   		add	r14, rdx	# current_vector, step
 2905              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2906              		.loc 1 455 41 view .LVU983
 2907 102c C57D7F01 		vmovdqa	YMMWORD PTR [rcx], ymm8	# MEM[base: _196, offset: 0B], tmp378
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2908              		.loc 1 454 48 is_stmt 1 view .LVU984
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2909              		.loc 1 454 11 view .LVU985
 2910 1030 4C01C9   		add	rcx, r9	# ivtmp.214, _207
 2911              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2912              		.loc 1 454 5 is_stmt 0 view .LVU986
 2913 1033 4D39F0   		cmp	r8, r14	# range_stop_vector, current_vector
 2914 1036 7248     		jb	.L64	#,
 455:sieve_extend.c ****     }
 2915              		.loc 1 455 9 is_stmt 1 view .LVU987
 2916              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2917              		.loc 1 455 41 is_stmt 0 view .LVU988
 2918 1038 C57DEB09 		vpor	ymm9, ymm0, YMMWORD PTR [rcx]	# tmp381, quadmask.56_36, MEM[base: _196, offset: 0B]
 2919              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2920              		.loc 1 454 63 view .LVU989
 2921 103c 4901D6   		add	r14, rdx	# current_vector, step
 2922              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2923              		.loc 1 455 41 view .LVU990
 2924 103f C57D7F09 		vmovdqa	YMMWORD PTR [rcx], ymm9	# MEM[base: _196, offset: 0B], tmp381
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2925              		.loc 1 454 48 is_stmt 1 view .LVU991
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2926              		.loc 1 454 11 view .LVU992
 2927 1043 4C01C9   		add	rcx, r9	# ivtmp.214, _207
 2928              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2929              		.loc 1 454 5 is_stmt 0 view .LVU993
GAS LISTING /tmp/ccNeV1of.s 			page 91


 2930 1046 4D39F0   		cmp	r8, r14	# range_stop_vector, current_vector
 2931 1049 7235     		jb	.L64	#,
 455:sieve_extend.c ****     }
 2932              		.loc 1 455 9 is_stmt 1 view .LVU994
 2933              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2934              		.loc 1 454 63 is_stmt 0 view .LVU995
 2935 104b 4901D6   		add	r14, rdx	# current_vector, step
 2936              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2937              		.loc 1 455 41 view .LVU996
 2938 104e C57DEB11 		vpor	ymm10, ymm0, YMMWORD PTR [rcx]	# tmp384, quadmask.56_36, MEM[base: _196, offset: 0B]
 2939              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2940              		.loc 1 454 5 view .LVU997
 2941 1052 4D39F0   		cmp	r8, r14	# range_stop_vector, current_vector
 2942 1055 4E8D3C09 		lea	r15, [rcx+r9]	# ivtmp.214,
 2943              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2944              		.loc 1 455 41 view .LVU998
 2945 1059 C57D7F11 		vmovdqa	YMMWORD PTR [rcx], ymm10	# MEM[base: _196, offset: 0B], tmp384
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2946              		.loc 1 454 48 is_stmt 1 view .LVU999
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2947              		.loc 1 454 11 view .LVU1000
 2948              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2949              		.loc 1 454 5 is_stmt 0 view .LVU1001
 2950 105d 7221     		jb	.L64	#,
 455:sieve_extend.c ****     }
 2951              		.loc 1 455 9 is_stmt 1 view .LVU1002
 2952              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2953              		.loc 1 455 41 is_stmt 0 view .LVU1003
 2954 105f C4417DEB 		vpor	ymm11, ymm0, YMMWORD PTR [r15]	# tmp387, quadmask.56_36, MEM[base: _196, offset: 0B]
 2954      1F
 2955              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2956              		.loc 1 454 63 view .LVU1004
 2957 1064 498D0416 		lea	rax, [r14+rdx]	# current_vector,
 2958              	# sieve_extend.c:455:         bitarray_vector[current_vector] |= mask;
 455:sieve_extend.c ****     }
 2959              		.loc 1 455 41 view .LVU1005
 2960 1068 C4417D7F 		vmovdqa	YMMWORD PTR [r15], ymm11	# MEM[base: _196, offset: 0B], tmp387
 2960      1F
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2961              		.loc 1 454 48 is_stmt 1 view .LVU1006
 2962              	.LVL142:
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2963              		.loc 1 454 11 view .LVU1007
 2964 106d 4D01CF   		add	r15, r9	# ivtmp.214, _207
 2965              	# sieve_extend.c:454:     for(; current_vector <= range_stop_vector; current_vector += step) {
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2966              		.loc 1 454 5 is_stmt 0 view .LVU1008
 2967 1070 4939C0   		cmp	r8, rax	# range_stop_vector, current_vector
 2968 1073 0F8354FF 		jnb	.L65	#,
 2968      FFFF
GAS LISTING /tmp/ccNeV1of.s 			page 92


 2969              	.LVL143:
 2970 1079 0F1F8000 		.p2align 4
 2970      000000
 2971              		.p2align 3
 2972              	.L64:
 454:sieve_extend.c ****         bitarray_vector[current_vector] |= mask;
 2973              		.loc 1 454 5 view .LVU1009
 2974              	.LBE345:
 2975              	.LBE347:
 2976              	.LBE348:
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 2977              		.loc 1 489 41 is_stmt 1 view .LVU1010
 2978              	# sieve_extend.c:489:     for (counter_t index = range_start; index < range_stop_unique;) {
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 2979              		.loc 1 489 5 is_stmt 0 view .LVU1011
 2980 1080 48397424 		cmp	QWORD PTR 16[rsp], rsi	# %sfp, range_start
 2980      10
 2981 1085 0F87F5FC 		ja	.L66	#,
 2981      FFFF
 2982 108b E981FCFF 		jmp	.L234	#
 2982      FF
 2983              	.LVL144:
 2984              	.L56:
 489:sieve_extend.c ****         const counter_t current_vector_start_word =  vectorindex(index) << (SHIFT_VECTOR - SHIFT_WO
 2985              		.loc 1 489 5 view .LVU1012
 2986              	.LBE349:
 2987              	.LBB350:
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 2988              		.loc 1 472 49 is_stmt 1 view .LVU1013
 2989              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 2990              		.loc 1 472 13 is_stmt 0 view .LVU1014
 2991 1090 4839CE   		cmp	rsi, rcx	# range_start, range_stop
 2992              		.p2align 4,,3
 2993 1093 0F877BFC 		ja	.L54	#,
 2993      FFFF
 2994              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 2995              		.loc 1 473 52 view .LVU1015
 2996 1099 41BE0100 		mov	r14d, 1	# tmp179,
 2996      0000
 2997              	.LVL145:
 2998              	.L59:
 473:sieve_extend.c ****             return;                 
 2999              		.loc 1 473 17 is_stmt 1 discriminator 3 view .LVU1016
 3000              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3001              		.loc 1 473 49 is_stmt 0 discriminator 3 view .LVU1017
 3002 109f 4989F7   		mov	r15, rsi	# tmp175, range_start
 3003              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3004              		.loc 1 473 52 discriminator 3 view .LVU1018
 3005 10a2 C442C9F7 		shlx	r9, r14, rsi	# tmp178, tmp179, range_start
 3005      CE
 3006              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3007              		.loc 1 473 49 discriminator 3 view .LVU1019
GAS LISTING /tmp/ccNeV1of.s 			page 93


 3008 10a7 49C1EF06 		shr	r15, 6	# tmp175,
 3009              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3010              		.loc 1 472 76 discriminator 3 view .LVU1020
 3011 10ab 4801D6   		add	rsi, rdx	# range_start, step
 3012              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3013              		.loc 1 473 49 discriminator 3 view .LVU1021
 3014 10ae 4E090CFF 		or	QWORD PTR [rdi+r15*8], r9	# *_14, tmp178
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3015              		.loc 1 472 70 is_stmt 1 discriminator 3 view .LVU1022
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3016              		.loc 1 472 49 discriminator 3 view .LVU1023
 3017              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3018              		.loc 1 472 13 is_stmt 0 discriminator 3 view .LVU1024
 3019 10b2 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 3020 10b5 0F8259FC 		jb	.L54	#,
 3020      FFFF
 473:sieve_extend.c ****             return;                 
 3021              		.loc 1 473 17 is_stmt 1 view .LVU1025
 3022              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3023              		.loc 1 473 49 is_stmt 0 view .LVU1026
 3024 10bb 4989F4   		mov	r12, rsi	# tmp294, range_start
 3025              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3026              		.loc 1 473 52 view .LVU1027
 3027 10be C442C9F7 		shlx	r13, r14, rsi	# tmp297, tmp179, range_start
 3027      EE
 3028              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3029              		.loc 1 473 49 view .LVU1028
 3030 10c3 49C1EC06 		shr	r12, 6	# tmp294,
 3031              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3032              		.loc 1 472 76 view .LVU1029
 3033 10c7 4801D6   		add	rsi, rdx	# range_start, step
 3034              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3035              		.loc 1 473 49 view .LVU1030
 3036 10ca 4E092CE7 		or	QWORD PTR [rdi+r12*8], r13	# *_14, tmp297
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3037              		.loc 1 472 70 is_stmt 1 view .LVU1031
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3038              		.loc 1 472 49 view .LVU1032
 3039              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3040              		.loc 1 472 13 is_stmt 0 view .LVU1033
 3041 10ce 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 3042 10d1 0F823DFC 		jb	.L54	#,
 3042      FFFF
 473:sieve_extend.c ****             return;                 
 3043              		.loc 1 473 17 is_stmt 1 view .LVU1034
 3044              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3045              		.loc 1 473 49 is_stmt 0 view .LVU1035
GAS LISTING /tmp/ccNeV1of.s 			page 94


 3046 10d7 4889F0   		mov	rax, rsi	# tmp299, range_start
 3047              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3048              		.loc 1 473 52 view .LVU1036
 3049 10da C4C2C9F7 		shlx	rbx, r14, rsi	# tmp302, tmp179, range_start
 3049      DE
 3050              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3051              		.loc 1 473 49 view .LVU1037
 3052 10df 48C1E806 		shr	rax, 6	# tmp299,
 3053              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3054              		.loc 1 472 76 view .LVU1038
 3055 10e3 4801D6   		add	rsi, rdx	# range_start, step
 3056              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3057              		.loc 1 473 49 view .LVU1039
 3058 10e6 48091CC7 		or	QWORD PTR [rdi+rax*8], rbx	# *_14, tmp302
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3059              		.loc 1 472 70 is_stmt 1 view .LVU1040
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3060              		.loc 1 472 49 view .LVU1041
 3061              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3062              		.loc 1 472 13 is_stmt 0 view .LVU1042
 3063 10ea 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 3064 10ed 0F8221FC 		jb	.L54	#,
 3064      FFFF
 473:sieve_extend.c ****             return;                 
 3065              		.loc 1 473 17 is_stmt 1 view .LVU1043
 3066              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3067              		.loc 1 473 49 is_stmt 0 view .LVU1044
 3068 10f3 4989F0   		mov	r8, rsi	# tmp304, range_start
 3069              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3070              		.loc 1 473 52 view .LVU1045
 3071 10f6 C442C9F7 		shlx	r10, r14, rsi	# tmp307, tmp179, range_start
 3071      D6
 3072              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3073              		.loc 1 473 49 view .LVU1046
 3074 10fb 49C1E806 		shr	r8, 6	# tmp304,
 3075              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3076              		.loc 1 472 76 view .LVU1047
 3077 10ff 4801D6   		add	rsi, rdx	# range_start, step
 3078              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3079              		.loc 1 473 49 view .LVU1048
 3080 1102 4E0914C7 		or	QWORD PTR [rdi+r8*8], r10	# *_14, tmp307
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3081              		.loc 1 472 70 is_stmt 1 view .LVU1049
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3082              		.loc 1 472 49 view .LVU1050
 3083              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
GAS LISTING /tmp/ccNeV1of.s 			page 95


 3084              		.loc 1 472 13 is_stmt 0 view .LVU1051
 3085 1106 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 3086 1109 0F8205FC 		jb	.L54	#,
 3086      FFFF
 473:sieve_extend.c ****             return;                 
 3087              		.loc 1 473 17 is_stmt 1 view .LVU1052
 3088              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3089              		.loc 1 473 49 is_stmt 0 view .LVU1053
 3090 110f 4989F3   		mov	r11, rsi	# tmp309, range_start
 3091              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3092              		.loc 1 473 52 view .LVU1054
 3093 1112 C442C9F7 		shlx	r15, r14, rsi	# tmp312, tmp179, range_start
 3093      FE
 3094              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3095              		.loc 1 473 49 view .LVU1055
 3096 1117 49C1EB06 		shr	r11, 6	# tmp309,
 3097              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3098              		.loc 1 472 76 view .LVU1056
 3099 111b 4801D6   		add	rsi, rdx	# range_start, step
 3100              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3101              		.loc 1 473 49 view .LVU1057
 3102 111e 4E093CDF 		or	QWORD PTR [rdi+r11*8], r15	# *_14, tmp312
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3103              		.loc 1 472 70 is_stmt 1 view .LVU1058
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3104              		.loc 1 472 49 view .LVU1059
 3105              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3106              		.loc 1 472 13 is_stmt 0 view .LVU1060
 3107 1122 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 3108 1125 0F82E9FB 		jb	.L54	#,
 3108      FFFF
 473:sieve_extend.c ****             return;                 
 3109              		.loc 1 473 17 is_stmt 1 view .LVU1061
 3110              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3111              		.loc 1 473 49 is_stmt 0 view .LVU1062
 3112 112b 4989F4   		mov	r12, rsi	# tmp314, range_start
 3113              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3114              		.loc 1 473 52 view .LVU1063
 3115 112e C442C9F7 		shlx	r9, r14, rsi	# tmp317, tmp179, range_start
 3115      CE
 3116              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3117              		.loc 1 473 49 view .LVU1064
 3118 1133 49C1EC06 		shr	r12, 6	# tmp314,
 3119              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3120              		.loc 1 472 76 view .LVU1065
 3121 1137 4801D6   		add	rsi, rdx	# range_start, step
 3122              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
GAS LISTING /tmp/ccNeV1of.s 			page 96


 473:sieve_extend.c ****             return;                 
 3123              		.loc 1 473 49 view .LVU1066
 3124 113a 4E090CE7 		or	QWORD PTR [rdi+r12*8], r9	# *_14, tmp317
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3125              		.loc 1 472 70 is_stmt 1 view .LVU1067
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3126              		.loc 1 472 49 view .LVU1068
 3127              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3128              		.loc 1 472 13 is_stmt 0 view .LVU1069
 3129 113e 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 3130 1141 0F82CDFB 		jb	.L54	#,
 3130      FFFF
 473:sieve_extend.c ****             return;                 
 3131              		.loc 1 473 17 is_stmt 1 view .LVU1070
 3132              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3133              		.loc 1 473 49 is_stmt 0 view .LVU1071
 3134 1147 4989F5   		mov	r13, rsi	# tmp319, range_start
 3135              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3136              		.loc 1 473 52 view .LVU1072
 3137 114a C4C2C9F7 		shlx	rax, r14, rsi	# tmp322, tmp179, range_start
 3137      C6
 3138              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3139              		.loc 1 473 49 view .LVU1073
 3140 114f 49C1ED06 		shr	r13, 6	# tmp319,
 3141              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3142              		.loc 1 472 76 view .LVU1074
 3143 1153 4801D6   		add	rsi, rdx	# range_start, step
 3144              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3145              		.loc 1 473 49 view .LVU1075
 3146 1156 4A0904EF 		or	QWORD PTR [rdi+r13*8], rax	# *_14, tmp322
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3147              		.loc 1 472 70 is_stmt 1 view .LVU1076
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3148              		.loc 1 472 49 view .LVU1077
 3149              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3150              		.loc 1 472 13 is_stmt 0 view .LVU1078
 3151 115a 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 3152 115d 0F82B1FB 		jb	.L54	#,
 3152      FFFF
 473:sieve_extend.c ****             return;                 
 3153              		.loc 1 473 17 is_stmt 1 view .LVU1079
 3154              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3155              		.loc 1 473 49 is_stmt 0 view .LVU1080
 3156 1163 4889F3   		mov	rbx, rsi	# tmp324, range_start
 3157              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3158              		.loc 1 473 52 view .LVU1081
 3159 1166 C442C9F7 		shlx	r8, r14, rsi	# tmp327, tmp179, range_start
 3159      C6
GAS LISTING /tmp/ccNeV1of.s 			page 97


 3160              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3161              		.loc 1 473 49 view .LVU1082
 3162 116b 48C1EB06 		shr	rbx, 6	# tmp324,
 3163              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3164              		.loc 1 472 76 view .LVU1083
 3165 116f 4801D6   		add	rsi, rdx	# range_start, step
 3166              	# sieve_extend.c:473:                 bitarray_word[wordindex(index)] |= markmask(index);
 473:sieve_extend.c ****             return;                 
 3167              		.loc 1 473 49 view .LVU1084
 3168 1172 4C0904DF 		or	QWORD PTR [rdi+rbx*8], r8	# *_14, tmp327
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3169              		.loc 1 472 70 is_stmt 1 view .LVU1085
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3170              		.loc 1 472 49 view .LVU1086
 3171              	# sieve_extend.c:472:             for (counter_t index = range_start; index <= range_stop; index +=
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3172              		.loc 1 472 13 is_stmt 0 view .LVU1087
 3173 1176 4839F1   		cmp	rcx, rsi	# range_stop, range_start
 3174 1179 0F8320FF 		jnb	.L59	#,
 3174      FFFF
 3175 117f E990FBFF 		jmp	.L54	#
 3175      FF
 3176              	.LVL146:
 3177              	.L237:
 472:sieve_extend.c ****                 bitarray_word[wordindex(index)] |= markmask(index);
 3178              		.loc 1 472 13 view .LVU1088
 3179              	.LBE350:
 3180              	# sieve_extend.c:509: }
 509:sieve_extend.c **** 
 3181              		.loc 1 509 1 view .LVU1089
 3182 1184 E8000000 		call	__stack_chk_fail@PLT	#
 3182      00
 3183              	.LVL147:
 3184              		.cfi_endproc
 3185              	.LFE67:
 3187 1189 0F1F8000 		.p2align 4
 3187      000000
 3189              	extendSieve_aligned:
 3190              	.LVL148:
 3191              	.LFB69:
 545:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using aligned (%ju copies)\n"
 3192              		.loc 1 545 140 is_stmt 1 view -0
 3193              		.cfi_startproc
 546:sieve_extend.c **** 
 3194              		.loc 1 546 5 view .LVU1091
 548:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 3195              		.loc 1 548 5 view .LVU1092
 3196              	# sieve_extend.c:545: static void extendSieve_aligned(bitword_t* bitarray, const counter_t source_s
 545:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using aligned (%ju copies)\n"
 3197              		.loc 1 545 140 is_stmt 0 view .LVU1093
 3198 1190 55       		push	rbp	#
 3199              		.cfi_def_cfa_offset 16
 3200              		.cfi_offset 6, -16
 3201 1191 4889E5   		mov	rbp, rsp	#,
 3202              		.cfi_def_cfa_register 6
GAS LISTING /tmp/ccNeV1of.s 			page 98


 3203 1194 4157     		push	r15	#
 3204 1196 4156     		push	r14	#
 3205 1198 4155     		push	r13	#
 3206              		.cfi_offset 15, -24
 3207              		.cfi_offset 14, -32
 3208              		.cfi_offset 13, -40
 3209 119a 4989FD   		mov	r13, rdi	# bitarray, tmp295
 3210 119d 4154     		push	r12	#
 3211              		.cfi_offset 12, -48
 3212 119f 4989D4   		mov	r12, rdx	# size, tmp297
 3213 11a2 53       		push	rbx	#
 3214              		.cfi_offset 3, -56
 3215              	# sieve_extend.c:548:     const counter_t destination_stop_word = wordindex(destination_stop);
 548:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 3216              		.loc 1 548 21 view .LVU1094
 3217 11a3 4889CB   		mov	rbx, rcx	# tmp298, tmp298
 3218              	# sieve_extend.c:549:     const counter_t copy_start = source_start + size;
 549:sieve_extend.c ****     counter_t source_word = wordindex(source_start);
 3219              		.loc 1 549 21 view .LVU1095
 3220 11a6 488D0C16 		lea	rcx, [rsi+rdx]	# copy_start,
 3221              	.LVL149:
 3222              	# sieve_extend.c:545: static void extendSieve_aligned(bitword_t* bitarray, const counter_t source_s
 545:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using aligned (%ju copies)\n"
 3223              		.loc 1 545 140 view .LVU1096
 3224 11aa 4883E4E0 		and	rsp, -32	#,
 3225              	# sieve_extend.c:551:     counter_t copy_word = wordindex(copy_start);
 551:sieve_extend.c ****     
 3226              		.loc 1 551 15 view .LVU1097
 3227 11ae 4889C8   		mov	rax, rcx	# ivtmp.275, copy_start
 3228              	# sieve_extend.c:550:     counter_t source_word = wordindex(source_start);
 550:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
 3229              		.loc 1 550 15 view .LVU1098
 3230 11b1 48C1EE06 		shr	rsi, 6	# source_start,
 3231              	.LVL150:
 3232              	# sieve_extend.c:545: static void extendSieve_aligned(bitword_t* bitarray, const counter_t source_s
 545:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using aligned (%ju copies)\n"
 3233              		.loc 1 545 140 view .LVU1099
 3234 11b5 488D6424 		lea	rsp, -32[rsp]	#,
 3234      E0
 3235              	# sieve_extend.c:551:     counter_t copy_word = wordindex(copy_start);
 551:sieve_extend.c ****     
 3236              		.loc 1 551 15 view .LVU1100
 3237 11ba 48C1E806 		shr	rax, 6	# ivtmp.275,
 3238              	# sieve_extend.c:553:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 553:sieve_extend.c **** 
 3239              		.loc 1 553 35 view .LVU1101
 3240 11be 488D3CF5 		lea	rdi, 0[0+rsi*8]	# _4,
 3240      00000000 
 3241              	.LVL151:
 3242              	# sieve_extend.c:548:     const counter_t destination_stop_word = wordindex(destination_stop);
 548:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 3243              		.loc 1 548 21 view .LVU1102
 3244 11c6 48C1EB06 		shr	rbx, 6	# tmp298,
 3245              	.LVL152:
 549:sieve_extend.c ****     counter_t source_word = wordindex(source_start);
 3246              		.loc 1 549 5 is_stmt 1 view .LVU1103
 550:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
GAS LISTING /tmp/ccNeV1of.s 			page 99


 3247              		.loc 1 550 5 view .LVU1104
 3248              	# sieve_extend.c:553:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 553:sieve_extend.c **** 
 3249              		.loc 1 553 35 is_stmt 0 view .LVU1105
 3250 11ca 4D8D743D 		lea	r14, 0[r13+rdi]	# _5,
 3250      00
 3251              	# sieve_extend.c:550:     counter_t source_word = wordindex(source_start);
 550:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
 3252              		.loc 1 550 15 view .LVU1106
 3253 11cf 48897424 		mov	QWORD PTR 8[rsp], rsi	# %sfp, source_word
 3253      08
 3254              	.LVL153:
 551:sieve_extend.c ****     
 3255              		.loc 1 551 5 is_stmt 1 view .LVU1107
 553:sieve_extend.c **** 
 3256              		.loc 1 553 5 view .LVU1108
 3257              	# sieve_extend.c:553:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 553:sieve_extend.c **** 
 3258              		.loc 1 553 52 is_stmt 0 view .LVU1109
 3259 11d4 89CE     		mov	esi, ecx	# tmp183, copy_start
 3260              	.LVL154:
 3261              	# sieve_extend.c:555:     while (copy_word + size <= destination_stop_word) {
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 3262              		.loc 1 555 22 view .LVU1110
 3263 11d6 498D0C04 		lea	rcx, [r12+rax]	# ivtmp.275,
 3264              	.LVL155:
 3265              	# sieve_extend.c:553:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 553:sieve_extend.c **** 
 3266              		.loc 1 553 52 view .LVU1111
 3267 11da F7D6     		not	esi	# tmp183
 3268              	# sieve_extend.c:553:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 553:sieve_extend.c **** 
 3269              		.loc 1 553 35 view .LVU1112
 3270 11dc 48893C24 		mov	QWORD PTR [rsp], rdi	# %sfp, _4
 3271              	# sieve_extend.c:553:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 553:sieve_extend.c **** 
 3272              		.loc 1 553 52 view .LVU1113
 3273 11e0 48C7C2FF 		mov	rdx, -1	# tmp186,
 3273      FFFFFF
 3274              	.LVL156:
 553:sieve_extend.c **** 
 3275              		.loc 1 553 52 view .LVU1114
 3276 11e7 C462CBF7 		shrx	r8, rdx, rsi	# tmp185, tmp186, tmp183
 3276      C2
 3277              	# sieve_extend.c:553:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 553:sieve_extend.c **** 
 3278              		.loc 1 553 49 view .LVU1115
 3279 11ec C442B8F2 		andn	r9, r8, QWORD PTR [r14]	# tmp189, tmp185, *_5
 3279      0E
 3280              	# sieve_extend.c:553:     bitarray[copy_word] = bitarray[source_word] & ~chopmask(copy_start);
 553:sieve_extend.c **** 
 3281              		.loc 1 553 25 view .LVU1116
 3282 11f1 4D894CC5 		mov	QWORD PTR 0[r13+rax*8], r9	# *_13, tmp189
 3282      00
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 3283              		.loc 1 555 5 is_stmt 1 view .LVU1117
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
GAS LISTING /tmp/ccNeV1of.s 			page 100


 3284              		.loc 1 555 11 view .LVU1118
 3285 11f6 4839CB   		cmp	rbx, rcx	# destination_stop_word, ivtmp.275
 3286 11f9 0F827101 		jb	.L239	#,
 3286      0000
 3287 11ff 4C8D14C5 		lea	r10, 0[0+rax*8]	# _12,
 3287      00000000 
 3288 1207 488D04CD 		lea	rax, 0[0+rcx*8]	# tmp191,
 3288      00000000 
 3289              	.LVL157:
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 3290              		.loc 1 555 11 is_stmt 0 view .LVU1119
 3291 120f 4D01EA   		add	r10, r13	# tmp190, bitarray
 3292              	# sieve_extend.c:556:         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*
 556:sieve_extend.c ****         copy_word += size;
 3293              		.loc 1 556 9 view .LVU1120
 3294 1212 4E8D3CE5 		lea	r15, 0[0+r12*8]	# _15,
 3294      00000000 
 3295 121a 4929C2   		sub	r10, rax	# tmp190, tmp191
 3296 121d 4C895424 		mov	QWORD PTR 24[rsp], r10	# %sfp, tmp190
 3296      18
 3297              	.LVL158:
 3298              	.L240:
 556:sieve_extend.c ****         copy_word += size;
 3299              		.loc 1 556 9 is_stmt 1 view .LVU1121
 3300              	.LBB351:
 3301              	.LBI351:
 3302              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h"
   1:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* Copyright (C) 2004-2020 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    <https://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _BITS_STRING_FORTIFIED_H
  19:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #define _BITS_STRING_FORTIFIED_H 1
  20:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  21:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _STRING_H
  22:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** # error "Never use <bits/string_fortified.h> directly; include <string.h> instead."
  23:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  24:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  25:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  26:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __warndecl (__warn_memset_zero_len,
  27:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  28:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  29:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
GAS LISTING /tmp/ccNeV1of.s 			page 101


  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
 3303              		.loc 2 31 1 view .LVU1122
 3304              	.LBB352:
  32:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
  33:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
 3305              		.loc 2 34 3 view .LVU1123
 3306              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 3307              		.loc 2 34 10 is_stmt 0 view .LVU1124
 3308 1222 4C8B5C24 		mov	r11, QWORD PTR 24[rsp]	# _189, %sfp
 3308      18
 3309 1227 4C89FA   		mov	rdx, r15	#, _15
 3310 122a 48894C24 		mov	QWORD PTR 16[rsp], rcx	# %sfp, ivtmp.275
 3310      10
 3311 122f 4C89F6   		mov	rsi, r14	#, _5
 3312 1232 498D3CCB 		lea	rdi, [r11+rcx*8]	# tmp193,
 3313 1236 E8000000 		call	memcpy@PLT	#
 3313      00
 3314              	.LVL159:
 3315              		.loc 2 34 10 view .LVU1125
 3316              	.LBE352:
 3317              	.LBE351:
 557:sieve_extend.c ****     }
 3318              		.loc 1 557 9 is_stmt 1 view .LVU1126
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 3319              		.loc 1 555 11 view .LVU1127
 3320 123b 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.275, %sfp
 3320      10
 3321 1240 4A8D0C20 		lea	rcx, [rax+r12]	# ivtmp.275,
 3322 1244 4839CB   		cmp	rbx, rcx	# destination_stop_word, ivtmp.275
 3323 1247 0F822301 		jb	.L239	#,
 3323      0000
 556:sieve_extend.c ****         copy_word += size;
 3324              		.loc 1 556 9 view .LVU1128
 3325              	.LVL160:
 3326              	.LBB360:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 3327              		.loc 2 31 1 view .LVU1129
 3328              	.LBB353:
 3329              		.loc 2 34 3 view .LVU1130
 3330              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 3331              		.loc 2 34 10 is_stmt 0 view .LVU1131
 3332 124d 488B7C24 		mov	rdi, QWORD PTR 24[rsp]	# _189, %sfp
 3332      18
 3333 1252 4C89F6   		mov	rsi, r14	#, _5
 3334 1255 48894C24 		mov	QWORD PTR 16[rsp], rcx	# %sfp, ivtmp.275
 3334      10
 3335              	.LVL161:
 3336              		.loc 2 34 10 view .LVU1132
 3337 125a 4C89FA   		mov	rdx, r15	#, _15
 3338 125d 488D3CCF 		lea	rdi, [rdi+rcx*8]	# tmp276,
 3339 1261 E8000000 		call	memcpy@PLT	#
 3339      00
 3340              	.LVL162:
 3341              		.loc 2 34 10 view .LVU1133
 3342              	.LBE353:
 3343              	.LBE360:
GAS LISTING /tmp/ccNeV1of.s 			page 102


 557:sieve_extend.c ****     }
 3344              		.loc 1 557 9 is_stmt 1 view .LVU1134
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 3345              		.loc 1 555 11 view .LVU1135
 3346 1266 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.275, %sfp
 3346      10
 3347 126b 4A8D3420 		lea	rsi, [rax+r12]	# ivtmp.275,
 3348 126f 4839F3   		cmp	rbx, rsi	# destination_stop_word, ivtmp.275
 3349 1272 0F82F800 		jb	.L239	#,
 3349      0000
 556:sieve_extend.c ****         copy_word += size;
 3350              		.loc 1 556 9 view .LVU1136
 3351              	.LVL163:
 3352              	.LBB361:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 3353              		.loc 2 31 1 view .LVU1137
 3354              	.LBB354:
 3355              		.loc 2 34 3 view .LVU1138
 3356              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 3357              		.loc 2 34 10 is_stmt 0 view .LVU1139
 3358 1278 488B5424 		mov	rdx, QWORD PTR 24[rsp]	# _189, %sfp
 3358      18
 3359 127d 48897424 		mov	QWORD PTR 16[rsp], rsi	# %sfp, ivtmp.275
 3359      10
 3360 1282 488D3CF2 		lea	rdi, [rdx+rsi*8]	# tmp279,
 3361 1286 4C89FA   		mov	rdx, r15	#, _15
 3362 1289 4C89F6   		mov	rsi, r14	#, _5
 3363 128c E8000000 		call	memcpy@PLT	#
 3363      00
 3364              	.LVL164:
 3365              		.loc 2 34 10 view .LVU1140
 3366              	.LBE354:
 3367              	.LBE361:
 557:sieve_extend.c ****     }
 3368              		.loc 1 557 9 is_stmt 1 view .LVU1141
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 3369              		.loc 1 555 11 view .LVU1142
 3370 1291 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.275, %sfp
 3370      10
 3371 1296 4E8D0420 		lea	r8, [rax+r12]	# ivtmp.275,
 3372 129a 4C39C3   		cmp	rbx, r8	# destination_stop_word, ivtmp.275
 3373 129d 0F82CD00 		jb	.L239	#,
 3373      0000
 556:sieve_extend.c ****         copy_word += size;
 3374              		.loc 1 556 9 view .LVU1143
 3375              	.LVL165:
 3376              	.LBB362:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 3377              		.loc 2 31 1 view .LVU1144
 3378              	.LBB355:
 3379              		.loc 2 34 3 view .LVU1145
 3380              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 3381              		.loc 2 34 10 is_stmt 0 view .LVU1146
 3382 12a3 4C8B4C24 		mov	r9, QWORD PTR 24[rsp]	# _189, %sfp
 3382      18
 3383 12a8 4C89FA   		mov	rdx, r15	#, _15
 3384 12ab 4C894424 		mov	QWORD PTR 16[rsp], r8	# %sfp, ivtmp.275
GAS LISTING /tmp/ccNeV1of.s 			page 103


 3384      10
 3385 12b0 4C89F6   		mov	rsi, r14	#, _5
 3386 12b3 4B8D3CC1 		lea	rdi, [r9+r8*8]	# tmp282,
 3387 12b7 E8000000 		call	memcpy@PLT	#
 3387      00
 3388              	.LVL166:
 3389              		.loc 2 34 10 view .LVU1147
 3390              	.LBE355:
 3391              	.LBE362:
 557:sieve_extend.c ****     }
 3392              		.loc 1 557 9 is_stmt 1 view .LVU1148
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 3393              		.loc 1 555 11 view .LVU1149
 3394 12bc 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.275, %sfp
 3394      10
 3395 12c1 4E8D1420 		lea	r10, [rax+r12]	# ivtmp.275,
 3396 12c5 4C39D3   		cmp	rbx, r10	# destination_stop_word, ivtmp.275
 3397 12c8 0F82A200 		jb	.L239	#,
 3397      0000
 556:sieve_extend.c ****         copy_word += size;
 3398              		.loc 1 556 9 view .LVU1150
 3399              	.LVL167:
 3400              	.LBB363:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 3401              		.loc 2 31 1 view .LVU1151
 3402              	.LBB356:
 3403              		.loc 2 34 3 view .LVU1152
 3404              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 3405              		.loc 2 34 10 is_stmt 0 view .LVU1153
 3406 12ce 4C8B5C24 		mov	r11, QWORD PTR 24[rsp]	# _189, %sfp
 3406      18
 3407 12d3 4C89FA   		mov	rdx, r15	#, _15
 3408 12d6 4C895424 		mov	QWORD PTR 16[rsp], r10	# %sfp, ivtmp.275
 3408      10
 3409 12db 4C89F6   		mov	rsi, r14	#, _5
 3410 12de 4B8D3CD3 		lea	rdi, [r11+r10*8]	# tmp285,
 3411 12e2 E8000000 		call	memcpy@PLT	#
 3411      00
 3412              	.LVL168:
 3413              		.loc 2 34 10 view .LVU1154
 3414              	.LBE356:
 3415              	.LBE363:
 557:sieve_extend.c ****     }
 3416              		.loc 1 557 9 is_stmt 1 view .LVU1155
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 3417              		.loc 1 555 11 view .LVU1156
 3418 12e7 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.275, %sfp
 3418      10
 3419 12ec 4A8D0C20 		lea	rcx, [rax+r12]	# ivtmp.275,
 3420 12f0 4839CB   		cmp	rbx, rcx	# destination_stop_word, ivtmp.275
 3421 12f3 727B     		jb	.L239	#,
 556:sieve_extend.c ****         copy_word += size;
 3422              		.loc 1 556 9 view .LVU1157
 3423              	.LVL169:
 3424              	.LBB364:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 3425              		.loc 2 31 1 view .LVU1158
GAS LISTING /tmp/ccNeV1of.s 			page 104


 3426              	.LBB357:
 3427              		.loc 2 34 3 view .LVU1159
 3428              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 3429              		.loc 2 34 10 is_stmt 0 view .LVU1160
 3430 12f5 488B7C24 		mov	rdi, QWORD PTR 24[rsp]	# _189, %sfp
 3430      18
 3431 12fa 4C89F6   		mov	rsi, r14	#, _5
 3432 12fd 48894C24 		mov	QWORD PTR 16[rsp], rcx	# %sfp, ivtmp.275
 3432      10
 3433 1302 4C89FA   		mov	rdx, r15	#, _15
 3434 1305 488D3CCF 		lea	rdi, [rdi+rcx*8]	# tmp288,
 3435 1309 E8000000 		call	memcpy@PLT	#
 3435      00
 3436              	.LVL170:
 3437              		.loc 2 34 10 view .LVU1161
 3438              	.LBE357:
 3439              	.LBE364:
 557:sieve_extend.c ****     }
 3440              		.loc 1 557 9 is_stmt 1 view .LVU1162
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 3441              		.loc 1 555 11 view .LVU1163
 3442 130e 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.275, %sfp
 3442      10
 3443 1313 4A8D3420 		lea	rsi, [rax+r12]	# ivtmp.275,
 3444 1317 4839F3   		cmp	rbx, rsi	# destination_stop_word, ivtmp.275
 3445 131a 7254     		jb	.L239	#,
 556:sieve_extend.c ****         copy_word += size;
 3446              		.loc 1 556 9 view .LVU1164
 3447              	.LVL171:
 3448              	.LBB365:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 3449              		.loc 2 31 1 view .LVU1165
 3450              	.LBB358:
 3451              		.loc 2 34 3 view .LVU1166
 3452              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 3453              		.loc 2 34 10 is_stmt 0 view .LVU1167
 3454 131c 488B5424 		mov	rdx, QWORD PTR 24[rsp]	# _189, %sfp
 3454      18
 3455 1321 48897424 		mov	QWORD PTR 16[rsp], rsi	# %sfp, ivtmp.275
 3455      10
 3456 1326 488D3CF2 		lea	rdi, [rdx+rsi*8]	# tmp291,
 3457 132a 4C89FA   		mov	rdx, r15	#, _15
 3458 132d 4C89F6   		mov	rsi, r14	#, _5
 3459 1330 E8000000 		call	memcpy@PLT	#
 3459      00
 3460              	.LVL172:
 3461              		.loc 2 34 10 view .LVU1168
 3462              	.LBE358:
 3463              	.LBE365:
 557:sieve_extend.c ****     }
 3464              		.loc 1 557 9 is_stmt 1 view .LVU1169
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 3465              		.loc 1 555 11 view .LVU1170
 3466 1335 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.275, %sfp
 3466      10
 3467 133a 4E8D0420 		lea	r8, [rax+r12]	# ivtmp.275,
 3468 133e 4C39C3   		cmp	rbx, r8	# destination_stop_word, ivtmp.275
GAS LISTING /tmp/ccNeV1of.s 			page 105


 3469 1341 722D     		jb	.L239	#,
 556:sieve_extend.c ****         copy_word += size;
 3470              		.loc 1 556 9 view .LVU1171
 3471              	.LVL173:
 3472              	.LBB366:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 3473              		.loc 2 31 1 view .LVU1172
 3474              	.LBB359:
 3475              		.loc 2 34 3 view .LVU1173
 3476              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 3477              		.loc 2 34 10 is_stmt 0 view .LVU1174
 3478 1343 4C8B4C24 		mov	r9, QWORD PTR 24[rsp]	# _189, %sfp
 3478      18
 3479 1348 4C89FA   		mov	rdx, r15	#, _15
 3480 134b 4C894424 		mov	QWORD PTR 16[rsp], r8	# %sfp, ivtmp.275
 3480      10
 3481 1350 4C89F6   		mov	rsi, r14	#, _5
 3482 1353 4B8D3CC1 		lea	rdi, [r9+r8*8]	# tmp294,
 3483 1357 E8000000 		call	memcpy@PLT	#
 3483      00
 3484              	.LVL174:
 3485              		.loc 2 34 10 view .LVU1175
 3486              	.LBE359:
 3487              	.LBE366:
 557:sieve_extend.c ****     }
 3488              		.loc 1 557 9 is_stmt 1 view .LVU1176
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 3489              		.loc 1 555 11 view .LVU1177
 3490 135c 488B4424 		mov	rax, QWORD PTR 16[rsp]	# ivtmp.275, %sfp
 3490      10
 3491              	.LVL175:
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 3492              		.loc 1 555 11 is_stmt 0 view .LVU1178
 3493 1361 4A8D0C20 		lea	rcx, [rax+r12]	# ivtmp.275,
 3494              	.LVL176:
 555:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word], (uintmax_t)size*sizeof(bitword_t) );
 3495              		.loc 1 555 11 view .LVU1179
 3496 1365 4839CB   		cmp	rbx, rcx	# destination_stop_word, ivtmp.275
 3497 1368 0F83B4FE 		jnb	.L240	#,
 3497      FFFF
 3498              	.LVL177:
 3499 136e 6690     		.p2align 4
 3500              		.p2align 3
 3501              	.L239:
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3502              		.loc 1 560 10 is_stmt 1 view .LVU1180
 3503 1370 4839C3   		cmp	rbx, rax	# destination_stop_word, ivtmp.275
 3504 1373 0F864902 		jbe	.L350	#,
 3504      0000
 3505 1379 4C8B1424 		mov	r10, QWORD PTR [rsp]	# _4, %sfp
 3506 137d 4C8D24C5 		lea	r12, 0[0+rax*8]	# _41,
 3506      00000000 
 3507              	.LVL178:
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3508              		.loc 1 560 10 is_stmt 0 view .LVU1181
 3509 1385 4D8D7C24 		lea	r15, 32[r12]	# tmp199,
 3509      20
GAS LISTING /tmp/ccNeV1of.s 			page 106


 3510 138a 498D7A20 		lea	rdi, 32[r10]	# tmp202,
 3511 138e 4D39FA   		cmp	r10, r15	# _4, tmp199
 3512 1391 410F9DC3 		setge	r11b	#, tmp201
 3513 1395 4939FC   		cmp	r12, rdi	# _41, tmp202
 3514 1398 400F9DC6 		setge	sil	#, tmp204
 3515 139c 4108F3   		or	r11b, sil	# tmp201, tmp204
 3516 139f 0F844B02 		je	.L242	#,
 3516      0000
 3517 13a5 488D53FF 		lea	rdx, -1[rbx]	# tmp206,
 3518 13a9 4829C2   		sub	rdx, rax	# tmp207, ivtmp.275
 3519 13ac 4883FA05 		cmp	rdx, 5	# tmp207,
 3520 13b0 0F863A02 		jbe	.L242	#,
 3520      0000
 3521 13b6 4D89F7   		mov	r15, r14	# tmp210, _5
 3522 13b9 49C1EF03 		shr	r15, 3	# tmp210,
 3523 13bd 49F7DF   		neg	r15	# tmp211
 3524 13c0 4183E703 		and	r15d, 3	# prolog_loop_niters.243,
 3525 13c4 0F842E03 		je	.L249	#,
 3525      0000
 561:sieve_extend.c ****         source_word++;
 3526              		.loc 1 561 9 is_stmt 1 view .LVU1182
 3527              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3528              		.loc 1 561 39 is_stmt 0 view .LVU1183
 3529 13ca 4D8B06   		mov	r8, QWORD PTR [r14]	# _150, *_5
 3530 13cd 4983FF01 		cmp	r15, 1	# prolog_loop_niters.243,
 3531              	# sieve_extend.c:562:         source_word++;
 562:sieve_extend.c ****         copy_word++;
 3532              		.loc 1 562 20 view .LVU1184
 3533 13d1 4C8B4C24 		mov	r9, QWORD PTR 8[rsp]	# source_word, %sfp
 3533      08
 3534              	# sieve_extend.c:563:         copy_word++;
 563:sieve_extend.c ****     }
 3535              		.loc 1 563 18 view .LVU1185
 3536 13d6 4C8D7001 		lea	r14, 1[rax]	# copy_word,
 3537              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3538              		.loc 1 561 29 view .LVU1186
 3539 13da 4F894425 		mov	QWORD PTR 0[r13+r12], r8	# *_149, _150
 3539      00
 562:sieve_extend.c ****         copy_word++;
 3540              		.loc 1 562 9 is_stmt 1 view .LVU1187
 3541              	# sieve_extend.c:562:         source_word++;
 562:sieve_extend.c ****         copy_word++;
 3542              		.loc 1 562 20 is_stmt 0 view .LVU1188
 3543 13df 4D8D6101 		lea	r12, 1[r9]	# source_word,
 3544              	.LVL179:
 563:sieve_extend.c ****     }
 3545              		.loc 1 563 9 is_stmt 1 view .LVU1189
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3546              		.loc 1 560 10 view .LVU1190
 3547 13e3 742A     		je	.L243	#,
 561:sieve_extend.c ****         source_word++;
 3548              		.loc 1 561 9 view .LVU1191
 3549              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3550              		.loc 1 561 39 is_stmt 0 view .LVU1192
GAS LISTING /tmp/ccNeV1of.s 			page 107


 3551 13e5 4B8B4CE5 		mov	rcx, QWORD PTR 0[r13+r12*8]	# _163, *_160
 3551      00
 3552 13ea 4983FF03 		cmp	r15, 3	# prolog_loop_niters.243,
 3553              	# sieve_extend.c:562:         source_word++;
 562:sieve_extend.c ****         copy_word++;
 3554              		.loc 1 562 20 view .LVU1193
 3555 13ee 4D8D6102 		lea	r12, 2[r9]	# source_word,
 3556              	.LVL180:
 3557              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3558              		.loc 1 561 29 view .LVU1194
 3559 13f2 4B894CF5 		mov	QWORD PTR 0[r13+r14*8], rcx	# *_162, _163
 3559      00
 562:sieve_extend.c ****         copy_word++;
 3560              		.loc 1 562 9 is_stmt 1 view .LVU1195
 3561              	.LVL181:
 563:sieve_extend.c ****     }
 3562              		.loc 1 563 9 view .LVU1196
 3563              	# sieve_extend.c:563:         copy_word++;
 563:sieve_extend.c ****     }
 3564              		.loc 1 563 18 is_stmt 0 view .LVU1197
 3565 13f7 4C8D7002 		lea	r14, 2[rax]	# copy_word,
 3566              	.LVL182:
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3567              		.loc 1 560 10 is_stmt 1 view .LVU1198
 3568 13fb 7512     		jne	.L243	#,
 561:sieve_extend.c ****         source_word++;
 3569              		.loc 1 561 9 view .LVU1199
 3570              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3571              		.loc 1 561 39 is_stmt 0 view .LVU1200
 3572 13fd 4F8B54E5 		mov	r10, QWORD PTR 0[r13+r12*8]	# _89, *_86
 3572      00
 3573              	# sieve_extend.c:562:         source_word++;
 562:sieve_extend.c ****         copy_word++;
 3574              		.loc 1 562 20 view .LVU1201
 3575 1402 4D8D6103 		lea	r12, 3[r9]	# source_word,
 3576              	.LVL183:
 3577              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3578              		.loc 1 561 29 view .LVU1202
 3579 1406 4F8954F5 		mov	QWORD PTR 0[r13+r14*8], r10	# *_88, _89
 3579      00
 562:sieve_extend.c ****         copy_word++;
 3580              		.loc 1 562 9 is_stmt 1 view .LVU1203
 3581              	.LVL184:
 563:sieve_extend.c ****     }
 3582              		.loc 1 563 9 view .LVU1204
 3583              	# sieve_extend.c:563:         copy_word++;
 563:sieve_extend.c ****     }
 3584              		.loc 1 563 18 is_stmt 0 view .LVU1205
 3585 140b 4C8D7003 		lea	r14, 3[rax]	# copy_word,
 3586              	.LVL185:
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3587              		.loc 1 560 10 is_stmt 1 view .LVU1206
 3588              	.L243:
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/ccNeV1of.s 			page 108


 3589              		.loc 1 560 10 is_stmt 0 view .LVU1207
 3590 140f 488B7C24 		mov	rdi, QWORD PTR 8[rsp]	# source_word, %sfp
 3590      08
 3591 1414 4989DB   		mov	r11, rbx	# tmp212, destination_stop_word
 3592 1417 4D29FB   		sub	r11, r15	# tmp212, prolog_loop_niters.243
 3593 141a 4929C3   		sub	r11, rax	# niters.244, ivtmp.275
 3594 141d 4C01F8   		add	rax, r15	# tmp215, prolog_loop_niters.243
 3595 1420 4D89D8   		mov	r8, r11	# bnd.245, niters.244
 3596 1423 4C01FF   		add	rdi, r15	# source_word, prolog_loop_niters.243
 3597 1426 49C1E802 		shr	r8, 2	# bnd.245,
 3598 142a 4D8D7CC5 		lea	r15, 0[r13+rax*8]	# vectp.253,
 3598      00
 3599 142f 49C1E005 		sal	r8, 5	# _182,
 3600              	# sieve_extend.c:550:     counter_t source_word = wordindex(source_start);
 550:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
 3601              		.loc 1 550 15 view .LVU1208
 3602 1433 31C0     		xor	eax, eax	# ivtmp.266
 3603 1435 498D50E0 		lea	rdx, -32[r8]	# tmp228,
 3604 1439 498D74FD 		lea	rsi, 0[r13+rdi*8]	# vectp.250,
 3604      00
 3605 143e 48C1EA05 		shr	rdx, 5	# tmp226,
 3606 1442 4883C201 		add	rdx, 1	# tmp229,
 3607 1446 83E207   		and	edx, 7	# tmp230,
 3608 1449 0F849500 		je	.L245	#,
 3608      0000
 3609 144f 4883FA01 		cmp	rdx, 1	# tmp230,
 3610 1453 7477     		je	.L309	#,
 3611 1455 4883FA02 		cmp	rdx, 2	# tmp230,
 3612 1459 7462     		je	.L310	#,
 3613 145b 4883FA03 		cmp	rdx, 3	# tmp230,
 3614 145f 744D     		je	.L311	#,
 3615 1461 4883FA04 		cmp	rdx, 4	# tmp230,
 3616 1465 7438     		je	.L312	#,
 3617 1467 4883FA05 		cmp	rdx, 5	# tmp230,
 3618 146b 7423     		je	.L313	#,
 3619 146d 4883FA06 		cmp	rdx, 6	# tmp230,
 3620 1471 740E     		je	.L314	#,
 561:sieve_extend.c ****         source_word++;
 3621              		.loc 1 561 9 is_stmt 1 view .LVU1209
 3622              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3623              		.loc 1 561 29 is_stmt 0 view .LVU1210
 3624 1473 C5FD6F0E 		vmovdqa	ymm1, YMMWORD PTR [rsi]	# tmp330, MEM[base: vectp.250_119, index: ivtmp.266_180, offset: 0
 3625 1477 B8200000 		mov	eax, 32	# ivtmp.266,
 3625      00
 3626 147c C4C17E7F 		vmovdqu	YMMWORD PTR [r15], ymm1	# MEM[base: vectp.253_125, index: ivtmp.266_180, offset: 0B], tmp3
 3626      0F
 562:sieve_extend.c ****         copy_word++;
 3627              		.loc 1 562 9 is_stmt 1 view .LVU1211
 563:sieve_extend.c ****     }
 3628              		.loc 1 563 9 view .LVU1212
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3629              		.loc 1 560 10 view .LVU1213
 3630              	.L314:
 561:sieve_extend.c ****         source_word++;
 3631              		.loc 1 561 9 view .LVU1214
 3632              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/ccNeV1of.s 			page 109


 561:sieve_extend.c ****         source_word++;
 3633              		.loc 1 561 29 is_stmt 0 view .LVU1215
 3634 1481 C5FD6F3C 		vmovdqa	ymm7, YMMWORD PTR [rsi+rax]	# tmp331, MEM[base: vectp.250_119, index: ivtmp.266_180, offse
 3634      06
 3635 1486 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm7	# MEM[base: vectp.253_125, index: ivtmp.266_180, offset: 0B], 
 3635      3C07
 562:sieve_extend.c ****         copy_word++;
 3636              		.loc 1 562 9 is_stmt 1 view .LVU1216
 563:sieve_extend.c ****     }
 3637              		.loc 1 563 9 view .LVU1217
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3638              		.loc 1 560 10 view .LVU1218
 3639 148c 4883C020 		add	rax, 32	# ivtmp.266,
 3640              	.L313:
 561:sieve_extend.c ****         source_word++;
 3641              		.loc 1 561 9 view .LVU1219
 3642              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3643              		.loc 1 561 29 is_stmt 0 view .LVU1220
 3644 1490 C5FD6F34 		vmovdqa	ymm6, YMMWORD PTR [rsi+rax]	# tmp332, MEM[base: vectp.250_119, index: ivtmp.266_180, offse
 3644      06
 3645 1495 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm6	# MEM[base: vectp.253_125, index: ivtmp.266_180, offset: 0B], 
 3645      3407
 562:sieve_extend.c ****         copy_word++;
 3646              		.loc 1 562 9 is_stmt 1 view .LVU1221
 563:sieve_extend.c ****     }
 3647              		.loc 1 563 9 view .LVU1222
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3648              		.loc 1 560 10 view .LVU1223
 3649 149b 4883C020 		add	rax, 32	# ivtmp.266,
 3650              	.L312:
 561:sieve_extend.c ****         source_word++;
 3651              		.loc 1 561 9 view .LVU1224
 3652              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3653              		.loc 1 561 29 is_stmt 0 view .LVU1225
 3654 149f C5FD6F2C 		vmovdqa	ymm5, YMMWORD PTR [rsi+rax]	# tmp333, MEM[base: vectp.250_119, index: ivtmp.266_180, offse
 3654      06
 3655 14a4 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm5	# MEM[base: vectp.253_125, index: ivtmp.266_180, offset: 0B], 
 3655      2C07
 562:sieve_extend.c ****         copy_word++;
 3656              		.loc 1 562 9 is_stmt 1 view .LVU1226
 563:sieve_extend.c ****     }
 3657              		.loc 1 563 9 view .LVU1227
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3658              		.loc 1 560 10 view .LVU1228
 3659 14aa 4883C020 		add	rax, 32	# ivtmp.266,
 3660              	.L311:
 561:sieve_extend.c ****         source_word++;
 3661              		.loc 1 561 9 view .LVU1229
 3662              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3663              		.loc 1 561 29 is_stmt 0 view .LVU1230
 3664 14ae C5FD6F24 		vmovdqa	ymm4, YMMWORD PTR [rsi+rax]	# tmp334, MEM[base: vectp.250_119, index: ivtmp.266_180, offse
 3664      06
 3665 14b3 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm4	# MEM[base: vectp.253_125, index: ivtmp.266_180, offset: 0B], 
 3665      2407
GAS LISTING /tmp/ccNeV1of.s 			page 110


 562:sieve_extend.c ****         copy_word++;
 3666              		.loc 1 562 9 is_stmt 1 view .LVU1231
 563:sieve_extend.c ****     }
 3667              		.loc 1 563 9 view .LVU1232
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3668              		.loc 1 560 10 view .LVU1233
 3669 14b9 4883C020 		add	rax, 32	# ivtmp.266,
 3670              	.L310:
 561:sieve_extend.c ****         source_word++;
 3671              		.loc 1 561 9 view .LVU1234
 3672              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3673              		.loc 1 561 29 is_stmt 0 view .LVU1235
 3674 14bd C5FD6F04 		vmovdqa	ymm0, YMMWORD PTR [rsi+rax]	# tmp335, MEM[base: vectp.250_119, index: ivtmp.266_180, offse
 3674      06
 3675 14c2 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm0	# MEM[base: vectp.253_125, index: ivtmp.266_180, offset: 0B], 
 3675      0407
 562:sieve_extend.c ****         copy_word++;
 3676              		.loc 1 562 9 is_stmt 1 view .LVU1236
 563:sieve_extend.c ****     }
 3677              		.loc 1 563 9 view .LVU1237
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3678              		.loc 1 560 10 view .LVU1238
 3679 14c8 4883C020 		add	rax, 32	# ivtmp.266,
 3680              	.L309:
 561:sieve_extend.c ****         source_word++;
 3681              		.loc 1 561 9 view .LVU1239
 3682              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3683              		.loc 1 561 29 is_stmt 0 view .LVU1240
 3684 14cc C5FD6F14 		vmovdqa	ymm2, YMMWORD PTR [rsi+rax]	# tmp336, MEM[base: vectp.250_119, index: ivtmp.266_180, offse
 3684      06
 3685 14d1 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm2	# MEM[base: vectp.253_125, index: ivtmp.266_180, offset: 0B], 
 3685      1407
 562:sieve_extend.c ****         copy_word++;
 3686              		.loc 1 562 9 is_stmt 1 view .LVU1241
 563:sieve_extend.c ****     }
 3687              		.loc 1 563 9 view .LVU1242
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3688              		.loc 1 560 10 view .LVU1243
 3689 14d7 4883C020 		add	rax, 32	# ivtmp.266,
 3690 14db 4C39C0   		cmp	rax, r8	# ivtmp.266, _182
 3691 14de 0F848D00 		je	.L346	#,
 3691      0000
 3692              	.L245:
 561:sieve_extend.c ****         source_word++;
 3693              		.loc 1 561 9 view .LVU1244
 3694              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3695              		.loc 1 561 29 is_stmt 0 view .LVU1245
 3696 14e4 C5FD6F1C 		vmovdqa	ymm3, YMMWORD PTR [rsi+rax]	# tmp319, MEM[base: vectp.250_119, index: ivtmp.266_180, offse
 3696      06
 3697 14e9 C4C17E7F 		vmovdqu	YMMWORD PTR [r15+rax], ymm3	# MEM[base: vectp.253_125, index: ivtmp.266_180, offset: 0B], 
 3697      1C07
 562:sieve_extend.c ****         copy_word++;
 3698              		.loc 1 562 9 is_stmt 1 view .LVU1246
 563:sieve_extend.c ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 111


 3699              		.loc 1 563 9 view .LVU1247
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3700              		.loc 1 560 10 view .LVU1248
 561:sieve_extend.c ****         source_word++;
 3701              		.loc 1 561 9 view .LVU1249
 3702              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3703              		.loc 1 561 29 is_stmt 0 view .LVU1250
 3704 14ef C57D6F44 		vmovdqa	ymm8, YMMWORD PTR 32[rsi+rax]	# tmp320, MEM[base: vectp.250_119, index: ivtmp.266_180, off
 3704      0620
 3705 14f5 C4417E7F 		vmovdqu	YMMWORD PTR 32[r15+rax], ymm8	# MEM[base: vectp.253_125, index: ivtmp.266_180, offset: 0B]
 3705      440720
 562:sieve_extend.c ****         copy_word++;
 3706              		.loc 1 562 9 is_stmt 1 view .LVU1251
 563:sieve_extend.c ****     }
 3707              		.loc 1 563 9 view .LVU1252
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3708              		.loc 1 560 10 view .LVU1253
 561:sieve_extend.c ****         source_word++;
 3709              		.loc 1 561 9 view .LVU1254
 3710              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3711              		.loc 1 561 29 is_stmt 0 view .LVU1255
 3712 14fc C57D6F4C 		vmovdqa	ymm9, YMMWORD PTR 64[rsi+rax]	# tmp321, MEM[base: vectp.250_119, index: ivtmp.266_180, off
 3712      0640
 3713 1502 C4417E7F 		vmovdqu	YMMWORD PTR 64[r15+rax], ymm9	# MEM[base: vectp.253_125, index: ivtmp.266_180, offset: 0B]
 3713      4C0740
 562:sieve_extend.c ****         copy_word++;
 3714              		.loc 1 562 9 is_stmt 1 view .LVU1256
 563:sieve_extend.c ****     }
 3715              		.loc 1 563 9 view .LVU1257
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3716              		.loc 1 560 10 view .LVU1258
 561:sieve_extend.c ****         source_word++;
 3717              		.loc 1 561 9 view .LVU1259
 3718              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3719              		.loc 1 561 29 is_stmt 0 view .LVU1260
 3720 1509 C57D6F54 		vmovdqa	ymm10, YMMWORD PTR 96[rsi+rax]	# tmp322, MEM[base: vectp.250_119, index: ivtmp.266_180, of
 3720      0660
 3721 150f C4417E7F 		vmovdqu	YMMWORD PTR 96[r15+rax], ymm10	# MEM[base: vectp.253_125, index: ivtmp.266_180, offset: 0B
 3721      540760
 562:sieve_extend.c ****         copy_word++;
 3722              		.loc 1 562 9 is_stmt 1 view .LVU1261
 563:sieve_extend.c ****     }
 3723              		.loc 1 563 9 view .LVU1262
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3724              		.loc 1 560 10 view .LVU1263
 561:sieve_extend.c ****         source_word++;
 3725              		.loc 1 561 9 view .LVU1264
 3726              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3727              		.loc 1 561 29 is_stmt 0 view .LVU1265
 3728 1516 C57D6F9C 		vmovdqa	ymm11, YMMWORD PTR 128[rsi+rax]	# tmp323, MEM[base: vectp.250_119, index: ivtmp.266_180, o
 3728      06800000 
 3728      00
 3729 151f C4417E7F 		vmovdqu	YMMWORD PTR 128[r15+rax], ymm11	# MEM[base: vectp.253_125, index: ivtmp.266_180, offset: 0
GAS LISTING /tmp/ccNeV1of.s 			page 112


 3729      9C078000 
 3729      0000
 562:sieve_extend.c ****         copy_word++;
 3730              		.loc 1 562 9 is_stmt 1 view .LVU1266
 563:sieve_extend.c ****     }
 3731              		.loc 1 563 9 view .LVU1267
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3732              		.loc 1 560 10 view .LVU1268
 561:sieve_extend.c ****         source_word++;
 3733              		.loc 1 561 9 view .LVU1269
 3734              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3735              		.loc 1 561 29 is_stmt 0 view .LVU1270
 3736 1529 C57D6FA4 		vmovdqa	ymm12, YMMWORD PTR 160[rsi+rax]	# tmp324, MEM[base: vectp.250_119, index: ivtmp.266_180, o
 3736      06A00000 
 3736      00
 3737 1532 C4417E7F 		vmovdqu	YMMWORD PTR 160[r15+rax], ymm12	# MEM[base: vectp.253_125, index: ivtmp.266_180, offset: 0
 3737      A407A000 
 3737      0000
 562:sieve_extend.c ****         copy_word++;
 3738              		.loc 1 562 9 is_stmt 1 view .LVU1271
 563:sieve_extend.c ****     }
 3739              		.loc 1 563 9 view .LVU1272
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3740              		.loc 1 560 10 view .LVU1273
 561:sieve_extend.c ****         source_word++;
 3741              		.loc 1 561 9 view .LVU1274
 3742              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3743              		.loc 1 561 29 is_stmt 0 view .LVU1275
 3744 153c C57D6FAC 		vmovdqa	ymm13, YMMWORD PTR 192[rsi+rax]	# tmp325, MEM[base: vectp.250_119, index: ivtmp.266_180, o
 3744      06C00000 
 3744      00
 3745 1545 C4417E7F 		vmovdqu	YMMWORD PTR 192[r15+rax], ymm13	# MEM[base: vectp.253_125, index: ivtmp.266_180, offset: 0
 3745      AC07C000 
 3745      0000
 562:sieve_extend.c ****         copy_word++;
 3746              		.loc 1 562 9 is_stmt 1 view .LVU1276
 563:sieve_extend.c ****     }
 3747              		.loc 1 563 9 view .LVU1277
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3748              		.loc 1 560 10 view .LVU1278
 561:sieve_extend.c ****         source_word++;
 3749              		.loc 1 561 9 view .LVU1279
 3750              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3751              		.loc 1 561 29 is_stmt 0 view .LVU1280
 3752 154f C57D6FB4 		vmovdqa	ymm14, YMMWORD PTR 224[rsi+rax]	# tmp326, MEM[base: vectp.250_119, index: ivtmp.266_180, o
 3752      06E00000 
 3752      00
 3753 1558 C4417E7F 		vmovdqu	YMMWORD PTR 224[r15+rax], ymm14	# MEM[base: vectp.253_125, index: ivtmp.266_180, offset: 0
 3753      B407E000 
 3753      0000
 562:sieve_extend.c ****         copy_word++;
 3754              		.loc 1 562 9 is_stmt 1 view .LVU1281
 563:sieve_extend.c ****     }
 3755              		.loc 1 563 9 view .LVU1282
GAS LISTING /tmp/ccNeV1of.s 			page 113


 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3756              		.loc 1 560 10 view .LVU1283
 3757 1562 48050001 		add	rax, 256	# ivtmp.266,
 3757      0000
 3758 1568 4C39C0   		cmp	rax, r8	# ivtmp.266, _182
 3759 156b 0F8573FF 		jne	.L245	#,
 3759      FFFF
 3760              	.L346:
 3761 1571 4D89D9   		mov	r9, r11	# niters_vector_mult_vf.246, niters.244
 3762 1574 4983E1FC 		and	r9, -4	# niters_vector_mult_vf.246,
 3763 1578 4D01CC   		add	r12, r9	# tmp.247, niters_vector_mult_vf.246
 3764 157b 4D01CE   		add	r14, r9	# tmp.248, niters_vector_mult_vf.246
 3765 157e 4D39CB   		cmp	r11, r9	# niters.244, niters_vector_mult_vf.246
 3766 1581 7455     		je	.L349	#,
 3767              	.LVL186:
 561:sieve_extend.c ****         source_word++;
 3768              		.loc 1 561 9 view .LVU1284
 3769              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3770              		.loc 1 561 39 is_stmt 0 view .LVU1285
 3771 1583 4B8B4CE5 		mov	rcx, QWORD PTR 0[r13+r12*8]	# _37, *_21
 3771      00
 3772              	# sieve_extend.c:563:         copy_word++;
 563:sieve_extend.c ****     }
 3773              		.loc 1 563 18 view .LVU1286
 3774 1588 4D8D5601 		lea	r10, 1[r14]	# copy_word,
 3775              	# sieve_extend.c:562:         source_word++;
 562:sieve_extend.c ****         copy_word++;
 3776              		.loc 1 562 20 view .LVU1287
 3777 158c 4983C401 		add	r12, 1	# source_word,
 3778              	.LVL187:
 3779              	# sieve_extend.c:560:    while (copy_word < destination_stop_word) {
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3780              		.loc 1 560 10 view .LVU1288
 3781 1590 4C39D3   		cmp	rbx, r10	# destination_stop_word, copy_word
 3782              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3783              		.loc 1 561 29 view .LVU1289
 3784 1593 4B894CF5 		mov	QWORD PTR 0[r13+r14*8], rcx	# *_23, _37
 3784      00
 562:sieve_extend.c ****         copy_word++;
 3785              		.loc 1 562 9 is_stmt 1 view .LVU1290
 3786              	.LVL188:
 563:sieve_extend.c ****     }
 3787              		.loc 1 563 9 view .LVU1291
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3788              		.loc 1 560 10 view .LVU1292
 3789 1598 763E     		jbe	.L349	#,
 561:sieve_extend.c ****         source_word++;
 3790              		.loc 1 561 9 view .LVU1293
 3791              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3792              		.loc 1 561 39 is_stmt 0 view .LVU1294
 3793 159a 4E8D1CE5 		lea	r11, 0[0+r12*8]	# _134,
 3793      00000000 
 3794              	# sieve_extend.c:563:         copy_word++;
 563:sieve_extend.c ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 114


 3795              		.loc 1 563 18 view .LVU1295
 3796 15a2 4983C602 		add	r14, 2	# copy_word,
 3797              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3798              		.loc 1 561 39 view .LVU1296
 3799 15a6 4F8B64E5 		mov	r12, QWORD PTR 0[r13+r12*8]	# _138, *_135
 3799      00
 3800              	# sieve_extend.c:560:    while (copy_word < destination_stop_word) {
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3801              		.loc 1 560 10 view .LVU1297
 3802 15ab 4C39F3   		cmp	rbx, r14	# destination_stop_word, copy_word
 3803              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3804              		.loc 1 561 29 view .LVU1298
 3805 15ae 4F8964D5 		mov	QWORD PTR 0[r13+r10*8], r12	# *_137, _138
 3805      00
 562:sieve_extend.c ****         copy_word++;
 3806              		.loc 1 562 9 is_stmt 1 view .LVU1299
 563:sieve_extend.c ****     }
 3807              		.loc 1 563 9 view .LVU1300
 3808              	.LVL189:
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3809              		.loc 1 560 10 view .LVU1301
 3810 15b3 7623     		jbe	.L349	#,
 561:sieve_extend.c ****         source_word++;
 3811              		.loc 1 561 9 view .LVU1302
 3812              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3813              		.loc 1 561 39 is_stmt 0 view .LVU1303
 3814 15b5 4B8B5C1D 		mov	rbx, QWORD PTR 8[r13+r11]	# _109, *_106
 3814      08
 3815              	.LVL190:
 3816              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3817              		.loc 1 561 29 view .LVU1304
 3818 15ba 4B895CF5 		mov	QWORD PTR 0[r13+r14*8], rbx	# *_108, _109
 3818      00
 562:sieve_extend.c ****         copy_word++;
 3819              		.loc 1 562 9 is_stmt 1 view .LVU1305
 563:sieve_extend.c ****     }
 3820              		.loc 1 563 9 view .LVU1306
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3821              		.loc 1 560 10 view .LVU1307
 3822 15bf C5F877   		vzeroupper
 3823              	.LVL191:
 3824              	.L350:
 3825              	# sieve_extend.c:566: }
 566:sieve_extend.c **** 
 3826              		.loc 1 566 1 is_stmt 0 view .LVU1308
 3827 15c2 488D65D8 		lea	rsp, -40[rbp]	#,
 3828 15c6 5B       		pop	rbx	#
 3829 15c7 415C     		pop	r12	#
 3830 15c9 415D     		pop	r13	#
 3831 15cb 415E     		pop	r14	#
 3832 15cd 415F     		pop	r15	#
 3833 15cf 5D       		pop	rbp	#
 3834              		.cfi_remember_state
GAS LISTING /tmp/ccNeV1of.s 			page 115


 3835              		.cfi_def_cfa 7, 8
 3836 15d0 C3       		ret	
 3837              	.LVL192:
 3838              		.p2align 4,,7
 3839 15d1 0F1F8000 		.p2align 3
 3839      000000
 3840              	.L349:
 3841              		.cfi_restore_state
 566:sieve_extend.c **** 
 3842              		.loc 1 566 1 view .LVU1309
 3843 15d8 C5F877   		vzeroupper
 3844 15db 488D65D8 		lea	rsp, -40[rbp]	#,
 3845 15df 5B       		pop	rbx	#
 3846              	.LVL193:
 566:sieve_extend.c **** 
 3847              		.loc 1 566 1 view .LVU1310
 3848 15e0 415C     		pop	r12	#
 3849 15e2 415D     		pop	r13	#
 3850              	.LVL194:
 566:sieve_extend.c **** 
 3851              		.loc 1 566 1 view .LVU1311
 3852 15e4 415E     		pop	r14	#
 3853 15e6 415F     		pop	r15	#
 3854 15e8 5D       		pop	rbp	#
 3855              		.cfi_remember_state
 3856              		.cfi_def_cfa 7, 8
 3857 15e9 C3       		ret	
 3858              	.LVL195:
 3859 15ea 660F1F44 		.p2align 4,,7
 3859      0000
 3860              		.p2align 3
 3861              	.L242:
 3862              		.cfi_restore_state
 3863              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3864              		.loc 1 561 39 view .LVU1312
 3865 15f0 488B7C24 		mov	rdi, QWORD PTR 8[rsp]	# source_word, %sfp
 3865      08
 3866 15f5 4F8D7425 		lea	r14, 0[r13+r12]	# ivtmp.261,
 3866      00
 3867 15fa 4D8D6CDD 		lea	r13, 0[r13+rbx*8]	# _179,
 3867      00
 3868              	.LVL196:
 561:sieve_extend.c ****         source_word++;
 3869              		.loc 1 561 39 view .LVU1313
 3870 15ff 4C89EE   		mov	rsi, r13	# tmp221, _179
 3871 1602 4C29F6   		sub	rsi, r14	# tmp221, ivtmp.261
 3872 1605 4829C7   		sub	rdi, rax	# source_word, ivtmp.275
 3873 1608 4883EE08 		sub	rsi, 8	# tmp222,
 3874 160c 48C1EE03 		shr	rsi, 3	# tmp220,
 3875 1610 4883C601 		add	rsi, 1	# tmp223,
 3876 1614 83E607   		and	esi, 7	# tmp224,
 3877 1617 0F848100 		je	.L247	#,
 3877      0000
 3878 161d 4883FE01 		cmp	rsi, 1	# tmp224,
 3879 1621 7466     		je	.L315	#,
 3880 1623 4883FE02 		cmp	rsi, 2	# tmp224,
GAS LISTING /tmp/ccNeV1of.s 			page 116


 3881 1627 7454     		je	.L316	#,
 3882 1629 4883FE03 		cmp	rsi, 3	# tmp224,
 3883 162d 7442     		je	.L317	#,
 3884 162f 4883FE04 		cmp	rsi, 4	# tmp224,
 3885 1633 7430     		je	.L318	#,
 3886 1635 4883FE05 		cmp	rsi, 5	# tmp224,
 3887 1639 741E     		je	.L319	#,
 3888 163b 4883FE06 		cmp	rsi, 6	# tmp224,
 3889 163f 740C     		je	.L320	#,
 3890              	.LVL197:
 561:sieve_extend.c ****         source_word++;
 3891              		.loc 1 561 9 is_stmt 1 view .LVU1314
 3892              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3893              		.loc 1 561 39 is_stmt 0 view .LVU1315
 3894 1641 4D8B3CFE 		mov	r15, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 3895 1645 4983C608 		add	r14, 8	# ivtmp.261,
 3896              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3897              		.loc 1 561 29 view .LVU1316
 3898 1649 4D897EF8 		mov	QWORD PTR -8[r14], r15	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 3899              		.loc 1 562 9 is_stmt 1 view .LVU1317
 563:sieve_extend.c ****     }
 3900              		.loc 1 563 9 view .LVU1318
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3901              		.loc 1 560 10 view .LVU1319
 3902              	.L320:
 561:sieve_extend.c ****         source_word++;
 3903              		.loc 1 561 9 view .LVU1320
 3904              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3905              		.loc 1 561 39 is_stmt 0 view .LVU1321
 3906 164d 4D8B04FE 		mov	r8, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 3907 1651 4983C608 		add	r14, 8	# ivtmp.261,
 3908              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3909              		.loc 1 561 29 view .LVU1322
 3910 1655 4D8946F8 		mov	QWORD PTR -8[r14], r8	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 3911              		.loc 1 562 9 is_stmt 1 view .LVU1323
 563:sieve_extend.c ****     }
 3912              		.loc 1 563 9 view .LVU1324
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3913              		.loc 1 560 10 view .LVU1325
 3914              	.L319:
 561:sieve_extend.c ****         source_word++;
 3915              		.loc 1 561 9 view .LVU1326
 3916              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3917              		.loc 1 561 39 is_stmt 0 view .LVU1327
 3918 1659 498B14FE 		mov	rdx, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 3919 165d 4983C608 		add	r14, 8	# ivtmp.261,
 3920              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3921              		.loc 1 561 29 view .LVU1328
 3922 1661 498956F8 		mov	QWORD PTR -8[r14], rdx	# MEM[base: _174, offset: 0B], _70
GAS LISTING /tmp/ccNeV1of.s 			page 117


 562:sieve_extend.c ****         copy_word++;
 3923              		.loc 1 562 9 is_stmt 1 view .LVU1329
 563:sieve_extend.c ****     }
 3924              		.loc 1 563 9 view .LVU1330
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3925              		.loc 1 560 10 view .LVU1331
 3926              	.L318:
 561:sieve_extend.c ****         source_word++;
 3927              		.loc 1 561 9 view .LVU1332
 3928              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3929              		.loc 1 561 39 is_stmt 0 view .LVU1333
 3930 1665 498B04FE 		mov	rax, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 3931 1669 4983C608 		add	r14, 8	# ivtmp.261,
 3932              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3933              		.loc 1 561 29 view .LVU1334
 3934 166d 498946F8 		mov	QWORD PTR -8[r14], rax	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 3935              		.loc 1 562 9 is_stmt 1 view .LVU1335
 563:sieve_extend.c ****     }
 3936              		.loc 1 563 9 view .LVU1336
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3937              		.loc 1 560 10 view .LVU1337
 3938              	.L317:
 561:sieve_extend.c ****         source_word++;
 3939              		.loc 1 561 9 view .LVU1338
 3940              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3941              		.loc 1 561 39 is_stmt 0 view .LVU1339
 3942 1671 4D8B0CFE 		mov	r9, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 3943 1675 4983C608 		add	r14, 8	# ivtmp.261,
 3944              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3945              		.loc 1 561 29 view .LVU1340
 3946 1679 4D894EF8 		mov	QWORD PTR -8[r14], r9	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 3947              		.loc 1 562 9 is_stmt 1 view .LVU1341
 563:sieve_extend.c ****     }
 3948              		.loc 1 563 9 view .LVU1342
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3949              		.loc 1 560 10 view .LVU1343
 3950              	.L316:
 561:sieve_extend.c ****         source_word++;
 3951              		.loc 1 561 9 view .LVU1344
 3952              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3953              		.loc 1 561 39 is_stmt 0 view .LVU1345
 3954 167d 498B0CFE 		mov	rcx, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 3955 1681 4983C608 		add	r14, 8	# ivtmp.261,
 3956              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3957              		.loc 1 561 29 view .LVU1346
 3958 1685 49894EF8 		mov	QWORD PTR -8[r14], rcx	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 3959              		.loc 1 562 9 is_stmt 1 view .LVU1347
 563:sieve_extend.c ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 118


 3960              		.loc 1 563 9 view .LVU1348
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3961              		.loc 1 560 10 view .LVU1349
 3962              	.L315:
 561:sieve_extend.c ****         source_word++;
 3963              		.loc 1 561 9 view .LVU1350
 3964              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3965              		.loc 1 561 39 is_stmt 0 view .LVU1351
 3966 1689 4D8B14FE 		mov	r10, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 3967 168d 4983C608 		add	r14, 8	# ivtmp.261,
 3968              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3969              		.loc 1 561 29 view .LVU1352
 3970 1691 4D8956F8 		mov	QWORD PTR -8[r14], r10	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 3971              		.loc 1 562 9 is_stmt 1 view .LVU1353
 563:sieve_extend.c ****     }
 3972              		.loc 1 563 9 view .LVU1354
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3973              		.loc 1 560 10 view .LVU1355
 3974 1695 4D39EE   		cmp	r14, r13	# ivtmp.261, _179
 3975 1698 0F8424FF 		je	.L350	#,
 3975      FFFF
 3976              	.LVL198:
 3977              	.L247:
 561:sieve_extend.c ****         source_word++;
 3978              		.loc 1 561 9 view .LVU1356
 3979              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3980              		.loc 1 561 39 is_stmt 0 view .LVU1357
 3981 169e 4D8B1CFE 		mov	r11, QWORD PTR [r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 3982              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3983              		.loc 1 561 29 view .LVU1358
 3984 16a2 4D891E   		mov	QWORD PTR [r14], r11	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 3985              		.loc 1 562 9 is_stmt 1 view .LVU1359
 563:sieve_extend.c ****     }
 3986              		.loc 1 563 9 view .LVU1360
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3987              		.loc 1 560 10 view .LVU1361
 561:sieve_extend.c ****         source_word++;
 3988              		.loc 1 561 9 view .LVU1362
 3989              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3990              		.loc 1 561 39 is_stmt 0 view .LVU1363
 3991 16a5 4D8B64FE 		mov	r12, QWORD PTR 8[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 3991      08
 3992              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 3993              		.loc 1 561 29 view .LVU1364
 3994 16aa 4D896608 		mov	QWORD PTR 8[r14], r12	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 3995              		.loc 1 562 9 is_stmt 1 view .LVU1365
 563:sieve_extend.c ****     }
 3996              		.loc 1 563 9 view .LVU1366
GAS LISTING /tmp/ccNeV1of.s 			page 119


 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 3997              		.loc 1 560 10 view .LVU1367
 561:sieve_extend.c ****         source_word++;
 3998              		.loc 1 561 9 view .LVU1368
 3999              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4000              		.loc 1 561 39 is_stmt 0 view .LVU1369
 4001 16ae 498B5CFE 		mov	rbx, QWORD PTR 16[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4001      10
 4002              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4003              		.loc 1 561 29 view .LVU1370
 4004 16b3 49895E10 		mov	QWORD PTR 16[r14], rbx	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4005              		.loc 1 562 9 is_stmt 1 view .LVU1371
 563:sieve_extend.c ****     }
 4006              		.loc 1 563 9 view .LVU1372
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4007              		.loc 1 560 10 view .LVU1373
 561:sieve_extend.c ****         source_word++;
 4008              		.loc 1 561 9 view .LVU1374
 4009              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4010              		.loc 1 561 39 is_stmt 0 view .LVU1375
 4011 16b7 498B74FE 		mov	rsi, QWORD PTR 24[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4011      18
 4012              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4013              		.loc 1 561 29 view .LVU1376
 4014 16bc 49897618 		mov	QWORD PTR 24[r14], rsi	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4015              		.loc 1 562 9 is_stmt 1 view .LVU1377
 563:sieve_extend.c ****     }
 4016              		.loc 1 563 9 view .LVU1378
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4017              		.loc 1 560 10 view .LVU1379
 561:sieve_extend.c ****         source_word++;
 4018              		.loc 1 561 9 view .LVU1380
 4019              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4020              		.loc 1 561 39 is_stmt 0 view .LVU1381
 4021 16c0 4D8B7CFE 		mov	r15, QWORD PTR 32[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4021      20
 4022              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4023              		.loc 1 561 29 view .LVU1382
 4024 16c5 4D897E20 		mov	QWORD PTR 32[r14], r15	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4025              		.loc 1 562 9 is_stmt 1 view .LVU1383
 563:sieve_extend.c ****     }
 4026              		.loc 1 563 9 view .LVU1384
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4027              		.loc 1 560 10 view .LVU1385
 561:sieve_extend.c ****         source_word++;
 4028              		.loc 1 561 9 view .LVU1386
 4029              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
GAS LISTING /tmp/ccNeV1of.s 			page 120


 4030              		.loc 1 561 39 is_stmt 0 view .LVU1387
 4031 16c9 4D8B44FE 		mov	r8, QWORD PTR 40[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4031      28
 4032              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4033              		.loc 1 561 29 view .LVU1388
 4034 16ce 4D894628 		mov	QWORD PTR 40[r14], r8	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4035              		.loc 1 562 9 is_stmt 1 view .LVU1389
 563:sieve_extend.c ****     }
 4036              		.loc 1 563 9 view .LVU1390
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4037              		.loc 1 560 10 view .LVU1391
 561:sieve_extend.c ****         source_word++;
 4038              		.loc 1 561 9 view .LVU1392
 4039              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4040              		.loc 1 561 39 is_stmt 0 view .LVU1393
 4041 16d2 498B54FE 		mov	rdx, QWORD PTR 48[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4041      30
 4042              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4043              		.loc 1 561 29 view .LVU1394
 4044 16d7 49895630 		mov	QWORD PTR 48[r14], rdx	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4045              		.loc 1 562 9 is_stmt 1 view .LVU1395
 563:sieve_extend.c ****     }
 4046              		.loc 1 563 9 view .LVU1396
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4047              		.loc 1 560 10 view .LVU1397
 561:sieve_extend.c ****         source_word++;
 4048              		.loc 1 561 9 view .LVU1398
 4049              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4050              		.loc 1 561 39 is_stmt 0 view .LVU1399
 4051 16db 498B44FE 		mov	rax, QWORD PTR 56[r14+rdi*8]	# _70, MEM[base: _174, index: _175, step: 8, offset: 0B]
 4051      38
 4052 16e0 4983C640 		add	r14, 64	# ivtmp.261,
 4053              	# sieve_extend.c:561:         bitarray[copy_word] = bitarray[source_word];
 561:sieve_extend.c ****         source_word++;
 4054              		.loc 1 561 29 view .LVU1400
 4055 16e4 498946F8 		mov	QWORD PTR -8[r14], rax	# MEM[base: _174, offset: 0B], _70
 562:sieve_extend.c ****         copy_word++;
 4056              		.loc 1 562 9 is_stmt 1 view .LVU1401
 563:sieve_extend.c ****     }
 4057              		.loc 1 563 9 view .LVU1402
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4058              		.loc 1 560 10 view .LVU1403
 4059 16e8 4D39EE   		cmp	r14, r13	# ivtmp.261, _179
 4060 16eb 75B1     		jne	.L247	#,
 4061 16ed E9D0FEFF 		jmp	.L350	#
 4061      FF
 4062              	.LVL199:
 4063              		.p2align 4,,7
 4064 16f2 660F1F44 		.p2align 3
 4064      0000
 4065              	.L249:
GAS LISTING /tmp/ccNeV1of.s 			page 121


 4066              	# sieve_extend.c:550:     counter_t source_word = wordindex(source_start);
 550:sieve_extend.c ****     counter_t copy_word = wordindex(copy_start);
 4067              		.loc 1 550 15 is_stmt 0 view .LVU1404
 4068 16f8 4C8B6424 		mov	r12, QWORD PTR 8[rsp]	# source_word, %sfp
 4068      08
 4069              	# sieve_extend.c:560:    while (copy_word < destination_stop_word) {
 560:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 4070              		.loc 1 560 10 view .LVU1405
 4071 16fd 4989C6   		mov	r14, rax	# copy_word, ivtmp.275
 4072 1700 E90AFDFF 		jmp	.L243	#
 4072      FF
 4073              		.cfi_endproc
 4074              	.LFE69:
 4076 1705 66662E0F 		.p2align 4
 4076      1F840000 
 4076      000000
 4078              	extendSieve_shiftleft:
 4079              	.LVL200:
 4080              	.LFB75:
 794:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 4081              		.loc 1 794 142 is_stmt 1 view -0
 4082              		.cfi_startproc
 795:sieve_extend.c **** 
 4083              		.loc 1 795 5 view .LVU1407
 797:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 4084              		.loc 1 797 5 view .LVU1408
 4085              	# sieve_extend.c:794: static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source
 794:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 4086              		.loc 1 794 142 is_stmt 0 view .LVU1409
 4087 1710 55       		push	rbp	#
 4088              		.cfi_def_cfa_offset 16
 4089              		.cfi_offset 6, -16
 4090              	# sieve_extend.c:797:     const counter_t destination_stop_word = wordindex(destination_stop);
 797:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 4091              		.loc 1 797 21 view .LVU1410
 4092 1711 48C1E906 		shr	rcx, 6	# tmp1104,
 4093              	.LVL201:
 4094              	# sieve_extend.c:798:     const counter_t copy_start = source_start + size;
 798:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_calc(copy_start);
 4095              		.loc 1 798 21 view .LVU1411
 4096 1715 4C8D0416 		lea	r8, [rsi+rdx]	# copy_start,
 4097              	# sieve_extend.c:794: static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source
 794:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 4098              		.loc 1 794 142 view .LVU1412
 4099 1719 4889E5   		mov	rbp, rsp	#,
 4100              		.cfi_def_cfa_register 6
 4101 171c 4989D2   		mov	r10, rdx	# size, tmp1103
 4102 171f 4157     		push	r15	#
 4103              	# sieve_extend.c:802:     register counter_t copy_word = wordindex(copy_start);
 802:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 4104              		.loc 1 802 24 view .LVU1413
 4105 1721 4D89C3   		mov	r11, r8	# copy_word, copy_start
 4106              	# sieve_extend.c:794: static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source
 794:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 4107              		.loc 1 794 142 view .LVU1414
 4108 1724 4156     		push	r14	#
 4109              	# sieve_extend.c:802:     register counter_t copy_word = wordindex(copy_start);
GAS LISTING /tmp/ccNeV1of.s 			page 122


 802:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 4110              		.loc 1 802 24 view .LVU1415
 4111 1726 49C1EB06 		shr	r11, 6	# copy_word,
 4112              		.cfi_offset 15, -24
 4113              		.cfi_offset 14, -32
 4114              	# sieve_extend.c:797:     const counter_t destination_stop_word = wordindex(destination_stop);
 797:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 4115              		.loc 1 797 21 view .LVU1416
 4116 172a 4989CE   		mov	r14, rcx	# destination_stop_word, tmp1104
 4117              	# sieve_extend.c:794: static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source
 794:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 4118              		.loc 1 794 142 view .LVU1417
 4119 172d 4155     		push	r13	#
 4120 172f 4154     		push	r12	#
 4121 1731 53       		push	rbx	#
 4122              		.cfi_offset 13, -40
 4123              		.cfi_offset 12, -48
 4124              		.cfi_offset 3, -56
 4125 1732 4889FB   		mov	rbx, rdi	# bitarray, tmp1101
 4126 1735 4883E4E0 		and	rsp, -32	#,
 4127 1739 488D6424 		lea	rsp, -96[rsp]	#,
 4127      A0
 4128              	# sieve_extend.c:797:     const counter_t destination_stop_word = wordindex(destination_stop);
 797:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 4129              		.loc 1 797 21 view .LVU1418
 4130 173e 48894C24 		mov	QWORD PTR 88[rsp], rcx	# %sfp, destination_stop_word
 4130      58
 4131              	.LVL202:
 798:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_calc(copy_start);
 4132              		.loc 1 798 5 is_stmt 1 view .LVU1419
 799:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 4133              		.loc 1 799 5 view .LVU1420
 4134              	# sieve_extend.c:799:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 799:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 4135              		.loc 1 799 39 is_stmt 0 view .LVU1421
 4136 1743 4889F1   		mov	rcx, rsi	# _4, source_start
 4137              	.LVL203:
 4138              	# sieve_extend.c:801:     register counter_t source_word = wordindex(source_start);
 801:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 4139              		.loc 1 801 24 view .LVU1422
 4140 1746 48C1EE06 		shr	rsi, 6	# source_start,
 4141              	.LVL204:
 4142              	# sieve_extend.c:799:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 799:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 4143              		.loc 1 799 39 view .LVU1423
 4144 174a 83E13F   		and	ecx, 63	# _4,
 4145              	.LVL205:
 4146              	# sieve_extend.c:794: static void extendSieve_shiftleft(bitword_t* bitarray, const counter_t source
 794:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftleft (%ju copies)\
 4147              		.loc 1 794 142 view .LVU1424
 4148 174d 48895424 		mov	QWORD PTR 24[rsp], rdx	# %sfp, size
 4148      18
 4149              	# sieve_extend.c:801:     register counter_t source_word = wordindex(source_start);
 801:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 4150              		.loc 1 801 24 view .LVU1425
 4151 1752 4989F1   		mov	r9, rsi	# source_word, source_start
 4152              	# sieve_extend.c:799:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
GAS LISTING /tmp/ccNeV1of.s 			page 123


 799:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 4153              		.loc 1 799 69 view .LVU1426
 4154 1755 4C89C2   		mov	rdx, r8	# _5, copy_start
 4155              	.LVL206:
 4156              	# sieve_extend.c:799:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 799:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 4157              		.loc 1 799 31 view .LVU1427
 4158 1758 4989CF   		mov	r15, rcx	# shift, _4
 4159              	# sieve_extend.c:804:                              | (bitarray[source_word+1] << shift_flipped))
 804:sieve_extend.c ****                              & ~chopmask(copy_start); // because this is the first word, dont copy 
 4160              		.loc 1 804 41 view .LVU1428
 4161 175b 4D8D6101 		lea	r12, 1[r9]	# tmp.302,
 4162              	# sieve_extend.c:799:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 799:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 4163              		.loc 1 799 69 view .LVU1429
 4164 175f 83E23F   		and	edx, 63	# _5,
 4165              	.LVL207:
 800:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 4166              		.loc 1 800 5 is_stmt 1 view .LVU1430
 801:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 4167              		.loc 1 801 5 view .LVU1431
 802:sieve_extend.c ****     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 4168              		.loc 1 802 5 view .LVU1432
 803:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 4169              		.loc 1 803 5 view .LVU1433
 4170              	# sieve_extend.c:799:     register const bitshift_t shift = bitindex_calc(source_start) - bitindex_
 799:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 4171              		.loc 1 799 31 is_stmt 0 view .LVU1434
 4172 1762 4929D7   		sub	r15, rdx	# shift, _5
 4173              	.LVL208:
 4174              	# sieve_extend.c:810:     const counter_t aligned_copy_word = min(source_word + size, destination_s
 810:sieve_extend.c ****     const counter_t distance  = extendSieve_shiftleft_unrolled(bitarray, aligned_copy_word, shift, 
 4175              		.loc 1 810 41 view .LVU1435
 4176 1765 4F8D1414 		lea	r10, [r12+r10]	# tmp563,
 4177              	.LVL209:
 4178              	# sieve_extend.c:803:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 803:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 4179              		.loc 1 803 25 view .LVU1436
 4180 1769 4A8D34DD 		lea	rsi, 0[0+r11*8]	# _6,
 4180      00000000 
 4181              	# sieve_extend.c:800:     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 800:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 4182              		.loc 1 800 31 view .LVU1437
 4183 1771 4829CA   		sub	rdx, rcx	# tmp550, _4
 4184              	.LVL210:
 4185              	# sieve_extend.c:803:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 803:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 4186              		.loc 1 803 38 view .LVU1438
 4187 1774 4A8D04CD 		lea	rax, 0[0+r9*8]	# _9,
 4187      00000000 
 4188              	# sieve_extend.c:800:     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 800:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 4189              		.loc 1 800 31 view .LVU1439
 4190 177c 4883C240 		add	rdx, 64	# shift_flipped,
 4191              	.LVL211:
 4192              	# sieve_extend.c:805:                              & ~chopmask(copy_start); // because this is the 
 805:sieve_extend.c **** 
GAS LISTING /tmp/ccNeV1of.s 			page 124


 4193              		.loc 1 805 33 view .LVU1440
 4194 1780 41F7D0   		not	r8d	# tmp557
 4195              	.LVL212:
 4196              	# sieve_extend.c:804:                              | (bitarray[source_word+1] << shift_flipped))
 804:sieve_extend.c ****                              & ~chopmask(copy_start); // because this is the first word, dont copy 
 4197              		.loc 1 804 57 view .LVU1441
 4198 1783 C462E9F7 		shlx	r13, QWORD PTR 8[rdi+rax], rdx	# tmp552, *_16, shift_flipped
 4198      6C0708
 4199              	# sieve_extend.c:803:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 803:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 4200              		.loc 1 803 52 view .LVU1442
 4201 178a 4A8B3CCF 		mov	rdi, QWORD PTR [rdi+r9*8]	# *_10, *_10
 4202              	.LVL213:
 4203              	# sieve_extend.c:805:                              & ~chopmask(copy_start); // because this is the 
 805:sieve_extend.c **** 
 4204              		.loc 1 805 33 view .LVU1443
 4205 178e 48C7C1FF 		mov	rcx, -1	# tmp560,
 4205      FFFFFF
 4206              	# sieve_extend.c:803:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 803:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 4207              		.loc 1 803 52 view .LVU1444
 4208 1795 C46283F7 		shrx	r9, rdi, r15	# tmp554, *_10, shift
 4208      CF
 4209              	# sieve_extend.c:805:                              & ~chopmask(copy_start); // because this is the 
 805:sieve_extend.c **** 
 4210              		.loc 1 805 33 view .LVU1445
 4211 179a C462BBF7 		shrx	r8, rcx, r8	# tmp559, tmp560, tmp557
 4211      C1
 4212              	# sieve_extend.c:803:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 803:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 4213              		.loc 1 803 52 view .LVU1446
 4214 179f 44897C24 		mov	DWORD PTR 72[rsp], r15d	# %sfp, shift
 4214      48
 4215              	# sieve_extend.c:804:                              | (bitarray[source_word+1] << shift_flipped))
 804:sieve_extend.c ****                              & ~chopmask(copy_start); // because this is the first word, dont copy 
 4216              		.loc 1 804 30 view .LVU1447
 4217 17a4 4D09E9   		or	r9, r13	# tmp556, tmp552
 4218              	# sieve_extend.c:805:                              & ~chopmask(copy_start); // because this is the 
 805:sieve_extend.c **** 
 4219              		.loc 1 805 30 view .LVU1448
 4220 17a7 C442B8F2 		andn	r13, r8, r9	# tmp562, tmp559, tmp556
 4220      E9
 4221              	# sieve_extend.c:803:     bitarray[copy_word] |= ((bitarray[source_word] >> shift)
 803:sieve_extend.c ****                              | (bitarray[source_word+1] << shift_flipped))
 4222              		.loc 1 803 25 view .LVU1449
 4223 17ac 4C092C33 		or	QWORD PTR [rbx+rsi], r13	# *_7, tmp562
 807:sieve_extend.c ****     source_word++;
 4224              		.loc 1 807 5 is_stmt 1 view .LVU1450
 4225              	# sieve_extend.c:810:     const counter_t aligned_copy_word = min(source_word + size, destination_s
 810:sieve_extend.c ****     const counter_t distance  = extendSieve_shiftleft_unrolled(bitarray, aligned_copy_word, shift, 
 4226              		.loc 1 810 21 is_stmt 0 view .LVU1451
 4227 17b0 4D39F2   		cmp	r10, r14	# tmp563, destination_stop_word
 4228              	.LBB372:
 4229              	.LBB373:
 4230              	# sieve_extend.c:701:     const counter_t fast_loop_stop_word = (aligned_copy_word>2) ? (aligned_co
 701:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 4231              		.loc 1 701 91 view .LVU1452
GAS LISTING /tmp/ccNeV1of.s 			page 125


 4232 17b3 41B90200 		mov	r9d, 2	# tmp564,
 4232      0000
 4233              	.LBE373:
 4234              	.LBE372:
 4235              	# sieve_extend.c:804:                              | (bitarray[source_word+1] << shift_flipped))
 804:sieve_extend.c ****                              & ~chopmask(copy_start); // because this is the first word, dont copy 
 4236              		.loc 1 804 57 view .LVU1453
 4237 17b9 89542440 		mov	DWORD PTR 64[rsp], edx	# %sfp, shift_flipped
 4238              	# sieve_extend.c:807:     copy_word++;
 807:sieve_extend.c ****     source_word++;
 4239              		.loc 1 807 14 view .LVU1454
 4240 17bd 4D8D6B01 		lea	r13, 1[r11]	# tmp.303,
 4241              	.LVL214:
 808:sieve_extend.c **** 
 4242              		.loc 1 808 5 is_stmt 1 view .LVU1455
 810:sieve_extend.c ****     const counter_t distance  = extendSieve_shiftleft_unrolled(bitarray, aligned_copy_word, shift, 
 4243              		.loc 1 810 5 view .LVU1456
 4244              	# sieve_extend.c:810:     const counter_t aligned_copy_word = min(source_word + size, destination_s
 810:sieve_extend.c ****     const counter_t distance  = extendSieve_shiftleft_unrolled(bitarray, aligned_copy_word, shift, 
 4245              		.loc 1 810 21 is_stmt 0 view .LVU1457
 4246 17c1 4D0F47D6 		cmova	r10, r14	# tmp563,, tmp563, destination_stop_word
 4247 17c5 4C895424 		mov	QWORD PTR 80[rsp], r10	# %sfp, aligned_copy_word
 4247      50
 4248              	.LVL215:
 811:sieve_extend.c ****     source_word += distance;
 4249              		.loc 1 811 5 is_stmt 1 view .LVU1458
 4250              	.LBB398:
 4251              	.LBI372:
 700:sieve_extend.c ****     const counter_t fast_loop_stop_word = (aligned_copy_word>2) ? (aligned_copy_word - 2) : 0; // s
 4252              		.loc 1 700 25 view .LVU1459
 4253              	.LBB395:
 701:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 4254              		.loc 1 701 5 view .LVU1460
 4255              	# sieve_extend.c:701:     const counter_t fast_loop_stop_word = (aligned_copy_word>2) ? (aligned_co
 701:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 4256              		.loc 1 701 91 is_stmt 0 view .LVU1461
 4257 17ca 4983FA02 		cmp	r10, 2	# aligned_copy_word,
 4258 17ce 4D0F43CA 		cmovnb	r9, r10	# aligned_copy_word,, _86
 4259              	# sieve_extend.c:701:     const counter_t fast_loop_stop_word = (aligned_copy_word>2) ? (aligned_co
 701:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 4260              		.loc 1 701 21 view .LVU1462
 4261 17d2 498D79FE 		lea	rdi, -2[r9]	# fast_loop_stop_word,
 4262 17d6 48897C24 		mov	QWORD PTR 48[rsp], rdi	# %sfp, fast_loop_stop_word
 4262      30
 4263              	.LVL216:
 702:sieve_extend.c ****     counter_t distance = 0;
 4264              		.loc 1 702 5 is_stmt 1 view .LVU1463
 703:sieve_extend.c ****     while (copy_word < fast_loop_stop_word) {
 4265              		.loc 1 703 5 view .LVU1464
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4266              		.loc 1 704 5 view .LVU1465
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4267              		.loc 1 704 11 view .LVU1466
 4268 17db 4939FD   		cmp	r13, rdi	# tmp.303, fast_loop_stop_word
 4269 17de 0F83A004 		jnb	.L353	#,
 4269      0000
 4270 17e4 4D29D9   		sub	r9, r11	# tmp565, copy_word
GAS LISTING /tmp/ccNeV1of.s 			page 126


 4271 17e7 4C8D5040 		lea	r10, 64[rax]	# tmp567,
 4272              	.LVL217:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4273              		.loc 1 704 11 is_stmt 0 view .LVU1467
 4274 17eb 4C8D4610 		lea	r8, 16[rsi]	# tmp568,
 4275 17ef 498D49FC 		lea	rcx, -4[r9]	# _282,
 4276 17f3 4C8D7648 		lea	r14, 72[rsi]	# tmp571,
 4277              	.LVL218:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4278              		.loc 1 704 11 view .LVU1468
 4279 17f7 4D39C2   		cmp	r10, r8	# tmp567, tmp568
 4280 17fa 48894C24 		mov	QWORD PTR 56[rsp], rcx	# %sfp, _282
 4280      38
 4281 17ff 488D4808 		lea	rcx, 8[rax]	# tmp787,
 4282 1803 410F9EC1 		setle	r9b	#, tmp570
 4283 1807 4939CE   		cmp	r14, rcx	# tmp571, tmp787
 4284 180a 400F9EC7 		setle	dil	#, tmp574
 4285              	.LVL219:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4286              		.loc 1 704 11 view .LVU1469
 4287 180e 4109F9   		or	r9d, edi	# tmp575, tmp574
 4288 1811 488D7850 		lea	rdi, 80[rax]	# tmp576,
 4289 1815 48897C24 		mov	QWORD PTR 40[rsp], rdi	# %sfp, tmp576
 4289      28
 4290 181a 4C39C7   		cmp	rdi, r8	# tmp576, tmp568
 4291 181d 0F9E4424 		setle	BYTE PTR 39[rsp]	#, %sfp
 4291      27
 4292 1822 4883C010 		add	rax, 16	# tmp581,
 4293 1826 4939C6   		cmp	r14, rax	# tmp571, tmp581
 4294 1829 400F9EC7 		setle	dil	#, tmp583
 4295 182d 400A7C24 		or	dil, BYTE PTR 39[rsp]	# tmp584, %sfp
 4295      27
 4296 1832 4421CF   		and	edi, r9d	# tmp585, tmp575
 4297 1835 48837C24 		cmp	QWORD PTR 56[rsp], 11	# %sfp,
 4297      380B
 4298 183b 410F97C1 		seta	r9b	#, tmp587
 4299 183f 4421CF   		and	edi, r9d	# tmp588, tmp587
 4300 1842 4C8D4E08 		lea	r9, 8[rsi]	# tmp590,
 4301 1846 4D39CA   		cmp	r10, r9	# tmp567, tmp590
 4302 1849 410F9EC2 		setle	r10b	#, tmp592
 4303 184d 4883C640 		add	rsi, 64	# tmp593,
 4304 1851 4839CE   		cmp	rsi, rcx	# tmp593, tmp787
 4305 1854 0F9E4424 		setle	BYTE PTR 39[rsp]	#, %sfp
 4305      27
 4306 1859 440A5424 		or	r10b, BYTE PTR 39[rsp]	# tmp597, %sfp
 4306      27
 4307 185e 4421D7   		and	edi, r10d	# tmp598, tmp597
 4308 1861 4C394C24 		cmp	QWORD PTR 40[rsp], r9	# %sfp, tmp590
 4308      28
 4309 1866 410F9EC2 		setle	r10b	#, tmp602
 4310 186a 4839C6   		cmp	rsi, rax	# tmp593, tmp581
 4311 186d 0F9E4424 		setle	BYTE PTR 40[rsp]	#, %sfp
 4311      28
 4312 1872 440A5424 		or	r10b, BYTE PTR 40[rsp]	# tmp607, %sfp
 4312      28
 4313 1877 4484D7   		test	dil, r10b	# tmp598, tmp607
 4314 187a 0F84E80C 		je	.L354	#,
GAS LISTING /tmp/ccNeV1of.s 			page 127


 4314      0000
 4315 1880 4D39CE   		cmp	r14, r9	# tmp571, tmp590
 4316 1883 410F9EC6 		setle	r14b	#, tmp612
 4317 1887 4C39C6   		cmp	rsi, r8	# tmp593, tmp568
 4318 188a 400F9EC6 		setle	sil	#, tmp616
 4319 188e 4108F6   		or	r14b, sil	# tmp612, tmp616
 4320 1891 0F84D10C 		je	.L354	#,
 4320      0000
 4321 1897 4801D9   		add	rcx, rbx	# vectp.324, bitarray
 4322 189a 4801D8   		add	rax, rbx	# vectp.328, bitarray
 4323              	.LBB374:
 4324              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4325              		.loc 1 706 19 view .LVU1470
 4326 189d C5FE6F08 		vmovdqu	ymm1, YMMWORD PTR [rax]	# MEM[base: vectp.328_449, index: ivtmp.379_748, offset: 0B], MEM[
 4327 18a1 C4C1796E 		vmovd	xmm3, r15d	# _12,
 4327      DF
 4328 18a6 C5FE6F40 		vmovdqu	ymm0, YMMWORD PTR 32[rax]	# MEM[base: vectp.328_449, index: ivtmp.379_748, offset: 32B], M
 4328      20
 4329 18ab C5F96EE2 		vmovd	xmm4, edx	# _18,
 4330              	# sieve_extend.c:705:         bitword_t source0 = bitarray[source_word  ];
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4331              		.loc 1 705 19 view .LVU1471
 4332 18af C5FE6F39 		vmovdqu	ymm7, YMMWORD PTR [rcx]	# tmp1186, MEM[base: vectp.324_440, index: ivtmp.379_748, offset: 
 4333              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4334              		.loc 1 706 19 view .LVU1472
 4335 18b3 C5F56CE8 		vpunpcklqdq	ymm5, ymm1, ymm0	# tmp624, MEM[base: vectp.328_449, index: ivtmp.379_748, offset: 0B],
 4336 18b7 C5756DF0 		vpunpckhqdq	ymm14, ymm1, ymm0	# tmp642, MEM[base: vectp.328_449, index: ivtmp.379_748, offset: 0B]
 4337              	# sieve_extend.c:705:         bitword_t source0 = bitarray[source_word  ];
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4338              		.loc 1 705 19 view .LVU1473
 4339 18bb C5C56C51 		vpunpcklqdq	ymm2, ymm7, YMMWORD PTR 32[rcx]	# tmp628, tmp1186, MEM[base: vectp.324_440, index: ivt
 4339      20
 4340 18c0 4C8B7424 		mov	r14, QWORD PTR 56[rsp]	# _282, %sfp
 4340      38
 4341              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4342              		.loc 1 706 19 view .LVU1474
 4343 18c5 C463FD00 		vpermq	ymm8, ymm5, 216	# vect_perm_even_457, tmp624,
 4343      C5D8
 4344              	# sieve_extend.c:705:         bitword_t source0 = bitarray[source_word  ];
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4345              		.loc 1 705 19 view .LVU1475
 4346 18cb C4E3FD00 		vpermq	ymm6, ymm2, 216	# tmp627, tmp628,
 4346      F2D8
 4347              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4348              		.loc 1 706 19 view .LVU1476
 4349 18d1 C443FD00 		vpermq	ymm15, ymm14, 216	# tmp641, tmp642,
 4349      FED8
 4350              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4351              		.loc 1 707 63 view .LVU1477
 4352 18d7 C53DF3D4 		vpsllq	ymm10, ymm8, xmm4	# vect__100.332, vect_perm_even_457, _18
 4353              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
GAS LISTING /tmp/ccNeV1of.s 			page 128


 4354              		.loc 1 707 42 view .LVU1478
 4355 18db C54DD3CB 		vpsrlq	ymm9, ymm6, xmm3	# vect__98.331, tmp627, _12
 4356              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4357              		.loc 1 709 42 view .LVU1479
 4358 18df C5BDD3C3 		vpsrlq	ymm0, ymm8, xmm3	# vect__109.334, vect_perm_even_457, _12
 4359              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4360              		.loc 1 709 63 view .LVU1480
 4361 18e3 C585F3CC 		vpsllq	ymm1, ymm15, xmm4	# vect__110.335, tmp641, _18
 4362 18e7 49C1EE03 		shr	r14, 3	# _282,
 4363              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4364              		.loc 1 707 52 view .LVU1481
 4365 18eb C44135EB 		vpor	ymm11, ymm9, ymm10	# vect__104.333, vect__98.331, vect__100.332
 4365      DA
 4366              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4367              		.loc 1 709 52 view .LVU1482
 4368 18f0 C5F5EBE8 		vpor	ymm5, ymm1, ymm0	# vect__114.336, vect__110.335, vect__109.334
 4369 18f4 4D8D56FF 		lea	r10, -1[r14]	# tmp809,
 4370              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4371              		.loc 1 707 31 view .LVU1483
 4372 18f8 C4437D39 		vextracti128	xmm13, ymm11, 0x1	# tmp638, vect__104.333
 4372      DD01
 4373 18fe 4183E201 		and	r10d, 1	# tmp811,
 4374              	.LVL220:
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4375              		.loc 1 705 9 is_stmt 1 view .LVU1484
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4376              		.loc 1 706 9 view .LVU1485
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4377              		.loc 1 707 9 view .LVU1486
 4378              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4379              		.loc 1 709 31 is_stmt 0 view .LVU1487
 4380 1902 C4E37D39 		vextracti128	xmm7, ymm5, 0x1	# tmp652, vect__114.336
 4380      EF01
 4381 1908 4983FE01 		cmp	r14, 1	# bnd.317,
 4382              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4383              		.loc 1 707 31 view .LVU1488
 4384 190c C42179D6 		vmovq	QWORD PTR [rbx+r9], xmm11	# MEM[base: _463, index: ivtmp.379_748, offset: 0B], tmp634
 4384      1C0B
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4385              		.loc 1 707 31 view .LVU1489
 4386 1912 4E8D1C0B 		lea	r11, [rbx+r9]	# _463,
 4387 1916 C423F916 		vpextrq	QWORD PTR 16[rbx+r9], xmm11, 1	# MEM[base: _463, index: ivtmp.379_748, offset: 16B], tmp63
 4387      5C0B1001 
 4388 191e 4A8D3C03 		lea	rdi, [rbx+r8]	# _483,
 4389 1922 C42179D6 		vmovq	QWORD PTR 32[rbx+r9], xmm13	# MEM[base: _463, index: ivtmp.379_748, offset: 32B], tmp638
 4389      6C0B20
 4390 1929 C423F916 		vpextrq	QWORD PTR 48[rbx+r9], xmm13, 1	# MEM[base: _463, index: ivtmp.379_748, offset: 48B], tmp63
 4390      6C0B3001 
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 4391              		.loc 1 708 9 is_stmt 1 view .LVU1490
GAS LISTING /tmp/ccNeV1of.s 			page 129


 4392              	.LVL221:
 709:sieve_extend.c ****         copy_word += 2;
 4393              		.loc 1 709 9 view .LVU1491
 4394 1931 41B90100 		mov	r9d, 1	# ivtmp.377,
 4394      0000
 4395              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4396              		.loc 1 709 31 is_stmt 0 view .LVU1492
 4397 1937 C4A179D6 		vmovq	QWORD PTR [rbx+r8], xmm5	# MEM[base: _483, index: ivtmp.379_748, offset: 0B], tmp648
 4397      2C03
 709:sieve_extend.c ****         copy_word += 2;
 4398              		.loc 1 709 31 view .LVU1493
 4399 193d C4A3F916 		vpextrq	QWORD PTR 16[rbx+r8], xmm5, 1	# MEM[base: _483, index: ivtmp.379_748, offset: 16B], tmp648
 4399      6C031001 
 4400 1945 C4A179D6 		vmovq	QWORD PTR 32[rbx+r8], xmm7	# MEM[base: _483, index: ivtmp.379_748, offset: 32B], tmp652
 4400      7C0320
 4401 194c C4A3F916 		vpextrq	QWORD PTR 48[rbx+r8], xmm7, 1	# MEM[base: _483, index: ivtmp.379_748, offset: 48B], tmp652
 4401      7C033001 
 710:sieve_extend.c ****         source_word += 2;
 4402              		.loc 1 710 9 is_stmt 1 view .LVU1494
 711:sieve_extend.c ****         distance += 2;
 4403              		.loc 1 711 9 view .LVU1495
 712:sieve_extend.c ****     }
 4404              		.loc 1 712 9 view .LVU1496
 712:sieve_extend.c ****     }
 4405              		.loc 1 712 9 is_stmt 0 view .LVU1497
 4406              	.LBE374:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4407              		.loc 1 704 11 is_stmt 1 view .LVU1498
 4408 1954 41B84000 		mov	r8d, 64	# ivtmp.379,
 4408      0000
 4409 195a 0F86EC01 		jbe	.L499	#,
 4409      0000
 4410 1960 4D85D2   		test	r10, r10	# tmp811
 4411 1963 0F84A700 		je	.L355	#,
 4411      0000
 4412              	.LBB375:
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4413              		.loc 1 705 9 view .LVU1499
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4414              		.loc 1 706 9 view .LVU1500
 4415              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4416              		.loc 1 706 19 is_stmt 0 view .LVU1501
 4417 1969 C57E6F48 		vmovdqu	ymm9, YMMWORD PTR 64[rax]	# MEM[base: vectp.328_449, index: ivtmp.379_748, offset: 0B], ME
 4417      40
 4418 196e 4983FE02 		cmp	r14, 2	# bnd.317,
 4419 1972 C57E6F50 		vmovdqu	ymm10, YMMWORD PTR 96[rax]	# MEM[base: vectp.328_449, index: ivtmp.379_748, offset: 32B], 
 4419      60
 4420 1977 41B90200 		mov	r9d, 2	# ivtmp.377,
 4420      0000
 4421              	# sieve_extend.c:705:         bitword_t source0 = bitarray[source_word  ];
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4422              		.loc 1 705 19 view .LVU1502
 4423 197d C5FE6F71 		vmovdqu	ymm6, YMMWORD PTR 64[rcx]	# tmp1287, MEM[base: vectp.324_440, index: ivtmp.379_748, offset
 4423      40
 4424              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
GAS LISTING /tmp/ccNeV1of.s 			page 130


 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4425              		.loc 1 706 19 view .LVU1503
 4426 1982 C4C1356C 		vpunpcklqdq	ymm2, ymm9, ymm10	# tmp1075, MEM[base: vectp.328_449, index: ivtmp.379_748, offset: 0B
 4426      D2
 4427 1987 C441356D 		vpunpckhqdq	ymm8, ymm9, ymm10	# tmp1090, MEM[base: vectp.328_449, index: ivtmp.379_748, offset: 0B
 4427      C2
 4428              	# sieve_extend.c:705:         bitword_t source0 = bitarray[source_word  ];
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4429              		.loc 1 705 19 view .LVU1504
 4430 198c C54D6C61 		vpunpcklqdq	ymm12, ymm6, YMMWORD PTR 96[rcx]	# tmp1079, tmp1287, MEM[base: vectp.324_440, index: i
 4430      60
 4431              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4432              		.loc 1 706 19 view .LVU1505
 4433 1991 C463FD00 		vpermq	ymm11, ymm2, 216	# vect_perm_even_457, tmp1075,
 4433      DAD8
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4434              		.loc 1 707 9 is_stmt 1 view .LVU1506
 4435              	# sieve_extend.c:705:         bitword_t source0 = bitarray[source_word  ];
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4436              		.loc 1 705 19 is_stmt 0 view .LVU1507
 4437 1997 C443FD00 		vpermq	ymm13, ymm12, 216	# tmp1080, tmp1079,
 4437      ECD8
 4438              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4439              		.loc 1 706 19 view .LVU1508
 4440 199d C4C3FD00 		vpermq	ymm7, ymm8, 216	# tmp1091, tmp1090,
 4440      F8D8
 4441 19a3 41B88000 		mov	r8d, 128	# ivtmp.379,
 4441      0000
 4442              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4443              		.loc 1 707 42 view .LVU1509
 4444 19a9 C515D3F3 		vpsrlq	ymm14, ymm13, xmm3	# vect__98.331, tmp1080, _12
 4445              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4446              		.loc 1 707 63 view .LVU1510
 4447 19ad C525F3FC 		vpsllq	ymm15, ymm11, xmm4	# vect__100.332, vect_perm_even_457, _18
 4448              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4449              		.loc 1 709 42 view .LVU1511
 4450 19b1 C525D3D3 		vpsrlq	ymm10, ymm11, xmm3	# vect__109.334, vect_perm_even_457, _12
 4451              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4452              		.loc 1 709 63 view .LVU1512
 4453 19b5 C545F3CC 		vpsllq	ymm9, ymm7, xmm4	# vect__110.335, tmp1091, _18
 4454              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4455              		.loc 1 707 52 view .LVU1513
 4456 19b9 C4C10DEB 		vpor	ymm1, ymm14, ymm15	# vect__104.333, vect__98.331, vect__100.332
 4456      CF
 4457              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4458              		.loc 1 709 52 view .LVU1514
 4459 19be C4C135EB 		vpor	ymm2, ymm9, ymm10	# vect__114.336, vect__110.335, vect__109.334
 4459      D2
 4460              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
GAS LISTING /tmp/ccNeV1of.s 			page 131


 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4461              		.loc 1 707 31 view .LVU1515
 4462 19c3 C4E37D39 		vextracti128	xmm5, ymm1, 0x1	# tmp1087, vect__104.333
 4462      CD01
 4463              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4464              		.loc 1 709 31 view .LVU1516
 4465 19c9 C4E37D39 		vextracti128	xmm6, ymm2, 0x1	# tmp1098, vect__114.336
 4465      D601
 4466              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4467              		.loc 1 707 31 view .LVU1517
 4468 19cf C4C179D6 		vmovq	QWORD PTR 64[r11], xmm1	# MEM[base: _463, index: ivtmp.379_748, offset: 0B], tmp1084
 4468      4B40
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4469              		.loc 1 707 31 view .LVU1518
 4470 19d5 C4C3F916 		vpextrq	QWORD PTR 80[r11], xmm1, 1	# MEM[base: _463, index: ivtmp.379_748, offset: 16B], tmp1084
 4470      4B5001
 4471 19dc C4C179D6 		vmovq	QWORD PTR 96[r11], xmm5	# MEM[base: _463, index: ivtmp.379_748, offset: 32B], tmp1087
 4471      6B60
 4472 19e2 C4C3F916 		vpextrq	QWORD PTR 112[r11], xmm5, 1	# MEM[base: _463, index: ivtmp.379_748, offset: 48B], tmp1087
 4472      6B7001
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 4473              		.loc 1 708 9 is_stmt 1 view .LVU1519
 709:sieve_extend.c ****         copy_word += 2;
 4474              		.loc 1 709 9 view .LVU1520
 4475              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4476              		.loc 1 709 31 is_stmt 0 view .LVU1521
 4477 19e9 C5F9D657 		vmovq	QWORD PTR 64[rdi], xmm2	# MEM[base: _483, index: ivtmp.379_748, offset: 0B], tmp1095
 4477      40
 709:sieve_extend.c ****         copy_word += 2;
 4478              		.loc 1 709 31 view .LVU1522
 4479 19ee C4E3F916 		vpextrq	QWORD PTR 80[rdi], xmm2, 1	# MEM[base: _483, index: ivtmp.379_748, offset: 16B], tmp1095
 4479      575001
 4480 19f5 C5F9D677 		vmovq	QWORD PTR 96[rdi], xmm6	# MEM[base: _483, index: ivtmp.379_748, offset: 32B], tmp1098
 4480      60
 4481 19fa C4E3F916 		vpextrq	QWORD PTR 112[rdi], xmm6, 1	# MEM[base: _483, index: ivtmp.379_748, offset: 48B], tmp1098
 4481      777001
 710:sieve_extend.c ****         source_word += 2;
 4482              		.loc 1 710 9 is_stmt 1 view .LVU1523
 711:sieve_extend.c ****         distance += 2;
 4483              		.loc 1 711 9 view .LVU1524
 712:sieve_extend.c ****     }
 4484              		.loc 1 712 9 view .LVU1525
 712:sieve_extend.c ****     }
 4485              		.loc 1 712 9 is_stmt 0 view .LVU1526
 4486              	.LBE375:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4487              		.loc 1 704 11 is_stmt 1 view .LVU1527
 4488 1a01 0F864501 		jbe	.L499	#,
 4488      0000
 4489 1a07 660F1F84 		.p2align 4
 4489      00000000 
 4489      00
 4490              		.p2align 3
 4491              	.L355:
GAS LISTING /tmp/ccNeV1of.s 			page 132


 4492              	.LBB376:
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4493              		.loc 1 705 9 view .LVU1528
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4494              		.loc 1 706 9 view .LVU1529
 4495              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4496              		.loc 1 706 19 is_stmt 0 view .LVU1530
 4497 1a10 C4217E6F 		vmovdqu	ymm12, YMMWORD PTR [rax+r8]	# MEM[base: vectp.328_449, index: ivtmp.379_748, offset: 0B], 
 4497      2400
 4498 1a16 4983C102 		add	r9, 2	# ivtmp.377,
 4499 1a1a C4217E6F 		vmovdqu	ymm13, YMMWORD PTR 32[rax+r8]	# MEM[base: vectp.328_449, index: ivtmp.379_748, offset: 32B
 4499      6C0020
 4500              	# sieve_extend.c:705:         bitword_t source0 = bitarray[source_word  ];
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4501              		.loc 1 705 19 view .LVU1531
 4502 1a21 C4A17E6F 		vmovdqu	ymm1, YMMWORD PTR [rcx+r8]	# tmp1187, MEM[base: vectp.324_440, index: ivtmp.379_748, offse
 4502      0C01
 4503              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4504              		.loc 1 706 19 view .LVU1532
 4505 1a27 C4411D6C 		vpunpcklqdq	ymm14, ymm12, ymm13	# tmp818, MEM[base: vectp.328_449, index: ivtmp.379_748, offset: 0
 4505      F5
 4506 1a2c C4411D6D 		vpunpckhqdq	ymm11, ymm12, ymm13	# tmp833, MEM[base: vectp.328_449, index: ivtmp.379_748, offset: 0
 4506      DD
 4507              	# sieve_extend.c:705:         bitword_t source0 = bitarray[source_word  ];
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4508              		.loc 1 705 19 view .LVU1533
 4509 1a31 C4A1756C 		vpunpcklqdq	ymm0, ymm1, YMMWORD PTR 32[rcx+r8]	# tmp822, tmp1187, MEM[base: vectp.324_440, index: 
 4509      440120
 4510              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4511              		.loc 1 706 19 view .LVU1534
 4512 1a38 C443FD00 		vpermq	ymm15, ymm14, 216	# vect_perm_even_457, tmp818,
 4512      FED8
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4513              		.loc 1 707 9 is_stmt 1 view .LVU1535
 4514              	# sieve_extend.c:705:         bitword_t source0 = bitarray[source_word  ];
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4515              		.loc 1 705 19 is_stmt 0 view .LVU1536
 4516 1a3e C4E3FD00 		vpermq	ymm5, ymm0, 216	# tmp823, tmp822,
 4516      E8D8
 4517              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4518              		.loc 1 706 19 view .LVU1537
 4519 1a44 C4C3FD00 		vpermq	ymm6, ymm11, 216	# tmp834, tmp833,
 4519      F3D8
 4520              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4521              		.loc 1 707 42 view .LVU1538
 4522 1a4a C555D3C3 		vpsrlq	ymm8, ymm5, xmm3	# vect__98.331, tmp823, _12
 4523              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4524              		.loc 1 707 63 view .LVU1539
 4525 1a4e C585F3FC 		vpsllq	ymm7, ymm15, xmm4	# vect__100.332, vect_perm_even_457, _18
 4526              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
GAS LISTING /tmp/ccNeV1of.s 			page 133


 4527              		.loc 1 709 42 view .LVU1540
 4528 1a52 C505D3EB 		vpsrlq	ymm13, ymm15, xmm3	# vect__109.334, vect_perm_even_457, _12
 4529              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4530              		.loc 1 709 63 view .LVU1541
 4531 1a56 C54DF3E4 		vpsllq	ymm12, ymm6, xmm4	# vect__110.335, tmp834, _18
 4532              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4533              		.loc 1 707 52 view .LVU1542
 4534 1a5a C53DEBCF 		vpor	ymm9, ymm8, ymm7	# vect__104.333, vect__98.331, vect__100.332
 4535              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4536              		.loc 1 709 52 view .LVU1543
 4537 1a5e C4411DEB 		vpor	ymm14, ymm12, ymm13	# vect__114.336, vect__110.335, vect__109.334
 4537      F5
 4538              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4539              		.loc 1 707 31 view .LVU1544
 4540 1a63 C4637D39 		vextracti128	xmm2, ymm9, 0x1	# tmp830, vect__104.333
 4540      CA01
 4541              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4542              		.loc 1 709 31 view .LVU1545
 4543 1a69 C4637D39 		vextracti128	xmm1, ymm14, 0x1	# tmp841, vect__114.336
 4543      F101
 4544              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4545              		.loc 1 707 31 view .LVU1546
 4546 1a6f C40179D6 		vmovq	QWORD PTR [r11+r8], xmm9	# MEM[base: _463, index: ivtmp.379_748, offset: 0B], tmp827
 4546      0C03
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4547              		.loc 1 707 31 view .LVU1547
 4548 1a75 C403F916 		vpextrq	QWORD PTR 16[r11+r8], xmm9, 1	# MEM[base: _463, index: ivtmp.379_748, offset: 16B], tmp827
 4548      4C031001 
 4549 1a7d C48179D6 		vmovq	QWORD PTR 32[r11+r8], xmm2	# MEM[base: _463, index: ivtmp.379_748, offset: 32B], tmp830
 4549      540320
 4550 1a84 C483F916 		vpextrq	QWORD PTR 48[r11+r8], xmm2, 1	# MEM[base: _463, index: ivtmp.379_748, offset: 48B], tmp830
 4550      54033001 
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 4551              		.loc 1 708 9 is_stmt 1 view .LVU1548
 709:sieve_extend.c ****         copy_word += 2;
 4552              		.loc 1 709 9 view .LVU1549
 4553              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4554              		.loc 1 709 31 is_stmt 0 view .LVU1550
 4555 1a8c C42179D6 		vmovq	QWORD PTR [rdi+r8], xmm14	# MEM[base: _483, index: ivtmp.379_748, offset: 0B], tmp838
 4555      3407
 709:sieve_extend.c ****         copy_word += 2;
 4556              		.loc 1 709 31 view .LVU1551
 4557 1a92 C423F916 		vpextrq	QWORD PTR 16[rdi+r8], xmm14, 1	# MEM[base: _483, index: ivtmp.379_748, offset: 16B], tmp83
 4557      74071001 
 4558 1a9a C4A179D6 		vmovq	QWORD PTR 32[rdi+r8], xmm1	# MEM[base: _483, index: ivtmp.379_748, offset: 32B], tmp841
 4558      4C0720
 4559 1aa1 C4A3F916 		vpextrq	QWORD PTR 48[rdi+r8], xmm1, 1	# MEM[base: _483, index: ivtmp.379_748, offset: 48B], tmp841
 4559      4C073001 
 710:sieve_extend.c ****         source_word += 2;
 4560              		.loc 1 710 9 is_stmt 1 view .LVU1552
GAS LISTING /tmp/ccNeV1of.s 			page 134


 711:sieve_extend.c ****         distance += 2;
 4561              		.loc 1 711 9 view .LVU1553
 712:sieve_extend.c ****     }
 4562              		.loc 1 712 9 view .LVU1554
 712:sieve_extend.c ****     }
 4563              		.loc 1 712 9 is_stmt 0 view .LVU1555
 4564              	.LBE376:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4565              		.loc 1 704 11 is_stmt 1 view .LVU1556
 4566              	.LBB377:
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4567              		.loc 1 705 9 view .LVU1557
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4568              		.loc 1 706 9 view .LVU1558
 4569              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4570              		.loc 1 706 19 is_stmt 0 view .LVU1559
 4571 1aa9 C4217E6F 		vmovdqu	ymm8, YMMWORD PTR 64[rax+r8]	# MEM[base: vectp.328_449, index: ivtmp.379_748, offset: 0B],
 4571      440040
 4572 1ab0 C4A17E6F 		vmovdqu	ymm0, YMMWORD PTR 96[rax+r8]	# MEM[base: vectp.328_449, index: ivtmp.379_748, offset: 32B]
 4572      440060
 4573              	# sieve_extend.c:705:         bitword_t source0 = bitarray[source_word  ];
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4574              		.loc 1 705 19 view .LVU1560
 4575 1ab7 C4A17E6F 		vmovdqu	ymm7, YMMWORD PTR 64[rcx+r8]	# tmp1188, MEM[base: vectp.324_440, index: ivtmp.379_748, off
 4575      7C0140
 4576              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4577              		.loc 1 706 19 view .LVU1561
 4578 1abe C5BD6CE8 		vpunpcklqdq	ymm5, ymm8, ymm0	# tmp848, MEM[base: vectp.328_449, index: ivtmp.379_748, offset: 0B],
 4579 1ac2 C53D6DF8 		vpunpckhqdq	ymm15, ymm8, ymm0	# tmp863, MEM[base: vectp.328_449, index: ivtmp.379_748, offset: 0B]
 4580              	# sieve_extend.c:705:         bitword_t source0 = bitarray[source_word  ];
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4581              		.loc 1 705 19 view .LVU1562
 4582 1ac6 C421456C 		vpunpcklqdq	ymm10, ymm7, YMMWORD PTR 96[rcx+r8]	# tmp852, tmp1188, MEM[base: vectp.324_440, index:
 4582      540160
 4583              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4584              		.loc 1 706 19 view .LVU1563
 4585 1acd C463FD00 		vpermq	ymm9, ymm5, 216	# vect_perm_even_457, tmp848,
 4585      CDD8
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4586              		.loc 1 707 9 is_stmt 1 view .LVU1564
 4587              	# sieve_extend.c:705:         bitword_t source0 = bitarray[source_word  ];
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4588              		.loc 1 705 19 is_stmt 0 view .LVU1565
 4589 1ad3 C4C3FD00 		vpermq	ymm2, ymm10, 216	# tmp853, tmp852,
 4589      D2D8
 4590              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4591              		.loc 1 706 19 view .LVU1566
 4592 1ad9 C4C3FD00 		vpermq	ymm1, ymm15, 216	# tmp864, tmp863,
 4592      CFD8
 4593              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4594              		.loc 1 707 42 view .LVU1567
 4595 1adf C56DD3DB 		vpsrlq	ymm11, ymm2, xmm3	# vect__98.331, tmp853, _12
GAS LISTING /tmp/ccNeV1of.s 			page 135


 4596              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4597              		.loc 1 707 63 view .LVU1568
 4598 1ae3 C5B5F3F4 		vpsllq	ymm6, ymm9, xmm4	# vect__100.332, vect_perm_even_457, _18
 4599              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4600              		.loc 1 709 42 view .LVU1569
 4601 1ae7 C5B5D3C3 		vpsrlq	ymm0, ymm9, xmm3	# vect__109.334, vect_perm_even_457, _12
 4602              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4603              		.loc 1 709 63 view .LVU1570
 4604 1aeb C575F3C4 		vpsllq	ymm8, ymm1, xmm4	# vect__110.335, tmp864, _18
 4605              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4606              		.loc 1 707 52 view .LVU1571
 4607 1aef C525EBE6 		vpor	ymm12, ymm11, ymm6	# vect__104.333, vect__98.331, vect__100.332
 4608              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4609              		.loc 1 709 52 view .LVU1572
 4610 1af3 C5BDEBE8 		vpor	ymm5, ymm8, ymm0	# vect__114.336, vect__110.335, vect__109.334
 4611              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4612              		.loc 1 707 31 view .LVU1573
 4613 1af7 C4437D39 		vextracti128	xmm14, ymm12, 0x1	# tmp860, vect__104.333
 4613      E601
 4614              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4615              		.loc 1 709 31 view .LVU1574
 4616 1afd C4E37D39 		vextracti128	xmm7, ymm5, 0x1	# tmp871, vect__114.336
 4616      EF01
 4617              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4618              		.loc 1 707 31 view .LVU1575
 4619 1b03 C40179D6 		vmovq	QWORD PTR 64[r11+r8], xmm12	# MEM[base: _463, index: ivtmp.379_748, offset: 0B], tmp857
 4619      640340
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4620              		.loc 1 707 31 view .LVU1576
 4621 1b0a C403F916 		vpextrq	QWORD PTR 80[r11+r8], xmm12, 1	# MEM[base: _463, index: ivtmp.379_748, offset: 16B], tmp85
 4621      64035001 
 4622 1b12 C40179D6 		vmovq	QWORD PTR 96[r11+r8], xmm14	# MEM[base: _463, index: ivtmp.379_748, offset: 32B], tmp860
 4622      740360
 4623 1b19 C403F916 		vpextrq	QWORD PTR 112[r11+r8], xmm14, 1	# MEM[base: _463, index: ivtmp.379_748, offset: 48B], tmp8
 4623      74037001 
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 4624              		.loc 1 708 9 is_stmt 1 view .LVU1577
 709:sieve_extend.c ****         copy_word += 2;
 4625              		.loc 1 709 9 view .LVU1578
 4626              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4627              		.loc 1 709 31 is_stmt 0 view .LVU1579
 4628 1b21 C4A179D6 		vmovq	QWORD PTR 64[rdi+r8], xmm5	# MEM[base: _483, index: ivtmp.379_748, offset: 0B], tmp868
 4628      6C0740
 709:sieve_extend.c ****         copy_word += 2;
 4629              		.loc 1 709 31 view .LVU1580
 4630 1b28 C4A3F916 		vpextrq	QWORD PTR 80[rdi+r8], xmm5, 1	# MEM[base: _483, index: ivtmp.379_748, offset: 16B], tmp868
 4630      6C075001 
 4631 1b30 C4A179D6 		vmovq	QWORD PTR 96[rdi+r8], xmm7	# MEM[base: _483, index: ivtmp.379_748, offset: 32B], tmp871
GAS LISTING /tmp/ccNeV1of.s 			page 136


 4631      7C0760
 4632 1b37 C4A3F916 		vpextrq	QWORD PTR 112[rdi+r8], xmm7, 1	# MEM[base: _483, index: ivtmp.379_748, offset: 48B], tmp87
 4632      7C077001 
 710:sieve_extend.c ****         source_word += 2;
 4633              		.loc 1 710 9 is_stmt 1 view .LVU1581
 711:sieve_extend.c ****         distance += 2;
 4634              		.loc 1 711 9 view .LVU1582
 712:sieve_extend.c ****     }
 4635              		.loc 1 712 9 view .LVU1583
 712:sieve_extend.c ****     }
 4636              		.loc 1 712 9 is_stmt 0 view .LVU1584
 4637              	.LBE377:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4638              		.loc 1 704 11 is_stmt 1 view .LVU1585
 4639 1b3f 4983E880 		sub	r8, -128	# ivtmp.379,
 4640 1b43 4D39CE   		cmp	r14, r9	# bnd.317, ivtmp.377
 4641 1b46 0F87C4FE 		ja	.L355	#,
 4641      FFFF
 4642              	.L499:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4643              		.loc 1 704 11 is_stmt 0 view .LVU1586
 4644 1b4c 49C1E603 		sal	r14, 3	# _433,
 4645 1b50 4B8D0C34 		lea	rcx, [r12+r14]	# tmp.319,
 4646 1b54 4B8D4435 		lea	rax, 0[r13+r14]	# tmp.320,
 4646      00
 4647              	.LVL222:
 4648              	.LBB378:
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4649              		.loc 1 705 9 is_stmt 1 view .LVU1587
 4650              	# sieve_extend.c:705:         bitword_t source0 = bitarray[source_word  ];
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4651              		.loc 1 705 37 is_stmt 0 view .LVU1588
 4652 1b59 4C8D1CCD 		lea	r11, 0[0+rcx*8]	# _639,
 4652      00000000 
 4653              	.LVL223:
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4654              		.loc 1 706 9 is_stmt 1 view .LVU1589
 4655              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4656              		.loc 1 707 42 is_stmt 0 view .LVU1590
 4657 1b61 C4E283F7 		shrx	rsi, QWORD PTR [rbx+rcx*8], r15	# tmp656, *_640, shift
 4657      34CB
 4658              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4659              		.loc 1 706 19 view .LVU1591
 4660 1b67 4A8B7C1B 		mov	rdi, QWORD PTR 8[rbx+r11]	# source1, *_644
 4660      08
 4661              	.LVL224:
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4662              		.loc 1 707 9 is_stmt 1 view .LVU1592
 4663              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4664              		.loc 1 707 63 is_stmt 0 view .LVU1593
 4665 1b6c C462E9F7 		shlx	r10, rdi, rdx	# tmp658, source1, shift_flipped
 4665      D7
 4666              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
GAS LISTING /tmp/ccNeV1of.s 			page 137


 4667              		.loc 1 707 52 view .LVU1594
 4668 1b71 4C09D6   		or	rsi, r10	# tmp659, tmp658
 4669              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4670              		.loc 1 709 42 view .LVU1595
 4671 1b74 C4E283F7 		shrx	rdi, rdi, r15	# tmp662, source1, shift
 4671      FF
 4672              	.LVL225:
 4673              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4674              		.loc 1 707 52 view .LVU1596
 4675 1b79 488934C3 		mov	QWORD PTR [rbx+rax*8], rsi	# *_649, tmp659
 4676              	.LVL226:
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 4677              		.loc 1 708 9 is_stmt 1 view .LVU1597
 4678              	# sieve_extend.c:708:         bitword_t source2 = bitarray[source_word+2];
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 4679              		.loc 1 708 37 is_stmt 0 view .LVU1598
 4680 1b7d 4C8D4902 		lea	r9, 2[rcx]	# _652,
 4681              	.LVL227:
 709:sieve_extend.c ****         copy_word += 2;
 4682              		.loc 1 709 9 is_stmt 1 view .LVU1599
 4683              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4684              		.loc 1 709 63 is_stmt 0 view .LVU1600
 4685 1b81 4E8B441B 		mov	r8, QWORD PTR 16[rbx+r11]	# *_654, *_654
 4685      10
 4686 1b86 C442E9F7 		shlx	r11, r8, rdx	# tmp660, *_654, shift_flipped
 4686      D8
 4687              	.LVL228:
 4688              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4689              		.loc 1 709 52 view .LVU1601
 4690 1b8b 4C09DF   		or	rdi, r11	# tmp663, tmp660
 4691              	# sieve_extend.c:710:         copy_word += 2;
 710:sieve_extend.c ****         source_word += 2;
 4692              		.loc 1 710 19 view .LVU1602
 4693 1b8e 4C8D4002 		lea	r8, 2[rax]	# copy_word,
 4694              	.LVL229:
 710:sieve_extend.c ****         source_word += 2;
 4695              		.loc 1 710 19 view .LVU1603
 4696              	.LBE378:
 4697              	# sieve_extend.c:704:     while (copy_word < fast_loop_stop_word) {
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4698              		.loc 1 704 11 view .LVU1604
 4699 1b92 4C8B5C24 		mov	r11, QWORD PTR 48[rsp]	# fast_loop_stop_word, %sfp
 4699      30
 4700              	.LBB379:
 4701              	# sieve_extend.c:712:         distance += 2;
 712:sieve_extend.c ****     }
 4702              		.loc 1 712 18 view .LVU1605
 4703 1b97 4D8D5602 		lea	r10, 2[r14]	# distance,
 4704              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4705              		.loc 1 709 52 view .LVU1606
 4706 1b9b 48897CC3 		mov	QWORD PTR 8[rbx+rax*8], rdi	# *_660, tmp663
 4706      08
GAS LISTING /tmp/ccNeV1of.s 			page 138


 4707              	.LVL230:
 710:sieve_extend.c ****         source_word += 2;
 4708              		.loc 1 710 9 is_stmt 1 view .LVU1607
 711:sieve_extend.c ****         distance += 2;
 4709              		.loc 1 711 9 view .LVU1608
 712:sieve_extend.c ****     }
 4710              		.loc 1 712 9 view .LVU1609
 712:sieve_extend.c ****     }
 4711              		.loc 1 712 9 is_stmt 0 view .LVU1610
 4712              	.LBE379:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4713              		.loc 1 704 11 is_stmt 1 view .LVU1611
 4714 1ba0 4D39C3   		cmp	r11, r8	# fast_loop_stop_word, copy_word
 4715 1ba3 0F86D500 		jbe	.L358	#,
 4715      0000
 4716              	.LBB380:
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4717              		.loc 1 705 9 view .LVU1612
 4718              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4719              		.loc 1 707 42 is_stmt 0 view .LVU1613
 4720 1ba9 4A8B34CB 		mov	rsi, QWORD PTR [rbx+r9*8]	# *_670, *_670
 4721              	# sieve_extend.c:705:         bitword_t source0 = bitarray[source_word  ];
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4722              		.loc 1 705 37 view .LVU1614
 4723 1bad 4E8D14CD 		lea	r10, 0[0+r9*8]	# _669,
 4723      00000000 
 4724              	.LVL231:
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4725              		.loc 1 706 9 is_stmt 1 view .LVU1615
 4726              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4727              		.loc 1 706 19 is_stmt 0 view .LVU1616
 4728 1bb5 4A8B7C13 		mov	rdi, QWORD PTR 8[rbx+r10]	# source1, *_674
 4728      08
 4729              	.LVL232:
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4730              		.loc 1 707 9 is_stmt 1 view .LVU1617
 4731              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4732              		.loc 1 707 42 is_stmt 0 view .LVU1618
 4733 1bba C4E283F7 		shrx	rsi, rsi, r15	# tmp664, *_670, shift
 4733      F6
 4734              	.LVL233:
 4735              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4736              		.loc 1 707 63 view .LVU1619
 4737 1bbf C462E9F7 		shlx	r9, rdi, rdx	# tmp666, source1, shift_flipped
 4737      CF
 4738              	.LVL234:
 4739              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4740              		.loc 1 707 52 view .LVU1620
 4741 1bc4 4C09CE   		or	rsi, r9	# tmp667, tmp666
 4742 1bc7 4A8934C3 		mov	QWORD PTR [rbx+r8*8], rsi	# *_679, tmp667
 4743              	.LVL235:
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
GAS LISTING /tmp/ccNeV1of.s 			page 139


 4744              		.loc 1 708 9 is_stmt 1 view .LVU1621
 4745              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4746              		.loc 1 709 42 is_stmt 0 view .LVU1622
 4747 1bcb C4E283F7 		shrx	rdi, rdi, r15	# tmp670, source1, shift
 4747      FF
 4748              	.LVL236:
 4749              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4750              		.loc 1 709 63 view .LVU1623
 4751 1bd0 4E8B5413 		mov	r10, QWORD PTR 16[rbx+r10]	# *_684, *_684
 4751      10
 4752 1bd5 C4C2E9F7 		shlx	rsi, r10, rdx	# tmp668, *_684, shift_flipped
 4752      F2
 4753              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4754              		.loc 1 709 52 view .LVU1624
 4755 1bda 4809F7   		or	rdi, rsi	# tmp671, tmp668
 4756              	# sieve_extend.c:708:         bitword_t source2 = bitarray[source_word+2];
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 4757              		.loc 1 708 37 view .LVU1625
 4758 1bdd 4C8D4904 		lea	r9, 4[rcx]	# _682,
 709:sieve_extend.c ****         copy_word += 2;
 4759              		.loc 1 709 9 is_stmt 1 view .LVU1626
 4760              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4761              		.loc 1 709 52 is_stmt 0 view .LVU1627
 4762 1be1 4A897CC3 		mov	QWORD PTR 8[rbx+r8*8], rdi	# *_690, tmp671
 4762      08
 710:sieve_extend.c ****         source_word += 2;
 4763              		.loc 1 710 9 is_stmt 1 view .LVU1628
 4764              	# sieve_extend.c:710:         copy_word += 2;
 710:sieve_extend.c ****         source_word += 2;
 4765              		.loc 1 710 19 is_stmt 0 view .LVU1629
 4766 1be6 4C8D4004 		lea	r8, 4[rax]	# copy_word,
 4767              	.LVL237:
 711:sieve_extend.c ****         distance += 2;
 4768              		.loc 1 711 9 is_stmt 1 view .LVU1630
 712:sieve_extend.c ****     }
 4769              		.loc 1 712 9 view .LVU1631
 712:sieve_extend.c ****     }
 4770              		.loc 1 712 9 is_stmt 0 view .LVU1632
 4771              	.LBE380:
 4772              	# sieve_extend.c:704:     while (copy_word < fast_loop_stop_word) {
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4773              		.loc 1 704 11 view .LVU1633
 4774 1bea 4D39C3   		cmp	r11, r8	# fast_loop_stop_word, copy_word
 4775              	.LBB381:
 4776              	# sieve_extend.c:712:         distance += 2;
 712:sieve_extend.c ****     }
 4777              		.loc 1 712 18 view .LVU1634
 4778 1bed 4D8D5604 		lea	r10, 4[r14]	# distance,
 4779              	.LVL238:
 712:sieve_extend.c ****     }
 4780              		.loc 1 712 18 view .LVU1635
 4781              	.LBE381:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
GAS LISTING /tmp/ccNeV1of.s 			page 140


 4782              		.loc 1 704 11 is_stmt 1 view .LVU1636
 4783 1bf1 0F868700 		jbe	.L358	#,
 4783      0000
 4784              	.LBB382:
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4785              		.loc 1 705 9 view .LVU1637
 4786              	# sieve_extend.c:705:         bitword_t source0 = bitarray[source_word  ];
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4787              		.loc 1 705 37 is_stmt 0 view .LVU1638
 4788 1bf7 4E8D14CD 		lea	r10, 0[0+r9*8]	# _699,
 4788      00000000 
 4789              	.LVL239:
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4790              		.loc 1 706 9 is_stmt 1 view .LVU1639
 4791              	# sieve_extend.c:710:         copy_word += 2;
 710:sieve_extend.c ****         source_word += 2;
 4792              		.loc 1 710 19 is_stmt 0 view .LVU1640
 4793 1bff 4883C006 		add	rax, 6	# copy_word,
 4794              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4795              		.loc 1 706 19 view .LVU1641
 4796 1c03 4A8B7C13 		mov	rdi, QWORD PTR 8[rbx+r10]	# source1, *_704
 4796      08
 4797              	.LVL240:
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4798              		.loc 1 707 9 is_stmt 1 view .LVU1642
 4799              	# sieve_extend.c:708:         bitword_t source2 = bitarray[source_word+2];
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 4800              		.loc 1 708 37 is_stmt 0 view .LVU1643
 4801 1c08 4883C106 		add	rcx, 6	# _712,
 4802              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4803              		.loc 1 707 42 view .LVU1644
 4804 1c0c 4E8B0CCB 		mov	r9, QWORD PTR [rbx+r9*8]	# *_700, *_700
 4805              	.LVL241:
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4806              		.loc 1 707 42 view .LVU1645
 4807 1c10 C4C283F7 		shrx	rsi, r9, r15	# tmp672, *_700, shift
 4807      F1
 4808              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4809              		.loc 1 707 63 view .LVU1646
 4810 1c15 C462E9F7 		shlx	r9, rdi, rdx	# tmp674, source1, shift_flipped
 4810      CF
 4811              	.LVL242:
 4812              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4813              		.loc 1 707 52 view .LVU1647
 4814 1c1a 4C09CE   		or	rsi, r9	# tmp675, tmp674
 4815 1c1d 4A8934C3 		mov	QWORD PTR [rbx+r8*8], rsi	# *_709, tmp675
 4816              	.LVL243:
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 4817              		.loc 1 708 9 is_stmt 1 view .LVU1648
 709:sieve_extend.c ****         copy_word += 2;
 4818              		.loc 1 709 9 view .LVU1649
 4819              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
GAS LISTING /tmp/ccNeV1of.s 			page 141


 4820              		.loc 1 709 42 is_stmt 0 view .LVU1650
 4821 1c21 C4E283F7 		shrx	rdi, rdi, r15	# tmp678, source1, shift
 4821      FF
 4822              	.LVL244:
 4823              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4824              		.loc 1 709 63 view .LVU1651
 4825 1c26 4E8B5413 		mov	r10, QWORD PTR 16[rbx+r10]	# *_714, *_714
 4825      10
 4826              	.LVL245:
 709:sieve_extend.c ****         copy_word += 2;
 4827              		.loc 1 709 63 view .LVU1652
 4828 1c2b C4C2E9F7 		shlx	rsi, r10, rdx	# tmp676, *_714, shift_flipped
 4828      F2
 4829              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4830              		.loc 1 709 52 view .LVU1653
 4831 1c30 4809F7   		or	rdi, rsi	# tmp679, tmp676
 4832              	.LBE382:
 4833              	# sieve_extend.c:704:     while (copy_word < fast_loop_stop_word) {
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4834              		.loc 1 704 11 view .LVU1654
 4835 1c33 4939C3   		cmp	r11, rax	# fast_loop_stop_word, copy_word
 4836              	.LBB383:
 4837              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4838              		.loc 1 709 52 view .LVU1655
 4839 1c36 4A897CC3 		mov	QWORD PTR 8[rbx+r8*8], rdi	# *_720, tmp679
 4839      08
 710:sieve_extend.c ****         source_word += 2;
 4840              		.loc 1 710 9 is_stmt 1 view .LVU1656
 4841              	.LVL246:
 711:sieve_extend.c ****         distance += 2;
 4842              		.loc 1 711 9 view .LVU1657
 712:sieve_extend.c ****     }
 4843              		.loc 1 712 9 view .LVU1658
 4844              	# sieve_extend.c:712:         distance += 2;
 712:sieve_extend.c ****     }
 4845              		.loc 1 712 18 is_stmt 0 view .LVU1659
 4846 1c3b 4D8D5606 		lea	r10, 6[r14]	# distance,
 4847              	.LVL247:
 712:sieve_extend.c ****     }
 4848              		.loc 1 712 18 view .LVU1660
 4849              	.LBE383:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4850              		.loc 1 704 11 is_stmt 1 view .LVU1661
 4851 1c3f 763D     		jbe	.L358	#,
 4852              	.LBB384:
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4853              		.loc 1 705 9 view .LVU1662
 4854              	# sieve_extend.c:705:         bitword_t source0 = bitarray[source_word  ];
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 4855              		.loc 1 705 37 is_stmt 0 view .LVU1663
 4856 1c41 4C8D1CCD 		lea	r11, 0[0+rcx*8]	# _402,
 4856      00000000 
 4857              	.LVL248:
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
GAS LISTING /tmp/ccNeV1of.s 			page 142


 4858              		.loc 1 706 9 is_stmt 1 view .LVU1664
 4859              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 4860              		.loc 1 706 19 is_stmt 0 view .LVU1665
 4861 1c49 4E8B4C1B 		mov	r9, QWORD PTR 8[rbx+r11]	# source1, *_407
 4861      08
 4862              	.LVL249:
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4863              		.loc 1 707 9 is_stmt 1 view .LVU1666
 4864              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4865              		.loc 1 707 63 is_stmt 0 view .LVU1667
 4866 1c4e C442E9F7 		shlx	r8, r9, rdx	# tmp682, source1, shift_flipped
 4866      C1
 4867              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4868              		.loc 1 707 42 view .LVU1668
 4869 1c53 488B0CCB 		mov	rcx, QWORD PTR [rbx+rcx*8]	# *_403, *_403
 4870              	.LVL250:
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4871              		.loc 1 707 42 view .LVU1669
 4872 1c57 C46283F7 		shrx	r10, rcx, r15	# tmp680, *_403, shift
 4872      D1
 4873              	.LVL251:
 4874              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 4875              		.loc 1 707 52 view .LVU1670
 4876 1c5c 4D09C2   		or	r10, r8	# tmp683, tmp682
 4877 1c5f 4C8914C3 		mov	QWORD PTR [rbx+rax*8], r10	# *_412, tmp683
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 4878              		.loc 1 708 9 is_stmt 1 view .LVU1671
 4879              	.LVL252:
 709:sieve_extend.c ****         copy_word += 2;
 4880              		.loc 1 709 9 view .LVU1672
 4881              	# sieve_extend.c:712:         distance += 2;
 712:sieve_extend.c ****     }
 4882              		.loc 1 712 18 is_stmt 0 view .LVU1673
 4883 1c63 4D8D5608 		lea	r10, 8[r14]	# distance,
 4884              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4885              		.loc 1 709 63 view .LVU1674
 4886 1c67 4A8B741B 		mov	rsi, QWORD PTR 16[rbx+r11]	# *_417, *_417
 4886      10
 4887              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4888              		.loc 1 709 42 view .LVU1675
 4889 1c6c C44283F7 		shrx	r11, r9, r15	# tmp686, source1, shift
 4889      D9
 4890              	.LVL253:
 4891              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4892              		.loc 1 709 63 view .LVU1676
 4893 1c71 C4E2E9F7 		shlx	rdi, rsi, rdx	# tmp684, *_417, shift_flipped
 4893      FE
 4894              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 4895              		.loc 1 709 52 view .LVU1677
GAS LISTING /tmp/ccNeV1of.s 			page 143


 4896 1c76 4909FB   		or	r11, rdi	# tmp687, tmp684
 4897 1c79 4C895CC3 		mov	QWORD PTR 8[rbx+rax*8], r11	# *_423, tmp687
 4897      08
 710:sieve_extend.c ****         source_word += 2;
 4898              		.loc 1 710 9 is_stmt 1 view .LVU1678
 711:sieve_extend.c ****         distance += 2;
 4899              		.loc 1 711 9 view .LVU1679
 712:sieve_extend.c ****     }
 4900              		.loc 1 712 9 view .LVU1680
 4901              	.LVL254:
 712:sieve_extend.c ****     }
 4902              		.loc 1 712 9 is_stmt 0 view .LVU1681
 4903              	.LBE384:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4904              		.loc 1 704 11 is_stmt 1 view .LVU1682
 4905              	.L358:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 4906              		.loc 1 704 11 is_stmt 0 view .LVU1683
 4907 1c7e 4D01D4   		add	r12, r10	# tmp.302, distance
 4908 1c81 4D01D5   		add	r13, r10	# tmp.303, distance
 4909              	.LVL255:
 4910              	.L353:
 714:sieve_extend.c **** }
 4911              		.loc 1 714 5 is_stmt 1 view .LVU1684
 714:sieve_extend.c **** }
 4912              		.loc 1 714 5 is_stmt 0 view .LVU1685
 4913              	.LBE395:
 4914              	.LBE398:
 812:sieve_extend.c ****     copy_word += distance;
 4915              		.loc 1 812 5 is_stmt 1 view .LVU1686
 813:sieve_extend.c **** 
 4916              		.loc 1 813 5 view .LVU1687
 815:sieve_extend.c **** 
 4917              		.loc 1 815 6 view .LVU1688
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 4918              		.loc 1 818 11 view .LVU1689
 4919              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 4920              		.loc 1 818 5 is_stmt 0 view .LVU1690
 4921 1c84 4C8B5C24 		mov	r11, QWORD PTR 80[rsp]	# aligned_copy_word, %sfp
 4921      50
 4922 1c89 4D39EB   		cmp	r11, r13	# aligned_copy_word, tmp.303
 4923 1c8c 0F82BE0A 		jb	.L375	#,
 4923      0000
 4924 1c92 4E8D34E5 		lea	r14, 0[0+r12*8]	# _3,
 4924      00000000 
 4925 1c9a 498D4B01 		lea	rcx, 1[r11]	# tmp.290,
 4926 1c9e 4A8D3C33 		lea	rdi, [rbx+r14]	# vectp.297,
 4927 1ca2 4989C8   		mov	r8, rcx	# niters.296, tmp.290
 4928 1ca5 4889F8   		mov	rax, rdi	# tmp698, vectp.297
 4929 1ca8 4D29EB   		sub	r11, r13	# tmp700, tmp.303
 4930 1cab 48C1E803 		shr	rax, 3	# tmp698,
 4931 1caf 4D29E8   		sub	r8, r13	# niters.296, tmp.303
 4932 1cb2 48F7D8   		neg	rax	# tmp699
 4933 1cb5 41B90500 		mov	r9d, 5	# tmp702,
 4933      0000
 4934 1cbb 83E003   		and	eax, 3	# prolog_loop_niters.298,
GAS LISTING /tmp/ccNeV1of.s 			page 144


 4935 1cbe 488D7003 		lea	rsi, 3[rax]	# tmp701,
 4936 1cc2 4883FE05 		cmp	rsi, 5	# tmp701,
 4937 1cc6 490F42F1 		cmovb	rsi, r9	# tmp701,, tmp921, tmp702
 4938 1cca 4939F3   		cmp	r11, rsi	# tmp700, tmp921
 4939 1ccd 0F823F03 		jb	.L360	#,
 4939      0000
 4940 1cd3 4885C0   		test	rax, rax	# prolog_loop_niters.298
 4941 1cd6 0F844408 		je	.L376	#,
 4941      0000
 4942              	.LVL256:
 819:sieve_extend.c ****     }
 4943              		.loc 1 819 9 is_stmt 1 view .LVU1691
 4944              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 4945              		.loc 1 819 94 is_stmt 0 view .LVU1692
 4946 1cdc 4E8B5C33 		mov	r11, QWORD PTR 8[rbx+r14]	# *_607, *_607
 4946      08
 4947              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 4948              		.loc 1 819 77 view .LVU1693
 4949 1ce1 498D7424 		lea	rsi, 1[r12]	# tmp788,
 4949      01
 4950              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 4951              		.loc 1 819 56 view .LVU1694
 4952 1ce6 488B3F   		mov	rdi, QWORD PTR [rdi]	# MEM[(uint64_t *)vectp.297_27], MEM[(uint64_t *)vectp.297_27]
 4953              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 4954              		.loc 1 819 94 view .LVU1695
 4955 1ce9 C442E9F7 		shlx	r9, r11, rdx	# tmp703, *_607, shift_flipped
 4955      CB
 4956              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 4957              		.loc 1 819 56 view .LVU1696
 4958 1cee C46283F7 		shrx	r14, rdi, r15	# tmp705, MEM[(uint64_t *)vectp.297_27], shift
 4958      F7
 4959              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 4960              		.loc 1 819 66 view .LVU1697
 4961 1cf3 4D09F1   		or	r9, r14	# tmp707, tmp705
 4962 1cf6 4883F801 		cmp	rax, 1	# prolog_loop_niters.298,
 4963              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 4964              		.loc 1 819 77 view .LVU1698
 4965 1cfa 4989F2   		mov	r10, rsi	# source_word, tmp788
 4966              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 4967              		.loc 1 819 66 view .LVU1699
 4968 1cfd 4E890CEB 		mov	QWORD PTR [rbx+r13*8], r9	# *_611, tmp707
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 4969              		.loc 1 818 43 is_stmt 1 view .LVU1700
 4970              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 4971              		.loc 1 818 52 is_stmt 0 view .LVU1701
 4972 1d01 4D8D7501 		lea	r14, 1[r13]	# copy_word,
 4973              	.LVL257:
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
GAS LISTING /tmp/ccNeV1of.s 			page 145


 4974              		.loc 1 818 11 is_stmt 1 view .LVU1702
 4975 1d05 7456     		je	.L361	#,
 819:sieve_extend.c ****     }
 4976              		.loc 1 819 9 view .LVU1703
 4977              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 4978              		.loc 1 819 40 is_stmt 0 view .LVU1704
 4979 1d07 4C8D1CF5 		lea	r11, 0[0+rsi*8]	# _620,
 4979      00000000 
 4980              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 4981              		.loc 1 819 94 view .LVU1705
 4982 1d0f C422E9F7 		shlx	r9, QWORD PTR 8[rbx+r11], rdx	# tmp708, *_626, shift_flipped
 4982      4C1B08
 4983              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 4984              		.loc 1 819 56 view .LVU1706
 4985 1d16 4A8B3C1B 		mov	rdi, QWORD PTR [rbx+r11]	# *_621, *_621
 4986 1d1a C46283F7 		shrx	r11, rdi, r15	# tmp710, *_621, shift
 4986      DF
 4987              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 4988              		.loc 1 819 66 view .LVU1707
 4989 1d1f 4D09D9   		or	r9, r11	# tmp712, tmp710
 4990 1d22 4883F803 		cmp	rax, 3	# prolog_loop_niters.298,
 4991 1d26 4E890CF3 		mov	QWORD PTR [rbx+r14*8], r9	# *_630, tmp712
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 4992              		.loc 1 818 43 is_stmt 1 view .LVU1708
 4993              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 4994              		.loc 1 819 77 is_stmt 0 view .LVU1709
 4995 1d2a 4D8D5424 		lea	r10, 2[r12]	# source_word,
 4995      02
 4996              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 4997              		.loc 1 818 52 view .LVU1710
 4998 1d2f 4D8D7502 		lea	r14, 2[r13]	# copy_word,
 4999              	.LVL258:
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5000              		.loc 1 818 11 is_stmt 1 view .LVU1711
 5001 1d33 7528     		jne	.L361	#,
 819:sieve_extend.c ****     }
 5002              		.loc 1 819 9 view .LVU1712
 5003              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5004              		.loc 1 819 40 is_stmt 0 view .LVU1713
 5005 1d35 4E8D0CD5 		lea	r9, 0[0+r10*8]	# _205,
 5005      00000000 
 5006              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5007              		.loc 1 819 94 view .LVU1714
 5008 1d3d C4A2E9F7 		shlx	rdi, QWORD PTR 8[rbx+r9], rdx	# tmp713, *_211, shift_flipped
 5008      7C0B08
 5009              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5010              		.loc 1 819 56 view .LVU1715
 5011 1d44 4E8B1C0B 		mov	r11, QWORD PTR [rbx+r9]	# *_206, *_206
GAS LISTING /tmp/ccNeV1of.s 			page 146


 5012 1d48 C44283F7 		shrx	r9, r11, r15	# tmp715, *_206, shift
 5012      CB
 5013              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5014              		.loc 1 819 66 view .LVU1716
 5015 1d4d 4C09CF   		or	rdi, r9	# tmp717, tmp715
 5016              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5017              		.loc 1 819 77 view .LVU1717
 5018 1d50 4D8D5424 		lea	r10, 3[r12]	# source_word,
 5018      03
 5019              	.LVL259:
 5020              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5021              		.loc 1 819 66 view .LVU1718
 5022 1d55 4A893CF3 		mov	QWORD PTR [rbx+r14*8], rdi	# *_215, tmp717
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5023              		.loc 1 818 43 is_stmt 1 view .LVU1719
 5024              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5025              		.loc 1 818 52 is_stmt 0 view .LVU1720
 5026 1d59 4D8D7503 		lea	r14, 3[r13]	# copy_word,
 5027              	.LVL260:
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5028              		.loc 1 818 11 is_stmt 1 view .LVU1721
 5029              	.L361:
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5030              		.loc 1 818 11 is_stmt 0 view .LVU1722
 5031 1d5d 4929C0   		sub	r8, rax	# niters.299, prolog_loop_niters.298
 5032 1d60 4801C6   		add	rsi, rax	# tmp721, prolog_loop_niters.298
 5033 1d63 4E8D2420 		lea	r12, [rax+r12]	# tmp718,
 5034 1d67 4C01E8   		add	rax, r13	# tmp723, tmp.303
 5035 1d6a 4D89C5   		mov	r13, r8	# bnd.300, niters.299
 5036 1d6d 488D3CF3 		lea	rdi, [rbx+rsi*8]	# vectp.309,
 5037 1d71 49C1ED02 		shr	r13, 2	# bnd.300,
 5038 1d75 4C8D0CC3 		lea	r9, [rbx+rax*8]	# vectp.314,
 5039 1d79 49C1E505 		sal	r13, 5	# _733,
 5040              	# sieve_extend.c:812:     source_word += distance;
 812:sieve_extend.c ****     copy_word += distance;
 5041              		.loc 1 812 17 view .LVU1723
 5042 1d7d 31C0     		xor	eax, eax	# ivtmp.355
 5043 1d7f 498D75E0 		lea	rsi, -32[r13]	# tmp799,
 5044 1d83 4E8D1CE3 		lea	r11, [rbx+r12*8]	# vectp.305,
 5045 1d87 C5796E54 		vmovd	xmm10, DWORD PTR 72[rsp]	# _12, %sfp
 5045      2448
 5046 1d8d 48C1EE05 		shr	rsi, 5	# tmp797,
 5047 1d91 C5796E5C 		vmovd	xmm11, DWORD PTR 64[rsp]	# _18, %sfp
 5047      2440
 5048 1d97 4883C601 		add	rsi, 1	# tmp800,
 5049 1d9b 83E607   		and	esi, 7	# tmp801,
 5050 1d9e 0F841201 		je	.L363	#,
 5050      0000
 5051 1da4 4883FE01 		cmp	rsi, 1	# tmp801,
 5052 1da8 0F84DB00 		je	.L456	#,
 5052      0000
 5053 1dae 4883FE02 		cmp	rsi, 2	# tmp801,
 5054 1db2 0F84AE00 		je	.L457	#,
GAS LISTING /tmp/ccNeV1of.s 			page 147


 5054      0000
 5055 1db8 4883FE03 		cmp	rsi, 3	# tmp801,
 5056 1dbc 0F848000 		je	.L458	#,
 5056      0000
 5057 1dc2 4883FE04 		cmp	rsi, 4	# tmp801,
 5058 1dc6 7456     		je	.L459	#,
 5059 1dc8 4883FE05 		cmp	rsi, 5	# tmp801,
 5060 1dcc 742D     		je	.L460	#,
 5061 1dce 4883FE06 		cmp	rsi, 6	# tmp801,
 5062 1dd2 0F856807 		jne	.L528	#,
 5062      0000
 5063              	.L461:
 819:sieve_extend.c ****     }
 5064              		.loc 1 819 9 is_stmt 1 view .LVU1724
 5065              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5066              		.loc 1 819 56 is_stmt 0 view .LVU1725
 5067 1dd8 C4417D6F 		vmovdqa	ymm13, YMMWORD PTR [r11+rax]	# tmp1262, MEM[base: vectp.305_257, index: ivtmp.355_731, off
 5067      2C03
 5068              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5069              		.loc 1 819 94 view .LVU1726
 5070 1dde C57E6F3C 		vmovdqu	ymm15, YMMWORD PTR [rdi+rax]	# tmp1263, MEM[base: vectp.309_264, index: ivtmp.355_731, off
 5070      07
 5071              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5072              		.loc 1 819 56 view .LVU1727
 5073 1de3 C44115D3 		vpsrlq	ymm14, ymm13, xmm10	# vect__38.307, tmp1262, _12
 5073      F2
 5074              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5075              		.loc 1 819 94 view .LVU1728
 5076 1de8 C4C105F3 		vpsllq	ymm1, ymm15, xmm11	# vect__43.311, tmp1263, _18
 5076      CB
 5077              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5078              		.loc 1 819 66 view .LVU1729
 5079 1ded C50DEBC1 		vpor	ymm8, ymm14, ymm1	# vect__46.312, vect__38.307, vect__43.311
 5080              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5081              		.loc 1 819 29 view .LVU1730
 5082 1df1 C4417E7F 		vmovdqu	YMMWORD PTR [r9+rax], ymm8	# MEM[base: vectp.314_273, index: ivtmp.355_731, offset: 0B], v
 5082      0401
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5083              		.loc 1 818 43 is_stmt 1 view .LVU1731
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5084              		.loc 1 818 11 view .LVU1732
 5085 1df7 4883C020 		add	rax, 32	# ivtmp.355,
 5086              	.L460:
 819:sieve_extend.c ****     }
 5087              		.loc 1 819 9 view .LVU1733
 5088              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5089              		.loc 1 819 56 is_stmt 0 view .LVU1734
 5090 1dfb C4C17D6F 		vmovdqa	ymm0, YMMWORD PTR [r11+rax]	# tmp1264, MEM[base: vectp.305_257, index: ivtmp.355_731, offs
 5090      0403
 5091              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
GAS LISTING /tmp/ccNeV1of.s 			page 148


 819:sieve_extend.c ****     }
 5092              		.loc 1 819 94 view .LVU1735
 5093 1e01 C57E6F0C 		vmovdqu	ymm9, YMMWORD PTR [rdi+rax]	# tmp1265, MEM[base: vectp.309_264, index: ivtmp.355_731, offs
 5093      07
 5094              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5095              		.loc 1 819 56 view .LVU1736
 5096 1e06 C4C17DD3 		vpsrlq	ymm5, ymm0, xmm10	# vect__38.307, tmp1264, _12
 5096      EA
 5097              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5098              		.loc 1 819 94 view .LVU1737
 5099 1e0b C4C135F3 		vpsllq	ymm7, ymm9, xmm11	# vect__43.311, tmp1265, _18
 5099      FB
 5100              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5101              		.loc 1 819 66 view .LVU1738
 5102 1e10 C5D5EBDF 		vpor	ymm3, ymm5, ymm7	# vect__46.312, vect__38.307, vect__43.311
 5103              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5104              		.loc 1 819 29 view .LVU1739
 5105 1e14 C4C17E7F 		vmovdqu	YMMWORD PTR [r9+rax], ymm3	# MEM[base: vectp.314_273, index: ivtmp.355_731, offset: 0B], v
 5105      1C01
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5106              		.loc 1 818 43 is_stmt 1 view .LVU1740
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5107              		.loc 1 818 11 view .LVU1741
 5108 1e1a 4883C020 		add	rax, 32	# ivtmp.355,
 5109              	.L459:
 819:sieve_extend.c ****     }
 5110              		.loc 1 819 9 view .LVU1742
 5111              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5112              		.loc 1 819 56 is_stmt 0 view .LVU1743
 5113 1e1e C4C17D6F 		vmovdqa	ymm2, YMMWORD PTR [r11+rax]	# tmp1266, MEM[base: vectp.305_257, index: ivtmp.355_731, offs
 5113      1403
 5114              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5115              		.loc 1 819 94 view .LVU1744
 5116 1e24 C5FE6F24 		vmovdqu	ymm4, YMMWORD PTR [rdi+rax]	# tmp1267, MEM[base: vectp.309_264, index: ivtmp.355_731, offs
 5116      07
 5117              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5118              		.loc 1 819 56 view .LVU1745
 5119 1e29 C4C16DD3 		vpsrlq	ymm6, ymm2, xmm10	# vect__38.307, tmp1266, _12
 5119      F2
 5120              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5121              		.loc 1 819 94 view .LVU1746
 5122 1e2e C4415DF3 		vpsllq	ymm12, ymm4, xmm11	# vect__43.311, tmp1267, _18
 5122      E3
 5123              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5124              		.loc 1 819 66 view .LVU1747
 5125 1e33 C4414DEB 		vpor	ymm13, ymm6, ymm12	# vect__46.312, vect__38.307, vect__43.311
 5125      EC
 5126              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
GAS LISTING /tmp/ccNeV1of.s 			page 149


 819:sieve_extend.c ****     }
 5127              		.loc 1 819 29 view .LVU1748
 5128 1e38 C4417E7F 		vmovdqu	YMMWORD PTR [r9+rax], ymm13	# MEM[base: vectp.314_273, index: ivtmp.355_731, offset: 0B], 
 5128      2C01
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5129              		.loc 1 818 43 is_stmt 1 view .LVU1749
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5130              		.loc 1 818 11 view .LVU1750
 5131 1e3e 4883C020 		add	rax, 32	# ivtmp.355,
 5132              	.L458:
 819:sieve_extend.c ****     }
 5133              		.loc 1 819 9 view .LVU1751
 5134              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5135              		.loc 1 819 56 is_stmt 0 view .LVU1752
 5136 1e42 C4417D6F 		vmovdqa	ymm14, YMMWORD PTR [r11+rax]	# tmp1268, MEM[base: vectp.305_257, index: ivtmp.355_731, off
 5136      3403
 5137              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5138              		.loc 1 819 94 view .LVU1753
 5139 1e48 C5FE6F0C 		vmovdqu	ymm1, YMMWORD PTR [rdi+rax]	# tmp1269, MEM[base: vectp.309_264, index: ivtmp.355_731, offs
 5139      07
 5140              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5141              		.loc 1 819 56 view .LVU1754
 5142 1e4d C4410DD3 		vpsrlq	ymm15, ymm14, xmm10	# vect__38.307, tmp1268, _12
 5142      FA
 5143              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5144              		.loc 1 819 94 view .LVU1755
 5145 1e52 C44175F3 		vpsllq	ymm8, ymm1, xmm11	# vect__43.311, tmp1269, _18
 5145      C3
 5146              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5147              		.loc 1 819 66 view .LVU1756
 5148 1e57 C4C105EB 		vpor	ymm0, ymm15, ymm8	# vect__46.312, vect__38.307, vect__43.311
 5148      C0
 5149              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5150              		.loc 1 819 29 view .LVU1757
 5151 1e5c C4C17E7F 		vmovdqu	YMMWORD PTR [r9+rax], ymm0	# MEM[base: vectp.314_273, index: ivtmp.355_731, offset: 0B], v
 5151      0401
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5152              		.loc 1 818 43 is_stmt 1 view .LVU1758
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5153              		.loc 1 818 11 view .LVU1759
 5154 1e62 4883C020 		add	rax, 32	# ivtmp.355,
 5155              	.L457:
 819:sieve_extend.c ****     }
 5156              		.loc 1 819 9 view .LVU1760
 5157              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5158              		.loc 1 819 56 is_stmt 0 view .LVU1761
 5159 1e66 C4C17D6F 		vmovdqa	ymm5, YMMWORD PTR [r11+rax]	# tmp1270, MEM[base: vectp.305_257, index: ivtmp.355_731, offs
 5159      2C03
 5160              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 150


 5161              		.loc 1 819 94 view .LVU1762
 5162 1e6c C5FE6F3C 		vmovdqu	ymm7, YMMWORD PTR [rdi+rax]	# tmp1271, MEM[base: vectp.309_264, index: ivtmp.355_731, offs
 5162      07
 5163              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5164              		.loc 1 819 56 view .LVU1763
 5165 1e71 C44155D3 		vpsrlq	ymm9, ymm5, xmm10	# vect__38.307, tmp1270, _12
 5165      CA
 5166              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5167              		.loc 1 819 94 view .LVU1764
 5168 1e76 C4C145F3 		vpsllq	ymm3, ymm7, xmm11	# vect__43.311, tmp1271, _18
 5168      DB
 5169              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5170              		.loc 1 819 66 view .LVU1765
 5171 1e7b C5B5EBD3 		vpor	ymm2, ymm9, ymm3	# vect__46.312, vect__38.307, vect__43.311
 5172              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5173              		.loc 1 819 29 view .LVU1766
 5174 1e7f C4C17E7F 		vmovdqu	YMMWORD PTR [r9+rax], ymm2	# MEM[base: vectp.314_273, index: ivtmp.355_731, offset: 0B], v
 5174      1401
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5175              		.loc 1 818 43 is_stmt 1 view .LVU1767
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5176              		.loc 1 818 11 view .LVU1768
 5177 1e85 4883C020 		add	rax, 32	# ivtmp.355,
 5178              	.L456:
 819:sieve_extend.c ****     }
 5179              		.loc 1 819 9 view .LVU1769
 5180              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5181              		.loc 1 819 56 is_stmt 0 view .LVU1770
 5182 1e89 C4C17D6F 		vmovdqa	ymm6, YMMWORD PTR [r11+rax]	# tmp1272, MEM[base: vectp.305_257, index: ivtmp.355_731, offs
 5182      3403
 5183              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5184              		.loc 1 819 94 view .LVU1771
 5185 1e8f C5FE6F24 		vmovdqu	ymm4, YMMWORD PTR [rdi+rax]	# tmp1273, MEM[base: vectp.309_264, index: ivtmp.355_731, offs
 5185      07
 5186              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5187              		.loc 1 819 56 view .LVU1772
 5188 1e94 C4414DD3 		vpsrlq	ymm12, ymm6, xmm10	# vect__38.307, tmp1272, _12
 5188      E2
 5189              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5190              		.loc 1 819 94 view .LVU1773
 5191 1e99 C4415DF3 		vpsllq	ymm13, ymm4, xmm11	# vect__43.311, tmp1273, _18
 5191      EB
 5192              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5193              		.loc 1 819 66 view .LVU1774
 5194 1e9e C4411DEB 		vpor	ymm14, ymm12, ymm13	# vect__46.312, vect__38.307, vect__43.311
 5194      F5
 5195              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 151


 5196              		.loc 1 819 29 view .LVU1775
 5197 1ea3 C4417E7F 		vmovdqu	YMMWORD PTR [r9+rax], ymm14	# MEM[base: vectp.314_273, index: ivtmp.355_731, offset: 0B], 
 5197      3401
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5198              		.loc 1 818 43 is_stmt 1 view .LVU1776
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5199              		.loc 1 818 11 view .LVU1777
 5200 1ea9 4883C020 		add	rax, 32	# ivtmp.355,
 5201 1ead 4C39E8   		cmp	rax, r13	# ivtmp.355, _733
 5202 1eb0 0F844401 		je	.L504	#,
 5202      0000
 5203              	.L363:
 819:sieve_extend.c ****     }
 5204              		.loc 1 819 9 discriminator 2 view .LVU1778
 5205              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5206              		.loc 1 819 56 is_stmt 0 discriminator 2 view .LVU1779
 5207 1eb6 C4417D6F 		vmovdqa	ymm15, YMMWORD PTR [r11+rax]	# tmp1206, MEM[base: vectp.305_257, index: ivtmp.355_731, off
 5207      3C03
 5208              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5209              		.loc 1 819 94 discriminator 2 view .LVU1780
 5210 1ebc C57E6F04 		vmovdqu	ymm8, YMMWORD PTR [rdi+rax]	# tmp1207, MEM[base: vectp.309_264, index: ivtmp.355_731, offs
 5210      07
 5211              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5212              		.loc 1 819 56 discriminator 2 view .LVU1781
 5213 1ec1 C4C105D3 		vpsrlq	ymm1, ymm15, xmm10	# vect__38.307, tmp1206, _12
 5213      CA
 5214              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5215              		.loc 1 819 94 discriminator 2 view .LVU1782
 5216 1ec6 C4C13DF3 		vpsllq	ymm0, ymm8, xmm11	# vect__43.311, tmp1207, _18
 5216      C3
 5217              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5218              		.loc 1 819 66 discriminator 2 view .LVU1783
 5219 1ecb C5F5EBE8 		vpor	ymm5, ymm1, ymm0	# vect__46.312, vect__38.307, vect__43.311
 5220              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5221              		.loc 1 819 29 discriminator 2 view .LVU1784
 5222 1ecf C4C17E7F 		vmovdqu	YMMWORD PTR [r9+rax], ymm5	# MEM[base: vectp.314_273, index: ivtmp.355_731, offset: 0B], v
 5222      2C01
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5223              		.loc 1 818 43 is_stmt 1 discriminator 2 view .LVU1785
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5224              		.loc 1 818 11 discriminator 2 view .LVU1786
 819:sieve_extend.c ****     }
 5225              		.loc 1 819 9 discriminator 2 view .LVU1787
 5226              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5227              		.loc 1 819 56 is_stmt 0 discriminator 2 view .LVU1788
 5228 1ed5 C4417D6F 		vmovdqa	ymm9, YMMWORD PTR 32[r11+rax]	# tmp1208, MEM[base: vectp.305_257, index: ivtmp.355_731, of
 5228      4C0320
 5229              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5230              		.loc 1 819 94 discriminator 2 view .LVU1789
GAS LISTING /tmp/ccNeV1of.s 			page 152


 5231 1edc C5FE6F5C 		vmovdqu	ymm3, YMMWORD PTR 32[rdi+rax]	# tmp1209, MEM[base: vectp.309_264, index: ivtmp.355_731, of
 5231      0720
 5232              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5233              		.loc 1 819 56 discriminator 2 view .LVU1790
 5234 1ee2 C4C135D3 		vpsrlq	ymm7, ymm9, xmm10	# vect__38.307, tmp1208, _12
 5234      FA
 5235              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5236              		.loc 1 819 94 discriminator 2 view .LVU1791
 5237 1ee7 C4C165F3 		vpsllq	ymm2, ymm3, xmm11	# vect__43.311, tmp1209, _18
 5237      D3
 5238              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5239              		.loc 1 819 66 discriminator 2 view .LVU1792
 5240 1eec C5C5EBF2 		vpor	ymm6, ymm7, ymm2	# vect__46.312, vect__38.307, vect__43.311
 5241              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5242              		.loc 1 819 29 discriminator 2 view .LVU1793
 5243 1ef0 C4C17E7F 		vmovdqu	YMMWORD PTR 32[r9+rax], ymm6	# MEM[base: vectp.314_273, index: ivtmp.355_731, offset: 0B],
 5243      740120
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5244              		.loc 1 818 43 is_stmt 1 discriminator 2 view .LVU1794
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5245              		.loc 1 818 11 discriminator 2 view .LVU1795
 819:sieve_extend.c ****     }
 5246              		.loc 1 819 9 discriminator 2 view .LVU1796
 5247              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5248              		.loc 1 819 56 is_stmt 0 discriminator 2 view .LVU1797
 5249 1ef7 C4417D6F 		vmovdqa	ymm12, YMMWORD PTR 64[r11+rax]	# tmp1210, MEM[base: vectp.305_257, index: ivtmp.355_731, o
 5249      640340
 5250              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5251              		.loc 1 819 94 discriminator 2 view .LVU1798
 5252 1efe C5FE6F64 		vmovdqu	ymm4, YMMWORD PTR 64[rdi+rax]	# tmp1211, MEM[base: vectp.309_264, index: ivtmp.355_731, of
 5252      0740
 5253              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5254              		.loc 1 819 56 discriminator 2 view .LVU1799
 5255 1f04 C4411DD3 		vpsrlq	ymm13, ymm12, xmm10	# vect__38.307, tmp1210, _12
 5255      EA
 5256              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5257              		.loc 1 819 94 discriminator 2 view .LVU1800
 5258 1f09 C4415DF3 		vpsllq	ymm14, ymm4, xmm11	# vect__43.311, tmp1211, _18
 5258      F3
 5259              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5260              		.loc 1 819 66 discriminator 2 view .LVU1801
 5261 1f0e C44115EB 		vpor	ymm15, ymm13, ymm14	# vect__46.312, vect__38.307, vect__43.311
 5261      FE
 5262              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5263              		.loc 1 819 29 discriminator 2 view .LVU1802
 5264 1f13 C4417E7F 		vmovdqu	YMMWORD PTR 64[r9+rax], ymm15	# MEM[base: vectp.314_273, index: ivtmp.355_731, offset: 0B]
 5264      7C0140
GAS LISTING /tmp/ccNeV1of.s 			page 153


 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5265              		.loc 1 818 43 is_stmt 1 discriminator 2 view .LVU1803
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5266              		.loc 1 818 11 discriminator 2 view .LVU1804
 819:sieve_extend.c ****     }
 5267              		.loc 1 819 9 discriminator 2 view .LVU1805
 5268              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5269              		.loc 1 819 56 is_stmt 0 discriminator 2 view .LVU1806
 5270 1f1a C4C17D6F 		vmovdqa	ymm1, YMMWORD PTR 96[r11+rax]	# tmp1212, MEM[base: vectp.305_257, index: ivtmp.355_731, of
 5270      4C0360
 5271              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5272              		.loc 1 819 94 discriminator 2 view .LVU1807
 5273 1f21 C5FE6F44 		vmovdqu	ymm0, YMMWORD PTR 96[rdi+rax]	# tmp1213, MEM[base: vectp.309_264, index: ivtmp.355_731, of
 5273      0760
 5274              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5275              		.loc 1 819 56 discriminator 2 view .LVU1808
 5276 1f27 C44175D3 		vpsrlq	ymm8, ymm1, xmm10	# vect__38.307, tmp1212, _12
 5276      C2
 5277              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5278              		.loc 1 819 94 discriminator 2 view .LVU1809
 5279 1f2c C4C17DF3 		vpsllq	ymm5, ymm0, xmm11	# vect__43.311, tmp1213, _18
 5279      EB
 5280              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5281              		.loc 1 819 66 discriminator 2 view .LVU1810
 5282 1f31 C53DEBCD 		vpor	ymm9, ymm8, ymm5	# vect__46.312, vect__38.307, vect__43.311
 5283              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5284              		.loc 1 819 29 discriminator 2 view .LVU1811
 5285 1f35 C4417E7F 		vmovdqu	YMMWORD PTR 96[r9+rax], ymm9	# MEM[base: vectp.314_273, index: ivtmp.355_731, offset: 0B],
 5285      4C0160
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5286              		.loc 1 818 43 is_stmt 1 discriminator 2 view .LVU1812
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5287              		.loc 1 818 11 discriminator 2 view .LVU1813
 819:sieve_extend.c ****     }
 5288              		.loc 1 819 9 discriminator 2 view .LVU1814
 5289              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5290              		.loc 1 819 56 is_stmt 0 discriminator 2 view .LVU1815
 5291 1f3c C4C17D6F 		vmovdqa	ymm7, YMMWORD PTR 128[r11+rax]	# tmp1214, MEM[base: vectp.305_257, index: ivtmp.355_731, o
 5291      BC038000 
 5291      0000
 5292              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5293              		.loc 1 819 94 discriminator 2 view .LVU1816
 5294 1f46 C5FE6F9C 		vmovdqu	ymm3, YMMWORD PTR 128[rdi+rax]	# tmp1215, MEM[base: vectp.309_264, index: ivtmp.355_731, o
 5294      07800000 
 5294      00
 5295              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5296              		.loc 1 819 56 discriminator 2 view .LVU1817
 5297 1f4f C4C145D3 		vpsrlq	ymm2, ymm7, xmm10	# vect__38.307, tmp1214, _12
GAS LISTING /tmp/ccNeV1of.s 			page 154


 5297      D2
 5298              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5299              		.loc 1 819 94 discriminator 2 view .LVU1818
 5300 1f54 C4C165F3 		vpsllq	ymm6, ymm3, xmm11	# vect__43.311, tmp1215, _18
 5300      F3
 5301              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5302              		.loc 1 819 66 discriminator 2 view .LVU1819
 5303 1f59 C56DEBE6 		vpor	ymm12, ymm2, ymm6	# vect__46.312, vect__38.307, vect__43.311
 5304              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5305              		.loc 1 819 29 discriminator 2 view .LVU1820
 5306 1f5d C4417E7F 		vmovdqu	YMMWORD PTR 128[r9+rax], ymm12	# MEM[base: vectp.314_273, index: ivtmp.355_731, offset: 0B
 5306      A4018000 
 5306      0000
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5307              		.loc 1 818 43 is_stmt 1 discriminator 2 view .LVU1821
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5308              		.loc 1 818 11 discriminator 2 view .LVU1822
 819:sieve_extend.c ****     }
 5309              		.loc 1 819 9 discriminator 2 view .LVU1823
 5310              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5311              		.loc 1 819 56 is_stmt 0 discriminator 2 view .LVU1824
 5312 1f67 C4417D6F 		vmovdqa	ymm13, YMMWORD PTR 160[r11+rax]	# tmp1216, MEM[base: vectp.305_257, index: ivtmp.355_731, 
 5312      AC03A000 
 5312      0000
 5313              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5314              		.loc 1 819 94 discriminator 2 view .LVU1825
 5315 1f71 C5FE6FA4 		vmovdqu	ymm4, YMMWORD PTR 160[rdi+rax]	# tmp1217, MEM[base: vectp.309_264, index: ivtmp.355_731, o
 5315      07A00000 
 5315      00
 5316              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5317              		.loc 1 819 56 discriminator 2 view .LVU1826
 5318 1f7a C44115D3 		vpsrlq	ymm14, ymm13, xmm10	# vect__38.307, tmp1216, _12
 5318      F2
 5319              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5320              		.loc 1 819 94 discriminator 2 view .LVU1827
 5321 1f7f C4415DF3 		vpsllq	ymm15, ymm4, xmm11	# vect__43.311, tmp1217, _18
 5321      FB
 5322              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5323              		.loc 1 819 66 discriminator 2 view .LVU1828
 5324 1f84 C4C10DEB 		vpor	ymm1, ymm14, ymm15	# vect__46.312, vect__38.307, vect__43.311
 5324      CF
 5325              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5326              		.loc 1 819 29 discriminator 2 view .LVU1829
 5327 1f89 C4C17E7F 		vmovdqu	YMMWORD PTR 160[r9+rax], ymm1	# MEM[base: vectp.314_273, index: ivtmp.355_731, offset: 0B]
 5327      8C01A000 
 5327      0000
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5328              		.loc 1 818 43 is_stmt 1 discriminator 2 view .LVU1830
GAS LISTING /tmp/ccNeV1of.s 			page 155


 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5329              		.loc 1 818 11 discriminator 2 view .LVU1831
 819:sieve_extend.c ****     }
 5330              		.loc 1 819 9 discriminator 2 view .LVU1832
 5331              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5332              		.loc 1 819 56 is_stmt 0 discriminator 2 view .LVU1833
 5333 1f93 C4417D6F 		vmovdqa	ymm8, YMMWORD PTR 192[r11+rax]	# tmp1218, MEM[base: vectp.305_257, index: ivtmp.355_731, o
 5333      8403C000 
 5333      0000
 5334              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5335              		.loc 1 819 94 discriminator 2 view .LVU1834
 5336 1f9d C5FE6FAC 		vmovdqu	ymm5, YMMWORD PTR 192[rdi+rax]	# tmp1219, MEM[base: vectp.309_264, index: ivtmp.355_731, o
 5336      07C00000 
 5336      00
 5337              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5338              		.loc 1 819 56 discriminator 2 view .LVU1835
 5339 1fa6 C4C13DD3 		vpsrlq	ymm0, ymm8, xmm10	# vect__38.307, tmp1218, _12
 5339      C2
 5340              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5341              		.loc 1 819 94 discriminator 2 view .LVU1836
 5342 1fab C44155F3 		vpsllq	ymm9, ymm5, xmm11	# vect__43.311, tmp1219, _18
 5342      CB
 5343              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5344              		.loc 1 819 66 discriminator 2 view .LVU1837
 5345 1fb0 C4C17DEB 		vpor	ymm7, ymm0, ymm9	# vect__46.312, vect__38.307, vect__43.311
 5345      F9
 5346              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5347              		.loc 1 819 29 discriminator 2 view .LVU1838
 5348 1fb5 C4C17E7F 		vmovdqu	YMMWORD PTR 192[r9+rax], ymm7	# MEM[base: vectp.314_273, index: ivtmp.355_731, offset: 0B]
 5348      BC01C000 
 5348      0000
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5349              		.loc 1 818 43 is_stmt 1 discriminator 2 view .LVU1839
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5350              		.loc 1 818 11 discriminator 2 view .LVU1840
 819:sieve_extend.c ****     }
 5351              		.loc 1 819 9 discriminator 2 view .LVU1841
 5352              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5353              		.loc 1 819 56 is_stmt 0 discriminator 2 view .LVU1842
 5354 1fbf C4C17D6F 		vmovdqa	ymm2, YMMWORD PTR 224[r11+rax]	# tmp1220, MEM[base: vectp.305_257, index: ivtmp.355_731, o
 5354      9403E000 
 5354      0000
 5355              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5356              		.loc 1 819 94 discriminator 2 view .LVU1843
 5357 1fc9 C5FE6F9C 		vmovdqu	ymm3, YMMWORD PTR 224[rdi+rax]	# tmp1221, MEM[base: vectp.309_264, index: ivtmp.355_731, o
 5357      07E00000 
 5357      00
 5358              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 156


 5359              		.loc 1 819 56 discriminator 2 view .LVU1844
 5360 1fd2 C4C16DD3 		vpsrlq	ymm6, ymm2, xmm10	# vect__38.307, tmp1220, _12
 5360      F2
 5361              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5362              		.loc 1 819 94 discriminator 2 view .LVU1845
 5363 1fd7 C44165F3 		vpsllq	ymm12, ymm3, xmm11	# vect__43.311, tmp1221, _18
 5363      E3
 5364              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5365              		.loc 1 819 66 discriminator 2 view .LVU1846
 5366 1fdc C4414DEB 		vpor	ymm13, ymm6, ymm12	# vect__46.312, vect__38.307, vect__43.311
 5366      EC
 5367              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5368              		.loc 1 819 29 discriminator 2 view .LVU1847
 5369 1fe1 C4417E7F 		vmovdqu	YMMWORD PTR 224[r9+rax], ymm13	# MEM[base: vectp.314_273, index: ivtmp.355_731, offset: 0B
 5369      AC01E000 
 5369      0000
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5370              		.loc 1 818 43 is_stmt 1 discriminator 2 view .LVU1848
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5371              		.loc 1 818 11 discriminator 2 view .LVU1849
 5372 1feb 48050001 		add	rax, 256	# ivtmp.355,
 5372      0000
 5373 1ff1 4C39E8   		cmp	rax, r13	# ivtmp.355, _733
 5374 1ff4 0F85BCFE 		jne	.L363	#,
 5374      FFFF
 5375              	.L504:
 5376 1ffa 4D89C3   		mov	r11, r8	# niters_vector_mult_vf.301, niters.299
 5377 1ffd 4983E3FC 		and	r11, -4	# niters_vector_mult_vf.301,
 5378 2001 4D39D8   		cmp	r8, r11	# niters.299, niters_vector_mult_vf.301
 5379 2004 4F8D241A 		lea	r12, [r10+r11]	# tmp.302,
 5380 2008 4F8D2C1E 		lea	r13, [r14+r11]	# tmp.303,
 5381 200c 0F84DA00 		je	.L359	#,
 5381      0000
 5382              	.L360:
 5383              	.LVL261:
 819:sieve_extend.c ****     }
 5384              		.loc 1 819 9 view .LVU1850
 5385              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5386              		.loc 1 818 5 is_stmt 0 view .LVU1851
 5387 2012 4C8B5C24 		mov	r11, QWORD PTR 80[rsp]	# aligned_copy_word, %sfp
 5387      50
 5388              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5389              		.loc 1 818 52 view .LVU1852
 5390 2017 4D8D4D01 		lea	r9, 1[r13]	# copy_word,
 5391              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5392              		.loc 1 819 94 view .LVU1853
 5393 201b C422E9F7 		shlx	r8, QWORD PTR 8[rbx+r12*8], rdx	# tmp733, *_521, shift_flipped
 5393      44E308
 5394              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5395              		.loc 1 819 56 view .LVU1854
GAS LISTING /tmp/ccNeV1of.s 			page 157


 5396 2022 C42283F7 		shrx	r14, QWORD PTR [rbx+r12*8], r15	# tmp735, *_516, shift
 5396      34E3
 5397              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5398              		.loc 1 819 66 view .LVU1855
 5399 2028 4D09F0   		or	r8, r14	# tmp737, tmp735
 5400              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5401              		.loc 1 819 77 view .LVU1856
 5402 202b 4D8D5424 		lea	r10, 1[r12]	# _519,
 5402      01
 5403              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5404              		.loc 1 819 66 view .LVU1857
 5405 2030 4E8904EB 		mov	QWORD PTR [rbx+r13*8], r8	# *_525, tmp737
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5406              		.loc 1 818 43 is_stmt 1 view .LVU1858
 5407              	.LVL262:
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5408              		.loc 1 818 11 view .LVU1859
 5409              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5410              		.loc 1 818 5 is_stmt 0 view .LVU1860
 5411 2034 4D39CB   		cmp	r11, r9	# aligned_copy_word, copy_word
 5412 2037 0F82AF00 		jb	.L359	#,
 5412      0000
 819:sieve_extend.c ****     }
 5413              		.loc 1 819 9 is_stmt 1 view .LVU1861
 5414              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5415              		.loc 1 819 56 is_stmt 0 view .LVU1862
 5416 203d 4A8B3CD3 		mov	rdi, QWORD PTR [rbx+r10*8]	# *_533, *_533
 5417              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5418              		.loc 1 819 94 view .LVU1863
 5419 2041 C4A2E9F7 		shlx	rsi, QWORD PTR 8[rbx+r10*8], rdx	# tmp738, *_538, shift_flipped
 5419      74D308
 5420              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5421              		.loc 1 818 52 view .LVU1864
 5422 2048 4D8D5502 		lea	r10, 2[r13]	# copy_word,
 5423              	.LVL263:
 5424              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5425              		.loc 1 819 56 view .LVU1865
 5426 204c C4E283F7 		shrx	rax, rdi, r15	# tmp740, *_533, shift
 5426      C7
 5427              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5428              		.loc 1 819 66 view .LVU1866
 5429 2051 4809C6   		or	rsi, rax	# tmp742, tmp740
 5430              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5431              		.loc 1 818 5 view .LVU1867
 5432 2054 4D39D3   		cmp	r11, r10	# aligned_copy_word, copy_word
 5433              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 158


 5434              		.loc 1 819 66 view .LVU1868
 5435 2057 4A8934CB 		mov	QWORD PTR [rbx+r9*8], rsi	# *_542, tmp742
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5436              		.loc 1 818 43 is_stmt 1 view .LVU1869
 5437              	.LVL264:
 5438              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5439              		.loc 1 819 77 is_stmt 0 view .LVU1870
 5440 205b 4D8D4424 		lea	r8, 2[r12]	# _536,
 5440      02
 5441              	.LVL265:
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5442              		.loc 1 818 11 is_stmt 1 view .LVU1871
 5443              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5444              		.loc 1 818 5 is_stmt 0 view .LVU1872
 5445 2060 0F828600 		jb	.L359	#,
 5445      0000
 819:sieve_extend.c ****     }
 5446              		.loc 1 819 9 is_stmt 1 view .LVU1873
 5447              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5448              		.loc 1 819 94 is_stmt 0 view .LVU1874
 5449 2066 C422E9F7 		shlx	r9, QWORD PTR 8[rbx+r8*8], rdx	# tmp743, *_555, shift_flipped
 5449      4CC308
 5450              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5451              		.loc 1 819 56 view .LVU1875
 5452 206d 4E8B04C3 		mov	r8, QWORD PTR [rbx+r8*8]	# *_550, *_550
 5453              	.LVL266:
 819:sieve_extend.c ****     }
 5454              		.loc 1 819 56 view .LVU1876
 5455 2071 C4C283F7 		shrx	rsi, r8, r15	# tmp745, *_550, shift
 5455      F0
 5456              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5457              		.loc 1 819 66 view .LVU1877
 5458 2076 4909F1   		or	r9, rsi	# tmp747, tmp745
 5459 2079 4E890CD3 		mov	QWORD PTR [rbx+r10*8], r9	# *_559, tmp747
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5460              		.loc 1 818 43 is_stmt 1 view .LVU1878
 5461              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5462              		.loc 1 818 52 is_stmt 0 view .LVU1879
 5463 207d 4D8D5503 		lea	r10, 3[r13]	# copy_word,
 5464              	.LVL267:
 5465              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5466              		.loc 1 818 5 view .LVU1880
 5467 2081 4D39D3   		cmp	r11, r10	# aligned_copy_word, copy_word
 5468              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5469              		.loc 1 819 77 view .LVU1881
 5470 2084 4D8D7424 		lea	r14, 3[r12]	# _553,
 5470      03
 5471              	.LVL268:
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
GAS LISTING /tmp/ccNeV1of.s 			page 159


 5472              		.loc 1 818 11 is_stmt 1 view .LVU1882
 5473              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5474              		.loc 1 818 5 is_stmt 0 view .LVU1883
 5475 2089 7261     		jb	.L359	#,
 819:sieve_extend.c ****     }
 5476              		.loc 1 819 9 is_stmt 1 view .LVU1884
 5477              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5478              		.loc 1 819 94 is_stmt 0 view .LVU1885
 5479 208b C4A2E9F7 		shlx	rax, QWORD PTR 8[rbx+r14*8], rdx	# tmp748, *_572, shift_flipped
 5479      44F308
 5480              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5481              		.loc 1 819 56 view .LVU1886
 5482 2092 4A8B3CF3 		mov	rdi, QWORD PTR [rbx+r14*8]	# *_567, *_567
 5483 2096 C46283F7 		shrx	r14, rdi, r15	# tmp750, *_567, shift
 5483      F7
 5484              	.LVL269:
 5485              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5486              		.loc 1 819 66 view .LVU1887
 5487 209b 4C09F0   		or	rax, r14	# tmp752, tmp750
 5488 209e 4A8904D3 		mov	QWORD PTR [rbx+r10*8], rax	# *_576, tmp752
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5489              		.loc 1 818 43 is_stmt 1 view .LVU1888
 5490              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5491              		.loc 1 818 52 is_stmt 0 view .LVU1889
 5492 20a2 4D8D5504 		lea	r10, 4[r13]	# copy_word,
 5493              	.LVL270:
 5494              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5495              		.loc 1 818 5 view .LVU1890
 5496 20a6 4D39D3   		cmp	r11, r10	# aligned_copy_word, copy_word
 5497              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5498              		.loc 1 819 77 view .LVU1891
 5499 20a9 4D8D4C24 		lea	r9, 4[r12]	# _570,
 5499      04
 5500              	.LVL271:
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5501              		.loc 1 818 11 is_stmt 1 view .LVU1892
 5502              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5503              		.loc 1 818 5 is_stmt 0 view .LVU1893
 5504 20ae 723C     		jb	.L359	#,
 819:sieve_extend.c ****     }
 5505              		.loc 1 819 9 is_stmt 1 view .LVU1894
 5506              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5507              		.loc 1 818 52 is_stmt 0 view .LVU1895
 5508 20b0 4D8D6D05 		lea	r13, 5[r13]	# copy_word,
 5509              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5510              		.loc 1 819 94 view .LVU1896
 5511 20b4 C422E9F7 		shlx	r8, QWORD PTR 8[rbx+r9*8], rdx	# tmp753, *_589, shift_flipped
GAS LISTING /tmp/ccNeV1of.s 			page 160


 5511      44CB08
 5512              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5513              		.loc 1 819 56 view .LVU1897
 5514 20bb 4A8B34CB 		mov	rsi, QWORD PTR [rbx+r9*8]	# *_584, *_584
 5515 20bf C46283F7 		shrx	r9, rsi, r15	# tmp755, *_584, shift
 5515      CE
 5516              	.LVL272:
 5517              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5518              		.loc 1 819 66 view .LVU1898
 5519 20c4 4D09C8   		or	r8, r9	# tmp757, tmp755
 5520              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5521              		.loc 1 818 5 view .LVU1899
 5522 20c7 4D39EB   		cmp	r11, r13	# aligned_copy_word, copy_word
 5523              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5524              		.loc 1 819 66 view .LVU1900
 5525 20ca 4E8904D3 		mov	QWORD PTR [rbx+r10*8], r8	# *_593, tmp757
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5526              		.loc 1 818 43 is_stmt 1 view .LVU1901
 5527              	.LVL273:
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5528              		.loc 1 818 11 view .LVU1902
 5529              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5530              		.loc 1 819 77 is_stmt 0 view .LVU1903
 5531 20ce 4D8D6424 		lea	r12, 5[r12]	# _587,
 5531      05
 5532              	.LVL274:
 5533              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5534              		.loc 1 818 5 view .LVU1904
 5535 20d3 7217     		jb	.L359	#,
 819:sieve_extend.c ****     }
 5536              		.loc 1 819 9 is_stmt 1 view .LVU1905
 5537              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5538              		.loc 1 819 56 is_stmt 0 view .LVU1906
 5539 20d5 4E8B1CE3 		mov	r11, QWORD PTR [rbx+r12*8]	# *_232, *_232
 5540              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5541              		.loc 1 819 94 view .LVU1907
 5542 20d9 C4A2E9F7 		shlx	rdx, QWORD PTR 8[rbx+r12*8], rdx	# tmp758, *_237, shift_flipped
 5542      54E308
 5543              	.LVL275:
 5544              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5545              		.loc 1 819 56 view .LVU1908
 5546 20e0 C44283F7 		shrx	r15, r11, r15	# tmp760, *_232, shift
 5546      FB
 5547              	.LVL276:
 5548              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 5549              		.loc 1 819 66 view .LVU1909
 5550 20e5 4C09FA   		or	rdx, r15	# tmp762, tmp760
GAS LISTING /tmp/ccNeV1of.s 			page 161


 5551 20e8 4A8914EB 		mov	QWORD PTR [rbx+r13*8], rdx	# *_241, tmp762
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5552              		.loc 1 818 43 is_stmt 1 view .LVU1910
 5553              	.LVL277:
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 5554              		.loc 1 818 11 view .LVU1911
 5555              	.L359:
 822:sieve_extend.c **** 
 5556              		.loc 1 822 5 view .LVU1912
 5557              	# sieve_extend.c:822:     if (copy_word >= destination_stop_word) return;
 822:sieve_extend.c **** 
 5558              		.loc 1 822 8 is_stmt 0 view .LVU1913
 5559 20ec 4C8B5424 		mov	r10, QWORD PTR 88[rsp]	# destination_stop_word, %sfp
 5559      58
 5560 20f1 4939CA   		cmp	r10, rcx	# destination_stop_word, tmp.290
 5561 20f4 0F860E04 		jbe	.L525	#,
 5561      0000
 824:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 5562              		.loc 1 824 5 is_stmt 1 view .LVU1914
 5563              	# sieve_extend.c:824:     source_word = copy_word - size; // recalibrate
 824:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 5564              		.loc 1 824 17 is_stmt 0 view .LVU1915
 5565 20fa 488B7C24 		mov	rdi, QWORD PTR 24[rsp]	# size, %sfp
 5565      18
 5566 20ff 4989CC   		mov	r12, rcx	# tmp.289, tmp.290
 5567              	# sieve_extend.c:828:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5568              		.loc 1 828 21 view .LVU1916
 5569 2102 488D040F 		lea	rax, [rdi+rcx]	# ivtmp.350,
 5570              	# sieve_extend.c:824:     source_word = copy_word - size; // recalibrate
 824:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 5571              		.loc 1 824 17 view .LVU1917
 5572 2106 4929FC   		sub	r12, rdi	# tmp.289, size
 5573              	.LVL278:
 825:sieve_extend.c **** 
 5574              		.loc 1 825 5 is_stmt 1 view .LVU1918
 5575              	# sieve_extend.c:828:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5576              		.loc 1 828 5 is_stmt 0 view .LVU1919
 5577 2109 4939C2   		cmp	r10, rax	# destination_stop_word, ivtmp.350
 5578              	# sieve_extend.c:825:     const size_t memsize = (size_t)size*sizeof(bitword_t);
 825:sieve_extend.c **** 
 5579              		.loc 1 825 18 view .LVU1920
 5580 210c 4C8D34FD 		lea	r14, 0[0+rdi*8]	# memsize,
 5580      00000000 
 5581              	.LVL279:
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5582              		.loc 1 828 11 is_stmt 1 view .LVU1921
 5583              	# sieve_extend.c:828:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5584              		.loc 1 828 5 is_stmt 0 view .LVU1922
 5585 2114 0F826B01 		jb	.L366	#,
 5585      0000
 5586 211a 4C8D2CCB 		lea	r13, [rbx+rcx*8]	# tmp765,
 5587 211e 488D0CC5 		lea	rcx, 0[0+rax*8]	# tmp766,
 5587      00000000 
 5588              	.LVL280:
GAS LISTING /tmp/ccNeV1of.s 			page 162


 5589              	# sieve_extend.c:829:         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 829:sieve_extend.c **** 
 5590              		.loc 1 829 38 view .LVU1923
 5591 2126 4E8D3CE3 		lea	r15, [rbx+r12*8]	# _48,
 5592 212a 4929CD   		sub	r13, rcx	# _437, tmp766
 5593 212d 4C896424 		mov	QWORD PTR 72[rsp], r12	# %sfp, tmp.289
 5593      48
 5594 2132 4989FC   		mov	r12, rdi	# size, size
 5595              	.LVL281:
 829:sieve_extend.c **** 
 5596              		.loc 1 829 38 view .LVU1924
 5597 2135 48895C24 		mov	QWORD PTR 64[rsp], rbx	# %sfp, bitarray
 5597      40
 5598 213a 4C89D3   		mov	rbx, r10	# destination_stop_word, destination_stop_word
 5599              	.LVL282:
 829:sieve_extend.c **** 
 5600              		.loc 1 829 38 view .LVU1925
 5601 213d C5F877   		vzeroupper
 5602              	.LVL283:
 5603              	.L367:
 829:sieve_extend.c **** 
 5604              		.loc 1 829 9 is_stmt 1 discriminator 2 view .LVU1926
 5605              	.LBB399:
 5606              	.LBI399:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 5607              		.loc 2 31 1 discriminator 2 view .LVU1927
 5608              	.LBB400:
 5609              		.loc 2 34 3 discriminator 2 view .LVU1928
 5610              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 5611              		.loc 2 34 10 is_stmt 0 discriminator 2 view .LVU1929
 5612 2140 498D7CC5 		lea	rdi, 0[r13+rax*8]	# tmp768,
 5612      00
 5613 2145 4C89F2   		mov	rdx, r14	#, memsize
 5614 2148 48894424 		mov	QWORD PTR 80[rsp], rax	# %sfp, ivtmp.350
 5614      50
 5615 214d 4C89FE   		mov	rsi, r15	#, _48
 5616 2150 E8000000 		call	memcpy@PLT	#
 5616      00
 5617              	.LVL284:
 5618              		.loc 2 34 10 discriminator 2 view .LVU1930
 5619              	.LBE400:
 5620              	.LBE399:
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5621              		.loc 1 828 54 is_stmt 1 discriminator 2 view .LVU1931
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5622              		.loc 1 828 11 discriminator 2 view .LVU1932
 5623 2155 488B4C24 		mov	rcx, QWORD PTR 80[rsp]	# ivtmp.350, %sfp
 5623      50
 5624 215a 4A8D0421 		lea	rax, [rcx+r12]	# ivtmp.350,
 5625              	# sieve_extend.c:828:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5626              		.loc 1 828 5 is_stmt 0 discriminator 2 view .LVU1933
 5627 215e 4839C3   		cmp	rbx, rax	# destination_stop_word, ivtmp.350
 5628 2161 0F820901 		jb	.L513	#,
 5628      0000
 829:sieve_extend.c **** 
 5629              		.loc 1 829 9 is_stmt 1 view .LVU1934
GAS LISTING /tmp/ccNeV1of.s 			page 163


 5630              	.LVL285:
 5631              	.LBB408:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 5632              		.loc 2 31 1 view .LVU1935
 5633              	.LBB401:
 5634              		.loc 2 34 3 view .LVU1936
 5635              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 5636              		.loc 2 34 10 is_stmt 0 view .LVU1937
 5637 2167 498D7CC5 		lea	rdi, 0[r13+rax*8]	# tmp990,
 5637      00
 5638 216c 4C89F2   		mov	rdx, r14	#, memsize
 5639 216f 48894424 		mov	QWORD PTR 80[rsp], rax	# %sfp, ivtmp.350
 5639      50
 5640              	.LVL286:
 5641              		.loc 2 34 10 view .LVU1938
 5642 2174 4C89FE   		mov	rsi, r15	#, _48
 5643 2177 E8000000 		call	memcpy@PLT	#
 5643      00
 5644              	.LVL287:
 5645              		.loc 2 34 10 view .LVU1939
 5646              	.LBE401:
 5647              	.LBE408:
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5648              		.loc 1 828 54 is_stmt 1 view .LVU1940
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5649              		.loc 1 828 11 view .LVU1941
 5650 217c 488B4C24 		mov	rcx, QWORD PTR 80[rsp]	# ivtmp.350, %sfp
 5650      50
 5651 2181 4E8D0421 		lea	r8, [rcx+r12]	# ivtmp.350,
 5652              	# sieve_extend.c:828:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5653              		.loc 1 828 5 is_stmt 0 view .LVU1942
 5654 2185 4C39C3   		cmp	rbx, r8	# destination_stop_word, ivtmp.350
 5655 2188 0F82E200 		jb	.L513	#,
 5655      0000
 829:sieve_extend.c **** 
 5656              		.loc 1 829 9 is_stmt 1 view .LVU1943
 5657              	.LVL288:
 5658              	.LBB409:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 5659              		.loc 2 31 1 view .LVU1944
 5660              	.LBB402:
 5661              		.loc 2 34 3 view .LVU1945
 5662              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 5663              		.loc 2 34 10 is_stmt 0 view .LVU1946
 5664 218e 4C89FE   		mov	rsi, r15	#, _48
 5665 2191 4B8D7CC5 		lea	rdi, 0[r13+r8*8]	# tmp993,
 5665      00
 5666 2196 4C894424 		mov	QWORD PTR 80[rsp], r8	# %sfp, ivtmp.350
 5666      50
 5667 219b 4C89F2   		mov	rdx, r14	#, memsize
 5668 219e E8000000 		call	memcpy@PLT	#
 5668      00
 5669              	.LVL289:
 5670              		.loc 2 34 10 view .LVU1947
 5671              	.LBE402:
 5672              	.LBE409:
GAS LISTING /tmp/ccNeV1of.s 			page 164


 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5673              		.loc 1 828 54 is_stmt 1 view .LVU1948
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5674              		.loc 1 828 11 view .LVU1949
 5675 21a3 488B4C24 		mov	rcx, QWORD PTR 80[rsp]	# ivtmp.350, %sfp
 5675      50
 5676 21a8 4A8D3421 		lea	rsi, [rcx+r12]	# ivtmp.350,
 5677              	# sieve_extend.c:828:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5678              		.loc 1 828 5 is_stmt 0 view .LVU1950
 5679 21ac 4839F3   		cmp	rbx, rsi	# destination_stop_word, ivtmp.350
 5680 21af 0F82BB00 		jb	.L513	#,
 5680      0000
 829:sieve_extend.c **** 
 5681              		.loc 1 829 9 is_stmt 1 view .LVU1951
 5682              	.LVL290:
 5683              	.LBB410:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 5684              		.loc 2 31 1 view .LVU1952
 5685              	.LBB403:
 5686              		.loc 2 34 3 view .LVU1953
 5687              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 5688              		.loc 2 34 10 is_stmt 0 view .LVU1954
 5689 21b5 498D7CF5 		lea	rdi, 0[r13+rsi*8]	# tmp996,
 5689      00
 5690 21ba 4C89F2   		mov	rdx, r14	#, memsize
 5691 21bd 48897424 		mov	QWORD PTR 80[rsp], rsi	# %sfp, ivtmp.350
 5691      50
 5692 21c2 4C89FE   		mov	rsi, r15	#, _48
 5693 21c5 E8000000 		call	memcpy@PLT	#
 5693      00
 5694              	.LVL291:
 5695              		.loc 2 34 10 view .LVU1955
 5696              	.LBE403:
 5697              	.LBE410:
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5698              		.loc 1 828 54 is_stmt 1 view .LVU1956
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5699              		.loc 1 828 11 view .LVU1957
 5700 21ca 488B4C24 		mov	rcx, QWORD PTR 80[rsp]	# ivtmp.350, %sfp
 5700      50
 5701 21cf 4E8D0C21 		lea	r9, [rcx+r12]	# ivtmp.350,
 5702              	# sieve_extend.c:828:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5703              		.loc 1 828 5 is_stmt 0 view .LVU1958
 5704 21d3 4C39CB   		cmp	rbx, r9	# destination_stop_word, ivtmp.350
 5705 21d6 0F829400 		jb	.L513	#,
 5705      0000
 829:sieve_extend.c **** 
 5706              		.loc 1 829 9 is_stmt 1 view .LVU1959
 5707              	.LVL292:
 5708              	.LBB411:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 5709              		.loc 2 31 1 view .LVU1960
 5710              	.LBB404:
 5711              		.loc 2 34 3 view .LVU1961
 5712              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
GAS LISTING /tmp/ccNeV1of.s 			page 165


 5713              		.loc 2 34 10 is_stmt 0 view .LVU1962
 5714 21dc 4C89F2   		mov	rdx, r14	#, memsize
 5715 21df 4B8D7CCD 		lea	rdi, 0[r13+r9*8]	# tmp999,
 5715      00
 5716 21e4 4C894C24 		mov	QWORD PTR 80[rsp], r9	# %sfp, ivtmp.350
 5716      50
 5717 21e9 4C89FE   		mov	rsi, r15	#, _48
 5718 21ec E8000000 		call	memcpy@PLT	#
 5718      00
 5719              	.LVL293:
 5720              		.loc 2 34 10 view .LVU1963
 5721              	.LBE404:
 5722              	.LBE411:
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5723              		.loc 1 828 54 is_stmt 1 view .LVU1964
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5724              		.loc 1 828 11 view .LVU1965
 5725 21f1 488B4C24 		mov	rcx, QWORD PTR 80[rsp]	# ivtmp.350, %sfp
 5725      50
 5726 21f6 4A8D1421 		lea	rdx, [rcx+r12]	# ivtmp.350,
 5727              	# sieve_extend.c:828:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5728              		.loc 1 828 5 is_stmt 0 view .LVU1966
 5729 21fa 4839D3   		cmp	rbx, rdx	# destination_stop_word, ivtmp.350
 5730 21fd 7271     		jb	.L513	#,
 829:sieve_extend.c **** 
 5731              		.loc 1 829 9 is_stmt 1 view .LVU1967
 5732              	.LVL294:
 5733              	.LBB412:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 5734              		.loc 2 31 1 view .LVU1968
 5735              	.LBB405:
 5736              		.loc 2 34 3 view .LVU1969
 5737              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 5738              		.loc 2 34 10 is_stmt 0 view .LVU1970
 5739 21ff 498D7CD5 		lea	rdi, 0[r13+rdx*8]	# tmp1002,
 5739      00
 5740 2204 4C89FE   		mov	rsi, r15	#, _48
 5741 2207 48895424 		mov	QWORD PTR 80[rsp], rdx	# %sfp, ivtmp.350
 5741      50
 5742 220c 4C89F2   		mov	rdx, r14	#, memsize
 5743 220f E8000000 		call	memcpy@PLT	#
 5743      00
 5744              	.LVL295:
 5745              		.loc 2 34 10 view .LVU1971
 5746              	.LBE405:
 5747              	.LBE412:
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5748              		.loc 1 828 54 is_stmt 1 view .LVU1972
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5749              		.loc 1 828 11 view .LVU1973
 5750 2214 488B4C24 		mov	rcx, QWORD PTR 80[rsp]	# ivtmp.350, %sfp
 5750      50
 5751 2219 4E8D1C21 		lea	r11, [rcx+r12]	# ivtmp.350,
 5752              	# sieve_extend.c:828:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5753              		.loc 1 828 5 is_stmt 0 view .LVU1974
GAS LISTING /tmp/ccNeV1of.s 			page 166


 5754 221d 4C39DB   		cmp	rbx, r11	# destination_stop_word, ivtmp.350
 5755 2220 724E     		jb	.L513	#,
 829:sieve_extend.c **** 
 5756              		.loc 1 829 9 is_stmt 1 view .LVU1975
 5757              	.LVL296:
 5758              	.LBB413:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 5759              		.loc 2 31 1 view .LVU1976
 5760              	.LBB406:
 5761              		.loc 2 34 3 view .LVU1977
 5762              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 5763              		.loc 2 34 10 is_stmt 0 view .LVU1978
 5764 2222 4B8D7CDD 		lea	rdi, 0[r13+r11*8]	# tmp1005,
 5764      00
 5765 2227 4C89F2   		mov	rdx, r14	#, memsize
 5766 222a 4C895C24 		mov	QWORD PTR 80[rsp], r11	# %sfp, ivtmp.350
 5766      50
 5767 222f 4C89FE   		mov	rsi, r15	#, _48
 5768 2232 E8000000 		call	memcpy@PLT	#
 5768      00
 5769              	.LVL297:
 5770              		.loc 2 34 10 view .LVU1979
 5771              	.LBE406:
 5772              	.LBE413:
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5773              		.loc 1 828 54 is_stmt 1 view .LVU1980
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5774              		.loc 1 828 11 view .LVU1981
 5775 2237 488B4C24 		mov	rcx, QWORD PTR 80[rsp]	# ivtmp.350, %sfp
 5775      50
 5776 223c 4E8D1421 		lea	r10, [rcx+r12]	# ivtmp.350,
 5777              	# sieve_extend.c:828:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5778              		.loc 1 828 5 is_stmt 0 view .LVU1982
 5779 2240 4C39D3   		cmp	rbx, r10	# destination_stop_word, ivtmp.350
 5780 2243 722B     		jb	.L513	#,
 829:sieve_extend.c **** 
 5781              		.loc 1 829 9 is_stmt 1 view .LVU1983
 5782              	.LVL298:
 5783              	.LBB414:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 5784              		.loc 2 31 1 view .LVU1984
 5785              	.LBB407:
 5786              		.loc 2 34 3 view .LVU1985
 5787              	# /usr/include/x86_64-linux-gnu/bits/string_fortified.h:34:   return __builtin___memcpy_chk (__dest
 5788              		.loc 2 34 10 is_stmt 0 view .LVU1986
 5789 2245 4B8D7CD5 		lea	rdi, 0[r13+r10*8]	# tmp1008,
 5789      00
 5790 224a 4C89F2   		mov	rdx, r14	#, memsize
 5791 224d 4C895424 		mov	QWORD PTR 80[rsp], r10	# %sfp, ivtmp.350
 5791      50
 5792 2252 4C89FE   		mov	rsi, r15	#, _48
 5793 2255 E8000000 		call	memcpy@PLT	#
 5793      00
 5794              	.LVL299:
 5795              		.loc 2 34 10 view .LVU1987
 5796              	.LBE407:
GAS LISTING /tmp/ccNeV1of.s 			page 167


 5797              	.LBE414:
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5798              		.loc 1 828 54 is_stmt 1 view .LVU1988
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5799              		.loc 1 828 11 view .LVU1989
 5800 225a 488B4C24 		mov	rcx, QWORD PTR 80[rsp]	# ivtmp.350, %sfp
 5800      50
 5801              	.LVL300:
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5802              		.loc 1 828 11 is_stmt 0 view .LVU1990
 5803 225f 4A8D0421 		lea	rax, [rcx+r12]	# ivtmp.350,
 5804              	.LVL301:
 5805              	# sieve_extend.c:828:     for (;copy_word + size <= destination_stop_word; copy_word += size) 
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5806              		.loc 1 828 5 view .LVU1991
 5807 2263 4839C3   		cmp	rbx, rax	# destination_stop_word, ivtmp.350
 5808 2266 0F83D4FE 		jnb	.L367	#,
 5808      FFFF
 5809              	.LVL302:
 5810 226c 0F1F4000 		.p2align 4
 5811              		.p2align 3
 5812              	.L513:
 828:sieve_extend.c ****         memcpy(&bitarray[copy_word], &bitarray[source_word],memsize );
 5813              		.loc 1 828 5 view .LVU1992
 5814 2270 4C8B6424 		mov	r12, QWORD PTR 72[rsp]	# tmp.289, %sfp
 5814      48
 5815              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5816              		.loc 1 832 5 view .LVU1993
 5817 2275 48394C24 		cmp	QWORD PTR 88[rsp], rcx	# %sfp, tmp.290
 5817      58
 5818 227a 488B5C24 		mov	rbx, QWORD PTR 64[rsp]	# bitarray, %sfp
 5818      40
 5819              	.LVL303:
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5820              		.loc 1 832 11 is_stmt 1 view .LVU1994
 5821              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5822              		.loc 1 832 5 is_stmt 0 view .LVU1995
 5823 227f 0F827402 		jb	.L526	#,
 5823      0000
 5824              	.LVL304:
 5825              	.L366:
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5826              		.loc 1 832 5 view .LVU1996
 5827 2285 4A8D3CE3 		lea	rdi, [rbx+r12*8]	# vectp.284,
 5828 2289 41B80500 		mov	r8d, 5	# tmp778,
 5828      0000
 5829 228f 4C8B7424 		mov	r14, QWORD PTR 88[rsp]	# destination_stop_word, %sfp
 5829      58
 5830              	.LVL305:
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5831              		.loc 1 832 5 view .LVU1997
 5832 2294 4989FD   		mov	r13, rdi	# tmp775, vectp.284
 5833 2297 49C1ED03 		shr	r13, 3	# tmp775,
 5834 229b 49F7DD   		neg	r13	# tmp776
 5835 229e 4183E503 		and	r13d, 3	# prolog_loop_niters.285,
GAS LISTING /tmp/ccNeV1of.s 			page 168


 5836 22a2 4D8D7E01 		lea	r15, 1[r14]	# _49,
 5837 22a6 498D7503 		lea	rsi, 3[r13]	# tmp777,
 5838 22aa 4883FE05 		cmp	rsi, 5	# tmp777,
 5839 22ae 490F42F0 		cmovb	rsi, r8	# tmp777,, tmp967, tmp778
 5840 22b2 4929CE   		sub	r14, rcx	# tmp779, tmp.290
 5841 22b5 4C39F6   		cmp	rsi, r14	# tmp967, tmp779
 5842 22b8 0F87BA01 		ja	.L369	#,
 5842      0000
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5843              		.loc 1 832 5 view .LVU1998
 5844 22be 4D85ED   		test	r13, r13	# prolog_loop_niters.285
 5845 22c1 0F846902 		je	.L377	#,
 5845      0000
 833:sieve_extend.c **** 
 5846              		.loc 1 833 9 is_stmt 1 view .LVU1999
 5847              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 5848              		.loc 1 833 39 is_stmt 0 view .LVU2000
 5849 22c7 488B17   		mov	rdx, QWORD PTR [rdi]	# _80, MEM[(uint64_t *)vectp.284_198]
 5850 22ca 4983FD01 		cmp	r13, 1	# prolog_loop_niters.285,
 5851              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5852              		.loc 1 832 57 view .LVU2001
 5853 22ce 4C8D5901 		lea	r11, 1[rcx]	# copy_word,
 5854              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5855              		.loc 1 832 71 view .LVU2002
 5856 22d2 4D8D7424 		lea	r14, 1[r12]	# source_word,
 5856      01
 5857              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 5858              		.loc 1 833 29 view .LVU2003
 5859 22d7 488914CB 		mov	QWORD PTR [rbx+rcx*8], rdx	# *_56, _80
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5860              		.loc 1 832 48 is_stmt 1 view .LVU2004
 5861              	.LVL306:
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5862              		.loc 1 832 11 view .LVU2005
 5863 22db 7428     		je	.L370	#,
 833:sieve_extend.c **** 
 5864              		.loc 1 833 9 view .LVU2006
 5865              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 5866              		.loc 1 833 39 is_stmt 0 view .LVU2007
 5867 22dd 4E8B14F3 		mov	r10, QWORD PTR [rbx+r14*8]	# _507, *_504
 5868 22e1 4983FD03 		cmp	r13, 3	# prolog_loop_niters.285,
 5869              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5870              		.loc 1 832 71 view .LVU2008
 5871 22e5 4D8D7424 		lea	r14, 2[r12]	# source_word,
 5871      02
 5872              	.LVL307:
 5873              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 5874              		.loc 1 833 29 view .LVU2009
 5875 22ea 4E8914DB 		mov	QWORD PTR [rbx+r11*8], r10	# *_506, _507
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/ccNeV1of.s 			page 169


 5876              		.loc 1 832 48 is_stmt 1 view .LVU2010
 5877              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5878              		.loc 1 832 57 is_stmt 0 view .LVU2011
 5879 22ee 4C8D5902 		lea	r11, 2[rcx]	# copy_word,
 5880              	.LVL308:
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5881              		.loc 1 832 11 is_stmt 1 view .LVU2012
 5882 22f2 7511     		jne	.L370	#,
 833:sieve_extend.c **** 
 5883              		.loc 1 833 9 view .LVU2013
 5884              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 5885              		.loc 1 833 39 is_stmt 0 view .LVU2014
 5886 22f4 4A8B04F3 		mov	rax, QWORD PTR [rbx+r14*8]	# _179, *_182
 5887              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5888              		.loc 1 832 71 view .LVU2015
 5889 22f8 4D8D7424 		lea	r14, 3[r12]	# source_word,
 5889      03
 5890              	.LVL309:
 5891              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 5892              		.loc 1 833 29 view .LVU2016
 5893 22fd 4A8904DB 		mov	QWORD PTR [rbx+r11*8], rax	# *_180, _179
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5894              		.loc 1 832 48 is_stmt 1 view .LVU2017
 5895              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5896              		.loc 1 832 57 is_stmt 0 view .LVU2018
 5897 2301 4C8D5903 		lea	r11, 3[rcx]	# copy_word,
 5898              	.LVL310:
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5899              		.loc 1 832 11 is_stmt 1 view .LVU2019
 5900              	.L370:
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5901              		.loc 1 832 11 is_stmt 0 view .LVU2020
 5902 2305 4D29EF   		sub	r15, r13	# tmp780, prolog_loop_niters.285
 5903 2308 4D01EC   		add	r12, r13	# tmp781, prolog_loop_niters.285
 5904 230b 4929CF   		sub	r15, rcx	# niters.286, tmp.290
 5905 230e 4C01E9   		add	rcx, r13	# tmp783, prolog_loop_niters.285
 5906 2311 4C89FF   		mov	rdi, r15	# bnd.287, niters.286
 5907              	# sieve_extend.c:824:     source_word = copy_word - size; // recalibrate
 824:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 5908              		.loc 1 824 17 view .LVU2021
 5909 2314 31F6     		xor	esi, esi	# ivtmp.342
 5910 2316 48C1EF02 		shr	rdi, 2	# bnd.287,
 5911 231a 4E8D24E3 		lea	r12, [rbx+r12*8]	# vectp.292,
 5912 231e 48C1E705 		sal	rdi, 5	# _635,
 5913 2322 488D0CCB 		lea	rcx, [rbx+rcx*8]	# vectp.295,
 5914 2326 4C8D6FE0 		lea	r13, -32[rdi]	# tmp793,
 5915 232a 49C1ED05 		shr	r13, 5	# tmp791,
 5916 232e 4983C501 		add	r13, 1	# tmp794,
 5917 2332 4183E507 		and	r13d, 7	# tmp795,
 5918 2336 0F849600 		je	.L372	#,
 5918      0000
 5919 233c 4983FD01 		cmp	r13, 1	# tmp795,
GAS LISTING /tmp/ccNeV1of.s 			page 170


 5920 2340 7478     		je	.L463	#,
 5921 2342 4983FD02 		cmp	r13, 2	# tmp795,
 5922 2346 7463     		je	.L464	#,
 5923 2348 4983FD03 		cmp	r13, 3	# tmp795,
 5924 234c 744E     		je	.L465	#,
 5925 234e 4983FD04 		cmp	r13, 4	# tmp795,
 5926 2352 7439     		je	.L466	#,
 5927 2354 4983FD05 		cmp	r13, 5	# tmp795,
 5928 2358 7424     		je	.L467	#,
 5929 235a 4983FD06 		cmp	r13, 6	# tmp795,
 5930 235e 740F     		je	.L468	#,
 5931              	.LVL311:
 833:sieve_extend.c **** 
 5932              		.loc 1 833 9 is_stmt 1 view .LVU2022
 5933              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 5934              		.loc 1 833 29 is_stmt 0 view .LVU2023
 5935 2360 C4417D6F 		vmovdqa	ymm10, YMMWORD PTR [r12]	# tmp1253, MEM[base: vectp.292_120, index: ivtmp.342_513, offset:
 5935      1424
 5936 2366 BE200000 		mov	esi, 32	# ivtmp.342,
 5936      00
 5937 236b C57E7F11 		vmovdqu	YMMWORD PTR [rcx], ymm10	# MEM[base: vectp.295_97, index: ivtmp.342_513, offset: 0B], tmp1
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5938              		.loc 1 832 48 is_stmt 1 view .LVU2024
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5939              		.loc 1 832 11 view .LVU2025
 5940              	.L468:
 833:sieve_extend.c **** 
 5941              		.loc 1 833 9 view .LVU2026
 5942              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 5943              		.loc 1 833 29 is_stmt 0 view .LVU2027
 5944 236f C4417D6F 		vmovdqa	ymm11, YMMWORD PTR [r12+rsi]	# tmp1254, MEM[base: vectp.292_120, index: ivtmp.342_513, off
 5944      1C34
 5945 2375 C57E7F1C 		vmovdqu	YMMWORD PTR [rcx+rsi], ymm11	# MEM[base: vectp.295_97, index: ivtmp.342_513, offset: 0B], 
 5945      31
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5946              		.loc 1 832 48 is_stmt 1 view .LVU2028
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5947              		.loc 1 832 11 view .LVU2029
 5948 237a 4883C620 		add	rsi, 32	# ivtmp.342,
 5949              	.L467:
 833:sieve_extend.c **** 
 5950              		.loc 1 833 9 view .LVU2030
 5951              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 5952              		.loc 1 833 29 is_stmt 0 view .LVU2031
 5953 237e C4417D6F 		vmovdqa	ymm14, YMMWORD PTR [r12+rsi]	# tmp1255, MEM[base: vectp.292_120, index: ivtmp.342_513, off
 5953      3434
 5954 2384 C57E7F34 		vmovdqu	YMMWORD PTR [rcx+rsi], ymm14	# MEM[base: vectp.295_97, index: ivtmp.342_513, offset: 0B], 
 5954      31
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5955              		.loc 1 832 48 is_stmt 1 view .LVU2032
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5956              		.loc 1 832 11 view .LVU2033
 5957 2389 4883C620 		add	rsi, 32	# ivtmp.342,
 5958              	.L466:
GAS LISTING /tmp/ccNeV1of.s 			page 171


 833:sieve_extend.c **** 
 5959              		.loc 1 833 9 view .LVU2034
 5960              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 5961              		.loc 1 833 29 is_stmt 0 view .LVU2035
 5962 238d C4C17D6F 		vmovdqa	ymm4, YMMWORD PTR [r12+rsi]	# tmp1256, MEM[base: vectp.292_120, index: ivtmp.342_513, offs
 5962      2434
 5963 2393 C5FE7F24 		vmovdqu	YMMWORD PTR [rcx+rsi], ymm4	# MEM[base: vectp.295_97, index: ivtmp.342_513, offset: 0B], t
 5963      31
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5964              		.loc 1 832 48 is_stmt 1 view .LVU2036
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5965              		.loc 1 832 11 view .LVU2037
 5966 2398 4883C620 		add	rsi, 32	# ivtmp.342,
 5967              	.L465:
 833:sieve_extend.c **** 
 5968              		.loc 1 833 9 view .LVU2038
 5969              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 5970              		.loc 1 833 29 is_stmt 0 view .LVU2039
 5971 239c C4417D6F 		vmovdqa	ymm15, YMMWORD PTR [r12+rsi]	# tmp1257, MEM[base: vectp.292_120, index: ivtmp.342_513, off
 5971      3C34
 5972 23a2 C57E7F3C 		vmovdqu	YMMWORD PTR [rcx+rsi], ymm15	# MEM[base: vectp.295_97, index: ivtmp.342_513, offset: 0B], 
 5972      31
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5973              		.loc 1 832 48 is_stmt 1 view .LVU2040
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5974              		.loc 1 832 11 view .LVU2041
 5975 23a7 4883C620 		add	rsi, 32	# ivtmp.342,
 5976              	.L464:
 833:sieve_extend.c **** 
 5977              		.loc 1 833 9 view .LVU2042
 5978              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 5979              		.loc 1 833 29 is_stmt 0 view .LVU2043
 5980 23ab C4C17D6F 		vmovdqa	ymm1, YMMWORD PTR [r12+rsi]	# tmp1258, MEM[base: vectp.292_120, index: ivtmp.342_513, offs
 5980      0C34
 5981 23b1 C5FE7F0C 		vmovdqu	YMMWORD PTR [rcx+rsi], ymm1	# MEM[base: vectp.295_97, index: ivtmp.342_513, offset: 0B], t
 5981      31
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5982              		.loc 1 832 48 is_stmt 1 view .LVU2044
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5983              		.loc 1 832 11 view .LVU2045
 5984 23b6 4883C620 		add	rsi, 32	# ivtmp.342,
 5985              	.L463:
 833:sieve_extend.c **** 
 5986              		.loc 1 833 9 view .LVU2046
 5987              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 5988              		.loc 1 833 29 is_stmt 0 view .LVU2047
 5989 23ba C4417D6F 		vmovdqa	ymm8, YMMWORD PTR [r12+rsi]	# tmp1259, MEM[base: vectp.292_120, index: ivtmp.342_513, offs
 5989      0434
 5990 23c0 C57E7F04 		vmovdqu	YMMWORD PTR [rcx+rsi], ymm8	# MEM[base: vectp.295_97, index: ivtmp.342_513, offset: 0B], t
 5990      31
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 5991              		.loc 1 832 48 is_stmt 1 view .LVU2048
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/ccNeV1of.s 			page 172


 5992              		.loc 1 832 11 view .LVU2049
 5993 23c5 4883C620 		add	rsi, 32	# ivtmp.342,
 5994 23c9 4839FE   		cmp	rsi, rdi	# ivtmp.342, _635
 5995 23cc 0F848E00 		je	.L502	#,
 5995      0000
 5996              	.L372:
 833:sieve_extend.c **** 
 5997              		.loc 1 833 9 discriminator 2 view .LVU2050
 5998              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 5999              		.loc 1 833 29 is_stmt 0 discriminator 2 view .LVU2051
 6000 23d2 C4C17D6F 		vmovdqa	ymm0, YMMWORD PTR [r12+rsi]	# tmp1239, MEM[base: vectp.292_120, index: ivtmp.342_513, offs
 6000      0434
 6001 23d8 C5FE7F04 		vmovdqu	YMMWORD PTR [rcx+rsi], ymm0	# MEM[base: vectp.295_97, index: ivtmp.342_513, offset: 0B], t
 6001      31
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6002              		.loc 1 832 48 is_stmt 1 discriminator 2 view .LVU2052
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6003              		.loc 1 832 11 discriminator 2 view .LVU2053
 833:sieve_extend.c **** 
 6004              		.loc 1 833 9 discriminator 2 view .LVU2054
 6005              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6006              		.loc 1 833 29 is_stmt 0 discriminator 2 view .LVU2055
 6007 23dd C4C17D6F 		vmovdqa	ymm5, YMMWORD PTR 32[r12+rsi]	# tmp1240, MEM[base: vectp.292_120, index: ivtmp.342_513, of
 6007      6C3420
 6008 23e4 C5FE7F6C 		vmovdqu	YMMWORD PTR 32[rcx+rsi], ymm5	# MEM[base: vectp.295_97, index: ivtmp.342_513, offset: 0B],
 6008      3120
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6009              		.loc 1 832 48 is_stmt 1 discriminator 2 view .LVU2056
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6010              		.loc 1 832 11 discriminator 2 view .LVU2057
 833:sieve_extend.c **** 
 6011              		.loc 1 833 9 discriminator 2 view .LVU2058
 6012              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6013              		.loc 1 833 29 is_stmt 0 discriminator 2 view .LVU2059
 6014 23ea C4417D6F 		vmovdqa	ymm9, YMMWORD PTR 64[r12+rsi]	# tmp1241, MEM[base: vectp.292_120, index: ivtmp.342_513, of
 6014      4C3440
 6015 23f1 C57E7F4C 		vmovdqu	YMMWORD PTR 64[rcx+rsi], ymm9	# MEM[base: vectp.295_97, index: ivtmp.342_513, offset: 0B],
 6015      3140
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6016              		.loc 1 832 48 is_stmt 1 discriminator 2 view .LVU2060
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6017              		.loc 1 832 11 discriminator 2 view .LVU2061
 833:sieve_extend.c **** 
 6018              		.loc 1 833 9 discriminator 2 view .LVU2062
 6019              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6020              		.loc 1 833 29 is_stmt 0 discriminator 2 view .LVU2063
 6021 23f7 C4C17D6F 		vmovdqa	ymm7, YMMWORD PTR 96[r12+rsi]	# tmp1242, MEM[base: vectp.292_120, index: ivtmp.342_513, of
 6021      7C3460
 6022 23fe C5FE7F7C 		vmovdqu	YMMWORD PTR 96[rcx+rsi], ymm7	# MEM[base: vectp.295_97, index: ivtmp.342_513, offset: 0B],
 6022      3160
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6023              		.loc 1 832 48 is_stmt 1 discriminator 2 view .LVU2064
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/ccNeV1of.s 			page 173


 6024              		.loc 1 832 11 discriminator 2 view .LVU2065
 833:sieve_extend.c **** 
 6025              		.loc 1 833 9 discriminator 2 view .LVU2066
 6026              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6027              		.loc 1 833 29 is_stmt 0 discriminator 2 view .LVU2067
 6028 2404 C4C17D6F 		vmovdqa	ymm2, YMMWORD PTR 128[r12+rsi]	# tmp1243, MEM[base: vectp.292_120, index: ivtmp.342_513, o
 6028      94348000 
 6028      0000
 6029 240e C5FE7F94 		vmovdqu	YMMWORD PTR 128[rcx+rsi], ymm2	# MEM[base: vectp.295_97, index: ivtmp.342_513, offset: 0B]
 6029      31800000 
 6029      00
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6030              		.loc 1 832 48 is_stmt 1 discriminator 2 view .LVU2068
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6031              		.loc 1 832 11 discriminator 2 view .LVU2069
 833:sieve_extend.c **** 
 6032              		.loc 1 833 9 discriminator 2 view .LVU2070
 6033              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6034              		.loc 1 833 29 is_stmt 0 discriminator 2 view .LVU2071
 6035 2417 C4C17D6F 		vmovdqa	ymm6, YMMWORD PTR 160[r12+rsi]	# tmp1244, MEM[base: vectp.292_120, index: ivtmp.342_513, o
 6035      B434A000 
 6035      0000
 6036 2421 C5FE7FB4 		vmovdqu	YMMWORD PTR 160[rcx+rsi], ymm6	# MEM[base: vectp.295_97, index: ivtmp.342_513, offset: 0B]
 6036      31A00000 
 6036      00
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6037              		.loc 1 832 48 is_stmt 1 discriminator 2 view .LVU2072
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6038              		.loc 1 832 11 discriminator 2 view .LVU2073
 833:sieve_extend.c **** 
 6039              		.loc 1 833 9 discriminator 2 view .LVU2074
 6040              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6041              		.loc 1 833 29 is_stmt 0 discriminator 2 view .LVU2075
 6042 242a C4C17D6F 		vmovdqa	ymm3, YMMWORD PTR 192[r12+rsi]	# tmp1245, MEM[base: vectp.292_120, index: ivtmp.342_513, o
 6042      9C34C000 
 6042      0000
 6043 2434 C5FE7F9C 		vmovdqu	YMMWORD PTR 192[rcx+rsi], ymm3	# MEM[base: vectp.295_97, index: ivtmp.342_513, offset: 0B]
 6043      31C00000 
 6043      00
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6044              		.loc 1 832 48 is_stmt 1 discriminator 2 view .LVU2076
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6045              		.loc 1 832 11 discriminator 2 view .LVU2077
 833:sieve_extend.c **** 
 6046              		.loc 1 833 9 discriminator 2 view .LVU2078
 6047              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6048              		.loc 1 833 29 is_stmt 0 discriminator 2 view .LVU2079
 6049 243d C4417D6F 		vmovdqa	ymm12, YMMWORD PTR 224[r12+rsi]	# tmp1246, MEM[base: vectp.292_120, index: ivtmp.342_513, 
 6049      A434E000 
 6049      0000
 6050 2447 C57E7FA4 		vmovdqu	YMMWORD PTR 224[rcx+rsi], ymm12	# MEM[base: vectp.295_97, index: ivtmp.342_513, offset: 0B
 6050      31E00000 
 6050      00
GAS LISTING /tmp/ccNeV1of.s 			page 174


 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6051              		.loc 1 832 48 is_stmt 1 discriminator 2 view .LVU2080
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6052              		.loc 1 832 11 discriminator 2 view .LVU2081
 6053 2450 4881C600 		add	rsi, 256	# ivtmp.342,
 6053      010000
 6054 2457 4839FE   		cmp	rsi, rdi	# ivtmp.342, _635
 6055 245a 0F8572FF 		jne	.L372	#,
 6055      FFFF
 6056              	.L502:
 6057 2460 4D89F8   		mov	r8, r15	# niters_vector_mult_vf.288, niters.286
 6058 2463 4983E0FC 		and	r8, -4	# niters_vector_mult_vf.288,
 6059 2467 4D39F8   		cmp	r8, r15	# niters_vector_mult_vf.288, niters.286
 6060 246a 4F8D2430 		lea	r12, [r8+r14]	# tmp.289,
 6061 246e 4B8D0C18 		lea	rcx, [r8+r11]	# tmp.290,
 6062 2472 0F849000 		je	.L525	#,
 6062      0000
 6063              	.L369:
 6064              	.LVL312:
 833:sieve_extend.c **** 
 6065              		.loc 1 833 9 view .LVU2082
 6066              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6067              		.loc 1 832 5 is_stmt 0 view .LVU2083
 6068 2478 4C8B7424 		mov	r14, QWORD PTR 88[rsp]	# destination_stop_word, %sfp
 6068      58
 6069              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6070              		.loc 1 832 57 view .LVU2084
 6071 247d 4C8D4901 		lea	r9, 1[rcx]	# copy_word,
 6072              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6073              		.loc 1 833 39 view .LVU2085
 6074 2481 4E8B3CE3 		mov	r15, QWORD PTR [rbx+r12*8]	# _90, *_141
 6075              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6076              		.loc 1 832 71 view .LVU2086
 6077 2485 4D8D5C24 		lea	r11, 1[r12]	# source_word,
 6077      01
 6078              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6079              		.loc 1 832 5 view .LVU2087
 6080 248a 4D39CE   		cmp	r14, r9	# destination_stop_word, copy_word
 6081              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6082              		.loc 1 833 29 view .LVU2088
 6083 248d 4C893CCB 		mov	QWORD PTR [rbx+rcx*8], r15	# *_439, _90
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6084              		.loc 1 832 48 is_stmt 1 view .LVU2089
 6085              	.LVL313:
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6086              		.loc 1 832 11 view .LVU2090
 6087              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6088              		.loc 1 832 5 is_stmt 0 view .LVU2091
 6089 2491 7275     		jb	.L525	#,
 833:sieve_extend.c **** 
GAS LISTING /tmp/ccNeV1of.s 			page 175


 6090              		.loc 1 833 9 is_stmt 1 view .LVU2092
 6091              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6092              		.loc 1 833 39 is_stmt 0 view .LVU2093
 6093 2493 4A8B14DB 		mov	rdx, QWORD PTR [rbx+r11*8]	# _103, *_98
 6094              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6095              		.loc 1 832 57 view .LVU2094
 6096 2497 4C8D5102 		lea	r10, 2[rcx]	# copy_word,
 6097              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6098              		.loc 1 832 5 view .LVU2095
 6099 249b 4D39D6   		cmp	r14, r10	# destination_stop_word, copy_word
 6100              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6101              		.loc 1 832 71 view .LVU2096
 6102 249e 498D4424 		lea	rax, 2[r12]	# source_word,
 6102      02
 6103              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6104              		.loc 1 833 29 view .LVU2097
 6105 24a3 4A8914CB 		mov	QWORD PTR [rbx+r9*8], rdx	# *_102, _103
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6106              		.loc 1 832 48 is_stmt 1 view .LVU2098
 6107              	.LVL314:
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6108              		.loc 1 832 11 view .LVU2099
 6109              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6110              		.loc 1 832 5 is_stmt 0 view .LVU2100
 6111 24a7 725F     		jb	.L525	#,
 833:sieve_extend.c **** 
 6112              		.loc 1 833 9 is_stmt 1 view .LVU2101
 6113              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6114              		.loc 1 833 39 is_stmt 0 view .LVU2102
 6115 24a9 488B3CC3 		mov	rdi, QWORD PTR [rbx+rax*8]	# _113, *_110
 6116              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6117              		.loc 1 832 57 view .LVU2103
 6118 24ad 4C8D6903 		lea	r13, 3[rcx]	# copy_word,
 6119              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6120              		.loc 1 832 5 view .LVU2104
 6121 24b1 4D39EE   		cmp	r14, r13	# destination_stop_word, copy_word
 6122              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6123              		.loc 1 832 71 view .LVU2105
 6124 24b4 498D7424 		lea	rsi, 3[r12]	# source_word,
 6124      03
 6125              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6126              		.loc 1 833 29 view .LVU2106
 6127 24b9 4A893CD3 		mov	QWORD PTR [rbx+r10*8], rdi	# *_112, _113
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6128              		.loc 1 832 48 is_stmt 1 view .LVU2107
 6129              	.LVL315:
GAS LISTING /tmp/ccNeV1of.s 			page 176


 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6130              		.loc 1 832 11 view .LVU2108
 6131              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6132              		.loc 1 832 5 is_stmt 0 view .LVU2109
 6133 24bd 7249     		jb	.L525	#,
 833:sieve_extend.c **** 
 6134              		.loc 1 833 9 is_stmt 1 view .LVU2110
 6135              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6136              		.loc 1 833 39 is_stmt 0 view .LVU2111
 6137 24bf 4C8B04F3 		mov	r8, QWORD PTR [rbx+rsi*8]	# _35, *_501
 6138              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6139              		.loc 1 832 57 view .LVU2112
 6140 24c3 4C8D7904 		lea	r15, 4[rcx]	# copy_word,
 6141              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6142              		.loc 1 832 71 view .LVU2113
 6143 24c7 4983C404 		add	r12, 4	# source_word,
 6144              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6145              		.loc 1 832 5 view .LVU2114
 6146 24cb 4D39F7   		cmp	r15, r14	# copy_word, destination_stop_word
 6147              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6148              		.loc 1 833 29 view .LVU2115
 6149 24ce 4E8904EB 		mov	QWORD PTR [rbx+r13*8], r8	# *_132, _35
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6150              		.loc 1 832 48 is_stmt 1 view .LVU2116
 6151              	.LVL316:
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6152              		.loc 1 832 11 view .LVU2117
 6153              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6154              		.loc 1 832 5 is_stmt 0 view .LVU2118
 6155 24d2 7734     		ja	.L525	#,
 833:sieve_extend.c **** 
 6156              		.loc 1 833 9 is_stmt 1 view .LVU2119
 6157              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6158              		.loc 1 833 39 is_stmt 0 view .LVU2120
 6159 24d4 4E8D0CE5 		lea	r9, 0[0+r12*8]	# _42,
 6159      00000000 
 6160              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6161              		.loc 1 832 57 view .LVU2121
 6162 24dc 4883C105 		add	rcx, 5	# copy_word,
 6163              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6164              		.loc 1 833 39 view .LVU2122
 6165 24e0 4E8B24E3 		mov	r12, QWORD PTR [rbx+r12*8]	# _46, *_43
 6166              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6167              		.loc 1 832 5 view .LVU2123
 6168 24e4 4939CE   		cmp	r14, rcx	# destination_stop_word, copy_word
 6169              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
GAS LISTING /tmp/ccNeV1of.s 			page 177


 833:sieve_extend.c **** 
 6170              		.loc 1 833 29 view .LVU2124
 6171 24e7 4E8924FB 		mov	QWORD PTR [rbx+r15*8], r12	# *_45, _46
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6172              		.loc 1 832 48 is_stmt 1 view .LVU2125
 6173              	.LVL317:
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6174              		.loc 1 832 11 view .LVU2126
 6175              	# sieve_extend.c:832:     for (;copy_word <= destination_stop_word;  copy_word++,source_word++)
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6176              		.loc 1 832 5 is_stmt 0 view .LVU2127
 6177 24eb 721B     		jb	.L525	#,
 833:sieve_extend.c **** 
 6178              		.loc 1 833 9 is_stmt 1 view .LVU2128
 6179              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6180              		.loc 1 833 39 is_stmt 0 view .LVU2129
 6181 24ed 4E8B5C0B 		mov	r11, QWORD PTR 8[rbx+r9]	# _158, *_161
 6181      08
 6182              	# sieve_extend.c:833:         bitarray[copy_word] = bitarray[source_word];
 833:sieve_extend.c **** 
 6183              		.loc 1 833 29 view .LVU2130
 6184 24f2 4C891CCB 		mov	QWORD PTR [rbx+rcx*8], r11	# *_159, _158
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6185              		.loc 1 832 48 is_stmt 1 view .LVU2131
 832:sieve_extend.c ****         bitarray[copy_word] = bitarray[source_word];
 6186              		.loc 1 832 11 view .LVU2132
 6187 24f6 C5F877   		vzeroupper
 6188              	.L526:
 6189              	# sieve_extend.c:836:  }
 836:sieve_extend.c **** 
 6190              		.loc 1 836 2 is_stmt 0 view .LVU2133
 6191 24f9 488D65D8 		lea	rsp, -40[rbp]	#,
 6192              	.LVL318:
 836:sieve_extend.c **** 
 6193              		.loc 1 836 2 view .LVU2134
 6194 24fd 5B       		pop	rbx	#
 6195 24fe 415C     		pop	r12	#
 6196 2500 415D     		pop	r13	#
 6197 2502 415E     		pop	r14	#
 6198 2504 415F     		pop	r15	#
 6199 2506 5D       		pop	rbp	#
 6200              		.cfi_remember_state
 6201              		.cfi_def_cfa 7, 8
 6202              	.LVL319:
 836:sieve_extend.c **** 
 6203              		.loc 1 836 2 view .LVU2135
 6204 2507 C3       		ret	
 6205              	.LVL320:
 6206              		.p2align 4,,7
 6207              		.p2align 3
 6208              	.L525:
 6209              		.cfi_restore_state
 836:sieve_extend.c **** 
 6210              		.loc 1 836 2 view .LVU2136
 6211 2508 C5F877   		vzeroupper
 6212 250b 488D65D8 		lea	rsp, -40[rbp]	#,
GAS LISTING /tmp/ccNeV1of.s 			page 178


 6213              	.LVL321:
 836:sieve_extend.c **** 
 6214              		.loc 1 836 2 view .LVU2137
 6215 250f 5B       		pop	rbx	#
 6216 2510 415C     		pop	r12	#
 6217 2512 415D     		pop	r13	#
 6218 2514 415E     		pop	r14	#
 6219 2516 415F     		pop	r15	#
 6220 2518 5D       		pop	rbp	#
 6221              		.cfi_remember_state
 6222              		.cfi_def_cfa 7, 8
 6223              	.LVL322:
 836:sieve_extend.c **** 
 6224              		.loc 1 836 2 view .LVU2138
 6225 2519 C3       		ret	
 6226              	.LVL323:
 6227 251a 660F1F44 		.p2align 4,,7
 6227      0000
 6228              		.p2align 3
 6229              	.L376:
 6230              		.cfi_restore_state
 6231              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6232              		.loc 1 818 5 view .LVU2139
 6233 2520 4D89EE   		mov	r14, r13	# copy_word, tmp.303
 6234              	# sieve_extend.c:812:     source_word += distance;
 812:sieve_extend.c ****     copy_word += distance;
 6235              		.loc 1 812 17 view .LVU2140
 6236 2523 4D89E2   		mov	r10, r12	# source_word, tmp.302
 6237 2526 498D7424 		lea	rsi, 1[r12]	# tmp788,
 6237      01
 6238 252b E92DF8FF 		jmp	.L361	#
 6238      FF
 6239              	.LVL324:
 6240              		.p2align 4,,7
 6241              		.p2align 3
 6242              	.L377:
 6243              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6244              		.loc 1 818 5 view .LVU2141
 6245 2530 4989CB   		mov	r11, rcx	# copy_word, tmp.290
 6246              	# sieve_extend.c:824:     source_word = copy_word - size; // recalibrate
 824:sieve_extend.c ****     const size_t memsize = (size_t)size*sizeof(bitword_t);
 6247              		.loc 1 824 17 view .LVU2142
 6248 2533 4D89E6   		mov	r14, r12	# source_word, tmp.289
 6249 2536 E9CAFDFF 		jmp	.L370	#
 6249      FF
 6250              	.LVL325:
 6251 253b 0F1F4400 		.p2align 4,,7
 6251      00
 6252              		.p2align 3
 6253              	.L528:
 819:sieve_extend.c ****     }
 6254              		.loc 1 819 9 is_stmt 1 view .LVU2143
 6255              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 6256              		.loc 1 819 56 is_stmt 0 view .LVU2144
GAS LISTING /tmp/ccNeV1of.s 			page 179


 6257 2540 C4C17D6F 		vmovdqa	ymm3, YMMWORD PTR [r11]	# tmp1260, MEM[base: vectp.305_257, index: ivtmp.355_731, offset: 
 6257      1B
 6258 2545 B8200000 		mov	eax, 32	# ivtmp.355,
 6258      00
 6259              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 6260              		.loc 1 819 94 view .LVU2145
 6261 254a C5FE6F27 		vmovdqu	ymm4, YMMWORD PTR [rdi]	# tmp1261, MEM[base: vectp.309_264, index: ivtmp.355_731, offset: 
 6262              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 6263              		.loc 1 819 56 view .LVU2146
 6264 254e C4C165D3 		vpsrlq	ymm2, ymm3, xmm10	# vect__38.307, tmp1260, _12
 6264      D2
 6265              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 6266              		.loc 1 819 94 view .LVU2147
 6267 2553 C4C15DF3 		vpsllq	ymm6, ymm4, xmm11	# vect__43.311, tmp1261, _18
 6267      F3
 6268              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 6269              		.loc 1 819 66 view .LVU2148
 6270 2558 C56DEBE6 		vpor	ymm12, ymm2, ymm6	# vect__46.312, vect__38.307, vect__43.311
 6271              	# sieve_extend.c:819:         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[
 819:sieve_extend.c ****     }
 6272              		.loc 1 819 29 view .LVU2149
 6273 255c C4417E7F 		vmovdqu	YMMWORD PTR [r9], ymm12	# MEM[base: vectp.314_273, index: ivtmp.355_731, offset: 0B], vect
 6273      21
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6274              		.loc 1 818 43 is_stmt 1 view .LVU2150
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6275              		.loc 1 818 11 view .LVU2151
 6276 2561 E972F8FF 		jmp	.L461	#
 6276      FF
 6277              	.LVL326:
 6278              		.p2align 4,,7
 6279 2566 6690     		.p2align 3
 6280              	.L354:
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6281              		.loc 1 818 11 is_stmt 0 view .LVU2152
 6282 2568 4C8B7424 		mov	r14, QWORD PTR 48[rsp]	# fast_loop_stop_word, %sfp
 6282      30
 6283 256d 4D89E8   		mov	r8, r13	# tmp804, tmp.303
 6284 2570 49F7D0   		not	r8	# tmp804
 6285 2573 4801D9   		add	rcx, rbx	# ivtmp.370, bitarray
 6286              	.LBB415:
 6287              	.LBB396:
 6288              	.LBB385:
 6289              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6290              		.loc 1 707 42 view .LVU2153
 6291 2576 4489F8   		mov	eax, r15d	# tmp1194, _12
 6292              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6293              		.loc 1 707 63 view .LVU2154
 6294 2579 89D7     		mov	edi, edx	# tmp1195, _18
 6295 257b 4D01F0   		add	r8, r14	# tmp805, fast_loop_stop_word
 6296              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
GAS LISTING /tmp/ccNeV1of.s 			page 180


 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6297              		.loc 1 707 42 view .LVU2155
 6298 257e C4E2FBF7 		shrx	rax, QWORD PTR [rcx], rax	# tmp689, MEM[base: _743, offset: 0B], tmp1194
 6298      01
 6299              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6300              		.loc 1 706 19 view .LVU2156
 6301 2583 488B7108 		mov	rsi, QWORD PTR 8[rcx]	# source1, MEM[base: _743, offset: 8B]
 6302              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6303              		.loc 1 707 63 view .LVU2157
 6304 2587 C4E2C1F7 		shlx	rdi, rsi, rdi	# tmp691, source1, tmp1195
 6304      FE
 6305 258c 49D1E8   		shr	r8	# tmp803
 6306              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6307              		.loc 1 707 52 view .LVU2158
 6308 258f 4809F8   		or	rax, rdi	# tmp692, tmp691
 6309              	# sieve_extend.c:710:         copy_word += 2;
 710:sieve_extend.c ****         source_word += 2;
 6310              		.loc 1 710 19 view .LVU2159
 6311 2592 498D7D02 		lea	rdi, 2[r13]	# copy_word,
 6312              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6313              		.loc 1 707 63 view .LVU2160
 6314 2596 4189D2   		mov	r10d, edx	# _18, shift_flipped
 6315 2599 49F7D3   		not	r11	# tmp790
 6316 259c 4183E003 		and	r8d, 3	# tmp806,
 6317              	.LVL327:
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6318              		.loc 1 705 9 is_stmt 1 view .LVU2161
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6319              		.loc 1 706 9 view .LVU2162
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6320              		.loc 1 707 9 view .LVU2163
 6321              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6322              		.loc 1 707 52 is_stmt 0 view .LVU2164
 6323 25a0 4A8904EB 		mov	QWORD PTR [rbx+r13*8], rax	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 6324              	.LVL328:
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6325              		.loc 1 708 9 is_stmt 1 view .LVU2165
 709:sieve_extend.c ****         copy_word += 2;
 6326              		.loc 1 709 9 view .LVU2166
 6327              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6328              		.loc 1 707 42 is_stmt 0 view .LVU2167
 6329 25a4 4589F9   		mov	r9d, r15d	# _12, shift
 6330              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6331              		.loc 1 709 63 view .LVU2168
 6332 25a7 C4E2A9F7 		shlx	rax, QWORD PTR 16[rcx], r10	# tmp693, MEM[base: _743, offset: 16B], tmp1196
 6332      4110
 6333              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6334              		.loc 1 709 42 view .LVU2169
 6335 25ad C4E2B3F7 		shrx	rsi, rsi, r9	# tmp695, source1, tmp1197
GAS LISTING /tmp/ccNeV1of.s 			page 181


 6335      F6
 6336              	.LVL329:
 6337              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6338              		.loc 1 709 52 view .LVU2170
 6339 25b2 4809C6   		or	rsi, rax	# tmp696, tmp693
 6340              	.LBE385:
 6341              	# sieve_extend.c:704:     while (copy_word < fast_loop_stop_word) {
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6342              		.loc 1 704 11 view .LVU2171
 6343 25b5 4939FE   		cmp	r14, rdi	# fast_loop_stop_word, copy_word
 6344 25b8 4D8D143B 		lea	r10, [r11+rdi]	# distance,
 6345 25bc 488D4110 		lea	rax, 16[rcx]	# ivtmp.370,
 6346              	.LBB386:
 6347              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6348              		.loc 1 709 52 view .LVU2172
 6349 25c0 4A8974EB 		mov	QWORD PTR 8[rbx+r13*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset:
 6349      08
 6350              	.LVL330:
 710:sieve_extend.c ****         source_word += 2;
 6351              		.loc 1 710 9 is_stmt 1 view .LVU2173
 711:sieve_extend.c ****         distance += 2;
 6352              		.loc 1 711 9 view .LVU2174
 712:sieve_extend.c ****     }
 6353              		.loc 1 712 9 view .LVU2175
 712:sieve_extend.c ****     }
 6354              		.loc 1 712 9 is_stmt 0 view .LVU2176
 6355              	.LBE386:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6356              		.loc 1 704 11 is_stmt 1 view .LVU2177
 6357 25c5 0F86B3F6 		jbe	.L358	#,
 6357      FFFF
 6358 25cb 4D85C0   		test	r8, r8	# tmp806
 6359 25ce 0F849700 		je	.L516	#,
 6359      0000
 6360 25d4 4983F801 		cmp	r8, 1	# tmp806,
 6361 25d8 7446     		je	.L475	#,
 6362 25da 4983F802 		cmp	r8, 2	# tmp806,
 6363 25de 0F857401 		jne	.L529	#,
 6363      0000
 6364              	.LVL331:
 6365              	.L476:
 6366              	.LBB387:
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6367              		.loc 1 705 9 view .LVU2178
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6368              		.loc 1 706 9 view .LVU2179
 6369              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6370              		.loc 1 706 19 is_stmt 0 view .LVU2180
 6371 25e4 488B7008 		mov	rsi, QWORD PTR 8[rax]	# source1, MEM[base: _743, offset: 8B]
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6372              		.loc 1 707 9 is_stmt 1 view .LVU2181
 6373              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6374              		.loc 1 707 42 is_stmt 0 view .LVU2182
GAS LISTING /tmp/ccNeV1of.s 			page 182


 6375 25e8 4489F9   		mov	ecx, r15d	# tmp1278, _12
 6376              	.LVL332:
 6377              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6378              		.loc 1 707 63 view .LVU2183
 6379 25eb 4189D0   		mov	r8d, edx	# tmp1279, _18
 6380              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6381              		.loc 1 707 42 view .LVU2184
 6382 25ee C4E2F3F7 		shrx	rcx, QWORD PTR [rax], rcx	# tmp1056, MEM[base: _743, offset: 0B], tmp1278
 6382      08
 6383              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6384              		.loc 1 707 63 view .LVU2185
 6385 25f3 C462B9F7 		shlx	r9, rsi, r8	# tmp1057, source1, tmp1279
 6385      CE
 6386              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6387              		.loc 1 707 52 view .LVU2186
 6388 25f8 4C09C9   		or	rcx, r9	# tmp1058, tmp1057
 6389              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6390              		.loc 1 707 42 view .LVU2187
 6391 25fb 4589FA   		mov	r10d, r15d	# _12, shift
 6392              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6393              		.loc 1 707 63 view .LVU2188
 6394 25fe 4189D6   		mov	r14d, edx	# _18, shift_flipped
 6395              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6396              		.loc 1 707 52 view .LVU2189
 6397 2601 48890CFB 		mov	QWORD PTR [rbx+rdi*8], rcx	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 6398              	.LVL333:
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6399              		.loc 1 708 9 is_stmt 1 view .LVU2190
 709:sieve_extend.c ****         copy_word += 2;
 6400              		.loc 1 709 9 view .LVU2191
 6401              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6402              		.loc 1 709 42 is_stmt 0 view .LVU2192
 6403 2605 C4E2ABF7 		shrx	rsi, rsi, r10	# tmp1061, source1, tmp1281
 6403      F6
 6404              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6405              		.loc 1 709 63 view .LVU2193
 6406 260a C4E289F7 		shlx	rcx, QWORD PTR 16[rax], r14	# tmp1060, MEM[base: _743, offset: 16B], tmp1280
 6406      4810
 6407              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6408              		.loc 1 709 52 view .LVU2194
 6409 2610 4809CE   		or	rsi, rcx	# tmp1062, tmp1060
 6410 2613 488974FB 		mov	QWORD PTR 8[rbx+rdi*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset:
 6410      08
 6411              	.LVL334:
 710:sieve_extend.c ****         source_word += 2;
 6412              		.loc 1 710 9 is_stmt 1 view .LVU2195
 6413 2618 4883C010 		add	rax, 16	# ivtmp.370,
GAS LISTING /tmp/ccNeV1of.s 			page 183


 6414              	# sieve_extend.c:710:         copy_word += 2;
 710:sieve_extend.c ****         source_word += 2;
 6415              		.loc 1 710 19 is_stmt 0 view .LVU2196
 6416 261c 4883C702 		add	rdi, 2	# copy_word,
 711:sieve_extend.c ****         distance += 2;
 6417              		.loc 1 711 9 is_stmt 1 view .LVU2197
 712:sieve_extend.c ****     }
 6418              		.loc 1 712 9 view .LVU2198
 712:sieve_extend.c ****     }
 6419              		.loc 1 712 9 is_stmt 0 view .LVU2199
 6420              	.LBE387:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6421              		.loc 1 704 11 is_stmt 1 view .LVU2200
 6422              	.LVL335:
 6423              	.L475:
 6424              	.LBB388:
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6425              		.loc 1 705 9 view .LVU2201
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6426              		.loc 1 706 9 view .LVU2202
 6427              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6428              		.loc 1 706 19 is_stmt 0 view .LVU2203
 6429 2620 488B7008 		mov	rsi, QWORD PTR 8[rax]	# source1, MEM[base: _743, offset: 8B]
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6430              		.loc 1 707 9 is_stmt 1 view .LVU2204
 6431              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6432              		.loc 1 707 42 is_stmt 0 view .LVU2205
 6433 2624 4589F8   		mov	r8d, r15d	# tmp1282, _12
 6434              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6435              		.loc 1 707 63 view .LVU2206
 6436 2627 4189D1   		mov	r9d, edx	# tmp1283, _18
 6437              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6438              		.loc 1 707 42 view .LVU2207
 6439 262a C4E2BBF7 		shrx	rcx, QWORD PTR [rax], r8	# tmp1066, MEM[base: _743, offset: 0B], tmp1282
 6439      08
 6440              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6441              		.loc 1 707 63 view .LVU2208
 6442 262f C462B1F7 		shlx	r8, rsi, r9	# tmp1067, source1, tmp1283
 6442      C6
 6443              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6444              		.loc 1 707 52 view .LVU2209
 6445 2634 4C09C1   		or	rcx, r8	# tmp1068, tmp1067
 6446              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6447              		.loc 1 707 42 view .LVU2210
 6448 2637 4589FA   		mov	r10d, r15d	# _12, shift
 6449              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6450              		.loc 1 707 63 view .LVU2211
 6451 263a 4189D6   		mov	r14d, edx	# _18, shift_flipped
 6452              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
GAS LISTING /tmp/ccNeV1of.s 			page 184


 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6453              		.loc 1 707 52 view .LVU2212
 6454 263d 48890CFB 		mov	QWORD PTR [rbx+rdi*8], rcx	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 6455              	.LVL336:
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6456              		.loc 1 708 9 is_stmt 1 view .LVU2213
 709:sieve_extend.c ****         copy_word += 2;
 6457              		.loc 1 709 9 view .LVU2214
 6458              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6459              		.loc 1 709 42 is_stmt 0 view .LVU2215
 6460 2641 C4E2ABF7 		shrx	rsi, rsi, r10	# tmp1071, source1, tmp1285
 6460      F6
 6461              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6462              		.loc 1 709 63 view .LVU2216
 6463 2646 C4E289F7 		shlx	rcx, QWORD PTR 16[rax], r14	# tmp1070, MEM[base: _743, offset: 16B], tmp1284
 6463      4810
 6464              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6465              		.loc 1 709 52 view .LVU2217
 6466 264c 4809CE   		or	rsi, rcx	# tmp1072, tmp1070
 6467 264f 488974FB 		mov	QWORD PTR 8[rbx+rdi*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset:
 6467      08
 6468              	.LVL337:
 710:sieve_extend.c ****         source_word += 2;
 6469              		.loc 1 710 9 is_stmt 1 view .LVU2218
 6470              	# sieve_extend.c:710:         copy_word += 2;
 710:sieve_extend.c ****         source_word += 2;
 6471              		.loc 1 710 19 is_stmt 0 view .LVU2219
 6472 2654 4883C702 		add	rdi, 2	# copy_word,
 711:sieve_extend.c ****         distance += 2;
 6473              		.loc 1 711 9 is_stmt 1 view .LVU2220
 712:sieve_extend.c ****     }
 6474              		.loc 1 712 9 view .LVU2221
 6475 2658 4883C010 		add	rax, 16	# ivtmp.370,
 6476              	.LBE388:
 6477              	# sieve_extend.c:704:     while (copy_word < fast_loop_stop_word) {
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6478              		.loc 1 704 11 is_stmt 0 view .LVU2222
 6479 265c 48397C24 		cmp	QWORD PTR 48[rsp], rdi	# %sfp, copy_word
 6479      30
 6480 2661 4D8D143B 		lea	r10, [r11+rdi]	# distance,
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6481              		.loc 1 704 11 is_stmt 1 view .LVU2223
 6482 2665 0F8613F6 		jbe	.L358	#,
 6482      FFFF
 6483              	.LVL338:
 6484              	.L516:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6485              		.loc 1 704 11 is_stmt 0 view .LVU2224
 6486 266b 4489F9   		mov	ecx, r15d	# _12, shift
 6487 266e 4189D0   		mov	r8d, edx	# _18, shift_flipped
 6488 2671 4C896424 		mov	QWORD PTR 56[rsp], r12	# %sfp, tmp.302
 6488      38
 6489              	.LVL339:
 6490              	.L357:
GAS LISTING /tmp/ccNeV1of.s 			page 185


 6491              	.LBB389:
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6492              		.loc 1 705 9 is_stmt 1 view .LVU2225
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6493              		.loc 1 706 9 view .LVU2226
 6494              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6495              		.loc 1 706 19 is_stmt 0 view .LVU2227
 6496 2676 4C8B6008 		mov	r12, QWORD PTR 8[rax]	# source1, MEM[base: _743, offset: 8B]
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6497              		.loc 1 707 9 is_stmt 1 view .LVU2228
 6498              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6499              		.loc 1 707 42 is_stmt 0 view .LVU2229
 6500 267a C462F3F7 		shrx	r9, QWORD PTR [rax], rcx	# tmp878, MEM[base: _743, offset: 0B], _12
 6500      08
 6501              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6502              		.loc 1 707 63 view .LVU2230
 6503 267f C442B9F7 		shlx	r14, r12, r8	# tmp879, source1, _18
 6503      F4
 6504              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6505              		.loc 1 707 52 view .LVU2231
 6506 2684 4D09F1   		or	r9, r14	# tmp880, tmp879
 6507              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6508              		.loc 1 709 42 view .LVU2232
 6509 2687 C442F3F7 		shrx	r10, r12, rcx	# tmp883, source1, _12
 6509      D4
 6510              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6511              		.loc 1 707 52 view .LVU2233
 6512 268c 4C890CFB 		mov	QWORD PTR [rbx+rdi*8], r9	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 0
 6513              	.LVL340:
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6514              		.loc 1 708 9 is_stmt 1 view .LVU2234
 709:sieve_extend.c ****         copy_word += 2;
 6515              		.loc 1 709 9 view .LVU2235
 6516              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6517              		.loc 1 709 63 is_stmt 0 view .LVU2236
 6518 2690 C4E2B9F7 		shlx	rsi, QWORD PTR 16[rax], r8	# tmp882, MEM[base: _743, offset: 16B], _18
 6518      7010
 6519              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6520              		.loc 1 709 52 view .LVU2237
 6521 2696 4C09D6   		or	rsi, r10	# tmp884, tmp883
 6522 2699 488974FB 		mov	QWORD PTR 8[rbx+rdi*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset:
 6522      08
 6523              	.LVL341:
 710:sieve_extend.c ****         source_word += 2;
 6524              		.loc 1 710 9 is_stmt 1 view .LVU2238
 6525              	# sieve_extend.c:710:         copy_word += 2;
 710:sieve_extend.c ****         source_word += 2;
 6526              		.loc 1 710 19 is_stmt 0 view .LVU2239
 6527 269e 4C8D6702 		lea	r12, 2[rdi]	# tmp807,
GAS LISTING /tmp/ccNeV1of.s 			page 186


 711:sieve_extend.c ****         distance += 2;
 6528              		.loc 1 711 9 is_stmt 1 view .LVU2240
 712:sieve_extend.c ****     }
 6529              		.loc 1 712 9 view .LVU2241
 712:sieve_extend.c ****     }
 6530              		.loc 1 712 9 is_stmt 0 view .LVU2242
 6531              	.LBE389:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6532              		.loc 1 704 11 is_stmt 1 view .LVU2243
 6533              	.LBB390:
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6534              		.loc 1 705 9 view .LVU2244
 6535              	.LVL342:
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6536              		.loc 1 706 9 view .LVU2245
 6537              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6538              		.loc 1 706 19 is_stmt 0 view .LVU2246
 6539 26a2 4C8B4818 		mov	r9, QWORD PTR 24[rax]	# source1, MEM[base: _743, offset: 8B]
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6540              		.loc 1 707 9 is_stmt 1 view .LVU2247
 6541              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6542              		.loc 1 707 42 is_stmt 0 view .LVU2248
 6543 26a6 C4E2F3F7 		shrx	rsi, QWORD PTR 16[rax], rcx	# tmp890, MEM[base: _743, offset: 0B], _12
 6543      7010
 6544              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6545              		.loc 1 707 63 view .LVU2249
 6546 26ac C442B9F7 		shlx	r14, r9, r8	# tmp891, source1, _18
 6546      F1
 6547              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6548              		.loc 1 707 52 view .LVU2250
 6549 26b1 4C09F6   		or	rsi, r14	# tmp892, tmp891
 6550 26b4 4A8934E3 		mov	QWORD PTR [rbx+r12*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 6551              	.LVL343:
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6552              		.loc 1 708 9 is_stmt 1 view .LVU2251
 709:sieve_extend.c ****         copy_word += 2;
 6553              		.loc 1 709 9 view .LVU2252
 6554              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6555              		.loc 1 709 42 is_stmt 0 view .LVU2253
 6556 26b8 C442F3F7 		shrx	r9, r9, rcx	# tmp895, source1, _12
 6556      C9
 6557              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6558              		.loc 1 709 63 view .LVU2254
 6559 26bd 4C8B5020 		mov	r10, QWORD PTR 32[rax]	# MEM[base: _743, offset: 16B], MEM[base: _743, offset: 16B]
 6560 26c1 C4C2B9F7 		shlx	rsi, r10, r8	# tmp894, MEM[base: _743, offset: 16B], _18
 6560      F2
 6561              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6562              		.loc 1 709 52 view .LVU2255
 6563 26c6 4909F1   		or	r9, rsi	# tmp896, tmp894
 6564 26c9 4883C040 		add	rax, 64	# ivtmp.370,
GAS LISTING /tmp/ccNeV1of.s 			page 187


 6565 26cd 4E894CE3 		mov	QWORD PTR 8[rbx+r12*8], r9	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 6565      08
 6566              	.LVL344:
 710:sieve_extend.c ****         source_word += 2;
 6567              		.loc 1 710 9 is_stmt 1 view .LVU2256
 6568              	# sieve_extend.c:710:         copy_word += 2;
 710:sieve_extend.c ****         source_word += 2;
 6569              		.loc 1 710 19 is_stmt 0 view .LVU2257
 6570 26d2 4C8D6704 		lea	r12, 4[rdi]	# copy_word,
 711:sieve_extend.c ****         distance += 2;
 6571              		.loc 1 711 9 is_stmt 1 view .LVU2258
 712:sieve_extend.c ****     }
 6572              		.loc 1 712 9 view .LVU2259
 712:sieve_extend.c ****     }
 6573              		.loc 1 712 9 is_stmt 0 view .LVU2260
 6574              	.LBE390:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6575              		.loc 1 704 11 is_stmt 1 view .LVU2261
 6576              	.LBB391:
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6577              		.loc 1 705 9 view .LVU2262
 6578              	.LVL345:
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6579              		.loc 1 706 9 view .LVU2263
 6580              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6581              		.loc 1 706 19 is_stmt 0 view .LVU2264
 6582 26d6 4C8B50E8 		mov	r10, QWORD PTR -24[rax]	# source1, MEM[base: _743, offset: 8B]
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6583              		.loc 1 707 9 is_stmt 1 view .LVU2265
 6584              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6585              		.loc 1 707 42 is_stmt 0 view .LVU2266
 6586 26da C4E2F3F7 		shrx	rsi, QWORD PTR -32[rax], rcx	# tmp902, MEM[base: _743, offset: 0B], _12
 6586      70E0
 6587              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6588              		.loc 1 707 63 view .LVU2267
 6589 26e0 C442B9F7 		shlx	r14, r10, r8	# tmp903, source1, _18
 6589      F2
 6590              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6591              		.loc 1 707 52 view .LVU2268
 6592 26e5 4C09F6   		or	rsi, r14	# tmp904, tmp903
 6593 26e8 4A8934E3 		mov	QWORD PTR [rbx+r12*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 6594              	.LVL346:
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6595              		.loc 1 708 9 is_stmt 1 view .LVU2269
 709:sieve_extend.c ****         copy_word += 2;
 6596              		.loc 1 709 9 view .LVU2270
 6597              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6598              		.loc 1 709 42 is_stmt 0 view .LVU2271
 6599 26ec C442F3F7 		shrx	r10, r10, rcx	# tmp907, source1, _12
 6599      D2
 6600              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
GAS LISTING /tmp/ccNeV1of.s 			page 188


 6601              		.loc 1 709 63 view .LVU2272
 6602 26f1 4C8B48F0 		mov	r9, QWORD PTR -16[rax]	# MEM[base: _743, offset: 16B], MEM[base: _743, offset: 16B]
 6603 26f5 C4C2B9F7 		shlx	rsi, r9, r8	# tmp906, MEM[base: _743, offset: 16B], _18
 6603      F1
 6604              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6605              		.loc 1 709 52 view .LVU2273
 6606 26fa 4909F2   		or	r10, rsi	# tmp908, tmp906
 6607 26fd 4E8954E3 		mov	QWORD PTR 8[rbx+r12*8], r10	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset:
 6607      08
 6608              	.LVL347:
 710:sieve_extend.c ****         source_word += 2;
 6609              		.loc 1 710 9 is_stmt 1 view .LVU2274
 6610              	# sieve_extend.c:710:         copy_word += 2;
 710:sieve_extend.c ****         source_word += 2;
 6611              		.loc 1 710 19 is_stmt 0 view .LVU2275
 6612 2702 4C8D6706 		lea	r12, 6[rdi]	# copy_word,
 711:sieve_extend.c ****         distance += 2;
 6613              		.loc 1 711 9 is_stmt 1 view .LVU2276
 712:sieve_extend.c ****     }
 6614              		.loc 1 712 9 view .LVU2277
 712:sieve_extend.c ****     }
 6615              		.loc 1 712 9 is_stmt 0 view .LVU2278
 6616              	.LBE391:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6617              		.loc 1 704 11 is_stmt 1 view .LVU2279
 6618              	.LBB392:
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6619              		.loc 1 705 9 view .LVU2280
 6620              	.LVL348:
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6621              		.loc 1 706 9 view .LVU2281
 6622              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6623              		.loc 1 706 19 is_stmt 0 view .LVU2282
 6624 2706 4C8B48F8 		mov	r9, QWORD PTR -8[rax]	# source1, MEM[base: _743, offset: 8B]
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6625              		.loc 1 707 9 is_stmt 1 view .LVU2283
 6626              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6627              		.loc 1 707 42 is_stmt 0 view .LVU2284
 6628 270a C4E2F3F7 		shrx	rsi, QWORD PTR -16[rax], rcx	# tmp914, MEM[base: _743, offset: 0B], _12
 6628      70F0
 6629              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6630              		.loc 1 707 63 view .LVU2285
 6631 2710 C442B9F7 		shlx	r14, r9, r8	# tmp915, source1, _18
 6631      F1
 6632              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6633              		.loc 1 707 52 view .LVU2286
 6634 2715 4C09F6   		or	rsi, r14	# tmp916, tmp915
 6635 2718 4A8934E3 		mov	QWORD PTR [rbx+r12*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 6636              	.LVL349:
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6637              		.loc 1 708 9 is_stmt 1 view .LVU2287
 709:sieve_extend.c ****         copy_word += 2;
GAS LISTING /tmp/ccNeV1of.s 			page 189


 6638              		.loc 1 709 9 view .LVU2288
 6639              	# sieve_extend.c:710:         copy_word += 2;
 710:sieve_extend.c ****         source_word += 2;
 6640              		.loc 1 710 19 is_stmt 0 view .LVU2289
 6641 271c 4883C708 		add	rdi, 8	# copy_word,
 6642              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6643              		.loc 1 709 42 view .LVU2290
 6644 2720 C442F3F7 		shrx	r9, r9, rcx	# tmp919, source1, _12
 6644      C9
 6645              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6646              		.loc 1 709 63 view .LVU2291
 6647 2725 4C8B10   		mov	r10, QWORD PTR [rax]	# MEM[base: _743, offset: 16B], MEM[base: _743, offset: 16B]
 6648 2728 C4C2B9F7 		shlx	rsi, r10, r8	# tmp918, MEM[base: _743, offset: 16B], _18
 6648      F2
 6649              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6650              		.loc 1 709 52 view .LVU2292
 6651 272d 4909F1   		or	r9, rsi	# tmp920, tmp918
 6652              	.LBE392:
 6653              	# sieve_extend.c:704:     while (copy_word < fast_loop_stop_word) {
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6654              		.loc 1 704 11 view .LVU2293
 6655 2730 48397C24 		cmp	QWORD PTR 48[rsp], rdi	# %sfp, copy_word
 6655      30
 6656 2735 4D8D143B 		lea	r10, [r11+rdi]	# distance,
 6657              	.LBB393:
 6658              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6659              		.loc 1 709 52 view .LVU2294
 6660 2739 4E894CE3 		mov	QWORD PTR 8[rbx+r12*8], r9	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 6660      08
 6661              	.LVL350:
 710:sieve_extend.c ****         source_word += 2;
 6662              		.loc 1 710 9 is_stmt 1 view .LVU2295
 711:sieve_extend.c ****         distance += 2;
 6663              		.loc 1 711 9 view .LVU2296
 712:sieve_extend.c ****     }
 6664              		.loc 1 712 9 view .LVU2297
 712:sieve_extend.c ****     }
 6665              		.loc 1 712 9 is_stmt 0 view .LVU2298
 6666              	.LBE393:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6667              		.loc 1 704 11 is_stmt 1 view .LVU2299
 6668 273e 0F8732FF 		ja	.L357	#,
 6668      FFFF
 6669 2744 4C8B6424 		mov	r12, QWORD PTR 56[rsp]	# tmp.302, %sfp
 6669      38
 6670 2749 E930F5FF 		jmp	.L358	#
 6670      FF
 6671              	.LVL351:
 6672 274e 6690     		.p2align 4,,7
 6673              		.p2align 3
 6674              	.L375:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6675              		.loc 1 704 11 is_stmt 0 view .LVU2300
GAS LISTING /tmp/ccNeV1of.s 			page 190


 6676              	.LBE396:
 6677              	.LBE415:
 6678              	# sieve_extend.c:818:     for (;copy_word <= aligned_copy_word; copy_word++,source_word++) {
 818:sieve_extend.c ****         bitarray[copy_word] = (bitarray[source_word  ] >> shift) | (bitarray[source_word+1 ] << shi
 6679              		.loc 1 818 5 view .LVU2301
 6680 2750 4C89E9   		mov	rcx, r13	# tmp.290, tmp.303
 6681 2753 E994F9FF 		jmp	.L359	#
 6681      FF
 6682              	.LVL352:
 6683              	.L529:
 6684              	.LBB416:
 6685              	.LBB397:
 6686              	.LBB394:
 705:sieve_extend.c ****         bitword_t source1 = bitarray[source_word+1];
 6687              		.loc 1 705 9 is_stmt 1 view .LVU2302
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6688              		.loc 1 706 9 view .LVU2303
 6689              	# sieve_extend.c:706:         bitword_t source1 = bitarray[source_word+1];
 706:sieve_extend.c ****         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flipped);
 6690              		.loc 1 706 19 is_stmt 0 view .LVU2304
 6691 2758 4C8B4808 		mov	r9, QWORD PTR 8[rax]	# source1, MEM[base: _743, offset: 8B]
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6692              		.loc 1 707 9 is_stmt 1 view .LVU2305
 6693              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6694              		.loc 1 707 42 is_stmt 0 view .LVU2306
 6695 275c 4589F8   		mov	r8d, r15d	# tmp1274, _12
 6696 275f C4E2BBF7 		shrx	rsi, QWORD PTR [rax], r8	# tmp1046, MEM[base: _743, offset: 0B], tmp1274
 6696      30
 6697              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6698              		.loc 1 707 63 view .LVU2307
 6699 2764 4189D0   		mov	r8d, edx	# tmp1275, _18
 6700 2767 C442B9F7 		shlx	r8, r9, r8	# tmp1047, source1, tmp1275
 6700      C1
 6701              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6702              		.loc 1 707 52 view .LVU2308
 6703 276c 4C09C6   		or	rsi, r8	# tmp1048, tmp1047
 6704 276f 488934FB 		mov	QWORD PTR [rbx+rdi*8], rsi	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 6705              	.LVL353:
 708:sieve_extend.c ****         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flipped);
 6706              		.loc 1 708 9 is_stmt 1 view .LVU2309
 709:sieve_extend.c ****         copy_word += 2;
 6707              		.loc 1 709 9 view .LVU2310
 6708              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6709              		.loc 1 707 42 is_stmt 0 view .LVU2311
 6710 2773 4589FA   		mov	r10d, r15d	# _12, shift
 6711              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6712              		.loc 1 709 63 view .LVU2312
 6713 2776 488B4010 		mov	rax, QWORD PTR 16[rax]	# MEM[base: _743, offset: 16B], MEM[base: _743, offset: 16B]
 6714              	# sieve_extend.c:707:         bitarray[copy_word  ] = (source0 >> shift) | (source1 << shift_flippe
 707:sieve_extend.c ****         bitword_t source2 = bitarray[source_word+2];
 6715              		.loc 1 707 63 view .LVU2313
 6716 277a 4189D6   		mov	r14d, edx	# _18, shift_flipped
GAS LISTING /tmp/ccNeV1of.s 			page 191


 6717              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6718              		.loc 1 709 42 view .LVU2314
 6719 277d C442ABF7 		shrx	r9, r9, r10	# tmp1051, source1, tmp1277
 6719      C9
 6720              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6721              		.loc 1 709 63 view .LVU2315
 6722 2782 C46289F7 		shlx	r8, rax, r14	# tmp1050, MEM[base: _743, offset: 16B], tmp1276
 6722      C0
 6723              	# sieve_extend.c:709:         bitarray[copy_word+1] = (source1 >> shift) | (source2 << shift_flippe
 709:sieve_extend.c ****         copy_word += 2;
 6724              		.loc 1 709 52 view .LVU2316
 6725 2787 4D09C8   		or	r8, r9	# tmp1052, tmp1051
 6726 278a 488D4120 		lea	rax, 32[rcx]	# ivtmp.370,
 6727 278e 4C8944FB 		mov	QWORD PTR 8[rbx+rdi*8], r8	# MEM[base: bitarray_67(D), index: copy_word_362, step: 8, offset: 
 6727      08
 6728              	.LVL354:
 710:sieve_extend.c ****         source_word += 2;
 6729              		.loc 1 710 9 is_stmt 1 view .LVU2317
 6730              	# sieve_extend.c:710:         copy_word += 2;
 710:sieve_extend.c ****         source_word += 2;
 6731              		.loc 1 710 19 is_stmt 0 view .LVU2318
 6732 2793 498D7D04 		lea	rdi, 4[r13]	# copy_word,
 711:sieve_extend.c ****         distance += 2;
 6733              		.loc 1 711 9 is_stmt 1 view .LVU2319
 712:sieve_extend.c ****     }
 6734              		.loc 1 712 9 view .LVU2320
 712:sieve_extend.c ****     }
 6735              		.loc 1 712 9 is_stmt 0 view .LVU2321
 6736              	.LBE394:
 704:sieve_extend.c ****         bitword_t source0 = bitarray[source_word  ];
 6737              		.loc 1 704 11 is_stmt 1 view .LVU2322
 6738 2797 E948FEFF 		jmp	.L476	#
 6738      FF
 6739              	.LBE397:
 6740              	.LBE416:
 6741              		.cfi_endproc
 6742              	.LFE75:
 6744              		.section	.rodata.str1.1,"aMS",@progbits,1
 6745              	.LC4:
 6746 0000 25336A75 		.string	"%3ju "
 6746      2000
 6747              	.LC5:
 6748 0006 0A466F75 		.string	"\nFound %ju primes until %ju\n"
 6748      6E642025 
 6748      6A752070 
 6748      72696D65 
 6748      7320756E 
 6749              		.text
 6750 279c 0F1F4000 		.p2align 4
 6752              	show_primes.isra.0:
 6753              	.LVL355:
 6754              	.LFB100:
 969:sieve_extend.c ****     counter_t primeCount = 1;    // We already have 2
 6755              		.loc 1 969 13 view -0
 6756              		.cfi_startproc
GAS LISTING /tmp/ccNeV1of.s 			page 192


 6757              	.LBB417:
 971:sieve_extend.c ****         primeCount++;
 6758              		.loc 1 971 30 view .LVU2324
 6759              	.LBE417:
 6760              	# sieve_extend.c:969: static void show_primes(struct sieve_t *sieve, counter_t maxFactor) {
 969:sieve_extend.c ****     counter_t primeCount = 1;    // We already have 2
 6761              		.loc 1 969 13 is_stmt 0 view .LVU2325
 6762 27a0 4157     		push	r15	#
 6763              		.cfi_def_cfa_offset 16
 6764              		.cfi_offset 15, -16
 6765 27a2 4156     		push	r14	#
 6766              		.cfi_def_cfa_offset 24
 6767              		.cfi_offset 14, -24
 6768 27a4 4155     		push	r13	#
 6769              		.cfi_def_cfa_offset 32
 6770              		.cfi_offset 13, -32
 6771 27a6 4154     		push	r12	#
 6772              		.cfi_def_cfa_offset 40
 6773              		.cfi_offset 12, -40
 6774 27a8 4989F4   		mov	r12, rsi	# ISRA.76, tmp168
 6775 27ab 55       		push	rbp	#
 6776              		.cfi_def_cfa_offset 48
 6777              		.cfi_offset 6, -48
 6778 27ac 53       		push	rbx	#
 6779              		.cfi_def_cfa_offset 56
 6780              		.cfi_offset 3, -56
 6781 27ad 488D6424 		lea	rsp, -8[rsp]	#,
 6781      F8
 6782              		.cfi_def_cfa_offset 64
 6783              	.LBB434:
 6784              	# sieve_extend.c:971:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 971:sieve_extend.c ****         primeCount++;
 6785              		.loc 1 971 44 view .LVU2326
 6786 27b2 488B36   		mov	rsi, QWORD PTR [rsi]	# prephitmp_86, *ISRA.76_32(D)
 6787              	# sieve_extend.c:971:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 971:sieve_extend.c ****         primeCount++;
 6788              		.loc 1 971 5 view .LVU2327
 6789 27b5 4883FE01 		cmp	rsi, 1	# prephitmp_86,
 6790 27b9 0F867501 		jbe	.L537	#,
 6790      0000
 6791              	# sieve_extend.c:973:         if (factor < maxFactor/2) {
 973:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 6792              		.loc 1 973 31 view .LVU2328
 6793 27bf 48D1EA   		shr	rdx	# maxFactor
 6794              	.LVL356:
 973:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 6795              		.loc 1 973 31 view .LVU2329
 6796 27c2 4989FD   		mov	r13, rdi	# ISRA.75, tmp167
 6797              	# sieve_extend.c:971:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 971:sieve_extend.c ****         primeCount++;
 6798              		.loc 1 971 20 view .LVU2330
 6799 27c5 BB010000 		mov	ebx, 1	# factor,
 6799      00
 6800              	# sieve_extend.c:973:         if (factor < maxFactor/2) {
 973:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 6801              		.loc 1 973 31 view .LVU2331
 6802 27ca 4889D5   		mov	rbp, rdx	# _4, maxFactor
GAS LISTING /tmp/ccNeV1of.s 			page 193


 6803              	.LBE434:
 6804              	# sieve_extend.c:970:     counter_t primeCount = 1;    // We already have 2
 970:sieve_extend.c ****     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(sieve->bitarray, factor+
 6805              		.loc 1 970 15 view .LVU2332
 6806 27cd 41BF0100 		mov	r15d, 1	# primeCount,
 6806      0000
 6807              	.LBB435:
 6808              	.LBB418:
 6809              	.LBB419:
 6810              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 6811              		.file 3 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2020 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <https://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _BITS_STDIO2_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #define _BITS_STDIO2_H 1
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __gnuc_va_list __ap) __THROW;
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
GAS LISTING /tmp/ccNeV1of.s 			page 194


  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 __gnuc_va_list __ap))
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_ISOC99 || defined __USE_UNIX98
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __gnuc_va_list __ap) __THROW;
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, __gnuc_va_list __ap))
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, __gnuc_va_list __ap);
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  __gnuc_va_list __ap);
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
GAS LISTING /tmp/ccNeV1of.s 			page 195


 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 106:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 107:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
 6812              		.loc 3 107 10 view .LVU2333
 6813 27d3 49BECDCC 		movabs	r14, -3689348814741910323	# tmp136,
 6813      CCCCCCCC 
 6813      CCCC
 6814              	.LVL357:
 6815 27dd 0F1F00   		.p2align 4
 6816              		.p2align 3
 6817              	.L536:
 6818              		.loc 3 107 10 view .LVU2334
 6819              	.LBE419:
 6820              	.LBE418:
 972:sieve_extend.c ****         if (factor < maxFactor/2) {
 6821              		.loc 1 972 9 is_stmt 1 view .LVU2335
 6822              	# sieve_extend.c:972:         primeCount++;
 972:sieve_extend.c ****         if (factor < maxFactor/2) {
 6823              		.loc 1 972 19 is_stmt 0 view .LVU2336
 6824 27e0 4983C701 		add	r15, 1	# primeCount,
 6825              	.LVL358:
 973:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 6826              		.loc 1 973 9 is_stmt 1 view .LVU2337
 6827              	# sieve_extend.c:973:         if (factor < maxFactor/2) {
 973:sieve_extend.c ****             printf("%3ju ",(uintmax_t)factor*2+1);
 6828              		.loc 1 973 12 is_stmt 0 view .LVU2338
 6829 27e4 4839DD   		cmp	rbp, rbx	# _4, factor
 6830 27e7 0F87FB00 		ja	.L560	#,
 6830      0000
 6831              	.L532:
 971:sieve_extend.c ****         primeCount++;
 6832              		.loc 1 971 52 is_stmt 1 view .LVU2339
 6833              	.LVL359:
 6834              	# sieve_extend.c:971:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 971:sieve_extend.c ****         primeCount++;
 6835              		.loc 1 971 61 is_stmt 0 view .LVU2340
 6836 27ed 4D8B4500 		mov	r8, QWORD PTR 0[r13]	# _11, *ISRA.75_33(D)
 6837 27f1 4883C301 		add	rbx, 1	# factor,
 6838              	.LVL360:
 6839              	.L559:
 6840              	.LBB424:
 6841              	.LBI424:
 124:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 6842              		.loc 1 124 25 is_stmt 1 view .LVU2341
 6843              	.LBB425:
 125:sieve_extend.c ****     return index;
 6844              		.loc 1 125 5 view .LVU2342
 125:sieve_extend.c ****     return index;
 6845              		.loc 1 125 11 view .LVU2343
 6846              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6847              		.loc 1 125 21 is_stmt 0 view .LVU2344
 6848 27f5 4889D9   		mov	rcx, rbx	# tmp124, factor
 6849 27f8 48C1E906 		shr	rcx, 6	# tmp124,
 6850              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
GAS LISTING /tmp/ccNeV1of.s 			page 196


 6851              		.loc 1 125 12 view .LVU2345
 6852 27fc 4D8B0CC8 		mov	r9, QWORD PTR [r8+rcx*8]	# *_39,* _11
 6853              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6854              		.loc 1 125 11 view .LVU2346
 6855 2800 490FA3D9 		bt	r9, rbx	# *_39, factor
 6856 2804 0F83A600 		jnc	.L534	#,
 6856      0000
 125:sieve_extend.c ****     return index;
 6857              		.loc 1 125 58 is_stmt 1 view .LVU2347
 6858              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6859              		.loc 1 125 63 is_stmt 0 view .LVU2348
 6860 280a 4C8D5301 		lea	r10, 1[rbx]	# tmp138,
 6861              	.LVL361:
 6862              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6863              		.loc 1 125 21 view .LVU2349
 6864 280e 4D89D3   		mov	r11, r10	# tmp129, factor
 6865              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6866              		.loc 1 125 63 view .LVU2350
 6867 2811 4C89D3   		mov	rbx, r10	# factor, tmp138
 125:sieve_extend.c ****     return index;
 6868              		.loc 1 125 11 is_stmt 1 view .LVU2351
 6869              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6870              		.loc 1 125 21 is_stmt 0 view .LVU2352
 6871 2814 49C1EB06 		shr	r11, 6	# tmp129,
 6872              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6873              		.loc 1 125 12 view .LVU2353
 6874 2818 4B8B04D8 		mov	rax, QWORD PTR [r8+r11*8]	# *_16, *_16
 6875              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6876              		.loc 1 125 11 view .LVU2354
 6877 281c 4C0FA3D0 		bt	rax, r10	# *_16, factor
 6878 2820 0F838A00 		jnc	.L534	#,
 6878      0000
 125:sieve_extend.c ****     return index;
 6879              		.loc 1 125 58 is_stmt 1 view .LVU2355
 6880              	.LVL362:
 6881              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6882              		.loc 1 125 63 is_stmt 0 view .LVU2356
 6883 2826 4883C301 		add	rbx, 1	# factor,
 6884              	.LVL363:
 125:sieve_extend.c ****     return index;
 6885              		.loc 1 125 11 is_stmt 1 view .LVU2357
 6886              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6887              		.loc 1 125 21 is_stmt 0 view .LVU2358
 6888 282a 4889DA   		mov	rdx, rbx	# tmp139, factor
 6889 282d 48C1EA06 		shr	rdx, 6	# tmp139,
 6890              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6891              		.loc 1 125 12 view .LVU2359
GAS LISTING /tmp/ccNeV1of.s 			page 197


 6892 2831 498B3CD0 		mov	rdi, QWORD PTR [r8+rdx*8]	# *_16, *_16
 6893              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6894              		.loc 1 125 11 view .LVU2360
 6895 2835 480FA3DF 		bt	rdi, rbx	# *_16, factor
 6896 2839 7375     		jnc	.L534	#,
 125:sieve_extend.c ****     return index;
 6897              		.loc 1 125 58 is_stmt 1 view .LVU2361
 6898              	.LVL364:
 6899              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6900              		.loc 1 125 63 is_stmt 0 view .LVU2362
 6901 283b 498D5A02 		lea	rbx, 2[r10]	# factor,
 6902              	.LVL365:
 125:sieve_extend.c ****     return index;
 6903              		.loc 1 125 11 is_stmt 1 view .LVU2363
 6904              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6905              		.loc 1 125 21 is_stmt 0 view .LVU2364
 6906 283f 4889D9   		mov	rcx, rbx	# tmp143, factor
 6907 2842 48C1E906 		shr	rcx, 6	# tmp143,
 6908              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6909              		.loc 1 125 12 view .LVU2365
 6910 2846 4D8B0CC8 		mov	r9, QWORD PTR [r8+rcx*8]	# *_16, *_16
 6911              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6912              		.loc 1 125 11 view .LVU2366
 6913 284a 490FA3D9 		bt	r9, rbx	# *_16, factor
 6914 284e 7360     		jnc	.L534	#,
 125:sieve_extend.c ****     return index;
 6915              		.loc 1 125 58 is_stmt 1 view .LVU2367
 6916              	.LVL366:
 6917              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6918              		.loc 1 125 63 is_stmt 0 view .LVU2368
 6919 2850 498D5A03 		lea	rbx, 3[r10]	# factor,
 6920              	.LVL367:
 125:sieve_extend.c ****     return index;
 6921              		.loc 1 125 11 is_stmt 1 view .LVU2369
 6922              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6923              		.loc 1 125 21 is_stmt 0 view .LVU2370
 6924 2854 4989DB   		mov	r11, rbx	# tmp147, factor
 6925 2857 49C1EB06 		shr	r11, 6	# tmp147,
 6926              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6927              		.loc 1 125 12 view .LVU2371
 6928 285b 4B8B04D8 		mov	rax, QWORD PTR [r8+r11*8]	# *_16, *_16
 6929              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6930              		.loc 1 125 11 view .LVU2372
 6931 285f 480FA3D8 		bt	rax, rbx	# *_16, factor
 6932 2863 734B     		jnc	.L534	#,
 125:sieve_extend.c ****     return index;
 6933              		.loc 1 125 58 is_stmt 1 view .LVU2373
 6934              	.LVL368:
GAS LISTING /tmp/ccNeV1of.s 			page 198


 6935              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6936              		.loc 1 125 63 is_stmt 0 view .LVU2374
 6937 2865 498D5A04 		lea	rbx, 4[r10]	# factor,
 6938              	.LVL369:
 125:sieve_extend.c ****     return index;
 6939              		.loc 1 125 11 is_stmt 1 view .LVU2375
 6940              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6941              		.loc 1 125 21 is_stmt 0 view .LVU2376
 6942 2869 4889DA   		mov	rdx, rbx	# tmp151, factor
 6943 286c 48C1EA06 		shr	rdx, 6	# tmp151,
 6944              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6945              		.loc 1 125 12 view .LVU2377
 6946 2870 498B3CD0 		mov	rdi, QWORD PTR [r8+rdx*8]	# *_16, *_16
 6947              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6948              		.loc 1 125 11 view .LVU2378
 6949 2874 480FA3DF 		bt	rdi, rbx	# *_16, factor
 6950 2878 7336     		jnc	.L534	#,
 125:sieve_extend.c ****     return index;
 6951              		.loc 1 125 58 is_stmt 1 view .LVU2379
 6952              	.LVL370:
 6953              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6954              		.loc 1 125 63 is_stmt 0 view .LVU2380
 6955 287a 498D5A05 		lea	rbx, 5[r10]	# factor,
 6956              	.LVL371:
 125:sieve_extend.c ****     return index;
 6957              		.loc 1 125 11 is_stmt 1 view .LVU2381
 6958              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6959              		.loc 1 125 21 is_stmt 0 view .LVU2382
 6960 287e 4889D9   		mov	rcx, rbx	# tmp155, factor
 6961 2881 48C1E906 		shr	rcx, 6	# tmp155,
 6962              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6963              		.loc 1 125 12 view .LVU2383
 6964 2885 4D8B0CC8 		mov	r9, QWORD PTR [r8+rcx*8]	# *_16, *_16
 6965              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6966              		.loc 1 125 11 view .LVU2384
 6967 2889 490FA3D9 		bt	r9, rbx	# *_16, factor
 6968 288d 7321     		jnc	.L534	#,
 125:sieve_extend.c ****     return index;
 6969              		.loc 1 125 58 is_stmt 1 view .LVU2385
 6970              	.LVL372:
 6971              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6972              		.loc 1 125 63 is_stmt 0 view .LVU2386
 6973 288f 498D5A06 		lea	rbx, 6[r10]	# factor,
 6974              	.LVL373:
 125:sieve_extend.c ****     return index;
 6975              		.loc 1 125 11 is_stmt 1 view .LVU2387
 6976              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
GAS LISTING /tmp/ccNeV1of.s 			page 199


 6977              		.loc 1 125 21 is_stmt 0 view .LVU2388
 6978 2893 4989DB   		mov	r11, rbx	# tmp159, factor
 6979 2896 49C1EB06 		shr	r11, 6	# tmp159,
 6980              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6981              		.loc 1 125 12 view .LVU2389
 6982 289a 4B8B04D8 		mov	rax, QWORD PTR [r8+r11*8]	# *_16, *_16
 6983              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6984              		.loc 1 125 11 view .LVU2390
 6985 289e 480FA3D8 		bt	rax, rbx	# *_16, factor
 6986 28a2 730C     		jnc	.L534	#,
 125:sieve_extend.c ****     return index;
 6987              		.loc 1 125 58 is_stmt 1 view .LVU2391
 6988              	.LVL374:
 6989              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 6990              		.loc 1 125 63 is_stmt 0 view .LVU2392
 6991 28a4 498D5A07 		lea	rbx, 7[r10]	# factor,
 6992              	.LVL375:
 125:sieve_extend.c ****     return index;
 6993              		.loc 1 125 11 is_stmt 1 view .LVU2393
 6994 28a8 E948FFFF 		jmp	.L559	#
 6994      FF
 6995 28ad 0F1F00   		.p2align 4,,7
 6996              		.p2align 3
 6997              	.L534:
 6998              	.LVL376:
 125:sieve_extend.c ****     return index;
 6999              		.loc 1 125 11 is_stmt 0 view .LVU2394
 7000              	.LBE425:
 7001              	.LBE424:
 971:sieve_extend.c ****         primeCount++;
 7002              		.loc 1 971 30 is_stmt 1 view .LVU2395
 7003              	# sieve_extend.c:971:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 971:sieve_extend.c ****         primeCount++;
 7004              		.loc 1 971 5 is_stmt 0 view .LVU2396
 7005 28b0 4839F3   		cmp	rbx, rsi	# factor, prephitmp_86
 7006 28b3 0F8227FF 		jb	.L536	#,
 7006      FFFF
 7007              	.LVL377:
 7008              	.L531:
 971:sieve_extend.c ****         primeCount++;
 7009              		.loc 1 971 5 view .LVU2397
 7010              	.LBE435:
 978:sieve_extend.c **** }
 7011              		.loc 1 978 5 is_stmt 1 view .LVU2398
 7012              	.LBB436:
 7013              	.LBI436:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 7014              		.loc 3 105 1 view .LVU2399
 7015              	.LBB437:
 7016              		.loc 3 107 3 view .LVU2400
 7017              	.LBE437:
 7018              	.LBE436:
 7019              	# sieve_extend.c:979: }
 979:sieve_extend.c **** 
GAS LISTING /tmp/ccNeV1of.s 			page 200


 7020              		.loc 1 979 1 is_stmt 0 view .LVU2401
 7021 28b9 488D6424 		lea	rsp, 8[rsp]	#,
 7021      08
 7022              		.cfi_remember_state
 7023              		.cfi_def_cfa_offset 56
 7024              	.LBB441:
 7025              	.LBB438:
 7026              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 7027              		.loc 3 107 10 view .LVU2402
 7028 28be 4C89FA   		mov	rdx, r15	#, primeCount
 7029              	.LBE438:
 7030              	.LBE441:
 7031              	# sieve_extend.c:979: }
 979:sieve_extend.c **** 
 7032              		.loc 1 979 1 view .LVU2403
 7033 28c1 5B       		pop	rbx	#
 7034              		.cfi_def_cfa_offset 48
 7035              	# sieve_extend.c:978:     printf("\nFound %ju primes until %ju\n",(uintmax_t)primeCount, (uintmax_t
 978:sieve_extend.c **** }
 7036              		.loc 1 978 5 view .LVU2404
 7037 28c2 488D4C36 		lea	rcx, 1[rsi+rsi]	# tmp135,
 7037      01
 7038              	.LBB442:
 7039              	.LBB439:
 7040              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 7041              		.loc 3 107 10 view .LVU2405
 7042 28c7 BF010000 		mov	edi, 1	#,
 7042      00
 7043 28cc 31C0     		xor	eax, eax	#
 7044 28ce 488D3500 		lea	rsi, .LC5[rip]	#,
 7044      000000
 7045              	.LBE439:
 7046              	.LBE442:
 7047              	# sieve_extend.c:979: }
 979:sieve_extend.c **** 
 7048              		.loc 1 979 1 view .LVU2406
 7049 28d5 5D       		pop	rbp	#
 7050              		.cfi_def_cfa_offset 40
 7051 28d6 415C     		pop	r12	#
 7052              		.cfi_def_cfa_offset 32
 7053 28d8 415D     		pop	r13	#
 7054              		.cfi_def_cfa_offset 24
 7055 28da 415E     		pop	r14	#
 7056              		.cfi_def_cfa_offset 16
 7057 28dc 415F     		pop	r15	#
 7058              		.cfi_def_cfa_offset 8
 7059              	.LBB443:
 7060              	.LBB440:
 7061              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 7062              		.loc 3 107 10 view .LVU2407
 7063 28de E9000000 		jmp	__printf_chk@PLT	#
 7063      00
 7064              	.LVL378:
 7065              		.p2align 4,,7
 7066 28e3 0F1F4400 		.p2align 3
 7066      00
 7067              	.L560:
GAS LISTING /tmp/ccNeV1of.s 			page 201


 7068              		.cfi_restore_state
 7069              		.loc 3 107 10 view .LVU2408
 7070              	.LBE440:
 7071              	.LBE443:
 7072              	.LBB444:
 974:sieve_extend.c ****             if (primeCount % 10 == 0) printf("\n");
 7073              		.loc 1 974 13 is_stmt 1 view .LVU2409
 7074              	.LBB426:
 7075              	.LBI418:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 7076              		.loc 3 105 1 view .LVU2410
 7077              	.LBB420:
 7078              		.loc 3 107 3 view .LVU2411
 7079              	.LBE420:
 7080              	.LBE426:
 7081              	# sieve_extend.c:974:             printf("%3ju ",(uintmax_t)factor*2+1);
 974:sieve_extend.c ****             if (primeCount % 10 == 0) printf("\n");
 7082              		.loc 1 974 13 is_stmt 0 view .LVU2412
 7083 28e8 488D541B 		lea	rdx, 1[rbx+rbx]	# tmp111,
 7083      01
 7084              	.LBB427:
 7085              	.LBB421:
 7086              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 7087              		.loc 3 107 10 view .LVU2413
 7088 28ed BF010000 		mov	edi, 1	#,
 7088      00
 7089 28f2 31C0     		xor	eax, eax	#
 7090 28f4 488D3500 		lea	rsi, .LC4[rip]	#,
 7090      000000
 7091 28fb E8000000 		call	__printf_chk@PLT	#
 7091      00
 7092              	.LVL379:
 7093              		.loc 3 107 10 view .LVU2414
 7094              	.LBE421:
 7095              	.LBE427:
 975:sieve_extend.c ****         }
 7096              		.loc 1 975 13 is_stmt 1 view .LVU2415
 7097              	.LBB428:
 7098              	.LBB422:
 7099              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 7100              		.loc 3 107 10 is_stmt 0 view .LVU2416
 7101 2900 4C89F8   		mov	rax, r15	# tmp120, primeCount
 7102              	.LBE422:
 7103              	.LBE428:
 7104              	# sieve_extend.c:975:             if (primeCount % 10 == 0) printf("\n");
 975:sieve_extend.c ****         }
 7105              		.loc 1 975 16 view .LVU2417
 7106 2903 48BF9999 		movabs	rdi, 1844674407370955161	# tmp172,
 7106      99999999 
 7106      9919
 7107              	.LBB429:
 7108              	.LBB423:
 7109              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 7110              		.loc 3 107 10 view .LVU2418
 7111 290d 490FAFC6 		imul	rax, r14	# tmp120, tmp136
 7112 2911 C4E3FBF0 		rorx	rdx, rax, 1	# tmp122, tmp120,
 7112      D001
GAS LISTING /tmp/ccNeV1of.s 			page 202


 7113              	.LBE423:
 7114              	.LBE429:
 7115              	# sieve_extend.c:975:             if (primeCount % 10 == 0) printf("\n");
 975:sieve_extend.c ****         }
 7116              		.loc 1 975 16 view .LVU2419
 7117 2917 4839FA   		cmp	rdx, rdi	# tmp122, tmp172
 7118 291a 760C     		jbe	.L533	#,
 7119              	.L558:
 7120 291c 498B3424 		mov	rsi, QWORD PTR [r12]	# prephitmp_86, *ISRA.76_32(D)
 7121              	.LBB430:
 7122              	.LBB431:
 7123              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 7124              		.loc 3 107 10 view .LVU2420
 7125 2920 E9C8FEFF 		jmp	.L532	#
 7125      FF
 7126              		.p2align 4,,7
 7127 2925 0F1F00   		.p2align 3
 7128              	.L533:
 7129              	.LBE431:
 7130              	.LBE430:
 975:sieve_extend.c ****         }
 7131              		.loc 1 975 39 is_stmt 1 view .LVU2421
 7132              	.LVL380:
 7133              	.LBB433:
 7134              	.LBI430:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 7135              		.loc 3 105 1 view .LVU2422
 7136              	.LBB432:
 7137              		.loc 3 107 3 view .LVU2423
 7138              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 7139              		.loc 3 107 10 is_stmt 0 view .LVU2424
 7140 2928 BF0A0000 		mov	edi, 10	#,
 7140      00
 7141 292d E8000000 		call	putchar@PLT	#
 7141      00
 7142              	.LVL381:
 7143 2932 EBE8     		jmp	.L558	#
 7144              	.LVL382:
 7145              	.L537:
 7146              		.loc 3 107 10 view .LVU2425
 7147              	.LBE432:
 7148              	.LBE433:
 7149              	.LBE444:
 7150              	# sieve_extend.c:970:     counter_t primeCount = 1;    // We already have 2
 970:sieve_extend.c ****     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(sieve->bitarray, factor+
 7151              		.loc 1 970 15 view .LVU2426
 7152 2934 41BF0100 		mov	r15d, 1	# primeCount,
 7152      0000
 7153 293a E97AFFFF 		jmp	.L531	#
 7153      FF
 7154              		.cfi_endproc
 7155              	.LFE100:
 7157              		.section	.rodata.str1.8,"aMS",@progbits,1
 7158              		.align 8
 7159              	.LC9:
 7160 0000 4552524F 		.string	"ERROR expected at copy_word %ju\n"
 7160      52206578 
GAS LISTING /tmp/ccNeV1of.s 			page 203


 7160      70656374 
 7160      65642061 
 7160      7420636F 
 7161              		.section	.rodata.str1.1
 7162              	.LC10:
 7163 0023 257300   		.string	"%s"
 7164              	.LC11:
 7165 0026 42757420 		.string	"But is"
 7165      697300
 7166              		.text
 7167 293f 90       		.p2align 4
 7169              	extendSieve_shiftright_vector:
 7170              	.LVL383:
 7171              	.LFB71:
 589:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 7172              		.loc 1 589 150 is_stmt 1 view -0
 7173              		.cfi_startproc
 589:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 7174              		.loc 1 589 150 is_stmt 0 view .LVU2428
 7175 2940 55       		push	rbp	#
 7176              		.cfi_def_cfa_offset 16
 7177              		.cfi_offset 6, -16
 7178              	# sieve_extend.c:595:     const counter_t copy_start = source_start + size;
 595:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_calc(source_start);
 7179              		.loc 1 595 21 view .LVU2429
 7180 2941 4801F2   		add	rdx, rsi	# copy_start, source_start
 7181              	.LVL384:
 7182              	# sieve_extend.c:589: static void extendSieve_shiftright_vector(bitword_t* bitarray, const counter_
 589:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 7183              		.loc 1 589 150 view .LVU2430
 7184 2944 4889C8   		mov	rax, rcx	# destination_stop, tmp1467
 7185 2947 4889E5   		mov	rbp, rsp	#,
 7186              		.cfi_def_cfa_register 6
 7187              	# sieve_extend.c:596:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
 596:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 7188              		.loc 1 596 39 view .LVU2431
 7189 294a 4989D3   		mov	r11, rdx	# _4, copy_start
 7190              	# sieve_extend.c:589: static void extendSieve_shiftright_vector(bitword_t* bitarray, const counter_
 589:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 7191              		.loc 1 589 150 view .LVU2432
 7192 294d 4157     		push	r15	#
 7193              	# sieve_extend.c:599:     register counter_t copy_word = wordindex(copy_start);
 599:sieve_extend.c **** 
 7194              		.loc 1 599 24 view .LVU2433
 7195 294f 4989D2   		mov	r10, rdx	# copy_word, copy_start
 7196              	# sieve_extend.c:596:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
 596:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 7197              		.loc 1 596 39 view .LVU2434
 7198 2952 4183E33F 		and	r11d, 63	# _4,
 7199              	# sieve_extend.c:589: static void extendSieve_shiftright_vector(bitword_t* bitarray, const counter_
 589:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 7200              		.loc 1 589 150 view .LVU2435
 7201 2956 4156     		push	r14	#
 7202              	# sieve_extend.c:599:     register counter_t copy_word = wordindex(copy_start);
 599:sieve_extend.c **** 
 7203              		.loc 1 599 24 view .LVU2436
 7204 2958 49C1EA06 		shr	r10, 6	# copy_word,
GAS LISTING /tmp/ccNeV1of.s 			page 204


 7205              		.cfi_offset 15, -24
 7206              		.cfi_offset 14, -32
 7207              	# sieve_extend.c:596:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
 596:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 7208              		.loc 1 596 31 view .LVU2437
 7209 295c 4D89DF   		mov	r15, r11	# shift, _4
 7210              	# sieve_extend.c:589: static void extendSieve_shiftright_vector(bitword_t* bitarray, const counter_
 589:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 7211              		.loc 1 589 150 view .LVU2438
 7212 295f 4155     		push	r13	#
 7213              	# sieve_extend.c:594:     const counter_t destination_stop_word = wordindex(destination_stop);
 594:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 7214              		.loc 1 594 21 view .LVU2439
 7215 2961 48C1E806 		shr	rax, 6	# destination_stop_word,
 7216              	# sieve_extend.c:589: static void extendSieve_shiftright_vector(bitword_t* bitarray, const counter_
 589:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 7217              		.loc 1 589 150 view .LVU2440
 7218 2965 4154     		push	r12	#
 7219 2967 53       		push	rbx	#
 7220 2968 4883E4E0 		and	rsp, -32	#,
 7221 296c 488DA424 		lea	rsp, -224[rsp]	#,
 7221      20FFFFFF 
 7222              		.cfi_offset 13, -40
 7223              		.cfi_offset 12, -48
 7224              		.cfi_offset 3, -56
 7225              	# sieve_extend.c:589: static void extendSieve_shiftright_vector(bitword_t* bitarray, const counter_
 589:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 7226              		.loc 1 589 150 view .LVU2441
 7227 2974 48894C24 		mov	QWORD PTR 56[rsp], rcx	# %sfp, destination_stop
 7227      38
 7228              	# sieve_extend.c:596:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
 596:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 7229              		.loc 1 596 67 view .LVU2442
 7230 2979 4889F1   		mov	rcx, rsi	# _5, source_start
 7231              	.LVL385:
 7232              	# sieve_extend.c:598:     register counter_t source_word = wordindex(source_start);
 598:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 7233              		.loc 1 598 24 view .LVU2443
 7234 297c 48C1EE06 		shr	rsi, 6	# source_start,
 7235              	.LVL386:
 7236              	# sieve_extend.c:596:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
 596:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 7237              		.loc 1 596 67 view .LVU2444
 7238 2980 83E13F   		and	ecx, 63	# _5,
 7239              	.LVL387:
 7240              	# sieve_extend.c:589: static void extendSieve_shiftright_vector(bitword_t* bitarray, const counter_
 589:sieve_extend.c ****     debug printf("Extending sieve size %ju in %ju bit range (%ju-%ju) using shiftright (%ju copies)
 7241              		.loc 1 589 150 view .LVU2445
 7242 2983 64488B1C 		mov	rbx, QWORD PTR fs:40	# tmp1555, MEM[(<address-space-1> long unsigned int *)40B]
 7242      25280000 
 7242      00
 7243 298c 48899C24 		mov	QWORD PTR 216[rsp], rbx	# D.7142, tmp1555
 7243      D8000000 
 7244 2994 31DB     		xor	ebx, ebx	# tmp1555
 590:sieve_extend.c ****    
 7245              		.loc 1 590 5 is_stmt 1 view .LVU2446
 592:sieve_extend.c **** 
GAS LISTING /tmp/ccNeV1of.s 			page 205


 7246              		.loc 1 592 5 view .LVU2447
 7247              	.LVL388:
 594:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 7248              		.loc 1 594 5 view .LVU2448
 595:sieve_extend.c ****     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_calc(source_start);
 7249              		.loc 1 595 5 view .LVU2449
 596:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 7250              		.loc 1 596 5 view .LVU2450
 7251              	# sieve_extend.c:596:     register const bitshift_t shift = bitindex_calc(copy_start) - bitindex_ca
 596:sieve_extend.c ****     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 7252              		.loc 1 596 31 is_stmt 0 view .LVU2451
 7253 2996 4929CF   		sub	r15, rcx	# shift, _5
 7254              	.LVL389:
 597:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 7255              		.loc 1 597 5 is_stmt 1 view .LVU2452
 7256              	# sieve_extend.c:601:     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start
 601:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 7257              		.loc 1 601 25 is_stmt 0 view .LVU2453
 7258 2999 4A8D1CD5 		lea	rbx, 0[0+r10*8]	# _6,
 7258      00000000 
 7259              	# sieve_extend.c:601:     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start
 601:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 7260              		.loc 1 601 38 view .LVU2454
 7261 29a1 4C8D2CF5 		lea	r13, 0[0+rsi*8]	# _9,
 7261      00000000 
 7262              	# sieve_extend.c:597:     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 597:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 7263              		.loc 1 597 31 view .LVU2455
 7264 29a9 4883C140 		add	rcx, 64	# tmp561,
 7265              	# sieve_extend.c:601:     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start
 601:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 7266              		.loc 1 601 25 view .LVU2456
 7267 29ad 4C8D241F 		lea	r12, [rdi+rbx]	# _7,
 7268              	# sieve_extend.c:597:     register const bitshift_t shift_flipped = WORD_SIZE_bitshift-shift;
 597:sieve_extend.c ****     register counter_t source_word = wordindex(source_start);
 7269              		.loc 1 597 31 view .LVU2457
 7270 29b1 4C29D9   		sub	rcx, r11	# shift_flipped, _4
 7271              	.LVL390:
 598:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 7272              		.loc 1 598 5 is_stmt 1 view .LVU2458
 7273              	# sieve_extend.c:594:     const counter_t destination_stop_word = wordindex(destination_stop);
 594:sieve_extend.c ****     const counter_t copy_start = source_start + size;
 7274              		.loc 1 594 21 is_stmt 0 view .LVU2459
 7275 29b4 48894424 		mov	QWORD PTR 64[rsp], rax	# %sfp, destination_stop_word
 7275      40
 7276              	.LVL391:
 7277              	# sieve_extend.c:601:     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start
 601:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 7278              		.loc 1 601 52 view .LVU2460
 7279 29b9 4589F9   		mov	r9d, r15d	# tmp1565, shift
 7280              	# sieve_extend.c:598:     register counter_t source_word = wordindex(source_start);
 598:sieve_extend.c ****     register counter_t copy_word = wordindex(copy_start);
 7281              		.loc 1 598 24 view .LVU2461
 7282 29bc 4989F6   		mov	r14, rsi	# source_word, source_start
 7283              	.LVL392:
 599:sieve_extend.c **** 
 7284              		.loc 1 599 5 is_stmt 1 view .LVU2462
GAS LISTING /tmp/ccNeV1of.s 			page 206


 601:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 7285              		.loc 1 601 5 view .LVU2463
 7286              	# sieve_extend.c:602:                                 | (bitarray[copy_word] >> shift_flipped))
 602:sieve_extend.c ****                                 & keepmask(copy_start);
 7287              		.loc 1 602 56 is_stmt 0 view .LVU2464
 7288 29bf C4C2F3F7 		shrx	rax, QWORD PTR [r12], rcx	# tmp564, *_7, shift_flipped
 7288      0424
 7289              	# sieve_extend.c:601:     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start
 601:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 7290              		.loc 1 601 52 view .LVU2465
 7291 29c5 4589F8   		mov	r8d, r15d	# _12, shift
 7292              	# sieve_extend.c:601:     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start
 601:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 7293              		.loc 1 601 38 view .LVU2466
 7294 29c8 4A8D342F 		lea	rsi, [rdi+r13]	# _10,
 7295              	.LVL393:
 7296              	# sieve_extend.c:601:     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start
 601:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 7297              		.loc 1 601 52 view .LVU2467
 7298 29cc 4C897C24 		mov	QWORD PTR 72[rsp], r15	# %sfp, shift
 7298      48
 7299 29d1 C462B1F7 		shlx	r15, QWORD PTR [rsi], r9	# tmp562, *_10, tmp1565
 7299      3E
 7300              	.LVL394:
 7301              	# sieve_extend.c:602:                                 | (bitarray[copy_word] >> shift_flipped))
 602:sieve_extend.c ****                                 & keepmask(copy_start);
 7302              		.loc 1 602 33 view .LVU2468
 7303 29d6 4C09F8   		or	rax, r15	# tmp565, tmp562
 7304              	# sieve_extend.c:603:                                 & keepmask(copy_start);
 603:sieve_extend.c **** 
 7305              		.loc 1 603 35 view .LVU2469
 7306 29d9 49C7C1FF 		mov	r9, -1	# tmp568,
 7306      FFFFFF
 7307 29e0 C442A1F7 		shlx	r11, r9, r11	# tmp567, tmp568, _4
 7307      D9
 7308              	# sieve_extend.c:603:                                 & keepmask(copy_start);
 603:sieve_extend.c **** 
 7309              		.loc 1 603 33 view .LVU2470
 7310 29e5 4921C3   		and	r11, rax	# tmp569, tmp565
 7311              	# sieve_extend.c:601:     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start
 601:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 7312              		.loc 1 601 25 view .LVU2471
 7313 29e8 4D0B1C24 		or	r11, QWORD PTR [r12]	# tmp570, *_7
 7314              	# sieve_extend.c:605:     if (copy_word >= destination_stop_word) { 
 605:sieve_extend.c ****         return; // rapid exit for one word variant
 7315              		.loc 1 605 8 view .LVU2472
 7316 29ec 4C395424 		cmp	QWORD PTR 64[rsp], r10	# %sfp, copy_word
 7316      40
 7317              	# sieve_extend.c:601:     bitarray[copy_word] |= ((bitarray[source_word] << shift)  // or the start
 601:sieve_extend.c ****                                 | (bitarray[copy_word] >> shift_flipped))
 7318              		.loc 1 601 25 view .LVU2473
 7319 29f1 4D891C24 		mov	QWORD PTR [r12], r11	# *_7, tmp570
 605:sieve_extend.c ****         return; // rapid exit for one word variant
 7320              		.loc 1 605 5 is_stmt 1 view .LVU2474
 7321              	# sieve_extend.c:605:     if (copy_word >= destination_stop_word) { 
 605:sieve_extend.c ****         return; // rapid exit for one word variant
 7322              		.loc 1 605 8 is_stmt 0 view .LVU2475
GAS LISTING /tmp/ccNeV1of.s 			page 207


 7323 29f5 0F86630A 		jbe	.L561	#,
 7323      0000
 7324              	# sieve_extend.c:609:     copy_word++;
 609:sieve_extend.c **** 
 7325              		.loc 1 609 14 view .LVU2476
 7326 29fb 4D8D7A01 		lea	r15, 1[r10]	# copy_word,
 7327 29ff 4189C9   		mov	r9d, ecx	# _16, shift_flipped
 609:sieve_extend.c **** 
 7328              		.loc 1 609 5 is_stmt 1 view .LVU2477
 7329              	.LVL395:
 611:sieve_extend.c ****     if (((copy_word - source_word) > 8)) {
 7330              		.loc 1 611 5 view .LVU2478
 612:sieve_extend.c **** 
 7331              		.loc 1 612 5 view .LVU2479
 7332              	# sieve_extend.c:612:     if (((copy_word - source_word) > 8)) {
 612:sieve_extend.c **** 
 7333              		.loc 1 612 21 is_stmt 0 view .LVU2480
 7334 2a02 4C89F8   		mov	rax, r15	# _26, copy_word
 7335 2a05 4C8D6308 		lea	r12, 8[rbx]	# _364,
 7336 2a09 4C29F0   		sub	rax, r14	# _26, source_word
 7337              	# sieve_extend.c:612:     if (((copy_word - source_word) > 8)) {
 612:sieve_extend.c **** 
 7338              		.loc 1 612 8 view .LVU2481
 7339 2a0c 4883F808 		cmp	rax, 8	# _26,
 7340              	# sieve_extend.c:612:     if (((copy_word - source_word) > 8)) {
 612:sieve_extend.c **** 
 7341              		.loc 1 612 21 view .LVU2482
 7342 2a10 4989C3   		mov	r11, rax	# _26, _26
 7343              	# sieve_extend.c:612:     if (((copy_word - source_word) > 8)) {
 612:sieve_extend.c **** 
 7344              		.loc 1 612 8 view .LVU2483
 7345 2a13 0F866F0A 		jbe	.L564	#,
 7345      0000
 7346              	.LBB467:
 615:sieve_extend.c ****         counter_t delta_word   = 4-((copy_word-source_word-1) % 4);
 7347              		.loc 1 615 9 is_stmt 1 view .LVU2484
 7348              	# sieve_extend.c:615:         counter_t target_word = wordindex(vectorstart(source_start+size)+VECT
 615:sieve_extend.c ****         counter_t delta_word   = 4-((copy_word-source_word-1) % 4);
 7349              		.loc 1 615 33 is_stmt 0 view .LVU2485
 7350 2a19 30D2     		xor	dl, dl	# tmp571
 7351              	.LVL396:
 7352              	# sieve_extend.c:616:         counter_t delta_word   = 4-((copy_word-source_word-1) % 4);
 616:sieve_extend.c ****         if (delta_word==0) { 
 7353              		.loc 1 616 59 view .LVU2486
 7354 2a1b 4983EB01 		sub	r11, 1	# tmp573,
 7355              	# sieve_extend.c:615:         counter_t target_word = wordindex(vectorstart(source_start+size)+VECT
 615:sieve_extend.c ****         counter_t delta_word   = 4-((copy_word-source_word-1) % 4);
 7356              		.loc 1 615 33 view .LVU2487
 7357 2a1f 4881C200 		add	rdx, 256	# tmp572,
 7357      010000
 7358              	# sieve_extend.c:616:         counter_t delta_word   = 4-((copy_word-source_word-1) % 4);
 616:sieve_extend.c ****         if (delta_word==0) { 
 7359              		.loc 1 616 63 view .LVU2488
 7360 2a26 4183E303 		and	r11d, 3	# tmp573,
 7361              	# sieve_extend.c:615:         counter_t target_word = wordindex(vectorstart(source_start+size)+VECT
 615:sieve_extend.c ****         counter_t delta_word   = 4-((copy_word-source_word-1) % 4);
 7362              		.loc 1 615 19 view .LVU2489
GAS LISTING /tmp/ccNeV1of.s 			page 208


 7363 2a2a 48C1EA06 		shr	rdx, 6	# copy_word,
 7364              	.LVL397:
 616:sieve_extend.c ****         if (delta_word==0) { 
 7365              		.loc 1 616 9 is_stmt 1 view .LVU2490
 7366              	# sieve_extend.c:616:         counter_t delta_word   = 4-((copy_word-source_word-1) % 4);
 616:sieve_extend.c ****         if (delta_word==0) { 
 7367              		.loc 1 616 19 is_stmt 0 view .LVU2491
 7368 2a2e B8040000 		mov	eax, 4	# tmp574,
 7368      00
 7369              	# sieve_extend.c:616:         counter_t delta_word   = 4-((copy_word-source_word-1) % 4);
 616:sieve_extend.c ****         if (delta_word==0) { 
 7370              		.loc 1 616 63 view .LVU2492
 7371 2a33 4C895C24 		mov	QWORD PTR 32[rsp], r11	# %sfp, _30
 7371      20
 7372              	# sieve_extend.c:616:         counter_t delta_word   = 4-((copy_word-source_word-1) % 4);
 616:sieve_extend.c ****         if (delta_word==0) { 
 7373              		.loc 1 616 19 view .LVU2493
 7374 2a38 4C29D8   		sub	rax, r11	# tmp574, _30
 7375              	# sieve_extend.c:623:         for (; copy_word < target_word; copy_word++, source_word++ ) {
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7376              		.loc 1 623 9 view .LVU2494
 7377 2a3b 4939D7   		cmp	r15, rdx	# copy_word, copy_word
 7378              	# sieve_extend.c:616:         counter_t delta_word   = 4-((copy_word-source_word-1) % 4);
 616:sieve_extend.c ****         if (delta_word==0) { 
 7379              		.loc 1 616 19 view .LVU2495
 7380 2a3e C461F96E 		vmovq	xmm9, rax	# delta_word, tmp574
 7380      C8
 7381              	.LVL398:
 617:sieve_extend.c ****             target_word += 8;
 7382              		.loc 1 617 9 is_stmt 1 view .LVU2496
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7383              		.loc 1 623 16 view .LVU2497
 7384              	# sieve_extend.c:623:         for (; copy_word < target_word; copy_word++, source_word++ ) {
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7385              		.loc 1 623 9 is_stmt 0 view .LVU2498
 7386 2a43 0F837F17 		jnb	.L601	#,
 7386      0000
 7387 2a49 4C8D5B28 		lea	r11, 40[rbx]	# tmp575,
 7388 2a4d 4D39DD   		cmp	r13, r11	# _9, tmp575
 7389 2a50 4D8D5D28 		lea	r11, 40[r13]	# tmp578,
 7390 2a54 0F9DC0   		setge	al	#, tmp577
 7391              	.LVL399:
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7392              		.loc 1 623 9 view .LVU2499
 7393 2a57 4D39DC   		cmp	r12, r11	# _364, tmp578
 7394 2a5a 410F9DC3 		setge	r11b	#, tmp580
 7395 2a5e 4408D8   		or	al, r11b	# tmp577, tmp580
 7396 2a61 0F844115 		je	.L566	#,
 7396      0000
 7397 2a67 4989D4   		mov	r12, rdx	# tmp582, copy_word
 7398 2a6a 4D29D4   		sub	r12, r10	# tmp582, copy_word
 7399 2a6d 4D8D5C24 		lea	r11, -2[r12]	# tmp584,
 7399      FE
 7400 2a72 4983FB05 		cmp	r11, 5	# tmp584,
 7401 2a76 0F862C15 		jbe	.L566	#,
 7401      0000
 7402 2a7c 4889F0   		mov	rax, rsi	# tmp588, _10
GAS LISTING /tmp/ccNeV1of.s 			page 209


 7403 2a7f 4C89D3   		mov	rbx, r10	# tmp587, copy_word
 7404 2a82 48C1E803 		shr	rax, 3	# tmp588,
 7405 2a86 48F7D3   		not	rbx	# tmp587
 7406 2a89 48F7D8   		neg	rax	# tmp589
 7407 2a8c 4801D3   		add	rbx, rdx	# niters.427, copy_word
 7408 2a8f 83E003   		and	eax, 3	# tmp589,
 7409 2a92 0F84C00D 		je	.L602	#,
 7409      0000
 624:sieve_extend.c ****         }
 7410              		.loc 1 624 13 is_stmt 1 view .LVU2500
 7411              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7412              		.loc 1 624 103 is_stmt 0 view .LVU2501
 7413 2a98 4E8B642F 		mov	r12, QWORD PTR 8[rdi+r13]	# *_654, *_654
 7413      08
 7414              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7415              		.loc 1 624 87 view .LVU2502
 7416 2a9d 4D8D5E01 		lea	r11, 1[r14]	# tmp849,
 7417              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7418              		.loc 1 624 58 view .LVU2503
 7419 2aa1 488B36   		mov	rsi, QWORD PTR [rsi]	# *_10, *_10
 7420              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7421              		.loc 1 624 103 view .LVU2504
 7422 2aa4 440FB66C 		movzx	r13d, BYTE PTR 72[rsp]	# tmp1576, %sfp
 7422      2448
 7423 2aaa C44291F7 		shlx	r12, r12, r13	# tmp590, *_654, tmp1576
 7423      E4
 7424              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7425              		.loc 1 624 58 view .LVU2505
 7426 2aaf C462F3F7 		shrx	r13, rsi, rcx	# tmp592, *_10, shift_flipped
 7426      EE
 7427              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7428              		.loc 1 624 87 view .LVU2506
 7429 2ab4 4C895C24 		mov	QWORD PTR 40[rsp], r11	# %sfp, tmp849
 7429      28
 7430              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7431              		.loc 1 624 76 view .LVU2507
 7432 2ab9 4D09EC   		or	r12, r13	# tmp594, tmp592
 7433 2abc 4883F801 		cmp	rax, 1	# prolog_loop_niters.429,
 7434 2ac0 4E8924FF 		mov	QWORD PTR [rdi+r15*8], r12	# *_658, tmp594
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7435              		.loc 1 623 41 is_stmt 1 view .LVU2508
 7436              	# sieve_extend.c:623:         for (; copy_word < target_word; copy_word++, source_word++ ) {
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7437              		.loc 1 623 50 is_stmt 0 view .LVU2509
 7438 2ac4 4D8D6A02 		lea	r13, 2[r10]	# copy_word,
 7439              	.LVL400:
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7440              		.loc 1 623 16 is_stmt 1 view .LVU2510
 7441 2ac8 7468     		je	.L567	#,
 624:sieve_extend.c ****         }
GAS LISTING /tmp/ccNeV1of.s 			page 210


 7442              		.loc 1 624 13 view .LVU2511
 7443              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7444              		.loc 1 624 44 is_stmt 0 view .LVU2512
 7445 2aca 4E8D24DD 		lea	r12, 0[0+r11*8]	# _667,
 7445      00000000 
 7446              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7447              		.loc 1 624 87 view .LVU2513
 7448 2ad2 498D7602 		lea	rsi, 2[r14]	# source_word,
 7449 2ad6 48897424 		mov	QWORD PTR 40[rsp], rsi	# %sfp, source_word
 7449      28
 7450              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7451              		.loc 1 624 103 view .LVU2514
 7452 2adb 0FB67424 		movzx	esi, BYTE PTR 72[rsp]	# tmp1578, %sfp
 7452      48
 7453 2ae0 C4A2C9F7 		shlx	rsi, QWORD PTR 8[rdi+r12], rsi	# tmp595, *_673, tmp1578
 7453      742708
 7454              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7455              		.loc 1 624 58 view .LVU2515
 7456 2ae7 4E8B2427 		mov	r12, QWORD PTR [rdi+r12]	# *_668, *_668
 7457 2aeb C442F3F7 		shrx	r12, r12, rcx	# tmp597, *_668, shift_flipped
 7457      E4
 7458              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7459              		.loc 1 624 76 view .LVU2516
 7460 2af0 4C09E6   		or	rsi, r12	# tmp599, tmp597
 7461 2af3 4883F803 		cmp	rax, 3	# prolog_loop_niters.429,
 7462 2af7 4A8934EF 		mov	QWORD PTR [rdi+r13*8], rsi	# *_677, tmp599
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7463              		.loc 1 623 41 is_stmt 1 view .LVU2517
 7464              	# sieve_extend.c:623:         for (; copy_word < target_word; copy_word++, source_word++ ) {
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7465              		.loc 1 623 50 is_stmt 0 view .LVU2518
 7466 2afb 4D8D6A03 		lea	r13, 3[r10]	# copy_word,
 7467              	.LVL401:
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7468              		.loc 1 623 16 is_stmt 1 view .LVU2519
 7469 2aff 7531     		jne	.L567	#,
 624:sieve_extend.c ****         }
 7470              		.loc 1 624 13 view .LVU2520
 7471              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7472              		.loc 1 624 44 is_stmt 0 view .LVU2521
 7473 2b01 4D8D6602 		lea	r12, 2[r14]	# source_word,
 7474              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7475              		.loc 1 624 87 view .LVU2522
 7476 2b05 498D7603 		lea	rsi, 3[r14]	# source_word,
 7477 2b09 48897424 		mov	QWORD PTR 40[rsp], rsi	# %sfp, source_word
 7477      28
 7478              	.LVL402:
 7479              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7480              		.loc 1 624 44 view .LVU2523
GAS LISTING /tmp/ccNeV1of.s 			page 211


 7481 2b0e 49C1E403 		sal	r12, 3	# source_word,
 7482              	.LVL403:
 7483              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7484              		.loc 1 624 103 view .LVU2524
 7485 2b12 0FB67424 		movzx	esi, BYTE PTR 72[rsp]	# tmp1581, %sfp
 7485      48
 7486 2b17 C4A2C9F7 		shlx	rsi, QWORD PTR 8[rdi+r12], rsi	# tmp600, *_366, tmp1581
 7486      742708
 7487              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7488              		.loc 1 624 58 view .LVU2525
 7489 2b1e 4E8B2427 		mov	r12, QWORD PTR [rdi+r12]	# *_372, *_372
 7490 2b22 C442F3F7 		shrx	r12, r12, rcx	# tmp602, *_372, shift_flipped
 7490      E4
 7491              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7492              		.loc 1 624 76 view .LVU2526
 7493 2b27 4C09E6   		or	rsi, r12	# tmp604, tmp602
 7494 2b2a 4A8934EF 		mov	QWORD PTR [rdi+r13*8], rsi	# *_346, tmp604
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7495              		.loc 1 623 41 is_stmt 1 view .LVU2527
 7496              	# sieve_extend.c:623:         for (; copy_word < target_word; copy_word++, source_word++ ) {
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7497              		.loc 1 623 50 is_stmt 0 view .LVU2528
 7498 2b2e 4D8D6A04 		lea	r13, 4[r10]	# copy_word,
 7499              	.LVL404:
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7500              		.loc 1 623 16 is_stmt 1 view .LVU2529
 7501              	.L567:
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7502              		.loc 1 623 16 is_stmt 0 view .LVU2530
 7503 2b32 4829C3   		sub	rbx, rax	# niters.427, prolog_loop_niters.429
 7504 2b35 4901C3   		add	r11, rax	# tmp608, prolog_loop_niters.429
 7505 2b38 48895C24 		mov	QWORD PTR 48[rsp], rbx	# %sfp, niters.427
 7505      30
 7506 2b3d 4A8D1C30 		lea	rbx, [rax+r14]	# tmp605,
 7507 2b41 488B7424 		mov	rsi, QWORD PTR 48[rsp]	# bnd.431, %sfp
 7507      30
 7508 2b46 4A8D0438 		lea	rax, [rax+r15]	# tmp610,
 7509 2b4a 4C8D24C7 		lea	r12, [rdi+rax*8]	# vectp.445,
 7510              	# sieve_extend.c:623:         for (; copy_word < target_word; copy_word++, source_word++ ) {
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7511              		.loc 1 623 9 view .LVU2531
 7512 2b4e 31C0     		xor	eax, eax	# ivtmp.524
 7513 2b50 4E8D1CDF 		lea	r11, [rdi+r11*8]	# vectp.440,
 7514 2b54 488D1CDF 		lea	rbx, [rdi+rbx*8]	# vectp.436,
 7515 2b58 48C1EE02 		shr	rsi, 2	# bnd.431,
 7516 2b5c C4C1796E 		vmovd	xmm1, r9d	# _16, _16
 7516      C9
 7517 2b61 48C1E605 		sal	rsi, 5	# bnd.431,
 7518 2b65 C4C1796E 		vmovd	xmm0, r8d	# _12, _12
 7518      C0
 7519 2b6a 48897424 		mov	QWORD PTR 24[rsp], rsi	# %sfp, _788
 7519      18
 7520 2b6f 4883EE20 		sub	rsi, 32	# tmp880,
 7521 2b73 48C1EE05 		shr	rsi, 5	# tmp878,
GAS LISTING /tmp/ccNeV1of.s 			page 212


 7522 2b77 4883C601 		add	rsi, 1	# tmp881,
 7523 2b7b 83E607   		and	esi, 7	# tmp882,
 7524 2b7e 0F840401 		je	.L569	#,
 7524      0000
 7525 2b84 4883FE01 		cmp	rsi, 1	# tmp882,
 7526 2b88 0F84CD00 		je	.L768	#,
 7526      0000
 7527 2b8e 4883FE02 		cmp	rsi, 2	# tmp882,
 7528 2b92 0F84A100 		je	.L769	#,
 7528      0000
 7529 2b98 4883FE03 		cmp	rsi, 3	# tmp882,
 7530 2b9c 747A     		je	.L770	#,
 7531 2b9e 4883FE04 		cmp	rsi, 4	# tmp882,
 7532 2ba2 7452     		je	.L771	#,
 7533 2ba4 4883FE05 		cmp	rsi, 5	# tmp882,
 7534 2ba8 742B     		je	.L772	#,
 7535 2baa 4883FE06 		cmp	rsi, 6	# tmp882,
 7536 2bae 0F85E815 		jne	.L886	#,
 7536      0000
 7537              	.LVL405:
 7538              	.L773:
 624:sieve_extend.c ****         }
 7539              		.loc 1 624 13 is_stmt 1 view .LVU2532
 7540              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7541              		.loc 1 624 58 is_stmt 0 view .LVU2533
 7542 2bb4 C57D6F2C 		vmovdqa	ymm13, YMMWORD PTR [rbx+rax]	# tmp1715, MEM[base: vectp.436_408, index: ivtmp.524_786, off
 7542      03
 7543              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7544              		.loc 1 624 103 view .LVU2534
 7545 2bb9 C4417E6F 		vmovdqu	ymm15, YMMWORD PTR [r11+rax]	# tmp1716, MEM[base: vectp.440_415, index: ivtmp.524_786, off
 7545      3C03
 7546              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7547              		.loc 1 624 58 view .LVU2535
 7548 2bbf C515D3F1 		vpsrlq	ymm14, ymm13, xmm1	# vect__35.438, tmp1715, _16
 7549              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7550              		.loc 1 624 103 view .LVU2536
 7551 2bc3 C585F3F0 		vpsllq	ymm6, ymm15, xmm0	# vect__40.442, tmp1716, _12
 7552              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7553              		.loc 1 624 76 view .LVU2537
 7554 2bc7 C58DEBD6 		vpor	ymm2, ymm14, ymm6	# vect__43.443, vect__35.438, vect__40.442
 7555              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7556              		.loc 1 624 33 view .LVU2538
 7557 2bcb C4C17E7F 		vmovdqu	YMMWORD PTR [r12+rax], ymm2	# MEM[base: vectp.445_424, index: ivtmp.524_786, offset: 0B], 
 7557      1404
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7558              		.loc 1 623 41 is_stmt 1 view .LVU2539
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7559              		.loc 1 623 16 view .LVU2540
 7560 2bd1 4883C020 		add	rax, 32	# ivtmp.524,
 7561              	.L772:
 624:sieve_extend.c ****         }
GAS LISTING /tmp/ccNeV1of.s 			page 213


 7562              		.loc 1 624 13 view .LVU2541
 7563              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7564              		.loc 1 624 58 is_stmt 0 view .LVU2542
 7565 2bd5 C5FD6F24 		vmovdqa	ymm4, YMMWORD PTR [rbx+rax]	# tmp1717, MEM[base: vectp.436_408, index: ivtmp.524_786, offs
 7565      03
 7566              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7567              		.loc 1 624 103 view .LVU2543
 7568 2bda C4417E6F 		vmovdqu	ymm8, YMMWORD PTR [r11+rax]	# tmp1718, MEM[base: vectp.440_415, index: ivtmp.524_786, offs
 7568      0403
 7569              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7570              		.loc 1 624 58 view .LVU2544
 7571 2be0 C5DDD3F9 		vpsrlq	ymm7, ymm4, xmm1	# vect__35.438, tmp1717, _16
 7572              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7573              		.loc 1 624 103 view .LVU2545
 7574 2be4 C5BDF3E8 		vpsllq	ymm5, ymm8, xmm0	# vect__40.442, tmp1718, _12
 7575              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7576              		.loc 1 624 76 view .LVU2546
 7577 2be8 C5C5EBDD 		vpor	ymm3, ymm7, ymm5	# vect__43.443, vect__35.438, vect__40.442
 7578              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7579              		.loc 1 624 33 view .LVU2547
 7580 2bec C4C17E7F 		vmovdqu	YMMWORD PTR [r12+rax], ymm3	# MEM[base: vectp.445_424, index: ivtmp.524_786, offset: 0B], 
 7580      1C04
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7581              		.loc 1 623 41 is_stmt 1 view .LVU2548
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7582              		.loc 1 623 16 view .LVU2549
 7583 2bf2 4883C020 		add	rax, 32	# ivtmp.524,
 7584              	.L771:
 624:sieve_extend.c ****         }
 7585              		.loc 1 624 13 view .LVU2550
 7586              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7587              		.loc 1 624 58 is_stmt 0 view .LVU2551
 7588 2bf6 C57D6F14 		vmovdqa	ymm10, YMMWORD PTR [rbx+rax]	# tmp1719, MEM[base: vectp.436_408, index: ivtmp.524_786, off
 7588      03
 7589              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7590              		.loc 1 624 103 view .LVU2552
 7591 2bfb C4417E6F 		vmovdqu	ymm12, YMMWORD PTR [r11+rax]	# tmp1720, MEM[base: vectp.440_415, index: ivtmp.524_786, off
 7591      2403
 7592              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7593              		.loc 1 624 58 view .LVU2553
 7594 2c01 C52DD3D9 		vpsrlq	ymm11, ymm10, xmm1	# vect__35.438, tmp1719, _16
 7595              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7596              		.loc 1 624 103 view .LVU2554
 7597 2c05 C51DF3E8 		vpsllq	ymm13, ymm12, xmm0	# vect__40.442, tmp1720, _12
 7598              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7599              		.loc 1 624 76 view .LVU2555
GAS LISTING /tmp/ccNeV1of.s 			page 214


 7600 2c09 C44125EB 		vpor	ymm14, ymm11, ymm13	# vect__43.443, vect__35.438, vect__40.442
 7600      F5
 7601              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7602              		.loc 1 624 33 view .LVU2556
 7603 2c0e C4417E7F 		vmovdqu	YMMWORD PTR [r12+rax], ymm14	# MEM[base: vectp.445_424, index: ivtmp.524_786, offset: 0B],
 7603      3404
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7604              		.loc 1 623 41 is_stmt 1 view .LVU2557
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7605              		.loc 1 623 16 view .LVU2558
 7606 2c14 4883C020 		add	rax, 32	# ivtmp.524,
 7607              	.L770:
 624:sieve_extend.c ****         }
 7608              		.loc 1 624 13 view .LVU2559
 7609              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7610              		.loc 1 624 58 is_stmt 0 view .LVU2560
 7611 2c18 C57D6F3C 		vmovdqa	ymm15, YMMWORD PTR [rbx+rax]	# tmp1721, MEM[base: vectp.436_408, index: ivtmp.524_786, off
 7611      03
 7612              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7613              		.loc 1 624 103 view .LVU2561
 7614 2c1d C4C17E6F 		vmovdqu	ymm6, YMMWORD PTR [r11+rax]	# tmp1722, MEM[base: vectp.440_415, index: ivtmp.524_786, offs
 7614      3403
 7615              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7616              		.loc 1 624 58 view .LVU2562
 7617 2c23 C585D3D1 		vpsrlq	ymm2, ymm15, xmm1	# vect__35.438, tmp1721, _16
 7618              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7619              		.loc 1 624 103 view .LVU2563
 7620 2c27 C5CDF3E0 		vpsllq	ymm4, ymm6, xmm0	# vect__40.442, tmp1722, _12
 7621              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7622              		.loc 1 624 76 view .LVU2564
 7623 2c2b C5EDEBFC 		vpor	ymm7, ymm2, ymm4	# vect__43.443, vect__35.438, vect__40.442
 7624              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7625              		.loc 1 624 33 view .LVU2565
 7626 2c2f C4C17E7F 		vmovdqu	YMMWORD PTR [r12+rax], ymm7	# MEM[base: vectp.445_424, index: ivtmp.524_786, offset: 0B], 
 7626      3C04
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7627              		.loc 1 623 41 is_stmt 1 view .LVU2566
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7628              		.loc 1 623 16 view .LVU2567
 7629 2c35 4883C020 		add	rax, 32	# ivtmp.524,
 7630              	.L769:
 624:sieve_extend.c ****         }
 7631              		.loc 1 624 13 view .LVU2568
 7632              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7633              		.loc 1 624 58 is_stmt 0 view .LVU2569
 7634 2c39 C57D6F04 		vmovdqa	ymm8, YMMWORD PTR [rbx+rax]	# tmp1723, MEM[base: vectp.436_408, index: ivtmp.524_786, offs
 7634      03
 7635              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
GAS LISTING /tmp/ccNeV1of.s 			page 215


 7636              		.loc 1 624 103 view .LVU2570
 7637 2c3e C4C17E6F 		vmovdqu	ymm5, YMMWORD PTR [r11+rax]	# tmp1724, MEM[base: vectp.440_415, index: ivtmp.524_786, offs
 7637      2C03
 7638              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7639              		.loc 1 624 58 view .LVU2571
 7640 2c44 C5BDD3D9 		vpsrlq	ymm3, ymm8, xmm1	# vect__35.438, tmp1723, _16
 7641              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7642              		.loc 1 624 103 view .LVU2572
 7643 2c48 C555F3D0 		vpsllq	ymm10, ymm5, xmm0	# vect__40.442, tmp1724, _12
 7644              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7645              		.loc 1 624 76 view .LVU2573
 7646 2c4c C44165EB 		vpor	ymm11, ymm3, ymm10	# vect__43.443, vect__35.438, vect__40.442
 7646      DA
 7647              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7648              		.loc 1 624 33 view .LVU2574
 7649 2c51 C4417E7F 		vmovdqu	YMMWORD PTR [r12+rax], ymm11	# MEM[base: vectp.445_424, index: ivtmp.524_786, offset: 0B],
 7649      1C04
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7650              		.loc 1 623 41 is_stmt 1 view .LVU2575
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7651              		.loc 1 623 16 view .LVU2576
 7652 2c57 4883C020 		add	rax, 32	# ivtmp.524,
 7653              	.L768:
 624:sieve_extend.c ****         }
 7654              		.loc 1 624 13 view .LVU2577
 7655              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7656              		.loc 1 624 58 is_stmt 0 view .LVU2578
 7657 2c5b C57D6F24 		vmovdqa	ymm12, YMMWORD PTR [rbx+rax]	# tmp1725, MEM[base: vectp.436_408, index: ivtmp.524_786, off
 7657      03
 7658              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7659              		.loc 1 624 103 view .LVU2579
 7660 2c60 C4417E6F 		vmovdqu	ymm14, YMMWORD PTR [r11+rax]	# tmp1726, MEM[base: vectp.440_415, index: ivtmp.524_786, off
 7660      3403
 7661              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7662              		.loc 1 624 58 view .LVU2580
 7663 2c66 C51DD3E9 		vpsrlq	ymm13, ymm12, xmm1	# vect__35.438, tmp1725, _16
 7664              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7665              		.loc 1 624 103 view .LVU2581
 7666 2c6a C50DF3F8 		vpsllq	ymm15, ymm14, xmm0	# vect__40.442, tmp1726, _12
 7667              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7668              		.loc 1 624 76 view .LVU2582
 7669 2c6e C4C115EB 		vpor	ymm2, ymm13, ymm15	# vect__43.443, vect__35.438, vect__40.442
 7669      D7
 7670              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7671              		.loc 1 624 33 view .LVU2583
 7672 2c73 C4C17E7F 		vmovdqu	YMMWORD PTR [r12+rax], ymm2	# MEM[base: vectp.445_424, index: ivtmp.524_786, offset: 0B], 
 7672      1404
GAS LISTING /tmp/ccNeV1of.s 			page 216


 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7673              		.loc 1 623 41 is_stmt 1 view .LVU2584
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7674              		.loc 1 623 16 view .LVU2585
 7675 2c79 4883C020 		add	rax, 32	# ivtmp.524,
 7676 2c7d 483B4424 		cmp	rax, QWORD PTR 24[rsp]	# ivtmp.524, %sfp
 7676      18
 7677 2c82 0F843601 		je	.L865	#,
 7677      0000
 7678              	.L569:
 624:sieve_extend.c ****         }
 7679              		.loc 1 624 13 discriminator 2 view .LVU2586
 7680              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7681              		.loc 1 624 58 is_stmt 0 discriminator 2 view .LVU2587
 7682 2c88 C5FD6F34 		vmovdqa	ymm6, YMMWORD PTR [rbx+rax]	# tmp1586, MEM[base: vectp.436_408, index: ivtmp.524_786, offs
 7682      03
 7683              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7684              		.loc 1 624 103 discriminator 2 view .LVU2588
 7685 2c8d C4C17E6F 		vmovdqu	ymm4, YMMWORD PTR [r11+rax]	# tmp1587, MEM[base: vectp.440_415, index: ivtmp.524_786, offs
 7685      2403
 7686              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7687              		.loc 1 624 58 discriminator 2 view .LVU2589
 7688 2c93 C5CDD3F9 		vpsrlq	ymm7, ymm6, xmm1	# vect__35.438, tmp1586, _16
 7689              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7690              		.loc 1 624 103 discriminator 2 view .LVU2590
 7691 2c97 C55DF3C0 		vpsllq	ymm8, ymm4, xmm0	# vect__40.442, tmp1587, _12
 7692              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7693              		.loc 1 624 76 discriminator 2 view .LVU2591
 7694 2c9b C4C145EB 		vpor	ymm3, ymm7, ymm8	# vect__43.443, vect__35.438, vect__40.442
 7694      D8
 7695              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7696              		.loc 1 624 33 discriminator 2 view .LVU2592
 7697 2ca0 C4C17E7F 		vmovdqu	YMMWORD PTR [r12+rax], ymm3	# MEM[base: vectp.445_424, index: ivtmp.524_786, offset: 0B], 
 7697      1C04
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7698              		.loc 1 623 41 is_stmt 1 discriminator 2 view .LVU2593
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7699              		.loc 1 623 16 discriminator 2 view .LVU2594
 624:sieve_extend.c ****         }
 7700              		.loc 1 624 13 discriminator 2 view .LVU2595
 7701              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7702              		.loc 1 624 58 is_stmt 0 discriminator 2 view .LVU2596
 7703 2ca6 C5FD6F6C 		vmovdqa	ymm5, YMMWORD PTR 32[rbx+rax]	# tmp1588, MEM[base: vectp.436_408, index: ivtmp.524_786, of
 7703      0320
 7704              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7705              		.loc 1 624 103 discriminator 2 view .LVU2597
 7706 2cac C4417E6F 		vmovdqu	ymm11, YMMWORD PTR 32[r11+rax]	# tmp1589, MEM[base: vectp.440_415, index: ivtmp.524_786, o
 7706      5C0320
 7707              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
GAS LISTING /tmp/ccNeV1of.s 			page 217


 624:sieve_extend.c ****         }
 7708              		.loc 1 624 58 discriminator 2 view .LVU2598
 7709 2cb3 C555D3D1 		vpsrlq	ymm10, ymm5, xmm1	# vect__35.438, tmp1588, _16
 7710              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7711              		.loc 1 624 103 discriminator 2 view .LVU2599
 7712 2cb7 C525F3E0 		vpsllq	ymm12, ymm11, xmm0	# vect__40.442, tmp1589, _12
 7713              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7714              		.loc 1 624 76 discriminator 2 view .LVU2600
 7715 2cbb C4412DEB 		vpor	ymm13, ymm10, ymm12	# vect__43.443, vect__35.438, vect__40.442
 7715      EC
 7716              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7717              		.loc 1 624 33 discriminator 2 view .LVU2601
 7718 2cc0 C4417E7F 		vmovdqu	YMMWORD PTR 32[r12+rax], ymm13	# MEM[base: vectp.445_424, index: ivtmp.524_786, offset: 0B
 7718      6C0420
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7719              		.loc 1 623 41 is_stmt 1 discriminator 2 view .LVU2602
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7720              		.loc 1 623 16 discriminator 2 view .LVU2603
 624:sieve_extend.c ****         }
 7721              		.loc 1 624 13 discriminator 2 view .LVU2604
 7722              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7723              		.loc 1 624 58 is_stmt 0 discriminator 2 view .LVU2605
 7724 2cc7 C57D6F74 		vmovdqa	ymm14, YMMWORD PTR 64[rbx+rax]	# tmp1590, MEM[base: vectp.436_408, index: ivtmp.524_786, o
 7724      0340
 7725              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7726              		.loc 1 624 103 discriminator 2 view .LVU2606
 7727 2ccd C4C17E6F 		vmovdqu	ymm2, YMMWORD PTR 64[r11+rax]	# tmp1591, MEM[base: vectp.440_415, index: ivtmp.524_786, of
 7727      540340
 7728              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7729              		.loc 1 624 58 discriminator 2 view .LVU2607
 7730 2cd4 C50DD3F9 		vpsrlq	ymm15, ymm14, xmm1	# vect__35.438, tmp1590, _16
 7731              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7732              		.loc 1 624 103 discriminator 2 view .LVU2608
 7733 2cd8 C5EDF3F0 		vpsllq	ymm6, ymm2, xmm0	# vect__40.442, tmp1591, _12
 7734              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7735              		.loc 1 624 76 discriminator 2 view .LVU2609
 7736 2cdc C585EBFE 		vpor	ymm7, ymm15, ymm6	# vect__43.443, vect__35.438, vect__40.442
 7737              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7738              		.loc 1 624 33 discriminator 2 view .LVU2610
 7739 2ce0 C4C17E7F 		vmovdqu	YMMWORD PTR 64[r12+rax], ymm7	# MEM[base: vectp.445_424, index: ivtmp.524_786, offset: 0B]
 7739      7C0440
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7740              		.loc 1 623 41 is_stmt 1 discriminator 2 view .LVU2611
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7741              		.loc 1 623 16 discriminator 2 view .LVU2612
 624:sieve_extend.c ****         }
 7742              		.loc 1 624 13 discriminator 2 view .LVU2613
 7743              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
GAS LISTING /tmp/ccNeV1of.s 			page 218


 624:sieve_extend.c ****         }
 7744              		.loc 1 624 58 is_stmt 0 discriminator 2 view .LVU2614
 7745 2ce7 C5FD6F64 		vmovdqa	ymm4, YMMWORD PTR 96[rbx+rax]	# tmp1592, MEM[base: vectp.436_408, index: ivtmp.524_786, of
 7745      0360
 7746              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7747              		.loc 1 624 103 discriminator 2 view .LVU2615
 7748 2ced C4C17E6F 		vmovdqu	ymm3, YMMWORD PTR 96[r11+rax]	# tmp1593, MEM[base: vectp.440_415, index: ivtmp.524_786, of
 7748      5C0360
 7749              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7750              		.loc 1 624 58 discriminator 2 view .LVU2616
 7751 2cf4 C55DD3C1 		vpsrlq	ymm8, ymm4, xmm1	# vect__35.438, tmp1592, _16
 7752              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7753              		.loc 1 624 103 discriminator 2 view .LVU2617
 7754 2cf8 C5E5F3E8 		vpsllq	ymm5, ymm3, xmm0	# vect__40.442, tmp1593, _12
 7755              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7756              		.loc 1 624 76 discriminator 2 view .LVU2618
 7757 2cfc C53DEBD5 		vpor	ymm10, ymm8, ymm5	# vect__43.443, vect__35.438, vect__40.442
 7758              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7759              		.loc 1 624 33 discriminator 2 view .LVU2619
 7760 2d00 C4417E7F 		vmovdqu	YMMWORD PTR 96[r12+rax], ymm10	# MEM[base: vectp.445_424, index: ivtmp.524_786, offset: 0B
 7760      540460
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7761              		.loc 1 623 41 is_stmt 1 discriminator 2 view .LVU2620
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7762              		.loc 1 623 16 discriminator 2 view .LVU2621
 624:sieve_extend.c ****         }
 7763              		.loc 1 624 13 discriminator 2 view .LVU2622
 7764              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7765              		.loc 1 624 58 is_stmt 0 discriminator 2 view .LVU2623
 7766 2d07 C57D6F9C 		vmovdqa	ymm11, YMMWORD PTR 128[rbx+rax]	# tmp1594, MEM[base: vectp.436_408, index: ivtmp.524_786, 
 7766      03800000 
 7766      00
 7767              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7768              		.loc 1 624 103 discriminator 2 view .LVU2624
 7769 2d10 C4417E6F 		vmovdqu	ymm13, YMMWORD PTR 128[r11+rax]	# tmp1595, MEM[base: vectp.440_415, index: ivtmp.524_786, 
 7769      AC038000 
 7769      0000
 7770              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7771              		.loc 1 624 58 discriminator 2 view .LVU2625
 7772 2d1a C525D3E1 		vpsrlq	ymm12, ymm11, xmm1	# vect__35.438, tmp1594, _16
 7773              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7774              		.loc 1 624 103 discriminator 2 view .LVU2626
 7775 2d1e C515F3F0 		vpsllq	ymm14, ymm13, xmm0	# vect__40.442, tmp1595, _12
 7776              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7777              		.loc 1 624 76 discriminator 2 view .LVU2627
 7778 2d22 C4411DEB 		vpor	ymm15, ymm12, ymm14	# vect__43.443, vect__35.438, vect__40.442
 7778      FE
GAS LISTING /tmp/ccNeV1of.s 			page 219


 7779              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7780              		.loc 1 624 33 discriminator 2 view .LVU2628
 7781 2d27 C4417E7F 		vmovdqu	YMMWORD PTR 128[r12+rax], ymm15	# MEM[base: vectp.445_424, index: ivtmp.524_786, offset: 0
 7781      BC048000 
 7781      0000
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7782              		.loc 1 623 41 is_stmt 1 discriminator 2 view .LVU2629
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7783              		.loc 1 623 16 discriminator 2 view .LVU2630
 624:sieve_extend.c ****         }
 7784              		.loc 1 624 13 discriminator 2 view .LVU2631
 7785              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7786              		.loc 1 624 58 is_stmt 0 discriminator 2 view .LVU2632
 7787 2d31 C5FD6F94 		vmovdqa	ymm2, YMMWORD PTR 160[rbx+rax]	# tmp1596, MEM[base: vectp.436_408, index: ivtmp.524_786, o
 7787      03A00000 
 7787      00
 7788              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7789              		.loc 1 624 103 discriminator 2 view .LVU2633
 7790 2d3a C4C17E6F 		vmovdqu	ymm6, YMMWORD PTR 160[r11+rax]	# tmp1597, MEM[base: vectp.440_415, index: ivtmp.524_786, o
 7790      B403A000 
 7790      0000
 7791              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7792              		.loc 1 624 58 discriminator 2 view .LVU2634
 7793 2d44 C5EDD3F9 		vpsrlq	ymm7, ymm2, xmm1	# vect__35.438, tmp1596, _16
 7794              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7795              		.loc 1 624 103 discriminator 2 view .LVU2635
 7796 2d48 C5CDF3E0 		vpsllq	ymm4, ymm6, xmm0	# vect__40.442, tmp1597, _12
 7797              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7798              		.loc 1 624 76 discriminator 2 view .LVU2636
 7799 2d4c C545EBC4 		vpor	ymm8, ymm7, ymm4	# vect__43.443, vect__35.438, vect__40.442
 7800              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7801              		.loc 1 624 33 discriminator 2 view .LVU2637
 7802 2d50 C4417E7F 		vmovdqu	YMMWORD PTR 160[r12+rax], ymm8	# MEM[base: vectp.445_424, index: ivtmp.524_786, offset: 0B
 7802      8404A000 
 7802      0000
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7803              		.loc 1 623 41 is_stmt 1 discriminator 2 view .LVU2638
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7804              		.loc 1 623 16 discriminator 2 view .LVU2639
 624:sieve_extend.c ****         }
 7805              		.loc 1 624 13 discriminator 2 view .LVU2640
 7806              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7807              		.loc 1 624 58 is_stmt 0 discriminator 2 view .LVU2641
 7808 2d5a C5FD6F9C 		vmovdqa	ymm3, YMMWORD PTR 192[rbx+rax]	# tmp1598, MEM[base: vectp.436_408, index: ivtmp.524_786, o
 7808      03C00000 
 7808      00
 7809              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7810              		.loc 1 624 103 discriminator 2 view .LVU2642
GAS LISTING /tmp/ccNeV1of.s 			page 220


 7811 2d63 C4C17E6F 		vmovdqu	ymm5, YMMWORD PTR 192[r11+rax]	# tmp1599, MEM[base: vectp.440_415, index: ivtmp.524_786, o
 7811      AC03C000 
 7811      0000
 7812              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7813              		.loc 1 624 58 discriminator 2 view .LVU2643
 7814 2d6d C565D3D1 		vpsrlq	ymm10, ymm3, xmm1	# vect__35.438, tmp1598, _16
 7815              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7816              		.loc 1 624 103 discriminator 2 view .LVU2644
 7817 2d71 C555F3D8 		vpsllq	ymm11, ymm5, xmm0	# vect__40.442, tmp1599, _12
 7818              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7819              		.loc 1 624 76 discriminator 2 view .LVU2645
 7820 2d75 C4412DEB 		vpor	ymm12, ymm10, ymm11	# vect__43.443, vect__35.438, vect__40.442
 7820      E3
 7821              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7822              		.loc 1 624 33 discriminator 2 view .LVU2646
 7823 2d7a C4417E7F 		vmovdqu	YMMWORD PTR 192[r12+rax], ymm12	# MEM[base: vectp.445_424, index: ivtmp.524_786, offset: 0
 7823      A404C000 
 7823      0000
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7824              		.loc 1 623 41 is_stmt 1 discriminator 2 view .LVU2647
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7825              		.loc 1 623 16 discriminator 2 view .LVU2648
 624:sieve_extend.c ****         }
 7826              		.loc 1 624 13 discriminator 2 view .LVU2649
 7827              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7828              		.loc 1 624 58 is_stmt 0 discriminator 2 view .LVU2650
 7829 2d84 C57D6FAC 		vmovdqa	ymm13, YMMWORD PTR 224[rbx+rax]	# tmp1600, MEM[base: vectp.436_408, index: ivtmp.524_786, 
 7829      03E00000 
 7829      00
 7830              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7831              		.loc 1 624 103 discriminator 2 view .LVU2651
 7832 2d8d C4417E6F 		vmovdqu	ymm15, YMMWORD PTR 224[r11+rax]	# tmp1601, MEM[base: vectp.440_415, index: ivtmp.524_786, 
 7832      BC03E000 
 7832      0000
 7833              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7834              		.loc 1 624 58 discriminator 2 view .LVU2652
 7835 2d97 C515D3F1 		vpsrlq	ymm14, ymm13, xmm1	# vect__35.438, tmp1600, _16
 7836              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7837              		.loc 1 624 103 discriminator 2 view .LVU2653
 7838 2d9b C585F3D0 		vpsllq	ymm2, ymm15, xmm0	# vect__40.442, tmp1601, _12
 7839              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7840              		.loc 1 624 76 discriminator 2 view .LVU2654
 7841 2d9f C58DEBFA 		vpor	ymm7, ymm14, ymm2	# vect__43.443, vect__35.438, vect__40.442
 7842              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7843              		.loc 1 624 33 discriminator 2 view .LVU2655
 7844 2da3 C4C17E7F 		vmovdqu	YMMWORD PTR 224[r12+rax], ymm7	# MEM[base: vectp.445_424, index: ivtmp.524_786, offset: 0B
 7844      BC04E000 
GAS LISTING /tmp/ccNeV1of.s 			page 221


 7844      0000
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7845              		.loc 1 623 41 is_stmt 1 discriminator 2 view .LVU2656
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7846              		.loc 1 623 16 discriminator 2 view .LVU2657
 7847 2dad 48050001 		add	rax, 256	# ivtmp.524,
 7847      0000
 7848 2db3 483B4424 		cmp	rax, QWORD PTR 24[rsp]	# ivtmp.524, %sfp
 7848      18
 7849 2db8 0F85CAFE 		jne	.L569	#,
 7849      FFFF
 7850              	.L865:
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7851              		.loc 1 623 16 is_stmt 0 discriminator 2 view .LVU2658
 7852 2dbe 4C8B6424 		mov	r12, QWORD PTR 48[rsp]	# niters.430, %sfp
 7852      30
 7853 2dc3 488B7424 		mov	rsi, QWORD PTR 40[rsp]	# source_word, %sfp
 7853      28
 7854 2dc8 4C89E3   		mov	rbx, r12	# niters_vector_mult_vf.432, niters.430
 7855 2dcb 4883E3FC 		and	rbx, -4	# niters_vector_mult_vf.432,
 7856 2dcf 4801DE   		add	rsi, rbx	# source_word, niters_vector_mult_vf.432
 7857 2dd2 4939DC   		cmp	r12, rbx	# niters.430, niters_vector_mult_vf.432
 7858 2dd5 4D8D5C1D 		lea	r11, 0[r13+rbx]	# tmp.433,
 7858      00
 7859 2dda 7465     		je	.L572	#,
 7860              	.LVL406:
 624:sieve_extend.c ****         }
 7861              		.loc 1 624 13 is_stmt 1 view .LVU2659
 7862              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7863              		.loc 1 624 103 is_stmt 0 view .LVU2660
 7864 2ddc 488B4424 		mov	rax, QWORD PTR 72[rsp]	# shift, %sfp
 7864      48
 7865              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7866              		.loc 1 624 58 view .LVU2661
 7867 2de1 C462F3F7 		shrx	r13, QWORD PTR [rdi+rsi*8], rcx	# tmp622, *_614, shift_flipped
 7867      2CF7
 7868              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7869              		.loc 1 624 87 view .LVU2662
 7870 2de7 4C8D6601 		lea	r12, 1[rsi]	# _617,
 7871              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7872              		.loc 1 624 103 view .LVU2663
 7873 2deb 89C3     		mov	ebx, eax	# tmp1606, shift
 7874 2ded C4E2E1F7 		shlx	rbx, QWORD PTR 8[rdi+rsi*8], rbx	# tmp620, *_619, tmp1606
 7874      5CF708
 7875              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7876              		.loc 1 624 76 view .LVU2664
 7877 2df4 4C09EB   		or	rbx, r13	# tmp624, tmp622
 7878              	# sieve_extend.c:623:         for (; copy_word < target_word; copy_word++, source_word++ ) {
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7879              		.loc 1 623 50 view .LVU2665
 7880 2df7 4D8D6B01 		lea	r13, 1[r11]	# copy_word,
 7881              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
GAS LISTING /tmp/ccNeV1of.s 			page 222


 624:sieve_extend.c ****         }
 7882              		.loc 1 624 76 view .LVU2666
 7883 2dfb 4A891CDF 		mov	QWORD PTR [rdi+r11*8], rbx	# *_623, tmp624
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7884              		.loc 1 623 41 is_stmt 1 view .LVU2667
 7885              	.LVL407:
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7886              		.loc 1 623 16 view .LVU2668
 7887              	# sieve_extend.c:623:         for (; copy_word < target_word; copy_word++, source_word++ ) {
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7888              		.loc 1 623 9 is_stmt 0 view .LVU2669
 7889 2dff 4C39EA   		cmp	rdx, r13	# copy_word, copy_word
 7890 2e02 763D     		jbe	.L572	#,
 624:sieve_extend.c ****         }
 7891              		.loc 1 624 13 is_stmt 1 view .LVU2670
 7892              	# sieve_extend.c:623:         for (; copy_word < target_word; copy_word++, source_word++ ) {
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7893              		.loc 1 623 50 is_stmt 0 view .LVU2671
 7894 2e04 4983C302 		add	r11, 2	# copy_word,
 7895              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7896              		.loc 1 624 87 view .LVU2672
 7897 2e08 4883C602 		add	rsi, 2	# _634,
 7898              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7899              		.loc 1 624 103 view .LVU2673
 7900 2e0c 89C3     		mov	ebx, eax	# tmp1607, shift
 7901 2e0e C4A2E1F7 		shlx	rbx, QWORD PTR 8[rdi+r12*8], rbx	# tmp625, *_636, tmp1607
 7901      5CE708
 7902              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7903              		.loc 1 624 58 view .LVU2674
 7904 2e15 4E8B24E7 		mov	r12, QWORD PTR [rdi+r12*8]	# *_631, *_631
 7905              	.LVL408:
 624:sieve_extend.c ****         }
 7906              		.loc 1 624 58 view .LVU2675
 7907 2e19 C442F3F7 		shrx	r12, r12, rcx	# tmp627, *_631, shift_flipped
 7907      E4
 7908              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7909              		.loc 1 624 76 view .LVU2676
 7910 2e1e 4C09E3   		or	rbx, r12	# tmp629, tmp627
 7911              	# sieve_extend.c:623:         for (; copy_word < target_word; copy_word++, source_word++ ) {
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7912              		.loc 1 623 9 view .LVU2677
 7913 2e21 4C39DA   		cmp	rdx, r11	# copy_word, copy_word
 7914              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7915              		.loc 1 624 76 view .LVU2678
 7916 2e24 4A891CEF 		mov	QWORD PTR [rdi+r13*8], rbx	# *_640, tmp629
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7917              		.loc 1 623 41 is_stmt 1 view .LVU2679
 7918              	.LVL409:
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7919              		.loc 1 623 16 view .LVU2680
 7920              	# sieve_extend.c:623:         for (; copy_word < target_word; copy_word++, source_word++ ) {
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
GAS LISTING /tmp/ccNeV1of.s 			page 223


 7921              		.loc 1 623 9 is_stmt 0 view .LVU2681
 7922 2e28 7617     		jbe	.L572	#,
 624:sieve_extend.c ****         }
 7923              		.loc 1 624 13 is_stmt 1 view .LVU2682
 7924              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7925              		.loc 1 624 103 is_stmt 0 view .LVU2683
 7926 2e2a C4E2F9F7 		shlx	rax, QWORD PTR 8[rdi+rsi*8], rax	# tmp630, *_394, tmp1608
 7926      44F708
 7927              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7928              		.loc 1 624 58 view .LVU2684
 7929 2e31 488B34F7 		mov	rsi, QWORD PTR [rdi+rsi*8]	# *_389, *_389
 7930              	.LVL410:
 624:sieve_extend.c ****         }
 7931              		.loc 1 624 58 view .LVU2685
 7932 2e35 C462F3F7 		shrx	r13, rsi, rcx	# tmp632, *_389, shift_flipped
 7932      EE
 7933              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 7934              		.loc 1 624 76 view .LVU2686
 7935 2e3a 4C09E8   		or	rax, r13	# tmp634, tmp632
 7936 2e3d 4A8904DF 		mov	QWORD PTR [rdi+r11*8], rax	# *_398, tmp634
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7937              		.loc 1 623 41 is_stmt 1 view .LVU2687
 7938              	.LVL411:
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7939              		.loc 1 623 16 view .LVU2688
 7940              	.L572:
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 7941              		.loc 1 623 16 is_stmt 0 view .LVU2689
 7942 2e41 4D8D5EFF 		lea	r11, -1[r14]	# tmp645,
 7943 2e45 4C8D24D5 		lea	r12, 0[0+rdx*8]	# _364,
 7943      00000000 
 7944 2e4d 4D29D3   		sub	r11, r10	# tmp646, copy_word
 7945 2e50 4901D3   		add	r11, rdx	# tmp.414, copy_word
 7946              	.L565:
 627:sieve_extend.c ****             delta_word = 4;
 7947              		.loc 1 627 9 is_stmt 1 view .LVU2690
 7948              	.LVL412:
 632:sieve_extend.c ****         counter_t copy_vector = vectorfromword(copy_word);
 7949              		.loc 1 632 9 view .LVU2691
 7950              	# sieve_extend.c:637:         const bitvector_t shuffle1 = { delta_word-1, delta_word, delta_word+1
 637:sieve_extend.c ****         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2, delta_word+3 };
 7951              		.loc 1 637 76 is_stmt 0 view .LVU2692
 7952 2e53 488B4424 		mov	rax, QWORD PTR 32[rsp]	# _30, %sfp
 7952      20
 7953              	# sieve_extend.c:637:         const bitvector_t shuffle1 = { delta_word-1, delta_word, delta_word+1
 637:sieve_extend.c ****         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2, delta_word+3 };
 7954              		.loc 1 637 27 view .LVU2693
 7955 2e58 4D29FE   		sub	r14, r15	# tmp651, copy_word
 7956              	# sieve_extend.c:637:         const bitvector_t shuffle1 = { delta_word-1, delta_word, delta_word+1
 637:sieve_extend.c ****         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2, delta_word+3 };
 7957              		.loc 1 637 76 view .LVU2694
 7958 2e5b BE050000 		mov	esi, 5	# tmp648,
 7958      00
 7959              	# sieve_extend.c:637:         const bitvector_t shuffle1 = { delta_word-1, delta_word, delta_word+1
GAS LISTING /tmp/ccNeV1of.s 			page 224


 637:sieve_extend.c ****         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2, delta_word+3 };
 7960              		.loc 1 637 27 view .LVU2695
 7961 2e60 4183E603 		and	r14d, 3	# tmp652,
 7962 2e64 C4C1F96E 		vmovq	xmm6, r14	# tmp652, tmp652
 7962      F6
 7963              	# sieve_extend.c:632:         counter_t source_vector = vectorfromword(source_word+1);
 632:sieve_extend.c ****         counter_t copy_vector = vectorfromword(copy_word);
 7964              		.loc 1 632 35 view .LVU2696
 7965 2e69 4D8D5301 		lea	r10, 1[r11]	# tmp848,
 7966              	# sieve_extend.c:637:         const bitvector_t shuffle1 = { delta_word-1, delta_word, delta_word+1
 637:sieve_extend.c ****         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2, delta_word+3 };
 7967              		.loc 1 637 76 view .LVU2697
 7968 2e6d 4829C6   		sub	rsi, rax	# tmp648, _30
 7969              	# sieve_extend.c:633:         counter_t copy_vector = vectorfromword(copy_word);
 633:sieve_extend.c **** 
 7970              		.loc 1 633 19 view .LVU2698
 7971 2e70 4989D5   		mov	r13, rdx	# copy_vector, copy_word
 7972              	# sieve_extend.c:642:         counter_t target_vector = vectorindex(destination_stop);
 642:sieve_extend.c **** 
 7973              		.loc 1 642 19 view .LVU2699
 7974 2e73 4C8B7424 		mov	r14, QWORD PTR 56[rsp]	# target_vector, %sfp
 7974      38
 7975              	# sieve_extend.c:637:         const bitvector_t shuffle1 = { delta_word-1, delta_word, delta_word+1
 637:sieve_extend.c ****         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2, delta_word+3 };
 7976              		.loc 1 637 76 view .LVU2700
 7977 2e78 C4E1F96E 		vmovq	xmm1, rsi	# _46, tmp648
 7977      CE
 7978              	# sieve_extend.c:637:         const bitvector_t shuffle1 = { delta_word-1, delta_word, delta_word+1
 637:sieve_extend.c ****         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2, delta_word+3 };
 7979              		.loc 1 637 90 view .LVU2701
 7980 2e7d BE060000 		mov	esi, 6	# tmp649,
 7980      00
 7981              	# sieve_extend.c:638:         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2
 638:sieve_extend.c ****         const bitvector_t shift_vector = { shift, shift, shift, shift };
 7982              		.loc 1 638 90 view .LVU2702
 7983 2e82 41BF0700 		mov	r15d, 7	# tmp657,
 7983      0000
 7984              	# sieve_extend.c:637:         const bitvector_t shuffle1 = { delta_word-1, delta_word, delta_word+1
 637:sieve_extend.c ****         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2, delta_word+3 };
 7985              		.loc 1 637 90 view .LVU2703
 7986 2e88 4829C6   		sub	rsi, rax	# _47, _30
 7987              	# sieve_extend.c:638:         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2
 638:sieve_extend.c ****         const bitvector_t shift_vector = { shift, shift, shift, shift };
 7988              		.loc 1 638 90 view .LVU2704
 7989 2e8b 4929C7   		sub	r15, rax	# tmp656, _30
 7990              	# sieve_extend.c:632:         counter_t source_vector = vectorfromword(source_word+1);
 632:sieve_extend.c ****         counter_t copy_vector = vectorfromword(copy_word);
 7991              		.loc 1 632 19 view .LVU2705
 7992 2e8e 4C89D3   		mov	rbx, r10	# source_vector, tmp848
 7993              	# sieve_extend.c:638:         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2
 638:sieve_extend.c ****         const bitvector_t shift_vector = { shift, shift, shift, shift };
 7994              		.loc 1 638 27 view .LVU2706
 7995 2e91 C461F96E 		vmovq	xmm8, rsi	# _47, _47
 7995      C6
 7996              	# sieve_extend.c:633:         counter_t copy_vector = vectorfromword(copy_word);
 633:sieve_extend.c **** 
 7997              		.loc 1 633 19 view .LVU2707
GAS LISTING /tmp/ccNeV1of.s 			page 225


 7998 2e96 49C1ED02 		shr	r13, 2	# copy_vector,
 7999              	# sieve_extend.c:637:         const bitvector_t shuffle1 = { delta_word-1, delta_word, delta_word+1
 637:sieve_extend.c ****         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2, delta_word+3 };
 8000              		.loc 1 637 27 view .LVU2708
 8001 2e9a C4C1496C 		vpunpcklqdq	xmm4, xmm6, xmm9	# tmp654, tmp652, delta_word
 8001      E1
 8002              	# sieve_extend.c:642:         counter_t target_vector = vectorindex(destination_stop);
 642:sieve_extend.c **** 
 8003              		.loc 1 642 19 view .LVU2709
 8004 2e9f 49C1EE08 		shr	r14, 8	# target_vector,
 8005              	# sieve_extend.c:637:         const bitvector_t shuffle1 = { delta_word-1, delta_word, delta_word+1
 637:sieve_extend.c ****         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2, delta_word+3 };
 8006              		.loc 1 637 27 view .LVU2710
 8007 2ea3 C4E3F122 		vpinsrq	xmm0, xmm1, rsi, 1	# tmp653, _46, _47
 8007      C601
 8008              	# sieve_extend.c:632:         counter_t source_vector = vectorfromword(source_word+1);
 632:sieve_extend.c ****         counter_t copy_vector = vectorfromword(copy_word);
 8009              		.loc 1 632 19 view .LVU2711
 8010 2ea9 48C1EB02 		shr	rbx, 2	# source_vector,
 8011              	.LVL413:
 633:sieve_extend.c **** 
 8012              		.loc 1 633 9 is_stmt 1 view .LVU2712
 637:sieve_extend.c ****         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2, delta_word+3 };
 8013              		.loc 1 637 9 view .LVU2713
 8014              	# sieve_extend.c:638:         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2
 638:sieve_extend.c ****         const bitvector_t shift_vector = { shift, shift, shift, shift };
 8015              		.loc 1 638 27 is_stmt 0 view .LVU2714
 8016 2ead C4C3B922 		vpinsrq	xmm3, xmm8, r15, 1	# tmp658, _47, tmp656
 8016      DF01
 8017 2eb3 C5316CC9 		vpunpcklqdq	xmm9, xmm9, xmm1	# tmp659, delta_word, _46
 8018              	.LVL414:
 8019              	# sieve_extend.c:649:         for (; copy_vector <= target_vector; copy_vector++, source_vector++ )
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8020              		.loc 1 649 9 view .LVU2715
 8021 2eb7 4D39F5   		cmp	r13, r14	# copy_vector, target_vector
 8022              	# sieve_extend.c:637:         const bitvector_t shuffle1 = { delta_word-1, delta_word, delta_word+1
 637:sieve_extend.c ****         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2, delta_word+3 };
 8023              		.loc 1 637 27 view .LVU2716
 8024 2eba C4E35D38 		vinserti128	ymm5, ymm4, xmm0, 0x1	# shuffle1, tmp654, tmp653
 8024      E801
 8025              	.LVL415:
 638:sieve_extend.c ****         const bitvector_t shift_vector = { shift, shift, shift, shift };
 8026              		.loc 1 638 9 is_stmt 1 view .LVU2717
 8027              	# sieve_extend.c:638:         const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2
 638:sieve_extend.c ****         const bitvector_t shift_vector = { shift, shift, shift, shift };
 8028              		.loc 1 638 27 is_stmt 0 view .LVU2718
 8029 2ec0 C4633538 		vinserti128	ymm12, ymm9, xmm3, 0x1	# shuffle2, tmp659, tmp658
 8029      E301
 8030              	.LVL416:
 639:sieve_extend.c ****         const bitvector_t shift_flipped_vector = { shift_flipped, shift_flipped, shift_flipped, shi
 8031              		.loc 1 639 9 is_stmt 1 view .LVU2719
 640:sieve_extend.c **** 
 8032              		.loc 1 640 9 view .LVU2720
 642:sieve_extend.c **** 
 8033              		.loc 1 642 9 view .LVU2721
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8034              		.loc 1 649 9 view .LVU2722
GAS LISTING /tmp/ccNeV1of.s 			page 226


 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8035              		.loc 1 649 16 view .LVU2723
 8036              	# sieve_extend.c:649:         for (; copy_vector <= target_vector; copy_vector++, source_vector++ )
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8037              		.loc 1 649 9 is_stmt 0 view .LVU2724
 8038 2ec6 0F87A701 		ja	.L577	#,
 8038      0000
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8039              		.loc 1 649 9 view .LVU2725
 8040 2ecc 4A8D3433 		lea	rsi, [rbx+r14]	# tmp663,
 8041 2ed0 4989FF   		mov	r15, rdi	# tmp662, bitarray
 8042 2ed3 49C1E505 		sal	r13, 5	# _766,
 8043              	.LVL417:
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8044              		.loc 1 649 9 view .LVU2726
 8045 2ed7 4889D8   		mov	rax, rbx	# tmp660, source_vector
 8046 2eda 48C1E605 		sal	rsi, 5	# tmp664,
 8047 2ede 4D29EF   		sub	r15, r13	# tmp662, _766
 8048 2ee1 48C1E005 		sal	rax, 5	# tmp660,
 8049 2ee5 4D8D7C37 		lea	r15, 32[r15+rsi]	# _768,
 8049      20
 8050 2eea 4801F8   		add	rax, rdi	# ivtmp.503, bitarray
 8051 2eed 4C89FE   		mov	rsi, r15	# tmp867, _768
 8052 2ef0 48F7DB   		neg	rbx	# tmp666
 8053              	.LVL418:
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8054              		.loc 1 649 9 view .LVU2727
 8055 2ef3 4829C6   		sub	rsi, rax	# tmp867, ivtmp.503
 8056 2ef6 48C1E305 		sal	rbx, 5	# tmp667,
 8057              	.LVL419:
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8058              		.loc 1 649 9 view .LVU2728
 8059 2efa 83E620   		and	esi, 32	# tmp867,
 8060 2efd C57D6F2D 		vmovdqa	ymm13, YMMWORD PTR .LC6[rip]	# tmp852,
 8060      00000000 
 8061 2f05 C57D6F35 		vmovdqa	ymm14, YMMWORD PTR .LC8[rip]	# tmp853,
 8061      00000000 
 8062 2f0d 0F848700 		je	.L876	#,
 8062      0000
 8063              	.LVL420:
 8064              	.LBB468:
 650:sieve_extend.c ****             bitvector_t source1 = bitarray_vector[source_vector+1];
 8065              		.loc 1 650 13 is_stmt 1 view .LVU2729
 651:sieve_extend.c ****             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped_vector
 8066              		.loc 1 651 13 view .LVU2730
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8067              		.loc 1 652 13 view .LVU2731
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8068              		.loc 1 653 13 view .LVU2732
 654:sieve_extend.c ****             // copy_word += 4;
 8069              		.loc 1 654 13 view .LVU2733
 8070              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8071              		.loc 1 652 33 is_stmt 0 view .LVU2734
 8072 2f13 C4621536 		vpermd	ymm10, ymm13, ymm5	# tmp1282, tmp852, shuffle1
 8072      D5
 8073              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
GAS LISTING /tmp/ccNeV1of.s 			page 227


 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8074              		.loc 1 653 33 view .LVU2735
 8075 2f18 C4C21536 		vpermd	ymm3, ymm13, ymm12	# tmp1291, tmp852, shuffle2
 8075      DC
 8076              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8077              		.loc 1 652 33 view .LVU2736
 8078 2f1d C4412DFE 		vpaddd	ymm11, ymm10, ymm10	# tmp1283, tmp1282, tmp1282
 8078      DA
 8079              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8080              		.loc 1 653 33 view .LVU2737
 8081 2f22 C565FECB 		vpaddd	ymm9, ymm3, ymm3	# tmp1292, tmp1291, tmp1291
 8082              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8083              		.loc 1 652 33 view .LVU2738
 8084 2f26 C525FE3D 		vpaddd	ymm15, ymm11, YMMWORD PTR .LC7[rip]	# tmp1284, tmp1283,
 8084      00000000 
 8085              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8086              		.loc 1 653 33 view .LVU2739
 8087 2f2e C535FE15 		vpaddd	ymm10, ymm9, YMMWORD PTR .LC7[rip]	# tmp1293, tmp1292,
 8087      00000000 
 8088              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8089              		.loc 1 652 33 view .LVU2740
 8090 2f36 C4C105DB 		vpand	ymm1, ymm15, ymm14	# tmp1287, tmp1284, tmp853
 8090      CE
 8091 2f3b C4E20536 		vpermd	ymm2, ymm15, YMMWORD PTR [rax]	# tmp1285, tmp1284, MEM[base: _757, offset: 0B]
 8091      10
 8092 2f40 C4E20536 		vpermd	ymm7, ymm15, YMMWORD PTR 32[rax]	# tmp1286, tmp1284, MEM[base: _757, offset: 32B]
 8092      7820
 8093 2f46 C4C17576 		vpcmpeqd	ymm0, ymm1, ymm14	# tmp1288, tmp1287, tmp853
 8093      C6
 8094 2f4b C4E36D4C 		vpblendvb	ymm6, ymm2, ymm7, ymm0	# tmp1289, tmp1285, tmp1286, tmp1288
 8094      F700
 8095              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8096              		.loc 1 653 33 view .LVU2741
 8097 2f51 C4C12DDB 		vpand	ymm2, ymm10, ymm14	# tmp1296, tmp1293, tmp853
 8097      D6
 8098 2f56 C4622D36 		vpermd	ymm11, ymm10, YMMWORD PTR [rax]	# tmp1294, tmp1293, MEM[base: _757, offset: 0B]
 8098      18
 8099 2f5b C4622D36 		vpermd	ymm15, ymm10, YMMWORD PTR 32[rax]	# tmp1295, tmp1293, MEM[base: _757, offset: 32B]
 8099      7820
 8100 2f61 C4C16D76 		vpcmpeqd	ymm7, ymm2, ymm14	# tmp1297, tmp1296, tmp853
 8100      FE
 8101              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8102              		.loc 1 652 25 view .LVU2742
 8103 2f66 C4E1F96E 		vmovq	xmm4, rcx	# shift_flipped, shift_flipped
 8103      E1
 8104              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8105              		.loc 1 653 25 view .LVU2743
 8106 2f6b C5FA7E44 		vmovq	xmm0, QWORD PTR 72[rsp]	# shift, %sfp
 8106      2448
GAS LISTING /tmp/ccNeV1of.s 			page 228


 8107              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8108              		.loc 1 653 33 view .LVU2744
 8109 2f71 C4C3254C 		vpblendvb	ymm1, ymm11, ymm15, ymm7	# tmp1298, tmp1294, tmp1295, tmp1297
 8109      CF70
 8110              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8111              		.loc 1 652 25 view .LVU2745
 8112 2f77 C54DD3C4 		vpsrlq	ymm8, ymm6, xmm4	# copy1, tmp1289, shift_flipped
 8113              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8114              		.loc 1 653 25 view .LVU2746
 8115 2f7b C5F5F3F0 		vpsllq	ymm6, ymm1, xmm0	# copy2, tmp1298, shift
 8116              	# sieve_extend.c:654:             bitarray_vector[copy_vector] = copy1 | copy2;
 654:sieve_extend.c ****             // copy_word += 4;
 8117              		.loc 1 654 42 view .LVU2747
 8118 2f7f 488D3418 		lea	rsi, [rax+rbx]	# tmp1281,
 8119 2f83 4883C020 		add	rax, 32	# ivtmp.503,
 8120              	# sieve_extend.c:654:             bitarray_vector[copy_vector] = copy1 | copy2;
 654:sieve_extend.c ****             // copy_word += 4;
 8121              		.loc 1 654 50 view .LVU2748
 8122 2f87 C5BDEBE6 		vpor	ymm4, ymm8, ymm6	# tmp1300, copy1, copy2
 8123              	.LBE468:
 8124              	# sieve_extend.c:649:         for (; copy_vector <= target_vector; copy_vector++, source_vector++ )
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8125              		.loc 1 649 9 view .LVU2749
 8126 2f8b 4C39F8   		cmp	rax, r15	# ivtmp.503, _768
 8127              	.LBB469:
 8128              	# sieve_extend.c:654:             bitarray_vector[copy_vector] = copy1 | copy2;
 654:sieve_extend.c ****             // copy_word += 4;
 8129              		.loc 1 654 42 view .LVU2750
 8130 2f8e C4A17D7F 		vmovdqa	YMMWORD PTR [rsi+r13], ymm4	# MEM[base: _760, index: _766, offset: 0B], tmp1300
 8130      242E
 8131              	.LBE469:
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8132              		.loc 1 649 46 is_stmt 1 view .LVU2751
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8133              		.loc 1 649 16 view .LVU2752
 8134              	# sieve_extend.c:649:         for (; copy_vector <= target_vector; copy_vector++, source_vector++ )
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8135              		.loc 1 649 9 is_stmt 0 view .LVU2753
 8136 2f94 0F84D900 		je	.L577	#,
 8136      0000
 8137              	.L876:
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8138              		.loc 1 649 9 view .LVU2754
 8139 2f9a 4889CE   		mov	rsi, rcx	# shift_flipped, shift_flipped
 8140              	.LVL421:
 8141              	.L576:
 8142              	.LBB470:
 650:sieve_extend.c ****             bitvector_t source1 = bitarray_vector[source_vector+1];
 8143              		.loc 1 650 13 is_stmt 1 discriminator 2 view .LVU2755
 651:sieve_extend.c ****             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped_vector
 8144              		.loc 1 651 13 discriminator 2 view .LVU2756
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8145              		.loc 1 652 13 discriminator 2 view .LVU2757
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
GAS LISTING /tmp/ccNeV1of.s 			page 229


 8146              		.loc 1 653 13 discriminator 2 view .LVU2758
 654:sieve_extend.c ****             // copy_word += 4;
 8147              		.loc 1 654 13 discriminator 2 view .LVU2759
 8148              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8149              		.loc 1 652 33 is_stmt 0 discriminator 2 view .LVU2760
 8150 2f9d C4621536 		vpermd	ymm8, ymm13, ymm5	# tmp670, tmp852, shuffle1
 8150      C5
 8151              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8152              		.loc 1 653 33 discriminator 2 view .LVU2761
 8153 2fa2 C4C21536 		vpermd	ymm1, ymm13, ymm12	# tmp681, tmp852, shuffle2
 8153      CC
 8154              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8155              		.loc 1 652 33 discriminator 2 view .LVU2762
 8156 2fa7 C4C13DFE 		vpaddd	ymm3, ymm8, ymm8	# tmp978, tmp670, tmp670
 8156      D8
 8157              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8158              		.loc 1 653 33 discriminator 2 view .LVU2763
 8159 2fac C5F5FEE1 		vpaddd	ymm4, ymm1, ymm1	# tmp980, tmp681, tmp681
 8160              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8161              		.loc 1 652 33 discriminator 2 view .LVU2764
 8162 2fb0 C565FE3D 		vpaddd	ymm15, ymm3, YMMWORD PTR .LC7[rip]	# tmp979, tmp978,
 8162      00000000 
 8163              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8164              		.loc 1 653 33 discriminator 2 view .LVU2765
 8165 2fb8 C5DDFE1D 		vpaddd	ymm3, ymm4, YMMWORD PTR .LC7[rip]	# tmp981, tmp980,
 8165      00000000 
 8166              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8167              		.loc 1 652 33 discriminator 2 view .LVU2766
 8168 2fc0 C44105DB 		vpand	ymm10, ymm15, ymm14	# tmp676, tmp979, tmp853
 8168      D6
 8169 2fc5 C4620536 		vpermd	ymm11, ymm15, YMMWORD PTR [rax]	# tmp673, tmp979, MEM[base: _757, offset: 0B]
 8169      18
 8170 2fca C4620536 		vpermd	ymm9, ymm15, YMMWORD PTR 32[rax]	# tmp674, tmp979, MEM[base: _757, offset: 32B]
 8170      4820
 8171 2fd0 C4C12D76 		vpcmpeqd	ymm6, ymm10, ymm14	# tmp677, tmp676, tmp853
 8171      F6
 8172              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8173              		.loc 1 653 33 discriminator 2 view .LVU2767
 8174 2fd5 C44165DB 		vpand	ymm8, ymm3, ymm14	# tmp687, tmp981, tmp853
 8174      C6
 8175              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8176              		.loc 1 652 33 discriminator 2 view .LVU2768
 8177 2fda C4C3254C 		vpblendvb	ymm2, ymm11, ymm9, ymm6	# tmp678, tmp673, tmp674, tmp677
 8177      D160
 8178              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8179              		.loc 1 652 25 discriminator 2 view .LVU2769
 8180 2fe0 C4E1F96E 		vmovq	xmm7, rsi	# shift_flipped, shift_flipped
GAS LISTING /tmp/ccNeV1of.s 			page 230


 8180      FE
 8181              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8182              		.loc 1 653 33 discriminator 2 view .LVU2770
 8183 2fe5 C4626536 		vpermd	ymm9, ymm3, YMMWORD PTR [rax]	# tmp684, tmp981, MEM[base: _757, offset: 0B]
 8183      08
 8184 2fea C4626536 		vpermd	ymm11, ymm3, YMMWORD PTR 32[rax]	# tmp685, tmp981, MEM[base: _757, offset: 32B]
 8184      5820
 8185 2ff0 C4413D76 		vpcmpeqd	ymm10, ymm8, ymm14	# tmp688, tmp687, tmp853
 8185      D6
 8186              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8187              		.loc 1 652 25 discriminator 2 view .LVU2771
 8188 2ff5 C5EDD3C7 		vpsrlq	ymm0, ymm2, xmm7	# copy1, tmp678, shift_flipped
 8189              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8190              		.loc 1 653 25 discriminator 2 view .LVU2772
 8191 2ff9 C5FA7E7C 		vmovq	xmm7, QWORD PTR 72[rsp]	# shift, %sfp
 8191      2448
 8192              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8193              		.loc 1 653 33 discriminator 2 view .LVU2773
 8194 2fff C4C3354C 		vpblendvb	ymm2, ymm9, ymm11, ymm10	# tmp689, tmp684, tmp685, tmp688
 8194      D3A0
 8195              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8196              		.loc 1 653 25 discriminator 2 view .LVU2774
 8197 3005 C5EDF3CF 		vpsllq	ymm1, ymm2, xmm7	# copy2, tmp689, shift
 8198              	# sieve_extend.c:654:             bitarray_vector[copy_vector] = copy1 | copy2;
 654:sieve_extend.c ****             // copy_word += 4;
 8199              		.loc 1 654 42 discriminator 2 view .LVU2775
 8200 3009 488D0C18 		lea	rcx, [rax+rbx]	# tmp668,
 8201              	# sieve_extend.c:654:             bitarray_vector[copy_vector] = copy1 | copy2;
 654:sieve_extend.c ****             // copy_word += 4;
 8202              		.loc 1 654 50 discriminator 2 view .LVU2776
 8203 300d C5FDEBC1 		vpor	ymm0, ymm0, ymm1	# tmp691, copy1, copy2
 8204              	# sieve_extend.c:654:             bitarray_vector[copy_vector] = copy1 | copy2;
 654:sieve_extend.c ****             // copy_word += 4;
 8205              		.loc 1 654 42 discriminator 2 view .LVU2777
 8206 3011 C4A17D7F 		vmovdqa	YMMWORD PTR [rcx+r13], ymm0	# MEM[base: _760, index: _766, offset: 0B], tmp691
 8206      0429
 8207              	.LVL422:
 654:sieve_extend.c ****             // copy_word += 4;
 8208              		.loc 1 654 42 discriminator 2 view .LVU2778
 8209              	.LBE470:
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8210              		.loc 1 649 46 is_stmt 1 discriminator 2 view .LVU2779
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8211              		.loc 1 649 16 discriminator 2 view .LVU2780
 8212              	.LBB471:
 8213              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8214              		.loc 1 652 25 is_stmt 0 discriminator 2 view .LVU2781
 8215 3017 C461F96E 		vmovq	xmm11, rsi	# shift_flipped, shift_flipped
 8215      DE
 8216              	# sieve_extend.c:651:             bitvector_t source1 = bitarray_vector[source_vector+1];
 651:sieve_extend.c ****             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped_vector
GAS LISTING /tmp/ccNeV1of.s 			page 231


 8217              		.loc 1 651 25 discriminator 2 view .LVU2782
 8218 301c C5FD6F60 		vmovdqa	ymm4, YMMWORD PTR 64[rax]	# source1, MEM[base: _757, offset: 32B]
 8218      40
 8219              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8220              		.loc 1 652 33 discriminator 2 view .LVU2783
 8221 3021 C4620536 		vpermd	ymm9, ymm15, YMMWORD PTR 32[rax]	# tmp989, tmp979, MEM[base: _757, offset: 0B]
 8221      4820
 8222              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8223              		.loc 1 653 33 discriminator 2 view .LVU2784
 8224 3027 C4E26536 		vpermd	ymm2, ymm3, YMMWORD PTR 32[rax]	# tmp998, tmp981, MEM[base: _757, offset: 0B]
 8224      5020
 8225              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8226              		.loc 1 652 33 discriminator 2 view .LVU2785
 8227 302d C4620536 		vpermd	ymm15, ymm15, ymm4	# tmp990, tmp979, source1
 8227      FC
 8228              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8229              		.loc 1 653 33 discriminator 2 view .LVU2786
 8230 3032 C4E26536 		vpermd	ymm3, ymm3, ymm4	# tmp999, tmp981, source1
 8230      DC
 8231              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8232              		.loc 1 652 33 discriminator 2 view .LVU2787
 8233 3037 C4C3354C 		vpblendvb	ymm6, ymm9, ymm15, ymm6	# tmp993, tmp989, tmp990, tmp677
 8233      F760
 8234              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8235              		.loc 1 653 25 discriminator 2 view .LVU2788
 8236 303d C5FA7E7C 		vmovq	xmm7, QWORD PTR 72[rsp]	# shift, %sfp
 8236      2448
 8237              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8238              		.loc 1 653 33 discriminator 2 view .LVU2789
 8239 3043 C4636D4C 		vpblendvb	ymm10, ymm2, ymm3, ymm10	# tmp1002, tmp998, tmp999, tmp688
 8239      D3A0
 8240              	# sieve_extend.c:652:             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8241              		.loc 1 652 25 discriminator 2 view .LVU2790
 8242 3049 C4414DD3 		vpsrlq	ymm8, ymm6, xmm11	# copy1, tmp993, shift_flipped
 8242      C3
 8243              	# sieve_extend.c:653:             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) <
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8244              		.loc 1 653 25 discriminator 2 view .LVU2791
 8245 304e C5ADF3CF 		vpsllq	ymm1, ymm10, xmm7	# copy2, tmp1002, shift
 8246 3052 488D4820 		lea	rcx, 32[rax]	# tmp871,
 650:sieve_extend.c ****             bitvector_t source1 = bitarray_vector[source_vector+1];
 8247              		.loc 1 650 13 is_stmt 1 discriminator 2 view .LVU2792
 651:sieve_extend.c ****             bitvector_t copy1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped_vector
 8248              		.loc 1 651 13 discriminator 2 view .LVU2793
 652:sieve_extend.c ****             bitvector_t copy2 = __builtin_shuffle(source0,source1,shuffle2) << shift_vector;
 8249              		.loc 1 652 13 discriminator 2 view .LVU2794
 653:sieve_extend.c ****             bitarray_vector[copy_vector] = copy1 | copy2;
 8250              		.loc 1 653 13 discriminator 2 view .LVU2795
 654:sieve_extend.c ****             // copy_word += 4;
GAS LISTING /tmp/ccNeV1of.s 			page 232


 8251              		.loc 1 654 13 discriminator 2 view .LVU2796
 8252 3056 4883C040 		add	rax, 64	# ivtmp.503,
 8253              	# sieve_extend.c:654:             bitarray_vector[copy_vector] = copy1 | copy2;
 654:sieve_extend.c ****             // copy_word += 4;
 8254              		.loc 1 654 50 is_stmt 0 discriminator 2 view .LVU2797
 8255 305a C5BDEBC1 		vpor	ymm0, ymm8, ymm1	# tmp1004, copy1, copy2
 8256              	# sieve_extend.c:654:             bitarray_vector[copy_vector] = copy1 | copy2;
 654:sieve_extend.c ****             // copy_word += 4;
 8257              		.loc 1 654 42 discriminator 2 view .LVU2798
 8258 305e 4801D9   		add	rcx, rbx	# tmp985, tmp667
 8259 3061 C4A17D7F 		vmovdqa	YMMWORD PTR [rcx+r13], ymm0	# MEM[base: _760, index: _766, offset: 0B], tmp1004
 8259      0429
 8260              	.LBE471:
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8261              		.loc 1 649 46 is_stmt 1 discriminator 2 view .LVU2799
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8262              		.loc 1 649 16 discriminator 2 view .LVU2800
 8263              	# sieve_extend.c:649:         for (; copy_vector <= target_vector; copy_vector++, source_vector++ )
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8264              		.loc 1 649 9 is_stmt 0 discriminator 2 view .LVU2801
 8265 3067 4C39F8   		cmp	rax, r15	# ivtmp.503, _768
 8266 306a 0F852DFF 		jne	.L576	#,
 8266      FFFF
 649:sieve_extend.c ****             bitvector_t source0 = bitarray_vector[source_vector];
 8267              		.loc 1 649 9 discriminator 2 view .LVU2802
 8268 3070 4889F1   		mov	rcx, rsi	# shift_flipped, shift_flipped
 8269              	.LVL423:
 8270              	.L577:
 659:sieve_extend.c ****         for (; copy_word <= target_word; copy_word++, source_word++ ) {
 8271              		.loc 1 659 9 is_stmt 1 view .LVU2803
 8272              	# sieve_extend.c:659:         target_word = target_vector*4;
 659:sieve_extend.c ****         for (; copy_word <= target_word; copy_word++, source_word++ ) {
 8273              		.loc 1 659 21 is_stmt 0 view .LVU2804
 8274 3073 49C1E602 		sal	r14, 2	# target_word,
 8275              	.LVL424:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8276              		.loc 1 660 9 is_stmt 1 view .LVU2805
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8277              		.loc 1 660 16 view .LVU2806
 8278              	# sieve_extend.c:660:         for (; copy_word <= target_word; copy_word++, source_word++ ) {
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8279              		.loc 1 660 9 is_stmt 0 view .LVU2807
 8280 3077 4889D0   		mov	rax, rdx	# tmp.415, copy_word
 8281 307a 4939D6   		cmp	r14, rdx	# target_word, copy_word
 8282 307d 0F82F507 		jb	.L575	#,
 8282      0000
 8283              	.LVL425:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8284              		.loc 1 660 9 view .LVU2808
 8285 3083 4A8B34DF 		mov	rsi, QWORD PTR [rdi+r11*8]	# D__lsm0.464, *_95
 8286 3087 4D89F3   		mov	r11, r14	# tmp862, target_word
 8287              	.LVL426:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8288              		.loc 1 660 9 view .LVU2809
 8289 308a 4929D3   		sub	r11, rdx	# tmp862, copy_word
 8290 308d 498D4601 		lea	rax, 1[r14]	# tmp.415,
 8291              	.LVL427:
GAS LISTING /tmp/ccNeV1of.s 			page 233


 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8292              		.loc 1 660 9 view .LVU2810
 8293 3091 4183E303 		and	r11d, 3	# tmp863,
 8294 3095 0F848500 		je	.L585	#,
 8294      0000
 8295              	.LBB472:
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8296              		.loc 1 661 13 is_stmt 1 view .LVU2811
 8297              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8298              		.loc 1 661 57 is_stmt 0 view .LVU2812
 8299 309b C4E2B3F7 		shrx	rbx, rsi, r9	# _62, D__lsm0.464, _16
 8299      DE
 8300              	.LVL428:
 8301              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8302              		.loc 1 661 86 view .LVU2813
 8303 30a0 4A8B34D7 		mov	rsi, QWORD PTR [rdi+r10*8]	# D__lsm0.464, MEM[base: bitarray_116(D), index: _63, step: 8, offs
 8304              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8305              		.loc 1 661 102 view .LVU2814
 8306 30a4 C462B9F7 		shlx	r12, rsi, r8	# tmp1257, D__lsm0.464, _12
 8306      E6
 8307              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8308              		.loc 1 661 23 view .LVU2815
 8309 30a9 4C09E3   		or	rbx, r12	# shouldbe, tmp1257
 8310              	.LVL429:
 662:sieve_extend.c ****             debug printf("Copy_word = %ju\n",copy_word);
 8311              		.loc 1 662 13 is_stmt 1 view .LVU2816
 8312              	# sieve_extend.c:662:             bitword_t asis = bitarray[copy_word];
 662:sieve_extend.c ****             debug printf("Copy_word = %ju\n",copy_word);
 8313              		.loc 1 662 23 is_stmt 0 view .LVU2817
 8314 30ac 4C8B24D7 		mov	r12, QWORD PTR [rdi+rdx*8]	# asis, MEM[base: bitarray_116(D), index: copy_word_235, step: 8, o
 8315              	.LVL430:
 663:sieve_extend.c ****             if (shouldbe != asis) {
 8316              		.loc 1 663 13 is_stmt 1 view .LVU2818
 664:sieve_extend.c ****                 printf("ERROR expected at copy_word %ju\n", copy_word);
 8317              		.loc 1 664 13 view .LVU2819
 8318              	# sieve_extend.c:664:             if (shouldbe != asis) {
 664:sieve_extend.c ****                 printf("ERROR expected at copy_word %ju\n", copy_word);
 8319              		.loc 1 664 16 is_stmt 0 view .LVU2820
 8320 30b0 4C39E3   		cmp	rbx, r12	# shouldbe, asis
 8321 30b3 0F85070A 		jne	.L856	#,
 8321      0000
 676:sieve_extend.c ****         }
 8322              		.loc 1 676 13 is_stmt 1 view .LVU2821
 8323              	.LBE472:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8324              		.loc 1 660 42 view .LVU2822
 8325              	.LVL431:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8326              		.loc 1 660 16 view .LVU2823
 8327 30b9 4883C201 		add	rdx, 1	# copy_word,
 8328              	.LVL432:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8329              		.loc 1 660 16 is_stmt 0 view .LVU2824
GAS LISTING /tmp/ccNeV1of.s 			page 234


 8330 30bd 4983FB01 		cmp	r11, 1	# tmp863,
 8331 30c1 4D8D5201 		lea	r10, 1[r10]	# tmp848,
 8332              	.LVL433:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8333              		.loc 1 660 16 view .LVU2825
 8334 30c5 7459     		je	.L585	#,
 8335 30c7 4983FB02 		cmp	r11, 2	# tmp863,
 8336 30cb 7426     		je	.L798	#,
 8337              	.LVL434:
 8338              	.LBB493:
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8339              		.loc 1 661 13 is_stmt 1 view .LVU2826
 8340              	# sieve_extend.c:662:             bitword_t asis = bitarray[copy_word];
 662:sieve_extend.c ****             debug printf("Copy_word = %ju\n",copy_word);
 8341              		.loc 1 662 23 is_stmt 0 view .LVU2827
 8342 30cd 4C8B24D7 		mov	r12, QWORD PTR [rdi+rdx*8]	# asis, MEM[base: bitarray_116(D), index: copy_word_235, step: 8, o
 8343              	.LVL435:
 8344              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8345              		.loc 1 661 57 view .LVU2828
 8346 30d1 C462B3F7 		shrx	r13, rsi, r9	# _62, D__lsm0.464, _16
 8346      EE
 8347              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8348              		.loc 1 661 86 view .LVU2829
 8349 30d6 4A8B34D7 		mov	rsi, QWORD PTR [rdi+r10*8]	# D__lsm0.464, MEM[base: bitarray_116(D), index: _63, step: 8, offs
 8350              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8351              		.loc 1 661 102 view .LVU2830
 8352 30da C4E2B9F7 		shlx	rbx, rsi, r8	# tmp1261, D__lsm0.464, _12
 8352      DE
 8353              	.LVL436:
 8354              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8355              		.loc 1 661 23 view .LVU2831
 8356 30df 4C09EB   		or	rbx, r13	# shouldbe, _62
 8357              	.LVL437:
 662:sieve_extend.c ****             debug printf("Copy_word = %ju\n",copy_word);
 8358              		.loc 1 662 13 is_stmt 1 view .LVU2832
 663:sieve_extend.c ****             if (shouldbe != asis) {
 8359              		.loc 1 663 13 view .LVU2833
 664:sieve_extend.c ****                 printf("ERROR expected at copy_word %ju\n", copy_word);
 8360              		.loc 1 664 13 view .LVU2834
 8361              	# sieve_extend.c:664:             if (shouldbe != asis) {
 664:sieve_extend.c ****                 printf("ERROR expected at copy_word %ju\n", copy_word);
 8362              		.loc 1 664 16 is_stmt 0 view .LVU2835
 8363 30e2 4C39E3   		cmp	rbx, r12	# shouldbe, asis
 8364 30e5 0F85D509 		jne	.L856	#,
 8364      0000
 676:sieve_extend.c ****         }
 8365              		.loc 1 676 13 is_stmt 1 view .LVU2836
 8366              	.LBE493:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8367              		.loc 1 660 42 view .LVU2837
 8368              	.LVL438:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8369              		.loc 1 660 16 view .LVU2838
GAS LISTING /tmp/ccNeV1of.s 			page 235


 8370 30eb 4883C201 		add	rdx, 1	# copy_word,
 8371              	.LVL439:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8372              		.loc 1 660 16 is_stmt 0 view .LVU2839
 8373 30ef 4D8D5201 		lea	r10, 1[r10]	# tmp848,
 8374              	.LVL440:
 8375              	.L798:
 8376              	.LBB494:
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8377              		.loc 1 661 13 is_stmt 1 view .LVU2840
 8378              	# sieve_extend.c:662:             bitword_t asis = bitarray[copy_word];
 662:sieve_extend.c ****             debug printf("Copy_word = %ju\n",copy_word);
 8379              		.loc 1 662 23 is_stmt 0 view .LVU2841
 8380 30f3 4C8B24D7 		mov	r12, QWORD PTR [rdi+rdx*8]	# asis, MEM[base: bitarray_116(D), index: copy_word_235, step: 8, o
 8381              	.LVL441:
 8382              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8383              		.loc 1 661 57 view .LVU2842
 8384 30f7 C462B3F7 		shrx	r15, rsi, r9	# _62, D__lsm0.464, _16
 8384      FE
 8385              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8386              		.loc 1 661 86 view .LVU2843
 8387 30fc 4A8B34D7 		mov	rsi, QWORD PTR [rdi+r10*8]	# D__lsm0.464, MEM[base: bitarray_116(D), index: _63, step: 8, offs
 8388              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8389              		.loc 1 661 102 view .LVU2844
 8390 3100 C4E2B9F7 		shlx	rbx, rsi, r8	# tmp1265, D__lsm0.464, _12
 8390      DE
 8391              	.LVL442:
 8392              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8393              		.loc 1 661 23 view .LVU2845
 8394 3105 4C09FB   		or	rbx, r15	# shouldbe, _62
 8395              	.LVL443:
 662:sieve_extend.c ****             debug printf("Copy_word = %ju\n",copy_word);
 8396              		.loc 1 662 13 is_stmt 1 view .LVU2846
 663:sieve_extend.c ****             if (shouldbe != asis) {
 8397              		.loc 1 663 13 view .LVU2847
 664:sieve_extend.c ****                 printf("ERROR expected at copy_word %ju\n", copy_word);
 8398              		.loc 1 664 13 view .LVU2848
 8399              	# sieve_extend.c:664:             if (shouldbe != asis) {
 664:sieve_extend.c ****                 printf("ERROR expected at copy_word %ju\n", copy_word);
 8400              		.loc 1 664 16 is_stmt 0 view .LVU2849
 8401 3108 4C39E3   		cmp	rbx, r12	# shouldbe, asis
 8402 310b 0F85AF09 		jne	.L856	#,
 8402      0000
 676:sieve_extend.c ****         }
 8403              		.loc 1 676 13 is_stmt 1 view .LVU2850
 8404              	.LBE494:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8405              		.loc 1 660 42 view .LVU2851
 8406              	.LVL444:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8407              		.loc 1 660 16 view .LVU2852
 8408 3111 4883C201 		add	rdx, 1	# copy_word,
 8409              	.LVL445:
GAS LISTING /tmp/ccNeV1of.s 			page 236


 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8410              		.loc 1 660 16 is_stmt 0 view .LVU2853
 8411 3115 4D8D5201 		lea	r10, 1[r10]	# tmp848,
 8412              	.LVL446:
 8413 3119 0F1F8000 		.p2align 4
 8413      000000
 8414              		.p2align 3
 8415              	.L585:
 8416              	.LBB495:
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8417              		.loc 1 661 13 is_stmt 1 view .LVU2854
 8418              	# sieve_extend.c:662:             bitword_t asis = bitarray[copy_word];
 662:sieve_extend.c ****             debug printf("Copy_word = %ju\n",copy_word);
 8419              		.loc 1 662 23 is_stmt 0 view .LVU2855
 8420 3120 4C8B24D7 		mov	r12, QWORD PTR [rdi+rdx*8]	# asis, MEM[base: bitarray_116(D), index: copy_word_235, step: 8, o
 8421              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8422              		.loc 1 661 57 view .LVU2856
 8423 3124 C4E2B3F7 		shrx	rsi, rsi, r9	# _62, D__lsm0.464, _16
 8423      F6
 8424              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8425              		.loc 1 661 86 view .LVU2857
 8426 3129 4E8B2CD7 		mov	r13, QWORD PTR [rdi+r10*8]	# D__lsm0.464, MEM[base: bitarray_116(D), index: _63, step: 8, offs
 8427              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8428              		.loc 1 661 102 view .LVU2858
 8429 312d C4C2B9F7 		shlx	rbx, r13, r8	# tmp1010, D__lsm0.464, _12
 8429      DD
 8430              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8431              		.loc 1 661 23 view .LVU2859
 8432 3132 4809F3   		or	rbx, rsi	# shouldbe, _62
 8433              	.LVL447:
 662:sieve_extend.c ****             debug printf("Copy_word = %ju\n",copy_word);
 8434              		.loc 1 662 13 is_stmt 1 view .LVU2860
 663:sieve_extend.c ****             if (shouldbe != asis) {
 8435              		.loc 1 663 13 view .LVU2861
 664:sieve_extend.c ****                 printf("ERROR expected at copy_word %ju\n", copy_word);
 8436              		.loc 1 664 13 view .LVU2862
 8437              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8438              		.loc 1 661 86 is_stmt 0 view .LVU2863
 8439 3135 4D89D3   		mov	r11, r10	# tmp.414, tmp848
 8440              	# sieve_extend.c:664:             if (shouldbe != asis) {
 664:sieve_extend.c ****                 printf("ERROR expected at copy_word %ju\n", copy_word);
 8441              		.loc 1 664 16 view .LVU2864
 8442 3138 4C39E3   		cmp	rbx, r12	# shouldbe, asis
 8443 313b 0F857F09 		jne	.L856	#,
 8443      0000
 676:sieve_extend.c ****         }
 8444              		.loc 1 676 13 is_stmt 1 view .LVU2865
 8445              	.LBE495:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8446              		.loc 1 660 42 view .LVU2866
 8447              	# sieve_extend.c:660:         for (; copy_word <= target_word; copy_word++, source_word++ ) {
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
GAS LISTING /tmp/ccNeV1of.s 			page 237


 8448              		.loc 1 660 9 is_stmt 0 view .LVU2867
 8449 3141 4939D6   		cmp	r14, rdx	# target_word, copy_word
 8450              	# sieve_extend.c:660:         for (; copy_word <= target_word; copy_word++, source_word++ ) {
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8451              		.loc 1 660 51 view .LVU2868
 8452 3144 4C8D7A01 		lea	r15, 1[rdx]	# copy_word,
 8453              	.LVL448:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8454              		.loc 1 660 16 is_stmt 1 view .LVU2869
 8455              	# sieve_extend.c:660:         for (; copy_word <= target_word; copy_word++, source_word++ ) {
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8456              		.loc 1 660 9 is_stmt 0 view .LVU2870
 8457 3148 0F842207 		je	.L887	#,
 8457      0000
 8458              	.LBB496:
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8459              		.loc 1 661 13 is_stmt 1 view .LVU2871
 8460              	# sieve_extend.c:662:             bitword_t asis = bitarray[copy_word];
 662:sieve_extend.c ****             debug printf("Copy_word = %ju\n",copy_word);
 8461              		.loc 1 662 23 is_stmt 0 view .LVU2872
 8462 314e 4E8B24FF 		mov	r12, QWORD PTR [rdi+r15*8]	# asis, MEM[base: bitarray_116(D), index: copy_word_235, step: 8, o
 8463              	.LVL449:
 8464              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8465              		.loc 1 661 57 view .LVU2873
 8466 3152 C442B3F7 		shrx	r11, r13, r9	# _62, D__lsm0.464, _16
 8466      DD
 8467              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8468              		.loc 1 661 86 view .LVU2874
 8469 3157 4A8B74D7 		mov	rsi, QWORD PTR 8[rdi+r10*8]	# D__lsm0.464, MEM[base: bitarray_116(D), index: _63, step: 8, off
 8469      08
 8470              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8471              		.loc 1 661 102 view .LVU2875
 8472 315c C4E2B9F7 		shlx	rbx, rsi, r8	# tmp692, D__lsm0.464, _12
 8472      DE
 8473              	.LVL450:
 8474              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8475              		.loc 1 661 23 view .LVU2876
 8476 3161 4C09DB   		or	rbx, r11	# shouldbe, _62
 8477              	.LVL451:
 662:sieve_extend.c ****             debug printf("Copy_word = %ju\n",copy_word);
 8478              		.loc 1 662 13 is_stmt 1 view .LVU2877
 663:sieve_extend.c ****             if (shouldbe != asis) {
 8479              		.loc 1 663 13 view .LVU2878
 664:sieve_extend.c ****                 printf("ERROR expected at copy_word %ju\n", copy_word);
 8480              		.loc 1 664 13 view .LVU2879
 8481              	.LBE496:
 8482 3164 4C89FA   		mov	rdx, r15	# copy_word, copy_word
 8483              	.LBB497:
 8484              	# sieve_extend.c:664:             if (shouldbe != asis) {
 664:sieve_extend.c ****                 printf("ERROR expected at copy_word %ju\n", copy_word);
 8485              		.loc 1 664 16 is_stmt 0 view .LVU2880
 8486 3167 4C39E3   		cmp	rbx, r12	# shouldbe, asis
 8487 316a 0F855009 		jne	.L856	#,
GAS LISTING /tmp/ccNeV1of.s 			page 238


 8487      0000
 676:sieve_extend.c ****         }
 8488              		.loc 1 676 13 is_stmt 1 view .LVU2881
 8489              	.LBE497:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8490              		.loc 1 660 42 view .LVU2882
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8491              		.loc 1 660 16 view .LVU2883
 8492              	.LBB498:
 8493              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8494              		.loc 1 661 57 is_stmt 0 view .LVU2884
 8495 3170 C462B3F7 		shrx	r12, rsi, r9	# _62, D__lsm0.464, _16
 8495      E6
 8496              	.LVL452:
 8497              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8498              		.loc 1 661 86 view .LVU2885
 8499 3175 4E8B6CD7 		mov	r13, QWORD PTR 16[rdi+r10*8]	# D__lsm0.464, MEM[base: bitarray_116(D), index: _63, step: 8, of
 8499      10
 8500              	.LBE498:
 8501 317a 498D5701 		lea	rdx, 1[r15]	# copy_word,
 8502              	.LVL453:
 8503              	.LBB499:
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8504              		.loc 1 661 13 is_stmt 1 view .LVU2886
 8505              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8506              		.loc 1 661 102 is_stmt 0 view .LVU2887
 8507 317e C4C2B9F7 		shlx	rbx, r13, r8	# tmp1272, D__lsm0.464, _12
 8507      DD
 8508              	.LVL454:
 8509              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8510              		.loc 1 661 23 view .LVU2888
 8511 3183 4C09E3   		or	rbx, r12	# shouldbe, _62
 8512              	.LVL455:
 662:sieve_extend.c ****             debug printf("Copy_word = %ju\n",copy_word);
 8513              		.loc 1 662 13 is_stmt 1 view .LVU2889
 8514              	# sieve_extend.c:662:             bitword_t asis = bitarray[copy_word];
 662:sieve_extend.c ****             debug printf("Copy_word = %ju\n",copy_word);
 8515              		.loc 1 662 23 is_stmt 0 view .LVU2890
 8516 3186 4C8B24D7 		mov	r12, QWORD PTR [rdi+rdx*8]	# asis, MEM[base: bitarray_116(D), index: copy_word_235, step: 8, o
 8517              	.LVL456:
 663:sieve_extend.c ****             if (shouldbe != asis) {
 8518              		.loc 1 663 13 is_stmt 1 view .LVU2891
 664:sieve_extend.c ****                 printf("ERROR expected at copy_word %ju\n", copy_word);
 8519              		.loc 1 664 13 view .LVU2892
 8520              	# sieve_extend.c:664:             if (shouldbe != asis) {
 664:sieve_extend.c ****                 printf("ERROR expected at copy_word %ju\n", copy_word);
 8521              		.loc 1 664 16 is_stmt 0 view .LVU2893
 8522 318a 4C39E3   		cmp	rbx, r12	# shouldbe, asis
 8523 318d 0F852D09 		jne	.L856	#,
 8523      0000
 676:sieve_extend.c ****         }
 8524              		.loc 1 676 13 is_stmt 1 view .LVU2894
 8525              	.LBE499:
GAS LISTING /tmp/ccNeV1of.s 			page 239


 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8526              		.loc 1 660 42 view .LVU2895
 8527              	.LVL457:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8528              		.loc 1 660 16 view .LVU2896
 8529              	.LBB500:
 8530              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8531              		.loc 1 661 86 is_stmt 0 view .LVU2897
 8532 3193 4A8B74D7 		mov	rsi, QWORD PTR 24[rdi+r10*8]	# D__lsm0.464, MEM[base: bitarray_116(D), index: _63, step: 8, of
 8532      18
 8533              	.LBE500:
 8534 3198 498D5702 		lea	rdx, 2[r15]	# copy_word,
 8535              	.LVL458:
 8536              	.LBB501:
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8537              		.loc 1 661 13 is_stmt 1 view .LVU2898
 8538              	# sieve_extend.c:662:             bitword_t asis = bitarray[copy_word];
 662:sieve_extend.c ****             debug printf("Copy_word = %ju\n",copy_word);
 8539              		.loc 1 662 23 is_stmt 0 view .LVU2899
 8540 319c 4C8B24D7 		mov	r12, QWORD PTR [rdi+rdx*8]	# asis, MEM[base: bitarray_116(D), index: copy_word_235, step: 8, o
 8541              	.LVL459:
 8542              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8543              		.loc 1 661 57 view .LVU2900
 8544 31a0 C442B3F7 		shrx	r11, r13, r9	# _62, D__lsm0.464, _16
 8544      DD
 8545              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8546              		.loc 1 661 102 view .LVU2901
 8547 31a5 C4E2B9F7 		shlx	rbx, rsi, r8	# tmp1277, D__lsm0.464, _12
 8547      DE
 8548              	.LVL460:
 8549              	# sieve_extend.c:661:             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (
 661:sieve_extend.c ****             bitword_t asis = bitarray[copy_word];
 8550              		.loc 1 661 23 view .LVU2902
 8551 31aa 4C09DB   		or	rbx, r11	# shouldbe, _62
 8552              	.LVL461:
 662:sieve_extend.c ****             debug printf("Copy_word = %ju\n",copy_word);
 8553              		.loc 1 662 13 is_stmt 1 view .LVU2903
 663:sieve_extend.c ****             if (shouldbe != asis) {
 8554              		.loc 1 663 13 view .LVU2904
 664:sieve_extend.c ****                 printf("ERROR expected at copy_word %ju\n", copy_word);
 8555              		.loc 1 664 13 view .LVU2905
 8556              	# sieve_extend.c:664:             if (shouldbe != asis) {
 664:sieve_extend.c ****                 printf("ERROR expected at copy_word %ju\n", copy_word);
 8557              		.loc 1 664 16 is_stmt 0 view .LVU2906
 8558 31ad 4C39E3   		cmp	rbx, r12	# shouldbe, asis
 8559 31b0 0F850A09 		jne	.L856	#,
 8559      0000
 676:sieve_extend.c ****         }
 8560              		.loc 1 676 13 is_stmt 1 view .LVU2907
 8561              	.LBE501:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
 8562              		.loc 1 660 42 view .LVU2908
 8563              	.LVL462:
 660:sieve_extend.c ****             bitword_t shouldbe = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+1
GAS LISTING /tmp/ccNeV1of.s 			page 240


 8564              		.loc 1 660 16 view .LVU2909
 8565 31b6 498D5703 		lea	rdx, 3[r15]	# copy_word,
 8566 31ba 4D8D5204 		lea	r10, 4[r10]	# tmp848,
 8567 31be E95DFFFF 		jmp	.L585	#
 8567      FF
 8568              	.LVL463:
 8569              		.p2align 4,,7
 8570 31c3 0F1F4400 		.p2align 3
 8570      00
 8571              	.L608:
 8572              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8573              		.loc 1 684 9 is_stmt 0 view .LVU2910
 8574 31c8 4889C3   		mov	rbx, rax	# copy_word, tmp.415
 8575 31cb 4D89DD   		mov	r13, r11	# source_word, tmp.414
 8576 31ce 4D8D5301 		lea	r10, 1[r11]	# tmp1036,
 8577              	.LVL464:
 8578              	.L588:
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8579              		.loc 1 684 9 view .LVU2911
 8580 31d2 4829D6   		sub	rsi, rdx	# niters.411, prolog_loop_niters.410
 8581 31d5 C441796E 		vmovd	xmm14, r8d	# _12, _12
 8581      F0
 8582 31da 4989F6   		mov	r14, rsi	# bnd.412, niters.411
 8583 31dd 4801D0   		add	rax, rdx	# tmp730, prolog_loop_niters.410
 8584 31e0 49C1EE02 		shr	r14, 2	# bnd.412,
 8585 31e4 4901D3   		add	r11, rdx	# tmp725, prolog_loop_niters.410
 8586 31e7 49C1E605 		sal	r14, 5	# _750,
 8587 31eb 4901D2   		add	r10, rdx	# tmp728, prolog_loop_niters.410
 8588 31ee 4D8D46E0 		lea	r8, -32[r14]	# tmp858,
 8589 31f2 488D14C7 		lea	rdx, [rdi+rax*8]	# vectp.426,
 8590 31f6 31C0     		xor	eax, eax	# ivtmp.481
 8591 31f8 4E8D1CDF 		lea	r11, [rdi+r11*8]	# vectp.417,
 8592 31fc 49C1E805 		shr	r8, 5	# tmp856,
 8593 3200 4E8D14D7 		lea	r10, [rdi+r10*8]	# vectp.421,
 8594 3204 4983C001 		add	r8, 1	# tmp859,
 8595 3208 C441796E 		vmovd	xmm13, r9d	# _16, _16
 8595      E9
 8596 320d 4183E007 		and	r8d, 7	# tmp860,
 8597 3211 0F845907 		je	.L590	#,
 8597      0000
 8598 3217 4983F801 		cmp	r8, 1	# tmp860,
 8599 321b 0F84F900 		je	.L780	#,
 8599      0000
 8600 3221 4983F802 		cmp	r8, 2	# tmp860,
 8601 3225 0F84CC00 		je	.L781	#,
 8601      0000
 8602 322b 4983F803 		cmp	r8, 3	# tmp860,
 8603 322f 0F849F00 		je	.L782	#,
 8603      0000
 8604 3235 4983F804 		cmp	r8, 4	# tmp860,
 8605 3239 7475     		je	.L783	#,
 8606 323b 4983F805 		cmp	r8, 5	# tmp860,
 8607 323f 744B     		je	.L784	#,
 8608 3241 4983F806 		cmp	r8, 6	# tmp860,
 8609 3245 7421     		je	.L785	#,
 8610              	.LVL465:
GAS LISTING /tmp/ccNeV1of.s 			page 241


 685:sieve_extend.c ****         }
 8611              		.loc 1 685 13 is_stmt 1 view .LVU2912
 8612              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8613              		.loc 1 685 103 is_stmt 0 view .LVU2913
 8614 3247 C4C17E6F 		vmovdqu	ymm4, YMMWORD PTR [r10]	# tmp1697, MEM[base: vectp.421_265, index: ivtmp.481_100, offset: 
 8614      22
 8615 324c B8200000 		mov	eax, 32	# ivtmp.481,
 8615      00
 8616              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8617              		.loc 1 685 58 view .LVU2914
 8618 3251 C4417D6F 		vmovdqa	ymm15, YMMWORD PTR [r11]	# tmp1698, MEM[base: vectp.417_272, index: ivtmp.481_100, offset:
 8618      3B
 8619              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8620              		.loc 1 685 103 view .LVU2915
 8621 3256 C4415DF3 		vpsllq	ymm9, ymm4, xmm14	# vect__78.423, tmp1697, _12
 8621      CE
 8622              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8623              		.loc 1 685 58 view .LVU2916
 8624 325b C4C105D3 		vpsrlq	ymm6, ymm15, xmm13	# vect__73.419, tmp1698, _16
 8624      F5
 8625              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8626              		.loc 1 685 76 view .LVU2917
 8627 3260 C535EBDE 		vpor	ymm11, ymm9, ymm6	# vect__81.424, vect__78.423, vect__73.419
 8628              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8629              		.loc 1 685 33 view .LVU2918
 8630 3264 C57E7F1A 		vmovdqu	YMMWORD PTR [rdx], ymm11	# MEM[base: vectp.426_256, index: ivtmp.481_100, offset: 0B], vec
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8631              		.loc 1 684 52 is_stmt 1 view .LVU2919
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8632              		.loc 1 684 16 view .LVU2920
 8633              	.L785:
 685:sieve_extend.c ****         }
 8634              		.loc 1 685 13 view .LVU2921
 8635              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8636              		.loc 1 685 103 is_stmt 0 view .LVU2922
 8637 3268 C4417E6F 		vmovdqu	ymm8, YMMWORD PTR [r10+rax]	# tmp1699, MEM[base: vectp.421_265, index: ivtmp.481_100, offs
 8637      0402
 8638              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8639              		.loc 1 685 58 view .LVU2923
 8640 326e C4C17D6F 		vmovdqa	ymm3, YMMWORD PTR [r11+rax]	# tmp1700, MEM[base: vectp.417_272, index: ivtmp.481_100, offs
 8640      1C03
 8641              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8642              		.loc 1 685 103 view .LVU2924
 8643 3274 C4C13DF3 		vpsllq	ymm2, ymm8, xmm14	# vect__78.423, tmp1699, _12
 8643      D6
 8644              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8645              		.loc 1 685 58 view .LVU2925
GAS LISTING /tmp/ccNeV1of.s 			page 242


 8646 3279 C44165D3 		vpsrlq	ymm10, ymm3, xmm13	# vect__73.419, tmp1700, _16
 8646      D5
 8647              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8648              		.loc 1 685 76 view .LVU2926
 8649 327e C4C16DEB 		vpor	ymm7, ymm2, ymm10	# vect__81.424, vect__78.423, vect__73.419
 8649      FA
 8650              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8651              		.loc 1 685 33 view .LVU2927
 8652 3283 C5FE7F3C 		vmovdqu	YMMWORD PTR [rdx+rax], ymm7	# MEM[base: vectp.426_256, index: ivtmp.481_100, offset: 0B], 
 8652      02
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8653              		.loc 1 684 52 is_stmt 1 view .LVU2928
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8654              		.loc 1 684 16 view .LVU2929
 8655 3288 4883C020 		add	rax, 32	# ivtmp.481,
 8656              	.L784:
 685:sieve_extend.c ****         }
 8657              		.loc 1 685 13 view .LVU2930
 8658              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8659              		.loc 1 685 103 is_stmt 0 view .LVU2931
 8660 328c C4C17E6F 		vmovdqu	ymm1, YMMWORD PTR [r10+rax]	# tmp1701, MEM[base: vectp.421_265, index: ivtmp.481_100, offs
 8660      0C02
 8661              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8662              		.loc 1 685 58 view .LVU2932
 8663 3292 C4C17D6F 		vmovdqa	ymm5, YMMWORD PTR [r11+rax]	# tmp1702, MEM[base: vectp.417_272, index: ivtmp.481_100, offs
 8663      2C03
 8664              	.LVL466:
 8665              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8666              		.loc 1 685 103 view .LVU2933
 8667 3298 C4C175F3 		vpsllq	ymm0, ymm1, xmm14	# vect__78.423, tmp1701, _12
 8667      C6
 8668              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8669              		.loc 1 685 58 view .LVU2934
 8670 329d C44155D3 		vpsrlq	ymm12, ymm5, xmm13	# vect__73.419, tmp1702, _16
 8670      E5
 8671              	.LVL467:
 8672              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8673              		.loc 1 685 76 view .LVU2935
 8674 32a2 C4C17DEB 		vpor	ymm4, ymm0, ymm12	# vect__81.424, vect__78.423, vect__73.419
 8674      E4
 8675              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8676              		.loc 1 685 33 view .LVU2936
 8677 32a7 C5FE7F24 		vmovdqu	YMMWORD PTR [rdx+rax], ymm4	# MEM[base: vectp.426_256, index: ivtmp.481_100, offset: 0B], 
 8677      02
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8678              		.loc 1 684 52 is_stmt 1 view .LVU2937
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8679              		.loc 1 684 16 view .LVU2938
 8680 32ac 4883C020 		add	rax, 32	# ivtmp.481,
GAS LISTING /tmp/ccNeV1of.s 			page 243


 8681              	.L783:
 685:sieve_extend.c ****         }
 8682              		.loc 1 685 13 view .LVU2939
 8683              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8684              		.loc 1 685 103 is_stmt 0 view .LVU2940
 8685 32b0 C4417E6F 		vmovdqu	ymm9, YMMWORD PTR [r10+rax]	# tmp1703, MEM[base: vectp.421_265, index: ivtmp.481_100, offs
 8685      0C02
 8686              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8687              		.loc 1 685 58 view .LVU2941
 8688 32b6 C4C17D6F 		vmovdqa	ymm6, YMMWORD PTR [r11+rax]	# tmp1704, MEM[base: vectp.417_272, index: ivtmp.481_100, offs
 8688      3403
 8689              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8690              		.loc 1 685 103 view .LVU2942
 8691 32bc C44135F3 		vpsllq	ymm15, ymm9, xmm14	# vect__78.423, tmp1703, _12
 8691      FE
 8692              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8693              		.loc 1 685 58 view .LVU2943
 8694 32c1 C4414DD3 		vpsrlq	ymm11, ymm6, xmm13	# vect__73.419, tmp1704, _16
 8694      DD
 8695              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8696              		.loc 1 685 76 view .LVU2944
 8697 32c6 C44105EB 		vpor	ymm8, ymm15, ymm11	# vect__81.424, vect__78.423, vect__73.419
 8697      C3
 8698              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8699              		.loc 1 685 33 view .LVU2945
 8700 32cb C57E7F04 		vmovdqu	YMMWORD PTR [rdx+rax], ymm8	# MEM[base: vectp.426_256, index: ivtmp.481_100, offset: 0B], 
 8700      02
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8701              		.loc 1 684 52 is_stmt 1 view .LVU2946
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8702              		.loc 1 684 16 view .LVU2947
 8703 32d0 4883C020 		add	rax, 32	# ivtmp.481,
 8704              	.L782:
 685:sieve_extend.c ****         }
 8705              		.loc 1 685 13 view .LVU2948
 8706              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8707              		.loc 1 685 103 is_stmt 0 view .LVU2949
 8708 32d4 C4C17E6F 		vmovdqu	ymm2, YMMWORD PTR [r10+rax]	# tmp1705, MEM[base: vectp.421_265, index: ivtmp.481_100, offs
 8708      1402
 8709              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8710              		.loc 1 685 58 view .LVU2950
 8711 32da C4C17D6F 		vmovdqa	ymm3, YMMWORD PTR [r11+rax]	# tmp1706, MEM[base: vectp.417_272, index: ivtmp.481_100, offs
 8711      1C03
 8712              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8713              		.loc 1 685 103 view .LVU2951
 8714 32e0 C4416DF3 		vpsllq	ymm10, ymm2, xmm14	# vect__78.423, tmp1705, _12
 8714      D6
 8715              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
GAS LISTING /tmp/ccNeV1of.s 			page 244


 685:sieve_extend.c ****         }
 8716              		.loc 1 685 58 view .LVU2952
 8717 32e5 C4C165D3 		vpsrlq	ymm7, ymm3, xmm13	# vect__73.419, tmp1706, _16
 8717      FD
 8718              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8719              		.loc 1 685 76 view .LVU2953
 8720 32ea C5ADEBCF 		vpor	ymm1, ymm10, ymm7	# vect__81.424, vect__78.423, vect__73.419
 8721              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8722              		.loc 1 685 33 view .LVU2954
 8723 32ee C5FE7F0C 		vmovdqu	YMMWORD PTR [rdx+rax], ymm1	# MEM[base: vectp.426_256, index: ivtmp.481_100, offset: 0B], 
 8723      02
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8724              		.loc 1 684 52 is_stmt 1 view .LVU2955
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8725              		.loc 1 684 16 view .LVU2956
 8726 32f3 4883C020 		add	rax, 32	# ivtmp.481,
 8727              	.L781:
 685:sieve_extend.c ****         }
 8728              		.loc 1 685 13 view .LVU2957
 8729              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8730              		.loc 1 685 103 is_stmt 0 view .LVU2958
 8731 32f7 C4C17E6F 		vmovdqu	ymm0, YMMWORD PTR [r10+rax]	# tmp1707, MEM[base: vectp.421_265, index: ivtmp.481_100, offs
 8731      0402
 8732              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8733              		.loc 1 685 58 view .LVU2959
 8734 32fd C4C17D6F 		vmovdqa	ymm5, YMMWORD PTR [r11+rax]	# tmp1708, MEM[base: vectp.417_272, index: ivtmp.481_100, offs
 8734      2C03
 8735              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8736              		.loc 1 685 103 view .LVU2960
 8737 3303 C4417DF3 		vpsllq	ymm12, ymm0, xmm14	# vect__78.423, tmp1707, _12
 8737      E6
 8738              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8739              		.loc 1 685 58 view .LVU2961
 8740 3308 C4C155D3 		vpsrlq	ymm4, ymm5, xmm13	# vect__73.419, tmp1708, _16
 8740      E5
 8741              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8742              		.loc 1 685 76 view .LVU2962
 8743 330d C51DEBCC 		vpor	ymm9, ymm12, ymm4	# vect__81.424, vect__78.423, vect__73.419
 8744              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8745              		.loc 1 685 33 view .LVU2963
 8746 3311 C57E7F0C 		vmovdqu	YMMWORD PTR [rdx+rax], ymm9	# MEM[base: vectp.426_256, index: ivtmp.481_100, offset: 0B], 
 8746      02
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8747              		.loc 1 684 52 is_stmt 1 view .LVU2964
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8748              		.loc 1 684 16 view .LVU2965
 8749 3316 4883C020 		add	rax, 32	# ivtmp.481,
 8750              	.L780:
 685:sieve_extend.c ****         }
GAS LISTING /tmp/ccNeV1of.s 			page 245


 8751              		.loc 1 685 13 view .LVU2966
 8752              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8753              		.loc 1 685 103 is_stmt 0 view .LVU2967
 8754 331a C4417E6F 		vmovdqu	ymm15, YMMWORD PTR [r10+rax]	# tmp1709, MEM[base: vectp.421_265, index: ivtmp.481_100, off
 8754      3C02
 8755              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8756              		.loc 1 685 58 view .LVU2968
 8757 3320 C4417D6F 		vmovdqa	ymm11, YMMWORD PTR [r11+rax]	# tmp1710, MEM[base: vectp.417_272, index: ivtmp.481_100, off
 8757      1C03
 8758              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8759              		.loc 1 685 103 view .LVU2969
 8760 3326 C4C105F3 		vpsllq	ymm6, ymm15, xmm14	# vect__78.423, tmp1709, _12
 8760      F6
 8761              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8762              		.loc 1 685 58 view .LVU2970
 8763 332b C44125D3 		vpsrlq	ymm8, ymm11, xmm13	# vect__73.419, tmp1710, _16
 8763      C5
 8764              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8765              		.loc 1 685 76 view .LVU2971
 8766 3330 C4C14DEB 		vpor	ymm2, ymm6, ymm8	# vect__81.424, vect__78.423, vect__73.419
 8766      D0
 8767              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8768              		.loc 1 685 33 view .LVU2972
 8769 3335 C5FE7F14 		vmovdqu	YMMWORD PTR [rdx+rax], ymm2	# MEM[base: vectp.426_256, index: ivtmp.481_100, offset: 0B], 
 8769      02
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8770              		.loc 1 684 52 is_stmt 1 view .LVU2973
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8771              		.loc 1 684 16 view .LVU2974
 8772 333a 4883C020 		add	rax, 32	# ivtmp.481,
 8773 333e 4C39F0   		cmp	rax, r14	# ivtmp.481, _750
 8774 3341 0F852906 		jne	.L590	#,
 8774      0000
 8775              	.L864:
 8776 3347 4989F1   		mov	r9, rsi	# niters_vector_mult_vf.413, niters.411
 8777 334a 4983E1FC 		and	r9, -4	# niters_vector_mult_vf.413,
 8778 334e 4939F1   		cmp	r9, rsi	# niters_vector_mult_vf.413, niters.411
 8779 3351 4F8D1C29 		lea	r11, [r9+r13]	# tmp.414,
 8780 3355 498D0419 		lea	rax, [r9+rbx]	# tmp.415,
 8781 3359 0F84E000 		je	.L591	#,
 8781      0000
 8782              	.L587:
 8783              	.LVL468:
 685:sieve_extend.c ****         }
 8784              		.loc 1 685 13 view .LVU2975
 8785              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8786              		.loc 1 685 103 is_stmt 0 view .LVU2976
 8787 335f 488B5C24 		mov	rbx, QWORD PTR 72[rsp]	# shift, %sfp
 8787      48
 8788              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
GAS LISTING /tmp/ccNeV1of.s 			page 246


 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8789              		.loc 1 684 61 view .LVU2977
 8790 3364 4C8D4001 		lea	r8, 1[rax]	# copy_word,
 8791              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8792              		.loc 1 684 9 view .LVU2978
 8793 3368 4C8B7424 		mov	r14, QWORD PTR 64[rsp]	# destination_stop_word, %sfp
 8793      40
 8794              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8795              		.loc 1 685 58 view .LVU2979
 8796 336d C422F3F7 		shrx	r10, QWORD PTR [rdi+r11*8], rcx	# tmp742, *_104, shift_flipped
 8796      14DF
 8797              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8798              		.loc 1 685 87 view .LVU2980
 8799 3373 4D8D6B01 		lea	r13, 1[r11]	# _106,
 8800              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8801              		.loc 1 685 103 view .LVU2981
 8802 3377 89DE     		mov	esi, ebx	# tmp1655, shift
 8803 3379 C422C9F7 		shlx	r15, QWORD PTR 8[rdi+r11*8], rsi	# tmp740, *_508, tmp1655
 8803      7CDF08
 8804              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8805              		.loc 1 685 76 view .LVU2982
 8806 3380 4D09D7   		or	r15, r10	# tmp744, tmp742
 8807              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8808              		.loc 1 684 9 view .LVU2983
 8809 3383 4D39F0   		cmp	r8, r14	# copy_word, destination_stop_word
 8810              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8811              		.loc 1 685 76 view .LVU2984
 8812 3386 4C893CC7 		mov	QWORD PTR [rdi+rax*8], r15	# *_33, tmp744
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8813              		.loc 1 684 52 is_stmt 1 view .LVU2985
 8814              	.LVL469:
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8815              		.loc 1 684 16 view .LVU2986
 8816              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8817              		.loc 1 684 9 is_stmt 0 view .LVU2987
 8818 338a 0F87AF00 		ja	.L591	#,
 8818      0000
 685:sieve_extend.c ****         }
 8819              		.loc 1 685 13 is_stmt 1 view .LVU2988
 8820              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8821              		.loc 1 684 61 is_stmt 0 view .LVU2989
 8822 3390 4C8D5002 		lea	r10, 2[rax]	# copy_word,
 8823              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8824              		.loc 1 685 103 view .LVU2990
 8825 3394 89DA     		mov	edx, ebx	# tmp1657, shift
 8826 3396 C422E9F7 		shlx	r15, QWORD PTR 8[rdi+r13*8], rdx	# tmp745, *_402, tmp1657
 8826      7CEF08
GAS LISTING /tmp/ccNeV1of.s 			page 247


 8827              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8828              		.loc 1 685 58 view .LVU2991
 8829 339d 4E8B2CEF 		mov	r13, QWORD PTR [rdi+r13*8]	# *_41, *_41
 8830              	.LVL470:
 685:sieve_extend.c ****         }
 8831              		.loc 1 685 58 view .LVU2992
 8832 33a1 C4C2F3F7 		shrx	rsi, r13, rcx	# tmp747, *_41, shift_flipped
 8832      F5
 8833              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8834              		.loc 1 685 76 view .LVU2993
 8835 33a6 4909F7   		or	r15, rsi	# tmp749, tmp747
 8836              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8837              		.loc 1 684 9 view .LVU2994
 8838 33a9 4D39F2   		cmp	r10, r14	# copy_word, destination_stop_word
 8839              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8840              		.loc 1 685 87 view .LVU2995
 8841 33ac 4D8D4B02 		lea	r9, 2[r11]	# _162,
 8842              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8843              		.loc 1 685 76 view .LVU2996
 8844 33b0 4E893CC7 		mov	QWORD PTR [rdi+r8*8], r15	# *_71, tmp749
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8845              		.loc 1 684 52 is_stmt 1 view .LVU2997
 8846              	.LVL471:
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8847              		.loc 1 684 16 view .LVU2998
 8848              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8849              		.loc 1 684 9 is_stmt 0 view .LVU2999
 8850 33b4 0F878500 		ja	.L591	#,
 8850      0000
 685:sieve_extend.c ****         }
 8851              		.loc 1 685 13 is_stmt 1 view .LVU3000
 8852              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8853              		.loc 1 685 103 is_stmt 0 view .LVU3001
 8854 33ba C422E9F7 		shlx	r15, QWORD PTR 8[rdi+r9*8], rdx	# tmp750, *_284, tmp1659
 8854      7CCF08
 8855              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8856              		.loc 1 685 58 view .LVU3002
 8857 33c1 4E8B0CCF 		mov	r9, QWORD PTR [rdi+r9*8]	# *_79, *_79
 8858              	.LVL472:
 685:sieve_extend.c ****         }
 8859              		.loc 1 685 58 view .LVU3003
 8860 33c5 C442F3F7 		shrx	r13, r9, rcx	# tmp752, *_79, shift_flipped
 8860      E9
 8861              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8862              		.loc 1 685 76 view .LVU3004
 8863 33ca 4D09EF   		or	r15, r13	# tmp754, tmp752
 8864 33cd 4E893CD7 		mov	QWORD PTR [rdi+r10*8], r15	# *_133, tmp754
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
GAS LISTING /tmp/ccNeV1of.s 			page 248


 8865              		.loc 1 684 52 is_stmt 1 view .LVU3005
 8866              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8867              		.loc 1 684 61 is_stmt 0 view .LVU3006
 8868 33d1 4C8D5003 		lea	r10, 3[rax]	# copy_word,
 8869              	.LVL473:
 8870              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8871              		.loc 1 684 9 view .LVU3007
 8872 33d5 4D39D6   		cmp	r14, r10	# destination_stop_word, copy_word
 8873              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8874              		.loc 1 685 87 view .LVU3008
 8875 33d8 4D8D4303 		lea	r8, 3[r11]	# _148,
 8876              	.LVL474:
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8877              		.loc 1 684 16 is_stmt 1 view .LVU3009
 8878              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8879              		.loc 1 684 9 is_stmt 0 view .LVU3010
 8880 33dc 7261     		jb	.L591	#,
 685:sieve_extend.c ****         }
 8881              		.loc 1 685 13 is_stmt 1 view .LVU3011
 8882              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8883              		.loc 1 684 61 is_stmt 0 view .LVU3012
 8884 33de 4C8D6804 		lea	r13, 4[rax]	# copy_word,
 8885              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8886              		.loc 1 685 103 view .LVU3013
 8887 33e2 89DE     		mov	esi, ebx	# tmp1661, shift
 8888 33e4 C4A2C9F7 		shlx	rdx, QWORD PTR 8[rdi+r8*8], rsi	# tmp755, *_547, tmp1661
 8888      54C708
 8889              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8890              		.loc 1 685 58 view .LVU3014
 8891 33eb 4E8B04C7 		mov	r8, QWORD PTR [rdi+r8*8]	# *_542, *_542
 8892              	.LVL475:
 685:sieve_extend.c ****         }
 8893              		.loc 1 685 58 view .LVU3015
 8894 33ef C442F3F7 		shrx	r9, r8, rcx	# tmp757, *_542, shift_flipped
 8894      C8
 8895              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8896              		.loc 1 685 76 view .LVU3016
 8897 33f4 4C09CA   		or	rdx, r9	# tmp759, tmp757
 8898              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8899              		.loc 1 684 9 view .LVU3017
 8900 33f7 4D39EE   		cmp	r14, r13	# destination_stop_word, copy_word
 8901              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8902              		.loc 1 685 87 view .LVU3018
 8903 33fa 4D8D7B04 		lea	r15, 4[r11]	# _545,
 8904              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8905              		.loc 1 685 76 view .LVU3019
GAS LISTING /tmp/ccNeV1of.s 			page 249


 8906 33fe 4A8914D7 		mov	QWORD PTR [rdi+r10*8], rdx	# *_551, tmp759
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8907              		.loc 1 684 52 is_stmt 1 view .LVU3020
 8908              	.LVL476:
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8909              		.loc 1 684 16 view .LVU3021
 8910              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8911              		.loc 1 684 9 is_stmt 0 view .LVU3022
 8912 3402 723B     		jb	.L591	#,
 685:sieve_extend.c ****         }
 8913              		.loc 1 685 13 is_stmt 1 view .LVU3023
 8914              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8915              		.loc 1 684 61 is_stmt 0 view .LVU3024
 8916 3404 4883C005 		add	rax, 5	# copy_word,
 8917              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8918              		.loc 1 685 103 view .LVU3025
 8919 3408 C422C9F7 		shlx	r10, QWORD PTR 8[rdi+r15*8], rsi	# tmp760, *_564, tmp1663
 8919      54FF08
 8920              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8921              		.loc 1 685 58 view .LVU3026
 8922 340f 4E8B3CFF 		mov	r15, QWORD PTR [rdi+r15*8]	# *_559, *_559
 8923              	.LVL477:
 8924              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8925              		.loc 1 685 87 view .LVU3027
 8926 3413 4983C305 		add	r11, 5	# _562,
 8927              	.LVL478:
 8928              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8929              		.loc 1 685 58 view .LVU3028
 8930 3417 C4C2F3F7 		shrx	rdx, r15, rcx	# tmp762, *_559, shift_flipped
 8930      D7
 8931              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8932              		.loc 1 685 76 view .LVU3029
 8933 341c 4909D2   		or	r10, rdx	# tmp764, tmp762
 8934 341f 4E8914EF 		mov	QWORD PTR [rdi+r13*8], r10	# *_568, tmp764
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8935              		.loc 1 684 52 is_stmt 1 view .LVU3030
 8936              	.LVL479:
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8937              		.loc 1 684 16 view .LVU3031
 8938              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8939              		.loc 1 684 9 is_stmt 0 view .LVU3032
 8940 3423 4939C6   		cmp	r14, rax	# destination_stop_word, copy_word
 8941 3426 7217     		jb	.L591	#,
 685:sieve_extend.c ****         }
 8942              		.loc 1 685 13 is_stmt 1 view .LVU3033
 8943              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8944              		.loc 1 685 103 is_stmt 0 view .LVU3034
 8945 3428 C4A2E1F7 		shlx	rbx, QWORD PTR 8[rdi+r11*8], rbx	# tmp765, *_292, tmp1665
GAS LISTING /tmp/ccNeV1of.s 			page 250


 8945      5CDF08
 8946              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8947              		.loc 1 685 58 view .LVU3035
 8948 342f 4E8B1CDF 		mov	r11, QWORD PTR [rdi+r11*8]	# *_297, *_297
 8949 3433 C4C2F3F7 		shrx	rcx, r11, rcx	# tmp767, *_297, shift_flipped
 8949      CB
 8950              	.LVL480:
 8951              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 8952              		.loc 1 685 76 view .LVU3036
 8953 3438 4809D9   		or	rcx, rbx	# tmp769, tmp765
 8954 343b 48890CC7 		mov	QWORD PTR [rdi+rax*8], rcx	# *_288, tmp769
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8955              		.loc 1 684 52 is_stmt 1 view .LVU3037
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8956              		.loc 1 684 16 view .LVU3038
 8957              	.L591:
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 8958              		.loc 1 684 16 is_stmt 0 view .LVU3039
 8959 343f 49C1E403 		sal	r12, 3	# _364,
 8960              	.L586:
 687:sieve_extend.c ****     }
 8961              		.loc 1 687 9 is_stmt 1 view .LVU3040
 8962              	# sieve_extend.c:687:         bitarray[copy_word] &= chopmask(destination_stop);
 687:sieve_extend.c ****     }
 8963              		.loc 1 687 32 is_stmt 0 view .LVU3041
 8964 3443 448B7424 		mov	r14d, DWORD PTR 56[rsp]	# tmp770, %sfp
 8964      38
 8965 3448 48C7C0FF 		mov	rax, -1	# tmp773,
 8965      FFFFFF
 8966 344f 41F7D6   		not	r14d	# tmp770
 8967 3452 C4628BF7 		shrx	r8, rax, r14	# tmp772, tmp773, tmp770
 8967      C0
 8968              	# sieve_extend.c:687:         bitarray[copy_word] &= chopmask(destination_stop);
 687:sieve_extend.c ****     }
 8969              		.loc 1 687 29 view .LVU3042
 8970 3457 4E210427 		and	QWORD PTR [rdi+r12], r8	# *_83, tmp772
 8971 345b C5F877   		vzeroupper
 8972              	.LVL481:
 8973              	.L561:
 687:sieve_extend.c ****     }
 8974              		.loc 1 687 29 view .LVU3043
 8975              	.LBE467:
 8976              	# sieve_extend.c:698: }
 698:sieve_extend.c **** 
 8977              		.loc 1 698 1 view .LVU3044
 8978 345e 488B8424 		mov	rax, QWORD PTR 216[rsp]	# tmp1558, D.7142
 8978      D8000000 
 8979 3466 64483304 		xor	rax, QWORD PTR fs:40	# tmp1558, MEM[(<address-space-1> long unsigned int *)40B]
 8979      25280000 
 8979      00
 8980 346f 0F855E0D 		jne	.L888	#,
 8980      0000
 8981 3475 488D65D8 		lea	rsp, -40[rbp]	#,
 8982              	.LVL482:
 698:sieve_extend.c **** 
GAS LISTING /tmp/ccNeV1of.s 			page 251


 8983              		.loc 1 698 1 view .LVU3045
 8984 3479 5B       		pop	rbx	#
 8985 347a 415C     		pop	r12	#
 8986 347c 415D     		pop	r13	#
 8987 347e 415E     		pop	r14	#
 8988 3480 415F     		pop	r15	#
 8989 3482 5D       		pop	rbp	#
 8990              		.cfi_remember_state
 8991              		.cfi_def_cfa 7, 8
 8992              	.LVL483:
 698:sieve_extend.c **** 
 8993              		.loc 1 698 1 view .LVU3046
 8994 3483 C3       		ret	
 8995              	.LVL484:
 8996              		.p2align 4,,7
 8997 3484 0F1F4000 		.p2align 3
 8998              	.L564:
 8999              		.cfi_restore_state
 9000              	.LBB503:
 690:sieve_extend.c ****         bitword_t* copy_ptr   = &bitarray[copy_word];
 9001              		.loc 1 690 9 is_stmt 1 view .LVU3047
 691:sieve_extend.c ****         bitword_t* source_ptr = &bitarray[source_word];
 9002              		.loc 1 691 9 view .LVU3048
 692:sieve_extend.c ****         bitword_t* dest_ptr   = &bitarray[destination_stop_word];
 9003              		.loc 1 692 9 view .LVU3049
 693:sieve_extend.c ****         counter_t size_word_ptr   = dest_ptr - copy_ptr;
 9004              		.loc 1 693 9 view .LVU3050
 694:sieve_extend.c ****         for (; i <= size_word_ptr; i++)
 9005              		.loc 1 694 9 view .LVU3051
 9006              	# sieve_extend.c:693:         bitword_t* dest_ptr   = &bitarray[destination_stop_word];
 693:sieve_extend.c ****         counter_t size_word_ptr   = dest_ptr - copy_ptr;
 9007              		.loc 1 693 42 is_stmt 0 view .LVU3052
 9008 3488 4C8B5424 		mov	r10, QWORD PTR 64[rsp]	# destination_stop_word, %sfp
 9008      40
 9009 348d 498D5528 		lea	rdx, 40[r13]	# tmp777,
 9010              	.LVL485:
 693:sieve_extend.c ****         counter_t size_word_ptr   = dest_ptr - copy_ptr;
 9011              		.loc 1 693 42 view .LVU3053
 9012 3491 488D4328 		lea	rax, 40[rbx]	# tmp780,
 9013 3495 49C1E203 		sal	r10, 3	# destination_stop_word,
 9014              	# sieve_extend.c:694:         counter_t size_word_ptr   = dest_ptr - copy_ptr;
 694:sieve_extend.c ****         for (; i <= size_word_ptr; i++)
 9015              		.loc 1 694 46 view .LVU3054
 9016 3499 4D29E2   		sub	r10, r12	# tmp775, _364
 9017 349c 49C1FA03 		sar	r10, 3	# tmp776,
 9018              	.LVL486:
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9019              		.loc 1 695 9 is_stmt 1 view .LVU3055
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9020              		.loc 1 695 16 view .LVU3056
 9021 34a0 4939D4   		cmp	r12, rdx	# _364, tmp777
 9022 34a3 410F9DC7 		setge	r15b	#, tmp779
 9023              	.LVL487:
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9024              		.loc 1 695 16 is_stmt 0 view .LVU3057
 9025 34a7 4C39E8   		cmp	rax, r13	# tmp780, _9
 9026 34aa 410F9EC5 		setle	r13b	#, tmp782
GAS LISTING /tmp/ccNeV1of.s 			page 252


 9027 34ae 4508EF   		or	r15b, r13b	# tmp779, tmp782
 9028 34b1 0F841909 		je	.L609	#,
 9028      0000
 9029 34b7 4983FA05 		cmp	r10, 5	# tmp776,
 9030 34bb 0F860F09 		jbe	.L609	#,
 9030      0000
 9031 34c1 4889F0   		mov	rax, rsi	# tmp786, _10
 9032              	# sieve_extend.c:690:         register counter_t i = 0;
 690:sieve_extend.c ****         bitword_t* copy_ptr   = &bitarray[copy_word];
 9033              		.loc 1 690 28 view .LVU3058
 9034 34c4 4531DB   		xor	r11d, r11d	# i
 9035 34c7 48C1E803 		shr	rax, 3	# tmp786,
 9036 34cb 48F7D8   		neg	rax	# tmp787
 9037 34ce 83E003   		and	eax, 3	# prolog_loop_niters.448,
 9038 34d1 7464     		je	.L593	#,
 696:sieve_extend.c ****     }
 9039              		.loc 1 696 13 is_stmt 1 view .LVU3059
 9040              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9041              		.loc 1 696 85 is_stmt 0 view .LVU3060
 9042 34d3 4C8B7C24 		mov	r15, QWORD PTR 72[rsp]	# shift, %sfp
 9042      48
 9043              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9044              		.loc 1 696 46 view .LVU3061
 9045 34d8 C4E2F3F7 		shrx	rdx, QWORD PTR [rsi], rcx	# tmp788, *_10, shift_flipped
 9045      16
 9046              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9047              		.loc 1 696 85 view .LVU3062
 9048 34dd 4589FB   		mov	r11d, r15d	# tmp1670, shift
 9049 34e0 C462A1F7 		shlx	r13, QWORD PTR 8[rsi], r11	# tmp790, MEM[(uint64_t *)_10 + 8B], tmp1670
 9049      6E08
 9050              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9051              		.loc 1 696 64 view .LVU3063
 9052 34e6 4C09EA   		or	rdx, r13	# tmp792, tmp790
 9053 34e9 4883F801 		cmp	rax, 1	# prolog_loop_niters.448,
 9054 34ed 4889541F 		mov	QWORD PTR 8[rdi+rbx], rdx	# *_725, tmp792
 9054      08
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9055              		.loc 1 695 36 is_stmt 1 view .LVU3064
 9056              	.LVL488:
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9057              		.loc 1 695 16 view .LVU3065
 9058              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9059              		.loc 1 696 81 is_stmt 0 view .LVU3066
 9060 34f2 41BB0100 		mov	r11d, 1	# i,
 9060      0000
 9061 34f8 743D     		je	.L593	#,
 696:sieve_extend.c ****     }
 9062              		.loc 1 696 13 is_stmt 1 view .LVU3067
 9063              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9064              		.loc 1 696 85 is_stmt 0 view .LVU3068
 9065 34fa 4589FB   		mov	r11d, r15d	# tmp1671, shift
GAS LISTING /tmp/ccNeV1of.s 			page 253


 9066              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9067              		.loc 1 696 46 view .LVU3069
 9068 34fd C4E2F3F7 		shrx	rdx, QWORD PTR 8[rsi], rcx	# tmp793, MEM[(uint64_t *)_10 + 8B], shift_flipped
 9068      5608
 9069              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9070              		.loc 1 696 85 view .LVU3070
 9071 3503 C462A1F7 		shlx	r13, QWORD PTR 16[rsi], r11	# tmp795, MEM[(uint64_t *)_10 + 16B], tmp1671
 9071      6E10
 9072              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9073              		.loc 1 696 64 view .LVU3071
 9074 3509 4C09EA   		or	rdx, r13	# tmp797, tmp795
 9075 350c 4883F803 		cmp	rax, 3	# prolog_loop_niters.448,
 9076              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9077              		.loc 1 696 81 view .LVU3072
 9078 3510 41BB0200 		mov	r11d, 2	# i,
 9078      0000
 9079              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9080              		.loc 1 696 64 view .LVU3073
 9081 3516 4889541F 		mov	QWORD PTR 16[rdi+rbx], rdx	# *_742, tmp797
 9081      10
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9082              		.loc 1 695 36 is_stmt 1 view .LVU3074
 9083              	.LVL489:
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9084              		.loc 1 695 16 view .LVU3075
 9085 351b 751A     		jne	.L593	#,
 696:sieve_extend.c ****     }
 9086              		.loc 1 696 13 view .LVU3076
 9087              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9088              		.loc 1 696 46 is_stmt 0 view .LVU3077
 9089 351d C4E2F3F7 		shrx	rdx, QWORD PTR 16[rsi], rcx	# tmp798, MEM[(uint64_t *)_10 + 16B], shift_flipped
 9089      5610
 9090              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9091              		.loc 1 696 85 view .LVU3078
 9092 3523 C46281F7 		shlx	r15, QWORD PTR 24[rsi], r15	# tmp800, MEM[(uint64_t *)_10 + 24B], tmp1672
 9092      7E18
 9093              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9094              		.loc 1 696 64 view .LVU3079
 9095 3529 4C09FA   		or	rdx, r15	# tmp802, tmp800
 9096              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9097              		.loc 1 696 81 view .LVU3080
 9098 352c 41BB0300 		mov	r11d, 3	# i,
 9098      0000
 9099              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9100              		.loc 1 696 64 view .LVU3081
 9101 3532 4889541F 		mov	QWORD PTR 24[rdi+rbx], rdx	# *_483, tmp802
 9101      18
GAS LISTING /tmp/ccNeV1of.s 			page 254


 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9102              		.loc 1 695 36 is_stmt 1 view .LVU3082
 9103              	.LVL490:
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9104              		.loc 1 695 16 view .LVU3083
 9105              	.L593:
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9106              		.loc 1 695 16 is_stmt 0 view .LVU3084
 9107 3537 4C89D3   		mov	rbx, r10	# tmp803, tmp776
 9108 353a C4C1796E 		vmovd	xmm0, r8d	# _12, _12
 9108      C0
 9109 353f 4829C3   		sub	rbx, rax	# tmp803, prolog_loop_niters.448
 9110 3542 498D14C4 		lea	rdx, [r12+rax*8]	# tmp810,
 9111 3546 4C8D7B01 		lea	r15, 1[rbx]	# niters.449,
 9112 354a 4D8D2C06 		lea	r13, [r14+rax]	# tmp804,
 9113 354e 4C897C24 		mov	QWORD PTR 64[rsp], r15	# %sfp, niters.449
 9113      40
 9114              	.LVL491:
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9115              		.loc 1 695 16 view .LVU3085
 9116 3553 4D8D7406 		lea	r14, 1[r14+rax]	# tmp807,
 9116      01
 9117              	.LVL492:
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9118              		.loc 1 695 16 view .LVU3086
 9119 3558 49C1EF02 		shr	r15, 2	# bnd.450,
 9120 355c 4801FA   		add	rdx, rdi	# vectp.463, bitarray
 9121 355f 49C1E705 		sal	r15, 5	# _794,
 9122              	# sieve_extend.c:690:         register counter_t i = 0;
 690:sieve_extend.c ****         bitword_t* copy_ptr   = &bitarray[copy_word];
 9123              		.loc 1 690 28 view .LVU3087
 9124 3563 31C0     		xor	eax, eax	# ivtmp.541
 9125 3565 4D8D47E0 		lea	r8, -32[r15]	# tmp890,
 9126 3569 4E8D2CEF 		lea	r13, [rdi+r13*8]	# vectp.454,
 9127 356d C4C1796E 		vmovd	xmm1, r9d	# _16, _16
 9127      C9
 9128 3572 4A8D1CF7 		lea	rbx, [rdi+r14*8]	# vectp.458,
 9129 3576 49C1E805 		shr	r8, 5	# tmp888,
 9130 357a 4983C001 		add	r8, 1	# tmp891,
 9131 357e 4183E007 		and	r8d, 7	# tmp892,
 9132 3582 0F840201 		je	.L595	#,
 9132      0000
 9133 3588 4983F801 		cmp	r8, 1	# tmp892,
 9134 358c 0F84CE00 		je	.L786	#,
 9134      0000
 9135 3592 4983F802 		cmp	r8, 2	# tmp892,
 9136 3596 0F84A300 		je	.L787	#,
 9136      0000
 9137 359c 4983F803 		cmp	r8, 3	# tmp892,
 9138 35a0 747B     		je	.L788	#,
 9139 35a2 4983F804 		cmp	r8, 4	# tmp892,
 9140 35a6 7454     		je	.L789	#,
 9141 35a8 4983F805 		cmp	r8, 5	# tmp892,
 9142 35ac 742C     		je	.L790	#,
 9143 35ae 4983F806 		cmp	r8, 6	# tmp892,
 9144 35b2 0F85C00B 		jne	.L889	#,
 9144      0000
GAS LISTING /tmp/ccNeV1of.s 			page 255


 9145              	.L791:
 696:sieve_extend.c ****     }
 9146              		.loc 1 696 13 is_stmt 1 view .LVU3088
 9147              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9148              		.loc 1 696 46 is_stmt 0 view .LVU3089
 9149 35b8 C4C17D6F 		vmovdqa	ymm7, YMMWORD PTR 0[r13+rax]	# tmp1730, MEM[base: vectp.454_513, index: ivtmp.541_792, off
 9149      7C0500
 9150              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9151              		.loc 1 696 85 view .LVU3090
 9152 35bf C57E6F0C 		vmovdqu	ymm9, YMMWORD PTR [rbx+rax]	# tmp1731, MEM[base: vectp.458_520, index: ivtmp.541_792, offs
 9152      03
 9153              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9154              		.loc 1 696 46 view .LVU3091
 9155 35c4 C545D3C1 		vpsrlq	ymm8, ymm7, xmm1	# vect__99.456, tmp1730, _16
 9156              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9157              		.loc 1 696 85 view .LVU3092
 9158 35c8 C535F3D0 		vpsllq	ymm10, ymm9, xmm0	# vect__104.460, tmp1731, _12
 9159              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9160              		.loc 1 696 64 view .LVU3093
 9161 35cc C4413DEB 		vpor	ymm11, ymm8, ymm10	# vect__106.461, vect__99.456, vect__104.460
 9161      DA
 9162              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9163              		.loc 1 696 27 view .LVU3094
 9164 35d1 C57E7F1C 		vmovdqu	YMMWORD PTR [rdx+rax], ymm11	# MEM[base: vectp.463_529, index: ivtmp.541_792, offset: 0B],
 9164      02
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9165              		.loc 1 695 36 is_stmt 1 view .LVU3095
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9166              		.loc 1 695 16 view .LVU3096
 9167 35d6 4883C020 		add	rax, 32	# ivtmp.541,
 9168              	.L790:
 696:sieve_extend.c ****     }
 9169              		.loc 1 696 13 view .LVU3097
 9170              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9171              		.loc 1 696 46 is_stmt 0 view .LVU3098
 9172 35da C4417D6F 		vmovdqa	ymm12, YMMWORD PTR 0[r13+rax]	# tmp1732, MEM[base: vectp.454_513, index: ivtmp.541_792, of
 9172      640500
 9173              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9174              		.loc 1 696 85 view .LVU3099
 9175 35e1 C57E6F34 		vmovdqu	ymm14, YMMWORD PTR [rbx+rax]	# tmp1733, MEM[base: vectp.458_520, index: ivtmp.541_792, off
 9175      03
 9176              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9177              		.loc 1 696 46 view .LVU3100
 9178 35e6 C51DD3E9 		vpsrlq	ymm13, ymm12, xmm1	# vect__99.456, tmp1732, _16
 9179              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9180              		.loc 1 696 85 view .LVU3101
 9181 35ea C50DF3F8 		vpsllq	ymm15, ymm14, xmm0	# vect__104.460, tmp1733, _12
GAS LISTING /tmp/ccNeV1of.s 			page 256


 9182              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9183              		.loc 1 696 64 view .LVU3102
 9184 35ee C4C115EB 		vpor	ymm6, ymm13, ymm15	# vect__106.461, vect__99.456, vect__104.460
 9184      F7
 9185              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9186              		.loc 1 696 27 view .LVU3103
 9187 35f3 C5FE7F34 		vmovdqu	YMMWORD PTR [rdx+rax], ymm6	# MEM[base: vectp.463_529, index: ivtmp.541_792, offset: 0B], 
 9187      02
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9188              		.loc 1 695 36 is_stmt 1 view .LVU3104
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9189              		.loc 1 695 16 view .LVU3105
 9190 35f8 4883C020 		add	rax, 32	# ivtmp.541,
 9191              	.L789:
 696:sieve_extend.c ****     }
 9192              		.loc 1 696 13 view .LVU3106
 9193              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9194              		.loc 1 696 46 is_stmt 0 view .LVU3107
 9195 35fc C4C17D6F 		vmovdqa	ymm2, YMMWORD PTR 0[r13+rax]	# tmp1734, MEM[base: vectp.454_513, index: ivtmp.541_792, off
 9195      540500
 9196              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9197              		.loc 1 696 85 view .LVU3108
 9198 3603 C5FE6F2C 		vmovdqu	ymm5, YMMWORD PTR [rbx+rax]	# tmp1735, MEM[base: vectp.458_520, index: ivtmp.541_792, offs
 9198      03
 9199              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9200              		.loc 1 696 46 view .LVU3109
 9201 3608 C5EDD3E1 		vpsrlq	ymm4, ymm2, xmm1	# vect__99.456, tmp1734, _16
 9202              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9203              		.loc 1 696 85 view .LVU3110
 9204 360c C5D5F3D8 		vpsllq	ymm3, ymm5, xmm0	# vect__104.460, tmp1735, _12
 9205              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9206              		.loc 1 696 64 view .LVU3111
 9207 3610 C5DDEBFB 		vpor	ymm7, ymm4, ymm3	# vect__106.461, vect__99.456, vect__104.460
 9208              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9209              		.loc 1 696 27 view .LVU3112
 9210 3614 C5FE7F3C 		vmovdqu	YMMWORD PTR [rdx+rax], ymm7	# MEM[base: vectp.463_529, index: ivtmp.541_792, offset: 0B], 
 9210      02
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9211              		.loc 1 695 36 is_stmt 1 view .LVU3113
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9212              		.loc 1 695 16 view .LVU3114
 9213 3619 4883C020 		add	rax, 32	# ivtmp.541,
 9214              	.L788:
 696:sieve_extend.c ****     }
 9215              		.loc 1 696 13 view .LVU3115
 9216              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9217              		.loc 1 696 46 is_stmt 0 view .LVU3116
 9218 361d C4417D6F 		vmovdqa	ymm8, YMMWORD PTR 0[r13+rax]	# tmp1736, MEM[base: vectp.454_513, index: ivtmp.541_792, off
GAS LISTING /tmp/ccNeV1of.s 			page 257


 9218      440500
 9219              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9220              		.loc 1 696 85 view .LVU3117
 9221 3624 C57E6F14 		vmovdqu	ymm10, YMMWORD PTR [rbx+rax]	# tmp1737, MEM[base: vectp.458_520, index: ivtmp.541_792, off
 9221      03
 9222              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9223              		.loc 1 696 46 view .LVU3118
 9224 3629 C53DD3C9 		vpsrlq	ymm9, ymm8, xmm1	# vect__99.456, tmp1736, _16
 9225              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9226              		.loc 1 696 85 view .LVU3119
 9227 362d C52DF3D8 		vpsllq	ymm11, ymm10, xmm0	# vect__104.460, tmp1737, _12
 9228              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9229              		.loc 1 696 64 view .LVU3120
 9230 3631 C44135EB 		vpor	ymm12, ymm9, ymm11	# vect__106.461, vect__99.456, vect__104.460
 9230      E3
 9231              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9232              		.loc 1 696 27 view .LVU3121
 9233 3636 C57E7F24 		vmovdqu	YMMWORD PTR [rdx+rax], ymm12	# MEM[base: vectp.463_529, index: ivtmp.541_792, offset: 0B],
 9233      02
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9234              		.loc 1 695 36 is_stmt 1 view .LVU3122
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9235              		.loc 1 695 16 view .LVU3123
 9236 363b 4883C020 		add	rax, 32	# ivtmp.541,
 9237              	.L787:
 696:sieve_extend.c ****     }
 9238              		.loc 1 696 13 view .LVU3124
 9239              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9240              		.loc 1 696 46 is_stmt 0 view .LVU3125
 9241 363f C4417D6F 		vmovdqa	ymm13, YMMWORD PTR 0[r13+rax]	# tmp1738, MEM[base: vectp.454_513, index: ivtmp.541_792, of
 9241      6C0500
 9242              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9243              		.loc 1 696 85 view .LVU3126
 9244 3646 C57E6F3C 		vmovdqu	ymm15, YMMWORD PTR [rbx+rax]	# tmp1739, MEM[base: vectp.458_520, index: ivtmp.541_792, off
 9244      03
 9245              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9246              		.loc 1 696 46 view .LVU3127
 9247 364b C515D3F1 		vpsrlq	ymm14, ymm13, xmm1	# vect__99.456, tmp1738, _16
 9248              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9249              		.loc 1 696 85 view .LVU3128
 9250 364f C585F3F0 		vpsllq	ymm6, ymm15, xmm0	# vect__104.460, tmp1739, _12
 9251              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9252              		.loc 1 696 64 view .LVU3129
 9253 3653 C58DEBD6 		vpor	ymm2, ymm14, ymm6	# vect__106.461, vect__99.456, vect__104.460
 9254              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9255              		.loc 1 696 27 view .LVU3130
GAS LISTING /tmp/ccNeV1of.s 			page 258


 9256 3657 C5FE7F14 		vmovdqu	YMMWORD PTR [rdx+rax], ymm2	# MEM[base: vectp.463_529, index: ivtmp.541_792, offset: 0B], 
 9256      02
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9257              		.loc 1 695 36 is_stmt 1 view .LVU3131
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9258              		.loc 1 695 16 view .LVU3132
 9259 365c 4883C020 		add	rax, 32	# ivtmp.541,
 9260              	.L786:
 696:sieve_extend.c ****     }
 9261              		.loc 1 696 13 view .LVU3133
 9262              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9263              		.loc 1 696 46 is_stmt 0 view .LVU3134
 9264 3660 C4C17D6F 		vmovdqa	ymm4, YMMWORD PTR 0[r13+rax]	# tmp1740, MEM[base: vectp.454_513, index: ivtmp.541_792, off
 9264      640500
 9265              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9266              		.loc 1 696 85 view .LVU3135
 9267 3667 C5FE6F2C 		vmovdqu	ymm5, YMMWORD PTR [rbx+rax]	# tmp1741, MEM[base: vectp.458_520, index: ivtmp.541_792, offs
 9267      03
 9268              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9269              		.loc 1 696 46 view .LVU3136
 9270 366c C5DDD3F9 		vpsrlq	ymm7, ymm4, xmm1	# vect__99.456, tmp1740, _16
 9271              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9272              		.loc 1 696 85 view .LVU3137
 9273 3670 C5D5F3D8 		vpsllq	ymm3, ymm5, xmm0	# vect__104.460, tmp1741, _12
 9274              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9275              		.loc 1 696 64 view .LVU3138
 9276 3674 C545EBC3 		vpor	ymm8, ymm7, ymm3	# vect__106.461, vect__99.456, vect__104.460
 9277              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9278              		.loc 1 696 27 view .LVU3139
 9279 3678 C57E7F04 		vmovdqu	YMMWORD PTR [rdx+rax], ymm8	# MEM[base: vectp.463_529, index: ivtmp.541_792, offset: 0B], 
 9279      02
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9280              		.loc 1 695 36 is_stmt 1 view .LVU3140
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9281              		.loc 1 695 16 view .LVU3141
 9282 367d 4883C020 		add	rax, 32	# ivtmp.541,
 9283 3681 4C39F8   		cmp	rax, r15	# ivtmp.541, _794
 9284 3684 0F842C01 		je	.L866	#,
 9284      0000
 9285              	.L595:
 696:sieve_extend.c ****     }
 9286              		.loc 1 696 13 discriminator 2 view .LVU3142
 9287              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9288              		.loc 1 696 46 is_stmt 0 discriminator 2 view .LVU3143
 9289 368a C4417D6F 		vmovdqa	ymm9, YMMWORD PTR 0[r13+rax]	# tmp1676, MEM[base: vectp.454_513, index: ivtmp.541_792, off
 9289      4C0500
 9290              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9291              		.loc 1 696 85 discriminator 2 view .LVU3144
 9292 3691 C57E6F1C 		vmovdqu	ymm11, YMMWORD PTR [rbx+rax]	# tmp1677, MEM[base: vectp.458_520, index: ivtmp.541_792, off
GAS LISTING /tmp/ccNeV1of.s 			page 259


 9292      03
 9293              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9294              		.loc 1 696 46 discriminator 2 view .LVU3145
 9295 3696 C535D3D1 		vpsrlq	ymm10, ymm9, xmm1	# vect__99.456, tmp1676, _16
 9296              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9297              		.loc 1 696 85 discriminator 2 view .LVU3146
 9298 369a C525F3E0 		vpsllq	ymm12, ymm11, xmm0	# vect__104.460, tmp1677, _12
 9299              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9300              		.loc 1 696 64 discriminator 2 view .LVU3147
 9301 369e C4412DEB 		vpor	ymm13, ymm10, ymm12	# vect__106.461, vect__99.456, vect__104.460
 9301      EC
 9302              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9303              		.loc 1 696 27 discriminator 2 view .LVU3148
 9304 36a3 C57E7F2C 		vmovdqu	YMMWORD PTR [rdx+rax], ymm13	# MEM[base: vectp.463_529, index: ivtmp.541_792, offset: 0B],
 9304      02
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9305              		.loc 1 695 36 is_stmt 1 discriminator 2 view .LVU3149
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9306              		.loc 1 695 16 discriminator 2 view .LVU3150
 696:sieve_extend.c ****     }
 9307              		.loc 1 696 13 discriminator 2 view .LVU3151
 9308              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9309              		.loc 1 696 46 is_stmt 0 discriminator 2 view .LVU3152
 9310 36a8 C4417D6F 		vmovdqa	ymm14, YMMWORD PTR 32[r13+rax]	# tmp1678, MEM[base: vectp.454_513, index: ivtmp.541_792, o
 9310      740520
 9311              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9312              		.loc 1 696 85 discriminator 2 view .LVU3153
 9313 36af C5FE6F74 		vmovdqu	ymm6, YMMWORD PTR 32[rbx+rax]	# tmp1679, MEM[base: vectp.458_520, index: ivtmp.541_792, of
 9313      0320
 9314              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9315              		.loc 1 696 46 discriminator 2 view .LVU3154
 9316 36b5 C50DD3F9 		vpsrlq	ymm15, ymm14, xmm1	# vect__99.456, tmp1678, _16
 9317              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9318              		.loc 1 696 85 discriminator 2 view .LVU3155
 9319 36b9 C5CDF3D0 		vpsllq	ymm2, ymm6, xmm0	# vect__104.460, tmp1679, _12
 9320              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9321              		.loc 1 696 64 discriminator 2 view .LVU3156
 9322 36bd C585EBE2 		vpor	ymm4, ymm15, ymm2	# vect__106.461, vect__99.456, vect__104.460
 9323              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9324              		.loc 1 696 27 discriminator 2 view .LVU3157
 9325 36c1 C5FE7F64 		vmovdqu	YMMWORD PTR 32[rdx+rax], ymm4	# MEM[base: vectp.463_529, index: ivtmp.541_792, offset: 0B]
 9325      0220
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9326              		.loc 1 695 36 is_stmt 1 discriminator 2 view .LVU3158
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9327              		.loc 1 695 16 discriminator 2 view .LVU3159
 696:sieve_extend.c ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 260


 9328              		.loc 1 696 13 discriminator 2 view .LVU3160
 9329              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9330              		.loc 1 696 46 is_stmt 0 discriminator 2 view .LVU3161
 9331 36c7 C4C17D6F 		vmovdqa	ymm7, YMMWORD PTR 64[r13+rax]	# tmp1680, MEM[base: vectp.454_513, index: ivtmp.541_792, of
 9331      7C0540
 9332              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9333              		.loc 1 696 85 discriminator 2 view .LVU3162
 9334 36ce C5FE6F6C 		vmovdqu	ymm5, YMMWORD PTR 64[rbx+rax]	# tmp1681, MEM[base: vectp.458_520, index: ivtmp.541_792, of
 9334      0340
 9335              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9336              		.loc 1 696 46 discriminator 2 view .LVU3163
 9337 36d4 C545D3C1 		vpsrlq	ymm8, ymm7, xmm1	# vect__99.456, tmp1680, _16
 9338              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9339              		.loc 1 696 85 discriminator 2 view .LVU3164
 9340 36d8 C5D5F3D8 		vpsllq	ymm3, ymm5, xmm0	# vect__104.460, tmp1681, _12
 9341              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9342              		.loc 1 696 64 discriminator 2 view .LVU3165
 9343 36dc C53DEBCB 		vpor	ymm9, ymm8, ymm3	# vect__106.461, vect__99.456, vect__104.460
 9344              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9345              		.loc 1 696 27 discriminator 2 view .LVU3166
 9346 36e0 C57E7F4C 		vmovdqu	YMMWORD PTR 64[rdx+rax], ymm9	# MEM[base: vectp.463_529, index: ivtmp.541_792, offset: 0B]
 9346      0240
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9347              		.loc 1 695 36 is_stmt 1 discriminator 2 view .LVU3167
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9348              		.loc 1 695 16 discriminator 2 view .LVU3168
 696:sieve_extend.c ****     }
 9349              		.loc 1 696 13 discriminator 2 view .LVU3169
 9350              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9351              		.loc 1 696 46 is_stmt 0 discriminator 2 view .LVU3170
 9352 36e6 C4417D6F 		vmovdqa	ymm10, YMMWORD PTR 96[r13+rax]	# tmp1682, MEM[base: vectp.454_513, index: ivtmp.541_792, o
 9352      540560
 9353              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9354              		.loc 1 696 85 discriminator 2 view .LVU3171
 9355 36ed C57E6F64 		vmovdqu	ymm12, YMMWORD PTR 96[rbx+rax]	# tmp1683, MEM[base: vectp.458_520, index: ivtmp.541_792, o
 9355      0360
 9356              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9357              		.loc 1 696 46 discriminator 2 view .LVU3172
 9358 36f3 C52DD3D9 		vpsrlq	ymm11, ymm10, xmm1	# vect__99.456, tmp1682, _16
 9359              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9360              		.loc 1 696 85 discriminator 2 view .LVU3173
 9361 36f7 C51DF3E8 		vpsllq	ymm13, ymm12, xmm0	# vect__104.460, tmp1683, _12
 9362              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9363              		.loc 1 696 64 discriminator 2 view .LVU3174
 9364 36fb C44125EB 		vpor	ymm14, ymm11, ymm13	# vect__106.461, vect__99.456, vect__104.460
 9364      F5
GAS LISTING /tmp/ccNeV1of.s 			page 261


 9365              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9366              		.loc 1 696 27 discriminator 2 view .LVU3175
 9367 3700 C57E7F74 		vmovdqu	YMMWORD PTR 96[rdx+rax], ymm14	# MEM[base: vectp.463_529, index: ivtmp.541_792, offset: 0B
 9367      0260
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9368              		.loc 1 695 36 is_stmt 1 discriminator 2 view .LVU3176
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9369              		.loc 1 695 16 discriminator 2 view .LVU3177
 696:sieve_extend.c ****     }
 9370              		.loc 1 696 13 discriminator 2 view .LVU3178
 9371              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9372              		.loc 1 696 46 is_stmt 0 discriminator 2 view .LVU3179
 9373 3706 C4417D6F 		vmovdqa	ymm15, YMMWORD PTR 128[r13+rax]	# tmp1684, MEM[base: vectp.454_513, index: ivtmp.541_792, 
 9373      BC058000 
 9373      0000
 9374              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9375              		.loc 1 696 85 discriminator 2 view .LVU3180
 9376 3710 C5FE6F94 		vmovdqu	ymm2, YMMWORD PTR 128[rbx+rax]	# tmp1685, MEM[base: vectp.458_520, index: ivtmp.541_792, o
 9376      03800000 
 9376      00
 9377              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9378              		.loc 1 696 46 discriminator 2 view .LVU3181
 9379 3719 C585D3F1 		vpsrlq	ymm6, ymm15, xmm1	# vect__99.456, tmp1684, _16
 9380              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9381              		.loc 1 696 85 discriminator 2 view .LVU3182
 9382 371d C5EDF3E0 		vpsllq	ymm4, ymm2, xmm0	# vect__104.460, tmp1685, _12
 9383              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9384              		.loc 1 696 64 discriminator 2 view .LVU3183
 9385 3721 C5CDEBFC 		vpor	ymm7, ymm6, ymm4	# vect__106.461, vect__99.456, vect__104.460
 9386              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9387              		.loc 1 696 27 discriminator 2 view .LVU3184
 9388 3725 C5FE7FBC 		vmovdqu	YMMWORD PTR 128[rdx+rax], ymm7	# MEM[base: vectp.463_529, index: ivtmp.541_792, offset: 0B
 9388      02800000 
 9388      00
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9389              		.loc 1 695 36 is_stmt 1 discriminator 2 view .LVU3185
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9390              		.loc 1 695 16 discriminator 2 view .LVU3186
 696:sieve_extend.c ****     }
 9391              		.loc 1 696 13 discriminator 2 view .LVU3187
 9392              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9393              		.loc 1 696 46 is_stmt 0 discriminator 2 view .LVU3188
 9394 372e C4417D6F 		vmovdqa	ymm8, YMMWORD PTR 160[r13+rax]	# tmp1686, MEM[base: vectp.454_513, index: ivtmp.541_792, o
 9394      8405A000 
 9394      0000
 9395              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9396              		.loc 1 696 85 discriminator 2 view .LVU3189
 9397 3738 C5FE6FAC 		vmovdqu	ymm5, YMMWORD PTR 160[rbx+rax]	# tmp1687, MEM[base: vectp.458_520, index: ivtmp.541_792, o
GAS LISTING /tmp/ccNeV1of.s 			page 262


 9397      03A00000 
 9397      00
 9398              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9399              		.loc 1 696 46 discriminator 2 view .LVU3190
 9400 3741 C53DD3C9 		vpsrlq	ymm9, ymm8, xmm1	# vect__99.456, tmp1686, _16
 9401              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9402              		.loc 1 696 85 discriminator 2 view .LVU3191
 9403 3745 C5D5F3D8 		vpsllq	ymm3, ymm5, xmm0	# vect__104.460, tmp1687, _12
 9404              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9405              		.loc 1 696 64 discriminator 2 view .LVU3192
 9406 3749 C535EBD3 		vpor	ymm10, ymm9, ymm3	# vect__106.461, vect__99.456, vect__104.460
 9407              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9408              		.loc 1 696 27 discriminator 2 view .LVU3193
 9409 374d C57E7F94 		vmovdqu	YMMWORD PTR 160[rdx+rax], ymm10	# MEM[base: vectp.463_529, index: ivtmp.541_792, offset: 0
 9409      02A00000 
 9409      00
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9410              		.loc 1 695 36 is_stmt 1 discriminator 2 view .LVU3194
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9411              		.loc 1 695 16 discriminator 2 view .LVU3195
 696:sieve_extend.c ****     }
 9412              		.loc 1 696 13 discriminator 2 view .LVU3196
 9413              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9414              		.loc 1 696 46 is_stmt 0 discriminator 2 view .LVU3197
 9415 3756 C4417D6F 		vmovdqa	ymm11, YMMWORD PTR 192[r13+rax]	# tmp1688, MEM[base: vectp.454_513, index: ivtmp.541_792, 
 9415      9C05C000 
 9415      0000
 9416              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9417              		.loc 1 696 85 discriminator 2 view .LVU3198
 9418 3760 C57E6FAC 		vmovdqu	ymm13, YMMWORD PTR 192[rbx+rax]	# tmp1689, MEM[base: vectp.458_520, index: ivtmp.541_792, 
 9418      03C00000 
 9418      00
 9419              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9420              		.loc 1 696 46 discriminator 2 view .LVU3199
 9421 3769 C525D3E1 		vpsrlq	ymm12, ymm11, xmm1	# vect__99.456, tmp1688, _16
 9422              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9423              		.loc 1 696 85 discriminator 2 view .LVU3200
 9424 376d C515F3F0 		vpsllq	ymm14, ymm13, xmm0	# vect__104.460, tmp1689, _12
 9425              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9426              		.loc 1 696 64 discriminator 2 view .LVU3201
 9427 3771 C4411DEB 		vpor	ymm15, ymm12, ymm14	# vect__106.461, vect__99.456, vect__104.460
 9427      FE
 9428              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9429              		.loc 1 696 27 discriminator 2 view .LVU3202
 9430 3776 C57E7FBC 		vmovdqu	YMMWORD PTR 192[rdx+rax], ymm15	# MEM[base: vectp.463_529, index: ivtmp.541_792, offset: 0
 9430      02C00000 
 9430      00
GAS LISTING /tmp/ccNeV1of.s 			page 263


 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9431              		.loc 1 695 36 is_stmt 1 discriminator 2 view .LVU3203
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9432              		.loc 1 695 16 discriminator 2 view .LVU3204
 696:sieve_extend.c ****     }
 9433              		.loc 1 696 13 discriminator 2 view .LVU3205
 9434              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9435              		.loc 1 696 46 is_stmt 0 discriminator 2 view .LVU3206
 9436 377f C4C17D6F 		vmovdqa	ymm6, YMMWORD PTR 224[r13+rax]	# tmp1690, MEM[base: vectp.454_513, index: ivtmp.541_792, o
 9436      B405E000 
 9436      0000
 9437              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9438              		.loc 1 696 85 discriminator 2 view .LVU3207
 9439 3789 C5FE6FA4 		vmovdqu	ymm4, YMMWORD PTR 224[rbx+rax]	# tmp1691, MEM[base: vectp.458_520, index: ivtmp.541_792, o
 9439      03E00000 
 9439      00
 9440              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9441              		.loc 1 696 46 discriminator 2 view .LVU3208
 9442 3792 C5CDD3D1 		vpsrlq	ymm2, ymm6, xmm1	# vect__99.456, tmp1690, _16
 9443              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9444              		.loc 1 696 85 discriminator 2 view .LVU3209
 9445 3796 C5DDF3F8 		vpsllq	ymm7, ymm4, xmm0	# vect__104.460, tmp1691, _12
 9446              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9447              		.loc 1 696 64 discriminator 2 view .LVU3210
 9448 379a C56DEBC7 		vpor	ymm8, ymm2, ymm7	# vect__106.461, vect__99.456, vect__104.460
 9449              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9450              		.loc 1 696 27 discriminator 2 view .LVU3211
 9451 379e C57E7F84 		vmovdqu	YMMWORD PTR 224[rdx+rax], ymm8	# MEM[base: vectp.463_529, index: ivtmp.541_792, offset: 0B
 9451      02E00000 
 9451      00
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9452              		.loc 1 695 36 is_stmt 1 discriminator 2 view .LVU3212
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9453              		.loc 1 695 16 discriminator 2 view .LVU3213
 9454 37a7 48050001 		add	rax, 256	# ivtmp.541,
 9454      0000
 9455 37ad 4C39F8   		cmp	rax, r15	# ivtmp.541, _794
 9456 37b0 0F85D4FE 		jne	.L595	#,
 9456      FFFF
 9457              	.L866:
 9458 37b6 4C8B4C24 		mov	r9, QWORD PTR 64[rsp]	# niters.449, %sfp
 9458      40
 9459 37bb 4D89CF   		mov	r15, r9	# niters_vector_mult_vf.451, niters.449
 9460 37be 4983E7FC 		and	r15, -4	# niters_vector_mult_vf.451,
 9461 37c2 4D01FB   		add	r11, r15	# tmp.452, niters_vector_mult_vf.451
 9462 37c5 4D39F9   		cmp	r9, r15	# niters.449, niters_vector_mult_vf.451
 9463 37c8 0F848200 		je	.L883	#,
 9463      0000
 9464              	.LVL493:
 696:sieve_extend.c ****     }
 9465              		.loc 1 696 13 view .LVU3214
GAS LISTING /tmp/ccNeV1of.s 			page 264


 9466              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9467              		.loc 1 696 85 is_stmt 0 view .LVU3215
 9468 37ce 488B5C24 		mov	rbx, QWORD PTR 72[rsp]	# shift, %sfp
 9468      48
 9469              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9470              		.loc 1 696 81 view .LVU3216
 9471 37d3 4D8D7301 		lea	r14, 1[r11]	# _688,
 9472              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9473              		.loc 1 696 27 view .LVU3217
 9474 37d7 4C01E7   		add	rdi, r12	# tmp819, _364
 9475              	.LVL494:
 9476              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9477              		.loc 1 696 42 view .LVU3218
 9478 37da 4E8D2CDD 		lea	r13, 0[0+r11*8]	# _684,
 9478      00000000 
 9479              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9480              		.loc 1 696 46 view .LVU3219
 9481 37e2 C422F3F7 		shrx	r8, QWORD PTR [rsi+r11*8], rcx	# tmp823, *_685, shift_flipped
 9481      04DE
 9482              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9483              		.loc 1 696 85 view .LVU3220
 9484 37e8 89DA     		mov	edx, ebx	# tmp1694, shift
 9485 37ea C422E9F7 		shlx	r12, QWORD PTR 8[rsi+r13], rdx	# tmp821, *_690, tmp1694
 9485      642E08
 9486              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9487              		.loc 1 696 64 view .LVU3221
 9488 37f1 4D09C4   		or	r12, r8	# tmp825, tmp823
 9489              	# sieve_extend.c:695:         for (; i <= size_word_ptr; i++)
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9490              		.loc 1 695 9 view .LVU3222
 9491 37f4 4D39F2   		cmp	r10, r14	# tmp776, _688
 9492              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9493              		.loc 1 696 64 view .LVU3223
 9494 37f7 4E89242F 		mov	QWORD PTR [rdi+r13], r12	# *_694, tmp825
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9495              		.loc 1 695 36 is_stmt 1 view .LVU3224
 9496              	.LVL495:
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9497              		.loc 1 695 16 view .LVU3225
 9498              	# sieve_extend.c:695:         for (; i <= size_word_ptr; i++)
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9499              		.loc 1 695 9 is_stmt 0 view .LVU3226
 9500 37fb 7253     		jb	.L883	#,
 696:sieve_extend.c ****     }
 9501              		.loc 1 696 13 is_stmt 1 view .LVU3227
 9502              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9503              		.loc 1 696 81 is_stmt 0 view .LVU3228
 9504 37fd 4983C302 		add	r11, 2	# _703,
GAS LISTING /tmp/ccNeV1of.s 			page 265


 9505              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9506              		.loc 1 696 42 view .LVU3229
 9507 3801 4E8D0CF5 		lea	r9, 0[0+r14*8]	# _699,
 9507      00000000 
 9508              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9509              		.loc 1 696 46 view .LVU3230
 9510 3809 4E8B2CF6 		mov	r13, QWORD PTR [rsi+r14*8]	# *_700, *_700
 9511              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9512              		.loc 1 696 85 view .LVU3231
 9513 380d 89D8     		mov	eax, ebx	# tmp1695, shift
 9514 380f C422F9F7 		shlx	r15, QWORD PTR 8[rsi+r9], rax	# tmp828, *_705, tmp1695
 9514      7C0E08
 9515              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9516              		.loc 1 696 46 view .LVU3232
 9517 3816 C442F3F7 		shrx	r14, r13, rcx	# tmp830, *_700, shift_flipped
 9517      F5
 9518              	.LVL496:
 9519              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9520              		.loc 1 696 64 view .LVU3233
 9521 381b 4D09F7   		or	r15, r14	# tmp832, tmp830
 9522              	# sieve_extend.c:695:         for (; i <= size_word_ptr; i++)
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9523              		.loc 1 695 9 view .LVU3234
 9524 381e 4D39DA   		cmp	r10, r11	# tmp776, _703
 9525              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9526              		.loc 1 696 64 view .LVU3235
 9527 3821 4E893C0F 		mov	QWORD PTR [rdi+r9], r15	# *_709, tmp832
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9528              		.loc 1 695 36 is_stmt 1 view .LVU3236
 9529              	.LVL497:
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9530              		.loc 1 695 16 view .LVU3237
 9531              	# sieve_extend.c:695:         for (; i <= size_word_ptr; i++)
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9532              		.loc 1 695 9 is_stmt 0 view .LVU3238
 9533 3825 7229     		jb	.L883	#,
 696:sieve_extend.c ****     }
 9534              		.loc 1 696 13 is_stmt 1 view .LVU3239
 9535              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9536              		.loc 1 696 42 is_stmt 0 view .LVU3240
 9537 3827 4E8D14DD 		lea	r10, 0[0+r11*8]	# _495,
 9537      00000000 
 9538              	.LVL498:
 9539              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9540              		.loc 1 696 85 view .LVU3241
 9541 382f C422E1F7 		shlx	r12, QWORD PTR 8[rsi+r10], rbx	# tmp835, *_501, tmp1696
 9541      641608
 9542              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 266


 9543              		.loc 1 696 46 view .LVU3242
 9544 3836 4A8B34DE 		mov	rsi, QWORD PTR [rsi+r11*8]	# *_496, *_496
 9545              	.LVL499:
 696:sieve_extend.c ****     }
 9546              		.loc 1 696 46 view .LVU3243
 9547 383a C4E2F3F7 		shrx	rcx, rsi, rcx	# tmp837, *_496, shift_flipped
 9547      CE
 9548              	.LVL500:
 9549              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 9550              		.loc 1 696 64 view .LVU3244
 9551 383f 4C09E1   		or	rcx, r12	# tmp839, tmp835
 9552 3842 4A890C17 		mov	QWORD PTR [rdi+r10], rcx	# *_505, tmp839
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9553              		.loc 1 695 36 is_stmt 1 view .LVU3245
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9554              		.loc 1 695 16 view .LVU3246
 9555 3846 C5F877   		vzeroupper
 9556 3849 E910FCFF 		jmp	.L561	#
 9556      FF
 9557              	.LVL501:
 9558 384e 6690     		.p2align 4,,7
 9559              		.p2align 3
 9560              	.L883:
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9561              		.loc 1 695 16 is_stmt 0 view .LVU3247
 9562 3850 C5F877   		vzeroupper
 9563 3853 E906FCFF 		jmp	.L561	#
 9563      FF
 9564              	.LVL502:
 9565              		.p2align 4,,7
 9566              		.p2align 3
 9567              	.L602:
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 9568              		.loc 1 695 16 view .LVU3248
 9569              	.LBE503:
 9570              	.LBB504:
 9571              	# sieve_extend.c:623:         for (; copy_word < target_word; copy_word++, source_word++ ) {
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9572              		.loc 1 623 9 view .LVU3249
 9573 3858 4C897424 		mov	QWORD PTR 40[rsp], r14	# %sfp, source_word
 9573      28
 9574 385d 4D89FD   		mov	r13, r15	# copy_word, copy_word
 9575 3860 4D8D5E01 		lea	r11, 1[r14]	# tmp849,
 9576 3864 E9C9F2FF 		jmp	.L567	#
 9576      FF
 9577              	.LVL503:
 9578 3869 0F1F8000 		.p2align 4,,7
 9578      000000
 9579              		.p2align 3
 9580              	.L887:
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9581              		.loc 1 623 9 view .LVU3250
 9582 3870 4C8D24C5 		lea	r12, 0[0+rax*8]	# _364,
 9582      00000000 
 9583              	.LVL504:
 9584              	.L575:
GAS LISTING /tmp/ccNeV1of.s 			page 267


 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9585              		.loc 1 684 16 is_stmt 1 view .LVU3251
 9586              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9587              		.loc 1 684 9 is_stmt 0 view .LVU3252
 9588 3878 4C8B7C24 		mov	r15, QWORD PTR 64[rsp]	# destination_stop_word, %sfp
 9588      40
 9589 387d 4939C7   		cmp	r15, rax	# destination_stop_word, tmp.415
 9590 3880 0F82BDFB 		jb	.L586	#,
 9590      FFFF
 9591 3886 4A8D1CDD 		lea	rbx, 0[0+r11*8]	# _342,
 9591      00000000 
 9592 388e 4D8D6701 		lea	r12, 1[r15]	# _49,
 9593 3892 4C8D341F 		lea	r14, [rdi+rbx]	# vectp.409,
 9594              	.LVL505:
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9595              		.loc 1 684 9 view .LVU3253
 9596 3896 4C89E6   		mov	rsi, r12	# niters.408, _49
 9597 3899 4C89F2   		mov	rdx, r14	# tmp705, vectp.409
 9598 389c 4829C6   		sub	rsi, rax	# niters.408, tmp.415
 9599 389f 48C1EA03 		shr	rdx, 3	# tmp705,
 9600 38a3 41BA0500 		mov	r10d, 5	# tmp708,
 9600      0000
 9601 38a9 48F7DA   		neg	rdx	# tmp706
 9602 38ac 83E203   		and	edx, 3	# prolog_loop_niters.410,
 9603 38af 4C8D6A03 		lea	r13, 3[rdx]	# tmp707,
 9604 38b3 4983FD05 		cmp	r13, 5	# tmp707,
 9605 38b7 4D0F43D5 		cmovnb	r10, r13	# tmp707,, tmp1035
 9606 38bb 4929C7   		sub	r15, rax	# tmp709, tmp.415
 9607 38be 4D39FA   		cmp	r10, r15	# tmp1035, tmp709
 9608 38c1 0F8798FA 		ja	.L587	#,
 9608      FFFF
 9609 38c7 4885D2   		test	rdx, rdx	# prolog_loop_niters.410
 9610 38ca 0F84F8F8 		je	.L608	#,
 9610      FFFF
 685:sieve_extend.c ****         }
 9611              		.loc 1 685 13 is_stmt 1 view .LVU3254
 9612              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9613              		.loc 1 685 103 is_stmt 0 view .LVU3255
 9614 38d0 488B5C1F 		mov	rbx, QWORD PTR 8[rdi+rbx]	# *_582, *_582
 9614      08
 9615              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9616              		.loc 1 685 87 view .LVU3256
 9617 38d5 4D8D5301 		lea	r10, 1[r11]	# tmp1036,
 9618              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9619              		.loc 1 685 58 view .LVU3257
 9620 38d9 4D8B36   		mov	r14, QWORD PTR [r14]	# MEM[(uint64_t *)vectp.409_343], MEM[(uint64_t *)vectp.409_343]
 9621 38dc C442F3F7 		shrx	r14, r14, rcx	# tmp712, MEM[(uint64_t *)vectp.409_343], shift_flipped
 9621      F6
 9622              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9623              		.loc 1 685 103 view .LVU3258
 9624 38e1 440FB67C 		movzx	r15d, BYTE PTR 72[rsp]	# tmp1634, %sfp
 9624      2448
GAS LISTING /tmp/ccNeV1of.s 			page 268


 9625 38e7 C4E281F7 		shlx	rbx, rbx, r15	# tmp710, *_582, tmp1634
 9625      DB
 9626              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9627              		.loc 1 685 76 view .LVU3259
 9628 38ec 4C09F3   		or	rbx, r14	# tmp714, tmp712
 9629 38ef 4883FA01 		cmp	rdx, 1	# prolog_loop_niters.410,
 9630 38f3 48891CC7 		mov	QWORD PTR [rdi+rax*8], rbx	# *_586, tmp714
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9631              		.loc 1 684 52 is_stmt 1 view .LVU3260
 9632              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9633              		.loc 1 685 87 is_stmt 0 view .LVU3261
 9634 38f7 4D89D5   		mov	r13, r10	# source_word, tmp1036
 9635              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9636              		.loc 1 684 61 view .LVU3262
 9637 38fa 488D5801 		lea	rbx, 1[rax]	# copy_word,
 9638              	.LVL506:
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9639              		.loc 1 684 16 is_stmt 1 view .LVU3263
 9640 38fe 0F84CEF8 		je	.L588	#,
 9640      FFFF
 9641 3904 4589FE   		mov	r14d, r15d	# tmp1635, tmp1634
 685:sieve_extend.c ****         }
 9642              		.loc 1 685 13 view .LVU3264
 9643              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9644              		.loc 1 685 44 is_stmt 0 view .LVU3265
 9645 3907 4E8D3CD5 		lea	r15, 0[0+r10*8]	# _595,
 9645      00000000 
 9646              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9647              		.loc 1 685 103 view .LVU3266
 9648 390f C42289F7 		shlx	r14, QWORD PTR 8[rdi+r15], r14	# tmp715, *_601, tmp1635
 9648      743F08
 9649              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9650              		.loc 1 685 58 view .LVU3267
 9651 3916 4E8B3C3F 		mov	r15, QWORD PTR [rdi+r15]	# *_596, *_596
 9652 391a C442F3F7 		shrx	r15, r15, rcx	# tmp717, *_596, shift_flipped
 9652      FF
 9653              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9654              		.loc 1 685 76 view .LVU3268
 9655 391f 4D09FE   		or	r14, r15	# tmp719, tmp717
 9656 3922 4883FA03 		cmp	rdx, 3	# prolog_loop_niters.410,
 9657              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9658              		.loc 1 685 87 view .LVU3269
 9659 3926 4D8D6B02 		lea	r13, 2[r11]	# source_word,
 9660              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9661              		.loc 1 685 76 view .LVU3270
 9662 392a 4C8934DF 		mov	QWORD PTR [rdi+rbx*8], r14	# *_605, tmp719
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9663              		.loc 1 684 52 is_stmt 1 view .LVU3271
GAS LISTING /tmp/ccNeV1of.s 			page 269


 9664              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9665              		.loc 1 684 61 is_stmt 0 view .LVU3272
 9666 392e 488D5802 		lea	rbx, 2[rax]	# copy_word,
 9667              	.LVL507:
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9668              		.loc 1 684 16 is_stmt 1 view .LVU3273
 9669 3932 0F859AF8 		jne	.L588	#,
 9669      FFFF
 685:sieve_extend.c ****         }
 9670              		.loc 1 685 13 view .LVU3274
 9671              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9672              		.loc 1 685 103 is_stmt 0 view .LVU3275
 9673 3938 440FB674 		movzx	r14d, BYTE PTR 72[rsp]	# tmp1636, %sfp
 9673      2448
 9674              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9675              		.loc 1 685 44 view .LVU3276
 9676 393e 4E8D3CED 		lea	r15, 0[0+r13*8]	# _332,
 9676      00000000 
 9677              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9678              		.loc 1 685 103 view .LVU3277
 9679 3946 C42289F7 		shlx	r14, QWORD PTR 8[rdi+r15], r14	# tmp720, *_326, tmp1636
 9679      743F08
 9680              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9681              		.loc 1 685 58 view .LVU3278
 9682 394d 4E8B3C3F 		mov	r15, QWORD PTR [rdi+r15]	# *_331, *_331
 9683 3951 C442F3F7 		shrx	r15, r15, rcx	# tmp722, *_331, shift_flipped
 9683      FF
 9684              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9685              		.loc 1 685 76 view .LVU3279
 9686 3956 4D09FE   		or	r14, r15	# tmp724, tmp722
 9687 3959 4C8934DF 		mov	QWORD PTR [rdi+rbx*8], r14	# *_322, tmp724
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9688              		.loc 1 684 52 is_stmt 1 view .LVU3280
 9689              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9690              		.loc 1 685 87 is_stmt 0 view .LVU3281
 9691 395d 4D8D6B03 		lea	r13, 3[r11]	# source_word,
 9692              	.LVL508:
 9693              	# sieve_extend.c:684:         for (; copy_word <= destination_stop_word; copy_word++,source_word++ 
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9694              		.loc 1 684 61 view .LVU3282
 9695 3961 488D5803 		lea	rbx, 3[rax]	# copy_word,
 9696              	.LVL509:
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9697              		.loc 1 684 16 is_stmt 1 view .LVU3283
 9698 3965 E968F8FF 		jmp	.L588	#
 9698      FF
 9699              	.LVL510:
 9700 396a 660F1F44 		.p2align 4,,7
 9700      0000
 9701              		.p2align 3
GAS LISTING /tmp/ccNeV1of.s 			page 270


 9702              	.L590:
 685:sieve_extend.c ****         }
 9703              		.loc 1 685 13 discriminator 2 view .LVU3284
 9704              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9705              		.loc 1 685 103 is_stmt 0 discriminator 2 view .LVU3285
 9706 3970 C4417E6F 		vmovdqu	ymm10, YMMWORD PTR [r10+rax]	# tmp1638, MEM[base: vectp.421_265, index: ivtmp.481_100, off
 9706      1402
 9707              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9708              		.loc 1 685 58 discriminator 2 view .LVU3286
 9709 3976 C4C17D6F 		vmovdqa	ymm3, YMMWORD PTR [r11+rax]	# tmp1639, MEM[base: vectp.417_272, index: ivtmp.481_100, offs
 9709      1C03
 9710              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9711              		.loc 1 685 103 discriminator 2 view .LVU3287
 9712 397c C4C12DF3 		vpsllq	ymm7, ymm10, xmm14	# vect__78.423, tmp1638, _12
 9712      FE
 9713              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9714              		.loc 1 685 58 discriminator 2 view .LVU3288
 9715 3981 C4C165D3 		vpsrlq	ymm1, ymm3, xmm13	# vect__73.419, tmp1639, _16
 9715      CD
 9716              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9717              		.loc 1 685 76 discriminator 2 view .LVU3289
 9718 3986 C5C5EBC1 		vpor	ymm0, ymm7, ymm1	# vect__81.424, vect__78.423, vect__73.419
 9719              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9720              		.loc 1 685 33 discriminator 2 view .LVU3290
 9721 398a C5FE7F04 		vmovdqu	YMMWORD PTR [rdx+rax], ymm0	# MEM[base: vectp.426_256, index: ivtmp.481_100, offset: 0B], 
 9721      02
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9722              		.loc 1 684 52 is_stmt 1 discriminator 2 view .LVU3291
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9723              		.loc 1 684 16 discriminator 2 view .LVU3292
 685:sieve_extend.c ****         }
 9724              		.loc 1 685 13 discriminator 2 view .LVU3293
 9725              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9726              		.loc 1 685 103 is_stmt 0 discriminator 2 view .LVU3294
 9727 398f C4417E6F 		vmovdqu	ymm12, YMMWORD PTR 32[r10+rax]	# tmp1640, MEM[base: vectp.421_265, index: ivtmp.481_100, o
 9727      640220
 9728              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9729              		.loc 1 685 58 discriminator 2 view .LVU3295
 9730 3996 C4C17D6F 		vmovdqa	ymm4, YMMWORD PTR 32[r11+rax]	# tmp1641, MEM[base: vectp.417_272, index: ivtmp.481_100, of
 9730      640320
 9731              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9732              		.loc 1 685 103 discriminator 2 view .LVU3296
 9733 399d C4C11DF3 		vpsllq	ymm5, ymm12, xmm14	# vect__78.423, tmp1640, _12
 9733      EE
 9734              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9735              		.loc 1 685 58 discriminator 2 view .LVU3297
 9736 39a2 C4415DD3 		vpsrlq	ymm9, ymm4, xmm13	# vect__73.419, tmp1641, _16
GAS LISTING /tmp/ccNeV1of.s 			page 271


 9736      CD
 9737              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9738              		.loc 1 685 76 discriminator 2 view .LVU3298
 9739 39a7 C44155EB 		vpor	ymm15, ymm5, ymm9	# vect__81.424, vect__78.423, vect__73.419
 9739      F9
 9740              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9741              		.loc 1 685 33 discriminator 2 view .LVU3299
 9742 39ac C57E7F7C 		vmovdqu	YMMWORD PTR 32[rdx+rax], ymm15	# MEM[base: vectp.426_256, index: ivtmp.481_100, offset: 0B
 9742      0220
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9743              		.loc 1 684 52 is_stmt 1 discriminator 2 view .LVU3300
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9744              		.loc 1 684 16 discriminator 2 view .LVU3301
 685:sieve_extend.c ****         }
 9745              		.loc 1 685 13 discriminator 2 view .LVU3302
 9746              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9747              		.loc 1 685 103 is_stmt 0 discriminator 2 view .LVU3303
 9748 39b2 C4C17E6F 		vmovdqu	ymm6, YMMWORD PTR 64[r10+rax]	# tmp1642, MEM[base: vectp.421_265, index: ivtmp.481_100, of
 9748      740240
 9749              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9750              		.loc 1 685 58 discriminator 2 view .LVU3304
 9751 39b9 C4417D6F 		vmovdqa	ymm8, YMMWORD PTR 64[r11+rax]	# tmp1643, MEM[base: vectp.417_272, index: ivtmp.481_100, of
 9751      440340
 9752              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9753              		.loc 1 685 103 discriminator 2 view .LVU3305
 9754 39c0 C4414DF3 		vpsllq	ymm11, ymm6, xmm14	# vect__78.423, tmp1642, _12
 9754      DE
 9755              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9756              		.loc 1 685 58 discriminator 2 view .LVU3306
 9757 39c5 C4C13DD3 		vpsrlq	ymm2, ymm8, xmm13	# vect__73.419, tmp1643, _16
 9757      D5
 9758              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9759              		.loc 1 685 76 discriminator 2 view .LVU3307
 9760 39ca C525EBD2 		vpor	ymm10, ymm11, ymm2	# vect__81.424, vect__78.423, vect__73.419
 9761              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9762              		.loc 1 685 33 discriminator 2 view .LVU3308
 9763 39ce C57E7F54 		vmovdqu	YMMWORD PTR 64[rdx+rax], ymm10	# MEM[base: vectp.426_256, index: ivtmp.481_100, offset: 0B
 9763      0240
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9764              		.loc 1 684 52 is_stmt 1 discriminator 2 view .LVU3309
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9765              		.loc 1 684 16 discriminator 2 view .LVU3310
 685:sieve_extend.c ****         }
 9766              		.loc 1 685 13 discriminator 2 view .LVU3311
 9767              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9768              		.loc 1 685 103 is_stmt 0 discriminator 2 view .LVU3312
 9769 39d4 C4C17E6F 		vmovdqu	ymm7, YMMWORD PTR 96[r10+rax]	# tmp1644, MEM[base: vectp.421_265, index: ivtmp.481_100, of
 9769      7C0260
GAS LISTING /tmp/ccNeV1of.s 			page 272


 9770              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9771              		.loc 1 685 58 discriminator 2 view .LVU3313
 9772 39db C4C17D6F 		vmovdqa	ymm3, YMMWORD PTR 96[r11+rax]	# tmp1645, MEM[base: vectp.417_272, index: ivtmp.481_100, of
 9772      5C0360
 9773              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9774              		.loc 1 685 103 discriminator 2 view .LVU3314
 9775 39e2 C4C145F3 		vpsllq	ymm1, ymm7, xmm14	# vect__78.423, tmp1644, _12
 9775      CE
 9776              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9777              		.loc 1 685 58 discriminator 2 view .LVU3315
 9778 39e7 C4C165D3 		vpsrlq	ymm0, ymm3, xmm13	# vect__73.419, tmp1645, _16
 9778      C5
 9779              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9780              		.loc 1 685 76 discriminator 2 view .LVU3316
 9781 39ec C575EBE0 		vpor	ymm12, ymm1, ymm0	# vect__81.424, vect__78.423, vect__73.419
 9782              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9783              		.loc 1 685 33 discriminator 2 view .LVU3317
 9784 39f0 C57E7F64 		vmovdqu	YMMWORD PTR 96[rdx+rax], ymm12	# MEM[base: vectp.426_256, index: ivtmp.481_100, offset: 0B
 9784      0260
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9785              		.loc 1 684 52 is_stmt 1 discriminator 2 view .LVU3318
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9786              		.loc 1 684 16 discriminator 2 view .LVU3319
 685:sieve_extend.c ****         }
 9787              		.loc 1 685 13 discriminator 2 view .LVU3320
 9788              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9789              		.loc 1 685 103 is_stmt 0 discriminator 2 view .LVU3321
 9790 39f6 C4C17E6F 		vmovdqu	ymm5, YMMWORD PTR 128[r10+rax]	# tmp1646, MEM[base: vectp.421_265, index: ivtmp.481_100, o
 9790      AC028000 
 9790      0000
 9791              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9792              		.loc 1 685 58 discriminator 2 view .LVU3322
 9793 3a00 C4C17D6F 		vmovdqa	ymm4, YMMWORD PTR 128[r11+rax]	# tmp1647, MEM[base: vectp.417_272, index: ivtmp.481_100, o
 9793      A4038000 
 9793      0000
 9794              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9795              		.loc 1 685 103 discriminator 2 view .LVU3323
 9796 3a0a C44155F3 		vpsllq	ymm9, ymm5, xmm14	# vect__78.423, tmp1646, _12
 9796      CE
 9797              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9798              		.loc 1 685 58 discriminator 2 view .LVU3324
 9799 3a0f C4415DD3 		vpsrlq	ymm15, ymm4, xmm13	# vect__73.419, tmp1647, _16
 9799      FD
 9800              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9801              		.loc 1 685 76 discriminator 2 view .LVU3325
 9802 3a14 C4C135EB 		vpor	ymm6, ymm9, ymm15	# vect__81.424, vect__78.423, vect__73.419
 9802      F7
GAS LISTING /tmp/ccNeV1of.s 			page 273


 9803              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9804              		.loc 1 685 33 discriminator 2 view .LVU3326
 9805 3a19 C5FE7FB4 		vmovdqu	YMMWORD PTR 128[rdx+rax], ymm6	# MEM[base: vectp.426_256, index: ivtmp.481_100, offset: 0B
 9805      02800000 
 9805      00
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9806              		.loc 1 684 52 is_stmt 1 discriminator 2 view .LVU3327
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9807              		.loc 1 684 16 discriminator 2 view .LVU3328
 685:sieve_extend.c ****         }
 9808              		.loc 1 685 13 discriminator 2 view .LVU3329
 9809              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9810              		.loc 1 685 103 is_stmt 0 discriminator 2 view .LVU3330
 9811 3a22 C4417E6F 		vmovdqu	ymm11, YMMWORD PTR 160[r10+rax]	# tmp1648, MEM[base: vectp.421_265, index: ivtmp.481_100, 
 9811      9C02A000 
 9811      0000
 9812              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9813              		.loc 1 685 58 discriminator 2 view .LVU3331
 9814 3a2c C4C17D6F 		vmovdqa	ymm2, YMMWORD PTR 160[r11+rax]	# tmp1649, MEM[base: vectp.417_272, index: ivtmp.481_100, o
 9814      9403A000 
 9814      0000
 9815              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9816              		.loc 1 685 103 discriminator 2 view .LVU3332
 9817 3a36 C44125F3 		vpsllq	ymm8, ymm11, xmm14	# vect__78.423, tmp1648, _12
 9817      C6
 9818              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9819              		.loc 1 685 58 discriminator 2 view .LVU3333
 9820 3a3b C4416DD3 		vpsrlq	ymm10, ymm2, xmm13	# vect__73.419, tmp1649, _16
 9820      D5
 9821              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9822              		.loc 1 685 76 discriminator 2 view .LVU3334
 9823 3a40 C4C13DEB 		vpor	ymm7, ymm8, ymm10	# vect__81.424, vect__78.423, vect__73.419
 9823      FA
 9824              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9825              		.loc 1 685 33 discriminator 2 view .LVU3335
 9826 3a45 C5FE7FBC 		vmovdqu	YMMWORD PTR 160[rdx+rax], ymm7	# MEM[base: vectp.426_256, index: ivtmp.481_100, offset: 0B
 9826      02A00000 
 9826      00
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9827              		.loc 1 684 52 is_stmt 1 discriminator 2 view .LVU3336
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9828              		.loc 1 684 16 discriminator 2 view .LVU3337
 685:sieve_extend.c ****         }
 9829              		.loc 1 685 13 discriminator 2 view .LVU3338
 9830              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9831              		.loc 1 685 103 is_stmt 0 discriminator 2 view .LVU3339
 9832 3a4e C4C17E6F 		vmovdqu	ymm1, YMMWORD PTR 192[r10+rax]	# tmp1650, MEM[base: vectp.421_265, index: ivtmp.481_100, o
 9832      8C02C000 
 9832      0000
GAS LISTING /tmp/ccNeV1of.s 			page 274


 9833              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9834              		.loc 1 685 58 discriminator 2 view .LVU3340
 9835 3a58 C4C17D6F 		vmovdqa	ymm3, YMMWORD PTR 192[r11+rax]	# tmp1651, MEM[base: vectp.417_272, index: ivtmp.481_100, o
 9835      9C03C000 
 9835      0000
 9836              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9837              		.loc 1 685 103 discriminator 2 view .LVU3341
 9838 3a62 C4C175F3 		vpsllq	ymm0, ymm1, xmm14	# vect__78.423, tmp1650, _12
 9838      C6
 9839              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9840              		.loc 1 685 58 discriminator 2 view .LVU3342
 9841 3a67 C44165D3 		vpsrlq	ymm12, ymm3, xmm13	# vect__73.419, tmp1651, _16
 9841      E5
 9842              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9843              		.loc 1 685 76 discriminator 2 view .LVU3343
 9844 3a6c C4C17DEB 		vpor	ymm5, ymm0, ymm12	# vect__81.424, vect__78.423, vect__73.419
 9844      EC
 9845              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9846              		.loc 1 685 33 discriminator 2 view .LVU3344
 9847 3a71 C5FE7FAC 		vmovdqu	YMMWORD PTR 192[rdx+rax], ymm5	# MEM[base: vectp.426_256, index: ivtmp.481_100, offset: 0B
 9847      02C00000 
 9847      00
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9848              		.loc 1 684 52 is_stmt 1 discriminator 2 view .LVU3345
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9849              		.loc 1 684 16 discriminator 2 view .LVU3346
 685:sieve_extend.c ****         }
 9850              		.loc 1 685 13 discriminator 2 view .LVU3347
 9851              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9852              		.loc 1 685 103 is_stmt 0 discriminator 2 view .LVU3348
 9853 3a7a C4417E6F 		vmovdqu	ymm9, YMMWORD PTR 224[r10+rax]	# tmp1652, MEM[base: vectp.421_265, index: ivtmp.481_100, o
 9853      8C02E000 
 9853      0000
 9854              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9855              		.loc 1 685 58 discriminator 2 view .LVU3349
 9856 3a84 C4C17D6F 		vmovdqa	ymm4, YMMWORD PTR 224[r11+rax]	# tmp1653, MEM[base: vectp.417_272, index: ivtmp.481_100, o
 9856      A403E000 
 9856      0000
 9857              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9858              		.loc 1 685 103 discriminator 2 view .LVU3350
 9859 3a8e C44135F3 		vpsllq	ymm15, ymm9, xmm14	# vect__78.423, tmp1652, _12
 9859      FE
 9860              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9861              		.loc 1 685 58 discriminator 2 view .LVU3351
 9862 3a93 C4C15DD3 		vpsrlq	ymm6, ymm4, xmm13	# vect__73.419, tmp1653, _16
 9862      F5
 9863              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
GAS LISTING /tmp/ccNeV1of.s 			page 275


 9864              		.loc 1 685 76 discriminator 2 view .LVU3352
 9865 3a98 C505EBDE 		vpor	ymm11, ymm15, ymm6	# vect__81.424, vect__78.423, vect__73.419
 9866              	# sieve_extend.c:685:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 685:sieve_extend.c ****         }
 9867              		.loc 1 685 33 discriminator 2 view .LVU3353
 9868 3a9c C57E7F9C 		vmovdqu	YMMWORD PTR 224[rdx+rax], ymm11	# MEM[base: vectp.426_256, index: ivtmp.481_100, offset: 0
 9868      02E00000 
 9868      00
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9869              		.loc 1 684 52 is_stmt 1 discriminator 2 view .LVU3354
 684:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 9870              		.loc 1 684 16 discriminator 2 view .LVU3355
 9871 3aa5 48050001 		add	rax, 256	# ivtmp.481,
 9871      0000
 9872 3aab 4C39F0   		cmp	rax, r14	# ivtmp.481, _750
 9873 3aae 0F85BCFE 		jne	.L590	#,
 9873      FFFF
 9874 3ab4 E98EF8FF 		jmp	.L864	#
 9874      FF
 9875              	.LVL511:
 9876 3ab9 0F1F8000 		.p2align 4,,7
 9876      000000
 9877              		.p2align 3
 9878              	.L856:
 9879              	.LBB502:
 665:sieve_extend.c ****                 printWord(shouldbe);
 9880              		.loc 1 665 17 view .LVU3356
 9881              	.LBB473:
 9882              	.LBI473:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 9883              		.loc 3 105 1 view .LVU3357
 9884              	.LBB474:
 9885              		.loc 3 107 3 view .LVU3358
 9886              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 9887              		.loc 3 107 10 is_stmt 0 view .LVU3359
 9888 3ac0 488D3500 		lea	rsi, .LC9[rip]	#,
 9888      000000
 9889 3ac7 BF010000 		mov	edi, 1	#,
 9889      00
 9890              	.LVL512:
 9891              		.loc 3 107 10 view .LVU3360
 9892 3acc 31C0     		xor	eax, eax	#
 9893 3ace C5F877   		vzeroupper
 9894 3ad1 E8000000 		call	__printf_chk@PLT	#
 9894      00
 9895              	.LVL513:
 9896              		.loc 3 107 10 view .LVU3361
 9897              	.LBE474:
 9898              	.LBE473:
 666:sieve_extend.c ****                 printf("\n");
 9899              		.loc 1 666 17 is_stmt 1 view .LVU3362
 9900              	.LBB475:
 9901              	.LBI475:
 9902              		.file 4 "debugtools.h"
   1:debugtools.h  **** //#include "monotonic_xplatform.h"
   2:debugtools.h  **** 
   3:debugtools.h  **** static inline void printWord(bitword_t bitword)
GAS LISTING /tmp/ccNeV1of.s 			page 276


 9903              		.loc 4 3 20 view .LVU3363
 9904              	.LBB476:
   4:debugtools.h  **** {
   5:debugtools.h  ****     char row[WORD_SIZE*2] = {};
 9905              		.loc 4 5 5 view .LVU3364
 9906              	# debugtools.h:5:     char row[WORD_SIZE*2] = {};
 9907              		.loc 4 5 10 is_stmt 0 view .LVU3365
 9908 3ad6 C5D1EFED 		vpxor	xmm5, xmm5, xmm5	# tmp1448
 9909              	# debugtools.h:6:     int col=0;
   6:debugtools.h  ****     int col=0;
 9910              		.loc 4 6 9 view .LVU3366
 9911 3ada 31C9     		xor	ecx, ecx	# col
 9912              	# debugtools.h:5:     char row[WORD_SIZE*2] = {};
   5:debugtools.h  ****     int col=0;
 9913              		.loc 4 5 10 view .LVU3367
 9914 3adc C5F97F6C 		vmovdqa	XMMWORD PTR 80[rsp], xmm5	# row, tmp1448
 9914      2450
 9915              	.LBB477:
 9916              	# debugtools.h:7:     for (int i=WORD_SIZE-1; i>=0; i--) {
   7:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
 9917              		.loc 4 7 14 view .LVU3368
 9918 3ae2 41BD3F00 		mov	r13d, 63	# i,
 9918      0000
 9919              	.LBE477:
 9920              	# debugtools.h:5:     char row[WORD_SIZE*2] = {};
   5:debugtools.h  ****     int col=0;
 9921              		.loc 4 5 10 view .LVU3369
 9922 3ae8 C5F97F6C 		vmovdqa	XMMWORD PTR 96[rsp], xmm5	# row, tmp1448
 9922      2460
 9923 3aee C5F97F6C 		vmovdqa	XMMWORD PTR 112[rsp], xmm5	# row, tmp1448
 9923      2470
 9924 3af4 C5F97FAC 		vmovdqa	XMMWORD PTR 128[rsp], xmm5	# row, tmp1448
 9924      24800000 
 9924      00
 9925 3afd C5F97FAC 		vmovdqa	XMMWORD PTR 144[rsp], xmm5	# row, tmp1448
 9925      24900000 
 9925      00
 9926 3b06 C5F97FAC 		vmovdqa	XMMWORD PTR 160[rsp], xmm5	# row, tmp1448
 9926      24A00000 
 9926      00
 9927 3b0f C5F97FAC 		vmovdqa	XMMWORD PTR 176[rsp], xmm5	# row, tmp1448
 9927      24B00000 
 9927      00
 9928 3b18 C5F97FAC 		vmovdqa	XMMWORD PTR 192[rsp], xmm5	# row, tmp1448
 9928      24C00000 
 9928      00
   6:debugtools.h  ****     int col=0;
 9929              		.loc 4 6 5 is_stmt 1 view .LVU3370
 9930              	.LVL514:
 9931              		.loc 4 7 5 view .LVU3371
 9932              	.LBB478:
 9933              		.loc 4 7 10 view .LVU3372
 9934              		.loc 4 7 29 view .LVU3373
 9935 3b21 66662E0F 		.p2align 4
 9935      1F840000 
 9935      0000000F 
 9935      1F4000
GAS LISTING /tmp/ccNeV1of.s 			page 277


 9936              		.p2align 3
 9937              	.L581:
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 9938              		.loc 4 8 3 view .LVU3374
 9939              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 9940              		.loc 4 8 46 is_stmt 0 view .LVU3375
 9941 3b30 C46293F7 		shrx	r8, rbx, r13	# tmp693, shouldbe, i
 9941      C3
 9942 3b35 4183E001 		and	r8d, 1	# tmp694,
 9943              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 9944              		.loc 4 8 14 view .LVU3376
 9945 3b39 4983F801 		cmp	r8, 1	# tmp694,
 9946              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 9947              		.loc 4 8 10 view .LVU3377
 9948 3b3d 8D7901   		lea	edi, 1[rcx]	# col,
 9949              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 9950              		.loc 4 8 14 view .LVU3378
 9951 3b40 4519C9   		sbb	r9d, r9d	# iftmp.59_183
 9952 3b43 4C63F1   		movsx	r14, ecx	# col, col
 9953 3b46 4183E1FD 		and	r9d, -3	# iftmp.59_183,
 9954              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 9955              		.loc 4 8 10 view .LVU3379
 9956 3b4a 4189FF   		mov	r15d, edi	# col, col
 9957              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 9958              		.loc 4 8 14 view .LVU3380
 9959 3b4d 4183C131 		add	r9d, 49	# iftmp.59_183,
 9960              	.LVL515:
 9961              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 9962              		.loc 4 9 6 view .LVU3381
 9963 3b51 41F6C507 		test	r13b, 7	# i,
 9964              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 9965              		.loc 4 8 14 view .LVU3382
 9966 3b55 46884C34 		mov	BYTE PTR 80[rsp+r14], r9b	# row, iftmp.59_183
 9966      50
 9967              		.loc 4 9 3 is_stmt 1 view .LVU3383
 9968              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 9969              		.loc 4 9 6 is_stmt 0 view .LVU3384
 9970 3b5a 750C     		jne	.L580	#,
 9971              		.loc 4 9 15 is_stmt 1 view .LVU3385
 9972              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 9973              		.loc 4 9 26 is_stmt 0 view .LVU3386
 9974 3b5c 4863C7   		movsx	rax, edi	# col, col
 9975              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 9976              		.loc 4 9 22 view .LVU3387
 9977 3b5f 448D7902 		lea	r15d, 2[rcx]	# col,
 9978              	.LVL516:
 9979              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 9980              		.loc 4 9 26 view .LVU3388
 9981 3b63 C6440450 		mov	BYTE PTR 80[rsp+rax], 32	# row,
 9981      20
 9982              	.L580:
   7:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
 9983              		.loc 4 7 35 is_stmt 1 view .LVU3389
 9984              	# debugtools.h:7:     for (int i=WORD_SIZE-1; i>=0; i--) {
   7:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
GAS LISTING /tmp/ccNeV1of.s 			page 278


 9985              		.loc 4 7 36 is_stmt 0 view .LVU3390
 9986 3b68 418D45FF 		lea	eax, -1[r13]	# tmp855,
   7:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
 9987              		.loc 4 7 29 is_stmt 1 view .LVU3391
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 9988              		.loc 4 8 3 view .LVU3392
 9989              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 9990              		.loc 4 8 46 is_stmt 0 view .LVU3393
 9991 3b6c C4E2FBF7 		shrx	rdx, rbx, rax	# tmp1015, shouldbe, tmp855
 9991      D3
 9992 3b71 83E201   		and	edx, 1	# tmp1016,
 9993              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 9994              		.loc 4 8 10 view .LVU3394
 9995 3b74 458D5F01 		lea	r11d, 1[r15]	# col,
 9996              	.LVL517:
 9997              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 9998              		.loc 4 8 14 view .LVU3395
 9999 3b78 4883FA01 		cmp	rdx, 1	# tmp1016,
 10000 3b7c 4963CF   		movsx	rcx, r15d	# col, col
 10001 3b7f 4519ED   		sbb	r13d, r13d	# iftmp.59_183
 10002              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10003              		.loc 4 8 10 view .LVU3396
 10004 3b82 4589DA   		mov	r10d, r11d	# col, col
 10005              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10006              		.loc 4 8 14 view .LVU3397
 10007 3b85 4183E5FD 		and	r13d, -3	# iftmp.59_183,
 10008 3b89 4183C531 		add	r13d, 49	# iftmp.59_183,
 10009              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 10010              		.loc 4 9 6 view .LVU3398
 10011 3b8d A807     		test	al, 7	# tmp855,
 10012              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10013              		.loc 4 8 14 view .LVU3399
 10014 3b8f 44886C0C 		mov	BYTE PTR 80[rsp+rcx], r13b	# row, iftmp.59_183
 10014      50
 10015              		.loc 4 9 3 is_stmt 1 view .LVU3400
 10016              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 10017              		.loc 4 9 6 is_stmt 0 view .LVU3401
 10018 3b94 750C     		jne	.L846	#,
 10019              		.loc 4 9 15 is_stmt 1 view .LVU3402
 10020              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 10021              		.loc 4 9 26 is_stmt 0 view .LVU3403
 10022 3b96 4963F3   		movsx	rsi, r11d	# col, col
 10023              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 10024              		.loc 4 9 22 view .LVU3404
 10025 3b99 458D5702 		lea	r10d, 2[r15]	# col,
 10026              	.LVL518:
 10027              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 10028              		.loc 4 9 26 view .LVU3405
 10029 3b9d C6443450 		mov	BYTE PTR 80[rsp+rsi], 32	# row,
 10029      20
 10030              	.L846:
GAS LISTING /tmp/ccNeV1of.s 			page 279


   7:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
 10031              		.loc 4 7 35 is_stmt 1 view .LVU3406
 10032              	# debugtools.h:7:     for (int i=WORD_SIZE-1; i>=0; i--) {
   7:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
 10033              		.loc 4 7 36 is_stmt 0 view .LVU3407
 10034 3ba2 448D40FF 		lea	r8d, -1[rax]	# i,
   7:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
 10035              		.loc 4 7 29 is_stmt 1 view .LVU3408
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10036              		.loc 4 8 3 view .LVU3409
 10037              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10038              		.loc 4 8 46 is_stmt 0 view .LVU3410
 10039 3ba6 C462BBF7 		shrx	r9, rbx, r8	# tmp1200, shouldbe, i
 10039      CB
 10040 3bab 4183E101 		and	r9d, 1	# tmp1201,
 10041              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10042              		.loc 4 8 10 view .LVU3411
 10043 3baf 418D7A01 		lea	edi, 1[r10]	# col,
 10044              	.LVL519:
 10045              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10046              		.loc 4 8 14 view .LVU3412
 10047 3bb3 4983F901 		cmp	r9, 1	# tmp1201,
 10048 3bb7 4D63FA   		movsx	r15, r10d	# col, col
 10049 3bba 4519F6   		sbb	r14d, r14d	# iftmp.59_183
 10050              	.LVL520:
 10051              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10052              		.loc 4 8 10 view .LVU3413
 10053 3bbd 4189FD   		mov	r13d, edi	# col, col
 10054              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10055              		.loc 4 8 14 view .LVU3414
 10056 3bc0 4183E6FD 		and	r14d, -3	# iftmp.59_183,
 10057 3bc4 4183C631 		add	r14d, 49	# iftmp.59_183,
 10058              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 10059              		.loc 4 9 6 view .LVU3415
 10060 3bc8 4183E007 		and	r8d, 7	# i,
 10061              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10062              		.loc 4 8 14 view .LVU3416
 10063 3bcc 4688743C 		mov	BYTE PTR 80[rsp+r15], r14b	# row, iftmp.59_183
 10063      50
 10064              		.loc 4 9 3 is_stmt 1 view .LVU3417
 10065              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 10066              		.loc 4 9 6 is_stmt 0 view .LVU3418
 10067 3bd1 750C     		jne	.L850	#,
 10068              		.loc 4 9 15 is_stmt 1 view .LVU3419
 10069              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 10070              		.loc 4 9 26 is_stmt 0 view .LVU3420
 10071 3bd3 4863D7   		movsx	rdx, edi	# col, col
 10072              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 10073              		.loc 4 9 22 view .LVU3421
 10074 3bd6 458D6A02 		lea	r13d, 2[r10]	# col,
 10075              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
GAS LISTING /tmp/ccNeV1of.s 			page 280


 10076              		.loc 4 9 26 view .LVU3422
 10077 3bda C6441450 		mov	BYTE PTR 80[rsp+rdx], 32	# row,
 10077      20
 10078              	.L850:
   7:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
 10079              		.loc 4 7 35 is_stmt 1 view .LVU3423
 10080              	# debugtools.h:7:     for (int i=WORD_SIZE-1; i>=0; i--) {
   7:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
 10081              		.loc 4 7 36 is_stmt 0 view .LVU3424
 10082 3bdf 448D58FE 		lea	r11d, -2[rax]	# i,
   7:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
 10083              		.loc 4 7 29 is_stmt 1 view .LVU3425
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10084              		.loc 4 8 3 view .LVU3426
 10085              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10086              		.loc 4 8 46 is_stmt 0 view .LVU3427
 10087 3be3 C4E2A3F7 		shrx	rcx, rbx, r11	# tmp1211, shouldbe, i
 10087      CB
 10088 3be8 83E101   		and	ecx, 1	# tmp1212,
 10089              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10090              		.loc 4 8 10 view .LVU3428
 10091 3beb 418D7501 		lea	esi, 1[r13]	# col,
 10092              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10093              		.loc 4 8 14 view .LVU3429
 10094 3bef 4883F901 		cmp	rcx, 1	# tmp1212,
 10095 3bf3 4D63C5   		movsx	r8, r13d	# col, col
 10096 3bf6 4519D2   		sbb	r10d, r10d	# iftmp.59_183
 10097              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10098              		.loc 4 8 10 view .LVU3430
 10099 3bf9 89F1     		mov	ecx, esi	# col, col
 10100              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10101              		.loc 4 8 14 view .LVU3431
 10102 3bfb 4183E2FD 		and	r10d, -3	# iftmp.59_183,
 10103 3bff 4183C231 		add	r10d, 49	# iftmp.59_183,
 10104              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 10105              		.loc 4 9 6 view .LVU3432
 10106 3c03 4183E307 		and	r11d, 7	# i,
 10107              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10108              		.loc 4 8 14 view .LVU3433
 10109 3c07 46885404 		mov	BYTE PTR 80[rsp+r8], r10b	# row, iftmp.59_183
 10109      50
 10110              		.loc 4 9 3 is_stmt 1 view .LVU3434
 10111              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 10112              		.loc 4 9 6 is_stmt 0 view .LVU3435
 10113 3c0c 750D     		jne	.L851	#,
 10114              		.loc 4 9 15 is_stmt 1 view .LVU3436
 10115              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 10116              		.loc 4 9 26 is_stmt 0 view .LVU3437
 10117 3c0e 4C63CE   		movsx	r9, esi	# col, col
 10118              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 10119              		.loc 4 9 22 view .LVU3438
GAS LISTING /tmp/ccNeV1of.s 			page 281


 10120 3c11 418D4D02 		lea	ecx, 2[r13]	# col,
 10121              	.LVL521:
 10122              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
 10123              		.loc 4 9 26 view .LVU3439
 10124 3c15 42C6440C 		mov	BYTE PTR 80[rsp+r9], 32	# row,
 10124      5020
 10125              	.LVL522:
 10126              	.L851:
   7:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
 10127              		.loc 4 7 35 is_stmt 1 view .LVU3440
 10128              	# debugtools.h:7:     for (int i=WORD_SIZE-1; i>=0; i--) {
   7:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
 10129              		.loc 4 7 5 is_stmt 0 view .LVU3441
 10130 3c1b 83F802   		cmp	eax, 2	# tmp855,
 10131              	# debugtools.h:7:     for (int i=WORD_SIZE-1; i>=0; i--) {
   7:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
 10132              		.loc 4 7 36 view .LVU3442
 10133 3c1e 448D68FD 		lea	r13d, -3[rax]	# i,
 10134              	.LVL523:
   7:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
 10135              		.loc 4 7 29 is_stmt 1 view .LVU3443
 10136              	# debugtools.h:7:     for (int i=WORD_SIZE-1; i>=0; i--) {
   7:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
 10137              		.loc 4 7 5 is_stmt 0 view .LVU3444
 10138 3c22 0F8508FF 		jne	.L581	#,
 10138      FFFF
 10139              	.LBE478:
  10:debugtools.h  ****     }
  11:debugtools.h  **** 
  12:debugtools.h  ****     printf("%s", row);
 10140              		.loc 4 12 5 is_stmt 1 view .LVU3445
 10141              	.LVL524:
 10142              	.LBB479:
 10143              	.LBI479:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 10144              		.loc 3 105 1 view .LVU3446
 10145              	.LBB480:
 10146              		.loc 3 107 3 view .LVU3447
 10147              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 10148              		.loc 3 107 10 is_stmt 0 view .LVU3448
 10149 3c28 488D5C24 		lea	rbx, 80[rsp]	# tmp846,
 10149      50
 10150              	.LVL525:
 10151              		.loc 3 107 10 view .LVU3449
 10152 3c2d 488D3500 		lea	rsi, .LC10[rip]	#,
 10152      000000
 10153 3c34 BF010000 		mov	edi, 1	#,
 10153      00
 10154 3c39 4889DA   		mov	rdx, rbx	#, tmp846
 10155 3c3c 31C0     		xor	eax, eax	#
 10156 3c3e E8000000 		call	__printf_chk@PLT	#
 10156      00
 10157              	.LVL526:
 10158              		.loc 3 107 10 view .LVU3450
 10159              	.LBE480:
 10160              	.LBE479:
 10161              	.LBE476:
GAS LISTING /tmp/ccNeV1of.s 			page 282


 10162              	.LBE475:
 667:sieve_extend.c ****                 printf("But is\n");
 10163              		.loc 1 667 17 is_stmt 1 view .LVU3451
 10164              	.LBB481:
 10165              	.LBI481:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 10166              		.loc 3 105 1 view .LVU3452
 10167              	.LBB482:
 10168              		.loc 3 107 3 view .LVU3453
 10169              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 10170              		.loc 3 107 10 is_stmt 0 view .LVU3454
 10171 3c43 BF0A0000 		mov	edi, 10	#,
 10171      00
 10172 3c48 E8000000 		call	putchar@PLT	#
 10172      00
 10173              	.LVL527:
 10174              		.loc 3 107 10 view .LVU3455
 10175              	.LBE482:
 10176              	.LBE481:
 668:sieve_extend.c ****                 printWord(asis);
 10177              		.loc 1 668 17 is_stmt 1 view .LVU3456
 10178              	.LBB483:
 10179              	.LBI483:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 10180              		.loc 3 105 1 view .LVU3457
 10181              	.LBB484:
 10182              		.loc 3 107 3 view .LVU3458
 10183              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 10184              		.loc 3 107 10 is_stmt 0 view .LVU3459
 10185 3c4d 488D3D00 		lea	rdi, .LC11[rip]	#,
 10185      000000
 10186 3c54 E8000000 		call	puts@PLT	#
 10186      00
 10187              	.LVL528:
 10188              		.loc 3 107 10 view .LVU3460
 10189              	.LBE484:
 10190              	.LBE483:
 669:sieve_extend.c ****                 printf("\n");
 10191              		.loc 1 669 17 is_stmt 1 view .LVU3461
 10192              	.LBB485:
 10193              	.LBI485:
   3:debugtools.h  **** {
 10194              		.loc 4 3 20 view .LVU3462
 10195              	.LBB486:
   5:debugtools.h  ****     int col=0;
 10196              		.loc 4 5 5 view .LVU3463
 10197              	# debugtools.h:5:     char row[WORD_SIZE*2] = {};
   5:debugtools.h  ****     int col=0;
 10198              		.loc 4 5 10 is_stmt 0 view .LVU3464
 10199 3c59 C44119EF 		vpxor	xmm12, xmm12, xmm12	# tmp1456
 10199      E4
 10200              	# debugtools.h:6:     int col=0;
   6:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
 10201              		.loc 4 6 9 view .LVU3465
 10202 3c5e 4531D2   		xor	r10d, r10d	# col
 10203              	# debugtools.h:5:     char row[WORD_SIZE*2] = {};
   5:debugtools.h  ****     int col=0;
GAS LISTING /tmp/ccNeV1of.s 			page 283


 10204              		.loc 4 5 10 view .LVU3466
 10205 3c61 C5797F64 		vmovdqa	XMMWORD PTR 80[rsp], xmm12	# row, tmp1456
 10205      2450
 10206              	.LBB487:
 10207              	# debugtools.h:7:     for (int i=WORD_SIZE-1; i>=0; i--) {
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10208              		.loc 4 7 14 view .LVU3467
 10209 3c67 BE3F0000 		mov	esi, 63	# i,
 10209      00
 10210              	.LBE487:
 10211              	# debugtools.h:5:     char row[WORD_SIZE*2] = {};
   5:debugtools.h  ****     int col=0;
 10212              		.loc 4 5 10 view .LVU3468
 10213 3c6c C5797F64 		vmovdqa	XMMWORD PTR 96[rsp], xmm12	# row, tmp1456
 10213      2460
 10214 3c72 C5797F64 		vmovdqa	XMMWORD PTR 112[rsp], xmm12	# row, tmp1456
 10214      2470
 10215 3c78 C5797FA4 		vmovdqa	XMMWORD PTR 128[rsp], xmm12	# row, tmp1456
 10215      24800000 
 10215      00
 10216 3c81 C5797FA4 		vmovdqa	XMMWORD PTR 144[rsp], xmm12	# row, tmp1456
 10216      24900000 
 10216      00
 10217 3c8a C5797FA4 		vmovdqa	XMMWORD PTR 160[rsp], xmm12	# row, tmp1456
 10217      24A00000 
 10217      00
 10218 3c93 C5797FA4 		vmovdqa	XMMWORD PTR 176[rsp], xmm12	# row, tmp1456
 10218      24B00000 
 10218      00
 10219 3c9c C5797FA4 		vmovdqa	XMMWORD PTR 192[rsp], xmm12	# row, tmp1456
 10219      24C00000 
 10219      00
   6:debugtools.h  ****     for (int i=WORD_SIZE-1; i>=0; i--) {
 10220              		.loc 4 6 5 is_stmt 1 view .LVU3469
 10221              	.LVL529:
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10222              		.loc 4 7 5 view .LVU3470
 10223              	.LBB488:
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10224              		.loc 4 7 10 view .LVU3471
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10225              		.loc 4 7 29 view .LVU3472
 10226 3ca5 66662E0F 		.p2align 4
 10226      1F840000 
 10226      000000
 10227              		.p2align 3
 10228              	.L584:
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10229              		.loc 4 8 3 view .LVU3473
 10230              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10231              		.loc 4 8 46 is_stmt 0 view .LVU3474
 10232 3cb0 C4C2CBF7 		shrx	rax, r12, rsi	# tmp699, asis, i
 10232      C4
 10233 3cb5 83E001   		and	eax, 1	# tmp700,
 10234              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
GAS LISTING /tmp/ccNeV1of.s 			page 284


 10235              		.loc 4 8 14 view .LVU3475
 10236 3cb8 4883F801 		cmp	rax, 1	# tmp700,
 10237              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10238              		.loc 4 8 10 view .LVU3476
 10239 3cbc 418D7A01 		lea	edi, 1[r10]	# col,
 10240              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10241              		.loc 4 8 14 view .LVU3477
 10242 3cc0 4519F6   		sbb	r14d, r14d	# iftmp.59_172
 10243 3cc3 4D63FA   		movsx	r15, r10d	# col, col
 10244 3cc6 4183E6FD 		and	r14d, -3	# iftmp.59_172,
 10245              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10246              		.loc 4 8 10 view .LVU3478
 10247 3cca 4189FB   		mov	r11d, edi	# col, col
 10248              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10249              		.loc 4 8 14 view .LVU3479
 10250 3ccd 4183C631 		add	r14d, 49	# iftmp.59_172,
 10251              	.LVL530:
 10252              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10253              		.loc 4 9 6 view .LVU3480
 10254 3cd1 40F6C607 		test	sil, 7	# i,
 10255              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10256              		.loc 4 8 14 view .LVU3481
 10257 3cd5 4688743C 		mov	BYTE PTR 80[rsp+r15], r14b	# row, iftmp.59_172
 10257      50
   9:debugtools.h  ****     }
 10258              		.loc 4 9 3 is_stmt 1 view .LVU3482
 10259              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10260              		.loc 4 9 6 is_stmt 0 view .LVU3483
 10261 3cda 750D     		jne	.L583	#,
   9:debugtools.h  ****     }
 10262              		.loc 4 9 15 is_stmt 1 view .LVU3484
 10263              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10264              		.loc 4 9 22 is_stmt 0 view .LVU3485
 10265 3cdc 458D5A02 		lea	r11d, 2[r10]	# col,
 10266              	.LVL531:
 10267              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10268              		.loc 4 9 26 view .LVU3486
 10269 3ce0 4C63D7   		movsx	r10, edi	# col, col
 10270 3ce3 42C64414 		mov	BYTE PTR 80[rsp+r10], 32	# row,
 10270      5020
 10271              	.L583:
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10272              		.loc 4 7 35 is_stmt 1 view .LVU3487
 10273              	# debugtools.h:7:     for (int i=WORD_SIZE-1; i>=0; i--) {
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10274              		.loc 4 7 36 is_stmt 0 view .LVU3488
 10275 3ce9 8D46FF   		lea	eax, -1[rsi]	# tmp854,
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
GAS LISTING /tmp/ccNeV1of.s 			page 285


 10276              		.loc 4 7 29 is_stmt 1 view .LVU3489
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10277              		.loc 4 8 3 view .LVU3490
 10278              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10279              		.loc 4 8 46 is_stmt 0 view .LVU3491
 10280 3cec C4C2FBF7 		shrx	rdx, r12, rax	# tmp1027, asis, tmp854
 10280      D4
 10281 3cf1 83E201   		and	edx, 1	# tmp1028,
 10282              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10283              		.loc 4 8 10 view .LVU3492
 10284 3cf4 458D4301 		lea	r8d, 1[r11]	# col,
 10285              	.LVL532:
 10286              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10287              		.loc 4 8 14 view .LVU3493
 10288 3cf8 4883FA01 		cmp	rdx, 1	# tmp1028,
 10289 3cfc 4963CB   		movsx	rcx, r11d	# col, col
 10290 3cff 19F6     		sbb	esi, esi	# iftmp.59_172
 10291              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10292              		.loc 4 8 10 view .LVU3494
 10293 3d01 4589C1   		mov	r9d, r8d	# col, col
 10294              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10295              		.loc 4 8 14 view .LVU3495
 10296 3d04 83E6FD   		and	esi, -3	# iftmp.59_172,
 10297 3d07 83C631   		add	esi, 49	# iftmp.59_172,
 10298              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10299              		.loc 4 9 6 view .LVU3496
 10300 3d0a A807     		test	al, 7	# tmp854,
 10301              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10302              		.loc 4 8 14 view .LVU3497
 10303 3d0c 4088740C 		mov	BYTE PTR 80[rsp+rcx], sil	# row, iftmp.59_172
 10303      50
   9:debugtools.h  ****     }
 10304              		.loc 4 9 3 is_stmt 1 view .LVU3498
 10305              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10306              		.loc 4 9 6 is_stmt 0 view .LVU3499
 10307 3d11 750D     		jne	.L847	#,
   9:debugtools.h  ****     }
 10308              		.loc 4 9 15 is_stmt 1 view .LVU3500
 10309              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10310              		.loc 4 9 26 is_stmt 0 view .LVU3501
 10311 3d13 4D63E8   		movsx	r13, r8d	# col, col
 10312              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10313              		.loc 4 9 22 view .LVU3502
 10314 3d16 458D4B02 		lea	r9d, 2[r11]	# col,
 10315              	.LVL533:
 10316              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 286


 10317              		.loc 4 9 26 view .LVU3503
 10318 3d1a 42C6442C 		mov	BYTE PTR 80[rsp+r13], 32	# row,
 10318      5020
 10319              	.L847:
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10320              		.loc 4 7 35 is_stmt 1 view .LVU3504
 10321              	# debugtools.h:7:     for (int i=WORD_SIZE-1; i>=0; i--) {
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10322              		.loc 4 7 36 is_stmt 0 view .LVU3505
 10323 3d20 448D70FF 		lea	r14d, -1[rax]	# i,
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10324              		.loc 4 7 29 is_stmt 1 view .LVU3506
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10325              		.loc 4 8 3 view .LVU3507
 10326              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10327              		.loc 4 8 46 is_stmt 0 view .LVU3508
 10328 3d24 C4C28BF7 		shrx	rdi, r12, r14	# tmp1177, asis, i
 10328      FC
 10329 3d29 83E701   		and	edi, 1	# tmp1178,
 10330              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10331              		.loc 4 8 10 view .LVU3509
 10332 3d2c 458D5901 		lea	r11d, 1[r9]	# col,
 10333              	.LVL534:
 10334              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10335              		.loc 4 8 14 view .LVU3510
 10336 3d30 4883FF01 		cmp	rdi, 1	# tmp1178,
 10337 3d34 4D63D1   		movsx	r10, r9d	# col, col
 10338 3d37 4519FF   		sbb	r15d, r15d	# iftmp.59_172
 10339              	.LVL535:
 10340              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10341              		.loc 4 8 10 view .LVU3511
 10342 3d3a 4489DE   		mov	esi, r11d	# col, col
 10343              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10344              		.loc 4 8 14 view .LVU3512
 10345 3d3d 4183E7FD 		and	r15d, -3	# iftmp.59_172,
 10346 3d41 4183C731 		add	r15d, 49	# iftmp.59_172,
 10347              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10348              		.loc 4 9 6 view .LVU3513
 10349 3d45 4183E607 		and	r14d, 7	# i,
 10350              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10351              		.loc 4 8 14 view .LVU3514
 10352 3d49 46887C14 		mov	BYTE PTR 80[rsp+r10], r15b	# row, iftmp.59_172
 10352      50
   9:debugtools.h  ****     }
 10353              		.loc 4 9 3 is_stmt 1 view .LVU3515
 10354              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10355              		.loc 4 9 6 is_stmt 0 view .LVU3516
 10356 3d4e 750C     		jne	.L848	#,
   9:debugtools.h  ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 287


 10357              		.loc 4 9 15 is_stmt 1 view .LVU3517
 10358              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10359              		.loc 4 9 26 is_stmt 0 view .LVU3518
 10360 3d50 4963D3   		movsx	rdx, r11d	# col, col
 10361              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10362              		.loc 4 9 22 view .LVU3519
 10363 3d53 418D7102 		lea	esi, 2[r9]	# col,
 10364              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10365              		.loc 4 9 26 view .LVU3520
 10366 3d57 C6441450 		mov	BYTE PTR 80[rsp+rdx], 32	# row,
 10366      20
 10367              	.L848:
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10368              		.loc 4 7 35 is_stmt 1 view .LVU3521
 10369              	# debugtools.h:7:     for (int i=WORD_SIZE-1; i>=0; i--) {
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10370              		.loc 4 7 36 is_stmt 0 view .LVU3522
 10371 3d5c 448D40FE 		lea	r8d, -2[rax]	# i,
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10372              		.loc 4 7 29 is_stmt 1 view .LVU3523
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10373              		.loc 4 8 3 view .LVU3524
 10374              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10375              		.loc 4 8 46 is_stmt 0 view .LVU3525
 10376 3d60 C4C2BBF7 		shrx	rcx, r12, r8	# tmp1188, asis, i
 10376      CC
 10377 3d65 83E101   		and	ecx, 1	# tmp1189,
 10378              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10379              		.loc 4 8 10 view .LVU3526
 10380 3d68 448D6E01 		lea	r13d, 1[rsi]	# col,
 10381              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10382              		.loc 4 8 14 view .LVU3527
 10383 3d6c 4883F901 		cmp	rcx, 1	# tmp1189,
 10384 3d70 4C63F6   		movsx	r14, esi	# col, col
 10385 3d73 4519C9   		sbb	r9d, r9d	# iftmp.59_172
 10386              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10387              		.loc 4 8 10 view .LVU3528
 10388 3d76 4589EA   		mov	r10d, r13d	# col, col
 10389              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10390              		.loc 4 8 14 view .LVU3529
 10391 3d79 4183E1FD 		and	r9d, -3	# iftmp.59_172,
 10392 3d7d 4183C131 		add	r9d, 49	# iftmp.59_172,
 10393              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10394              		.loc 4 9 6 view .LVU3530
 10395 3d81 4183E007 		and	r8d, 7	# i,
 10396              	# debugtools.h:8: 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
   8:debugtools.h  **** 		if (!(i%8)) row[col++] = ' ';
 10397              		.loc 4 8 14 view .LVU3531
GAS LISTING /tmp/ccNeV1of.s 			page 288


 10398 3d85 46884C34 		mov	BYTE PTR 80[rsp+r14], r9b	# row, iftmp.59_172
 10398      50
   9:debugtools.h  ****     }
 10399              		.loc 4 9 3 is_stmt 1 view .LVU3532
 10400              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10401              		.loc 4 9 6 is_stmt 0 view .LVU3533
 10402 3d8a 750C     		jne	.L849	#,
   9:debugtools.h  ****     }
 10403              		.loc 4 9 15 is_stmt 1 view .LVU3534
 10404              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10405              		.loc 4 9 26 is_stmt 0 view .LVU3535
 10406 3d8c 4963FD   		movsx	rdi, r13d	# col, col
 10407              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10408              		.loc 4 9 22 view .LVU3536
 10409 3d8f 448D5602 		lea	r10d, 2[rsi]	# col,
 10410              	.LVL536:
 10411              	# debugtools.h:9: 		if (!(i%8)) row[col++] = ' ';
   9:debugtools.h  ****     }
 10412              		.loc 4 9 26 view .LVU3537
 10413 3d93 C6443C50 		mov	BYTE PTR 80[rsp+rdi], 32	# row,
 10413      20
 10414              	.LVL537:
 10415              	.L849:
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10416              		.loc 4 7 35 is_stmt 1 view .LVU3538
 10417              	# debugtools.h:7:     for (int i=WORD_SIZE-1; i>=0; i--) {
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10418              		.loc 4 7 5 is_stmt 0 view .LVU3539
 10419 3d98 83F802   		cmp	eax, 2	# tmp854,
 10420              	# debugtools.h:7:     for (int i=WORD_SIZE-1; i>=0; i--) {
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10421              		.loc 4 7 36 view .LVU3540
 10422 3d9b 8D70FD   		lea	esi, -3[rax]	# i,
 10423              	.LVL538:
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10424              		.loc 4 7 29 is_stmt 1 view .LVU3541
 10425              	# debugtools.h:7:     for (int i=WORD_SIZE-1; i>=0; i--) {
   7:debugtools.h  **** 		row[col++] = (bitword & (SAFE_SHIFTBIT<<i))?'1':'.';
 10426              		.loc 4 7 5 is_stmt 0 view .LVU3542
 10427 3d9e 0F850CFF 		jne	.L584	#,
 10427      FFFF
 10428              	.LBE488:
 10429              		.loc 4 12 5 is_stmt 1 view .LVU3543
 10430              	.LVL539:
 10431              	.LBB489:
 10432              	.LBI489:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 10433              		.loc 3 105 1 view .LVU3544
 10434              	.LBB490:
 10435              		.loc 3 107 3 view .LVU3545
 10436              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 10437              		.loc 3 107 10 is_stmt 0 view .LVU3546
 10438 3da4 4889DA   		mov	rdx, rbx	#, tmp846
 10439 3da7 488D3500 		lea	rsi, .LC10[rip]	#,
GAS LISTING /tmp/ccNeV1of.s 			page 289


 10439      000000
 10440              	.LVL540:
 10441              		.loc 3 107 10 view .LVU3547
 10442 3dae BF010000 		mov	edi, 1	#,
 10442      00
 10443 3db3 31C0     		xor	eax, eax	#
 10444              	.LVL541:
 10445              		.loc 3 107 10 view .LVU3548
 10446 3db5 E8000000 		call	__printf_chk@PLT	#
 10446      00
 10447              	.LVL542:
 10448              		.loc 3 107 10 view .LVU3549
 10449              	.LBE490:
 10450              	.LBE489:
 10451              	.LBE486:
 10452              	.LBE485:
 670:sieve_extend.c ****                 // dump_bitarray(bitarray, copy_word+4);
 10453              		.loc 1 670 17 is_stmt 1 view .LVU3550
 10454              	.LBB491:
 10455              	.LBI491:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 10456              		.loc 3 105 1 view .LVU3551
 10457              	.LBB492:
 10458              		.loc 3 107 3 view .LVU3552
 10459              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 10460              		.loc 3 107 10 is_stmt 0 view .LVU3553
 10461 3dba BF0A0000 		mov	edi, 10	#,
 10461      00
 10462 3dbf E8000000 		call	putchar@PLT	#
 10462      00
 10463              	.LVL543:
 10464              		.loc 3 107 10 view .LVU3554
 10465              	.LBE492:
 10466              	.LBE491:
 672:sieve_extend.c ****             }
 10467              		.loc 1 672 17 is_stmt 1 view .LVU3555
 10468 3dc4 31FF     		xor	edi, edi	#
 10469 3dc6 E8000000 		call	exit@PLT	#
 10469      00
 10470              	.LVL544:
 10471 3dcb 0F1F4400 		.p2align 4,,7
 10471      00
 10472              		.p2align 3
 10473              	.L609:
 672:sieve_extend.c ****             }
 10474              		.loc 1 672 17 is_stmt 0 view .LVU3556
 10475 3dd0 4A8D1427 		lea	rdx, [rdi+r12]	# tmp847,
 10476 3dd4 498D7A01 		lea	rdi, 1[r10]	# tmp885,
 10477              	.LVL545:
 672:sieve_extend.c ****             }
 10478              		.loc 1 672 17 view .LVU3557
 10479              	.LBE502:
 10480              	.LBE504:
 10481              	.LBB505:
 10482              	# sieve_extend.c:690:         register counter_t i = 0;
 690:sieve_extend.c ****         bitword_t* copy_ptr   = &bitarray[copy_word];
 10483              		.loc 1 690 28 view .LVU3558
GAS LISTING /tmp/ccNeV1of.s 			page 290


 10484 3dd8 31C0     		xor	eax, eax	# i
 10485 3dda 83E707   		and	edi, 7	# tmp886,
 10486 3ddd 0F84E000 		je	.L592	#,
 10486      0000
 10487 3de3 4883FF01 		cmp	rdi, 1	# tmp886,
 10488 3de7 0F84B200 		je	.L792	#,
 10488      0000
 10489 3ded 4883FF02 		cmp	rdi, 2	# tmp886,
 10490 3df1 0F849000 		je	.L793	#,
 10490      0000
 10491 3df7 4883FF03 		cmp	rdi, 3	# tmp886,
 10492 3dfb 7472     		je	.L794	#,
 10493 3dfd 4883FF04 		cmp	rdi, 4	# tmp886,
 10494 3e01 7454     		je	.L795	#,
 10495 3e03 4883FF05 		cmp	rdi, 5	# tmp886,
 10496 3e07 7436     		je	.L796	#,
 10497 3e09 4883FF06 		cmp	rdi, 6	# tmp886,
 10498 3e0d 7418     		je	.L797	#,
 696:sieve_extend.c ****     }
 10499              		.loc 1 696 13 is_stmt 1 view .LVU3559
 10500              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10501              		.loc 1 696 81 is_stmt 0 view .LVU3560
 10502 3e0f B8010000 		mov	eax, 1	# i,
 10502      00
 10503              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10504              		.loc 1 696 46 view .LVU3561
 10505 3e14 C462B3F7 		shrx	r11, QWORD PTR [rsi], r9	# _452, MEM[base: _10, index: i_447, step: 8, offset: 0B], _16
 10505      1E
 10506              	.LVL546:
 10507              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10508              		.loc 1 696 85 view .LVU3562
 10509 3e19 C462B9F7 		shlx	r15, QWORD PTR [rsi+rax*8], r8	# tmp1375, MEM[base: _10, index: _453, step: 8, offset: 0B], _
 10509      3CC6
 10510              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10511              		.loc 1 696 64 view .LVU3563
 10512 3e1f 4D09DF   		or	r15, r11	# tmp1376, _452
 10513 3e22 4C897CC2 		mov	QWORD PTR -8[rdx+rax*8], r15	# MEM[base: _789, index: _453, step: 8, offset: -8B], tmp1376
 10513      F8
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10514              		.loc 1 695 36 is_stmt 1 view .LVU3564
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10515              		.loc 1 695 16 view .LVU3565
 10516              	.LVL547:
 10517              	.L797:
 696:sieve_extend.c ****     }
 10518              		.loc 1 696 13 view .LVU3566
 10519              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10520              		.loc 1 696 46 is_stmt 0 view .LVU3567
 10521 3e27 C462B3F7 		shrx	r13, QWORD PTR [rsi+rax*8], r9	# _452, MEM[base: _10, index: i_447, step: 8, offset: 0B], _16
 10521      2CC6
 10522              	.LVL548:
 10523              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
GAS LISTING /tmp/ccNeV1of.s 			page 291


 696:sieve_extend.c ****     }
 10524              		.loc 1 696 81 view .LVU3568
 10525 3e2d 4883C001 		add	rax, 1	# i,
 10526              	.LVL549:
 10527              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10528              		.loc 1 696 85 view .LVU3569
 10529 3e31 C462B9F7 		shlx	r14, QWORD PTR [rsi+rax*8], r8	# tmp1381, MEM[base: _10, index: _453, step: 8, offset: 0B], _
 10529      34C6
 10530              	.LVL550:
 10531              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10532              		.loc 1 696 64 view .LVU3570
 10533 3e37 4D09EE   		or	r14, r13	# tmp1382, _452
 10534 3e3a 4C8974C2 		mov	QWORD PTR -8[rdx+rax*8], r14	# MEM[base: _789, index: _453, step: 8, offset: -8B], tmp1382
 10534      F8
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10535              		.loc 1 695 36 is_stmt 1 view .LVU3571
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10536              		.loc 1 695 16 view .LVU3572
 10537              	.LVL551:
 10538              	.L796:
 696:sieve_extend.c ****     }
 10539              		.loc 1 696 13 view .LVU3573
 10540              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10541              		.loc 1 696 46 is_stmt 0 view .LVU3574
 10542 3e3f C4E2B3F7 		shrx	rbx, QWORD PTR [rsi+rax*8], r9	# _452, MEM[base: _10, index: i_447, step: 8, offset: 0B], _16
 10542      1CC6
 10543              	.LVL552:
 10544              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10545              		.loc 1 696 81 view .LVU3575
 10546 3e45 4883C001 		add	rax, 1	# i,
 10547              	.LVL553:
 10548              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10549              		.loc 1 696 85 view .LVU3576
 10550 3e49 C462B9F7 		shlx	r12, QWORD PTR [rsi+rax*8], r8	# tmp1387, MEM[base: _10, index: _453, step: 8, offset: 0B], _
 10550      24C6
 10551              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10552              		.loc 1 696 64 view .LVU3577
 10553 3e4f 4909DC   		or	r12, rbx	# tmp1388, _452
 10554 3e52 4C8964C2 		mov	QWORD PTR -8[rdx+rax*8], r12	# MEM[base: _789, index: _453, step: 8, offset: -8B], tmp1388
 10554      F8
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10555              		.loc 1 695 36 is_stmt 1 view .LVU3578
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10556              		.loc 1 695 16 view .LVU3579
 10557              	.LVL554:
 10558              	.L795:
 696:sieve_extend.c ****     }
 10559              		.loc 1 696 13 view .LVU3580
 10560              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10561              		.loc 1 696 46 is_stmt 0 view .LVU3581
GAS LISTING /tmp/ccNeV1of.s 			page 292


 10562 3e57 C4E2B3F7 		shrx	rdi, QWORD PTR [rsi+rax*8], r9	# _452, MEM[base: _10, index: i_447, step: 8, offset: 0B], _16
 10562      3CC6
 10563              	.LVL555:
 10564              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10565              		.loc 1 696 81 view .LVU3582
 10566 3e5d 4883C001 		add	rax, 1	# i,
 10567              	.LVL556:
 10568              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10569              		.loc 1 696 85 view .LVU3583
 10570 3e61 C4E2B9F7 		shlx	rcx, QWORD PTR [rsi+rax*8], r8	# tmp1393, MEM[base: _10, index: _453, step: 8, offset: 0B], _
 10570      0CC6
 10571              	.LVL557:
 10572              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10573              		.loc 1 696 64 view .LVU3584
 10574 3e67 4809F9   		or	rcx, rdi	# tmp1394, _452
 10575 3e6a 48894CC2 		mov	QWORD PTR -8[rdx+rax*8], rcx	# MEM[base: _789, index: _453, step: 8, offset: -8B], tmp1394
 10575      F8
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10576              		.loc 1 695 36 is_stmt 1 view .LVU3585
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10577              		.loc 1 695 16 view .LVU3586
 10578              	.LVL558:
 10579              	.L794:
 696:sieve_extend.c ****     }
 10580              		.loc 1 696 13 view .LVU3587
 10581              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10582              		.loc 1 696 46 is_stmt 0 view .LVU3588
 10583 3e6f C462B3F7 		shrx	r11, QWORD PTR [rsi+rax*8], r9	# _452, MEM[base: _10, index: i_447, step: 8, offset: 0B], _16
 10583      1CC6
 10584              	.LVL559:
 10585              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10586              		.loc 1 696 81 view .LVU3589
 10587 3e75 4883C001 		add	rax, 1	# i,
 10588              	.LVL560:
 10589              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10590              		.loc 1 696 85 view .LVU3590
 10591 3e79 C462B9F7 		shlx	r15, QWORD PTR [rsi+rax*8], r8	# tmp1399, MEM[base: _10, index: _453, step: 8, offset: 0B], _
 10591      3CC6
 10592              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10593              		.loc 1 696 64 view .LVU3591
 10594 3e7f 4D09DF   		or	r15, r11	# tmp1400, _452
 10595 3e82 4C897CC2 		mov	QWORD PTR -8[rdx+rax*8], r15	# MEM[base: _789, index: _453, step: 8, offset: -8B], tmp1400
 10595      F8
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10596              		.loc 1 695 36 is_stmt 1 view .LVU3592
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10597              		.loc 1 695 16 view .LVU3593
 10598              	.LVL561:
 10599              	.L793:
 696:sieve_extend.c ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 293


 10600              		.loc 1 696 13 view .LVU3594
 10601              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10602              		.loc 1 696 46 is_stmt 0 view .LVU3595
 10603 3e87 C462B3F7 		shrx	r13, QWORD PTR [rsi+rax*8], r9	# _452, MEM[base: _10, index: i_447, step: 8, offset: 0B], _16
 10603      2CC6
 10604              	.LVL562:
 10605              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10606              		.loc 1 696 81 view .LVU3596
 10607 3e8d 4883C001 		add	rax, 1	# i,
 10608              	.LVL563:
 10609              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10610              		.loc 1 696 85 view .LVU3597
 10611 3e91 C462B9F7 		shlx	r14, QWORD PTR [rsi+rax*8], r8	# tmp1405, MEM[base: _10, index: _453, step: 8, offset: 0B], _
 10611      34C6
 10612              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10613              		.loc 1 696 64 view .LVU3598
 10614 3e97 4D09EE   		or	r14, r13	# tmp1406, _452
 10615 3e9a 4C8974C2 		mov	QWORD PTR -8[rdx+rax*8], r14	# MEM[base: _789, index: _453, step: 8, offset: -8B], tmp1406
 10615      F8
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10616              		.loc 1 695 36 is_stmt 1 view .LVU3599
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10617              		.loc 1 695 16 view .LVU3600
 10618              	.LVL564:
 10619              	.L792:
 696:sieve_extend.c ****     }
 10620              		.loc 1 696 13 view .LVU3601
 10621 3e9f 4989C4   		mov	r12, rax	# i, i
 10622              	.LVL565:
 10623              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10624              		.loc 1 696 46 is_stmt 0 view .LVU3602
 10625 3ea2 C4E2B3F7 		shrx	rbx, QWORD PTR [rsi+rax*8], r9	# _452, MEM[base: _10, index: i_447, step: 8, offset: 0B], _16
 10625      1CC6
 10626              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10627              		.loc 1 696 81 view .LVU3603
 10628 3ea8 4883C001 		add	rax, 1	# i,
 10629              	.LVL566:
 10630              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10631              		.loc 1 696 85 view .LVU3604
 10632 3eac C4E2B9F7 		shlx	rdi, QWORD PTR [rsi+rax*8], r8	# tmp1411, MEM[base: _10, index: _453, step: 8, offset: 0B], _
 10632      3CC6
 10633              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10634              		.loc 1 696 64 view .LVU3605
 10635 3eb2 4809DF   		or	rdi, rbx	# tmp1412, _452
 10636              	# sieve_extend.c:695:         for (; i <= size_word_ptr; i++)
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10637              		.loc 1 695 9 view .LVU3606
 10638 3eb5 4D39E2   		cmp	r10, r12	# tmp776, i
 10639              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
GAS LISTING /tmp/ccNeV1of.s 			page 294


 696:sieve_extend.c ****     }
 10640              		.loc 1 696 64 view .LVU3607
 10641 3eb8 48897CC2 		mov	QWORD PTR -8[rdx+rax*8], rdi	# MEM[base: _789, index: _453, step: 8, offset: -8B], tmp1412
 10641      F8
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10642              		.loc 1 695 36 is_stmt 1 view .LVU3608
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10643              		.loc 1 695 16 view .LVU3609
 10644              	# sieve_extend.c:695:         for (; i <= size_word_ptr; i++)
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10645              		.loc 1 695 9 is_stmt 0 view .LVU3610
 10646 3ebd 0F849BF5 		je	.L561	#,
 10646      FFFF
 10647              	.LVL567:
 10648              	.L592:
 696:sieve_extend.c ****     }
 10649              		.loc 1 696 13 is_stmt 1 view .LVU3611
 10650              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10651              		.loc 1 696 46 is_stmt 0 view .LVU3612
 10652 3ec3 C462B3F7 		shrx	r11, QWORD PTR [rsi+rax*8], r9	# _452, MEM[base: _10, index: i_447, step: 8, offset: 0B], _16
 10652      1CC6
 10653              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10654              		.loc 1 696 81 view .LVU3613
 10655 3ec9 4C8D7801 		lea	r15, 1[rax]	# tmp887,
 10656              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10657              		.loc 1 696 85 view .LVU3614
 10658 3ecd C4A2B9F7 		shlx	rcx, QWORD PTR [rsi+r15*8], r8	# tmp842, MEM[base: _10, index: _453, step: 8, offset: 0B], _1
 10658      0CFE
 10659              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10660              		.loc 1 696 64 view .LVU3615
 10661 3ed3 4C09D9   		or	rcx, r11	# tmp844, _452
 10662 3ed6 4A894CFA 		mov	QWORD PTR -8[rdx+r15*8], rcx	# MEM[base: _789, index: _453, step: 8, offset: -8B], tmp844
 10662      F8
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10663              		.loc 1 695 36 is_stmt 1 view .LVU3616
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10664              		.loc 1 695 16 view .LVU3617
 696:sieve_extend.c ****     }
 10665              		.loc 1 696 13 view .LVU3618
 10666              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10667              		.loc 1 696 81 is_stmt 0 view .LVU3619
 10668 3edb 488D5802 		lea	rbx, 2[rax]	# i,
 10669              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10670              		.loc 1 696 46 view .LVU3620
 10671 3edf 4E8B2CFE 		mov	r13, QWORD PTR [rsi+r15*8]	# MEM[base: _10, index: i_447, step: 8, offset: 0B], MEM[base: _10,
 10672              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10673              		.loc 1 696 85 view .LVU3621
 10674 3ee3 C462B9F7 		shlx	r12, QWORD PTR [rsi+rbx*8], r8	# tmp1131, MEM[base: _10, index: _453, step: 8, offset: 0B], _
 10674      24DE
 10675              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
GAS LISTING /tmp/ccNeV1of.s 			page 295


 696:sieve_extend.c ****     }
 10676              		.loc 1 696 46 view .LVU3622
 10677 3ee9 C442B3F7 		shrx	r14, r13, r9	# _452, MEM[base: _10, index: i_447, step: 8, offset: 0B], _16
 10677      F5
 10678              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10679              		.loc 1 696 64 view .LVU3623
 10680 3eee 4D09F4   		or	r12, r14	# tmp1132, _452
 10681 3ef1 4C8964DA 		mov	QWORD PTR -8[rdx+rbx*8], r12	# MEM[base: _789, index: _453, step: 8, offset: -8B], tmp1132
 10681      F8
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10682              		.loc 1 695 36 is_stmt 1 view .LVU3624
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10683              		.loc 1 695 16 view .LVU3625
 696:sieve_extend.c ****     }
 10684              		.loc 1 696 13 view .LVU3626
 10685              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10686              		.loc 1 696 81 is_stmt 0 view .LVU3627
 10687 3ef6 4C8D7803 		lea	r15, 3[rax]	# i,
 10688              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10689              		.loc 1 696 46 view .LVU3628
 10690 3efa 488B3CDE 		mov	rdi, QWORD PTR [rsi+rbx*8]	# MEM[base: _10, index: i_447, step: 8, offset: 0B], MEM[base: _10,
 10691              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10692              		.loc 1 696 85 view .LVU3629
 10693 3efe C4A2B9F7 		shlx	rcx, QWORD PTR [rsi+r15*8], r8	# tmp1138, MEM[base: _10, index: _453, step: 8, offset: 0B], _
 10693      0CFE
 10694              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10695              		.loc 1 696 46 view .LVU3630
 10696 3f04 C462B3F7 		shrx	r11, rdi, r9	# _452, MEM[base: _10, index: i_447, step: 8, offset: 0B], _16
 10696      DF
 10697              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10698              		.loc 1 696 64 view .LVU3631
 10699 3f09 4C09D9   		or	rcx, r11	# tmp1139, _452
 10700 3f0c 4A894CFA 		mov	QWORD PTR -8[rdx+r15*8], rcx	# MEM[base: _789, index: _453, step: 8, offset: -8B], tmp1139
 10700      F8
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10701              		.loc 1 695 36 is_stmt 1 view .LVU3632
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10702              		.loc 1 695 16 view .LVU3633
 696:sieve_extend.c ****     }
 10703              		.loc 1 696 13 view .LVU3634
 10704              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10705              		.loc 1 696 81 is_stmt 0 view .LVU3635
 10706 3f11 488D5804 		lea	rbx, 4[rax]	# i,
 10707              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10708              		.loc 1 696 46 view .LVU3636
 10709 3f15 4E8B2CFE 		mov	r13, QWORD PTR [rsi+r15*8]	# MEM[base: _10, index: i_447, step: 8, offset: 0B], MEM[base: _10,
 10710              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10711              		.loc 1 696 85 view .LVU3637
GAS LISTING /tmp/ccNeV1of.s 			page 296


 10712 3f19 C462B9F7 		shlx	r12, QWORD PTR [rsi+rbx*8], r8	# tmp1145, MEM[base: _10, index: _453, step: 8, offset: 0B], _
 10712      24DE
 10713              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10714              		.loc 1 696 46 view .LVU3638
 10715 3f1f C442B3F7 		shrx	r14, r13, r9	# _452, MEM[base: _10, index: i_447, step: 8, offset: 0B], _16
 10715      F5
 10716              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10717              		.loc 1 696 64 view .LVU3639
 10718 3f24 4D09F4   		or	r12, r14	# tmp1146, _452
 10719 3f27 4C8964DA 		mov	QWORD PTR -8[rdx+rbx*8], r12	# MEM[base: _789, index: _453, step: 8, offset: -8B], tmp1146
 10719      F8
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10720              		.loc 1 695 36 is_stmt 1 view .LVU3640
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10721              		.loc 1 695 16 view .LVU3641
 696:sieve_extend.c ****     }
 10722              		.loc 1 696 13 view .LVU3642
 10723              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10724              		.loc 1 696 81 is_stmt 0 view .LVU3643
 10725 3f2c 4C8D7805 		lea	r15, 5[rax]	# i,
 10726              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10727              		.loc 1 696 46 view .LVU3644
 10728 3f30 488B3CDE 		mov	rdi, QWORD PTR [rsi+rbx*8]	# MEM[base: _10, index: i_447, step: 8, offset: 0B], MEM[base: _10,
 10729              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10730              		.loc 1 696 85 view .LVU3645
 10731 3f34 C4A2B9F7 		shlx	rcx, QWORD PTR [rsi+r15*8], r8	# tmp1152, MEM[base: _10, index: _453, step: 8, offset: 0B], _
 10731      0CFE
 10732              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10733              		.loc 1 696 46 view .LVU3646
 10734 3f3a C462B3F7 		shrx	r11, rdi, r9	# _452, MEM[base: _10, index: i_447, step: 8, offset: 0B], _16
 10734      DF
 10735              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10736              		.loc 1 696 64 view .LVU3647
 10737 3f3f 4C09D9   		or	rcx, r11	# tmp1153, _452
 10738 3f42 4A894CFA 		mov	QWORD PTR -8[rdx+r15*8], rcx	# MEM[base: _789, index: _453, step: 8, offset: -8B], tmp1153
 10738      F8
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10739              		.loc 1 695 36 is_stmt 1 view .LVU3648
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10740              		.loc 1 695 16 view .LVU3649
 696:sieve_extend.c ****     }
 10741              		.loc 1 696 13 view .LVU3650
 10742              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10743              		.loc 1 696 81 is_stmt 0 view .LVU3651
 10744 3f47 488D5806 		lea	rbx, 6[rax]	# i,
 10745              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10746              		.loc 1 696 46 view .LVU3652
 10747 3f4b 4E8B2CFE 		mov	r13, QWORD PTR [rsi+r15*8]	# MEM[base: _10, index: i_447, step: 8, offset: 0B], MEM[base: _10,
GAS LISTING /tmp/ccNeV1of.s 			page 297


 10748              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10749              		.loc 1 696 85 view .LVU3653
 10750 3f4f C462B9F7 		shlx	r12, QWORD PTR [rsi+rbx*8], r8	# tmp1159, MEM[base: _10, index: _453, step: 8, offset: 0B], _
 10750      24DE
 10751              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10752              		.loc 1 696 46 view .LVU3654
 10753 3f55 C442B3F7 		shrx	r14, r13, r9	# _452, MEM[base: _10, index: i_447, step: 8, offset: 0B], _16
 10753      F5
 10754              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10755              		.loc 1 696 64 view .LVU3655
 10756 3f5a 4D09F4   		or	r12, r14	# tmp1160, _452
 10757 3f5d 4C8964DA 		mov	QWORD PTR -8[rdx+rbx*8], r12	# MEM[base: _789, index: _453, step: 8, offset: -8B], tmp1160
 10757      F8
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10758              		.loc 1 695 36 is_stmt 1 view .LVU3656
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10759              		.loc 1 695 16 view .LVU3657
 696:sieve_extend.c ****     }
 10760              		.loc 1 696 13 view .LVU3658
 10761              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10762              		.loc 1 696 81 is_stmt 0 view .LVU3659
 10763 3f62 4C8D7807 		lea	r15, 7[rax]	# i,
 10764              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10765              		.loc 1 696 46 view .LVU3660
 10766 3f66 488B3CDE 		mov	rdi, QWORD PTR [rsi+rbx*8]	# MEM[base: _10, index: i_447, step: 8, offset: 0B], MEM[base: _10,
 10767              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10768              		.loc 1 696 85 view .LVU3661
 10769 3f6a C4A2B9F7 		shlx	rcx, QWORD PTR [rsi+r15*8], r8	# tmp1166, MEM[base: _10, index: _453, step: 8, offset: 0B], _
 10769      0CFE
 10770              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10771              		.loc 1 696 46 view .LVU3662
 10772 3f70 C462B3F7 		shrx	r11, rdi, r9	# _452, MEM[base: _10, index: i_447, step: 8, offset: 0B], _16
 10772      DF
 10773              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10774              		.loc 1 696 64 view .LVU3663
 10775 3f75 4C09D9   		or	rcx, r11	# tmp1167, _452
 10776 3f78 4A894CFA 		mov	QWORD PTR -8[rdx+r15*8], rcx	# MEM[base: _789, index: _453, step: 8, offset: -8B], tmp1167
 10776      F8
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10777              		.loc 1 695 36 is_stmt 1 view .LVU3664
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10778              		.loc 1 695 16 view .LVU3665
 696:sieve_extend.c ****     }
 10779              		.loc 1 696 13 view .LVU3666
 10780              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10781              		.loc 1 696 81 is_stmt 0 view .LVU3667
 10782 3f7d 4883C008 		add	rax, 8	# i,
 10783              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
GAS LISTING /tmp/ccNeV1of.s 			page 298


 696:sieve_extend.c ****     }
 10784              		.loc 1 696 46 view .LVU3668
 10785 3f81 C422B3F7 		shrx	r13, QWORD PTR [rsi+r15*8], r9	# _452, MEM[base: _10, index: i_447, step: 8, offset: 0B], _16
 10785      2CFE
 10786              	.LVL568:
 10787              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10788              		.loc 1 696 85 view .LVU3669
 10789 3f87 C462B9F7 		shlx	r14, QWORD PTR [rsi+rax*8], r8	# tmp1172, MEM[base: _10, index: _453, step: 8, offset: 0B], _
 10789      34C6
 10790              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10791              		.loc 1 696 64 view .LVU3670
 10792 3f8d 4D09EE   		or	r14, r13	# tmp1173, _452
 10793              	# sieve_extend.c:695:         for (; i <= size_word_ptr; i++)
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10794              		.loc 1 695 9 view .LVU3671
 10795 3f90 4D39FA   		cmp	r10, r15	# tmp776, i
 10796              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 10797              		.loc 1 696 64 view .LVU3672
 10798 3f93 4C8974C2 		mov	QWORD PTR -8[rdx+rax*8], r14	# MEM[base: _789, index: _453, step: 8, offset: -8B], tmp1173
 10798      F8
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10799              		.loc 1 695 36 is_stmt 1 view .LVU3673
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10800              		.loc 1 695 16 view .LVU3674
 10801              	# sieve_extend.c:695:         for (; i <= size_word_ptr; i++)
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10802              		.loc 1 695 9 is_stmt 0 view .LVU3675
 10803 3f98 0F8525FF 		jne	.L592	#,
 10803      FFFF
 10804 3f9e E9BBF4FF 		jmp	.L561	#
 10804      FF
 10805              	.LVL569:
 10806              		.p2align 4,,7
 10807 3fa3 0F1F4400 		.p2align 3
 10807      00
 10808              	.L566:
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 10809              		.loc 1 695 9 view .LVU3676
 10810 3fa8 4989FC   		mov	r12, rdi	# tmp638, bitarray
 10811 3fab 4D8D1C16 		lea	r11, [r14+rdx]	# tmp636,
 10812 3faf 4929DC   		sub	r12, rbx	# tmp638, _6
 10813 3fb2 4A8D742F 		lea	rsi, 8[rdi+r13]	# ivtmp.518,
 10813      08
 10814 3fb7 4B8D04DC 		lea	rax, [r12+r11*8]	# _784,
 10815              	.LBE505:
 10816              	.LBB506:
 10817              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10818              		.loc 1 624 33 view .LVU3677
 10819 3fbb 4D89D5   		mov	r13, r10	# tmp639, copy_word
 10820 3fbe 4989C3   		mov	r11, rax	# tmp873, _784
 10821 3fc1 4D29F5   		sub	r13, r14	# tmp639, source_word
 10822 3fc4 4929F3   		sub	r11, rsi	# tmp873, ivtmp.518
 10823 3fc7 4983EB08 		sub	r11, 8	# tmp874,
GAS LISTING /tmp/ccNeV1of.s 			page 299


 10824 3fcb 49C1EB03 		shr	r11, 3	# tmp872,
 10825 3fcf 4983C301 		add	r11, 1	# tmp875,
 10826 3fd3 4183E307 		and	r11d, 7	# tmp876,
 10827 3fd7 0F84CF00 		je	.L571	#,
 10827      0000
 10828 3fdd 4983FB01 		cmp	r11, 1	# tmp876,
 10829 3fe1 0F84A600 		je	.L774	#,
 10829      0000
 10830 3fe7 4983FB02 		cmp	r11, 2	# tmp876,
 10831 3feb 0F848600 		je	.L775	#,
 10831      0000
 10832 3ff1 4983FB03 		cmp	r11, 3	# tmp876,
 10833 3ff5 746A     		je	.L776	#,
 10834 3ff7 4983FB04 		cmp	r11, 4	# tmp876,
 10835 3ffb 744E     		je	.L777	#,
 10836 3ffd 4983FB05 		cmp	r11, 5	# tmp876,
 10837 4001 7432     		je	.L778	#,
 10838 4003 4983FB06 		cmp	r11, 6	# tmp876,
 10839 4007 7416     		je	.L779	#,
 10840              	.LVL570:
 624:sieve_extend.c ****         }
 10841              		.loc 1 624 13 is_stmt 1 view .LVU3678
 10842              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10843              		.loc 1 624 103 is_stmt 0 view .LVU3679
 10844 4009 C462B9F7 		shlx	r12, QWORD PTR [rsi], r8	# tmp1302, MEM[base: _776, offset: 0B], _12
 10844      26
 10845              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10846              		.loc 1 624 58 view .LVU3680
 10847 400e C4E2B3F7 		shrx	rbx, QWORD PTR -8[rsi], r9	# tmp1304, MEM[base: _776, offset: -8B], _16
 10847      5EF8
 10848              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10849              		.loc 1 624 76 view .LVU3681
 10850 4014 4C09E3   		or	rbx, r12	# tmp1305, tmp1302
 10851 4017 4A891CEE 		mov	QWORD PTR [rsi+r13*8], rbx	# MEM[base: _776, index: _778, step: 8, offset: 0B], tmp1305
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10852              		.loc 1 623 41 is_stmt 1 view .LVU3682
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10853              		.loc 1 623 16 view .LVU3683
 10854 401b 4883C608 		add	rsi, 8	# ivtmp.518,
 10855              	.L779:
 624:sieve_extend.c ****         }
 10856              		.loc 1 624 13 view .LVU3684
 10857              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10858              		.loc 1 624 103 is_stmt 0 view .LVU3685
 10859 401f C462B9F7 		shlx	r11, QWORD PTR [rsi], r8	# tmp1307, MEM[base: _776, offset: 0B], _12
 10859      1E
 10860              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10861              		.loc 1 624 58 view .LVU3686
 10862 4024 C462B3F7 		shrx	r12, QWORD PTR -8[rsi], r9	# tmp1309, MEM[base: _776, offset: -8B], _16
 10862      66F8
 10863              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
GAS LISTING /tmp/ccNeV1of.s 			page 300


 10864              		.loc 1 624 76 view .LVU3687
 10865 402a 4D09E3   		or	r11, r12	# tmp1310, tmp1309
 10866 402d 4E891CEE 		mov	QWORD PTR [rsi+r13*8], r11	# MEM[base: _776, index: _778, step: 8, offset: 0B], tmp1310
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10867              		.loc 1 623 41 is_stmt 1 view .LVU3688
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10868              		.loc 1 623 16 view .LVU3689
 10869 4031 4883C608 		add	rsi, 8	# ivtmp.518,
 10870              	.L778:
 624:sieve_extend.c ****         }
 10871              		.loc 1 624 13 view .LVU3690
 10872              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10873              		.loc 1 624 103 is_stmt 0 view .LVU3691
 10874 4035 C462B9F7 		shlx	r11, QWORD PTR [rsi], r8	# tmp1312, MEM[base: _776, offset: 0B], _12
 10874      1E
 10875              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10876              		.loc 1 624 58 view .LVU3692
 10877 403a C4E2B3F7 		shrx	rbx, QWORD PTR -8[rsi], r9	# tmp1314, MEM[base: _776, offset: -8B], _16
 10877      5EF8
 10878              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10879              		.loc 1 624 76 view .LVU3693
 10880 4040 4909DB   		or	r11, rbx	# tmp1315, tmp1314
 10881 4043 4E891CEE 		mov	QWORD PTR [rsi+r13*8], r11	# MEM[base: _776, index: _778, step: 8, offset: 0B], tmp1315
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10882              		.loc 1 623 41 is_stmt 1 view .LVU3694
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10883              		.loc 1 623 16 view .LVU3695
 10884 4047 4883C608 		add	rsi, 8	# ivtmp.518,
 10885              	.L777:
 624:sieve_extend.c ****         }
 10886              		.loc 1 624 13 view .LVU3696
 10887              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10888              		.loc 1 624 103 is_stmt 0 view .LVU3697
 10889 404b C462B9F7 		shlx	r12, QWORD PTR [rsi], r8	# tmp1317, MEM[base: _776, offset: 0B], _12
 10889      26
 10890              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10891              		.loc 1 624 58 view .LVU3698
 10892 4050 C462B3F7 		shrx	r11, QWORD PTR -8[rsi], r9	# tmp1319, MEM[base: _776, offset: -8B], _16
 10892      5EF8
 10893              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10894              		.loc 1 624 76 view .LVU3699
 10895 4056 4D09DC   		or	r12, r11	# tmp1320, tmp1319
 10896 4059 4E8924EE 		mov	QWORD PTR [rsi+r13*8], r12	# MEM[base: _776, index: _778, step: 8, offset: 0B], tmp1320
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10897              		.loc 1 623 41 is_stmt 1 view .LVU3700
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10898              		.loc 1 623 16 view .LVU3701
 10899 405d 4883C608 		add	rsi, 8	# ivtmp.518,
 10900              	.L776:
 624:sieve_extend.c ****         }
 10901              		.loc 1 624 13 view .LVU3702
GAS LISTING /tmp/ccNeV1of.s 			page 301


 10902              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10903              		.loc 1 624 103 is_stmt 0 view .LVU3703
 10904 4061 C462B9F7 		shlx	r12, QWORD PTR [rsi], r8	# tmp1322, MEM[base: _776, offset: 0B], _12
 10904      26
 10905              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10906              		.loc 1 624 58 view .LVU3704
 10907 4066 C4E2B3F7 		shrx	rbx, QWORD PTR -8[rsi], r9	# tmp1324, MEM[base: _776, offset: -8B], _16
 10907      5EF8
 10908              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10909              		.loc 1 624 76 view .LVU3705
 10910 406c 4909DC   		or	r12, rbx	# tmp1325, tmp1324
 10911 406f 4E8924EE 		mov	QWORD PTR [rsi+r13*8], r12	# MEM[base: _776, index: _778, step: 8, offset: 0B], tmp1325
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10912              		.loc 1 623 41 is_stmt 1 view .LVU3706
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10913              		.loc 1 623 16 view .LVU3707
 10914 4073 4883C608 		add	rsi, 8	# ivtmp.518,
 10915              	.L775:
 624:sieve_extend.c ****         }
 10916              		.loc 1 624 13 view .LVU3708
 10917              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10918              		.loc 1 624 103 is_stmt 0 view .LVU3709
 10919 4077 C462B9F7 		shlx	r11, QWORD PTR [rsi], r8	# tmp1327, MEM[base: _776, offset: 0B], _12
 10919      1E
 10920              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10921              		.loc 1 624 58 view .LVU3710
 10922 407c C462B3F7 		shrx	r12, QWORD PTR -8[rsi], r9	# tmp1329, MEM[base: _776, offset: -8B], _16
 10922      66F8
 10923              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10924              		.loc 1 624 76 view .LVU3711
 10925 4082 4D09E3   		or	r11, r12	# tmp1330, tmp1329
 10926 4085 4E891CEE 		mov	QWORD PTR [rsi+r13*8], r11	# MEM[base: _776, index: _778, step: 8, offset: 0B], tmp1330
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10927              		.loc 1 623 41 is_stmt 1 view .LVU3712
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10928              		.loc 1 623 16 view .LVU3713
 10929 4089 4883C608 		add	rsi, 8	# ivtmp.518,
 10930              	.L774:
 624:sieve_extend.c ****         }
 10931              		.loc 1 624 13 view .LVU3714
 10932              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10933              		.loc 1 624 103 is_stmt 0 view .LVU3715
 10934 408d C462B9F7 		shlx	r11, QWORD PTR [rsi], r8	# tmp1332, MEM[base: _776, offset: 0B], _12
 10934      1E
 10935              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10936              		.loc 1 624 58 view .LVU3716
 10937 4092 C4E2B3F7 		shrx	rbx, QWORD PTR -8[rsi], r9	# tmp1334, MEM[base: _776, offset: -8B], _16
 10937      5EF8
 10938              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
GAS LISTING /tmp/ccNeV1of.s 			page 302


 624:sieve_extend.c ****         }
 10939              		.loc 1 624 76 view .LVU3717
 10940 4098 4909DB   		or	r11, rbx	# tmp1335, tmp1334
 10941 409b 4E891CEE 		mov	QWORD PTR [rsi+r13*8], r11	# MEM[base: _776, index: _778, step: 8, offset: 0B], tmp1335
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10942              		.loc 1 623 41 is_stmt 1 view .LVU3718
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10943              		.loc 1 623 16 view .LVU3719
 10944 409f 4883C608 		add	rsi, 8	# ivtmp.518,
 10945              	# sieve_extend.c:623:         for (; copy_word < target_word; copy_word++, source_word++ ) {
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10946              		.loc 1 623 9 is_stmt 0 view .LVU3720
 10947 40a3 4839C6   		cmp	rsi, rax	# ivtmp.518, _784
 10948 40a6 0F8495ED 		je	.L572	#,
 10948      FFFF
 10949              	.L571:
 624:sieve_extend.c ****         }
 10950              		.loc 1 624 13 is_stmt 1 view .LVU3721
 10951              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10952              		.loc 1 624 58 is_stmt 0 view .LVU3722
 10953 40ac C462B3F7 		shrx	r11, QWORD PTR -8[rsi], r9	# tmp642, MEM[base: _776, offset: -8B], _16
 10953      5EF8
 10954              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10955              		.loc 1 624 103 view .LVU3723
 10956 40b2 C462B9F7 		shlx	r12, QWORD PTR [rsi], r8	# tmp640, MEM[base: _776, offset: 0B], _12
 10956      26
 10957              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10958              		.loc 1 624 76 view .LVU3724
 10959 40b7 4D09DC   		or	r12, r11	# tmp644, tmp642
 10960 40ba 488D5E08 		lea	rbx, 8[rsi]	# tmp877,
 10961 40be 4E8924EE 		mov	QWORD PTR [rsi+r13*8], r12	# MEM[base: _776, index: _778, step: 8, offset: 0B], tmp644
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10962              		.loc 1 623 41 is_stmt 1 view .LVU3725
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10963              		.loc 1 623 16 view .LVU3726
 624:sieve_extend.c ****         }
 10964              		.loc 1 624 13 view .LVU3727
 10965              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10966              		.loc 1 624 103 is_stmt 0 view .LVU3728
 10967 40c2 C462B9F7 		shlx	r11, QWORD PTR 8[rsi], r8	# tmp938, MEM[base: _776, offset: 0B], _12
 10967      5E08
 10968              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10969              		.loc 1 624 58 view .LVU3729
 10970 40c8 C462B3F7 		shrx	r12, QWORD PTR -8[rbx], r9	# tmp940, MEM[base: _776, offset: -8B], _16
 10970      63F8
 10971              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10972              		.loc 1 624 76 view .LVU3730
 10973 40ce 4D09E3   		or	r11, r12	# tmp941, tmp940
 10974 40d1 4E891CEB 		mov	QWORD PTR [rbx+r13*8], r11	# MEM[base: _776, index: _778, step: 8, offset: 0B], tmp941
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10975              		.loc 1 623 41 is_stmt 1 view .LVU3731
GAS LISTING /tmp/ccNeV1of.s 			page 303


 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10976              		.loc 1 623 16 view .LVU3732
 10977 40d5 488D5E10 		lea	rbx, 16[rsi]	# ivtmp.518,
 624:sieve_extend.c ****         }
 10978              		.loc 1 624 13 view .LVU3733
 10979              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10980              		.loc 1 624 103 is_stmt 0 view .LVU3734
 10981 40d9 C462B9F7 		shlx	r11, QWORD PTR 16[rsi], r8	# tmp944, MEM[base: _776, offset: 0B], _12
 10981      5E10
 10982              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10983              		.loc 1 624 58 view .LVU3735
 10984 40df C462B3F7 		shrx	r12, QWORD PTR -8[rbx], r9	# tmp946, MEM[base: _776, offset: -8B], _16
 10984      63F8
 10985              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10986              		.loc 1 624 76 view .LVU3736
 10987 40e5 4D09E3   		or	r11, r12	# tmp947, tmp946
 10988 40e8 4E891CEB 		mov	QWORD PTR [rbx+r13*8], r11	# MEM[base: _776, index: _778, step: 8, offset: 0B], tmp947
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10989              		.loc 1 623 41 is_stmt 1 view .LVU3737
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 10990              		.loc 1 623 16 view .LVU3738
 10991 40ec 488D5E18 		lea	rbx, 24[rsi]	# ivtmp.518,
 624:sieve_extend.c ****         }
 10992              		.loc 1 624 13 view .LVU3739
 10993              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10994              		.loc 1 624 103 is_stmt 0 view .LVU3740
 10995 40f0 C462B9F7 		shlx	r11, QWORD PTR 24[rsi], r8	# tmp950, MEM[base: _776, offset: 0B], _12
 10995      5E18
 10996              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 10997              		.loc 1 624 58 view .LVU3741
 10998 40f6 C462B3F7 		shrx	r12, QWORD PTR -8[rbx], r9	# tmp952, MEM[base: _776, offset: -8B], _16
 10998      63F8
 10999              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11000              		.loc 1 624 76 view .LVU3742
 11001 40fc 4D09E3   		or	r11, r12	# tmp953, tmp952
 11002 40ff 4E891CEB 		mov	QWORD PTR [rbx+r13*8], r11	# MEM[base: _776, index: _778, step: 8, offset: 0B], tmp953
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11003              		.loc 1 623 41 is_stmt 1 view .LVU3743
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11004              		.loc 1 623 16 view .LVU3744
 11005 4103 488D5E20 		lea	rbx, 32[rsi]	# ivtmp.518,
 624:sieve_extend.c ****         }
 11006              		.loc 1 624 13 view .LVU3745
 11007              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11008              		.loc 1 624 103 is_stmt 0 view .LVU3746
 11009 4107 C462B9F7 		shlx	r11, QWORD PTR 32[rsi], r8	# tmp956, MEM[base: _776, offset: 0B], _12
 11009      5E20
 11010              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11011              		.loc 1 624 58 view .LVU3747
GAS LISTING /tmp/ccNeV1of.s 			page 304


 11012 410d C462B3F7 		shrx	r12, QWORD PTR -8[rbx], r9	# tmp958, MEM[base: _776, offset: -8B], _16
 11012      63F8
 11013              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11014              		.loc 1 624 76 view .LVU3748
 11015 4113 4D09E3   		or	r11, r12	# tmp959, tmp958
 11016 4116 4E891CEB 		mov	QWORD PTR [rbx+r13*8], r11	# MEM[base: _776, index: _778, step: 8, offset: 0B], tmp959
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11017              		.loc 1 623 41 is_stmt 1 view .LVU3749
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11018              		.loc 1 623 16 view .LVU3750
 11019 411a 488D5E28 		lea	rbx, 40[rsi]	# ivtmp.518,
 624:sieve_extend.c ****         }
 11020              		.loc 1 624 13 view .LVU3751
 11021              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11022              		.loc 1 624 103 is_stmt 0 view .LVU3752
 11023 411e C462B9F7 		shlx	r11, QWORD PTR 40[rsi], r8	# tmp962, MEM[base: _776, offset: 0B], _12
 11023      5E28
 11024              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11025              		.loc 1 624 58 view .LVU3753
 11026 4124 C462B3F7 		shrx	r12, QWORD PTR -8[rbx], r9	# tmp964, MEM[base: _776, offset: -8B], _16
 11026      63F8
 11027              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11028              		.loc 1 624 76 view .LVU3754
 11029 412a 4D09E3   		or	r11, r12	# tmp965, tmp964
 11030 412d 4E891CEB 		mov	QWORD PTR [rbx+r13*8], r11	# MEM[base: _776, index: _778, step: 8, offset: 0B], tmp965
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11031              		.loc 1 623 41 is_stmt 1 view .LVU3755
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11032              		.loc 1 623 16 view .LVU3756
 11033 4131 488D5E30 		lea	rbx, 48[rsi]	# ivtmp.518,
 624:sieve_extend.c ****         }
 11034              		.loc 1 624 13 view .LVU3757
 11035              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11036              		.loc 1 624 103 is_stmt 0 view .LVU3758
 11037 4135 C462B9F7 		shlx	r11, QWORD PTR 48[rsi], r8	# tmp968, MEM[base: _776, offset: 0B], _12
 11037      5E30
 11038              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11039              		.loc 1 624 58 view .LVU3759
 11040 413b C462B3F7 		shrx	r12, QWORD PTR -8[rbx], r9	# tmp970, MEM[base: _776, offset: -8B], _16
 11040      63F8
 11041              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11042              		.loc 1 624 76 view .LVU3760
 11043 4141 4D09E3   		or	r11, r12	# tmp971, tmp970
 11044 4144 4E891CEB 		mov	QWORD PTR [rbx+r13*8], r11	# MEM[base: _776, index: _778, step: 8, offset: 0B], tmp971
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11045              		.loc 1 623 41 is_stmt 1 view .LVU3761
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11046              		.loc 1 623 16 view .LVU3762
 11047 4148 488D5E38 		lea	rbx, 56[rsi]	# ivtmp.518,
 624:sieve_extend.c ****         }
GAS LISTING /tmp/ccNeV1of.s 			page 305


 11048              		.loc 1 624 13 view .LVU3763
 11049              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11050              		.loc 1 624 103 is_stmt 0 view .LVU3764
 11051 414c C462B9F7 		shlx	r11, QWORD PTR 56[rsi], r8	# tmp974, MEM[base: _776, offset: 0B], _12
 11051      5E38
 11052 4152 4883C640 		add	rsi, 64	# ivtmp.518,
 11053              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11054              		.loc 1 624 58 view .LVU3765
 11055 4156 C462B3F7 		shrx	r12, QWORD PTR -8[rbx], r9	# tmp976, MEM[base: _776, offset: -8B], _16
 11055      63F8
 11056              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11057              		.loc 1 624 76 view .LVU3766
 11058 415c 4D09E3   		or	r11, r12	# tmp977, tmp976
 11059 415f 4E891CEB 		mov	QWORD PTR [rbx+r13*8], r11	# MEM[base: _776, index: _778, step: 8, offset: 0B], tmp977
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11060              		.loc 1 623 41 is_stmt 1 view .LVU3767
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11061              		.loc 1 623 16 view .LVU3768
 11062              	# sieve_extend.c:623:         for (; copy_word < target_word; copy_word++, source_word++ ) {
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11063              		.loc 1 623 9 is_stmt 0 view .LVU3769
 11064 4163 4839C6   		cmp	rsi, rax	# ivtmp.518, _784
 11065 4166 0F8540FF 		jne	.L571	#,
 11065      FFFF
 11066 416c E9D0ECFF 		jmp	.L572	#
 11066      FF
 11067              	.LVL571:
 11068              		.p2align 4,,7
 11069 4171 0F1F8000 		.p2align 3
 11069      000000
 11070              	.L889:
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11071              		.loc 1 623 9 view .LVU3770
 11072              	.LBE506:
 11073              	.LBB507:
 696:sieve_extend.c ****     }
 11074              		.loc 1 696 13 is_stmt 1 view .LVU3771
 11075              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 11076              		.loc 1 696 46 is_stmt 0 view .LVU3772
 11077 4178 C4C17D6F 		vmovdqa	ymm6, YMMWORD PTR 0[r13]	# tmp1728, MEM[base: vectp.454_513, index: ivtmp.541_792, offset:
 11077      7500
 11078 417e B8200000 		mov	eax, 32	# ivtmp.541,
 11078      00
 11079              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 11080              		.loc 1 696 85 view .LVU3773
 11081 4183 C5FE6F2B 		vmovdqu	ymm5, YMMWORD PTR [rbx]	# tmp1729, MEM[base: vectp.458_520, index: ivtmp.541_792, offset: 
 11082              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 11083              		.loc 1 696 46 view .LVU3774
 11084 4187 C5CDD3D1 		vpsrlq	ymm2, ymm6, xmm1	# vect__99.456, tmp1728, _16
 11085              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 306


 11086              		.loc 1 696 85 view .LVU3775
 11087 418b C5D5F3D8 		vpsllq	ymm3, ymm5, xmm0	# vect__104.460, tmp1729, _12
 11088              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 11089              		.loc 1 696 64 view .LVU3776
 11090 418f C5EDEBE3 		vpor	ymm4, ymm2, ymm3	# vect__106.461, vect__99.456, vect__104.460
 11091              	# sieve_extend.c:696:             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_pt
 696:sieve_extend.c ****     }
 11092              		.loc 1 696 27 view .LVU3777
 11093 4193 C5FE7F22 		vmovdqu	YMMWORD PTR [rdx], ymm4	# MEM[base: vectp.463_529, index: ivtmp.541_792, offset: 0B], vect
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 11094              		.loc 1 695 36 is_stmt 1 view .LVU3778
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 11095              		.loc 1 695 16 view .LVU3779
 11096 4197 E91CF4FF 		jmp	.L791	#
 11096      FF
 11097              	.LVL572:
 11098              	.L886:
 695:sieve_extend.c ****             *(copy_ptr+i) = (*(source_ptr+i) >> shift_flipped) | (*(source_ptr+i+1) << shift);
 11099              		.loc 1 695 16 is_stmt 0 view .LVU3780
 11100              	.LBE507:
 11101              	.LBB508:
 624:sieve_extend.c ****         }
 11102              		.loc 1 624 13 is_stmt 1 view .LVU3781
 11103              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11104              		.loc 1 624 58 is_stmt 0 view .LVU3782
 11105 419c C5FD6F2B 		vmovdqa	ymm5, YMMWORD PTR [rbx]	# tmp1713, MEM[base: vectp.436_408, index: ivtmp.524_786, offset: 
 11106 41a0 B8200000 		mov	eax, 32	# ivtmp.524,
 11106      00
 11107              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11108              		.loc 1 624 103 view .LVU3783
 11109 41a5 C4417E6F 		vmovdqu	ymm10, YMMWORD PTR [r11]	# tmp1714, MEM[base: vectp.440_415, index: ivtmp.524_786, offset:
 11109      13
 11110              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11111              		.loc 1 624 58 view .LVU3784
 11112 41aa C5D5D3D9 		vpsrlq	ymm3, ymm5, xmm1	# vect__35.438, tmp1713, _16
 11113              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11114              		.loc 1 624 103 view .LVU3785
 11115 41ae C52DF3D8 		vpsllq	ymm11, ymm10, xmm0	# vect__40.442, tmp1714, _12
 11116              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11117              		.loc 1 624 76 view .LVU3786
 11118 41b2 C44165EB 		vpor	ymm12, ymm3, ymm11	# vect__43.443, vect__35.438, vect__40.442
 11118      E3
 11119              	# sieve_extend.c:624:             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | 
 624:sieve_extend.c ****         }
 11120              		.loc 1 624 33 view .LVU3787
 11121 41b7 C4417E7F 		vmovdqu	YMMWORD PTR [r12], ymm12	# MEM[base: vectp.445_424, index: ivtmp.524_786, offset: 0B], vec
 11121      2424
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11122              		.loc 1 623 41 is_stmt 1 view .LVU3788
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11123              		.loc 1 623 16 view .LVU3789
GAS LISTING /tmp/ccNeV1of.s 			page 307


 11124 41bd E9F2E9FF 		jmp	.L773	#
 11124      FF
 11125              	.LVL573:
 11126              		.p2align 4,,7
 11127 41c2 660F1F44 		.p2align 3
 11127      0000
 11128              	.L601:
 11129              	# sieve_extend.c:623:         for (; copy_word < target_word; copy_word++, source_word++ ) {
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11130              		.loc 1 623 9 is_stmt 0 view .LVU3790
 11131 41c8 4D89F3   		mov	r11, r14	# tmp.414, source_word
 11132 41cb 4C89FA   		mov	rdx, r15	# copy_word, copy_word
 11133              	.LVL574:
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11134              		.loc 1 623 9 view .LVU3791
 11135 41ce E980ECFF 		jmp	.L565	#
 11135      FF
 11136              	.LVL575:
 11137              	.L888:
 623:sieve_extend.c ****             bitarray[copy_word] = (bitarray[source_word] >> shift_flipped) | (bitarray[source_word+
 11138              		.loc 1 623 9 view .LVU3792
 11139              	.LBE508:
 11140              	# sieve_extend.c:698: }
 698:sieve_extend.c **** 
 11141              		.loc 1 698 1 view .LVU3793
 11142 41d3 E8000000 		call	__stack_chk_fail@PLT	#
 11142      00
 11143              	.LVL576:
 11144              		.cfi_endproc
 11145              	.LFE71:
 11147 41d8 0F1F8400 		.p2align 4
 11147      00000000 
 11149              	sieve_shake:
 11150              	.LVL577:
 11151              	.LFB79:
 928:sieve_extend.c ****     struct sieve_t *sieve = sieve_create(maxints);
 11152              		.loc 1 928 88 is_stmt 1 view -0
 11153              		.cfi_startproc
 929:sieve_extend.c ****     bitword_t* bitarray = sieve->bitarray;
 11154              		.loc 1 929 5 view .LVU3795
 11155              	# sieve_extend.c:928: static struct sieve_t* sieve_shake(const counter_t maxints, const counter_t b
 928:sieve_extend.c ****     struct sieve_t *sieve = sieve_create(maxints);
 11156              		.loc 1 928 88 is_stmt 0 view .LVU3796
 11157 41e0 4157     		push	r15	#
 11158              		.cfi_def_cfa_offset 16
 11159              		.cfi_offset 15, -16
 11160 41e2 4156     		push	r14	#
 11161              		.cfi_def_cfa_offset 24
 11162              		.cfi_offset 14, -24
 11163 41e4 4155     		push	r13	#
 11164              		.cfi_def_cfa_offset 32
 11165              		.cfi_offset 13, -32
 11166 41e6 4154     		push	r12	#
 11167              		.cfi_def_cfa_offset 40
 11168              		.cfi_offset 12, -40
 11169 41e8 55       		push	rbp	#
 11170              		.cfi_def_cfa_offset 48
GAS LISTING /tmp/ccNeV1of.s 			page 308


 11171              		.cfi_offset 6, -48
 11172 41e9 53       		push	rbx	#
 11173              		.cfi_def_cfa_offset 56
 11174              		.cfi_offset 3, -56
 11175 41ea 4889FB   		mov	rbx, rdi	# maxints, tmp493
 11176              	.LVL578:
 11177              	.LBB540:
 11178              	.LBI540:
 105:sieve_extend.c ****     struct sieve_t *sieve = aligned_alloc(8, sizeof(struct sieve_t));
 11179              		.loc 1 105 24 is_stmt 1 view .LVU3797
 11180              	.LBB541:
 106:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 11181              		.loc 1 106 5 view .LVU3798
 11182              	# sieve_extend.c:106:     struct sieve_t *sieve = aligned_alloc(8, sizeof(struct sieve_t));
 106:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 11183              		.loc 1 106 29 is_stmt 0 view .LVU3799
 11184 41ed BF080000 		mov	edi, 8	#,
 11184      00
 11185              	.LVL579:
 106:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 11186              		.loc 1 106 29 view .LVU3800
 11187              	.LBE541:
 11188              	.LBE540:
 11189              	# sieve_extend.c:928: static struct sieve_t* sieve_shake(const counter_t maxints, const counter_t b
 928:sieve_extend.c ****     struct sieve_t *sieve = sieve_create(maxints);
 11190              		.loc 1 928 88 view .LVU3801
 11191 41f2 488D6424 		lea	rsp, -88[rsp]	#,
 11191      A8
 11192              		.cfi_def_cfa_offset 144
 11193              	.LBB545:
 11194              	.LBB542:
 11195              	# sieve_extend.c:107:     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesiz
 107:sieve_extend.c **** 
 11196              		.loc 1 107 22 view .LVU3802
 11197 41f7 4989DE   		mov	r14, rbx	# prephitmp_564, maxints
 11198 41fa 49D1EE   		shr	r14	# prephitmp_564
 11199              	.LBE542:
 11200              	.LBE545:
 11201              	# sieve_extend.c:928: static struct sieve_t* sieve_shake(const counter_t maxints, const counter_t b
 928:sieve_extend.c ****     struct sieve_t *sieve = sieve_create(maxints);
 11202              		.loc 1 928 88 view .LVU3803
 11203 41fd 48897424 		mov	QWORD PTR 56[rsp], rsi	# %sfp, tmp494
 11203      38
 11204              	.LBB546:
 11205              	.LBB543:
 11206              	# sieve_extend.c:106:     struct sieve_t *sieve = aligned_alloc(8, sizeof(struct sieve_t));
 106:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 11207              		.loc 1 106 29 view .LVU3804
 11208 4202 BE180000 		mov	esi, 24	#,
 11208      00
 11209              	.LVL580:
 106:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 11210              		.loc 1 106 29 view .LVU3805
 11211 4207 E8000000 		call	aligned_alloc@PLT	#
 11211      00
 11212              	.LVL581:
 11213              	# sieve_extend.c:107:     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesiz
GAS LISTING /tmp/ccNeV1of.s 			page 309


 107:sieve_extend.c **** 
 11214              		.loc 1 107 22 view .LVU3806
 11215 420c 498DB600 		lea	rsi, 1024[r14]	# tmp275,
 11215      040000
 11216              	# sieve_extend.c:109:     sieve->bitarray = aligned_alloc((size_t)anticiped_cache_line_bytesize, (s
 109:sieve_extend.c ****     sieve->bits     = size >> 1;
 11217              		.loc 1 109 23 view .LVU3807
 11218 4213 BF800000 		mov	edi, 128	#,
 11218      00
 11219              	# sieve_extend.c:106:     struct sieve_t *sieve = aligned_alloc(8, sizeof(struct sieve_t));
 106:sieve_extend.c ****     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesize*8) * anticiped_cache
 11220              		.loc 1 106 29 view .LVU3808
 11221 4218 48894424 		mov	QWORD PTR 40[rsp], rax	# %sfp, <retval>
 11221      28
 11222 421d 4889C5   		mov	rbp, rax	# <retval>, tmp495
 11223              	.LVL582:
 107:sieve_extend.c **** 
 11224              		.loc 1 107 5 is_stmt 1 view .LVU3809
 11225              	# sieve_extend.c:107:     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesiz
 107:sieve_extend.c **** 
 11226              		.loc 1 107 22 is_stmt 0 view .LVU3810
 11227 4220 48C1EE0A 		shr	rsi, 10	# tmp276,
 11228              	# sieve_extend.c:107:     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesiz
 107:sieve_extend.c **** 
 11229              		.loc 1 107 12 view .LVU3811
 11230 4224 48C1E607 		sal	rsi, 7	# memSize,
 11231              	# sieve_extend.c:107:     size_t memSize = ceiling(1+((size_t)size/2), anticiped_cache_line_bytesiz
 107:sieve_extend.c **** 
 11232              		.loc 1 107 22 view .LVU3812
 11233 4228 4C897424 		mov	QWORD PTR 8[rsp], r14	# %sfp, prephitmp_564
 11233      08
 11234              	.LVL583:
 109:sieve_extend.c ****     sieve->bits     = size >> 1;
 11235              		.loc 1 109 5 is_stmt 1 view .LVU3813
 11236              	# sieve_extend.c:109:     sieve->bitarray = aligned_alloc((size_t)anticiped_cache_line_bytesize, (s
 109:sieve_extend.c ****     sieve->bits     = size >> 1;
 11237              		.loc 1 109 23 is_stmt 0 view .LVU3814
 11238 422d E8000000 		call	aligned_alloc@PLT	#
 11238      00
 11239              	.LVL584:
 109:sieve_extend.c ****     sieve->bits     = size >> 1;
 11240              		.loc 1 109 23 view .LVU3815
 11241              	.LBE543:
 11242              	.LBE546:
 11243              	.LBB547:
 11244              	.LBB548:
 11245              	# sieve_extend.c:899:     for (;range_stop < block_stop;) {
 899:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 11246              		.loc 1 899 5 view .LVU3816
 11247 4232 4D85F6   		test	r14, r14	# prephitmp_564
 11248              	.LBE548:
 11249              	.LBE547:
 11250              	.LBB586:
 11251              	.LBB544:
 11252              	# sieve_extend.c:109:     sieve->bitarray = aligned_alloc((size_t)anticiped_cache_line_bytesize, (s
 109:sieve_extend.c ****     sieve->bits     = size >> 1;
 11253              		.loc 1 109 23 view .LVU3817
GAS LISTING /tmp/ccNeV1of.s 			page 310


 11254 4235 4989C7   		mov	r15, rax	# _94, tmp496
 11255              	# sieve_extend.c:109:     sieve->bitarray = aligned_alloc((size_t)anticiped_cache_line_bytesize, (s
 109:sieve_extend.c ****     sieve->bits     = size >> 1;
 11256              		.loc 1 109 21 view .LVU3818
 11257 4238 48894500 		mov	QWORD PTR 0[rbp], rax	# sieve_89->bitarray, _94
 110:sieve_extend.c ****     sieve->size     = size;
 11258              		.loc 1 110 5 is_stmt 1 view .LVU3819
 11259              	# sieve_extend.c:110:     sieve->bits     = size >> 1;
 110:sieve_extend.c ****     sieve->size     = size;
 11260              		.loc 1 110 21 is_stmt 0 view .LVU3820
 11261 423c 4C897508 		mov	QWORD PTR 8[rbp], r14	# sieve_89->bits, prephitmp_564
 111:sieve_extend.c **** 
 11262              		.loc 1 111 5 is_stmt 1 view .LVU3821
 11263              	# sieve_extend.c:111:     sieve->size     = size;
 111:sieve_extend.c **** 
 11264              		.loc 1 111 21 is_stmt 0 view .LVU3822
 11265 4240 48895D10 		mov	QWORD PTR 16[rbp], rbx	# sieve_89->size, maxints
 115:sieve_extend.c **** }
 11266              		.loc 1 115 5 is_stmt 1 view .LVU3823
 11267              	.LVL585:
 115:sieve_extend.c **** }
 11268              		.loc 1 115 5 is_stmt 0 view .LVU3824
 11269              	.LBE544:
 11270              	.LBE586:
 930:sieve_extend.c **** 
 11271              		.loc 1 930 5 is_stmt 1 view .LVU3825
 932:sieve_extend.c **** 
 11272              		.loc 1 932 5 view .LVU3826
 935:sieve_extend.c ****     extendSieve(bitarray, block.pattern_start, block.pattern_size, sieve->bits);
 11273              		.loc 1 935 5 view .LVU3827
 11274              	.LBB587:
 11275              	.LBI547:
 889:sieve_extend.c ****     register counter_t prime   = 0;
 11276              		.loc 1 889 21 view .LVU3828
 11277              	.LBB579:
 890:sieve_extend.c ****     counter_t patternsize_bits = 1;
 11278              		.loc 1 890 5 view .LVU3829
 891:sieve_extend.c ****     counter_t pattern_start    = 0;
 11279              		.loc 1 891 5 view .LVU3830
 892:sieve_extend.c ****     counter_t range_stop       = block_start;
 11280              		.loc 1 892 5 view .LVU3831
 893:sieve_extend.c ****     bitword_t* bitarray        = sieve->bitarray;
 11281              		.loc 1 893 5 view .LVU3832
 894:sieve_extend.c ****     struct block block = { .prime = 0, .pattern_start = 0, .pattern_size = 0 };
 11282              		.loc 1 894 5 view .LVU3833
 895:sieve_extend.c **** 
 11283              		.loc 1 895 5 view .LVU3834
 897:sieve_extend.c ****     
 11284              		.loc 1 897 5 view .LVU3835
 11285              	# sieve_extend.c:897:     sieve->bitarray[0] = SAFE_ZERO; // only the first word has to be cleared;
 897:sieve_extend.c ****     
 11286              		.loc 1 897 24 is_stmt 0 view .LVU3836
 11287 4244 48C70000 		mov	QWORD PTR [rax], 0	# MEM[(uint64_t *)_94],
 11287      000000
 899:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 11288              		.loc 1 899 5 is_stmt 1 view .LVU3837
 899:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
GAS LISTING /tmp/ccNeV1of.s 			page 311


 11289              		.loc 1 899 11 view .LVU3838
 11290              	# sieve_extend.c:899:     for (;range_stop < block_stop;) {
 899:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 11291              		.loc 1 899 5 is_stmt 0 view .LVU3839
 11292 424b 0F84730A 		je	.L1100	#,
 11292      0000
 11293              	.LBB549:
 11294              	# sieve_extend.c:900:         prime = searchBitFalse(bitarray, prime+1);
 900:sieve_extend.c ****         counter_t start = prime * prime * 2 + prime * 2;
 11295              		.loc 1 900 17 view .LVU3840
 11296 4251 48C74424 		mov	QWORD PTR 16[rsp], 1	# %sfp,
 11296      10010000 
 11296      00
 11297              	.LBE549:
 11298              	# sieve_extend.c:895:     struct block block = { .prime = 0, .pattern_start = 0, .pattern_size = 0 
 895:sieve_extend.c **** 
 11299              		.loc 1 895 18 view .LVU3841
 11300 425a 31D2     		xor	edx, edx	# block$pattern_size
 11301              	# sieve_extend.c:892:     counter_t pattern_start    = 0;
 892:sieve_extend.c ****     counter_t range_stop       = block_start;
 11302              		.loc 1 892 15 view .LVU3842
 11303 425c 48C74424 		mov	QWORD PTR 24[rsp], 0	# %sfp,
 11303      18000000 
 11303      00
 11304              	# sieve_extend.c:891:     counter_t patternsize_bits = 1;
 891:sieve_extend.c ****     counter_t pattern_start    = 0;
 11305              		.loc 1 891 15 view .LVU3843
 11306 4265 41BD0100 		mov	r13d, 1	# patternsize_bits,
 11306      0000
 11307              	# sieve_extend.c:895:     struct block block = { .prime = 0, .pattern_start = 0, .pattern_size = 0 
 895:sieve_extend.c **** 
 11308              		.loc 1 895 18 view .LVU3844
 11309 426b 31F6     		xor	esi, esi	# block$pattern_start
 11310              	# sieve_extend.c:890:     register counter_t prime   = 0;
 890:sieve_extend.c ****     counter_t patternsize_bits = 1;
 11311              		.loc 1 890 24 view .LVU3845
 11312 426d 31C9     		xor	ecx, ecx	# prime
 11313 426f 488B4424 		mov	rax, QWORD PTR 16[rsp]	# index, %sfp
 11313      10
 11314              	.LVL586:
 11315 4274 66662E0F 		.p2align 4
 11315      1F840000 
 11315      00000090 
 11316              		.p2align 3
 11317              	.L891:
 11318              	.LBB572:
 11319              	.LBB550:
 11320              	.LBB551:
 126:sieve_extend.c **** }
 11321              		.loc 1 126 5 is_stmt 1 view .LVU3846
 126:sieve_extend.c **** }
 11322              		.loc 1 126 5 is_stmt 0 view .LVU3847
 11323              	.LBE551:
 11324              	.LBE550:
 901:sieve_extend.c ****         if unlikely(start > block_stop) break;
 11325              		.loc 1 901 9 is_stmt 1 view .LVU3848
 11326              	# sieve_extend.c:901:         counter_t start = prime * prime * 2 + prime * 2;
GAS LISTING /tmp/ccNeV1of.s 			page 312


 901:sieve_extend.c ****         if unlikely(start > block_stop) break;
 11327              		.loc 1 901 45 is_stmt 0 view .LVU3849
 11328 4280 488D5801 		lea	rbx, 1[rax]	# index,
 11329 4284 4C8D2400 		lea	r12, [rax+rax]	# _304,
 11330              	# sieve_extend.c:901:         counter_t start = prime * prime * 2 + prime * 2;
 901:sieve_extend.c ****         if unlikely(start > block_stop) break;
 11331              		.loc 1 901 19 view .LVU3850
 11332 4288 4889DD   		mov	rbp, rbx	# index, index
 11333 428b 490FAFEC 		imul	rbp, r12	# index, _304
 11334              	.LVL587:
 902:sieve_extend.c **** 
 11335              		.loc 1 902 9 is_stmt 1 view .LVU3851
 11336              	# sieve_extend.c:902:         if unlikely(start > block_stop) break;
 902:sieve_extend.c **** 
 11337              		.loc 1 902 12 is_stmt 0 view .LVU3852
 11338 428f 483B6C24 		cmp	rbp, QWORD PTR 8[rsp]	# index, %sfp
 11338      08
 11339 4294 0F871B04 		ja	.L1101	#,
 11339      0000
 904:sieve_extend.c ****         if (block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start + prime
 11340              		.loc 1 904 9 is_stmt 1 view .LVU3853
 11341              	# sieve_extend.c:904:         const counter_t step  = prime * 2 + 1;
 904:sieve_extend.c ****         if (block_start >= (prime + 1)) start = block_start + prime + prime - ((block_start + prime
 11342              		.loc 1 904 25 is_stmt 0 view .LVU3854
 11343 429a 4983C401 		add	r12, 1	# step,
 11344              	.LVL588:
 905:sieve_extend.c **** 
 11345              		.loc 1 905 9 is_stmt 1 view .LVU3855
 11346              	# sieve_extend.c:905:         if (block_start >= (prime + 1)) start = block_start + prime + prime -
 905:sieve_extend.c **** 
 11347              		.loc 1 905 12 is_stmt 0 view .LVU3856
 11348 429e 4885DB   		test	rbx, rbx	# index
 11349 42a1 7516     		jne	.L897	#,
 905:sieve_extend.c **** 
 11350              		.loc 1 905 41 is_stmt 1 view .LVU3857
 11351              	# sieve_extend.c:905:         if (block_start >= (prime + 1)) start = block_start + prime + prime -
 905:sieve_extend.c **** 
 11352              		.loc 1 905 102 is_stmt 0 view .LVU3858
 11353 42a3 48C7C0FF 		mov	rax, -1	# tmp296,
 11353      FFFFFF
 11354 42aa 31D2     		xor	edx, edx	# tmp295
 11355 42ac 49F7F4   		div	r12	# step
 11356              	# sieve_extend.c:905:         if (block_start >= (prime + 1)) start = block_start + prime + prime -
 905:sieve_extend.c **** 
 11357              		.loc 1 905 47 view .LVU3859
 11358 42af 48C7C5FE 		mov	rbp, -2	# tmp297,
 11358      FFFFFF
 11359              	.LVL589:
 905:sieve_extend.c **** 
 11360              		.loc 1 905 47 view .LVU3860
 11361 42b6 4829D5   		sub	rbp, rdx	# index, tmp295
 11362              	.LVL590:
 11363              	.L897:
 907:sieve_extend.c ****         block.pattern_size = patternsize_bits;
 11364              		.loc 1 907 9 is_stmt 1 view .LVU3861
 11365              	# sieve_extend.c:907:         range_stop = block_start + patternsize_bits * step * 2;  // range is 
 907:sieve_extend.c ****         block.pattern_size = patternsize_bits;
GAS LISTING /tmp/ccNeV1of.s 			page 313


 11366              		.loc 1 907 53 is_stmt 0 view .LVU3862
 11367 42b9 4C89E6   		mov	rsi, r12	# _66, step
 11368 42bc 490FAFF5 		imul	rsi, r13	# _66, patternsize_bits
 11369 42c0 48897424 		mov	QWORD PTR 48[rsp], rsi	# %sfp, _66
 11369      30
 11370              	# sieve_extend.c:907:         range_stop = block_start + patternsize_bits * step * 2;  // range is 
 907:sieve_extend.c ****         block.pattern_size = patternsize_bits;
 11371              		.loc 1 907 60 view .LVU3863
 11372 42c5 4C8D3436 		lea	r14, [rsi+rsi]	# _67,
 11373              	.LVL591:
 908:sieve_extend.c ****         block.pattern_start = pattern_start;
 11374              		.loc 1 908 9 is_stmt 1 view .LVU3864
 909:sieve_extend.c ****         if (range_stop > block_stop) return block; //range_stop = block_stop;
 11375              		.loc 1 909 9 view .LVU3865
 910:sieve_extend.c **** 
 11376              		.loc 1 910 9 view .LVU3866
 11377              	# sieve_extend.c:910:         if (range_stop > block_stop) return block; //range_stop = block_stop;
 910:sieve_extend.c **** 
 11378              		.loc 1 910 12 is_stmt 0 view .LVU3867
 11379 42c9 4C3B7424 		cmp	r14, QWORD PTR 8[rsp]	# _67, %sfp
 11379      08
 11380 42ce 0F87B109 		ja	.L1102	#,
 11380      0000
 912:sieve_extend.c ****             pattern_start = block_start | patternsize_bits;
 11381              		.loc 1 912 9 is_stmt 1 view .LVU3868
 11382 42d4 488B7C24 		mov	rdi, QWORD PTR 24[rsp]	# pattern_start, %sfp
 11382      18
 11383              	# sieve_extend.c:912:         if (patternsize_bits>1) {
 912:sieve_extend.c ****             pattern_start = block_start | patternsize_bits;
 11384              		.loc 1 912 12 is_stmt 0 view .LVU3869
 11385 42d9 4983FD01 		cmp	r13, 1	# patternsize_bits,
 11386 42dd 48897C24 		mov	QWORD PTR 32[rsp], rdi	# %sfp, pattern_start
 11386      20
 11387 42e2 0F878803 		ja	.L1103	#,
 11387      0000
 11388              	.L900:
 11389              	.LVL592:
 916:sieve_extend.c **** 
 11390              		.loc 1 916 9 is_stmt 1 view .LVU3870
 920:sieve_extend.c ****         else                              setBitsTrue_largeRange(bitarray, start, step, range_stop)
 11391              		.loc 1 920 9 view .LVU3871
 11392              	# sieve_extend.c:920:         if (step < VECTORSTEP_FASTER)     setBitsTrue_largeRange_vector(bitar
 920:sieve_extend.c ****         else                              setBitsTrue_largeRange(bitarray, start, step, range_stop)
 11393              		.loc 1 920 12 is_stmt 0 view .LVU3872
 11394 42e8 4C3B2500 		cmp	r12, QWORD PTR global_VECTORSTEP_FASTER[rip]	# step, global_VECTORSTEP_FASTER
 11394      000000
 11395 42ef 0F830B01 		jnb	.L904	#,
 11395      0000
 920:sieve_extend.c ****         else                              setBitsTrue_largeRange(bitarray, start, step, range_stop)
 11396              		.loc 1 920 43 is_stmt 1 view .LVU3873
 11397 42f5 4C89F1   		mov	rcx, r14	#, _67
 11398 42f8 4C89E2   		mov	rdx, r12	#, step
 11399 42fb 4889EE   		mov	rsi, rbp	#, index
 11400 42fe 4C89FF   		mov	rdi, r15	#, _94
 11401 4301 E8DAC3FF 		call	setBitsTrue_largeRange_vector	#
 11401      FF
 11402              	.LVL593:
GAS LISTING /tmp/ccNeV1of.s 			page 314


 11403              	.L905:
 920:sieve_extend.c ****         else                              setBitsTrue_largeRange(bitarray, start, step, range_stop)
 11404              		.loc 1 920 43 is_stmt 0 view .LVU3874
 11405              	.LBE572:
 899:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 11406              		.loc 1 899 11 is_stmt 1 view .LVU3875
 11407              	# sieve_extend.c:899:     for (;range_stop < block_stop;) {
 899:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 11408              		.loc 1 899 5 is_stmt 0 view .LVU3876
 11409 4306 4C3B7424 		cmp	r14, QWORD PTR 8[rsp]	# _67, %sfp
 11409      08
 11410 430b 0F83EB02 		jnb	.L1104	#,
 11410      0000
 11411              	.LVL594:
 11412              	.L914:
 11413              	.LBB573:
 900:sieve_extend.c ****         counter_t start = prime * prime * 2 + prime * 2;
 11414              		.loc 1 900 9 is_stmt 1 view .LVU3877
 11415              	.LBB553:
 11416              	.LBI550:
 124:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 11417              		.loc 1 124 25 view .LVU3878
 11418              	.LBB552:
 125:sieve_extend.c ****     return index;
 11419              		.loc 1 125 5 view .LVU3879
 125:sieve_extend.c ****     return index;
 11420              		.loc 1 125 11 view .LVU3880
 11421              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11422              		.loc 1 125 21 is_stmt 0 view .LVU3881
 11423 4311 4989D9   		mov	r9, rbx	# tmp279, index
 11424 4314 49C1E906 		shr	r9, 6	# tmp279,
 11425              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11426              		.loc 1 125 12 view .LVU3882
 11427 4318 4F8B1CCF 		mov	r11, QWORD PTR [r15+r9*8]	# *_344,* _94
 11428              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11429              		.loc 1 125 11 view .LVU3883
 11430 431c 490FA3DB 		bt	r11, rbx	# *_344, index
 11431 4320 0F83AA00 		jnc	.L893	#,
 11431      0000
 125:sieve_extend.c ****     return index;
 11432              		.loc 1 125 58 is_stmt 1 view .LVU3884
 11433              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11434              		.loc 1 125 63 is_stmt 0 view .LVU3885
 11435 4326 488D4B01 		lea	rcx, 1[rbx]	# tmp394,
 11436              	.LVL595:
 11437              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11438              		.loc 1 125 21 view .LVU3886
 11439 432a 4889C8   		mov	rax, rcx	# tmp284, index
 11440              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11441              		.loc 1 125 63 view .LVU3887
 11442 432d 4889CB   		mov	rbx, rcx	# index, tmp394
GAS LISTING /tmp/ccNeV1of.s 			page 315


 125:sieve_extend.c ****     return index;
 11443              		.loc 1 125 11 is_stmt 1 view .LVU3888
 11444              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11445              		.loc 1 125 21 is_stmt 0 view .LVU3889
 11446 4330 48C1E806 		shr	rax, 6	# tmp284,
 11447              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11448              		.loc 1 125 12 view .LVU3890
 11449 4334 498B34C7 		mov	rsi, QWORD PTR [r15+rax*8]	# *_47, *_47
 11450              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11451              		.loc 1 125 11 view .LVU3891
 11452 4338 480FA3CE 		bt	rsi, rcx	# *_47, index
 11453 433c 0F838E00 		jnc	.L893	#,
 11453      0000
 125:sieve_extend.c ****     return index;
 11454              		.loc 1 125 58 is_stmt 1 view .LVU3892
 11455              	.LVL596:
 11456              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11457              		.loc 1 125 63 is_stmt 0 view .LVU3893
 11458 4342 4883C301 		add	rbx, 1	# index,
 11459              	.LVL597:
 125:sieve_extend.c ****     return index;
 11460              		.loc 1 125 11 is_stmt 1 view .LVU3894
 11461              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11462              		.loc 1 125 21 is_stmt 0 view .LVU3895
 11463 4346 4989DC   		mov	r12, rbx	# tmp459, index
 11464 4349 49C1EC06 		shr	r12, 6	# tmp459,
 11465              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11466              		.loc 1 125 12 view .LVU3896
 11467 434d 4B8B2CE7 		mov	rbp, QWORD PTR [r15+r12*8]	# *_47, *_47
 11468              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11469              		.loc 1 125 11 view .LVU3897
 11470 4351 480FA3DD 		bt	rbp, rbx	# *_47, index
 11471 4355 7379     		jnc	.L893	#,
 125:sieve_extend.c ****     return index;
 11472              		.loc 1 125 58 is_stmt 1 view .LVU3898
 11473              	.LVL598:
 11474              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11475              		.loc 1 125 63 is_stmt 0 view .LVU3899
 11476 4357 488D5902 		lea	rbx, 2[rcx]	# index,
 11477              	.LVL599:
 125:sieve_extend.c ****     return index;
 11478              		.loc 1 125 11 is_stmt 1 view .LVU3900
 11479              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11480              		.loc 1 125 21 is_stmt 0 view .LVU3901
 11481 435b 4989DE   		mov	r14, rbx	# tmp463, index
 11482 435e 49C1EE06 		shr	r14, 6	# tmp463,
 11483              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
GAS LISTING /tmp/ccNeV1of.s 			page 316


 11484              		.loc 1 125 12 view .LVU3902
 11485 4362 4F8B14F7 		mov	r10, QWORD PTR [r15+r14*8]	# *_47, *_47
 11486              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11487              		.loc 1 125 11 view .LVU3903
 11488 4366 490FA3DA 		bt	r10, rbx	# *_47, index
 11489 436a 7364     		jnc	.L893	#,
 125:sieve_extend.c ****     return index;
 11490              		.loc 1 125 58 is_stmt 1 view .LVU3904
 11491              	.LVL600:
 11492              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11493              		.loc 1 125 63 is_stmt 0 view .LVU3905
 11494 436c 488D5903 		lea	rbx, 3[rcx]	# index,
 11495              	.LVL601:
 125:sieve_extend.c ****     return index;
 11496              		.loc 1 125 11 is_stmt 1 view .LVU3906
 11497              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11498              		.loc 1 125 21 is_stmt 0 view .LVU3907
 11499 4370 4889DA   		mov	rdx, rbx	# tmp467, index
 11500 4373 48C1EA06 		shr	rdx, 6	# tmp467,
 11501              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11502              		.loc 1 125 12 view .LVU3908
 11503 4377 498B3CD7 		mov	rdi, QWORD PTR [r15+rdx*8]	# *_47, *_47
 11504              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11505              		.loc 1 125 11 view .LVU3909
 11506 437b 480FA3DF 		bt	rdi, rbx	# *_47, index
 11507 437f 734F     		jnc	.L893	#,
 125:sieve_extend.c ****     return index;
 11508              		.loc 1 125 58 is_stmt 1 view .LVU3910
 11509              	.LVL602:
 11510              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11511              		.loc 1 125 63 is_stmt 0 view .LVU3911
 11512 4381 488D5904 		lea	rbx, 4[rcx]	# index,
 11513              	.LVL603:
 125:sieve_extend.c ****     return index;
 11514              		.loc 1 125 11 is_stmt 1 view .LVU3912
 11515              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11516              		.loc 1 125 21 is_stmt 0 view .LVU3913
 11517 4385 4989D8   		mov	r8, rbx	# tmp471, index
 11518 4388 49C1E806 		shr	r8, 6	# tmp471,
 11519              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11520              		.loc 1 125 12 view .LVU3914
 11521 438c 4F8B0CC7 		mov	r9, QWORD PTR [r15+r8*8]	# *_47, *_47
 11522              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11523              		.loc 1 125 11 view .LVU3915
 11524 4390 490FA3D9 		bt	r9, rbx	# *_47, index
 11525 4394 733A     		jnc	.L893	#,
 125:sieve_extend.c ****     return index;
 11526              		.loc 1 125 58 is_stmt 1 view .LVU3916
GAS LISTING /tmp/ccNeV1of.s 			page 317


 11527              	.LVL604:
 11528              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11529              		.loc 1 125 63 is_stmt 0 view .LVU3917
 11530 4396 488D5905 		lea	rbx, 5[rcx]	# index,
 11531              	.LVL605:
 125:sieve_extend.c ****     return index;
 11532              		.loc 1 125 11 is_stmt 1 view .LVU3918
 11533              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11534              		.loc 1 125 21 is_stmt 0 view .LVU3919
 11535 439a 4989DB   		mov	r11, rbx	# tmp475, index
 11536 439d 49C1EB06 		shr	r11, 6	# tmp475,
 11537              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11538              		.loc 1 125 12 view .LVU3920
 11539 43a1 4B8B04DF 		mov	rax, QWORD PTR [r15+r11*8]	# *_47, *_47
 11540              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11541              		.loc 1 125 11 view .LVU3921
 11542 43a5 480FA3D8 		bt	rax, rbx	# *_47, index
 11543 43a9 7325     		jnc	.L893	#,
 125:sieve_extend.c ****     return index;
 11544              		.loc 1 125 58 is_stmt 1 view .LVU3922
 11545              	.LVL606:
 11546              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11547              		.loc 1 125 63 is_stmt 0 view .LVU3923
 11548 43ab 488D5906 		lea	rbx, 6[rcx]	# index,
 11549              	.LVL607:
 125:sieve_extend.c ****     return index;
 11550              		.loc 1 125 11 is_stmt 1 view .LVU3924
 11551              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11552              		.loc 1 125 21 is_stmt 0 view .LVU3925
 11553 43af 4889DE   		mov	rsi, rbx	# tmp479, index
 11554 43b2 48C1EE06 		shr	rsi, 6	# tmp479,
 11555              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11556              		.loc 1 125 12 view .LVU3926
 11557 43b6 4D8B24F7 		mov	r12, QWORD PTR [r15+rsi*8]	# *_47, *_47
 11558              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11559              		.loc 1 125 11 view .LVU3927
 11560 43ba 490FA3DC 		bt	r12, rbx	# *_47, index
 11561 43be 7310     		jnc	.L893	#,
 125:sieve_extend.c ****     return index;
 11562              		.loc 1 125 58 is_stmt 1 view .LVU3928
 11563              	.LVL608:
 11564              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 11565              		.loc 1 125 63 is_stmt 0 view .LVU3929
 11566 43c0 488D5907 		lea	rbx, 7[rcx]	# index,
 11567              	.LVL609:
 125:sieve_extend.c ****     return index;
 11568              		.loc 1 125 11 is_stmt 1 view .LVU3930
 11569 43c4 E948FFFF 		jmp	.L914	#
GAS LISTING /tmp/ccNeV1of.s 			page 318


 11569      FF
 11570              	.LVL610:
 11571 43c9 0F1F8000 		.p2align 4,,7
 11571      000000
 11572              		.p2align 3
 11573              	.L893:
 125:sieve_extend.c ****     return index;
 11574              		.loc 1 125 11 is_stmt 0 view .LVU3931
 11575              	.LBE552:
 11576              	.LBE553:
 11577              	.LBE573:
 11578              	.LBE579:
 11579              	.LBE587:
 11580              	# sieve_extend.c:928: static struct sieve_t* sieve_shake(const counter_t maxints, const counter_t b
 928:sieve_extend.c ****     struct sieve_t *sieve = sieve_create(maxints);
 11581              		.loc 1 928 88 view .LVU3932
 11582 43d0 488B4C24 		mov	rcx, QWORD PTR 32[rsp]	# pattern_start, %sfp
 11582      20
 11583 43d5 4C89EA   		mov	rdx, r13	# block$pattern_size, patternsize_bits
 11584              	.LVL611:
 928:sieve_extend.c ****     struct sieve_t *sieve = sieve_create(maxints);
 11585              		.loc 1 928 88 view .LVU3933
 11586 43d8 488B7424 		mov	rsi, QWORD PTR 24[rsp]	# block$pattern_start, %sfp
 11586      18
 11587              	.LVL612:
 928:sieve_extend.c ****     struct sieve_t *sieve = sieve_create(maxints);
 11588              		.loc 1 928 88 view .LVU3934
 11589 43dd 4889D8   		mov	rax, rbx	# index, index
 11590 43e0 4C8B6C24 		mov	r13, QWORD PTR 48[rsp]	# patternsize_bits, %sfp
 11590      30
 11591 43e5 48894C24 		mov	QWORD PTR 24[rsp], rcx	# %sfp, pattern_start
 11591      18
 11592 43ea 488B4C24 		mov	rcx, QWORD PTR 16[rsp]	# prime, %sfp
 11592      10
 11593              	.LVL613:
 928:sieve_extend.c ****     struct sieve_t *sieve = sieve_create(maxints);
 11594              		.loc 1 928 88 view .LVU3935
 11595 43ef 48895C24 		mov	QWORD PTR 16[rsp], rbx	# %sfp, index
 11595      10
 11596 43f4 E987FEFF 		jmp	.L891	#
 11596      FF
 11597              	.LVL614:
 11598 43f9 0F1F8000 		.p2align 4,,7
 11598      000000
 11599              		.p2align 3
 11600              	.L904:
 11601              	.LBB588:
 11602              	.LBB580:
 11603              	.LBB574:
 921:sieve_extend.c ****         block.prime = prime;
 11604              		.loc 1 921 43 is_stmt 1 view .LVU3936
 11605              	.LBB554:
 11606              	.LBI554:
 394:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange (%ju occurances
 11607              		.loc 1 394 20 view .LVU3937
 11608              	.LBB555:
 395:sieve_extend.c ****     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * step;
GAS LISTING /tmp/ccNeV1of.s 			page 319


 11609              		.loc 1 395 5 view .LVU3938
 396:sieve_extend.c **** 
 11610              		.loc 1 396 5 view .LVU3939
 11611              	# sieve_extend.c:396:     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * st
 396:sieve_extend.c **** 
 11612              		.loc 1 396 74 is_stmt 0 view .LVU3940
 11613 4400 4D89E2   		mov	r10, r12	# tmp303, step
 11614 4403 49C1E206 		sal	r10, 6	# tmp303,
 11615              	# sieve_extend.c:396:     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * st
 396:sieve_extend.c **** 
 11616              		.loc 1 396 21 view .LVU3941
 11617 4407 4901EA   		add	r10, rbp	# range_stop_unique, index
 11618              	.LVL615:
 11619              	.LBB556:
 400:sieve_extend.c ****         #if __APPLE__
 11620              		.loc 1 400 10 is_stmt 1 view .LVU3942
 400:sieve_extend.c ****         #if __APPLE__
 11621              		.loc 1 400 50 view .LVU3943
 11622              	# sieve_extend.c:400:     for (register counter_t index = range_start; index < range_stop_unique; i
 400:sieve_extend.c ****         #if __APPLE__
 11623              		.loc 1 400 5 is_stmt 0 view .LVU3944
 11624 440a 4C39D5   		cmp	rbp, r10	# index, range_stop_unique
 11625 440d 0F83F3FE 		jnb	.L905	#,
 11625      FFFF
 11626              	.LBB557:
 11627              	.LBB558:
 11628              	# sieve_extend.c:177:    const counter_t range_stop_word = wordindex(range_stop);
 177:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 11629              		.loc 1 177 20 view .LVU3945
 11630 4413 4D89F3   		mov	r11, r14	# range_stop_word, _67
 11631              	# sieve_extend.c:179:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 179:sieve_extend.c **** 
 11632              		.loc 1 179 110 view .LVU3946
 11633 4416 4B8D3CA4 		lea	rdi, [r12+r12*4]	# tmp306,
 11634              	# sieve_extend.c:177:    const counter_t range_stop_word = wordindex(range_stop);
 177:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 11635              		.loc 1 177 20 view .LVU3947
 11636 441a 49C1EB06 		shr	r11, 6	# range_stop_word,
 11637              	# sieve_extend.c:203:       *index_ptr |= (mask & chopmask(range_stop));
 203:sieve_extend.c ****    }
 11638              		.loc 1 203 29 view .LVU3948
 11639 441e 4489F1   		mov	ecx, r14d	# tmp308, _67
 11640              	# sieve_extend.c:179:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 179:sieve_extend.c **** 
 11641              		.loc 1 179 133 view .LVU3949
 11642 4421 4D89D9   		mov	r9, r11	# tmp312, range_stop_word
 11643              	# sieve_extend.c:196:    register const bitword_t* __restrict range_stop_ptr = &bitarray[(range_sto
 196:sieve_extend.c ****    while likely(index_ptr < range_stop_ptr) {
 11644              		.loc 1 196 41 view .LVU3950
 11645 4424 4F8D04DF 		lea	r8, [r15+r11*8]	# range_stop_ptr,
 11646              	# sieve_extend.c:179:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 179:sieve_extend.c **** 
 11647              		.loc 1 179 133 view .LVU3951
 11648 4428 4929F9   		sub	r9, rdi	# tmp312, tmp306
 11649              	# sieve_extend.c:179:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 179:sieve_extend.c **** 
 11650              		.loc 1 179 53 view .LVU3952
GAS LISTING /tmp/ccNeV1of.s 			page 320


 11651 442b 4939FB   		cmp	r11, rdi	# range_stop_word, tmp306
 11652 442e 4F8D0CCF 		lea	r9, [r15+r9*8]	# tmp314,
 11653 4432 4D89E3   		mov	r11, r12	# _537, step
 11654              	# sieve_extend.c:203:       *index_ptr |= (mask & chopmask(range_stop));
 203:sieve_extend.c ****    }
 11655              		.loc 1 203 29 view .LVU3953
 11656 4435 F7D1     		not	ecx	# tmp308
 11657              	# sieve_extend.c:179:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 179:sieve_extend.c **** 
 11658              		.loc 1 179 53 view .LVU3954
 11659 4437 4D0F46CF 		cmovbe	r9, r15	# _94,, fast_loop_ptr
 11660              	# sieve_extend.c:203:       *index_ptr |= (mask & chopmask(range_stop));
 203:sieve_extend.c ****    }
 11661              		.loc 1 203 29 view .LVU3955
 11662 443b 48C7C0FF 		mov	rax, -1	# tmp641,
 11662      FFFFFF
 11663              	# sieve_extend.c:185:        index_ptr+=step;
 185:sieve_extend.c ****        *index_ptr |= mask;
 11664              		.loc 1 185 17 view .LVU3956
 11665 4442 4A8D14E5 		lea	rdx, 0[0+r12*8]	# _119,
 11665      00000000 
 11666 444a 48C1E703 		sal	rdi, 3	# tmp318,
 11667              	# sieve_extend.c:203:       *index_ptr |= (mask & chopmask(range_stop));
 203:sieve_extend.c ****    }
 11668              		.loc 1 203 29 view .LVU3957
 11669 444e C4E2F3F7 		shrx	rsi, rax, rcx	# _151, tmp641, tmp308
 11669      F0
 11670 4453 49C1E304 		sal	r11, 4	# _537,
 11671 4457 48897424 		mov	QWORD PTR 64[rsp], rsi	# %sfp, _151
 11671      40
 11672              	.LVL616:
 11673 445c 0F1F4000 		.p2align 4
 11674              		.p2align 3
 11675              	.L912:
 203:sieve_extend.c ****    }
 11676              		.loc 1 203 29 view .LVU3958
 11677              	.LBE558:
 11678              	.LBE557:
 404:sieve_extend.c ****         #endif
 11679              		.loc 1 404 13 is_stmt 1 view .LVU3959
 11680 4460 4889E8   		mov	rax, rbp	# tmp321, index
 11681 4463 B9010000 		mov	ecx, 1	# tmp644,
 11681      00
 11682 4468 48C1E806 		shr	rax, 6	# tmp321,
 11683 446c C4E2D1F7 		shlx	rcx, rcx, rbp	# _104, tmp644, index
 11683      C9
 11684              	.LVL617:
 11685              	.LBB561:
 11686              	.LBI557:
 176:sieve_extend.c ****    const counter_t range_stop_word = wordindex(range_stop);
 11687              		.loc 1 176 20 view .LVU3960
 11688              	.LBB559:
 177:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 11689              		.loc 1 177 4 view .LVU3961
 178:sieve_extend.c ****    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_stop
 11690              		.loc 1 178 4 view .LVU3962
 11691              	# sieve_extend.c:178:    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(
GAS LISTING /tmp/ccNeV1of.s 			page 321


 178:sieve_extend.c ****    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_stop
 11692              		.loc 1 178 78 is_stmt 0 view .LVU3963
 11693 4471 498D04C7 		lea	rax, [r15+rax*8]	# index_ptr,
 11694              	.LVL618:
 179:sieve_extend.c **** 
 11695              		.loc 1 179 4 is_stmt 1 view .LVU3964
 183:sieve_extend.c ****        *index_ptr |= mask;
 11696              		.loc 1 183 10 view .LVU3965
 11697 4475 4C39C8   		cmp	rax, r9	# index_ptr, fast_loop_ptr
 11698 4478 0F830201 		jnb	.L907	#,
 11698      0000
 183:sieve_extend.c ****        *index_ptr |= mask;
 11699              		.loc 1 183 10 is_stmt 0 view .LVU3966
 11700 447e 4A8D3418 		lea	rsi, [rax+r11]	# ivtmp.621,
 11701              	.L908:
 184:sieve_extend.c ****        index_ptr+=step;
 11702              		.loc 1 184 8 is_stmt 1 view .LVU3967
 11703              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 11704              		.loc 1 184 19 is_stmt 0 view .LVU3968
 11705 4482 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_334, offset: 0B], _104
 185:sieve_extend.c ****        *index_ptr |= mask;
 11706              		.loc 1 185 8 is_stmt 1 view .LVU3969
 11707              	.LVL619:
 186:sieve_extend.c ****        index_ptr+=step;
 11708              		.loc 1 186 8 view .LVU3970
 11709              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 11710              		.loc 1 186 19 is_stmt 0 view .LVU3971
 11711 4485 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_334, index: _119, offset: 0B], _104
 187:sieve_extend.c ****        *index_ptr |= mask;
 11712              		.loc 1 187 8 is_stmt 1 view .LVU3972
 11713              	.LVL620:
 188:sieve_extend.c ****        index_ptr+=step;
 11714              		.loc 1 188 8 view .LVU3973
 11715              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 11716              		.loc 1 188 19 is_stmt 0 view .LVU3974
 11717 4489 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _529, offset: 0B], _104
 189:sieve_extend.c ****        *index_ptr |= mask;
 11718              		.loc 1 189 8 is_stmt 1 view .LVU3975
 11719              	.LVL621:
 190:sieve_extend.c ****        index_ptr+=step;
 11720              		.loc 1 190 8 view .LVU3976
 11721              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 11722              		.loc 1 190 19 is_stmt 0 view .LVU3977
 11723 448c 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _529, index: _119, offset: 0B], _104
 191:sieve_extend.c ****        *index_ptr |= mask;
 11724              		.loc 1 191 8 is_stmt 1 view .LVU3978
 11725              	.LVL622:
 192:sieve_extend.c ****        index_ptr+=step;
 11726              		.loc 1 192 8 view .LVU3979
 11727 4490 4801FE   		add	rsi, rdi	# ivtmp.621, tmp318
 11728              	# sieve_extend.c:192:        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 11729              		.loc 1 192 19 is_stmt 0 view .LVU3980
GAS LISTING /tmp/ccNeV1of.s 			page 322


 11730 4493 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_334, index: _119, step: 4, offset: 0B], _104
 193:sieve_extend.c ****    }
 11731              		.loc 1 193 8 is_stmt 1 view .LVU3981
 11732 4497 4801F8   		add	rax, rdi	# index_ptr, tmp318
 11733              	.LVL623:
 183:sieve_extend.c ****        *index_ptr |= mask;
 11734              		.loc 1 183 10 view .LVU3982
 11735 449a 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 11736 449d 0F86DD00 		jbe	.L907	#,
 11736      0000
 184:sieve_extend.c ****        index_ptr+=step;
 11737              		.loc 1 184 8 view .LVU3983
 11738              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 11739              		.loc 1 184 19 is_stmt 0 view .LVU3984
 11740 44a3 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_334, offset: 0B], _104
 185:sieve_extend.c ****        *index_ptr |= mask;
 11741              		.loc 1 185 8 is_stmt 1 view .LVU3985
 11742              	.LVL624:
 186:sieve_extend.c ****        index_ptr+=step;
 11743              		.loc 1 186 8 view .LVU3986
 11744              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 11745              		.loc 1 186 19 is_stmt 0 view .LVU3987
 11746 44a6 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_334, index: _119, offset: 0B], _104
 187:sieve_extend.c ****        *index_ptr |= mask;
 11747              		.loc 1 187 8 is_stmt 1 view .LVU3988
 11748              	.LVL625:
 188:sieve_extend.c ****        index_ptr+=step;
 11749              		.loc 1 188 8 view .LVU3989
 11750              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 11751              		.loc 1 188 19 is_stmt 0 view .LVU3990
 11752 44aa 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _529, offset: 0B], _104
 189:sieve_extend.c ****        *index_ptr |= mask;
 11753              		.loc 1 189 8 is_stmt 1 view .LVU3991
 11754              	.LVL626:
 190:sieve_extend.c ****        index_ptr+=step;
 11755              		.loc 1 190 8 view .LVU3992
 11756              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 11757              		.loc 1 190 19 is_stmt 0 view .LVU3993
 11758 44ad 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _529, index: _119, offset: 0B], _104
 191:sieve_extend.c ****        *index_ptr |= mask;
 11759              		.loc 1 191 8 is_stmt 1 view .LVU3994
 11760              	.LVL627:
 192:sieve_extend.c ****        index_ptr+=step;
 11761              		.loc 1 192 8 view .LVU3995
 11762 44b1 4801FE   		add	rsi, rdi	# ivtmp.621, tmp318
 11763              	# sieve_extend.c:192:        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 11764              		.loc 1 192 19 is_stmt 0 view .LVU3996
 11765 44b4 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_334, index: _119, step: 4, offset: 0B], _104
 193:sieve_extend.c ****    }
 11766              		.loc 1 193 8 is_stmt 1 view .LVU3997
 11767 44b8 4801F8   		add	rax, rdi	# index_ptr, tmp318
 11768              	.LVL628:
GAS LISTING /tmp/ccNeV1of.s 			page 323


 183:sieve_extend.c ****        *index_ptr |= mask;
 11769              		.loc 1 183 10 view .LVU3998
 11770 44bb 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 11771 44be 0F86BC00 		jbe	.L907	#,
 11771      0000
 184:sieve_extend.c ****        index_ptr+=step;
 11772              		.loc 1 184 8 view .LVU3999
 11773              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 11774              		.loc 1 184 19 is_stmt 0 view .LVU4000
 11775 44c4 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_334, offset: 0B], _104
 185:sieve_extend.c ****        *index_ptr |= mask;
 11776              		.loc 1 185 8 is_stmt 1 view .LVU4001
 11777              	.LVL629:
 186:sieve_extend.c ****        index_ptr+=step;
 11778              		.loc 1 186 8 view .LVU4002
 11779              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 11780              		.loc 1 186 19 is_stmt 0 view .LVU4003
 11781 44c7 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_334, index: _119, offset: 0B], _104
 187:sieve_extend.c ****        *index_ptr |= mask;
 11782              		.loc 1 187 8 is_stmt 1 view .LVU4004
 11783              	.LVL630:
 188:sieve_extend.c ****        index_ptr+=step;
 11784              		.loc 1 188 8 view .LVU4005
 11785              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 11786              		.loc 1 188 19 is_stmt 0 view .LVU4006
 11787 44cb 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _529, offset: 0B], _104
 189:sieve_extend.c ****        *index_ptr |= mask;
 11788              		.loc 1 189 8 is_stmt 1 view .LVU4007
 11789              	.LVL631:
 190:sieve_extend.c ****        index_ptr+=step;
 11790              		.loc 1 190 8 view .LVU4008
 11791              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 11792              		.loc 1 190 19 is_stmt 0 view .LVU4009
 11793 44ce 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _529, index: _119, offset: 0B], _104
 191:sieve_extend.c ****        *index_ptr |= mask;
 11794              		.loc 1 191 8 is_stmt 1 view .LVU4010
 11795              	.LVL632:
 192:sieve_extend.c ****        index_ptr+=step;
 11796              		.loc 1 192 8 view .LVU4011
 11797 44d2 4801FE   		add	rsi, rdi	# ivtmp.621, tmp318
 11798              	# sieve_extend.c:192:        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 11799              		.loc 1 192 19 is_stmt 0 view .LVU4012
 11800 44d5 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_334, index: _119, step: 4, offset: 0B], _104
 193:sieve_extend.c ****    }
 11801              		.loc 1 193 8 is_stmt 1 view .LVU4013
 11802 44d9 4801F8   		add	rax, rdi	# index_ptr, tmp318
 11803              	.LVL633:
 183:sieve_extend.c ****        *index_ptr |= mask;
 11804              		.loc 1 183 10 view .LVU4014
 11805 44dc 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 11806 44df 0F869B00 		jbe	.L907	#,
 11806      0000
GAS LISTING /tmp/ccNeV1of.s 			page 324


 184:sieve_extend.c ****        index_ptr+=step;
 11807              		.loc 1 184 8 view .LVU4015
 11808              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 11809              		.loc 1 184 19 is_stmt 0 view .LVU4016
 11810 44e5 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_334, offset: 0B], _104
 185:sieve_extend.c ****        *index_ptr |= mask;
 11811              		.loc 1 185 8 is_stmt 1 view .LVU4017
 11812              	.LVL634:
 186:sieve_extend.c ****        index_ptr+=step;
 11813              		.loc 1 186 8 view .LVU4018
 11814              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 11815              		.loc 1 186 19 is_stmt 0 view .LVU4019
 11816 44e8 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_334, index: _119, offset: 0B], _104
 187:sieve_extend.c ****        *index_ptr |= mask;
 11817              		.loc 1 187 8 is_stmt 1 view .LVU4020
 11818              	.LVL635:
 188:sieve_extend.c ****        index_ptr+=step;
 11819              		.loc 1 188 8 view .LVU4021
 11820              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 11821              		.loc 1 188 19 is_stmt 0 view .LVU4022
 11822 44ec 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _529, offset: 0B], _104
 189:sieve_extend.c ****        *index_ptr |= mask;
 11823              		.loc 1 189 8 is_stmt 1 view .LVU4023
 11824              	.LVL636:
 190:sieve_extend.c ****        index_ptr+=step;
 11825              		.loc 1 190 8 view .LVU4024
 11826              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 11827              		.loc 1 190 19 is_stmt 0 view .LVU4025
 11828 44ef 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _529, index: _119, offset: 0B], _104
 191:sieve_extend.c ****        *index_ptr |= mask;
 11829              		.loc 1 191 8 is_stmt 1 view .LVU4026
 11830              	.LVL637:
 192:sieve_extend.c ****        index_ptr+=step;
 11831              		.loc 1 192 8 view .LVU4027
 11832 44f3 4801FE   		add	rsi, rdi	# ivtmp.621, tmp318
 11833              	# sieve_extend.c:192:        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 11834              		.loc 1 192 19 is_stmt 0 view .LVU4028
 11835 44f6 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_334, index: _119, step: 4, offset: 0B], _104
 193:sieve_extend.c ****    }
 11836              		.loc 1 193 8 is_stmt 1 view .LVU4029
 11837 44fa 4801F8   		add	rax, rdi	# index_ptr, tmp318
 11838              	.LVL638:
 183:sieve_extend.c ****        *index_ptr |= mask;
 11839              		.loc 1 183 10 view .LVU4030
 11840 44fd 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 11841 4500 767E     		jbe	.L907	#,
 184:sieve_extend.c ****        index_ptr+=step;
 11842              		.loc 1 184 8 view .LVU4031
 11843              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 11844              		.loc 1 184 19 is_stmt 0 view .LVU4032
 11845 4502 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_334, offset: 0B], _104
GAS LISTING /tmp/ccNeV1of.s 			page 325


 185:sieve_extend.c ****        *index_ptr |= mask;
 11846              		.loc 1 185 8 is_stmt 1 view .LVU4033
 11847              	.LVL639:
 186:sieve_extend.c ****        index_ptr+=step;
 11848              		.loc 1 186 8 view .LVU4034
 11849              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 11850              		.loc 1 186 19 is_stmt 0 view .LVU4035
 11851 4505 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_334, index: _119, offset: 0B], _104
 187:sieve_extend.c ****        *index_ptr |= mask;
 11852              		.loc 1 187 8 is_stmt 1 view .LVU4036
 11853              	.LVL640:
 188:sieve_extend.c ****        index_ptr+=step;
 11854              		.loc 1 188 8 view .LVU4037
 11855              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 11856              		.loc 1 188 19 is_stmt 0 view .LVU4038
 11857 4509 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _529, offset: 0B], _104
 189:sieve_extend.c ****        *index_ptr |= mask;
 11858              		.loc 1 189 8 is_stmt 1 view .LVU4039
 11859              	.LVL641:
 190:sieve_extend.c ****        index_ptr+=step;
 11860              		.loc 1 190 8 view .LVU4040
 11861              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 11862              		.loc 1 190 19 is_stmt 0 view .LVU4041
 11863 450c 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _529, index: _119, offset: 0B], _104
 191:sieve_extend.c ****        *index_ptr |= mask;
 11864              		.loc 1 191 8 is_stmt 1 view .LVU4042
 11865              	.LVL642:
 192:sieve_extend.c ****        index_ptr+=step;
 11866              		.loc 1 192 8 view .LVU4043
 11867 4510 4801FE   		add	rsi, rdi	# ivtmp.621, tmp318
 11868              	# sieve_extend.c:192:        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 11869              		.loc 1 192 19 is_stmt 0 view .LVU4044
 11870 4513 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_334, index: _119, step: 4, offset: 0B], _104
 193:sieve_extend.c ****    }
 11871              		.loc 1 193 8 is_stmt 1 view .LVU4045
 11872 4517 4801F8   		add	rax, rdi	# index_ptr, tmp318
 11873              	.LVL643:
 183:sieve_extend.c ****        *index_ptr |= mask;
 11874              		.loc 1 183 10 view .LVU4046
 11875 451a 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 11876 451d 7661     		jbe	.L907	#,
 184:sieve_extend.c ****        index_ptr+=step;
 11877              		.loc 1 184 8 view .LVU4047
 11878              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 11879              		.loc 1 184 19 is_stmt 0 view .LVU4048
 11880 451f 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_334, offset: 0B], _104
 185:sieve_extend.c ****        *index_ptr |= mask;
 11881              		.loc 1 185 8 is_stmt 1 view .LVU4049
 11882              	.LVL644:
 186:sieve_extend.c ****        index_ptr+=step;
 11883              		.loc 1 186 8 view .LVU4050
 11884              	# sieve_extend.c:186:        *index_ptr |= mask;
GAS LISTING /tmp/ccNeV1of.s 			page 326


 186:sieve_extend.c ****        index_ptr+=step;
 11885              		.loc 1 186 19 is_stmt 0 view .LVU4051
 11886 4522 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_334, index: _119, offset: 0B], _104
 187:sieve_extend.c ****        *index_ptr |= mask;
 11887              		.loc 1 187 8 is_stmt 1 view .LVU4052
 11888              	.LVL645:
 188:sieve_extend.c ****        index_ptr+=step;
 11889              		.loc 1 188 8 view .LVU4053
 11890              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 11891              		.loc 1 188 19 is_stmt 0 view .LVU4054
 11892 4526 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _529, offset: 0B], _104
 189:sieve_extend.c ****        *index_ptr |= mask;
 11893              		.loc 1 189 8 is_stmt 1 view .LVU4055
 11894              	.LVL646:
 190:sieve_extend.c ****        index_ptr+=step;
 11895              		.loc 1 190 8 view .LVU4056
 11896              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 11897              		.loc 1 190 19 is_stmt 0 view .LVU4057
 11898 4529 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _529, index: _119, offset: 0B], _104
 191:sieve_extend.c ****        *index_ptr |= mask;
 11899              		.loc 1 191 8 is_stmt 1 view .LVU4058
 11900              	.LVL647:
 192:sieve_extend.c ****        index_ptr+=step;
 11901              		.loc 1 192 8 view .LVU4059
 11902 452d 4801FE   		add	rsi, rdi	# ivtmp.621, tmp318
 11903              	# sieve_extend.c:192:        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 11904              		.loc 1 192 19 is_stmt 0 view .LVU4060
 11905 4530 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_334, index: _119, step: 4, offset: 0B], _104
 193:sieve_extend.c ****    }
 11906              		.loc 1 193 8 is_stmt 1 view .LVU4061
 11907 4534 4801F8   		add	rax, rdi	# index_ptr, tmp318
 11908              	.LVL648:
 183:sieve_extend.c ****        *index_ptr |= mask;
 11909              		.loc 1 183 10 view .LVU4062
 11910 4537 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 11911 453a 7644     		jbe	.L907	#,
 184:sieve_extend.c ****        index_ptr+=step;
 11912              		.loc 1 184 8 view .LVU4063
 11913              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 11914              		.loc 1 184 19 is_stmt 0 view .LVU4064
 11915 453c 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_334, offset: 0B], _104
 185:sieve_extend.c ****        *index_ptr |= mask;
 11916              		.loc 1 185 8 is_stmt 1 view .LVU4065
 11917              	.LVL649:
 186:sieve_extend.c ****        index_ptr+=step;
 11918              		.loc 1 186 8 view .LVU4066
 11919              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 11920              		.loc 1 186 19 is_stmt 0 view .LVU4067
 11921 453f 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_334, index: _119, offset: 0B], _104
 187:sieve_extend.c ****        *index_ptr |= mask;
 11922              		.loc 1 187 8 is_stmt 1 view .LVU4068
 11923              	.LVL650:
GAS LISTING /tmp/ccNeV1of.s 			page 327


 188:sieve_extend.c ****        index_ptr+=step;
 11924              		.loc 1 188 8 view .LVU4069
 11925              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 11926              		.loc 1 188 19 is_stmt 0 view .LVU4070
 11927 4543 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _529, offset: 0B], _104
 189:sieve_extend.c ****        *index_ptr |= mask;
 11928              		.loc 1 189 8 is_stmt 1 view .LVU4071
 11929              	.LVL651:
 190:sieve_extend.c ****        index_ptr+=step;
 11930              		.loc 1 190 8 view .LVU4072
 11931              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 11932              		.loc 1 190 19 is_stmt 0 view .LVU4073
 11933 4546 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _529, index: _119, offset: 0B], _104
 191:sieve_extend.c ****        *index_ptr |= mask;
 11934              		.loc 1 191 8 is_stmt 1 view .LVU4074
 11935              	.LVL652:
 192:sieve_extend.c ****        index_ptr+=step;
 11936              		.loc 1 192 8 view .LVU4075
 11937 454a 4801FE   		add	rsi, rdi	# ivtmp.621, tmp318
 11938              	# sieve_extend.c:192:        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 11939              		.loc 1 192 19 is_stmt 0 view .LVU4076
 11940 454d 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_334, index: _119, step: 4, offset: 0B], _104
 193:sieve_extend.c ****    }
 11941              		.loc 1 193 8 is_stmt 1 view .LVU4077
 11942 4551 4801F8   		add	rax, rdi	# index_ptr, tmp318
 11943              	.LVL653:
 183:sieve_extend.c ****        *index_ptr |= mask;
 11944              		.loc 1 183 10 view .LVU4078
 11945 4554 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 11946 4557 7627     		jbe	.L907	#,
 184:sieve_extend.c ****        index_ptr+=step;
 11947              		.loc 1 184 8 view .LVU4079
 11948              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 11949              		.loc 1 184 19 is_stmt 0 view .LVU4080
 11950 4559 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_334, offset: 0B], _104
 185:sieve_extend.c ****        *index_ptr |= mask;
 11951              		.loc 1 185 8 is_stmt 1 view .LVU4081
 11952              	.LVL654:
 186:sieve_extend.c ****        index_ptr+=step;
 11953              		.loc 1 186 8 view .LVU4082
 11954              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 11955              		.loc 1 186 19 is_stmt 0 view .LVU4083
 11956 455c 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_334, index: _119, offset: 0B], _104
 187:sieve_extend.c ****        *index_ptr |= mask;
 11957              		.loc 1 187 8 is_stmt 1 view .LVU4084
 11958              	.LVL655:
 188:sieve_extend.c ****        index_ptr+=step;
 11959              		.loc 1 188 8 view .LVU4085
 11960              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 11961              		.loc 1 188 19 is_stmt 0 view .LVU4086
 11962 4560 48090E   		or	QWORD PTR [rsi], rcx	# MEM[base: _529, offset: 0B], _104
GAS LISTING /tmp/ccNeV1of.s 			page 328


 189:sieve_extend.c ****        *index_ptr |= mask;
 11963              		.loc 1 189 8 is_stmt 1 view .LVU4087
 11964              	.LVL656:
 190:sieve_extend.c ****        index_ptr+=step;
 11965              		.loc 1 190 8 view .LVU4088
 11966              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 11967              		.loc 1 190 19 is_stmt 0 view .LVU4089
 11968 4563 48090C16 		or	QWORD PTR [rsi+rdx], rcx	# MEM[base: _529, index: _119, offset: 0B], _104
 191:sieve_extend.c ****        *index_ptr |= mask;
 11969              		.loc 1 191 8 is_stmt 1 view .LVU4090
 11970              	.LVL657:
 192:sieve_extend.c ****        index_ptr+=step;
 11971              		.loc 1 192 8 view .LVU4091
 11972 4567 4801FE   		add	rsi, rdi	# ivtmp.621, tmp318
 11973              	# sieve_extend.c:192:        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 11974              		.loc 1 192 19 is_stmt 0 view .LVU4092
 11975 456a 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_334, index: _119, step: 4, offset: 0B], _104
 193:sieve_extend.c ****    }
 11976              		.loc 1 193 8 is_stmt 1 view .LVU4093
 11977 456e 4801F8   		add	rax, rdi	# index_ptr, tmp318
 11978              	.LVL658:
 183:sieve_extend.c ****        *index_ptr |= mask;
 11979              		.loc 1 183 10 view .LVU4094
 11980 4571 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 11981 4574 0F8708FF 		ja	.L908	#,
 11981      FFFF
 11982 457a 660F1F44 		.p2align 4
 11982      0000
 11983              		.p2align 3
 11984              	.L907:
 196:sieve_extend.c ****    while likely(index_ptr < range_stop_ptr) {
 11985              		.loc 1 196 4 view .LVU4095
 197:sieve_extend.c ****        *index_ptr |= mask;
 11986              		.loc 1 197 4 view .LVU4096
 197:sieve_extend.c ****        *index_ptr |= mask;
 11987              		.loc 1 197 10 view .LVU4097
 11988 4580 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 11989 4583 765B     		jbe	.L909	#,
 11990              	.L910:
 198:sieve_extend.c ****        index_ptr+=step;
 11991              		.loc 1 198 8 view .LVU4098
 11992              	# sieve_extend.c:198:        *index_ptr |= mask;
 198:sieve_extend.c ****        index_ptr+=step;
 11993              		.loc 1 198 19 is_stmt 0 view .LVU4099
 11994 4585 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_331, offset: 0B], _104
 199:sieve_extend.c ****    }
 11995              		.loc 1 199 8 is_stmt 1 view .LVU4100
 11996              	# sieve_extend.c:199:        index_ptr+=step;
 199:sieve_extend.c ****    }
 11997              		.loc 1 199 17 is_stmt 0 view .LVU4101
 11998 4588 4801D0   		add	rax, rdx	# index_ptr, _119
 11999              	.LVL659:
 197:sieve_extend.c ****        *index_ptr |= mask;
 12000              		.loc 1 197 10 is_stmt 1 view .LVU4102
 12001 458b 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
GAS LISTING /tmp/ccNeV1of.s 			page 329


 12002 458e 7650     		jbe	.L909	#,
 198:sieve_extend.c ****        index_ptr+=step;
 12003              		.loc 1 198 8 view .LVU4103
 12004              	# sieve_extend.c:198:        *index_ptr |= mask;
 198:sieve_extend.c ****        index_ptr+=step;
 12005              		.loc 1 198 19 is_stmt 0 view .LVU4104
 12006 4590 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_331, offset: 0B], _104
 199:sieve_extend.c ****    }
 12007              		.loc 1 199 8 is_stmt 1 view .LVU4105
 12008              	# sieve_extend.c:199:        index_ptr+=step;
 199:sieve_extend.c ****    }
 12009              		.loc 1 199 17 is_stmt 0 view .LVU4106
 12010 4593 4801D0   		add	rax, rdx	# index_ptr, _119
 12011              	.LVL660:
 197:sieve_extend.c ****        *index_ptr |= mask;
 12012              		.loc 1 197 10 is_stmt 1 view .LVU4107
 12013 4596 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 12014 4599 7645     		jbe	.L909	#,
 198:sieve_extend.c ****        index_ptr+=step;
 12015              		.loc 1 198 8 view .LVU4108
 12016              	# sieve_extend.c:198:        *index_ptr |= mask;
 198:sieve_extend.c ****        index_ptr+=step;
 12017              		.loc 1 198 19 is_stmt 0 view .LVU4109
 12018 459b 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_331, offset: 0B], _104
 199:sieve_extend.c ****    }
 12019              		.loc 1 199 8 is_stmt 1 view .LVU4110
 12020              	# sieve_extend.c:199:        index_ptr+=step;
 199:sieve_extend.c ****    }
 12021              		.loc 1 199 17 is_stmt 0 view .LVU4111
 12022 459e 4801D0   		add	rax, rdx	# index_ptr, _119
 12023              	.LVL661:
 197:sieve_extend.c ****        *index_ptr |= mask;
 12024              		.loc 1 197 10 is_stmt 1 view .LVU4112
 12025 45a1 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 12026 45a4 763A     		jbe	.L909	#,
 198:sieve_extend.c ****        index_ptr+=step;
 12027              		.loc 1 198 8 view .LVU4113
 12028              	# sieve_extend.c:198:        *index_ptr |= mask;
 198:sieve_extend.c ****        index_ptr+=step;
 12029              		.loc 1 198 19 is_stmt 0 view .LVU4114
 12030 45a6 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_331, offset: 0B], _104
 199:sieve_extend.c ****    }
 12031              		.loc 1 199 8 is_stmt 1 view .LVU4115
 12032              	# sieve_extend.c:199:        index_ptr+=step;
 199:sieve_extend.c ****    }
 12033              		.loc 1 199 17 is_stmt 0 view .LVU4116
 12034 45a9 4801D0   		add	rax, rdx	# index_ptr, _119
 12035              	.LVL662:
 197:sieve_extend.c ****        *index_ptr |= mask;
 12036              		.loc 1 197 10 is_stmt 1 view .LVU4117
 12037 45ac 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 12038 45af 762F     		jbe	.L909	#,
 198:sieve_extend.c ****        index_ptr+=step;
 12039              		.loc 1 198 8 view .LVU4118
 12040              	# sieve_extend.c:198:        *index_ptr |= mask;
 198:sieve_extend.c ****        index_ptr+=step;
 12041              		.loc 1 198 19 is_stmt 0 view .LVU4119
GAS LISTING /tmp/ccNeV1of.s 			page 330


 12042 45b1 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_331, offset: 0B], _104
 199:sieve_extend.c ****    }
 12043              		.loc 1 199 8 is_stmt 1 view .LVU4120
 12044              	# sieve_extend.c:199:        index_ptr+=step;
 199:sieve_extend.c ****    }
 12045              		.loc 1 199 17 is_stmt 0 view .LVU4121
 12046 45b4 4801D0   		add	rax, rdx	# index_ptr, _119
 12047              	.LVL663:
 197:sieve_extend.c ****        *index_ptr |= mask;
 12048              		.loc 1 197 10 is_stmt 1 view .LVU4122
 12049 45b7 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 12050 45ba 7624     		jbe	.L909	#,
 198:sieve_extend.c ****        index_ptr+=step;
 12051              		.loc 1 198 8 view .LVU4123
 12052              	# sieve_extend.c:198:        *index_ptr |= mask;
 198:sieve_extend.c ****        index_ptr+=step;
 12053              		.loc 1 198 19 is_stmt 0 view .LVU4124
 12054 45bc 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_331, offset: 0B], _104
 199:sieve_extend.c ****    }
 12055              		.loc 1 199 8 is_stmt 1 view .LVU4125
 12056              	# sieve_extend.c:199:        index_ptr+=step;
 199:sieve_extend.c ****    }
 12057              		.loc 1 199 17 is_stmt 0 view .LVU4126
 12058 45bf 4801D0   		add	rax, rdx	# index_ptr, _119
 12059              	.LVL664:
 197:sieve_extend.c ****        *index_ptr |= mask;
 12060              		.loc 1 197 10 is_stmt 1 view .LVU4127
 12061 45c2 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 12062 45c5 7619     		jbe	.L909	#,
 198:sieve_extend.c ****        index_ptr+=step;
 12063              		.loc 1 198 8 view .LVU4128
 12064              	# sieve_extend.c:198:        *index_ptr |= mask;
 198:sieve_extend.c ****        index_ptr+=step;
 12065              		.loc 1 198 19 is_stmt 0 view .LVU4129
 12066 45c7 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_331, offset: 0B], _104
 199:sieve_extend.c ****    }
 12067              		.loc 1 199 8 is_stmt 1 view .LVU4130
 12068              	# sieve_extend.c:199:        index_ptr+=step;
 199:sieve_extend.c ****    }
 12069              		.loc 1 199 17 is_stmt 0 view .LVU4131
 12070 45ca 4801D0   		add	rax, rdx	# index_ptr, _119
 12071              	.LVL665:
 197:sieve_extend.c ****        *index_ptr |= mask;
 12072              		.loc 1 197 10 is_stmt 1 view .LVU4132
 12073 45cd 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 12074 45d0 760E     		jbe	.L909	#,
 198:sieve_extend.c ****        index_ptr+=step;
 12075              		.loc 1 198 8 view .LVU4133
 12076              	# sieve_extend.c:198:        *index_ptr |= mask;
 198:sieve_extend.c ****        index_ptr+=step;
 12077              		.loc 1 198 19 is_stmt 0 view .LVU4134
 12078 45d2 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_331, offset: 0B], _104
 199:sieve_extend.c ****    }
 12079              		.loc 1 199 8 is_stmt 1 view .LVU4135
 12080              	# sieve_extend.c:199:        index_ptr+=step;
 199:sieve_extend.c ****    }
 12081              		.loc 1 199 17 is_stmt 0 view .LVU4136
GAS LISTING /tmp/ccNeV1of.s 			page 331


 12082 45d5 4801D0   		add	rax, rdx	# index_ptr, _119
 12083              	.LVL666:
 197:sieve_extend.c ****        *index_ptr |= mask;
 12084              		.loc 1 197 10 is_stmt 1 view .LVU4137
 12085 45d8 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 12086 45db 77A8     		ja	.L910	#,
 12087 45dd 0F1F00   		.p2align 4
 12088              		.p2align 3
 12089              	.L909:
 202:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 12090              		.loc 1 202 4 view .LVU4138
 12091              	# sieve_extend.c:202:    if (index_ptr == range_stop_ptr) { // index_ptr could also end above range
 202:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 12092              		.loc 1 202 7 is_stmt 0 view .LVU4139
 12093 45e0 4939C0   		cmp	r8, rax	# range_stop_ptr, index_ptr
 12094 45e3 747B     		je	.L1105	#,
 12095              	.LVL667:
 12096              	.L911:
 202:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 12097              		.loc 1 202 7 view .LVU4140
 12098              	.LBE559:
 12099              	.LBE561:
 400:sieve_extend.c ****         #if __APPLE__
 12100              		.loc 1 400 77 is_stmt 1 view .LVU4141
 12101              	# sieve_extend.c:400:     for (register counter_t index = range_start; index < range_stop_unique; i
 400:sieve_extend.c ****         #if __APPLE__
 12102              		.loc 1 400 83 is_stmt 0 view .LVU4142
 12103 45e5 4C01E5   		add	rbp, r12	# index, step
 12104              	.LVL668:
 400:sieve_extend.c ****         #if __APPLE__
 12105              		.loc 1 400 50 is_stmt 1 view .LVU4143
 12106              	# sieve_extend.c:400:     for (register counter_t index = range_start; index < range_stop_unique; i
 400:sieve_extend.c ****         #if __APPLE__
 12107              		.loc 1 400 5 is_stmt 0 view .LVU4144
 12108 45e8 4939EA   		cmp	r10, rbp	# range_stop_unique, index
 12109 45eb 0F876FFE 		ja	.L912	#,
 12109      FFFF
 12110              	.LVL669:
 400:sieve_extend.c ****         #if __APPLE__
 12111              		.loc 1 400 5 view .LVU4145
 12112              	.LBE556:
 12113              	.LBE555:
 12114              	.LBE554:
 12115              	.LBE574:
 899:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 12116              		.loc 1 899 11 is_stmt 1 view .LVU4146
 12117              	# sieve_extend.c:899:     for (;range_stop < block_stop;) {
 899:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 12118              		.loc 1 899 5 is_stmt 0 view .LVU4147
 12119 45f1 4C3B7424 		cmp	r14, QWORD PTR 8[rsp]	# _67, %sfp
 12119      08
 12120 45f6 0F8215FD 		jb	.L914	#,
 12120      FFFF
 12121              	.L1104:
 899:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 12122              		.loc 1 899 5 view .LVU4148
 12123 45fc 488B6C24 		mov	rbp, QWORD PTR 16[rsp]	# index, %sfp
GAS LISTING /tmp/ccNeV1of.s 			page 332


 12123      10
 12124 4601 BA010000 		mov	edx, 1	# tmp327,
 12124      00
 12125 4606 488B5C24 		mov	rbx, QWORD PTR 40[rsp]	# <retval>, %sfp
 12125      28
 12126 460b 488B7424 		mov	rsi, QWORD PTR 24[rsp]	# block$pattern_start, %sfp
 12126      18
 12127 4610 4989EE   		mov	r14, rbp	# tmp324, index
 12128              	.LVL670:
 899:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 12129              		.loc 1 899 5 view .LVU4149
 12130 4613 89EF     		mov	edi, ebp	# tmp653, index
 12131 4615 4C8B6308 		mov	r12, QWORD PTR 8[rbx]	# prephitmp_564, sieve_89->bits
 12132              	.LVL671:
 899:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 12133              		.loc 1 899 5 view .LVU4150
 12134 4619 C462C1F7 		shlx	r8, rdx, rdi	# prephitmp_502, tmp327, tmp653
 12134      C2
 12135 461e 49C1EE06 		shr	r14, 6	# tmp324,
 12136 4622 4C89EA   		mov	rdx, r13	# block$pattern_size, patternsize_bits
 12137 4625 4F8D14F7 		lea	r10, [r15+r14*8]	# prephitmp_505,
 12138              	.LBE580:
 12139              	.LBE588:
 12140              	.LBB589:
 12141              	.LBB590:
 12142              	# sieve_extend.c:839:     if (size < WORD_SIZE_counter)   {
 839:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 12143              		.loc 1 839 8 view .LVU4151
 12144 4629 4883FA3F 		cmp	rdx, 63	# block$pattern_size,
 12145 462d 4C896424 		mov	QWORD PTR 8[rsp], r12	# %sfp, prephitmp_564
 12145      08
 12146              	.LVL672:
 839:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 12147              		.loc 1 839 8 view .LVU4152
 12148 4632 4C894424 		mov	QWORD PTR 48[rsp], r8	# %sfp, prephitmp_502
 12148      30
 12149              	.LVL673:
 839:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 12150              		.loc 1 839 8 view .LVU4153
 12151              	.LBE590:
 12152              	.LBE589:
 12153              	.LBB595:
 12154              	.LBB581:
 12155              	# sieve_extend.c:899:     for (;range_stop < block_stop;) {
 899:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 12156              		.loc 1 899 5 view .LVU4154
 12157 4637 48896C24 		mov	QWORD PTR 72[rsp], rbp	# %sfp, index
 12157      48
 925:sieve_extend.c **** }
 12158              		.loc 1 925 5 is_stmt 1 view .LVU4155
 12159              	.LVL674:
 925:sieve_extend.c **** }
 12160              		.loc 1 925 5 is_stmt 0 view .LVU4156
 12161              	.LBE581:
 12162              	.LBE595:
 936:sieve_extend.c ****     counter_t startprime = block.prime;
 12163              		.loc 1 936 5 is_stmt 1 view .LVU4157
GAS LISTING /tmp/ccNeV1of.s 			page 333


 12164              	.LBB596:
 12165              	.LBI589:
 838:sieve_extend.c ****     if (size < WORD_SIZE_counter)   {
 12166              		.loc 1 838 20 view .LVU4158
 12167              	.LBB591:
 839:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 12168              		.loc 1 839 5 view .LVU4159
 12169 463c 4C895424 		mov	QWORD PTR 64[rsp], r10	# %sfp, prephitmp_505
 12169      40
 12170              	# sieve_extend.c:839:     if (size < WORD_SIZE_counter)   {
 839:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 12171              		.loc 1 839 8 is_stmt 0 view .LVU4160
 12172 4641 0F87AB00 		ja	.L915	#,
 12172      0000
 12173              	.LVL675:
 12174              	.L892:
 840:sieve_extend.c ****         return; // rapid exit for small sizes
 12175              		.loc 1 840 9 is_stmt 1 view .LVU4161
 12176 4647 488B4C24 		mov	rcx, QWORD PTR 8[rsp]	#, %sfp
 12176      08
 12177 464c 4C89FF   		mov	rdi, r15	#, _94
 12178 464f E8ACB9FF 		call	extendSieve_smallSize	#
 12178      FF
 12179              	.LVL676:
 841:sieve_extend.c ****     }
 12180              		.loc 1 841 9 view .LVU4162
 12181 4654 E9C30000 		jmp	.L916	#
 12181      00
 12182              	.LVL677:
 12183 4659 0F1F8000 		.p2align 4,,7
 12183      000000
 12184              		.p2align 3
 12185              	.L1105:
 841:sieve_extend.c ****     }
 12186              		.loc 1 841 9 is_stmt 0 view .LVU4163
 12187              	.LBE591:
 12188              	.LBE596:
 12189              	.LBB597:
 12190              	.LBB582:
 12191              	.LBB575:
 12192              	.LBB565:
 12193              	.LBB564:
 12194              	.LBB563:
 12195              	.LBB562:
 12196              	.LBB560:
 203:sieve_extend.c ****    }
 12197              		.loc 1 203 7 is_stmt 1 view .LVU4164
 12198              	# sieve_extend.c:203:       *index_ptr |= (mask & chopmask(range_stop));
 203:sieve_extend.c ****    }
 12199              		.loc 1 203 27 is_stmt 0 view .LVU4165
 12200 4660 48234C24 		and	rcx, QWORD PTR 64[rsp]	# tmp323, %sfp
 12200      40
 12201              	.LVL678:
 12202              	# sieve_extend.c:203:       *index_ptr |= (mask & chopmask(range_stop));
 203:sieve_extend.c ****    }
 12203              		.loc 1 203 18 view .LVU4166
 12204 4665 490908   		or	QWORD PTR [r8], rcx	# *index_ptr_330, tmp323
GAS LISTING /tmp/ccNeV1of.s 			page 334


 12205 4668 E978FFFF 		jmp	.L911	#
 12205      FF
 12206              	.LVL679:
 12207 466d 0F1F00   		.p2align 4,,7
 12208              		.p2align 3
 12209              	.L1103:
 203:sieve_extend.c ****    }
 12210              		.loc 1 203 18 view .LVU4167
 12211              	.LBE560:
 12212              	.LBE562:
 12213              	.LBE563:
 12214              	.LBE564:
 12215              	.LBE565:
 913:sieve_extend.c ****             extendSieve(bitarray, pattern_start, patternsize_bits, range_stop);
 12216              		.loc 1 913 13 is_stmt 1 view .LVU4168
 914:sieve_extend.c ****         }
 12217              		.loc 1 914 13 view .LVU4169
 12218              	.LBB566:
 12219              	.LBI566:
 838:sieve_extend.c ****     if (size < WORD_SIZE_counter)   {
 12220              		.loc 1 838 20 view .LVU4170
 12221              	.LBB567:
 839:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 12222              		.loc 1 839 5 view .LVU4171
 12223              	# sieve_extend.c:839:     if (size < WORD_SIZE_counter)   {
 839:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 12224              		.loc 1 839 8 is_stmt 0 view .LVU4172
 12225 4670 4983FD3F 		cmp	r13, 63	# patternsize_bits,
 12226 4674 0F86E305 		jbe	.L1106	#,
 12226      0000
 844:sieve_extend.c ****     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 12227              		.loc 1 844 5 is_stmt 1 view .LVU4173
 12228              	.LVL680:
 845:sieve_extend.c ****     const bitshift_t source_bit = bitindex_calc(source_start);
 12229              		.loc 1 845 5 view .LVU4174
 12230              	# sieve_extend.c:844:     const counter_t copy_start  = source_start + size;
 844:sieve_extend.c ****     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 12231              		.loc 1 844 21 is_stmt 0 view .LVU4175
 12232 467a 4F8D442D 		lea	r8, [r13+r13]	# copy_start,
 12232      00
 12233              	# sieve_extend.c:846:     const bitshift_t source_bit = bitindex_calc(source_start);
 846:sieve_extend.c **** 
 12234              		.loc 1 846 22 view .LVU4176
 12235 467f 4D89E9   		mov	r9, r13	# source_bit, patternsize_bits
 12236              	# sieve_extend.c:845:     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 845:sieve_extend.c ****     const bitshift_t source_bit = bitindex_calc(source_start);
 12237              		.loc 1 845 22 view .LVU4177
 12238 4682 4183E03F 		and	r8d, 63	# copy_bit,
 12239              	.LVL681:
 846:sieve_extend.c **** 
 12240              		.loc 1 846 5 is_stmt 1 view .LVU4178
 12241              	# sieve_extend.c:846:     const bitshift_t source_bit = bitindex_calc(source_start);
 846:sieve_extend.c **** 
 12242              		.loc 1 846 22 is_stmt 0 view .LVU4179
 12243 4686 4183E13F 		and	r9d, 63	# source_bit,
 12244              	.LVL682:
 848:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
GAS LISTING /tmp/ccNeV1of.s 			page 335


 12245              		.loc 1 848 5 is_stmt 1 view .LVU4180
 12246              	# sieve_extend.c:848:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 848:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
 12247              		.loc 1 848 13 is_stmt 0 view .LVU4181
 12248 468a 4D39C8   		cmp	r8, r9	# copy_bit, source_bit
 12249              	# sieve_extend.c:848:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 848:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
 12250              		.loc 1 848 37 view .LVU4182
 12251 468d 4C89F1   		mov	rcx, r14	#, _67
 12252 4690 4C89EA   		mov	rdx, r13	#, patternsize_bits
 12253 4693 4C89EE   		mov	rsi, r13	#, patternsize_bits
 12254 4696 4C89FF   		mov	rdi, r15	#, _94
 12255              	# sieve_extend.c:848:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 848:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
 12256              		.loc 1 848 13 view .LVU4183
 12257 4699 0F827204 		jb	.L1107	#,
 12257      0000
 12258              	.LVL683:
 849:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 12259              		.loc 1 849 10 is_stmt 1 view .LVU4184
 12260              	# sieve_extend.c:849:     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, s
 849:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 12261              		.loc 1 849 13 is_stmt 0 view .LVU4185
 12262 469f 0F865D04 		jbe	.L903	#,
 12262      0000
 849:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 12263              		.loc 1 849 37 is_stmt 1 view .LVU4186
 12264 46a5 E896E2FF 		call	extendSieve_shiftright_vector	#
 12264      FF
 12265              	.LVL684:
 849:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 12266              		.loc 1 849 37 is_stmt 0 view .LVU4187
 12267 46aa 4C896C24 		mov	QWORD PTR 32[rsp], r13	# %sfp, patternsize_bits
 12267      20
 12268 46af 90       		.p2align 4,,3
 12269 46b0 E933FCFF 		jmp	.L900	#
 12269      FF
 12270              	.LVL685:
 12271              	.L1101:
 849:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 12272              		.loc 1 849 37 view .LVU4188
 12273 46b5 4C8B6C24 		mov	r13, QWORD PTR 40[rsp]	# <retval>, %sfp
 12273      28
 12274 46ba 4989CB   		mov	r11, rcx	# tmp289, prime
 12275 46bd 49C1EB06 		shr	r11, 6	# tmp289,
 12276 46c1 41BC0100 		mov	r12d, 1	# tmp292,
 12276      0000
 12277 46c7 48894C24 		mov	QWORD PTR 72[rsp], rcx	# %sfp, prime
 12277      48
 12278 46cc 4B8D04DF 		lea	rax, [r15+r11*8]	# prephitmp_505,
 12279 46d0 4D8B4D08 		mov	r9, QWORD PTR 8[r13]	# prephitmp_564, sieve_89->bits
 12280 46d4 C4C2F1F7 		shlx	rbx, r12, rcx	# prephitmp_502, tmp292, tmp624
 12280      DC
 12281 46d9 48894424 		mov	QWORD PTR 64[rsp], rax	# %sfp, prephitmp_505
 12281      40
 12282 46de 48895C24 		mov	QWORD PTR 48[rsp], rbx	# %sfp, prephitmp_502
 12282      30
GAS LISTING /tmp/ccNeV1of.s 			page 336


 12283 46e3 4C894C24 		mov	QWORD PTR 8[rsp], r9	# %sfp, prephitmp_564
 12283      08
 12284              	.LVL686:
 12285              	.L899:
 849:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 12286              		.loc 1 849 37 view .LVU4189
 12287              	.LBE567:
 12288              	.LBE566:
 12289              	.LBE575:
 12290              	.LBE582:
 12291              	.LBE597:
 936:sieve_extend.c ****     counter_t startprime = block.prime;
 12292              		.loc 1 936 5 is_stmt 1 view .LVU4190
 12293              	.LBB598:
 838:sieve_extend.c ****     if (size < WORD_SIZE_counter)   {
 12294              		.loc 1 838 20 view .LVU4191
 12295              	.LBB592:
 839:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 12296              		.loc 1 839 5 view .LVU4192
 12297              	# sieve_extend.c:839:     if (size < WORD_SIZE_counter)   {
 839:sieve_extend.c ****         extendSieve_smallSize (bitarray, source_start, size, destination_stop);
 12298              		.loc 1 839 8 is_stmt 0 view .LVU4193
 12299 46e8 4883FA3F 		cmp	rdx, 63	# block$pattern_size,
 12300 46ec 0F8655FF 		jbe	.L892	#,
 12300      FFFF
 12301              	.LVL687:
 12302              	.L915:
 844:sieve_extend.c ****     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 12303              		.loc 1 844 5 is_stmt 1 view .LVU4194
 845:sieve_extend.c ****     const bitshift_t source_bit = bitindex_calc(source_start);
 12304              		.loc 1 845 5 view .LVU4195
 12305              	# sieve_extend.c:844:     const counter_t copy_start  = source_start + size;
 844:sieve_extend.c ****     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 12306              		.loc 1 844 21 is_stmt 0 view .LVU4196
 12307 46f2 488D2C16 		lea	rbp, [rsi+rdx]	# copy_start,
 12308              	.LVL688:
 12309              	# sieve_extend.c:846:     const bitshift_t source_bit = bitindex_calc(source_start);
 846:sieve_extend.c **** 
 12310              		.loc 1 846 22 view .LVU4197
 12311 46f6 4989F6   		mov	r14, rsi	# source_bit, block$pattern_start
 12312              	# sieve_extend.c:845:     const bitshift_t copy_bit   = bitindex_calc(copy_start);
 845:sieve_extend.c ****     const bitshift_t source_bit = bitindex_calc(source_start);
 12313              		.loc 1 845 22 view .LVU4198
 12314 46f9 83E53F   		and	ebp, 63	# copy_bit,
 12315              	.LVL689:
 846:sieve_extend.c **** 
 12316              		.loc 1 846 5 is_stmt 1 view .LVU4199
 12317              	# sieve_extend.c:846:     const bitshift_t source_bit = bitindex_calc(source_start);
 846:sieve_extend.c **** 
 12318              		.loc 1 846 22 is_stmt 0 view .LVU4200
 12319 46fc 4183E63F 		and	r14d, 63	# source_bit,
 12320              	.LVL690:
 848:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
 12321              		.loc 1 848 5 is_stmt 1 view .LVU4201
 12322              	# sieve_extend.c:848:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 848:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
 12323              		.loc 1 848 13 is_stmt 0 view .LVU4202
GAS LISTING /tmp/ccNeV1of.s 			page 337


 12324 4700 4C39F5   		cmp	rbp, r14	# copy_bit, source_bit
 12325              	# sieve_extend.c:848:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 848:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
 12326              		.loc 1 848 37 view .LVU4203
 12327 4703 4C89FF   		mov	rdi, r15	#, _94
 12328 4706 488B4C24 		mov	rcx, QWORD PTR 8[rsp]	#, %sfp
 12328      08
 12329              	# sieve_extend.c:848:     if      (source_bit > copy_bit) extendSieve_shiftleft (bitarray, source_s
 848:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
 12330              		.loc 1 848 13 view .LVU4204
 12331 470b 0F826705 		jb	.L1108	#,
 12331      0000
 12332              	.LVL691:
 849:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 12333              		.loc 1 849 10 is_stmt 1 view .LVU4205
 12334              	# sieve_extend.c:849:     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, s
 849:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 12335              		.loc 1 849 13 is_stmt 0 view .LVU4206
 12336 4711 0F870904 		ja	.L1109	#,
 12336      0000
 850:sieve_extend.c **** }
 12337              		.loc 1 850 37 is_stmt 1 view .LVU4207
 12338 4717 E874CAFF 		call	extendSieve_aligned	#
 12338      FF
 12339              	.LVL692:
 12340              	.L916:
 850:sieve_extend.c **** }
 12341              		.loc 1 850 37 is_stmt 0 view .LVU4208
 12342              	.LBE592:
 12343              	.LBE598:
 937:sieve_extend.c **** 
 12344              		.loc 1 937 5 is_stmt 1 view .LVU4209
 940:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 12345              		.loc 1 940 5 view .LVU4210
 12346              	.LBB599:
 940:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 12347              		.loc 1 940 10 view .LVU4211
 12348              	# sieve_extend.c:940:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 940:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 12349              		.loc 1 940 38 is_stmt 0 view .LVU4212
 12350 471c 488B7424 		mov	rsi, QWORD PTR 56[rsp]	# blocksize, %sfp
 12350      38
 12351              	# sieve_extend.c:940:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 940:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 12352              		.loc 1 940 20 view .LVU4213
 12353 4721 4531F6   		xor	r14d, r14d	# block_start
 12354              	# sieve_extend.c:940:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 940:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 12355              		.loc 1 940 83 view .LVU4214
 12356 4724 4C8B5424 		mov	r10, QWORD PTR 40[rsp]	# <retval>, %sfp
 12356      28
 12357              	# sieve_extend.c:940:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 940:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 12358              		.loc 1 940 38 view .LVU4215
 12359 4729 4C8D66FF 		lea	r12, -1[rsi]	# block_stop,
 12360              	.LVL693:
 940:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
GAS LISTING /tmp/ccNeV1of.s 			page 338


 12361              		.loc 1 940 63 is_stmt 1 view .LVU4216
 12362              	# sieve_extend.c:940:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 940:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 12363              		.loc 1 940 83 is_stmt 0 view .LVU4217
 12364 472d 498B5208 		mov	rdx, QWORD PTR 8[r10]	# _7, sieve_89->bits
 12365              	.LVL694:
 12366 4731 66662E0F 		.p2align 4
 12366      1F840000 
 12366      0000000F 
 12366      1F4000
 12367              		.p2align 3
 12368              	.L922:
 12369              	.LBB600:
 941:sieve_extend.c ****         counter_t prime = searchBitFalse(bitarray, startprime);
 12370              		.loc 1 941 9 is_stmt 1 view .LVU4218
 12371              	.LBB601:
 12372              	.LBB602:
 12373              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12374              		.loc 1 125 11 is_stmt 0 view .LVU4219
 12375 4740 488B7C24 		mov	rdi, QWORD PTR 64[rsp]	# prephitmp_505, %sfp
 12375      40
 12376 4745 4C39E2   		cmp	rdx, r12	# _7, block_stop
 12377 4748 4C8B6C24 		mov	r13, QWORD PTR 48[rsp]	# prephitmp_502, %sfp
 12377      30
 12378 474d 4C8B4424 		mov	r8, QWORD PTR 72[rsp]	# index, %sfp
 12378      48
 12379 4752 4C0F46E2 		cmovbe	r12, rdx	# _7,, block_stop
 12380              	.LVL695:
 125:sieve_extend.c ****     return index;
 12381              		.loc 1 125 11 view .LVU4220
 12382 4756 4C896424 		mov	QWORD PTR 8[rsp], r12	# %sfp, block_stop
 12382      08
 12383              	.LVL696:
 125:sieve_extend.c ****     return index;
 12384              		.loc 1 125 11 view .LVU4221
 12385              	.LBE602:
 12386              	.LBE601:
 942:sieve_extend.c ****         sieve_block_stripe(bitarray, block_start, block_stop, prime);
 12387              		.loc 1 942 9 is_stmt 1 view .LVU4222
 12388              	.LBB604:
 12389              	.LBI601:
 124:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 12390              		.loc 1 124 25 view .LVU4223
 12391              	.LBB603:
 125:sieve_extend.c ****     return index;
 12392              		.loc 1 125 5 view .LVU4224
 125:sieve_extend.c ****     return index;
 12393              		.loc 1 125 11 view .LVU4225
 12394 475b 4C852F   		test	QWORD PTR [rdi], r13	# MEM[(uint64_t *)prephitmp_505], prephitmp_502
 12395 475e 0F84BC00 		je	.L919	#,
 12395      0000
 12396              	.LVL697:
 12397              	.L920:
 125:sieve_extend.c ****     return index;
 12398              		.loc 1 125 58 view .LVU4226
 12399              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
GAS LISTING /tmp/ccNeV1of.s 			page 339


 125:sieve_extend.c ****     return index;
 12400              		.loc 1 125 63 is_stmt 0 view .LVU4227
 12401 4764 4D8D4801 		lea	r9, 1[r8]	# tmp393,
 12402              	.LVL698:
 12403              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12404              		.loc 1 125 21 view .LVU4228
 12405 4768 4D89CB   		mov	r11, r9	# tmp330, index
 12406              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12407              		.loc 1 125 63 view .LVU4229
 12408 476b 4D89C8   		mov	r8, r9	# index, tmp393
 125:sieve_extend.c ****     return index;
 12409              		.loc 1 125 11 is_stmt 1 view .LVU4230
 12410              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12411              		.loc 1 125 21 is_stmt 0 view .LVU4231
 12412 476e 49C1EB06 		shr	r11, 6	# tmp330,
 12413              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12414              		.loc 1 125 12 view .LVU4232
 12415 4772 4B8B04DF 		mov	rax, QWORD PTR [r15+r11*8]	# *_32, *_32
 12416              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12417              		.loc 1 125 11 view .LVU4233
 12418 4776 4C0FA3C8 		bt	rax, r9	# *_32, index
 12419 477a 0F83A000 		jnc	.L919	#,
 12419      0000
 125:sieve_extend.c ****     return index;
 12420              		.loc 1 125 58 is_stmt 1 view .LVU4234
 12421              	.LVL699:
 12422              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12423              		.loc 1 125 63 is_stmt 0 view .LVU4235
 12424 4780 4983C001 		add	r8, 1	# index,
 12425              	.LVL700:
 125:sieve_extend.c ****     return index;
 12426              		.loc 1 125 11 is_stmt 1 view .LVU4236
 12427              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12428              		.loc 1 125 21 is_stmt 0 view .LVU4237
 12429 4784 4D89C4   		mov	r12, r8	# tmp431, index
 12430 4787 49C1EC06 		shr	r12, 6	# tmp431,
 12431              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12432              		.loc 1 125 12 view .LVU4238
 12433 478b 4B8B0CE7 		mov	rcx, QWORD PTR [r15+r12*8]	# *_32, *_32
 12434              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12435              		.loc 1 125 11 view .LVU4239
 12436 478f 4C0FA3C1 		bt	rcx, r8	# *_32, index
 12437 4793 0F838700 		jnc	.L919	#,
 12437      0000
 125:sieve_extend.c ****     return index;
 12438              		.loc 1 125 58 is_stmt 1 view .LVU4240
 12439              	.LVL701:
 12440              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
GAS LISTING /tmp/ccNeV1of.s 			page 340


 125:sieve_extend.c ****     return index;
 12441              		.loc 1 125 63 is_stmt 0 view .LVU4241
 12442 4799 4D8D4102 		lea	r8, 2[r9]	# index,
 12443              	.LVL702:
 125:sieve_extend.c ****     return index;
 12444              		.loc 1 125 11 is_stmt 1 view .LVU4242
 12445              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12446              		.loc 1 125 21 is_stmt 0 view .LVU4243
 12447 479d 4C89C3   		mov	rbx, r8	# tmp435, index
 12448 47a0 48C1EB06 		shr	rbx, 6	# tmp435,
 12449              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12450              		.loc 1 125 12 view .LVU4244
 12451 47a4 498B2CDF 		mov	rbp, QWORD PTR [r15+rbx*8]	# *_32, *_32
 12452              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12453              		.loc 1 125 11 view .LVU4245
 12454 47a8 4C0FA3C5 		bt	rbp, r8	# *_32, index
 12455 47ac 7372     		jnc	.L919	#,
 125:sieve_extend.c ****     return index;
 12456              		.loc 1 125 58 is_stmt 1 view .LVU4246
 12457              	.LVL703:
 12458              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12459              		.loc 1 125 63 is_stmt 0 view .LVU4247
 12460 47ae 4D8D4103 		lea	r8, 3[r9]	# index,
 12461              	.LVL704:
 125:sieve_extend.c ****     return index;
 12462              		.loc 1 125 11 is_stmt 1 view .LVU4248
 12463              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12464              		.loc 1 125 21 is_stmt 0 view .LVU4249
 12465 47b2 4C89C6   		mov	rsi, r8	# tmp439, index
 12466 47b5 48C1EE06 		shr	rsi, 6	# tmp439,
 12467              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12468              		.loc 1 125 12 view .LVU4250
 12469 47b9 4D8B14F7 		mov	r10, QWORD PTR [r15+rsi*8]	# *_32, *_32
 12470              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12471              		.loc 1 125 11 view .LVU4251
 12472 47bd 4D0FA3C2 		bt	r10, r8	# *_32, index
 12473 47c1 735D     		jnc	.L919	#,
 125:sieve_extend.c ****     return index;
 12474              		.loc 1 125 58 is_stmt 1 view .LVU4252
 12475              	.LVL705:
 12476              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12477              		.loc 1 125 63 is_stmt 0 view .LVU4253
 12478 47c3 4D8D4104 		lea	r8, 4[r9]	# index,
 12479              	.LVL706:
 125:sieve_extend.c ****     return index;
 12480              		.loc 1 125 11 is_stmt 1 view .LVU4254
 12481              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12482              		.loc 1 125 21 is_stmt 0 view .LVU4255
GAS LISTING /tmp/ccNeV1of.s 			page 341


 12483 47c7 4C89C7   		mov	rdi, r8	# tmp443, index
 12484 47ca 48C1EF06 		shr	rdi, 6	# tmp443,
 12485              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12486              		.loc 1 125 12 view .LVU4256
 12487 47ce 4D8B2CFF 		mov	r13, QWORD PTR [r15+rdi*8]	# *_32, *_32
 12488              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12489              		.loc 1 125 11 view .LVU4257
 12490 47d2 4D0FA3C5 		bt	r13, r8	# *_32, index
 12491 47d6 7348     		jnc	.L919	#,
 125:sieve_extend.c ****     return index;
 12492              		.loc 1 125 58 is_stmt 1 view .LVU4258
 12493              	.LVL707:
 12494              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12495              		.loc 1 125 63 is_stmt 0 view .LVU4259
 12496 47d8 4D8D4105 		lea	r8, 5[r9]	# index,
 12497              	.LVL708:
 125:sieve_extend.c ****     return index;
 12498              		.loc 1 125 11 is_stmt 1 view .LVU4260
 12499              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12500              		.loc 1 125 21 is_stmt 0 view .LVU4261
 12501 47dc 4D89C3   		mov	r11, r8	# tmp447, index
 12502 47df 49C1EB06 		shr	r11, 6	# tmp447,
 12503              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12504              		.loc 1 125 12 view .LVU4262
 12505 47e3 4B8B04DF 		mov	rax, QWORD PTR [r15+r11*8]	# *_32, *_32
 12506              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12507              		.loc 1 125 11 view .LVU4263
 12508 47e7 4C0FA3C0 		bt	rax, r8	# *_32, index
 12509 47eb 7333     		jnc	.L919	#,
 125:sieve_extend.c ****     return index;
 12510              		.loc 1 125 58 is_stmt 1 view .LVU4264
 12511              	.LVL709:
 12512              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12513              		.loc 1 125 63 is_stmt 0 view .LVU4265
 12514 47ed 4D8D4106 		lea	r8, 6[r9]	# index,
 12515              	.LVL710:
 125:sieve_extend.c ****     return index;
 12516              		.loc 1 125 11 is_stmt 1 view .LVU4266
 12517              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12518              		.loc 1 125 21 is_stmt 0 view .LVU4267
 12519 47f1 4D89C4   		mov	r12, r8	# tmp451, index
 12520 47f4 49C1EC06 		shr	r12, 6	# tmp451,
 12521              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12522              		.loc 1 125 12 view .LVU4268
 12523 47f8 4B8B0CE7 		mov	rcx, QWORD PTR [r15+r12*8]	# *_32, *_32
 12524              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12525              		.loc 1 125 11 view .LVU4269
GAS LISTING /tmp/ccNeV1of.s 			page 342


 12526 47fc 4C0FA3C1 		bt	rcx, r8	# *_32, index
 12527 4800 731E     		jnc	.L919	#,
 125:sieve_extend.c ****     return index;
 12528              		.loc 1 125 58 is_stmt 1 view .LVU4270
 12529              	.LVL711:
 12530              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12531              		.loc 1 125 63 is_stmt 0 view .LVU4271
 12532 4802 4D8D4107 		lea	r8, 7[r9]	# index,
 12533              	.LVL712:
 125:sieve_extend.c ****     return index;
 12534              		.loc 1 125 11 is_stmt 1 view .LVU4272
 12535              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12536              		.loc 1 125 21 is_stmt 0 view .LVU4273
 12537 4806 4D89C1   		mov	r9, r8	# tmp455, index
 12538 4809 49C1E906 		shr	r9, 6	# tmp455,
 12539              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12540              		.loc 1 125 12 view .LVU4274
 12541 480d 4B8B1CCF 		mov	rbx, QWORD PTR [r15+r9*8]	# *_32, *_32
 12542              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 12543              		.loc 1 125 11 view .LVU4275
 12544 4811 4C0FA3C3 		bt	rbx, r8	# *_32, index
 12545 4815 0F8249FF 		jc	.L920	#,
 12545      FFFF
 12546              	.LVL713:
 12547 481b 0F1F4400 		.p2align 4
 12547      00
 12548              		.p2align 3
 12549              	.L919:
 126:sieve_extend.c **** }
 12550              		.loc 1 126 5 is_stmt 1 view .LVU4276
 126:sieve_extend.c **** }
 12551              		.loc 1 126 5 is_stmt 0 view .LVU4277
 12552              	.LBE603:
 12553              	.LBE604:
 943:sieve_extend.c ****     } 
 12554              		.loc 1 943 9 is_stmt 1 view .LVU4278
 12555              	.LBB605:
 12556              	.LBI605:
 853:sieve_extend.c ****     counter_t prime = prime_start;
 12557              		.loc 1 853 13 view .LVU4279
 12558              	.LBB606:
 854:sieve_extend.c ****     counter_t start = 0;
 12559              		.loc 1 854 5 view .LVU4280
 855:sieve_extend.c ****     counter_t step  = prime * 2 + 1;
 12560              		.loc 1 855 5 view .LVU4281
 856:sieve_extend.c **** 
 12561              		.loc 1 856 5 view .LVU4282
 12562              	# sieve_extend.c:856:     counter_t step  = prime * 2 + 1;
 856:sieve_extend.c **** 
 12563              		.loc 1 856 15 is_stmt 0 view .LVU4283
 12564 4820 4F8D5400 		lea	r10, 1[r8+r8]	# step,
 12564      01
 12565              	.LVL714:
GAS LISTING /tmp/ccNeV1of.s 			page 343


 858:sieve_extend.c ****     
 12566              		.loc 1 858 5 is_stmt 1 view .LVU4284
 860:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 12567              		.loc 1 860 5 view .LVU4285
 860:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 12568              		.loc 1 860 11 view .LVU4286
 12569              	# sieve_extend.c:860:     while (prime*step <= block_stop) {
 860:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 12570              		.loc 1 860 17 is_stmt 0 view .LVU4287
 12571 4825 4C89C5   		mov	rbp, r8	# tmp336, index
 12572 4828 490FAFEA 		imul	rbp, r10	# tmp336, step
 12573              	# sieve_extend.c:860:     while (prime*step <= block_stop) {
 860:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 12574              		.loc 1 860 11 view .LVU4288
 12575 482c 48396C24 		cmp	QWORD PTR 8[rsp], rbp	# %sfp, tmp336
 12575      08
 12576 4831 0F829D02 		jb	.L939	#,
 12576      0000
 12577              	.LBB607:
 12578              	.LBB608:
 12579              	.LBB609:
 12580              	.LBB610:
 12581              	.LBB611:
 12582              	# sieve_extend.c:177:    const counter_t range_stop_word = wordindex(range_stop);
 177:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 12583              		.loc 1 177 20 view .LVU4289
 12584 4837 488B5424 		mov	rdx, QWORD PTR 8[rsp]	# block_stop, %sfp
 12584      08
 12585              	# sieve_extend.c:203:       *index_ptr |= (mask & chopmask(range_stop));
 203:sieve_extend.c ****    }
 12586              		.loc 1 203 29 view .LVU4290
 12587 483c 48C7C7FF 		mov	rdi, -1	# tmp671,
 12587      FFFFFF
 12588 4843 4C897424 		mov	QWORD PTR 24[rsp], r14	# %sfp, block_start
 12588      18
 12589              	# sieve_extend.c:177:    const counter_t range_stop_word = wordindex(range_stop);
 177:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 12590              		.loc 1 177 20 view .LVU4291
 12591 4848 4889D6   		mov	rsi, rdx	# range_stop_word, block_stop
 12592              	# sieve_extend.c:203:       *index_ptr |= (mask & chopmask(range_stop));
 203:sieve_extend.c ****    }
 12593              		.loc 1 203 29 view .LVU4292
 12594 484b F7D2     		not	edx	# tmp338
 12595              	# sieve_extend.c:177:    const counter_t range_stop_word = wordindex(range_stop);
 177:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 12596              		.loc 1 177 20 view .LVU4293
 12597 484d 48C1EE06 		shr	rsi, 6	# range_stop_word,
 12598              	# sieve_extend.c:203:       *index_ptr |= (mask & chopmask(range_stop));
 203:sieve_extend.c ****    }
 12599              		.loc 1 203 29 view .LVU4294
 12600 4851 C462EBF7 		shrx	r13, rdi, rdx	# _264, tmp671, tmp338
 12600      EF
 12601              	# sieve_extend.c:177:    const counter_t range_stop_word = wordindex(range_stop);
 177:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 12602              		.loc 1 177 20 view .LVU4295
 12603 4856 48897424 		mov	QWORD PTR 32[rsp], rsi	# %sfp, range_stop_word
 12603      20
GAS LISTING /tmp/ccNeV1of.s 			page 344


 12604              	# sieve_extend.c:196:    register const bitword_t* __restrict range_stop_ptr = &bitarray[(range_sto
 196:sieve_extend.c ****    while likely(index_ptr < range_stop_ptr) {
 12605              		.loc 1 196 41 view .LVU4296
 12606 485b 498D1CF7 		lea	rbx, [r15+rsi*8]	# range_stop_ptr,
 12607              	# sieve_extend.c:203:       *index_ptr |= (mask & chopmask(range_stop));
 203:sieve_extend.c ****    }
 12608              		.loc 1 203 29 view .LVU4297
 12609 485f 4C896C24 		mov	QWORD PTR 16[rsp], r13	# %sfp, _264
 12609      10
 12610              	.LVL715:
 12611 4864 66662E0F 		.p2align 4
 12611      1F840000 
 12611      00000090 
 12612              		.p2align 3
 12613              	.L938:
 203:sieve_extend.c ****    }
 12614              		.loc 1 203 29 view .LVU4298
 12615              	.LBE611:
 12616              	.LBE610:
 12617              	.LBE609:
 12618              	.LBE608:
 12619              	.LBE607:
 861:sieve_extend.c ****             start = block_start + prime + prime - ((block_start + prime) % step);
 12620              		.loc 1 861 9 is_stmt 1 view .LVU4299
 12621              	# sieve_extend.c:861:         if likely(block_start >= (prime + 1)) 
 861:sieve_extend.c ****             start = block_start + prime + prime - ((block_start + prime) % step);
 12622              		.loc 1 861 12 is_stmt 0 view .LVU4300
 12623 4870 488B4424 		mov	rax, QWORD PTR 24[rsp]	# block_start, %sfp
 12623      18
 12624 4875 498D6801 		lea	rbp, 1[r8]	# _158,
 12625 4879 4839E8   		cmp	rax, rbp	# block_start, _158
 12626 487c 0F82B603 		jb	.L924	#,
 12626      0000
 862:sieve_extend.c ****         else 
 12627              		.loc 1 862 13 is_stmt 1 view .LVU4301
 12628              	# sieve_extend.c:862:             start = block_start + prime + prime - ((block_start + prime) % st
 862:sieve_extend.c ****         else 
 12629              		.loc 1 862 33 is_stmt 0 view .LVU4302
 12630 4882 4C01C0   		add	rax, r8	# _162, index
 12631              	# sieve_extend.c:862:             start = block_start + prime + prime - ((block_start + prime) % st
 862:sieve_extend.c ****         else 
 12632              		.loc 1 862 74 view .LVU4303
 12633 4885 31D2     		xor	edx, edx	# tmp343
 12634              	# sieve_extend.c:862:             start = block_start + prime + prime - ((block_start + prime) % st
 862:sieve_extend.c ****         else 
 12635              		.loc 1 862 41 view .LVU4304
 12636 4887 4A8D3400 		lea	rsi, [rax+r8]	# tmp341,
 12637              	# sieve_extend.c:862:             start = block_start + prime + prime - ((block_start + prime) % st
 862:sieve_extend.c ****         else 
 12638              		.loc 1 862 74 view .LVU4305
 12639 488b 49F7F2   		div	r10	# step
 12640              	# sieve_extend.c:862:             start = block_start + prime + prime - ((block_start + prime) % st
 862:sieve_extend.c ****         else 
 12641              		.loc 1 862 19 view .LVU4306
 12642 488e 4829D6   		sub	rsi, rdx	# index, tmp343
 12643              	.LVL716:
 12644              	.L925:
GAS LISTING /tmp/ccNeV1of.s 			page 345


 866:sieve_extend.c ****             setBitsTrue_largeRange_vector(bitarray, start, step, block_stop);
 12645              		.loc 1 866 9 is_stmt 1 view .LVU4307
 12646 4891 4989EB   		mov	r11, rbp	# tmp346, _158
 12647 4894 49C1EB06 		shr	r11, 6	# tmp346,
 12648 4898 49C1E303 		sal	r11, 3	# _527,
 12649              	# sieve_extend.c:866:         if (step < VECTORSTEP_FASTER) {
 866:sieve_extend.c ****             setBitsTrue_largeRange_vector(bitarray, start, step, block_stop);
 12650              		.loc 1 866 12 is_stmt 0 view .LVU4308
 12651 489c 4C391500 		cmp	QWORD PTR global_VECTORSTEP_FASTER[rip], r10	# global_VECTORSTEP_FASTER, step
 12651      000000
 12652 48a3 4F8D241F 		lea	r12, [r15+r11]	# _528,
 12653 48a7 0F879302 		ja	.L1110	#,
 12653      0000
 871:sieve_extend.c ****             prime = searchBitFalse_longRange(bitarray, prime+1 );
 12654              		.loc 1 871 13 is_stmt 1 view .LVU4309
 12655              	.LVL717:
 12656              	.LBB622:
 12657              	.LBI607:
 394:sieve_extend.c ****     debug printf("Setting bits step %ju in %ju bit range (%ju-%ju) using largerange (%ju occurances
 12658              		.loc 1 394 20 view .LVU4310
 12659              	.LBB620:
 395:sieve_extend.c ****     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * step;
 12660              		.loc 1 395 5 view .LVU4311
 396:sieve_extend.c **** 
 12661              		.loc 1 396 5 view .LVU4312
 12662              	# sieve_extend.c:396:     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * st
 396:sieve_extend.c **** 
 12663              		.loc 1 396 74 is_stmt 0 view .LVU4313
 12664 48ad 4D89D5   		mov	r13, r10	# tmp356, step
 12665 48b0 49C1E506 		sal	r13, 6	# tmp356,
 12666              	# sieve_extend.c:396:     const counter_t range_stop_unique =  range_start + WORD_SIZE_counter * st
 396:sieve_extend.c **** 
 12667              		.loc 1 396 21 view .LVU4314
 12668 48b4 4901F5   		add	r13, rsi	# range_stop_unique, index
 12669              	.LVL718:
 12670              	.LBB618:
 400:sieve_extend.c ****         #if __APPLE__
 12671              		.loc 1 400 10 is_stmt 1 view .LVU4315
 400:sieve_extend.c ****         #if __APPLE__
 12672              		.loc 1 400 50 view .LVU4316
 12673              	# sieve_extend.c:400:     for (register counter_t index = range_start; index < range_stop_unique; i
 400:sieve_extend.c ****         #if __APPLE__
 12674              		.loc 1 400 5 is_stmt 0 view .LVU4317
 12675 48b7 4C39EE   		cmp	rsi, r13	# index, range_stop_unique
 12676 48ba 0F83C501 		jnb	.L937	#,
 12676      0000
 12677              	.LBB615:
 12678              	.LBB612:
 12679              	# sieve_extend.c:179:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 179:sieve_extend.c **** 
 12680              		.loc 1 179 133 view .LVU4318
 12681 48c0 4C8B7424 		mov	r14, QWORD PTR 32[rsp]	# range_stop_word, %sfp
 12681      20
 12682              	# sieve_extend.c:179:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 179:sieve_extend.c **** 
 12683              		.loc 1 179 110 view .LVU4319
 12684 48c5 4F8D0492 		lea	r8, [r10+r10*4]	# tmp365,
GAS LISTING /tmp/ccNeV1of.s 			page 346


 12685              	# sieve_extend.c:185:        index_ptr+=step;
 185:sieve_extend.c ****        *index_ptr |= mask;
 12686              		.loc 1 185 17 view .LVU4320
 12687 48c9 4A8D14D5 		lea	rdx, 0[0+r10*8]	# _232,
 12687      00000000 
 12688              	# sieve_extend.c:179:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 179:sieve_extend.c **** 
 12689              		.loc 1 179 133 view .LVU4321
 12690 48d1 4C89F1   		mov	rcx, r14	# tmp367, range_stop_word
 12691 48d4 4C29C1   		sub	rcx, r8	# tmp367, tmp365
 12692              	# sieve_extend.c:179:    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(
 179:sieve_extend.c **** 
 12693              		.loc 1 179 53 view .LVU4322
 12694 48d7 4D39C6   		cmp	r14, r8	# range_stop_word, tmp365
 12695 48da 4D8D0CCF 		lea	r9, [r15+rcx*8]	# tmp369,
 12696 48de 4D89D6   		mov	r14, r10	# _555, step
 12697 48e1 4D0F46CF 		cmovbe	r9, r15	# _94,, fast_loop_ptr
 12698 48e5 49C1E003 		sal	r8, 3	# tmp373,
 12699 48e9 49C1E604 		sal	r14, 4	# _555,
 12700              	.LVL719:
 12701 48ed 0F1F00   		.p2align 4
 12702              		.p2align 3
 12703              	.L936:
 179:sieve_extend.c **** 
 12704              		.loc 1 179 53 view .LVU4323
 12705              	.LBE612:
 12706              	.LBE615:
 404:sieve_extend.c ****         #endif
 12707              		.loc 1 404 13 is_stmt 1 view .LVU4324
 12708 48f0 4889F0   		mov	rax, rsi	# tmp376, index
 12709 48f3 BF010000 		mov	edi, 1	# tmp681,
 12709      00
 12710 48f8 48C1E806 		shr	rax, 6	# tmp376,
 12711 48fc C4E2C9F7 		shlx	rcx, rdi, rsi	# _217, tmp681, index
 12711      CF
 12712              	.LVL720:
 12713              	.LBB616:
 12714              	.LBI610:
 176:sieve_extend.c ****    const counter_t range_stop_word = wordindex(range_stop);
 12715              		.loc 1 176 20 view .LVU4325
 12716              	.LBB613:
 177:sieve_extend.c ****    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(&bitarray[index_word],
 12717              		.loc 1 177 4 view .LVU4326
 178:sieve_extend.c ****    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_stop
 12718              		.loc 1 178 4 view .LVU4327
 12719              	# sieve_extend.c:178:    register bitword_t* __restrict index_ptr      =  __builtin_assume_aligned(
 178:sieve_extend.c ****    register bitword_t* __restrict fast_loop_ptr  =  __builtin_assume_aligned(&bitarray[((range_stop
 12720              		.loc 1 178 78 is_stmt 0 view .LVU4328
 12721 4901 498D04C7 		lea	rax, [r15+rax*8]	# index_ptr,
 12722              	.LVL721:
 179:sieve_extend.c **** 
 12723              		.loc 1 179 4 is_stmt 1 view .LVU4329
 183:sieve_extend.c ****        *index_ptr |= mask;
 12724              		.loc 1 183 10 view .LVU4330
 12725 4905 4C39C8   		cmp	rax, r9	# index_ptr, fast_loop_ptr
 12726 4908 0F830201 		jnb	.L931	#,
 12726      0000
GAS LISTING /tmp/ccNeV1of.s 			page 347


 183:sieve_extend.c ****        *index_ptr |= mask;
 12727              		.loc 1 183 10 is_stmt 0 view .LVU4331
 12728 490e 4A8D3C30 		lea	rdi, [rax+r14]	# ivtmp.584,
 12729              	.L932:
 184:sieve_extend.c ****        index_ptr+=step;
 12730              		.loc 1 184 8 is_stmt 1 view .LVU4332
 12731              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 12732              		.loc 1 184 19 is_stmt 0 view .LVU4333
 12733 4912 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_325, offset: 0B], _217
 185:sieve_extend.c ****        *index_ptr |= mask;
 12734              		.loc 1 185 8 is_stmt 1 view .LVU4334
 12735              	.LVL722:
 186:sieve_extend.c ****        index_ptr+=step;
 12736              		.loc 1 186 8 view .LVU4335
 12737              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 12738              		.loc 1 186 19 is_stmt 0 view .LVU4336
 12739 4915 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_325, index: _232, offset: 0B], _217
 187:sieve_extend.c ****        *index_ptr |= mask;
 12740              		.loc 1 187 8 is_stmt 1 view .LVU4337
 12741              	.LVL723:
 188:sieve_extend.c ****        index_ptr+=step;
 12742              		.loc 1 188 8 view .LVU4338
 12743              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 12744              		.loc 1 188 19 is_stmt 0 view .LVU4339
 12745 4919 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _549, offset: 0B], _217
 189:sieve_extend.c ****        *index_ptr |= mask;
 12746              		.loc 1 189 8 is_stmt 1 view .LVU4340
 12747              	.LVL724:
 190:sieve_extend.c ****        index_ptr+=step;
 12748              		.loc 1 190 8 view .LVU4341
 12749              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 12750              		.loc 1 190 19 is_stmt 0 view .LVU4342
 12751 491c 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _549, index: _232, offset: 0B], _217
 191:sieve_extend.c ****        *index_ptr |= mask;
 12752              		.loc 1 191 8 is_stmt 1 view .LVU4343
 12753              	.LVL725:
 192:sieve_extend.c ****        index_ptr+=step;
 12754              		.loc 1 192 8 view .LVU4344
 12755 4920 4C01C7   		add	rdi, r8	# ivtmp.584, tmp373
 12756              	# sieve_extend.c:192:        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 12757              		.loc 1 192 19 is_stmt 0 view .LVU4345
 12758 4923 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_325, index: _232, step: 4, offset: 0B], _217
 193:sieve_extend.c ****    }
 12759              		.loc 1 193 8 is_stmt 1 view .LVU4346
 12760 4927 4C01C0   		add	rax, r8	# index_ptr, tmp373
 12761              	.LVL726:
 183:sieve_extend.c ****        *index_ptr |= mask;
 12762              		.loc 1 183 10 view .LVU4347
 12763 492a 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 12764 492d 0F86DD00 		jbe	.L931	#,
 12764      0000
 184:sieve_extend.c ****        index_ptr+=step;
GAS LISTING /tmp/ccNeV1of.s 			page 348


 12765              		.loc 1 184 8 view .LVU4348
 12766              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 12767              		.loc 1 184 19 is_stmt 0 view .LVU4349
 12768 4933 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_325, offset: 0B], _217
 185:sieve_extend.c ****        *index_ptr |= mask;
 12769              		.loc 1 185 8 is_stmt 1 view .LVU4350
 12770              	.LVL727:
 186:sieve_extend.c ****        index_ptr+=step;
 12771              		.loc 1 186 8 view .LVU4351
 12772              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 12773              		.loc 1 186 19 is_stmt 0 view .LVU4352
 12774 4936 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_325, index: _232, offset: 0B], _217
 187:sieve_extend.c ****        *index_ptr |= mask;
 12775              		.loc 1 187 8 is_stmt 1 view .LVU4353
 12776              	.LVL728:
 188:sieve_extend.c ****        index_ptr+=step;
 12777              		.loc 1 188 8 view .LVU4354
 12778              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 12779              		.loc 1 188 19 is_stmt 0 view .LVU4355
 12780 493a 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _549, offset: 0B], _217
 189:sieve_extend.c ****        *index_ptr |= mask;
 12781              		.loc 1 189 8 is_stmt 1 view .LVU4356
 12782              	.LVL729:
 190:sieve_extend.c ****        index_ptr+=step;
 12783              		.loc 1 190 8 view .LVU4357
 12784              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 12785              		.loc 1 190 19 is_stmt 0 view .LVU4358
 12786 493d 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _549, index: _232, offset: 0B], _217
 191:sieve_extend.c ****        *index_ptr |= mask;
 12787              		.loc 1 191 8 is_stmt 1 view .LVU4359
 12788              	.LVL730:
 192:sieve_extend.c ****        index_ptr+=step;
 12789              		.loc 1 192 8 view .LVU4360
 12790 4941 4C01C7   		add	rdi, r8	# ivtmp.584, tmp373
 12791              	# sieve_extend.c:192:        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 12792              		.loc 1 192 19 is_stmt 0 view .LVU4361
 12793 4944 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_325, index: _232, step: 4, offset: 0B], _217
 193:sieve_extend.c ****    }
 12794              		.loc 1 193 8 is_stmt 1 view .LVU4362
 12795 4948 4C01C0   		add	rax, r8	# index_ptr, tmp373
 12796              	.LVL731:
 183:sieve_extend.c ****        *index_ptr |= mask;
 12797              		.loc 1 183 10 view .LVU4363
 12798 494b 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 12799 494e 0F86BC00 		jbe	.L931	#,
 12799      0000
 184:sieve_extend.c ****        index_ptr+=step;
 12800              		.loc 1 184 8 view .LVU4364
 12801              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 12802              		.loc 1 184 19 is_stmt 0 view .LVU4365
 12803 4954 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_325, offset: 0B], _217
GAS LISTING /tmp/ccNeV1of.s 			page 349


 185:sieve_extend.c ****        *index_ptr |= mask;
 12804              		.loc 1 185 8 is_stmt 1 view .LVU4366
 12805              	.LVL732:
 186:sieve_extend.c ****        index_ptr+=step;
 12806              		.loc 1 186 8 view .LVU4367
 12807              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 12808              		.loc 1 186 19 is_stmt 0 view .LVU4368
 12809 4957 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_325, index: _232, offset: 0B], _217
 187:sieve_extend.c ****        *index_ptr |= mask;
 12810              		.loc 1 187 8 is_stmt 1 view .LVU4369
 12811              	.LVL733:
 188:sieve_extend.c ****        index_ptr+=step;
 12812              		.loc 1 188 8 view .LVU4370
 12813              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 12814              		.loc 1 188 19 is_stmt 0 view .LVU4371
 12815 495b 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _549, offset: 0B], _217
 189:sieve_extend.c ****        *index_ptr |= mask;
 12816              		.loc 1 189 8 is_stmt 1 view .LVU4372
 12817              	.LVL734:
 190:sieve_extend.c ****        index_ptr+=step;
 12818              		.loc 1 190 8 view .LVU4373
 12819              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 12820              		.loc 1 190 19 is_stmt 0 view .LVU4374
 12821 495e 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _549, index: _232, offset: 0B], _217
 191:sieve_extend.c ****        *index_ptr |= mask;
 12822              		.loc 1 191 8 is_stmt 1 view .LVU4375
 12823              	.LVL735:
 192:sieve_extend.c ****        index_ptr+=step;
 12824              		.loc 1 192 8 view .LVU4376
 12825 4962 4C01C7   		add	rdi, r8	# ivtmp.584, tmp373
 12826              	# sieve_extend.c:192:        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 12827              		.loc 1 192 19 is_stmt 0 view .LVU4377
 12828 4965 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_325, index: _232, step: 4, offset: 0B], _217
 193:sieve_extend.c ****    }
 12829              		.loc 1 193 8 is_stmt 1 view .LVU4378
 12830 4969 4C01C0   		add	rax, r8	# index_ptr, tmp373
 12831              	.LVL736:
 183:sieve_extend.c ****        *index_ptr |= mask;
 12832              		.loc 1 183 10 view .LVU4379
 12833 496c 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 12834 496f 0F869B00 		jbe	.L931	#,
 12834      0000
 184:sieve_extend.c ****        index_ptr+=step;
 12835              		.loc 1 184 8 view .LVU4380
 12836              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 12837              		.loc 1 184 19 is_stmt 0 view .LVU4381
 12838 4975 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_325, offset: 0B], _217
 185:sieve_extend.c ****        *index_ptr |= mask;
 12839              		.loc 1 185 8 is_stmt 1 view .LVU4382
 12840              	.LVL737:
 186:sieve_extend.c ****        index_ptr+=step;
 12841              		.loc 1 186 8 view .LVU4383
GAS LISTING /tmp/ccNeV1of.s 			page 350


 12842              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 12843              		.loc 1 186 19 is_stmt 0 view .LVU4384
 12844 4978 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_325, index: _232, offset: 0B], _217
 187:sieve_extend.c ****        *index_ptr |= mask;
 12845              		.loc 1 187 8 is_stmt 1 view .LVU4385
 12846              	.LVL738:
 188:sieve_extend.c ****        index_ptr+=step;
 12847              		.loc 1 188 8 view .LVU4386
 12848              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 12849              		.loc 1 188 19 is_stmt 0 view .LVU4387
 12850 497c 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _549, offset: 0B], _217
 189:sieve_extend.c ****        *index_ptr |= mask;
 12851              		.loc 1 189 8 is_stmt 1 view .LVU4388
 12852              	.LVL739:
 190:sieve_extend.c ****        index_ptr+=step;
 12853              		.loc 1 190 8 view .LVU4389
 12854              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 12855              		.loc 1 190 19 is_stmt 0 view .LVU4390
 12856 497f 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _549, index: _232, offset: 0B], _217
 191:sieve_extend.c ****        *index_ptr |= mask;
 12857              		.loc 1 191 8 is_stmt 1 view .LVU4391
 12858              	.LVL740:
 192:sieve_extend.c ****        index_ptr+=step;
 12859              		.loc 1 192 8 view .LVU4392
 12860 4983 4C01C7   		add	rdi, r8	# ivtmp.584, tmp373
 12861              	# sieve_extend.c:192:        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 12862              		.loc 1 192 19 is_stmt 0 view .LVU4393
 12863 4986 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_325, index: _232, step: 4, offset: 0B], _217
 193:sieve_extend.c ****    }
 12864              		.loc 1 193 8 is_stmt 1 view .LVU4394
 12865 498a 4C01C0   		add	rax, r8	# index_ptr, tmp373
 12866              	.LVL741:
 183:sieve_extend.c ****        *index_ptr |= mask;
 12867              		.loc 1 183 10 view .LVU4395
 12868 498d 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 12869 4990 767E     		jbe	.L931	#,
 184:sieve_extend.c ****        index_ptr+=step;
 12870              		.loc 1 184 8 view .LVU4396
 12871              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 12872              		.loc 1 184 19 is_stmt 0 view .LVU4397
 12873 4992 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_325, offset: 0B], _217
 185:sieve_extend.c ****        *index_ptr |= mask;
 12874              		.loc 1 185 8 is_stmt 1 view .LVU4398
 12875              	.LVL742:
 186:sieve_extend.c ****        index_ptr+=step;
 12876              		.loc 1 186 8 view .LVU4399
 12877              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 12878              		.loc 1 186 19 is_stmt 0 view .LVU4400
 12879 4995 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_325, index: _232, offset: 0B], _217
 187:sieve_extend.c ****        *index_ptr |= mask;
 12880              		.loc 1 187 8 is_stmt 1 view .LVU4401
GAS LISTING /tmp/ccNeV1of.s 			page 351


 12881              	.LVL743:
 188:sieve_extend.c ****        index_ptr+=step;
 12882              		.loc 1 188 8 view .LVU4402
 12883              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 12884              		.loc 1 188 19 is_stmt 0 view .LVU4403
 12885 4999 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _549, offset: 0B], _217
 189:sieve_extend.c ****        *index_ptr |= mask;
 12886              		.loc 1 189 8 is_stmt 1 view .LVU4404
 12887              	.LVL744:
 190:sieve_extend.c ****        index_ptr+=step;
 12888              		.loc 1 190 8 view .LVU4405
 12889              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 12890              		.loc 1 190 19 is_stmt 0 view .LVU4406
 12891 499c 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _549, index: _232, offset: 0B], _217
 191:sieve_extend.c ****        *index_ptr |= mask;
 12892              		.loc 1 191 8 is_stmt 1 view .LVU4407
 12893              	.LVL745:
 192:sieve_extend.c ****        index_ptr+=step;
 12894              		.loc 1 192 8 view .LVU4408
 12895 49a0 4C01C7   		add	rdi, r8	# ivtmp.584, tmp373
 12896              	# sieve_extend.c:192:        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 12897              		.loc 1 192 19 is_stmt 0 view .LVU4409
 12898 49a3 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_325, index: _232, step: 4, offset: 0B], _217
 193:sieve_extend.c ****    }
 12899              		.loc 1 193 8 is_stmt 1 view .LVU4410
 12900 49a7 4C01C0   		add	rax, r8	# index_ptr, tmp373
 12901              	.LVL746:
 183:sieve_extend.c ****        *index_ptr |= mask;
 12902              		.loc 1 183 10 view .LVU4411
 12903 49aa 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 12904 49ad 7661     		jbe	.L931	#,
 184:sieve_extend.c ****        index_ptr+=step;
 12905              		.loc 1 184 8 view .LVU4412
 12906              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 12907              		.loc 1 184 19 is_stmt 0 view .LVU4413
 12908 49af 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_325, offset: 0B], _217
 185:sieve_extend.c ****        *index_ptr |= mask;
 12909              		.loc 1 185 8 is_stmt 1 view .LVU4414
 12910              	.LVL747:
 186:sieve_extend.c ****        index_ptr+=step;
 12911              		.loc 1 186 8 view .LVU4415
 12912              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 12913              		.loc 1 186 19 is_stmt 0 view .LVU4416
 12914 49b2 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_325, index: _232, offset: 0B], _217
 187:sieve_extend.c ****        *index_ptr |= mask;
 12915              		.loc 1 187 8 is_stmt 1 view .LVU4417
 12916              	.LVL748:
 188:sieve_extend.c ****        index_ptr+=step;
 12917              		.loc 1 188 8 view .LVU4418
 12918              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 12919              		.loc 1 188 19 is_stmt 0 view .LVU4419
GAS LISTING /tmp/ccNeV1of.s 			page 352


 12920 49b6 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _549, offset: 0B], _217
 189:sieve_extend.c ****        *index_ptr |= mask;
 12921              		.loc 1 189 8 is_stmt 1 view .LVU4420
 12922              	.LVL749:
 190:sieve_extend.c ****        index_ptr+=step;
 12923              		.loc 1 190 8 view .LVU4421
 12924              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 12925              		.loc 1 190 19 is_stmt 0 view .LVU4422
 12926 49b9 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _549, index: _232, offset: 0B], _217
 191:sieve_extend.c ****        *index_ptr |= mask;
 12927              		.loc 1 191 8 is_stmt 1 view .LVU4423
 12928              	.LVL750:
 192:sieve_extend.c ****        index_ptr+=step;
 12929              		.loc 1 192 8 view .LVU4424
 12930 49bd 4C01C7   		add	rdi, r8	# ivtmp.584, tmp373
 12931              	# sieve_extend.c:192:        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 12932              		.loc 1 192 19 is_stmt 0 view .LVU4425
 12933 49c0 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_325, index: _232, step: 4, offset: 0B], _217
 193:sieve_extend.c ****    }
 12934              		.loc 1 193 8 is_stmt 1 view .LVU4426
 12935 49c4 4C01C0   		add	rax, r8	# index_ptr, tmp373
 12936              	.LVL751:
 183:sieve_extend.c ****        *index_ptr |= mask;
 12937              		.loc 1 183 10 view .LVU4427
 12938 49c7 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 12939 49ca 7644     		jbe	.L931	#,
 184:sieve_extend.c ****        index_ptr+=step;
 12940              		.loc 1 184 8 view .LVU4428
 12941              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 12942              		.loc 1 184 19 is_stmt 0 view .LVU4429
 12943 49cc 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_325, offset: 0B], _217
 185:sieve_extend.c ****        *index_ptr |= mask;
 12944              		.loc 1 185 8 is_stmt 1 view .LVU4430
 12945              	.LVL752:
 186:sieve_extend.c ****        index_ptr+=step;
 12946              		.loc 1 186 8 view .LVU4431
 12947              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 12948              		.loc 1 186 19 is_stmt 0 view .LVU4432
 12949 49cf 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_325, index: _232, offset: 0B], _217
 187:sieve_extend.c ****        *index_ptr |= mask;
 12950              		.loc 1 187 8 is_stmt 1 view .LVU4433
 12951              	.LVL753:
 188:sieve_extend.c ****        index_ptr+=step;
 12952              		.loc 1 188 8 view .LVU4434
 12953              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 12954              		.loc 1 188 19 is_stmt 0 view .LVU4435
 12955 49d3 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _549, offset: 0B], _217
 189:sieve_extend.c ****        *index_ptr |= mask;
 12956              		.loc 1 189 8 is_stmt 1 view .LVU4436
 12957              	.LVL754:
 190:sieve_extend.c ****        index_ptr+=step;
 12958              		.loc 1 190 8 view .LVU4437
GAS LISTING /tmp/ccNeV1of.s 			page 353


 12959              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 12960              		.loc 1 190 19 is_stmt 0 view .LVU4438
 12961 49d6 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _549, index: _232, offset: 0B], _217
 191:sieve_extend.c ****        *index_ptr |= mask;
 12962              		.loc 1 191 8 is_stmt 1 view .LVU4439
 12963              	.LVL755:
 192:sieve_extend.c ****        index_ptr+=step;
 12964              		.loc 1 192 8 view .LVU4440
 12965 49da 4C01C7   		add	rdi, r8	# ivtmp.584, tmp373
 12966              	# sieve_extend.c:192:        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 12967              		.loc 1 192 19 is_stmt 0 view .LVU4441
 12968 49dd 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_325, index: _232, step: 4, offset: 0B], _217
 193:sieve_extend.c ****    }
 12969              		.loc 1 193 8 is_stmt 1 view .LVU4442
 12970 49e1 4C01C0   		add	rax, r8	# index_ptr, tmp373
 12971              	.LVL756:
 183:sieve_extend.c ****        *index_ptr |= mask;
 12972              		.loc 1 183 10 view .LVU4443
 12973 49e4 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 12974 49e7 7627     		jbe	.L931	#,
 184:sieve_extend.c ****        index_ptr+=step;
 12975              		.loc 1 184 8 view .LVU4444
 12976              	# sieve_extend.c:184:        *index_ptr |= mask;
 184:sieve_extend.c ****        index_ptr+=step;
 12977              		.loc 1 184 19 is_stmt 0 view .LVU4445
 12978 49e9 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_325, offset: 0B], _217
 185:sieve_extend.c ****        *index_ptr |= mask;
 12979              		.loc 1 185 8 is_stmt 1 view .LVU4446
 12980              	.LVL757:
 186:sieve_extend.c ****        index_ptr+=step;
 12981              		.loc 1 186 8 view .LVU4447
 12982              	# sieve_extend.c:186:        *index_ptr |= mask;
 186:sieve_extend.c ****        index_ptr+=step;
 12983              		.loc 1 186 19 is_stmt 0 view .LVU4448
 12984 49ec 48090C10 		or	QWORD PTR [rax+rdx], rcx	# MEM[base: index_ptr_325, index: _232, offset: 0B], _217
 187:sieve_extend.c ****        *index_ptr |= mask;
 12985              		.loc 1 187 8 is_stmt 1 view .LVU4449
 12986              	.LVL758:
 188:sieve_extend.c ****        index_ptr+=step;
 12987              		.loc 1 188 8 view .LVU4450
 12988              	# sieve_extend.c:188:        *index_ptr |= mask;
 188:sieve_extend.c ****        index_ptr+=step;
 12989              		.loc 1 188 19 is_stmt 0 view .LVU4451
 12990 49f0 48090F   		or	QWORD PTR [rdi], rcx	# MEM[base: _549, offset: 0B], _217
 189:sieve_extend.c ****        *index_ptr |= mask;
 12991              		.loc 1 189 8 is_stmt 1 view .LVU4452
 12992              	.LVL759:
 190:sieve_extend.c ****        index_ptr+=step;
 12993              		.loc 1 190 8 view .LVU4453
 12994              	# sieve_extend.c:190:        *index_ptr |= mask;
 190:sieve_extend.c ****        index_ptr+=step;
 12995              		.loc 1 190 19 is_stmt 0 view .LVU4454
 12996 49f3 48090C17 		or	QWORD PTR [rdi+rdx], rcx	# MEM[base: _549, index: _232, offset: 0B], _217
 191:sieve_extend.c ****        *index_ptr |= mask;
 12997              		.loc 1 191 8 is_stmt 1 view .LVU4455
GAS LISTING /tmp/ccNeV1of.s 			page 354


 12998              	.LVL760:
 192:sieve_extend.c ****        index_ptr+=step;
 12999              		.loc 1 192 8 view .LVU4456
 13000 49f7 4C01C7   		add	rdi, r8	# ivtmp.584, tmp373
 13001              	# sieve_extend.c:192:        *index_ptr |= mask;
 192:sieve_extend.c ****        index_ptr+=step;
 13002              		.loc 1 192 19 is_stmt 0 view .LVU4457
 13003 49fa 48090C90 		or	QWORD PTR [rax+rdx*4], rcx	# MEM[base: index_ptr_325, index: _232, step: 4, offset: 0B], _217
 193:sieve_extend.c ****    }
 13004              		.loc 1 193 8 is_stmt 1 view .LVU4458
 13005 49fe 4C01C0   		add	rax, r8	# index_ptr, tmp373
 13006              	.LVL761:
 183:sieve_extend.c ****        *index_ptr |= mask;
 13007              		.loc 1 183 10 view .LVU4459
 13008 4a01 4939C1   		cmp	r9, rax	# fast_loop_ptr, index_ptr
 13009 4a04 0F8708FF 		ja	.L932	#,
 13009      FFFF
 13010 4a0a 660F1F44 		.p2align 4
 13010      0000
 13011              		.p2align 3
 13012              	.L931:
 196:sieve_extend.c ****    while likely(index_ptr < range_stop_ptr) {
 13013              		.loc 1 196 4 view .LVU4460
 197:sieve_extend.c ****        *index_ptr |= mask;
 13014              		.loc 1 197 4 view .LVU4461
 197:sieve_extend.c ****        *index_ptr |= mask;
 13015              		.loc 1 197 10 view .LVU4462
 13016 4a10 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 13017 4a13 765B     		jbe	.L933	#,
 13018              	.L934:
 198:sieve_extend.c ****        index_ptr+=step;
 13019              		.loc 1 198 8 view .LVU4463
 13020              	# sieve_extend.c:198:        *index_ptr |= mask;
 198:sieve_extend.c ****        index_ptr+=step;
 13021              		.loc 1 198 19 is_stmt 0 view .LVU4464
 13022 4a15 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_258, offset: 0B], _217
 199:sieve_extend.c ****    }
 13023              		.loc 1 199 8 is_stmt 1 view .LVU4465
 13024              	# sieve_extend.c:199:        index_ptr+=step;
 199:sieve_extend.c ****    }
 13025              		.loc 1 199 17 is_stmt 0 view .LVU4466
 13026 4a18 4801D0   		add	rax, rdx	# index_ptr, _232
 13027              	.LVL762:
 197:sieve_extend.c ****        *index_ptr |= mask;
 13028              		.loc 1 197 10 is_stmt 1 view .LVU4467
 13029 4a1b 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 13030 4a1e 7650     		jbe	.L933	#,
 198:sieve_extend.c ****        index_ptr+=step;
 13031              		.loc 1 198 8 view .LVU4468
 13032              	# sieve_extend.c:198:        *index_ptr |= mask;
 198:sieve_extend.c ****        index_ptr+=step;
 13033              		.loc 1 198 19 is_stmt 0 view .LVU4469
 13034 4a20 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_258, offset: 0B], _217
 199:sieve_extend.c ****    }
 13035              		.loc 1 199 8 is_stmt 1 view .LVU4470
 13036              	# sieve_extend.c:199:        index_ptr+=step;
 199:sieve_extend.c ****    }
GAS LISTING /tmp/ccNeV1of.s 			page 355


 13037              		.loc 1 199 17 is_stmt 0 view .LVU4471
 13038 4a23 4801D0   		add	rax, rdx	# index_ptr, _232
 13039              	.LVL763:
 197:sieve_extend.c ****        *index_ptr |= mask;
 13040              		.loc 1 197 10 is_stmt 1 view .LVU4472
 13041 4a26 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 13042 4a29 7645     		jbe	.L933	#,
 198:sieve_extend.c ****        index_ptr+=step;
 13043              		.loc 1 198 8 view .LVU4473
 13044              	# sieve_extend.c:198:        *index_ptr |= mask;
 198:sieve_extend.c ****        index_ptr+=step;
 13045              		.loc 1 198 19 is_stmt 0 view .LVU4474
 13046 4a2b 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_258, offset: 0B], _217
 199:sieve_extend.c ****    }
 13047              		.loc 1 199 8 is_stmt 1 view .LVU4475
 13048              	# sieve_extend.c:199:        index_ptr+=step;
 199:sieve_extend.c ****    }
 13049              		.loc 1 199 17 is_stmt 0 view .LVU4476
 13050 4a2e 4801D0   		add	rax, rdx	# index_ptr, _232
 13051              	.LVL764:
 197:sieve_extend.c ****        *index_ptr |= mask;
 13052              		.loc 1 197 10 is_stmt 1 view .LVU4477
 13053 4a31 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 13054 4a34 763A     		jbe	.L933	#,
 198:sieve_extend.c ****        index_ptr+=step;
 13055              		.loc 1 198 8 view .LVU4478
 13056              	# sieve_extend.c:198:        *index_ptr |= mask;
 198:sieve_extend.c ****        index_ptr+=step;
 13057              		.loc 1 198 19 is_stmt 0 view .LVU4479
 13058 4a36 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_258, offset: 0B], _217
 199:sieve_extend.c ****    }
 13059              		.loc 1 199 8 is_stmt 1 view .LVU4480
 13060              	# sieve_extend.c:199:        index_ptr+=step;
 199:sieve_extend.c ****    }
 13061              		.loc 1 199 17 is_stmt 0 view .LVU4481
 13062 4a39 4801D0   		add	rax, rdx	# index_ptr, _232
 13063              	.LVL765:
 197:sieve_extend.c ****        *index_ptr |= mask;
 13064              		.loc 1 197 10 is_stmt 1 view .LVU4482
 13065 4a3c 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 13066 4a3f 762F     		jbe	.L933	#,
 198:sieve_extend.c ****        index_ptr+=step;
 13067              		.loc 1 198 8 view .LVU4483
 13068              	# sieve_extend.c:198:        *index_ptr |= mask;
 198:sieve_extend.c ****        index_ptr+=step;
 13069              		.loc 1 198 19 is_stmt 0 view .LVU4484
 13070 4a41 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_258, offset: 0B], _217
 199:sieve_extend.c ****    }
 13071              		.loc 1 199 8 is_stmt 1 view .LVU4485
 13072              	# sieve_extend.c:199:        index_ptr+=step;
 199:sieve_extend.c ****    }
 13073              		.loc 1 199 17 is_stmt 0 view .LVU4486
 13074 4a44 4801D0   		add	rax, rdx	# index_ptr, _232
 13075              	.LVL766:
 197:sieve_extend.c ****        *index_ptr |= mask;
 13076              		.loc 1 197 10 is_stmt 1 view .LVU4487
 13077 4a47 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
GAS LISTING /tmp/ccNeV1of.s 			page 356


 13078 4a4a 7624     		jbe	.L933	#,
 198:sieve_extend.c ****        index_ptr+=step;
 13079              		.loc 1 198 8 view .LVU4488
 13080              	# sieve_extend.c:198:        *index_ptr |= mask;
 198:sieve_extend.c ****        index_ptr+=step;
 13081              		.loc 1 198 19 is_stmt 0 view .LVU4489
 13082 4a4c 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_258, offset: 0B], _217
 199:sieve_extend.c ****    }
 13083              		.loc 1 199 8 is_stmt 1 view .LVU4490
 13084              	# sieve_extend.c:199:        index_ptr+=step;
 199:sieve_extend.c ****    }
 13085              		.loc 1 199 17 is_stmt 0 view .LVU4491
 13086 4a4f 4801D0   		add	rax, rdx	# index_ptr, _232
 13087              	.LVL767:
 197:sieve_extend.c ****        *index_ptr |= mask;
 13088              		.loc 1 197 10 is_stmt 1 view .LVU4492
 13089 4a52 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 13090 4a55 7619     		jbe	.L933	#,
 198:sieve_extend.c ****        index_ptr+=step;
 13091              		.loc 1 198 8 view .LVU4493
 13092              	# sieve_extend.c:198:        *index_ptr |= mask;
 198:sieve_extend.c ****        index_ptr+=step;
 13093              		.loc 1 198 19 is_stmt 0 view .LVU4494
 13094 4a57 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_258, offset: 0B], _217
 199:sieve_extend.c ****    }
 13095              		.loc 1 199 8 is_stmt 1 view .LVU4495
 13096              	# sieve_extend.c:199:        index_ptr+=step;
 199:sieve_extend.c ****    }
 13097              		.loc 1 199 17 is_stmt 0 view .LVU4496
 13098 4a5a 4801D0   		add	rax, rdx	# index_ptr, _232
 13099              	.LVL768:
 197:sieve_extend.c ****        *index_ptr |= mask;
 13100              		.loc 1 197 10 is_stmt 1 view .LVU4497
 13101 4a5d 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 13102 4a60 760E     		jbe	.L933	#,
 198:sieve_extend.c ****        index_ptr+=step;
 13103              		.loc 1 198 8 view .LVU4498
 13104              	# sieve_extend.c:198:        *index_ptr |= mask;
 198:sieve_extend.c ****        index_ptr+=step;
 13105              		.loc 1 198 19 is_stmt 0 view .LVU4499
 13106 4a62 480908   		or	QWORD PTR [rax], rcx	# MEM[base: index_ptr_258, offset: 0B], _217
 199:sieve_extend.c ****    }
 13107              		.loc 1 199 8 is_stmt 1 view .LVU4500
 13108              	# sieve_extend.c:199:        index_ptr+=step;
 199:sieve_extend.c ****    }
 13109              		.loc 1 199 17 is_stmt 0 view .LVU4501
 13110 4a65 4801D0   		add	rax, rdx	# index_ptr, _232
 13111              	.LVL769:
 197:sieve_extend.c ****        *index_ptr |= mask;
 13112              		.loc 1 197 10 is_stmt 1 view .LVU4502
 13113 4a68 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 13114 4a6b 77A8     		ja	.L934	#,
 13115 4a6d 0F1F00   		.p2align 4
 13116              		.p2align 3
 13117              	.L933:
 202:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 13118              		.loc 1 202 4 view .LVU4503
GAS LISTING /tmp/ccNeV1of.s 			page 357


 13119              	# sieve_extend.c:202:    if (index_ptr == range_stop_ptr) { // index_ptr could also end above range
 202:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 13120              		.loc 1 202 7 is_stmt 0 view .LVU4504
 13121 4a70 4839C3   		cmp	rbx, rax	# range_stop_ptr, index_ptr
 13122 4a73 0F84B700 		je	.L1111	#,
 13122      0000
 13123              	.LVL770:
 13124              	.L935:
 202:sieve_extend.c ****       *index_ptr |= (mask & chopmask(range_stop));
 13125              		.loc 1 202 7 view .LVU4505
 13126              	.LBE613:
 13127              	.LBE616:
 400:sieve_extend.c ****         #if __APPLE__
 13128              		.loc 1 400 77 is_stmt 1 view .LVU4506
 13129              	# sieve_extend.c:400:     for (register counter_t index = range_start; index < range_stop_unique; i
 400:sieve_extend.c ****         #if __APPLE__
 13130              		.loc 1 400 83 is_stmt 0 view .LVU4507
 13131 4a79 4C01D6   		add	rsi, r10	# index, step
 13132              	.LVL771:
 400:sieve_extend.c ****         #if __APPLE__
 13133              		.loc 1 400 50 is_stmt 1 view .LVU4508
 13134              	# sieve_extend.c:400:     for (register counter_t index = range_start; index < range_stop_unique; i
 400:sieve_extend.c ****         #if __APPLE__
 13135              		.loc 1 400 5 is_stmt 0 view .LVU4509
 13136 4a7c 4939F5   		cmp	r13, rsi	# range_stop_unique, index
 13137 4a7f 0F876BFE 		ja	.L936	#,
 13137      FFFF
 13138              	.L937:
 13139              	.LVL772:
 400:sieve_extend.c ****         #if __APPLE__
 13140              		.loc 1 400 5 view .LVU4510
 13141              	.LBE618:
 13142              	.LBE620:
 13143              	.LBE622:
 872:sieve_extend.c ****         }
 13144              		.loc 1 872 13 is_stmt 1 view .LVU4511
 13145              	.LBB623:
 13146              	.LBI623:
 130:sieve_extend.c ****     // return searchBitFalse(bitarray, index);
 13147              		.loc 1 130 25 view .LVU4512
 13148              	.LBB624:
 133:sieve_extend.c ****    bitshift_t index_bit  = bitindex_calc(index);
 13149              		.loc 1 133 4 view .LVU4513
 134:sieve_extend.c ****    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[index_word] >> index_bi
 13150              		.loc 1 134 4 view .LVU4514
 13151              	# sieve_extend.c:135:    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[i
 135:sieve_extend.c ****    index += distance;
 13152              		.loc 1 135 89 is_stmt 0 view .LVU4515
 13153 4a85 498B3424 		mov	rsi, QWORD PTR [r12]	# MEM[(uint64_t *)_528], MEM[(uint64_t *)_528]
 13154              	# sieve_extend.c:134:    bitshift_t index_bit  = bitindex_calc(index);
 134:sieve_extend.c ****    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[index_word] >> index_bi
 13155              		.loc 1 134 15 view .LVU4516
 13156 4a89 4989EA   		mov	r10, rbp	# index_bit, _158
 13157              	.LVL773:
 134:sieve_extend.c ****    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[index_word] >> index_bi
 13158              		.loc 1 134 15 view .LVU4517
 13159 4a8c 4183E23F 		and	r10d, 63	# index_bit,
GAS LISTING /tmp/ccNeV1of.s 			page 358


 13160              	.LVL774:
 135:sieve_extend.c ****    index += distance;
 13161              		.loc 1 135 4 is_stmt 1 view .LVU4518
 13162              	# sieve_extend.c:135:    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[i
 135:sieve_extend.c ****    index += distance;
 13163              		.loc 1 135 89 is_stmt 0 view .LVU4519
 13164 4a90 C462ABF7 		shrx	r12, rsi, r10	# tmp358, MEM[(uint64_t *)_528], index_bit
 13164      E6
 13165              	# sieve_extend.c:135:    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[i
 135:sieve_extend.c ****    index += distance;
 13166              		.loc 1 135 66 view .LVU4520
 13167 4a95 49F7D4   		not	r12	# tmp360
 13168              	# sieve_extend.c:135:    register  bitshift_t distance = (bitshift_t) __builtin_ctzll( ~(bitarray[i
 135:sieve_extend.c ****    index += distance;
 13169              		.loc 1 135 25 view .LVU4521
 13170 4a98 F34D0FBC 		tzcnt	r13, r12	# distance, tmp360
 13170      EC
 13171              	.LVL775:
 136:sieve_extend.c ****    distance += index_bit;
 13172              		.loc 1 136 4 is_stmt 1 view .LVU4522
 13173              	# sieve_extend.c:136:    index += distance;
 136:sieve_extend.c ****    distance += index_bit;
 13174              		.loc 1 136 10 is_stmt 0 view .LVU4523
 13175 4a9d 4E8D442D 		lea	r8, 0[rbp+r13]	# index,
 13175      00
 13176              	.LVL776:
 137:sieve_extend.c **** 
 13177              		.loc 1 137 4 is_stmt 1 view .LVU4524
 139:sieve_extend.c ****        index_word++;
 13178              		.loc 1 139 4 view .LVU4525
 139:sieve_extend.c ****        index_word++;
 13179              		.loc 1 139 10 view .LVU4526
 13180              	# sieve_extend.c:137:    distance += index_bit;
 137:sieve_extend.c **** 
 13181              		.loc 1 137 13 is_stmt 0 view .LVU4527
 13182 4aa2 4D01D5   		add	r13, r10	# distance, index_bit
 13183              	.LVL777:
 13184              	# sieve_extend.c:139:    while unlikely(distance == WORD_SIZE_bitshift) { // to prevent a bug from 
 139:sieve_extend.c ****        index_word++;
 13185              		.loc 1 139 10 view .LVU4528
 13186 4aa5 4983FD40 		cmp	r13, 64	# distance,
 13187 4aa9 0F849901 		je	.L1112	#,
 13187      0000
 13188              	.LVL778:
 13189              	.L927:
 139:sieve_extend.c ****        index_word++;
 13190              		.loc 1 139 10 view .LVU4529
 13191              	.LBE624:
 13192              	.LBE623:
 875:sieve_extend.c ****         step  = prime * 2 + 1;
 13193              		.loc 1 875 9 is_stmt 1 view .LVU4530
 876:sieve_extend.c ****     }
 13194              		.loc 1 876 9 view .LVU4531
 13195              	# sieve_extend.c:876:         step  = prime * 2 + 1;
 876:sieve_extend.c ****     }
 13196              		.loc 1 876 15 is_stmt 0 view .LVU4532
 13197 4aaf 4F8D5400 		lea	r10, 1[r8+r8]	# step,
GAS LISTING /tmp/ccNeV1of.s 			page 359


 13197      01
 13198              	.LVL779:
 860:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 13199              		.loc 1 860 11 is_stmt 1 view .LVU4533
 13200              	# sieve_extend.c:860:     while (prime*step <= block_stop) {
 860:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 13201              		.loc 1 860 17 is_stmt 0 view .LVU4534
 13202 4ab4 4C89C6   		mov	rsi, r8	# tmp384, index
 13203 4ab7 490FAFF2 		imul	rsi, r10	# tmp384, step
 13204              	# sieve_extend.c:860:     while (prime*step <= block_stop) {
 860:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 13205              		.loc 1 860 11 view .LVU4535
 13206 4abb 48397424 		cmp	QWORD PTR 8[rsp], rsi	# %sfp, tmp384
 13206      08
 13207 4ac0 0F83AAFD 		jnb	.L938	#,
 13207      FFFF
 13208 4ac6 488B5C24 		mov	rbx, QWORD PTR 40[rsp]	# <retval>, %sfp
 13208      28
 13209 4acb 4C8B7424 		mov	r14, QWORD PTR 24[rsp]	# block_start, %sfp
 13209      18
 13210 4ad0 488B5308 		mov	rdx, QWORD PTR 8[rbx]	# _7, sieve_89->bits
 13211              	.LVL780:
 13212              	.L939:
 860:sieve_extend.c ****         if likely(block_start >= (prime + 1)) 
 13213              		.loc 1 860 11 view .LVU4536
 13214              	.LBE606:
 13215              	.LBE605:
 13216              	.LBE600:
 940:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 13217              		.loc 1 940 91 is_stmt 1 view .LVU4537
 13218              	# sieve_extend.c:940:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 940:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 13219              		.loc 1 940 103 is_stmt 0 view .LVU4538
 13220 4ad4 4C8B4424 		mov	r8, QWORD PTR 56[rsp]	# blocksize, %sfp
 13220      38
 13221              	# sieve_extend.c:940:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 940:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 13222              		.loc 1 940 128 view .LVU4539
 13223 4ad9 4C8B6424 		mov	r12, QWORD PTR 8[rsp]	# block_stop, %sfp
 13223      08
 13224              	# sieve_extend.c:940:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 940:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 13225              		.loc 1 940 103 view .LVU4540
 13226 4ade 4D01C6   		add	r14, r8	# block_start, blocksize
 13227              	.LVL781:
 13228              	# sieve_extend.c:940:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 940:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 13229              		.loc 1 940 128 view .LVU4541
 13230 4ae1 4D01C4   		add	r12, r8	# block_stop, blocksize
 13231              	.LVL782:
 940:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 13232              		.loc 1 940 63 is_stmt 1 view .LVU4542
 13233              	# sieve_extend.c:940:     for (counter_t block_start = 0,  block_stop = blocksize-1;block_start <= 
 940:sieve_extend.c ****         if unlikely(block_stop > sieve->bits) block_stop = sieve->bits;
 13234              		.loc 1 940 5 is_stmt 0 view .LVU4543
 13235 4ae4 4C39F2   		cmp	rdx, r14	# _7, block_start
 13236 4ae7 0F8353FC 		jnb	.L922	#,
GAS LISTING /tmp/ccNeV1of.s 			page 360


 13236      FFFF
 13237              	.LBE599:
 13238              	# sieve_extend.c:947: }
 947:sieve_extend.c **** 
 13239              		.loc 1 947 1 view .LVU4544
 13240 4aed 488B4424 		mov	rax, QWORD PTR 40[rsp]	#, %sfp
 13240      28
 13241 4af2 488D6424 		lea	rsp, 88[rsp]	#,
 13241      58
 13242              		.cfi_remember_state
 13243              		.cfi_def_cfa_offset 56
 13244 4af7 5B       		pop	rbx	#
 13245              		.cfi_def_cfa_offset 48
 13246 4af8 5D       		pop	rbp	#
 13247              		.cfi_def_cfa_offset 40
 13248 4af9 415C     		pop	r12	#
 13249              		.cfi_def_cfa_offset 32
 13250              	.LVL783:
 947:sieve_extend.c **** 
 13251              		.loc 1 947 1 view .LVU4545
 13252 4afb 415D     		pop	r13	#
 13253              		.cfi_def_cfa_offset 24
 13254 4afd 415E     		pop	r14	#
 13255              		.cfi_def_cfa_offset 16
 13256              	.LVL784:
 947:sieve_extend.c **** 
 13257              		.loc 1 947 1 view .LVU4546
 13258 4aff 415F     		pop	r15	#
 13259              		.cfi_def_cfa_offset 8
 13260              	.LVL785:
 947:sieve_extend.c **** 
 13261              		.loc 1 947 1 view .LVU4547
 13262 4b01 C3       		ret	
 13263              	.LVL786:
 13264              	.L903:
 13265              		.cfi_restore_state
 13266              	.LBB635:
 13267              	.LBB583:
 13268              	.LBB576:
 13269              	.LBB570:
 13270              	.LBB568:
 850:sieve_extend.c **** }
 13271              		.loc 1 850 37 is_stmt 1 view .LVU4548
 13272 4b02 E889C6FF 		call	extendSieve_aligned	#
 13272      FF
 13273              	.LVL787:
 850:sieve_extend.c **** }
 13274              		.loc 1 850 37 is_stmt 0 view .LVU4549
 13275 4b07 4C896C24 		mov	QWORD PTR 32[rsp], r13	# %sfp, patternsize_bits
 13275      20
 13276 4b0c E9D7F7FF 		jmp	.L900	#
 13276      FF
 13277              	.LVL788:
 13278              	.L1107:
 848:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
 13279              		.loc 1 848 37 is_stmt 1 view .LVU4550
 13280 4b11 E8FACBFF 		call	extendSieve_shiftleft	#
GAS LISTING /tmp/ccNeV1of.s 			page 361


 13280      FF
 13281              	.LVL789:
 848:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
 13282              		.loc 1 848 37 is_stmt 0 view .LVU4551
 13283 4b16 4C896C24 		mov	QWORD PTR 32[rsp], r13	# %sfp, patternsize_bits
 13283      20
 13284 4b1b E9C8F7FF 		jmp	.L900	#
 13284      FF
 13285              	.LVL790:
 13286              	.L1109:
 848:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
 13287              		.loc 1 848 37 view .LVU4552
 13288              	.LBE568:
 13289              	.LBE570:
 13290              	.LBE576:
 13291              	.LBE583:
 13292              	.LBE635:
 13293              	.LBB636:
 13294              	.LBB593:
 849:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 13295              		.loc 1 849 37 is_stmt 1 view .LVU4553
 13296 4b20 E81BDEFF 		call	extendSieve_shiftright_vector	#
 13296      FF
 13297              	.LVL791:
 849:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 13298              		.loc 1 849 37 is_stmt 0 view .LVU4554
 13299              		.p2align 4,,3
 13300 4b25 E9F2FBFF 		jmp	.L916	#
 13300      FF
 13301              	.LVL792:
 13302 4b2a 660F1F44 		.p2align 4,,7
 13302      0000
 13303              		.p2align 3
 13304              	.L1111:
 849:sieve_extend.c ****     else                            extendSieve_aligned   (bitarray, source_start, size, destinatio
 13305              		.loc 1 849 37 view .LVU4555
 13306              	.LBE593:
 13307              	.LBE636:
 13308              	.LBB637:
 13309              	.LBB634:
 13310              	.LBB633:
 13311              	.LBB632:
 13312              	.LBB626:
 13313              	.LBB621:
 13314              	.LBB619:
 13315              	.LBB617:
 13316              	.LBB614:
 203:sieve_extend.c ****    }
 13317              		.loc 1 203 7 is_stmt 1 view .LVU4556
 13318              	# sieve_extend.c:203:       *index_ptr |= (mask & chopmask(range_stop));
 203:sieve_extend.c ****    }
 13319              		.loc 1 203 27 is_stmt 0 view .LVU4557
 13320 4b30 48234C24 		and	rcx, QWORD PTR 16[rsp]	# tmp378, %sfp
 13320      10
 13321              	.LVL793:
 13322              	# sieve_extend.c:203:       *index_ptr |= (mask & chopmask(range_stop));
 203:sieve_extend.c ****    }
GAS LISTING /tmp/ccNeV1of.s 			page 362


 13323              		.loc 1 203 18 view .LVU4558
 13324 4b35 48090B   		or	QWORD PTR [rbx], rcx	# *index_ptr_267, tmp378
 13325 4b38 E93CFFFF 		jmp	.L935	#
 13325      FF
 13326              	.LVL794:
 13327 4b3d 0F1F00   		.p2align 4,,7
 13328              		.p2align 3
 13329              	.L1110:
 203:sieve_extend.c ****    }
 13330              		.loc 1 203 18 view .LVU4559
 13331              	.LBE614:
 13332              	.LBE617:
 13333              	.LBE619:
 13334              	.LBE621:
 13335              	.LBE626:
 867:sieve_extend.c ****             prime = searchBitFalse(bitarray, prime+1 );
 13336              		.loc 1 867 13 is_stmt 1 view .LVU4560
 13337 4b40 488B4C24 		mov	rcx, QWORD PTR 8[rsp]	#, %sfp
 13337      08
 13338 4b45 4C89D2   		mov	rdx, r10	#, step
 13339 4b48 4C89FF   		mov	rdi, r15	#, _94
 13340 4b4b E890BBFF 		call	setBitsTrue_largeRange_vector	#
 13340      FF
 13341              	.LVL795:
 868:sieve_extend.c ****         }
 13342              		.loc 1 868 13 view .LVU4561
 13343              	.LBB627:
 13344              	.LBI627:
 124:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 13345              		.loc 1 124 25 view .LVU4562
 13346              	.LBB628:
 125:sieve_extend.c ****     return index;
 13347              		.loc 1 125 5 view .LVU4563
 125:sieve_extend.c ****     return index;
 13348              		.loc 1 125 11 view .LVU4564
 13349              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13350              		.loc 1 125 12 is_stmt 0 view .LVU4565
 13351 4b50 498B1424 		mov	rdx, QWORD PTR [r12]	# MEM[(uint64_t *)_528], MEM[(uint64_t *)_528]
 13352              	.LBE628:
 13353              	.LBE627:
 13354              	# sieve_extend.c:861:         if likely(block_start >= (prime + 1)) 
 861:sieve_extend.c ****             start = block_start + prime + prime - ((block_start + prime) % step);
 13355              		.loc 1 861 12 view .LVU4566
 13356 4b54 4989E8   		mov	r8, rbp	# index, _158
 13357              	.LBB630:
 13358              	.LBB629:
 13359              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13360              		.loc 1 125 11 view .LVU4567
 13361 4b57 480FA3EA 		bt	rdx, rbp	# MEM[(uint64_t *)_528], _158
 13362 4b5b 0F834EFF 		jnc	.L927	#,
 13362      FFFF
 13363              	.LVL796:
 13364              	.L928:
 125:sieve_extend.c ****     return index;
 13365              		.loc 1 125 58 is_stmt 1 view .LVU4568
GAS LISTING /tmp/ccNeV1of.s 			page 363


 13366              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13367              		.loc 1 125 63 is_stmt 0 view .LVU4569
 13368 4b61 4D8D4801 		lea	r9, 1[r8]	# tmp392,
 13369              	.LVL797:
 13370              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13371              		.loc 1 125 21 view .LVU4570
 13372 4b65 4D89CE   		mov	r14, r9	# tmp351, index
 13373              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13374              		.loc 1 125 63 view .LVU4571
 13375 4b68 4D89C8   		mov	r8, r9	# index, tmp392
 125:sieve_extend.c ****     return index;
 13376              		.loc 1 125 11 is_stmt 1 view .LVU4572
 13377              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13378              		.loc 1 125 21 is_stmt 0 view .LVU4573
 13379 4b6b 49C1EE06 		shr	r14, 6	# tmp351,
 13380              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13381              		.loc 1 125 12 view .LVU4574
 13382 4b6f 4B8B0CF7 		mov	rcx, QWORD PTR [r15+r14*8]	# *_175, *_175
 13383              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13384              		.loc 1 125 11 view .LVU4575
 13385 4b73 4C0FA3C9 		bt	rcx, r9	# *_175, index
 13386 4b77 0F8332FF 		jnc	.L927	#,
 13386      FFFF
 125:sieve_extend.c ****     return index;
 13387              		.loc 1 125 58 is_stmt 1 view .LVU4576
 13388              	.LVL798:
 13389              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13390              		.loc 1 125 63 is_stmt 0 view .LVU4577
 13391 4b7d 4983C001 		add	r8, 1	# index,
 13392              	.LVL799:
 125:sieve_extend.c ****     return index;
 13393              		.loc 1 125 11 is_stmt 1 view .LVU4578
 13394              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13395              		.loc 1 125 21 is_stmt 0 view .LVU4579
 13396 4b81 4C89C0   		mov	rax, r8	# tmp397, index
 13397 4b84 48C1E806 		shr	rax, 6	# tmp397,
 13398              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13399              		.loc 1 125 12 view .LVU4580
 13400 4b88 498B3CC7 		mov	rdi, QWORD PTR [r15+rax*8]	# *_175, *_175
 13401              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13402              		.loc 1 125 11 view .LVU4581
 13403 4b8c 4C0FA3C7 		bt	rdi, r8	# *_175, index
 13404 4b90 0F8319FF 		jnc	.L927	#,
 13404      FFFF
 125:sieve_extend.c ****     return index;
 13405              		.loc 1 125 58 is_stmt 1 view .LVU4582
 13406              	.LVL800:
GAS LISTING /tmp/ccNeV1of.s 			page 364


 13407              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13408              		.loc 1 125 63 is_stmt 0 view .LVU4583
 13409 4b96 4D8D4102 		lea	r8, 2[r9]	# index,
 13410              	.LVL801:
 125:sieve_extend.c ****     return index;
 13411              		.loc 1 125 11 is_stmt 1 view .LVU4584
 13412              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13413              		.loc 1 125 21 is_stmt 0 view .LVU4585
 13414 4b9a 4D89C2   		mov	r10, r8	# tmp401, index
 13415 4b9d 49C1EA06 		shr	r10, 6	# tmp401,
 13416              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13417              		.loc 1 125 12 view .LVU4586
 13418 4ba1 4B8B34D7 		mov	rsi, QWORD PTR [r15+r10*8]	# *_175, *_175
 13419              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13420              		.loc 1 125 11 view .LVU4587
 13421 4ba5 4C0FA3C6 		bt	rsi, r8	# *_175, index
 13422 4ba9 0F8300FF 		jnc	.L927	#,
 13422      FFFF
 125:sieve_extend.c ****     return index;
 13423              		.loc 1 125 58 is_stmt 1 view .LVU4588
 13424              	.LVL802:
 13425              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13426              		.loc 1 125 63 is_stmt 0 view .LVU4589
 13427 4baf 4D8D4103 		lea	r8, 3[r9]	# index,
 13428              	.LVL803:
 125:sieve_extend.c ****     return index;
 13429              		.loc 1 125 11 is_stmt 1 view .LVU4590
 13430              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13431              		.loc 1 125 21 is_stmt 0 view .LVU4591
 13432 4bb3 4D89C4   		mov	r12, r8	# tmp405, index
 13433 4bb6 49C1EC06 		shr	r12, 6	# tmp405,
 13434              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13435              		.loc 1 125 12 view .LVU4592
 13436 4bba 4F8B2CE7 		mov	r13, QWORD PTR [r15+r12*8]	# *_175, *_175
 13437              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13438              		.loc 1 125 11 view .LVU4593
 13439 4bbe 4D0FA3C5 		bt	r13, r8	# *_175, index
 13440 4bc2 0F83E7FE 		jnc	.L927	#,
 13440      FFFF
 125:sieve_extend.c ****     return index;
 13441              		.loc 1 125 58 is_stmt 1 view .LVU4594
 13442              	.LVL804:
 13443              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13444              		.loc 1 125 63 is_stmt 0 view .LVU4595
 13445 4bc8 4D8D4104 		lea	r8, 4[r9]	# index,
 13446              	.LVL805:
 125:sieve_extend.c ****     return index;
 13447              		.loc 1 125 11 is_stmt 1 view .LVU4596
GAS LISTING /tmp/ccNeV1of.s 			page 365


 13448              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13449              		.loc 1 125 21 is_stmt 0 view .LVU4597
 13450 4bcc 4C89C5   		mov	rbp, r8	# tmp409, index
 13451 4bcf 48C1ED06 		shr	rbp, 6	# tmp409,
 13452              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13453              		.loc 1 125 12 view .LVU4598
 13454 4bd3 4D8B1CEF 		mov	r11, QWORD PTR [r15+rbp*8]	# *_175, *_175
 13455              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13456              		.loc 1 125 11 view .LVU4599
 13457 4bd7 4D0FA3C3 		bt	r11, r8	# *_175, index
 13458 4bdb 0F83CEFE 		jnc	.L927	#,
 13458      FFFF
 125:sieve_extend.c ****     return index;
 13459              		.loc 1 125 58 is_stmt 1 view .LVU4600
 13460              	.LVL806:
 13461              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13462              		.loc 1 125 63 is_stmt 0 view .LVU4601
 13463 4be1 4D8D4105 		lea	r8, 5[r9]	# index,
 13464              	.LVL807:
 125:sieve_extend.c ****     return index;
 13465              		.loc 1 125 11 is_stmt 1 view .LVU4602
 13466              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13467              		.loc 1 125 21 is_stmt 0 view .LVU4603
 13468 4be5 4C89C2   		mov	rdx, r8	# tmp413, index
 13469 4be8 48C1EA06 		shr	rdx, 6	# tmp413,
 13470              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13471              		.loc 1 125 12 view .LVU4604
 13472 4bec 4D8B34D7 		mov	r14, QWORD PTR [r15+rdx*8]	# *_175, *_175
 13473              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13474              		.loc 1 125 11 view .LVU4605
 13475 4bf0 4D0FA3C6 		bt	r14, r8	# *_175, index
 13476 4bf4 0F83B5FE 		jnc	.L927	#,
 13476      FFFF
 125:sieve_extend.c ****     return index;
 13477              		.loc 1 125 58 is_stmt 1 view .LVU4606
 13478              	.LVL808:
 13479              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13480              		.loc 1 125 63 is_stmt 0 view .LVU4607
 13481 4bfa 4D8D4106 		lea	r8, 6[r9]	# index,
 13482              	.LVL809:
 125:sieve_extend.c ****     return index;
 13483              		.loc 1 125 11 is_stmt 1 view .LVU4608
 13484              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13485              		.loc 1 125 21 is_stmt 0 view .LVU4609
 13486 4bfe 4C89C1   		mov	rcx, r8	# tmp417, index
 13487 4c01 48C1E906 		shr	rcx, 6	# tmp417,
 13488              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
GAS LISTING /tmp/ccNeV1of.s 			page 366


 13489              		.loc 1 125 12 view .LVU4610
 13490 4c05 498B04CF 		mov	rax, QWORD PTR [r15+rcx*8]	# *_175, *_175
 13491              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13492              		.loc 1 125 11 view .LVU4611
 13493 4c09 4C0FA3C0 		bt	rax, r8	# *_175, index
 13494 4c0d 0F839CFE 		jnc	.L927	#,
 13494      FFFF
 125:sieve_extend.c ****     return index;
 13495              		.loc 1 125 58 is_stmt 1 view .LVU4612
 13496              	.LVL810:
 13497              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13498              		.loc 1 125 63 is_stmt 0 view .LVU4613
 13499 4c13 4D8D4107 		lea	r8, 7[r9]	# index,
 13500              	.LVL811:
 125:sieve_extend.c ****     return index;
 13501              		.loc 1 125 11 is_stmt 1 view .LVU4614
 13502              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13503              		.loc 1 125 21 is_stmt 0 view .LVU4615
 13504 4c17 4D89C1   		mov	r9, r8	# tmp421, index
 13505 4c1a 49C1E906 		shr	r9, 6	# tmp421,
 13506              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13507              		.loc 1 125 12 view .LVU4616
 13508 4c1e 4B8B3CCF 		mov	rdi, QWORD PTR [r15+r9*8]	# *_175, *_175
 13509              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 13510              		.loc 1 125 11 view .LVU4617
 13511 4c22 4C0FA3C7 		bt	rdi, r8	# *_175, index
 13512 4c26 0F8235FF 		jc	.L928	#,
 13512      FFFF
 13513 4c2c E97EFEFF 		jmp	.L927	#
 13513      FF
 13514              	.LVL812:
 13515              		.p2align 4,,7
 13516 4c31 0F1F8000 		.p2align 3
 13516      000000
 13517              	.L924:
 125:sieve_extend.c ****     return index;
 13518              		.loc 1 125 11 view .LVU4618
 13519              	.LBE629:
 13520              	.LBE630:
 864:sieve_extend.c **** 
 13521              		.loc 1 864 13 is_stmt 1 view .LVU4619
 13522              	# sieve_extend.c:864:             start = prime * prime * 2 + prime * 2;
 864:sieve_extend.c **** 
 13523              		.loc 1 864 19 is_stmt 0 view .LVU4620
 13524 4c38 4C0FAFC5 		imul	r8, rbp	# tmp345, _158
 13525 4c3c 4B8D3400 		lea	rsi, [r8+r8]	# index,
 13526              	.LVL813:
 864:sieve_extend.c **** 
 13527              		.loc 1 864 19 view .LVU4621
 13528 4c40 E94CFCFF 		jmp	.L925	#
 13528      FF
 13529              	.LVL814:
GAS LISTING /tmp/ccNeV1of.s 			page 367


 13530              		.p2align 4,,7
 13531 4c45 0F1F00   		.p2align 3
 13532              	.L1112:
 13533              	.LBB631:
 13534              	.LBB625:
 140:sieve_extend.c ****        distance = (bitshift_t) __builtin_ctzll(~(bitarray[index_word]));
 13535              		.loc 1 140 8 is_stmt 1 view .LVU4622
 141:sieve_extend.c ****        index += distance;
 13536              		.loc 1 141 8 view .LVU4623
 13537              	# sieve_extend.c:141:        distance = (bitshift_t) __builtin_ctzll(~(bitarray[index_word]));
 141:sieve_extend.c ****        index += distance;
 13538              		.loc 1 141 48 is_stmt 0 view .LVU4624
 13539 4c48 4B8B6C1F 		mov	rbp, QWORD PTR 8[r15+r11]	# *_200, *_200
 13539      08
 13540              	.LVL815:
 141:sieve_extend.c ****        index += distance;
 13541              		.loc 1 141 48 view .LVU4625
 13542 4c4d 48F7D5   		not	rbp	# tmp379
 13543              	.LVL816:
 142:sieve_extend.c ****    }
 13544              		.loc 1 142 8 is_stmt 1 view .LVU4626
 13545              	# sieve_extend.c:141:        distance = (bitshift_t) __builtin_ctzll(~(bitarray[index_word]));
 141:sieve_extend.c ****        index += distance;
 13546              		.loc 1 141 17 is_stmt 0 view .LVU4627
 13547 4c50 F34C0FBC 		tzcnt	r11, rbp	# distance, tmp379
 13547      DD
 13548              	.LVL817:
 13549              	# sieve_extend.c:142:        index += distance;
 142:sieve_extend.c ****    }
 13550              		.loc 1 142 14 view .LVU4628
 13551 4c55 4D01D8   		add	r8, r11	# index, distance
 13552              	.LVL818:
 139:sieve_extend.c ****        index_word++;
 13553              		.loc 1 139 10 is_stmt 1 view .LVU4629
 13554 4c58 E952FEFF 		jmp	.L927	#
 13554      FF
 13555              	.LVL819:
 13556              	.L1106:
 139:sieve_extend.c ****        index_word++;
 13557              		.loc 1 139 10 is_stmt 0 view .LVU4630
 13558              	.LBE625:
 13559              	.LBE631:
 13560              	.LBE632:
 13561              	.LBE633:
 13562              	.LBE634:
 13563              	.LBE637:
 13564              	.LBB638:
 13565              	.LBB584:
 13566              	.LBB577:
 13567              	.LBB571:
 13568              	.LBB569:
 840:sieve_extend.c ****         return; // rapid exit for small sizes
 13569              		.loc 1 840 9 is_stmt 1 view .LVU4631
 13570 4c5d 4C89F1   		mov	rcx, r14	#, _67
 13571 4c60 4C89EA   		mov	rdx, r13	#, patternsize_bits
 13572 4c63 4C89EE   		mov	rsi, r13	#, patternsize_bits
 13573 4c66 4C89FF   		mov	rdi, r15	#, _94
GAS LISTING /tmp/ccNeV1of.s 			page 368


 13574 4c69 E892B3FF 		call	extendSieve_smallSize	#
 13574      FF
 13575              	.LVL820:
 841:sieve_extend.c ****     }
 13576              		.loc 1 841 9 view .LVU4632
 13577 4c6e 4C896C24 		mov	QWORD PTR 32[rsp], r13	# %sfp, patternsize_bits
 13577      20
 13578 4c73 E970F6FF 		jmp	.L900	#
 13578      FF
 13579              	.LVL821:
 13580              	.L1108:
 841:sieve_extend.c ****     }
 13581              		.loc 1 841 9 is_stmt 0 view .LVU4633
 13582              	.LBE569:
 13583              	.LBE571:
 13584              	.LBE577:
 13585              	.LBE584:
 13586              	.LBE638:
 13587              	.LBB639:
 13588              	.LBB594:
 848:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
 13589              		.loc 1 848 37 is_stmt 1 view .LVU4634
 13590 4c78 E893CAFF 		call	extendSieve_shiftleft	#
 13590      FF
 13591              	.LVL822:
 848:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
 13592              		.loc 1 848 37 is_stmt 0 view .LVU4635
 13593 4c7d 0F1F00   		.p2align 4,,3
 13594 4c80 E997FAFF 		jmp	.L916	#
 13594      FF
 13595              	.LVL823:
 13596              	.L1102:
 848:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
 13597              		.loc 1 848 37 view .LVU4636
 13598 4c85 488B6C24 		mov	rbp, QWORD PTR 40[rsp]	# <retval>, %sfp
 13598      28
 13599              	.LVL824:
 848:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
 13600              		.loc 1 848 37 view .LVU4637
 13601 4c8a 4989CA   		mov	r10, rcx	# tmp298, prime
 13602 4c8d 49C1EA06 		shr	r10, 6	# tmp298,
 13603 4c91 BF010000 		mov	edi, 1	# tmp301,
 13603      00
 13604 4c96 48894C24 		mov	QWORD PTR 72[rsp], rcx	# %sfp, prime
 13604      48
 13605 4c9b 4B8D14D7 		lea	rdx, [r15+r10*8]	# prephitmp_505,
 13606 4c9f 4C8B7508 		mov	r14, QWORD PTR 8[rbp]	# prephitmp_564, sieve_89->bits
 13607              	.LVL825:
 848:sieve_extend.c ****     else if (source_bit < copy_bit) extendSieve_shiftright_vector(bitarray, source_start, size, des
 13608              		.loc 1 848 37 view .LVU4638
 13609 4ca3 C462F1F7 		shlx	r8, rdi, rcx	# prephitmp_502, tmp301, tmp634
 13609      C7
 13610              	.LBE594:
 13611              	.LBE639:
 13612              	.LBB640:
 13613              	.LBB585:
 13614              	.LBB578:
GAS LISTING /tmp/ccNeV1of.s 			page 369


 13615              	# sieve_extend.c:910:         if (range_stop > block_stop) return block; //range_stop = block_stop;
 910:sieve_extend.c **** 
 13616              		.loc 1 910 12 view .LVU4639
 13617 4ca8 488B7424 		mov	rsi, QWORD PTR 24[rsp]	# block$pattern_start, %sfp
 13617      18
 13618              	.LVL826:
 910:sieve_extend.c **** 
 13619              		.loc 1 910 12 view .LVU4640
 13620 4cad 48895424 		mov	QWORD PTR 64[rsp], rdx	# %sfp, prephitmp_505
 13620      40
 13621 4cb2 4C89EA   		mov	rdx, r13	# block$pattern_size, patternsize_bits
 13622 4cb5 4C897424 		mov	QWORD PTR 8[rsp], r14	# %sfp, prephitmp_564
 13622      08
 13623              	.LVL827:
 910:sieve_extend.c **** 
 13624              		.loc 1 910 12 view .LVU4641
 13625 4cba 4C894424 		mov	QWORD PTR 48[rsp], r8	# %sfp, prephitmp_502
 13625      30
 13626              	.LVL828:
 910:sieve_extend.c **** 
 13627              		.loc 1 910 12 view .LVU4642
 13628 4cbf E924FAFF 		jmp	.L899	#
 13628      FF
 13629              	.LVL829:
 13630              	.L1100:
 910:sieve_extend.c **** 
 13631              		.loc 1 910 12 view .LVU4643
 13632              	.LBE578:
 13633              	# sieve_extend.c:899:     for (;range_stop < block_stop;) {
 899:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 13634              		.loc 1 899 5 view .LVU4644
 13635 4cc4 48894424 		mov	QWORD PTR 64[rsp], rax	# %sfp, _94
 13635      40
 13636              	# sieve_extend.c:895:     struct block block = { .prime = 0, .pattern_start = 0, .pattern_size = 0 
 895:sieve_extend.c **** 
 13637              		.loc 1 895 18 view .LVU4645
 13638 4cc9 31D2     		xor	edx, edx	# block$pattern_size
 13639              	# sieve_extend.c:890:     register counter_t prime   = 0;
 890:sieve_extend.c ****     counter_t patternsize_bits = 1;
 13640              		.loc 1 890 24 view .LVU4646
 13641 4ccb 48C74424 		mov	QWORD PTR 72[rsp], 0	# %sfp,
 13641      48000000 
 13641      00
 13642              	# sieve_extend.c:895:     struct block block = { .prime = 0, .pattern_start = 0, .pattern_size = 0 
 895:sieve_extend.c **** 
 13643              		.loc 1 895 18 view .LVU4647
 13644 4cd4 31F6     		xor	esi, esi	# block$pattern_start
 13645              	# sieve_extend.c:899:     for (;range_stop < block_stop;) {
 899:sieve_extend.c ****         prime = searchBitFalse(bitarray, prime+1);
 13646              		.loc 1 899 5 view .LVU4648
 13647 4cd6 48C74424 		mov	QWORD PTR 48[rsp], 1	# %sfp,
 13647      30010000 
 13647      00
 13648 4cdf E963F9FF 		jmp	.L892	#
 13648      FF
 13649              	.LBE585:
 13650              	.LBE640:
GAS LISTING /tmp/ccNeV1of.s 			page 370


 13651              		.cfi_endproc
 13652              	.LFE79:
 13654 4ce4 66662E0F 		.p2align 4
 13654      1F840000 
 13654      00000090 
 13656              	tune_benchmark:
 13657              	.LVL830:
 13658              	.LFB87:
1073:sieve_extend.c **** 
1074:sieve_extend.c **** static void tune_benchmark(tuning_result_type* tuning_result, counter_t tuning_result_index) {
 13659              		.loc 1 1074 94 is_stmt 1 view -0
 13660              		.cfi_startproc
 13661              		.loc 1 1074 94 is_stmt 0 view .LVU4650
 13662 4cf0 4154     		push	r12	#
 13663              		.cfi_def_cfa_offset 16
 13664              		.cfi_offset 12, -16
 13665 4cf2 4989F8   		mov	r8, rdi	# tmp149, tuning_result
 13666              	# sieve_extend.c:1080:     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_f
1075:sieve_extend.c ****     counter_t passes = 0;
1076:sieve_extend.c ****     double elapsed_time = 0;
1077:sieve_extend.c ****     struct timespec start_time,end_time;
1078:sieve_extend.c ****     struct sieve_t *sieve;
1079:sieve_extend.c **** 
1080:sieve_extend.c ****     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_faster;
 13667              		.loc 1 1080 44 view .LVU4651
 13668 4cf5 488D3C76 		lea	rdi, [rsi+rsi*2]	# tmp114,
 13669              	.LVL831:
 13670              	# sieve_extend.c:1074: static void tune_benchmark(tuning_result_type* tuning_result, counter_t tuni
1074:sieve_extend.c ****     counter_t passes = 0;
 13671              		.loc 1 1074 94 view .LVU4652
 13672 4cf9 55       		push	rbp	#
 13673              		.cfi_def_cfa_offset 24
 13674              		.cfi_offset 6, -24
 13675              	# sieve_extend.c:1080:     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_f
 13676              		.loc 1 1080 44 view .LVU4653
 13677 4cfa 48C1E705 		sal	rdi, 5	# tmp115,
 13678              	# sieve_extend.c:1075:     counter_t passes = 0;
1075:sieve_extend.c ****     counter_t passes = 0;
 13679              		.loc 1 1075 15 view .LVU4654
 13680 4cfe 4531E4   		xor	r12d, r12d	# passes
 13681              	# sieve_extend.c:1074: static void tune_benchmark(tuning_result_type* tuning_result, counter_t tuni
1074:sieve_extend.c ****     counter_t passes = 0;
 13682              		.loc 1 1074 94 view .LVU4655
 13683 4d01 53       		push	rbx	#
 13684              		.cfi_def_cfa_offset 32
 13685              		.cfi_offset 3, -32
 13686              	# sieve_extend.c:1080:     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_f
 13687              		.loc 1 1080 44 view .LVU4656
 13688 4d02 498D1C38 		lea	rbx, [r8+rdi]	# _2,
 13689              	# sieve_extend.c:1084:     clock_gettime(CLOCK_MONOTONIC,&start_time);
1081:sieve_extend.c ****     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep_faster;
1082:sieve_extend.c ****     global_VECTORSTEP_FASTER = tuning_result[tuning_result_index].vectorstep_faster;
1083:sieve_extend.c **** 
1084:sieve_extend.c ****     clock_gettime(CLOCK_MONOTONIC,&start_time);
 13690              		.loc 1 1084 5 view .LVU4657
 13691 4d06 BF010000 		mov	edi, 1	#,
 13691      00
GAS LISTING /tmp/ccNeV1of.s 			page 371


 13692              	# sieve_extend.c:1074: static void tune_benchmark(tuning_result_type* tuning_result, counter_t tuni
1074:sieve_extend.c ****     counter_t passes = 0;
 13693              		.loc 1 1074 94 view .LVU4658
 13694 4d0b 488D6424 		lea	rsp, -48[rsp]	#,
 13694      D0
 13695              		.cfi_def_cfa_offset 80
 13696              	# sieve_extend.c:1081:     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep
1081:sieve_extend.c ****     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep_faster;
 13697              		.loc 1 1081 30 view .LVU4659
 13698 4d10 488B5328 		mov	rdx, QWORD PTR 40[rbx]	# _2->mediumstep_faster, _2->mediumstep_faster
 13699              	# sieve_extend.c:1084:     clock_gettime(CLOCK_MONOTONIC,&start_time);
 13700              		.loc 1 1084 5 view .LVU4660
 13701 4d14 4889E6   		mov	rsi, rsp	# tmp119,
 13702              	.LVL832:
 13703              	# sieve_extend.c:1082:     global_VECTORSTEP_FASTER = tuning_result[tuning_result_index].vectorstep
1082:sieve_extend.c **** 
 13704              		.loc 1 1082 30 view .LVU4661
 13705 4d17 488B4B30 		mov	rcx, QWORD PTR 48[rbx]	# _2->vectorstep_faster, _2->vectorstep_faster
 13706              	# sieve_extend.c:1074: static void tune_benchmark(tuning_result_type* tuning_result, counter_t tuni
1074:sieve_extend.c ****     counter_t passes = 0;
 13707              		.loc 1 1074 94 view .LVU4662
 13708 4d1b 64488B04 		mov	rax, QWORD PTR fs:40	# tmp160, MEM[(<address-space-1> long unsigned int *)40B]
 13708      25280000 
 13708      00
 13709 4d24 48894424 		mov	QWORD PTR 40[rsp], rax	# D.7318, tmp160
 13709      28
 13710 4d29 31C0     		xor	eax, eax	# tmp160
1075:sieve_extend.c ****     double elapsed_time = 0;
 13711              		.loc 1 1075 5 is_stmt 1 view .LVU4663
 13712              	.LVL833:
1076:sieve_extend.c ****     struct timespec start_time,end_time;
 13713              		.loc 1 1076 5 view .LVU4664
1077:sieve_extend.c ****     struct sieve_t *sieve;
 13714              		.loc 1 1077 5 view .LVU4665
1078:sieve_extend.c **** 
 13715              		.loc 1 1078 5 view .LVU4666
1080:sieve_extend.c ****     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep_faster;
 13716              		.loc 1 1080 5 view .LVU4667
 13717              	# sieve_extend.c:1080:     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_f
1080:sieve_extend.c ****     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep_faster;
 13718              		.loc 1 1080 29 is_stmt 0 view .LVU4668
 13719 4d2b 488B4320 		mov	rax, QWORD PTR 32[rbx]	# _2->smallstep_faster, _2->smallstep_faster
 13720              	# sieve_extend.c:1081:     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep
1081:sieve_extend.c ****     global_VECTORSTEP_FASTER = tuning_result[tuning_result_index].vectorstep_faster;
 13721              		.loc 1 1081 30 view .LVU4669
 13722 4d2f 48891500 		mov	QWORD PTR global_MEDIUMSTEP_FASTER[rip], rdx	# global_MEDIUMSTEP_FASTER, _2->mediumstep_faster
 13722      000000
 13723              	# sieve_extend.c:1082:     global_VECTORSTEP_FASTER = tuning_result[tuning_result_index].vectorstep
1082:sieve_extend.c **** 
 13724              		.loc 1 1082 30 view .LVU4670
 13725 4d36 48890D00 		mov	QWORD PTR global_VECTORSTEP_FASTER[rip], rcx	# global_VECTORSTEP_FASTER, _2->vectorstep_faster
 13725      000000
 13726              	# sieve_extend.c:1080:     global_SMALLSTEP_FASTER = tuning_result[tuning_result_index].smallstep_f
1080:sieve_extend.c ****     global_MEDIUMSTEP_FASTER = tuning_result[tuning_result_index].mediumstep_faster;
 13727              		.loc 1 1080 29 view .LVU4671
 13728 4d3d 48890500 		mov	QWORD PTR global_SMALLSTEP_FASTER[rip], rax	# global_SMALLSTEP_FASTER, _2->smallstep_faster
 13728      000000
GAS LISTING /tmp/ccNeV1of.s 			page 372


1081:sieve_extend.c ****     global_VECTORSTEP_FASTER = tuning_result[tuning_result_index].vectorstep_faster;
 13729              		.loc 1 1081 5 is_stmt 1 view .LVU4672
1082:sieve_extend.c **** 
 13730              		.loc 1 1082 5 view .LVU4673
 13731              		.loc 1 1084 5 view .LVU4674
 13732 4d44 E8000000 		call	clock_gettime@PLT	#
 13732      00
 13733              	.LVL834:
1085:sieve_extend.c ****     while (elapsed_time <= tuning_result[tuning_result_index].sample_duration && passes < tuning_re
 13734              		.loc 1 1085 5 view .LVU4675
 13735              		.loc 1 1085 11 view .LVU4676
 13736 4d49 C5D957E4 		vxorpd	xmm4, xmm4, xmm4	# elapsed_time
 13737 4d4d C5F92F63 		vcomisd	xmm4, QWORD PTR 64[rbx]	# elapsed_time, _2->sample_duration
 13737      40
 13738 4d52 C5FB103D 		vmovsd	xmm7, QWORD PTR .LC13[rip]	# _58,
 13738      00000000 
 13739 4d5a 7676     		jbe	.L1114	#,
 13740 4d5c E99E0000 		jmp	.L1115	#
 13740      00
 13741              	.LVL835:
 13742              		.p2align 4,,7
 13743 4d61 0F1F8000 		.p2align 3
 13743      000000
 13744              	.L1118:
1086:sieve_extend.c ****         sieve = sieve_shake(tuning_result[tuning_result_index].maxints, tuning_result[tuning_result
 13745              		.loc 1 1086 9 view .LVU4677
 13746              	# sieve_extend.c:1086:         sieve = sieve_shake(tuning_result[tuning_result_index].maxints, tuni
 13747              		.loc 1 1086 17 is_stmt 0 view .LVU4678
 13748 4d68 488B7308 		mov	rsi, QWORD PTR 8[rbx]	# _2->blocksize_bits, _2->blocksize_bits
 13749              	# sieve_extend.c:1088:         passes++;
1087:sieve_extend.c ****         sieve_delete(sieve);
1088:sieve_extend.c ****         passes++;
 13750              		.loc 1 1088 15 view .LVU4679
 13751 4d6c 4983C401 		add	r12, 1	# passes,
 13752              	.LVL836:
 13753              	# sieve_extend.c:1086:         sieve = sieve_shake(tuning_result[tuning_result_index].maxints, tuni
1086:sieve_extend.c ****         sieve = sieve_shake(tuning_result[tuning_result_index].maxints, tuning_result[tuning_result
 13754              		.loc 1 1086 17 view .LVU4680
 13755 4d70 488B3B   		mov	rdi, QWORD PTR [rbx]	#, _2->maxints
 13756 4d73 E868F4FF 		call	sieve_shake	#
 13756      FF
 13757              	.LVL837:
 13758              	.LBB641:
 13759              	.LBB642:
 13760              	# sieve_extend.c:119:     free(sieve->bitarray);
 119:sieve_extend.c ****     free(sieve);
 13761              		.loc 1 119 5 view .LVU4681
 13762 4d78 488B38   		mov	rdi, QWORD PTR [rax]	#, sieve_37->bitarray
 13763              	.LBE642:
 13764              	.LBE641:
 13765              	# sieve_extend.c:1086:         sieve = sieve_shake(tuning_result[tuning_result_index].maxints, tuni
1086:sieve_extend.c ****         sieve = sieve_shake(tuning_result[tuning_result_index].maxints, tuning_result[tuning_result
 13766              		.loc 1 1086 17 view .LVU4682
 13767 4d7b 4889C5   		mov	rbp, rax	# sieve, tmp151
 13768              	.LVL838:
1087:sieve_extend.c ****         sieve_delete(sieve);
 13769              		.loc 1 1087 9 is_stmt 1 view .LVU4683
GAS LISTING /tmp/ccNeV1of.s 			page 373


 13770              	.LBB644:
 13771              	.LBI641:
 118:sieve_extend.c ****     free(sieve->bitarray);
 13772              		.loc 1 118 13 view .LVU4684
 13773              	.LBB643:
 119:sieve_extend.c ****     free(sieve);
 13774              		.loc 1 119 5 view .LVU4685
 13775 4d7e E8000000 		call	free@PLT	#
 13775      00
 13776              	.LVL839:
 120:sieve_extend.c **** }
 13777              		.loc 1 120 5 view .LVU4686
 13778 4d83 4889EF   		mov	rdi, rbp	#, sieve
 13779 4d86 E8000000 		call	free@PLT	#
 13779      00
 13780              	.LVL840:
 120:sieve_extend.c **** }
 13781              		.loc 1 120 5 is_stmt 0 view .LVU4687
 13782              	.LBE643:
 13783              	.LBE644:
 13784              		.loc 1 1088 9 is_stmt 1 view .LVU4688
1089:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 13785              		.loc 1 1089 9 view .LVU4689
 13786 4d8b 488D7424 		lea	rsi, 16[rsp]	# tmp122,
 13786      10
 13787 4d90 BF010000 		mov	edi, 1	#,
 13787      00
 13788 4d95 E8000000 		call	clock_gettime@PLT	#
 13788      00
 13789              	.LVL841:
1090:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 13790              		.loc 1 1090 9 view .LVU4690
 13791              	# sieve_extend.c:1090:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 13792              		.loc 1 1090 58 is_stmt 0 view .LVU4691
 13793 4d9a C4E1FB2A 		vcvtsi2sd	xmm0, xmm0, QWORD PTR 24[rsp]	# tmp123, end_time.tv_nsec
 13793      442418
 13794              	# sieve_extend.c:1090:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 13795              		.loc 1 1090 64 view .LVU4692
 13796 4da1 C4E1F32A 		vcvtsi2sd	xmm1, xmm1, QWORD PTR [rsp]	# tmp124, start_time.tv_sec
 13796      0C24
 13797              	# sieve_extend.c:1090:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 13798              		.loc 1 1090 104 view .LVU4693
 13799 4da7 C4E1E32A 		vcvtsi2sd	xmm3, xmm3, QWORD PTR 8[rsp]	# tmp126, start_time.tv_nsec
 13799      5C2408
 13800              	# sieve_extend.c:1090:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 13801              		.loc 1 1090 40 view .LVU4694
 13802 4dae C4E1EB2A 		vcvtsi2sd	xmm2, xmm2, QWORD PTR 16[rsp]	# tmp127, end_time.tv_sec
 13802      542410
 13803 4db5 C4E2F19B 		vfmsub132sd	xmm0, xmm1, QWORD PTR .LC14[rip]	# _60, tmp124,
 13803      05000000 
 13803      00
 13804 4dbe C4E2E99D 		vfnmadd132sd	xmm3, xmm2, QWORD PTR .LC14[rip]	# _61, tmp127,
 13804      1D000000 
 13804      00
 13805              	# sieve_extend.c:1090:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 13806              		.loc 1 1090 22 view .LVU4695
 13807 4dc7 C5FB58E3 		vaddsd	xmm4, xmm0, xmm3	# elapsed_time, _60, _61
GAS LISTING /tmp/ccNeV1of.s 			page 374


 13808              	.LVL842:
1085:sieve_extend.c ****         sieve = sieve_shake(tuning_result[tuning_result_index].maxints, tuning_result[tuning_result
 13809              		.loc 1 1085 11 is_stmt 1 view .LVU4696
 13810 4dcb C5F92F63 		vcomisd	xmm4, QWORD PTR 64[rbx]	# elapsed_time, _2->sample_duration
 13810      40
 13811 4dd0 7706     		ja	.L1129	#,
 13812              	.LVL843:
 13813              	.L1114:
 13814              	# sieve_extend.c:1085:     while (elapsed_time <= tuning_result[tuning_result_index].sample_duratio
1085:sieve_extend.c ****         sieve = sieve_shake(tuning_result[tuning_result_index].maxints, tuning_result[tuning_result
 13815              		.loc 1 1085 79 is_stmt 0 discriminator 1 view .LVU4697
 13816 4dd2 4C396338 		cmp	QWORD PTR 56[rbx], r12	# _2->sample_max, passes
 13817 4dd6 7790     		ja	.L1118	#,
 13818              	.L1129:
1085:sieve_extend.c ****         sieve = sieve_shake(tuning_result[tuning_result_index].maxints, tuning_result[tuning_result
 13819              		.loc 1 1085 79 discriminator 1 view .LVU4698
 13820 4dd8 C4C1CB2A 		vcvtsi2sd	xmm6, xmm6, r12	# tmp133, passes
 13820      F4
 13821 4ddd 4D85E4   		test	r12, r12	# passes
 13822 4de0 7919     		jns	.L1120	#,
1085:sieve_extend.c ****         sieve = sieve_shake(tuning_result[tuning_result_index].maxints, tuning_result[tuning_result
 13823              		.loc 1 1085 79 discriminator 1 view .LVU4699
 13824 4de2 4C89E6   		mov	rsi, r12	# tmp135, passes
 13825 4de5 4D89E1   		mov	r9, r12	# tmp136, passes
 13826 4de8 48D1EE   		shr	rsi	# tmp135
 13827 4deb 4183E101 		and	r9d, 1	# tmp136,
 13828 4def 4C09CE   		or	rsi, r9	# tmp148, tmp136
 13829 4df2 C4E1D32A 		vcvtsi2sd	xmm5, xmm5, rsi	# tmp134, tmp148
 13829      EE
 13830 4df7 C5D358F5 		vaddsd	xmm6, xmm5, xmm5	# tmp133, tmp134, tmp134
 13831              	.L1120:
1085:sieve_extend.c ****         sieve = sieve_shake(tuning_result[tuning_result_index].maxints, tuning_result[tuning_result
 13832              		.loc 1 1085 79 discriminator 1 view .LVU4700
 13833 4dfb C5CB5EFC 		vdivsd	xmm7, xmm6, xmm4	# _58, tmp133, elapsed_time
 13834              	.LVL844:
 13835              	.L1115:
1091:sieve_extend.c ****     }
1092:sieve_extend.c ****     tuning_result[tuning_result_index].passes = passes;
 13836              		.loc 1 1092 5 is_stmt 1 view .LVU4701
 13837              	# sieve_extend.c:1092:     tuning_result[tuning_result_index].passes = passes;
 13838              		.loc 1 1092 47 is_stmt 0 view .LVU4702
 13839 4dff 4C896348 		mov	QWORD PTR 72[rbx], r12	# _2->passes, passes
1093:sieve_extend.c ****     tuning_result[tuning_result_index].elapsed_time = elapsed_time;
 13840              		.loc 1 1093 5 is_stmt 1 view .LVU4703
 13841              	# sieve_extend.c:1093:     tuning_result[tuning_result_index].elapsed_time = elapsed_time;
 13842              		.loc 1 1093 53 is_stmt 0 view .LVU4704
 13843 4e03 C5FB1163 		vmovsd	QWORD PTR 80[rbx], xmm4	# _2->elapsed_time, elapsed_time
 13843      50
1094:sieve_extend.c ****     tuning_result[tuning_result_index].avg = passes/elapsed_time;
 13844              		.loc 1 1094 5 is_stmt 1 view .LVU4705
 13845              	# sieve_extend.c:1094:     tuning_result[tuning_result_index].avg = passes/elapsed_time;
 13846              		.loc 1 1094 44 is_stmt 0 view .LVU4706
 13847 4e08 C5FB117B 		vmovsd	QWORD PTR 88[rbx], xmm7	# _2->avg, _58
 13847      58
 13848              	# sieve_extend.c:1095: }
1095:sieve_extend.c **** }
 13849              		.loc 1 1095 1 view .LVU4707
GAS LISTING /tmp/ccNeV1of.s 			page 375


 13850 4e0d 488B4424 		mov	rax, QWORD PTR 40[rsp]	# tmp161, D.7318
 13850      28
 13851 4e12 64483304 		xor	rax, QWORD PTR fs:40	# tmp161, MEM[(<address-space-1> long unsigned int *)40B]
 13851      25280000 
 13851      00
 13852 4e1b 750A     		jne	.L1130	#,
 13853 4e1d 488D6424 		lea	rsp, 48[rsp]	#,
 13853      30
 13854              		.cfi_remember_state
 13855              		.cfi_def_cfa_offset 32
 13856 4e22 5B       		pop	rbx	#
 13857              		.cfi_def_cfa_offset 24
 13858 4e23 5D       		pop	rbp	#
 13859              		.cfi_def_cfa_offset 16
 13860 4e24 415C     		pop	r12	#
 13861              		.cfi_def_cfa_offset 8
 13862 4e26 C3       		ret	
 13863              	.L1130:
 13864              		.cfi_restore_state
 13865 4e27 E8000000 		call	__stack_chk_fail@PLT	#
 13865      00
 13866              	.LVL845:
 13867              		.cfi_endproc
 13868              	.LFE87:
 13870 4e2c 0F1F4000 		.p2align 4
 13871              		.globl	shiftvec
 13873              	shiftvec:
 13874              	.LVL846:
 13875              	.LFB70:
 572:sieve_extend.c ****     int i = 0;
 13876              		.loc 1 572 1 is_stmt 1 view -0
 13877              		.cfi_startproc
 572:sieve_extend.c ****     int i = 0;
 13878              		.loc 1 572 1 is_stmt 0 view .LVU4709
 13879 4e30 F30F1EFA 		endbr64	
 573:sieve_extend.c ****     // MSVC: use steps of 2 for SSE, 4 for AVX2, 8 for AVX512
 13880              		.loc 1 573 5 is_stmt 1 view .LVU4710
 13881              	.LVL847:
 575:sieve_extend.c ****     {
 13882              		.loc 1 575 5 view .LVU4711
 575:sieve_extend.c ****     {
 13883              		.loc 1 575 12 view .LVU4712
 13884              	# sieve_extend.c:575:     for (; i+4 < size; i+=4,dst+=4,src+=4)
 575:sieve_extend.c ****     {
 13885              		.loc 1 575 5 is_stmt 0 view .LVU4713
 13886 4e34 83FA04   		cmp	edx, 4	# size,
 13887 4e37 0F8E9D03 		jle	.L1176	#,
 13887      0000
 13888 4e3d 41BB4000 		mov	r11d, 64	# tmp130,
 13888      0000
 13889 4e43 448D42FB 		lea	r8d, -5[rdx]	# tmp131,
 13890 4e47 4489D8   		mov	eax, r11d	# _4, tmp130
 13891 4e4a C5F96EC9 		vmovd	xmm1, ecx	# shift, shift
 13892 4e4e 29C8     		sub	eax, ecx	# _4, shift
 13893              	.LBB645:
 13894              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
GAS LISTING /tmp/ccNeV1of.s 			page 376


 13895              		.loc 1 578 25 view .LVU4714
 13896 4e50 C4E3FD00 		vpermq	ymm2, YMMWORD PTR [rsi], 85	# vect__102.646, MEM[base: src_35(D), index: ivtmp.660_114, off
 13896      1655
 13897              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13898              		.loc 1 578 34 view .LVU4715
 13899 4e56 C5FE6F26 		vmovdqu	ymm4, YMMWORD PTR [rsi]	# tmp269, MEM[base: src_35(D), index: ivtmp.660_114, offset: 0B]
 13900 4e5a C4E1F96E 		vmovq	xmm0, rax	# _4, _4
 13900      C0
 13901 4e5f 41C1E802 		shr	r8d, 2	# _25,
 13902 4e63 41B90100 		mov	r9d, 1	# ivtmp.657,
 13902      0000
 13903              	.LBE645:
 13904              	.LBB646:
 13905              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 13906              		.loc 1 580 34 view .LVU4716
 13907 4e69 C5EDD3E8 		vpsrlq	ymm5, ymm2, xmm0	# vect__57.647, vect__102.646, _4
 13908              	.LBE646:
 13909              	.LBB647:
 13910              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13911              		.loc 1 578 34 view .LVU4717
 13912 4e6d C5DDF3D9 		vpsllq	ymm3, ymm4, xmm1	# vect__104.651, tmp269, shift
 13913 4e71 458D5001 		lea	r10d, 1[r8]	# tmp164,
 13914 4e75 4589C3   		mov	r11d, r8d	# tmp169, _25
 13915              	.LBE647:
 13916              	.LBB648:
 13917              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 13918              		.loc 1 580 22 view .LVU4718
 13919 4e78 C5D5EBF3 		vpor	ymm6, ymm5, ymm3	# vect__58.652, vect__57.647, vect__104.651
 13920 4e7c 4183E307 		and	r11d, 7	# tmp169,
 13921              	.LVL848:
 580:sieve_extend.c ****     }
 13922              		.loc 1 580 22 view .LVU4719
 13923              	.LBE648:
 13924              	.LBB649:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13925              		.loc 1 577 25 is_stmt 1 view .LVU4720
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13926              		.loc 1 578 13 view .LVU4721
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13927              		.loc 1 577 32 view .LVU4722
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13928              		.loc 1 577 25 view .LVU4723
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13929              		.loc 1 578 13 view .LVU4724
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13930              		.loc 1 577 32 view .LVU4725
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13931              		.loc 1 577 25 view .LVU4726
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13932              		.loc 1 578 13 view .LVU4727
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13933              		.loc 1 577 32 view .LVU4728
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
GAS LISTING /tmp/ccNeV1of.s 			page 377


 13934              		.loc 1 577 25 view .LVU4729
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13935              		.loc 1 578 13 view .LVU4730
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13936              		.loc 1 577 32 view .LVU4731
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13937              		.loc 1 577 25 view .LVU4732
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13938              		.loc 1 577 25 is_stmt 0 view .LVU4733
 13939              	.LBE649:
 13940              	.LBB650:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13941              		.loc 1 579 25 is_stmt 1 view .LVU4734
 580:sieve_extend.c ****     }
 13942              		.loc 1 580 13 view .LVU4735
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13943              		.loc 1 579 32 view .LVU4736
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13944              		.loc 1 579 25 view .LVU4737
 580:sieve_extend.c ****     }
 13945              		.loc 1 580 13 view .LVU4738
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13946              		.loc 1 579 32 view .LVU4739
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13947              		.loc 1 579 25 view .LVU4740
 580:sieve_extend.c ****     }
 13948              		.loc 1 580 13 view .LVU4741
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13949              		.loc 1 579 32 view .LVU4742
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13950              		.loc 1 579 25 view .LVU4743
 580:sieve_extend.c ****     }
 13951              		.loc 1 580 13 view .LVU4744
 13952 4e80 4183FA01 		cmp	r10d, 1	# tmp164,
 13953 4e84 B8200000 		mov	eax, 32	# ivtmp.660,
 13953      00
 13954              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 13955              		.loc 1 580 22 is_stmt 0 view .LVU4745
 13956 4e89 C5FE7F37 		vmovdqu	YMMWORD PTR [rdi], ymm6	# MEM[base: dst_34(D), index: ivtmp.660_114, offset: 0B], vect__58
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13957              		.loc 1 579 32 is_stmt 1 view .LVU4746
 13958              	.LVL849:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13959              		.loc 1 579 25 view .LVU4747
 13960              	.LBE650:
 575:sieve_extend.c ****     {
 13961              		.loc 1 575 24 view .LVU4748
 575:sieve_extend.c ****     {
 13962              		.loc 1 575 12 view .LVU4749
 13963 4e8d 0F866002 		jbe	.L1174	#,
 13963      0000
 13964 4e93 4585DB   		test	r11d, r11d	# tmp169
 13965 4e96 0F841E01 		je	.L1134	#,
 13965      0000
 13966 4e9c 4183FB01 		cmp	r11d, 1	# tmp169,
 13967 4ea0 0F84E500 		je	.L1161	#,
GAS LISTING /tmp/ccNeV1of.s 			page 378


 13967      0000
 13968 4ea6 4183FB02 		cmp	r11d, 2	# tmp169,
 13969 4eaa 0F84B600 		je	.L1162	#,
 13969      0000
 13970 4eb0 4183FB03 		cmp	r11d, 3	# tmp169,
 13971 4eb4 0F848700 		je	.L1163	#,
 13971      0000
 13972 4eba 4183FB04 		cmp	r11d, 4	# tmp169,
 13973 4ebe 745B     		je	.L1164	#,
 13974 4ec0 4183FB05 		cmp	r11d, 5	# tmp169,
 13975 4ec4 7430     		je	.L1165	#,
 13976 4ec6 4183FB06 		cmp	r11d, 6	# tmp169,
 13977 4eca 0F85DC02 		jne	.L1177	#,
 13977      0000
 13978              	.L1166:
 13979              	.LVL850:
 13980              	.LBB651:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13981              		.loc 1 577 25 view .LVU4750
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13982              		.loc 1 578 13 view .LVU4751
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13983              		.loc 1 577 32 view .LVU4752
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13984              		.loc 1 577 25 view .LVU4753
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13985              		.loc 1 578 13 view .LVU4754
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13986              		.loc 1 577 32 view .LVU4755
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13987              		.loc 1 577 25 view .LVU4756
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13988              		.loc 1 578 13 view .LVU4757
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13989              		.loc 1 577 32 view .LVU4758
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13990              		.loc 1 577 25 view .LVU4759
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 13991              		.loc 1 578 13 view .LVU4760
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13992              		.loc 1 577 32 view .LVU4761
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13993              		.loc 1 577 25 view .LVU4762
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 13994              		.loc 1 577 25 is_stmt 0 view .LVU4763
 13995              	.LBE651:
 13996              	.LBB652:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13997              		.loc 1 579 25 is_stmt 1 view .LVU4764
 580:sieve_extend.c ****     }
 13998              		.loc 1 580 13 view .LVU4765
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 13999              		.loc 1 579 32 view .LVU4766
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14000              		.loc 1 579 25 view .LVU4767
 580:sieve_extend.c ****     }
 14001              		.loc 1 580 13 view .LVU4768
GAS LISTING /tmp/ccNeV1of.s 			page 379


 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14002              		.loc 1 579 32 view .LVU4769
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14003              		.loc 1 579 25 view .LVU4770
 580:sieve_extend.c ****     }
 14004              		.loc 1 580 13 view .LVU4771
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14005              		.loc 1 579 32 view .LVU4772
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14006              		.loc 1 579 25 view .LVU4773
 580:sieve_extend.c ****     }
 14007              		.loc 1 580 13 view .LVU4774
 14008              	.LBE652:
 14009              	.LBB653:
 14010              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14011              		.loc 1 578 25 is_stmt 0 view .LVU4775
 14012 4ed0 C463FD00 		vpermq	ymm12, YMMWORD PTR [rsi+rax], 85	# vect__102.646, MEM[base: src_35(D), index: ivtmp.660_114
 14012      240655
 14013 4ed7 4183C101 		add	r9d, 1	# ivtmp.657,
 14014              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14015              		.loc 1 578 34 view .LVU4776
 14016 4edb C57E6F34 		vmovdqu	ymm14, YMMWORD PTR [rsi+rax]	# tmp279, MEM[base: src_35(D), index: ivtmp.660_114, offset: 
 14016      06
 14017              	.LBE653:
 14018              	.LBB654:
 14019              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14020              		.loc 1 580 34 view .LVU4777
 14021 4ee0 C51DD3E8 		vpsrlq	ymm13, ymm12, xmm0	# vect__57.647, vect__102.646, _4
 14022              	.LBE654:
 14023              	.LBB655:
 14024              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14025              		.loc 1 578 34 view .LVU4778
 14026 4ee4 C50DF3F9 		vpsllq	ymm15, ymm14, xmm1	# vect__104.651, tmp279, shift
 14027              	.LBE655:
 14028              	.LBB656:
 14029              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14030              		.loc 1 580 22 view .LVU4779
 14031 4ee8 C4C115EB 		vpor	ymm2, ymm13, ymm15	# vect__58.652, vect__57.647, vect__104.651
 14031      D7
 14032 4eed C5FE7F14 		vmovdqu	YMMWORD PTR [rdi+rax], ymm2	# MEM[base: dst_34(D), index: ivtmp.660_114, offset: 0B], vect
 14032      07
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14033              		.loc 1 579 32 is_stmt 1 view .LVU4780
 14034              	.LVL851:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14035              		.loc 1 579 25 view .LVU4781
 14036              	.LBE656:
 575:sieve_extend.c ****     {
 14037              		.loc 1 575 24 view .LVU4782
 575:sieve_extend.c ****     {
 14038              		.loc 1 575 12 view .LVU4783
 14039 4ef2 4883C020 		add	rax, 32	# ivtmp.660,
GAS LISTING /tmp/ccNeV1of.s 			page 380


 14040              	.L1165:
 14041              	.LVL852:
 14042              	.LBB657:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14043              		.loc 1 577 25 view .LVU4784
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14044              		.loc 1 578 13 view .LVU4785
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14045              		.loc 1 577 32 view .LVU4786
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14046              		.loc 1 577 25 view .LVU4787
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14047              		.loc 1 578 13 view .LVU4788
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14048              		.loc 1 577 32 view .LVU4789
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14049              		.loc 1 577 25 view .LVU4790
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14050              		.loc 1 578 13 view .LVU4791
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14051              		.loc 1 577 32 view .LVU4792
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14052              		.loc 1 577 25 view .LVU4793
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14053              		.loc 1 578 13 view .LVU4794
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14054              		.loc 1 577 32 view .LVU4795
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14055              		.loc 1 577 25 view .LVU4796
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14056              		.loc 1 577 25 is_stmt 0 view .LVU4797
 14057              	.LBE657:
 14058              	.LBB658:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14059              		.loc 1 579 25 is_stmt 1 view .LVU4798
 580:sieve_extend.c ****     }
 14060              		.loc 1 580 13 view .LVU4799
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14061              		.loc 1 579 32 view .LVU4800
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14062              		.loc 1 579 25 view .LVU4801
 580:sieve_extend.c ****     }
 14063              		.loc 1 580 13 view .LVU4802
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14064              		.loc 1 579 32 view .LVU4803
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14065              		.loc 1 579 25 view .LVU4804
 580:sieve_extend.c ****     }
 14066              		.loc 1 580 13 view .LVU4805
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14067              		.loc 1 579 32 view .LVU4806
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14068              		.loc 1 579 25 view .LVU4807
 580:sieve_extend.c ****     }
 14069              		.loc 1 580 13 view .LVU4808
 14070              	.LBE658:
 14071              	.LBB659:
GAS LISTING /tmp/ccNeV1of.s 			page 381


 14072              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14073              		.loc 1 578 25 is_stmt 0 view .LVU4809
 14074 4ef6 C4E3FD00 		vpermq	ymm5, YMMWORD PTR [rsi+rax], 85	# vect__102.646, MEM[base: src_35(D), index: ivtmp.660_114,
 14074      2C0655
 14075 4efd 4183C101 		add	r9d, 1	# ivtmp.657,
 14076              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14077              		.loc 1 578 34 view .LVU4810
 14078 4f01 C5FE6F1C 		vmovdqu	ymm3, YMMWORD PTR [rsi+rax]	# tmp280, MEM[base: src_35(D), index: ivtmp.660_114, offset: 0
 14078      06
 14079              	.LBE659:
 14080              	.LBB660:
 14081              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14082              		.loc 1 580 34 view .LVU4811
 14083 4f06 C5D5D3E0 		vpsrlq	ymm4, ymm5, xmm0	# vect__57.647, vect__102.646, _4
 14084              	.LBE660:
 14085              	.LBB661:
 14086              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14087              		.loc 1 578 34 view .LVU4812
 14088 4f0a C5E5F3F1 		vpsllq	ymm6, ymm3, xmm1	# vect__104.651, tmp280, shift
 14089              	.LBE661:
 14090              	.LBB662:
 14091              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14092              		.loc 1 580 22 view .LVU4813
 14093 4f0e C5DDEBFE 		vpor	ymm7, ymm4, ymm6	# vect__58.652, vect__57.647, vect__104.651
 14094 4f12 C5FE7F3C 		vmovdqu	YMMWORD PTR [rdi+rax], ymm7	# MEM[base: dst_34(D), index: ivtmp.660_114, offset: 0B], vect
 14094      07
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14095              		.loc 1 579 32 is_stmt 1 view .LVU4814
 14096              	.LVL853:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14097              		.loc 1 579 25 view .LVU4815
 14098              	.LBE662:
 575:sieve_extend.c ****     {
 14099              		.loc 1 575 24 view .LVU4816
 575:sieve_extend.c ****     {
 14100              		.loc 1 575 12 view .LVU4817
 14101 4f17 4883C020 		add	rax, 32	# ivtmp.660,
 14102              	.L1164:
 14103              	.LVL854:
 14104              	.LBB663:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14105              		.loc 1 577 25 view .LVU4818
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14106              		.loc 1 578 13 view .LVU4819
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14107              		.loc 1 577 32 view .LVU4820
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14108              		.loc 1 577 25 view .LVU4821
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14109              		.loc 1 578 13 view .LVU4822
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14110              		.loc 1 577 32 view .LVU4823
GAS LISTING /tmp/ccNeV1of.s 			page 382


 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14111              		.loc 1 577 25 view .LVU4824
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14112              		.loc 1 578 13 view .LVU4825
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14113              		.loc 1 577 32 view .LVU4826
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14114              		.loc 1 577 25 view .LVU4827
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14115              		.loc 1 578 13 view .LVU4828
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14116              		.loc 1 577 32 view .LVU4829
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14117              		.loc 1 577 25 view .LVU4830
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14118              		.loc 1 577 25 is_stmt 0 view .LVU4831
 14119              	.LBE663:
 14120              	.LBB664:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14121              		.loc 1 579 25 is_stmt 1 view .LVU4832
 580:sieve_extend.c ****     }
 14122              		.loc 1 580 13 view .LVU4833
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14123              		.loc 1 579 32 view .LVU4834
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14124              		.loc 1 579 25 view .LVU4835
 580:sieve_extend.c ****     }
 14125              		.loc 1 580 13 view .LVU4836
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14126              		.loc 1 579 32 view .LVU4837
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14127              		.loc 1 579 25 view .LVU4838
 580:sieve_extend.c ****     }
 14128              		.loc 1 580 13 view .LVU4839
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14129              		.loc 1 579 32 view .LVU4840
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14130              		.loc 1 579 25 view .LVU4841
 580:sieve_extend.c ****     }
 14131              		.loc 1 580 13 view .LVU4842
 14132              	.LBE664:
 14133              	.LBB665:
 14134              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14135              		.loc 1 578 25 is_stmt 0 view .LVU4843
 14136 4f1b C463FD00 		vpermq	ymm8, YMMWORD PTR [rsi+rax], 85	# vect__102.646, MEM[base: src_35(D), index: ivtmp.660_114,
 14136      040655
 14137 4f22 4183C101 		add	r9d, 1	# ivtmp.657,
 14138              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14139              		.loc 1 578 34 view .LVU4844
 14140 4f26 C57E6F14 		vmovdqu	ymm10, YMMWORD PTR [rsi+rax]	# tmp281, MEM[base: src_35(D), index: ivtmp.660_114, offset: 
 14140      06
 14141              	.LBE665:
 14142              	.LBB666:
 14143              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 383


 14144              		.loc 1 580 34 view .LVU4845
 14145 4f2b C53DD3C8 		vpsrlq	ymm9, ymm8, xmm0	# vect__57.647, vect__102.646, _4
 14146              	.LBE666:
 14147              	.LBB667:
 14148              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14149              		.loc 1 578 34 view .LVU4846
 14150 4f2f C52DF3D9 		vpsllq	ymm11, ymm10, xmm1	# vect__104.651, tmp281, shift
 14151              	.LBE667:
 14152              	.LBB668:
 14153              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14154              		.loc 1 580 22 view .LVU4847
 14155 4f33 C44135EB 		vpor	ymm12, ymm9, ymm11	# vect__58.652, vect__57.647, vect__104.651
 14155      E3
 14156 4f38 C57E7F24 		vmovdqu	YMMWORD PTR [rdi+rax], ymm12	# MEM[base: dst_34(D), index: ivtmp.660_114, offset: 0B], vec
 14156      07
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14157              		.loc 1 579 32 is_stmt 1 view .LVU4848
 14158              	.LVL855:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14159              		.loc 1 579 25 view .LVU4849
 14160              	.LBE668:
 575:sieve_extend.c ****     {
 14161              		.loc 1 575 24 view .LVU4850
 575:sieve_extend.c ****     {
 14162              		.loc 1 575 12 view .LVU4851
 14163 4f3d 4883C020 		add	rax, 32	# ivtmp.660,
 14164              	.L1163:
 14165              	.LVL856:
 14166              	.LBB669:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14167              		.loc 1 577 25 view .LVU4852
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14168              		.loc 1 578 13 view .LVU4853
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14169              		.loc 1 577 32 view .LVU4854
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14170              		.loc 1 577 25 view .LVU4855
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14171              		.loc 1 578 13 view .LVU4856
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14172              		.loc 1 577 32 view .LVU4857
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14173              		.loc 1 577 25 view .LVU4858
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14174              		.loc 1 578 13 view .LVU4859
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14175              		.loc 1 577 32 view .LVU4860
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14176              		.loc 1 577 25 view .LVU4861
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14177              		.loc 1 578 13 view .LVU4862
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14178              		.loc 1 577 32 view .LVU4863
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14179              		.loc 1 577 25 view .LVU4864
GAS LISTING /tmp/ccNeV1of.s 			page 384


 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14180              		.loc 1 577 25 is_stmt 0 view .LVU4865
 14181              	.LBE669:
 14182              	.LBB670:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14183              		.loc 1 579 25 is_stmt 1 view .LVU4866
 580:sieve_extend.c ****     }
 14184              		.loc 1 580 13 view .LVU4867
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14185              		.loc 1 579 32 view .LVU4868
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14186              		.loc 1 579 25 view .LVU4869
 580:sieve_extend.c ****     }
 14187              		.loc 1 580 13 view .LVU4870
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14188              		.loc 1 579 32 view .LVU4871
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14189              		.loc 1 579 25 view .LVU4872
 580:sieve_extend.c ****     }
 14190              		.loc 1 580 13 view .LVU4873
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14191              		.loc 1 579 32 view .LVU4874
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14192              		.loc 1 579 25 view .LVU4875
 580:sieve_extend.c ****     }
 14193              		.loc 1 580 13 view .LVU4876
 14194              	.LBE670:
 14195              	.LBB671:
 14196              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14197              		.loc 1 578 25 is_stmt 0 view .LVU4877
 14198 4f41 C463FD00 		vpermq	ymm13, YMMWORD PTR [rsi+rax], 85	# vect__102.646, MEM[base: src_35(D), index: ivtmp.660_114
 14198      2C0655
 14199 4f48 4183C101 		add	r9d, 1	# ivtmp.657,
 14200              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14201              		.loc 1 578 34 view .LVU4878
 14202 4f4c C57E6F3C 		vmovdqu	ymm15, YMMWORD PTR [rsi+rax]	# tmp282, MEM[base: src_35(D), index: ivtmp.660_114, offset: 
 14202      06
 14203              	.LBE671:
 14204              	.LBB672:
 14205              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14206              		.loc 1 580 34 view .LVU4879
 14207 4f51 C515D3F0 		vpsrlq	ymm14, ymm13, xmm0	# vect__57.647, vect__102.646, _4
 14208              	.LBE672:
 14209              	.LBB673:
 14210              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14211              		.loc 1 578 34 view .LVU4880
 14212 4f55 C585F3D1 		vpsllq	ymm2, ymm15, xmm1	# vect__104.651, tmp282, shift
 14213              	.LBE673:
 14214              	.LBB674:
 14215              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14216              		.loc 1 580 22 view .LVU4881
 14217 4f59 C58DEBEA 		vpor	ymm5, ymm14, ymm2	# vect__58.652, vect__57.647, vect__104.651
GAS LISTING /tmp/ccNeV1of.s 			page 385


 14218 4f5d C5FE7F2C 		vmovdqu	YMMWORD PTR [rdi+rax], ymm5	# MEM[base: dst_34(D), index: ivtmp.660_114, offset: 0B], vect
 14218      07
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14219              		.loc 1 579 32 is_stmt 1 view .LVU4882
 14220              	.LVL857:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14221              		.loc 1 579 25 view .LVU4883
 14222              	.LBE674:
 575:sieve_extend.c ****     {
 14223              		.loc 1 575 24 view .LVU4884
 575:sieve_extend.c ****     {
 14224              		.loc 1 575 12 view .LVU4885
 14225 4f62 4883C020 		add	rax, 32	# ivtmp.660,
 14226              	.L1162:
 14227              	.LVL858:
 14228              	.LBB675:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14229              		.loc 1 577 25 view .LVU4886
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14230              		.loc 1 578 13 view .LVU4887
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14231              		.loc 1 577 32 view .LVU4888
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14232              		.loc 1 577 25 view .LVU4889
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14233              		.loc 1 578 13 view .LVU4890
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14234              		.loc 1 577 32 view .LVU4891
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14235              		.loc 1 577 25 view .LVU4892
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14236              		.loc 1 578 13 view .LVU4893
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14237              		.loc 1 577 32 view .LVU4894
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14238              		.loc 1 577 25 view .LVU4895
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14239              		.loc 1 578 13 view .LVU4896
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14240              		.loc 1 577 32 view .LVU4897
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14241              		.loc 1 577 25 view .LVU4898
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14242              		.loc 1 577 25 is_stmt 0 view .LVU4899
 14243              	.LBE675:
 14244              	.LBB676:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14245              		.loc 1 579 25 is_stmt 1 view .LVU4900
 580:sieve_extend.c ****     }
 14246              		.loc 1 580 13 view .LVU4901
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14247              		.loc 1 579 32 view .LVU4902
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14248              		.loc 1 579 25 view .LVU4903
 580:sieve_extend.c ****     }
 14249              		.loc 1 580 13 view .LVU4904
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
GAS LISTING /tmp/ccNeV1of.s 			page 386


 14250              		.loc 1 579 32 view .LVU4905
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14251              		.loc 1 579 25 view .LVU4906
 580:sieve_extend.c ****     }
 14252              		.loc 1 580 13 view .LVU4907
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14253              		.loc 1 579 32 view .LVU4908
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14254              		.loc 1 579 25 view .LVU4909
 580:sieve_extend.c ****     }
 14255              		.loc 1 580 13 view .LVU4910
 14256              	.LBE676:
 14257              	.LBB677:
 14258              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14259              		.loc 1 578 25 is_stmt 0 view .LVU4911
 14260 4f66 C4E3FD00 		vpermq	ymm4, YMMWORD PTR [rsi+rax], 85	# vect__102.646, MEM[base: src_35(D), index: ivtmp.660_114,
 14260      240655
 14261 4f6d 4183C101 		add	r9d, 1	# ivtmp.657,
 14262              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14263              		.loc 1 578 34 view .LVU4912
 14264 4f71 C5FE6F1C 		vmovdqu	ymm3, YMMWORD PTR [rsi+rax]	# tmp283, MEM[base: src_35(D), index: ivtmp.660_114, offset: 0
 14264      06
 14265              	.LBE677:
 14266              	.LBB678:
 14267              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14268              		.loc 1 580 34 view .LVU4913
 14269 4f76 C5DDD3F0 		vpsrlq	ymm6, ymm4, xmm0	# vect__57.647, vect__102.646, _4
 14270              	.LBE678:
 14271              	.LBB679:
 14272              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14273              		.loc 1 578 34 view .LVU4914
 14274 4f7a C5E5F3F9 		vpsllq	ymm7, ymm3, xmm1	# vect__104.651, tmp283, shift
 14275              	.LBE679:
 14276              	.LBB680:
 14277              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14278              		.loc 1 580 22 view .LVU4915
 14279 4f7e C54DEBC7 		vpor	ymm8, ymm6, ymm7	# vect__58.652, vect__57.647, vect__104.651
 14280 4f82 C57E7F04 		vmovdqu	YMMWORD PTR [rdi+rax], ymm8	# MEM[base: dst_34(D), index: ivtmp.660_114, offset: 0B], vect
 14280      07
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14281              		.loc 1 579 32 is_stmt 1 view .LVU4916
 14282              	.LVL859:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14283              		.loc 1 579 25 view .LVU4917
 14284              	.LBE680:
 575:sieve_extend.c ****     {
 14285              		.loc 1 575 24 view .LVU4918
 575:sieve_extend.c ****     {
 14286              		.loc 1 575 12 view .LVU4919
 14287 4f87 4883C020 		add	rax, 32	# ivtmp.660,
 14288              	.L1161:
 14289              	.LVL860:
GAS LISTING /tmp/ccNeV1of.s 			page 387


 14290              	.LBB681:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14291              		.loc 1 577 25 view .LVU4920
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14292              		.loc 1 578 13 view .LVU4921
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14293              		.loc 1 577 32 view .LVU4922
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14294              		.loc 1 577 25 view .LVU4923
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14295              		.loc 1 578 13 view .LVU4924
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14296              		.loc 1 577 32 view .LVU4925
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14297              		.loc 1 577 25 view .LVU4926
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14298              		.loc 1 578 13 view .LVU4927
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14299              		.loc 1 577 32 view .LVU4928
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14300              		.loc 1 577 25 view .LVU4929
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14301              		.loc 1 578 13 view .LVU4930
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14302              		.loc 1 577 32 view .LVU4931
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14303              		.loc 1 577 25 view .LVU4932
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14304              		.loc 1 577 25 is_stmt 0 view .LVU4933
 14305              	.LBE681:
 14306              	.LBB682:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14307              		.loc 1 579 25 is_stmt 1 view .LVU4934
 580:sieve_extend.c ****     }
 14308              		.loc 1 580 13 view .LVU4935
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14309              		.loc 1 579 32 view .LVU4936
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14310              		.loc 1 579 25 view .LVU4937
 580:sieve_extend.c ****     }
 14311              		.loc 1 580 13 view .LVU4938
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14312              		.loc 1 579 32 view .LVU4939
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14313              		.loc 1 579 25 view .LVU4940
 580:sieve_extend.c ****     }
 14314              		.loc 1 580 13 view .LVU4941
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14315              		.loc 1 579 32 view .LVU4942
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14316              		.loc 1 579 25 view .LVU4943
 580:sieve_extend.c ****     }
 14317              		.loc 1 580 13 view .LVU4944
 14318              	.LBE682:
 14319              	.LBB683:
 14320              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
GAS LISTING /tmp/ccNeV1of.s 			page 388


 14321              		.loc 1 578 25 is_stmt 0 view .LVU4945
 14322 4f8b C463FD00 		vpermq	ymm9, YMMWORD PTR [rsi+rax], 85	# vect__102.646, MEM[base: src_35(D), index: ivtmp.660_114,
 14322      0C0655
 14323 4f92 4183C101 		add	r9d, 1	# ivtmp.657,
 14324              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14325              		.loc 1 578 34 view .LVU4946
 14326 4f96 C57E6F1C 		vmovdqu	ymm11, YMMWORD PTR [rsi+rax]	# tmp284, MEM[base: src_35(D), index: ivtmp.660_114, offset: 
 14326      06
 14327              	.LBE683:
 14328              	.LBB684:
 14329              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14330              		.loc 1 580 34 view .LVU4947
 14331 4f9b C535D3D0 		vpsrlq	ymm10, ymm9, xmm0	# vect__57.647, vect__102.646, _4
 14332              	.LBE684:
 14333              	.LBB685:
 14334              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14335              		.loc 1 578 34 view .LVU4948
 14336 4f9f C525F3E1 		vpsllq	ymm12, ymm11, xmm1	# vect__104.651, tmp284, shift
 14337              	.LBE685:
 14338              	.LBB686:
 14339              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14340              		.loc 1 580 22 view .LVU4949
 14341 4fa3 C4412DEB 		vpor	ymm13, ymm10, ymm12	# vect__58.652, vect__57.647, vect__104.651
 14341      EC
 14342 4fa8 C57E7F2C 		vmovdqu	YMMWORD PTR [rdi+rax], ymm13	# MEM[base: dst_34(D), index: ivtmp.660_114, offset: 0B], vec
 14342      07
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14343              		.loc 1 579 32 is_stmt 1 view .LVU4950
 14344              	.LVL861:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14345              		.loc 1 579 25 view .LVU4951
 14346              	.LBE686:
 575:sieve_extend.c ****     {
 14347              		.loc 1 575 24 view .LVU4952
 575:sieve_extend.c ****     {
 14348              		.loc 1 575 12 view .LVU4953
 14349 4fad 4883C020 		add	rax, 32	# ivtmp.660,
 14350 4fb1 4539CA   		cmp	r10d, r9d	# tmp164, ivtmp.657
 14351 4fb4 0F863901 		jbe	.L1174	#,
 14351      0000
 14352              	.L1134:
 14353              	.LVL862:
 14354              	.LBB687:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14355              		.loc 1 577 25 view .LVU4954
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14356              		.loc 1 578 13 view .LVU4955
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14357              		.loc 1 577 32 view .LVU4956
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14358              		.loc 1 577 25 view .LVU4957
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14359              		.loc 1 578 13 view .LVU4958
GAS LISTING /tmp/ccNeV1of.s 			page 389


 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14360              		.loc 1 577 32 view .LVU4959
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14361              		.loc 1 577 25 view .LVU4960
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14362              		.loc 1 578 13 view .LVU4961
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14363              		.loc 1 577 32 view .LVU4962
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14364              		.loc 1 577 25 view .LVU4963
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14365              		.loc 1 578 13 view .LVU4964
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14366              		.loc 1 577 32 view .LVU4965
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14367              		.loc 1 577 25 view .LVU4966
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14368              		.loc 1 577 25 is_stmt 0 view .LVU4967
 14369              	.LBE687:
 14370              	.LBB688:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14371              		.loc 1 579 25 is_stmt 1 view .LVU4968
 580:sieve_extend.c ****     }
 14372              		.loc 1 580 13 view .LVU4969
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14373              		.loc 1 579 32 view .LVU4970
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14374              		.loc 1 579 25 view .LVU4971
 580:sieve_extend.c ****     }
 14375              		.loc 1 580 13 view .LVU4972
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14376              		.loc 1 579 32 view .LVU4973
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14377              		.loc 1 579 25 view .LVU4974
 580:sieve_extend.c ****     }
 14378              		.loc 1 580 13 view .LVU4975
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14379              		.loc 1 579 32 view .LVU4976
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14380              		.loc 1 579 25 view .LVU4977
 580:sieve_extend.c ****     }
 14381              		.loc 1 580 13 view .LVU4978
 14382              	.LBE688:
 14383              	.LBB689:
 14384              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14385              		.loc 1 578 25 is_stmt 0 view .LVU4979
 14386 4fba C463FD00 		vpermq	ymm14, YMMWORD PTR [rsi+rax], 85	# vect__102.646, MEM[base: src_35(D), index: ivtmp.660_114
 14386      340655
 14387 4fc1 C4E3FD00 		vpermq	ymm6, YMMWORD PTR 32[rsi+rax], 85	# vect__102.646, MEM[base: src_35(D), index: ivtmp.660_11
 14387      74062055 
 14388              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14389              		.loc 1 578 34 view .LVU4980
 14390 4fc9 C5FE6F14 		vmovdqu	ymm2, YMMWORD PTR [rsi+rax]	# tmp270, MEM[base: src_35(D), index: ivtmp.660_114, offset: 0
 14390      06
 14391              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
GAS LISTING /tmp/ccNeV1of.s 			page 390


 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14392              		.loc 1 578 25 view .LVU4981
 14393 4fce C463FD00 		vpermq	ymm10, YMMWORD PTR 64[rsi+rax], 85	# vect__102.646, MEM[base: src_35(D), index: ivtmp.660_1
 14393      54064055 
 14394              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14395              		.loc 1 578 34 view .LVU4982
 14396 4fd6 C5FE6F5C 		vmovdqu	ymm3, YMMWORD PTR 32[rsi+rax]	# tmp271, MEM[base: src_35(D), index: ivtmp.660_114, offset:
 14396      0620
 14397 4fdc 4183C108 		add	r9d, 8	# ivtmp.657,
 14398              	.LBE689:
 14399              	.LBB690:
 14400              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14401              		.loc 1 580 34 view .LVU4983
 14402 4fe0 C50DD3F8 		vpsrlq	ymm15, ymm14, xmm0	# vect__57.647, vect__102.646, _4
 14403 4fe4 C5CDD3F8 		vpsrlq	ymm7, ymm6, xmm0	# vect__57.647, vect__102.646, _4
 14404              	.LBE690:
 14405              	.LBB691:
 14406              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14407              		.loc 1 578 34 view .LVU4984
 14408 4fe8 C5EDF3E9 		vpsllq	ymm5, ymm2, xmm1	# vect__104.651, tmp270, shift
 14409 4fec C565F3C1 		vpsllq	ymm8, ymm3, xmm1	# vect__104.651, tmp271, shift
 14410 4ff0 C57E6F64 		vmovdqu	ymm12, YMMWORD PTR 64[rsi+rax]	# tmp272, MEM[base: src_35(D), index: ivtmp.660_114, offset
 14410      0640
 14411              	.LBE691:
 14412              	.LBB692:
 14413              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14414              		.loc 1 580 22 view .LVU4985
 14415 4ff6 C585EBE5 		vpor	ymm4, ymm15, ymm5	# vect__58.652, vect__57.647, vect__104.651
 14416              	.LBE692:
 14417              	.LBB693:
 14418              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14419              		.loc 1 578 34 view .LVU4986
 14420 4ffa C5FE6F9C 		vmovdqu	ymm3, YMMWORD PTR 128[rsi+rax]	# tmp274, MEM[base: src_35(D), index: ivtmp.660_114, offset
 14420      06800000 
 14420      00
 14421              	.LBE693:
 14422              	.LBB694:
 14423              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14424              		.loc 1 580 22 view .LVU4987
 14425 5003 C44145EB 		vpor	ymm9, ymm7, ymm8	# vect__58.652, vect__57.647, vect__104.651
 14425      C8
 14426              	.LBE694:
 14427              	.LBB695:
 14428              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14429              		.loc 1 578 25 view .LVU4988
 14430 5008 C463FD00 		vpermq	ymm15, YMMWORD PTR 96[rsi+rax], 85	# vect__102.646, MEM[base: src_35(D), index: ivtmp.660_1
 14430      7C066055 
 14431 5010 C4E3FD00 		vpermq	ymm7, YMMWORD PTR 128[rsi+rax], 85	# vect__102.646, MEM[base: src_35(D), index: ivtmp.660_1
 14431      BC068000 
 14431      000055
GAS LISTING /tmp/ccNeV1of.s 			page 391


 14432              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14433              		.loc 1 578 34 view .LVU4989
 14434 501b C5FE6F6C 		vmovdqu	ymm5, YMMWORD PTR 96[rsi+rax]	# tmp273, MEM[base: src_35(D), index: ivtmp.660_114, offset:
 14434      0660
 14435              	.LBE695:
 14436              	.LBB696:
 14437              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14438              		.loc 1 580 34 view .LVU4990
 14439 5021 C52DD3D8 		vpsrlq	ymm11, ymm10, xmm0	# vect__57.647, vect__102.646, _4
 14440              	.LBE696:
 14441              	.LBB697:
 14442              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14443              		.loc 1 578 34 view .LVU4991
 14444 5025 C51DF3E9 		vpsllq	ymm13, ymm12, xmm1	# vect__104.651, tmp272, shift
 14445              	.LBE697:
 14446              	.LBB698:
 14447              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14448              		.loc 1 580 34 view .LVU4992
 14449 5029 C585D3D0 		vpsrlq	ymm2, ymm15, xmm0	# vect__57.647, vect__102.646, _4
 14450              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14451              		.loc 1 580 22 view .LVU4993
 14452 502d C5FE7F24 		vmovdqu	YMMWORD PTR [rdi+rax], ymm4	# MEM[base: dst_34(D), index: ivtmp.660_114, offset: 0B], vect
 14452      07
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14453              		.loc 1 579 32 is_stmt 1 view .LVU4994
 14454              	.LVL863:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14455              		.loc 1 579 25 view .LVU4995
 14456              	.LBE698:
 575:sieve_extend.c ****     {
 14457              		.loc 1 575 24 view .LVU4996
 575:sieve_extend.c ****     {
 14458              		.loc 1 575 12 view .LVU4997
 14459              	.LBB699:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14460              		.loc 1 577 25 view .LVU4998
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14461              		.loc 1 578 13 view .LVU4999
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14462              		.loc 1 577 32 view .LVU5000
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14463              		.loc 1 577 25 view .LVU5001
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14464              		.loc 1 578 13 view .LVU5002
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14465              		.loc 1 577 32 view .LVU5003
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14466              		.loc 1 577 25 view .LVU5004
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14467              		.loc 1 578 13 view .LVU5005
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14468              		.loc 1 577 32 view .LVU5006
GAS LISTING /tmp/ccNeV1of.s 			page 392


 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14469              		.loc 1 577 25 view .LVU5007
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14470              		.loc 1 578 13 view .LVU5008
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14471              		.loc 1 577 32 view .LVU5009
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14472              		.loc 1 577 25 view .LVU5010
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14473              		.loc 1 577 25 is_stmt 0 view .LVU5011
 14474              	.LBE699:
 14475              	.LBB700:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14476              		.loc 1 579 25 is_stmt 1 view .LVU5012
 580:sieve_extend.c ****     }
 14477              		.loc 1 580 13 view .LVU5013
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14478              		.loc 1 579 32 view .LVU5014
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14479              		.loc 1 579 25 view .LVU5015
 580:sieve_extend.c ****     }
 14480              		.loc 1 580 13 view .LVU5016
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14481              		.loc 1 579 32 view .LVU5017
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14482              		.loc 1 579 25 view .LVU5018
 580:sieve_extend.c ****     }
 14483              		.loc 1 580 13 view .LVU5019
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14484              		.loc 1 579 32 view .LVU5020
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14485              		.loc 1 579 25 view .LVU5021
 580:sieve_extend.c ****     }
 14486              		.loc 1 580 13 view .LVU5022
 14487              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14488              		.loc 1 580 22 is_stmt 0 view .LVU5023
 14489 5032 C44125EB 		vpor	ymm14, ymm11, ymm13	# vect__58.652, vect__57.647, vect__104.651
 14489      F5
 14490              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14491              		.loc 1 580 34 view .LVU5024
 14492 5037 C545D3C0 		vpsrlq	ymm8, ymm7, xmm0	# vect__57.647, vect__102.646, _4
 14493              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14494              		.loc 1 580 22 view .LVU5025
 14495 503b C57E7F4C 		vmovdqu	YMMWORD PTR 32[rdi+rax], ymm9	# MEM[base: dst_34(D), index: ivtmp.660_114, offset: 0B], ve
 14495      0720
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14496              		.loc 1 579 32 is_stmt 1 view .LVU5026
 14497              	.LVL864:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14498              		.loc 1 579 25 view .LVU5027
 14499              	.LBE700:
 575:sieve_extend.c ****     {
 14500              		.loc 1 575 24 view .LVU5028
 575:sieve_extend.c ****     {
GAS LISTING /tmp/ccNeV1of.s 			page 393


 14501              		.loc 1 575 12 view .LVU5029
 14502              	.LBB701:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14503              		.loc 1 577 25 view .LVU5030
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14504              		.loc 1 578 13 view .LVU5031
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14505              		.loc 1 577 32 view .LVU5032
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14506              		.loc 1 577 25 view .LVU5033
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14507              		.loc 1 578 13 view .LVU5034
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14508              		.loc 1 577 32 view .LVU5035
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14509              		.loc 1 577 25 view .LVU5036
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14510              		.loc 1 578 13 view .LVU5037
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14511              		.loc 1 577 32 view .LVU5038
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14512              		.loc 1 577 25 view .LVU5039
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14513              		.loc 1 578 13 view .LVU5040
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14514              		.loc 1 577 32 view .LVU5041
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14515              		.loc 1 577 25 view .LVU5042
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14516              		.loc 1 577 25 is_stmt 0 view .LVU5043
 14517              	.LBE701:
 14518              	.LBB702:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14519              		.loc 1 579 25 is_stmt 1 view .LVU5044
 580:sieve_extend.c ****     }
 14520              		.loc 1 580 13 view .LVU5045
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14521              		.loc 1 579 32 view .LVU5046
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14522              		.loc 1 579 25 view .LVU5047
 580:sieve_extend.c ****     }
 14523              		.loc 1 580 13 view .LVU5048
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14524              		.loc 1 579 32 view .LVU5049
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14525              		.loc 1 579 25 view .LVU5050
 580:sieve_extend.c ****     }
 14526              		.loc 1 580 13 view .LVU5051
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14527              		.loc 1 579 32 view .LVU5052
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14528              		.loc 1 579 25 view .LVU5053
 580:sieve_extend.c ****     }
 14529              		.loc 1 580 13 view .LVU5054
 14530              	.LBE702:
 14531              	.LBB703:
 14532              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
GAS LISTING /tmp/ccNeV1of.s 			page 394


 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14533              		.loc 1 578 25 is_stmt 0 view .LVU5055
 14534 5041 C463FD00 		vpermq	ymm11, YMMWORD PTR 160[rsi+rax], 85	# vect__102.646, MEM[base: src_35(D), index: ivtmp.660_
 14534      9C06A000 
 14534      000055
 14535              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14536              		.loc 1 578 34 view .LVU5056
 14537 504c C5D5F3E1 		vpsllq	ymm4, ymm5, xmm1	# vect__104.651, tmp273, shift
 14538 5050 C565F3C9 		vpsllq	ymm9, ymm3, xmm1	# vect__104.651, tmp274, shift
 14539 5054 C57E6FAC 		vmovdqu	ymm13, YMMWORD PTR 160[rsi+rax]	# tmp275, MEM[base: src_35(D), index: ivtmp.660_114, offse
 14539      06A00000 
 14539      00
 14540              	.LBE703:
 14541              	.LBB704:
 14542              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14543              		.loc 1 580 22 view .LVU5057
 14544 505d C5EDEBF4 		vpor	ymm6, ymm2, ymm4	# vect__58.652, vect__57.647, vect__104.651
 14545              	.LBE704:
 14546              	.LBB705:
 14547              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14548              		.loc 1 578 34 view .LVU5058
 14549 5061 C5FE6F9C 		vmovdqu	ymm3, YMMWORD PTR 224[rsi+rax]	# tmp277, MEM[base: src_35(D), index: ivtmp.660_114, offset
 14549      06E00000 
 14549      00
 14550              	.LBE705:
 14551              	.LBB706:
 14552              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14553              		.loc 1 580 22 view .LVU5059
 14554 506a C4413DEB 		vpor	ymm10, ymm8, ymm9	# vect__58.652, vect__57.647, vect__104.651
 14554      D1
 14555              	.LBE706:
 14556              	.LBB707:
 14557              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14558              		.loc 1 578 25 view .LVU5060
 14559 506f C4E3FD00 		vpermq	ymm2, YMMWORD PTR 192[rsi+rax], 85	# vect__102.646, MEM[base: src_35(D), index: ivtmp.660_1
 14559      9406C000 
 14559      000055
 14560 507a C463FD00 		vpermq	ymm8, YMMWORD PTR 224[rsi+rax], 85	# vect__102.646, MEM[base: src_35(D), index: ivtmp.660_1
 14560      8406E000 
 14560      000055
 14561              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14562              		.loc 1 578 34 view .LVU5061
 14563 5085 C5FE6FA4 		vmovdqu	ymm4, YMMWORD PTR 192[rsi+rax]	# tmp276, MEM[base: src_35(D), index: ivtmp.660_114, offset
 14563      06C00000 
 14563      00
 14564              	.LBE707:
 14565              	.LBB708:
 14566              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14567              		.loc 1 580 22 view .LVU5062
 14568 508e C57E7F74 		vmovdqu	YMMWORD PTR 64[rdi+rax], ymm14	# MEM[base: dst_34(D), index: ivtmp.660_114, offset: 0B], v
GAS LISTING /tmp/ccNeV1of.s 			page 395


 14568      0740
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14569              		.loc 1 579 32 is_stmt 1 view .LVU5063
 14570              	.LVL865:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14571              		.loc 1 579 25 view .LVU5064
 14572              	.LBE708:
 575:sieve_extend.c ****     {
 14573              		.loc 1 575 24 view .LVU5065
 575:sieve_extend.c ****     {
 14574              		.loc 1 575 12 view .LVU5066
 14575              	.LBB709:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14576              		.loc 1 577 25 view .LVU5067
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14577              		.loc 1 578 13 view .LVU5068
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14578              		.loc 1 577 32 view .LVU5069
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14579              		.loc 1 577 25 view .LVU5070
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14580              		.loc 1 578 13 view .LVU5071
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14581              		.loc 1 577 32 view .LVU5072
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14582              		.loc 1 577 25 view .LVU5073
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14583              		.loc 1 578 13 view .LVU5074
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14584              		.loc 1 577 32 view .LVU5075
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14585              		.loc 1 577 25 view .LVU5076
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14586              		.loc 1 578 13 view .LVU5077
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14587              		.loc 1 577 32 view .LVU5078
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14588              		.loc 1 577 25 view .LVU5079
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14589              		.loc 1 577 25 is_stmt 0 view .LVU5080
 14590              	.LBE709:
 14591              	.LBB710:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14592              		.loc 1 579 25 is_stmt 1 view .LVU5081
 580:sieve_extend.c ****     }
 14593              		.loc 1 580 13 view .LVU5082
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14594              		.loc 1 579 32 view .LVU5083
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14595              		.loc 1 579 25 view .LVU5084
 580:sieve_extend.c ****     }
 14596              		.loc 1 580 13 view .LVU5085
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14597              		.loc 1 579 32 view .LVU5086
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14598              		.loc 1 579 25 view .LVU5087
 580:sieve_extend.c ****     }
GAS LISTING /tmp/ccNeV1of.s 			page 396


 14599              		.loc 1 580 13 view .LVU5088
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14600              		.loc 1 579 32 view .LVU5089
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14601              		.loc 1 579 25 view .LVU5090
 580:sieve_extend.c ****     }
 14602              		.loc 1 580 13 view .LVU5091
 14603              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14604              		.loc 1 580 34 is_stmt 0 view .LVU5092
 14605 5094 C525D3E0 		vpsrlq	ymm12, ymm11, xmm0	# vect__57.647, vect__102.646, _4
 14606              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14607              		.loc 1 580 22 view .LVU5093
 14608 5098 C5FE7F74 		vmovdqu	YMMWORD PTR 96[rdi+rax], ymm6	# MEM[base: dst_34(D), index: ivtmp.660_114, offset: 0B], ve
 14608      0760
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14609              		.loc 1 579 32 is_stmt 1 view .LVU5094
 14610              	.LVL866:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14611              		.loc 1 579 25 view .LVU5095
 14612              	.LBE710:
 575:sieve_extend.c ****     {
 14613              		.loc 1 575 24 view .LVU5096
 575:sieve_extend.c ****     {
 14614              		.loc 1 575 12 view .LVU5097
 14615              	.LBB711:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14616              		.loc 1 577 25 view .LVU5098
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14617              		.loc 1 578 13 view .LVU5099
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14618              		.loc 1 577 32 view .LVU5100
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14619              		.loc 1 577 25 view .LVU5101
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14620              		.loc 1 578 13 view .LVU5102
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14621              		.loc 1 577 32 view .LVU5103
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14622              		.loc 1 577 25 view .LVU5104
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14623              		.loc 1 578 13 view .LVU5105
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14624              		.loc 1 577 32 view .LVU5106
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14625              		.loc 1 577 25 view .LVU5107
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14626              		.loc 1 578 13 view .LVU5108
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14627              		.loc 1 577 32 view .LVU5109
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14628              		.loc 1 577 25 view .LVU5110
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14629              		.loc 1 577 25 is_stmt 0 view .LVU5111
 14630              	.LBE711:
 14631              	.LBB712:
GAS LISTING /tmp/ccNeV1of.s 			page 397


 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14632              		.loc 1 579 25 is_stmt 1 view .LVU5112
 580:sieve_extend.c ****     }
 14633              		.loc 1 580 13 view .LVU5113
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14634              		.loc 1 579 32 view .LVU5114
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14635              		.loc 1 579 25 view .LVU5115
 580:sieve_extend.c ****     }
 14636              		.loc 1 580 13 view .LVU5116
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14637              		.loc 1 579 32 view .LVU5117
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14638              		.loc 1 579 25 view .LVU5118
 580:sieve_extend.c ****     }
 14639              		.loc 1 580 13 view .LVU5119
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14640              		.loc 1 579 32 view .LVU5120
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14641              		.loc 1 579 25 view .LVU5121
 580:sieve_extend.c ****     }
 14642              		.loc 1 580 13 view .LVU5122
 14643              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14644              		.loc 1 580 22 is_stmt 0 view .LVU5123
 14645 509e C57E7F94 		vmovdqu	YMMWORD PTR 128[rdi+rax], ymm10	# MEM[base: dst_34(D), index: ivtmp.660_114, offset: 0B], 
 14645      07800000 
 14645      00
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14646              		.loc 1 579 32 is_stmt 1 view .LVU5124
 14647              	.LVL867:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14648              		.loc 1 579 25 view .LVU5125
 14649              	.LBE712:
 575:sieve_extend.c ****     {
 14650              		.loc 1 575 24 view .LVU5126
 575:sieve_extend.c ****     {
 14651              		.loc 1 575 12 view .LVU5127
 14652              	.LBB713:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14653              		.loc 1 577 25 view .LVU5128
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14654              		.loc 1 578 13 view .LVU5129
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14655              		.loc 1 577 32 view .LVU5130
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14656              		.loc 1 577 25 view .LVU5131
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14657              		.loc 1 578 13 view .LVU5132
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14658              		.loc 1 577 32 view .LVU5133
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14659              		.loc 1 577 25 view .LVU5134
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14660              		.loc 1 578 13 view .LVU5135
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14661              		.loc 1 577 32 view .LVU5136
GAS LISTING /tmp/ccNeV1of.s 			page 398


 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14662              		.loc 1 577 25 view .LVU5137
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14663              		.loc 1 578 13 view .LVU5138
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14664              		.loc 1 577 32 view .LVU5139
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14665              		.loc 1 577 25 view .LVU5140
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14666              		.loc 1 577 25 is_stmt 0 view .LVU5141
 14667              	.LBE713:
 14668              	.LBB714:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14669              		.loc 1 579 25 is_stmt 1 view .LVU5142
 580:sieve_extend.c ****     }
 14670              		.loc 1 580 13 view .LVU5143
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14671              		.loc 1 579 32 view .LVU5144
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14672              		.loc 1 579 25 view .LVU5145
 580:sieve_extend.c ****     }
 14673              		.loc 1 580 13 view .LVU5146
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14674              		.loc 1 579 32 view .LVU5147
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14675              		.loc 1 579 25 view .LVU5148
 580:sieve_extend.c ****     }
 14676              		.loc 1 580 13 view .LVU5149
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14677              		.loc 1 579 32 view .LVU5150
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14678              		.loc 1 579 25 view .LVU5151
 580:sieve_extend.c ****     }
 14679              		.loc 1 580 13 view .LVU5152
 14680              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14681              		.loc 1 580 34 is_stmt 0 view .LVU5153
 14682 50a7 C5EDD3E8 		vpsrlq	ymm5, ymm2, xmm0	# vect__57.647, vect__102.646, _4
 14683              	.LBE714:
 14684              	.LBB715:
 14685              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14686              		.loc 1 578 34 view .LVU5154
 14687 50ab C515F3F1 		vpsllq	ymm14, ymm13, xmm1	# vect__104.651, tmp275, shift
 14688              	.LBE715:
 14689              	.LBB716:
 14690              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14691              		.loc 1 580 34 view .LVU5155
 14692 50af C53DD3C8 		vpsrlq	ymm9, ymm8, xmm0	# vect__57.647, vect__102.646, _4
 14693              	.LBE716:
 14694              	.LBB717:
 14695              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14696              		.loc 1 578 34 view .LVU5156
 14697 50b3 C5DDF3F1 		vpsllq	ymm6, ymm4, xmm1	# vect__104.651, tmp276, shift
 14698 50b7 C565F3D1 		vpsllq	ymm10, ymm3, xmm1	# vect__104.651, tmp277, shift
GAS LISTING /tmp/ccNeV1of.s 			page 399


 14699              	.LBE717:
 14700              	.LBB718:
 14701              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14702              		.loc 1 580 22 view .LVU5157
 14703 50bb C4411DEB 		vpor	ymm15, ymm12, ymm14	# vect__58.652, vect__57.647, vect__104.651
 14703      FE
 14704 50c0 C5D5EBFE 		vpor	ymm7, ymm5, ymm6	# vect__58.652, vect__57.647, vect__104.651
 14705 50c4 C57E7FBC 		vmovdqu	YMMWORD PTR 160[rdi+rax], ymm15	# MEM[base: dst_34(D), index: ivtmp.660_114, offset: 0B], 
 14705      07A00000 
 14705      00
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14706              		.loc 1 579 32 is_stmt 1 view .LVU5158
 14707              	.LVL868:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14708              		.loc 1 579 25 view .LVU5159
 14709              	.LBE718:
 575:sieve_extend.c ****     {
 14710              		.loc 1 575 24 view .LVU5160
 575:sieve_extend.c ****     {
 14711              		.loc 1 575 12 view .LVU5161
 14712              	.LBB719:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14713              		.loc 1 577 25 view .LVU5162
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14714              		.loc 1 578 13 view .LVU5163
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14715              		.loc 1 577 32 view .LVU5164
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14716              		.loc 1 577 25 view .LVU5165
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14717              		.loc 1 578 13 view .LVU5166
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14718              		.loc 1 577 32 view .LVU5167
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14719              		.loc 1 577 25 view .LVU5168
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14720              		.loc 1 578 13 view .LVU5169
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14721              		.loc 1 577 32 view .LVU5170
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14722              		.loc 1 577 25 view .LVU5171
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14723              		.loc 1 578 13 view .LVU5172
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14724              		.loc 1 577 32 view .LVU5173
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14725              		.loc 1 577 25 view .LVU5174
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14726              		.loc 1 577 25 is_stmt 0 view .LVU5175
 14727              	.LBE719:
 14728              	.LBB720:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14729              		.loc 1 579 25 is_stmt 1 view .LVU5176
 580:sieve_extend.c ****     }
 14730              		.loc 1 580 13 view .LVU5177
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
GAS LISTING /tmp/ccNeV1of.s 			page 400


 14731              		.loc 1 579 32 view .LVU5178
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14732              		.loc 1 579 25 view .LVU5179
 580:sieve_extend.c ****     }
 14733              		.loc 1 580 13 view .LVU5180
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14734              		.loc 1 579 32 view .LVU5181
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14735              		.loc 1 579 25 view .LVU5182
 580:sieve_extend.c ****     }
 14736              		.loc 1 580 13 view .LVU5183
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14737              		.loc 1 579 32 view .LVU5184
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14738              		.loc 1 579 25 view .LVU5185
 580:sieve_extend.c ****     }
 14739              		.loc 1 580 13 view .LVU5186
 14740              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14741              		.loc 1 580 22 is_stmt 0 view .LVU5187
 14742 50cd C44135EB 		vpor	ymm11, ymm9, ymm10	# vect__58.652, vect__57.647, vect__104.651
 14742      DA
 14743 50d2 C5FE7FBC 		vmovdqu	YMMWORD PTR 192[rdi+rax], ymm7	# MEM[base: dst_34(D), index: ivtmp.660_114, offset: 0B], v
 14743      07C00000 
 14743      00
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14744              		.loc 1 579 32 is_stmt 1 view .LVU5188
 14745              	.LVL869:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14746              		.loc 1 579 25 view .LVU5189
 14747              	.LBE720:
 575:sieve_extend.c ****     {
 14748              		.loc 1 575 24 view .LVU5190
 575:sieve_extend.c ****     {
 14749              		.loc 1 575 12 view .LVU5191
 14750              	.LBB721:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14751              		.loc 1 577 25 view .LVU5192
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14752              		.loc 1 578 13 view .LVU5193
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14753              		.loc 1 577 32 view .LVU5194
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14754              		.loc 1 577 25 view .LVU5195
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14755              		.loc 1 578 13 view .LVU5196
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14756              		.loc 1 577 32 view .LVU5197
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14757              		.loc 1 577 25 view .LVU5198
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14758              		.loc 1 578 13 view .LVU5199
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14759              		.loc 1 577 32 view .LVU5200
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14760              		.loc 1 577 25 view .LVU5201
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
GAS LISTING /tmp/ccNeV1of.s 			page 401


 14761              		.loc 1 578 13 view .LVU5202
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14762              		.loc 1 577 32 view .LVU5203
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14763              		.loc 1 577 25 view .LVU5204
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14764              		.loc 1 577 25 is_stmt 0 view .LVU5205
 14765              	.LBE721:
 14766              	.LBB722:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14767              		.loc 1 579 25 is_stmt 1 view .LVU5206
 580:sieve_extend.c ****     }
 14768              		.loc 1 580 13 view .LVU5207
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14769              		.loc 1 579 32 view .LVU5208
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14770              		.loc 1 579 25 view .LVU5209
 580:sieve_extend.c ****     }
 14771              		.loc 1 580 13 view .LVU5210
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14772              		.loc 1 579 32 view .LVU5211
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14773              		.loc 1 579 25 view .LVU5212
 580:sieve_extend.c ****     }
 14774              		.loc 1 580 13 view .LVU5213
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14775              		.loc 1 579 32 view .LVU5214
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14776              		.loc 1 579 25 view .LVU5215
 580:sieve_extend.c ****     }
 14777              		.loc 1 580 13 view .LVU5216
 14778              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14779              		.loc 1 580 22 is_stmt 0 view .LVU5217
 14780 50db C57E7F9C 		vmovdqu	YMMWORD PTR 224[rdi+rax], ymm11	# MEM[base: dst_34(D), index: ivtmp.660_114, offset: 0B], 
 14780      07E00000 
 14780      00
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14781              		.loc 1 579 32 is_stmt 1 view .LVU5218
 14782              	.LVL870:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14783              		.loc 1 579 25 view .LVU5219
 14784              	.LBE722:
 575:sieve_extend.c ****     {
 14785              		.loc 1 575 24 view .LVU5220
 575:sieve_extend.c ****     {
 14786              		.loc 1 575 12 view .LVU5221
 14787 50e4 48050001 		add	rax, 256	# ivtmp.660,
 14787      0000
 14788 50ea 4539CA   		cmp	r10d, r9d	# tmp164, ivtmp.657
 14789 50ed 0F87C7FE 		ja	.L1134	#,
 14789      FFFF
 14790              	.L1174:
 14791 50f3 4589C3   		mov	r11d, r8d	# _25, _25
 14792 50f6 428D0495 		lea	eax, 0[0+r10*4]	# i,
 14792      00000000 
 14793 50fe 4983C301 		add	r11, 1	# tmp140,
GAS LISTING /tmp/ccNeV1of.s 			page 402


 14794 5102 49C1E305 		sal	r11, 5	# _105,
 14795 5106 4C01DF   		add	rdi, r11	# dst, _105
 14796 5109 4C01DE   		add	rsi, r11	# src, _105
 14797 510c C5F877   		vzeroupper
 14798              	.LVL871:
 14799              	.L1135:
 582:sieve_extend.c ****     {
 14800              		.loc 1 582 12 view .LVU5222
 14801              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 14802              		.loc 1 582 5 is_stmt 0 view .LVU5223
 14803 510f 39C2     		cmp	edx, eax	# size, i
 14804 5111 0F8E9400 		jle	.L1178	#,
 14804      0000
 14805              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14806              		.loc 1 584 35 view .LVU5224
 14807 5117 4C8B5608 		mov	r10, QWORD PTR 8[rsi]	# _57, MEM[(const uint64_t *)src_30 + 8B]
 14808 511b 41B84000 		mov	r8d, 64	# tmp142,
 14808      0000
 14809              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14810              		.loc 1 584 23 view .LVU5225
 14811 5121 C462F3F7 		shrx	r9, QWORD PTR [rsi], rcx	# tmp143, *src_30, shift
 14811      0E
 14812 5126 4129C8   		sub	r8d, ecx	# _97, shift
 584:sieve_extend.c ****     }    
 14813              		.loc 1 584 9 is_stmt 1 view .LVU5226
 14814              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14815              		.loc 1 584 43 is_stmt 0 view .LVU5227
 14816 5129 C442B9F7 		shlx	r11, r10, r8	# tmp145, _57, _97
 14816      DA
 14817              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14818              		.loc 1 584 32 view .LVU5228
 14819 512e 4D09D9   		or	r9, r11	# tmp146, tmp145
 14820 5131 4C890F   		mov	QWORD PTR [rdi], r9	# *dst_86, tmp146
 582:sieve_extend.c ****     {
 14821              		.loc 1 582 22 is_stmt 1 view .LVU5229
 14822              	.LVL872:
 582:sieve_extend.c ****     {
 14823              		.loc 1 582 12 view .LVU5230
 14824              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 14825              		.loc 1 582 22 is_stmt 0 view .LVU5231
 14826 5134 448D4801 		lea	r9d, 1[rax]	# i,
 14827              	.LVL873:
 14828              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 14829              		.loc 1 582 5 view .LVU5232
 14830 5138 4439CA   		cmp	edx, r9d	# size, i
 14831 513b 7E6D     		jle	.L1175	#,
 584:sieve_extend.c ****     }    
 14832              		.loc 1 584 9 is_stmt 1 view .LVU5233
 14833              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
GAS LISTING /tmp/ccNeV1of.s 			page 403


 14834              		.loc 1 584 35 is_stmt 0 view .LVU5234
 14835 513d 4C8B4E10 		mov	r9, QWORD PTR 16[rsi]	# _109, MEM[(const uint64_t *)src_30 + 16B]
 14836              	.LVL874:
 14837              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14838              		.loc 1 584 23 view .LVU5235
 14839 5141 C442F3F7 		shrx	r10, r10, rcx	# tmp148, _57, shift
 14839      D2
 14840              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14841              		.loc 1 584 43 view .LVU5236
 14842 5146 C442B9F7 		shlx	r11, r9, r8	# tmp149, _109, _97
 14842      D9
 14843              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14844              		.loc 1 584 32 view .LVU5237
 14845 514b 4D09DA   		or	r10, r11	# tmp150, tmp149
 14846 514e 4C895708 		mov	QWORD PTR 8[rdi], r10	# MEM[(uint64_t *)dst_86 + 8B], tmp150
 582:sieve_extend.c ****     {
 14847              		.loc 1 582 22 is_stmt 1 view .LVU5238
 14848              	.LVL875:
 582:sieve_extend.c ****     {
 14849              		.loc 1 582 12 view .LVU5239
 14850              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 14851              		.loc 1 582 22 is_stmt 0 view .LVU5240
 14852 5152 448D5002 		lea	r10d, 2[rax]	# i,
 14853              	.LVL876:
 14854              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 14855              		.loc 1 582 5 view .LVU5241
 14856 5156 4439D2   		cmp	edx, r10d	# size, i
 14857 5159 7E4F     		jle	.L1175	#,
 584:sieve_extend.c ****     }    
 14858              		.loc 1 584 9 is_stmt 1 view .LVU5242
 14859              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14860              		.loc 1 584 35 is_stmt 0 view .LVU5243
 14861 515b 4C8B5618 		mov	r10, QWORD PTR 24[rsi]	# _54, MEM[(const uint64_t *)src_30 + 24B]
 14862              	.LVL877:
 14863              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14864              		.loc 1 584 23 view .LVU5244
 14865 515f C442F3F7 		shrx	r9, r9, rcx	# tmp152, _109, shift
 14865      C9
 14866              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14867              		.loc 1 584 43 view .LVU5245
 14868 5164 C442B9F7 		shlx	r11, r10, r8	# tmp153, _54, _97
 14868      DA
 14869              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14870              		.loc 1 584 32 view .LVU5246
 14871 5169 4D09D9   		or	r9, r11	# tmp154, tmp153
 14872 516c 4C894F10 		mov	QWORD PTR 16[rdi], r9	# MEM[(uint64_t *)dst_86 + 16B], tmp154
 582:sieve_extend.c ****     {
 14873              		.loc 1 582 22 is_stmt 1 view .LVU5247
GAS LISTING /tmp/ccNeV1of.s 			page 404


 14874              	.LVL878:
 582:sieve_extend.c ****     {
 14875              		.loc 1 582 12 view .LVU5248
 14876              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 14877              		.loc 1 582 22 is_stmt 0 view .LVU5249
 14878 5170 448D4803 		lea	r9d, 3[rax]	# i,
 14879              	.LVL879:
 14880              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 14881              		.loc 1 582 5 view .LVU5250
 14882 5174 4439CA   		cmp	edx, r9d	# size, i
 14883 5177 7E31     		jle	.L1175	#,
 584:sieve_extend.c ****     }    
 14884              		.loc 1 584 9 is_stmt 1 view .LVU5251
 14885              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14886              		.loc 1 584 35 is_stmt 0 view .LVU5252
 14887 5179 4C8B4E20 		mov	r9, QWORD PTR 32[rsi]	# _77, MEM[(const uint64_t *)src_30 + 32B]
 14888              	.LVL880:
 14889              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 14890              		.loc 1 582 22 view .LVU5253
 14891 517d 83C004   		add	eax, 4	# i,
 14892              	.LVL881:
 14893              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14894              		.loc 1 584 23 view .LVU5254
 14895 5180 C442F3F7 		shrx	r10, r10, rcx	# tmp156, _54, shift
 14895      D2
 14896              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14897              		.loc 1 584 43 view .LVU5255
 14898 5185 C442B9F7 		shlx	r11, r9, r8	# tmp157, _77, _97
 14898      D9
 14899              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14900              		.loc 1 584 32 view .LVU5256
 14901 518a 4D09DA   		or	r10, r11	# tmp158, tmp157
 14902              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 14903              		.loc 1 582 5 view .LVU5257
 14904 518d 39C2     		cmp	edx, eax	# size, i
 14905              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14906              		.loc 1 584 32 view .LVU5258
 14907 518f 4C895718 		mov	QWORD PTR 24[rdi], r10	# MEM[(uint64_t *)dst_86 + 24B], tmp158
 582:sieve_extend.c ****     {
 14908              		.loc 1 582 22 is_stmt 1 view .LVU5259
 14909              	.LVL882:
 582:sieve_extend.c ****     {
 14910              		.loc 1 582 12 view .LVU5260
 14911              	# sieve_extend.c:582:     for (; i < size; ++i,++src,++dst)
 582:sieve_extend.c ****     {
 14912              		.loc 1 582 5 is_stmt 0 view .LVU5261
 14913 5193 7E15     		jle	.L1175	#,
 584:sieve_extend.c ****     }    
GAS LISTING /tmp/ccNeV1of.s 			page 405


 14914              		.loc 1 584 9 is_stmt 1 discriminator 2 view .LVU5262
 14915              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14916              		.loc 1 584 43 is_stmt 0 discriminator 2 view .LVU5263
 14917 5195 488B5628 		mov	rdx, QWORD PTR 40[rsi]	# MEM[(const uint64_t *)src_30 + 40B], MEM[(const uint64_t *)src_30 + 4
 14918              	.LVL883:
 14919              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14920              		.loc 1 584 23 discriminator 2 view .LVU5264
 14921 5199 C4C2F3F7 		shrx	rcx, r9, rcx	# tmp162, _77, shift
 14921      C9
 14922              	.LVL884:
 14923              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14924              		.loc 1 584 43 discriminator 2 view .LVU5265
 14925 519e C4E2B9F7 		shlx	rsi, rdx, r8	# tmp160, MEM[(const uint64_t *)src_30 + 40B], _97
 14925      F2
 14926              	.LVL885:
 14927              	# sieve_extend.c:584:         *dst = ((*src)>>shift) | (*(src+1)<<(64-shift));
 584:sieve_extend.c ****     }    
 14928              		.loc 1 584 32 discriminator 2 view .LVU5266
 14929 51a3 4809F1   		or	rcx, rsi	# tmp163, tmp160
 14930 51a6 48894F20 		mov	QWORD PTR 32[rdi], rcx	# MEM[(uint64_t *)dst_86 + 32B], tmp163
 582:sieve_extend.c ****     {
 14931              		.loc 1 582 22 is_stmt 1 discriminator 2 view .LVU5267
 14932              	.LVL886:
 582:sieve_extend.c ****     {
 14933              		.loc 1 582 12 discriminator 2 view .LVU5268
 14934              	.L1175:
 14935              	# sieve_extend.c:586: }
 586:sieve_extend.c **** 
 14936              		.loc 1 586 1 is_stmt 0 view .LVU5269
 14937 51aa C3       		ret	
 14938              	.LVL887:
 14939              	.L1178:
 586:sieve_extend.c **** 
 14940              		.loc 1 586 1 view .LVU5270
 14941 51ab C3       		ret	
 14942              	.LVL888:
 14943              	.L1177:
 14944              	.LBB723:
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14945              		.loc 1 577 25 is_stmt 1 view .LVU5271
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14946              		.loc 1 578 13 view .LVU5272
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14947              		.loc 1 577 32 view .LVU5273
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14948              		.loc 1 577 25 view .LVU5274
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14949              		.loc 1 578 13 view .LVU5275
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14950              		.loc 1 577 32 view .LVU5276
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14951              		.loc 1 577 25 view .LVU5277
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14952              		.loc 1 578 13 view .LVU5278
GAS LISTING /tmp/ccNeV1of.s 			page 406


 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14953              		.loc 1 577 32 view .LVU5279
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14954              		.loc 1 577 25 view .LVU5280
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14955              		.loc 1 578 13 view .LVU5281
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14956              		.loc 1 577 32 view .LVU5282
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14957              		.loc 1 577 25 view .LVU5283
 577:sieve_extend.c ****             *(dst+j) = (*(src+j))<<shift;
 14958              		.loc 1 577 25 is_stmt 0 view .LVU5284
 14959              	.LBE723:
 14960              	.LBB724:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14961              		.loc 1 579 25 is_stmt 1 view .LVU5285
 580:sieve_extend.c ****     }
 14962              		.loc 1 580 13 view .LVU5286
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14963              		.loc 1 579 32 view .LVU5287
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14964              		.loc 1 579 25 view .LVU5288
 580:sieve_extend.c ****     }
 14965              		.loc 1 580 13 view .LVU5289
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14966              		.loc 1 579 32 view .LVU5290
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14967              		.loc 1 579 25 view .LVU5291
 580:sieve_extend.c ****     }
 14968              		.loc 1 580 13 view .LVU5292
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14969              		.loc 1 579 32 view .LVU5293
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14970              		.loc 1 579 25 view .LVU5294
 580:sieve_extend.c ****     }
 14971              		.loc 1 580 13 view .LVU5295
 14972              	.LBE724:
 14973              	.LBB725:
 14974              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14975              		.loc 1 578 25 is_stmt 0 view .LVU5296
 14976 51ac C4E3FD00 		vpermq	ymm7, YMMWORD PTR 32[rsi], 85	# vect__102.646, MEM[base: src_35(D), index: ivtmp.660_114, o
 14976      7E2055
 14977 51b3 41B90200 		mov	r9d, 2	# ivtmp.657,
 14977      0000
 14978              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14979              		.loc 1 578 34 view .LVU5297
 14980 51b9 C57E6F4E 		vmovdqu	ymm9, YMMWORD PTR 32[rsi]	# tmp278, MEM[base: src_35(D), index: ivtmp.660_114, offset: 0B]
 14980      20
 14981 51be B8400000 		mov	eax, 64	# ivtmp.660,
 14981      00
 14982              	.LBE725:
 14983              	.LBB726:
 14984              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14985              		.loc 1 580 34 view .LVU5298
GAS LISTING /tmp/ccNeV1of.s 			page 407


 14986 51c3 C545D3C0 		vpsrlq	ymm8, ymm7, xmm0	# vect__57.647, vect__102.646, _4
 14987              	.LBE726:
 14988              	.LBB727:
 14989              	# sieve_extend.c:578:             *(dst+j) = (*(src+j))<<shift;
 578:sieve_extend.c ****         for (int j = 0; j < 4; ++j)
 14990              		.loc 1 578 34 view .LVU5299
 14991 51c7 C535F3D1 		vpsllq	ymm10, ymm9, xmm1	# vect__104.651, tmp278, shift
 14992              	.LBE727:
 14993              	.LBB728:
 14994              	# sieve_extend.c:580:             *(dst+j) |= (*(src+1)>>(64-shift));
 580:sieve_extend.c ****     }
 14995              		.loc 1 580 22 view .LVU5300
 14996 51cb C4413DEB 		vpor	ymm11, ymm8, ymm10	# vect__58.652, vect__57.647, vect__104.651
 14996      DA
 14997 51d0 C57E7F5F 		vmovdqu	YMMWORD PTR 32[rdi], ymm11	# MEM[base: dst_34(D), index: ivtmp.660_114, offset: 0B], vect_
 14997      20
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 14998              		.loc 1 579 32 is_stmt 1 view .LVU5301
 14999              	.LVL889:
 579:sieve_extend.c ****             *(dst+j) |= (*(src+1)>>(64-shift));
 15000              		.loc 1 579 25 view .LVU5302
 15001              	.LBE728:
 575:sieve_extend.c ****     {
 15002              		.loc 1 575 24 view .LVU5303
 575:sieve_extend.c ****     {
 15003              		.loc 1 575 12 view .LVU5304
 15004 51d5 E9F6FCFF 		jmp	.L1166	#
 15004      FF
 15005              	.LVL890:
 15006              	.L1176:
 15007              	# sieve_extend.c:573:     int i = 0;
 573:sieve_extend.c ****     // MSVC: use steps of 2 for SSE, 4 for AVX2, 8 for AVX512
 15008              		.loc 1 573 9 is_stmt 0 view .LVU5305
 15009 51da 31C0     		xor	eax, eax	# i
 15010 51dc E92EFFFF 		jmp	.L1135	#
 15010      FF
 15011              		.cfi_endproc
 15012              	.LFE70:
 15014              		.section	.rodata.str1.8
 15015 0021 00000000 		.align 8
 15015      000000
 15016              	.LC15:
 15017 0028 52657375 		.string	"Result: Sievesize %ju is expected to have %ju primes. algorithm produced %ju primes\n"
 15017      6C743A20 
 15017      53696576 
 15017      6573697A 
 15017      6520256A 
 15018 007d 000000   		.align 8
 15019              	.LC16:
 15020 0080 4E6F2076 		.string	"No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produced %j
 15020      616C6964 
 15020      20726573 
 15020      756C742E 
 15020      20536965 
 15021              		.section	.rodata.str1.1
 15022              	.LC17:
 15023 002d 44656570 		.string	"DeepAnalyzing"
GAS LISTING /tmp/ccNeV1of.s 			page 408


 15023      416E616C 
 15023      797A696E 
 15023      6700
 15024              		.section	.rodata.str1.8
 15025 00e3 00000000 		.align 8
 15025      00
 15026              	.LC18:
 15027 00e8 4E756D62 		.string	"Number %ju (%ju) was marked prime, but %ju * %ju = %ju\n"
 15027      65722025 
 15027      6A752028 
 15027      256A7529 
 15027      20776173 
 15028              		.align 8
 15029              	.LC19:
 15030 0120 4E756D62 		.string	"Number %ju (%ju) was marked non-prime, but no factors found. So it is prime\n"
 15030      65722025 
 15030      6A752028 
 15030      256A7529 
 15030      20776173 
 15031              		.text
 15032 51e1 66662E0F 		.p2align 4
 15032      1F840000 
 15032      0000000F 
 15032      1F4000
 15033              		.globl	validatePrimeCount
 15035              	validatePrimeCount:
 15036              	.LVL891:
 15037              	.LFB84:
1010:sieve_extend.c **** 
 15038              		.loc 1 1010 72 is_stmt 1 view -0
 15039              		.cfi_startproc
1010:sieve_extend.c **** 
 15040              		.loc 1 1010 72 is_stmt 0 view .LVU5307
 15041 51f0 F30F1EFA 		endbr64	
1012:sieve_extend.c ****     counter_t valid_primes = 0;
 15042              		.loc 1 1012 5 is_stmt 1 view .LVU5308
 15043              	# sieve_extend.c:1010: int validatePrimeCount(struct sieve_t *sieve, int option_verboselevel) {
1010:sieve_extend.c **** 
 15044              		.loc 1 1010 72 is_stmt 0 view .LVU5309
 15045 51f4 4157     		push	r15	#
 15046              		.cfi_def_cfa_offset 16
 15047              		.cfi_offset 15, -16
 15048 51f6 4156     		push	r14	#
 15049              		.cfi_def_cfa_offset 24
 15050              		.cfi_offset 14, -24
 15051 51f8 4155     		push	r13	#
 15052              		.cfi_def_cfa_offset 32
 15053              		.cfi_offset 13, -32
 15054 51fa 4154     		push	r12	#
 15055              		.cfi_def_cfa_offset 40
 15056              		.cfi_offset 12, -40
 15057 51fc 55       		push	rbp	#
 15058              		.cfi_def_cfa_offset 48
 15059              		.cfi_offset 6, -48
 15060 51fd 4889FD   		mov	rbp, rdi	# sieve, tmp307
 15061 5200 53       		push	rbx	#
 15062              		.cfi_def_cfa_offset 56
GAS LISTING /tmp/ccNeV1of.s 			page 409


 15063              		.cfi_offset 3, -56
 15064 5201 89F3     		mov	ebx, esi	# option_verboselevel, tmp308
 15065 5203 488D6424 		lea	rsp, -56[rsp]	#,
 15065      C8
 15066              		.cfi_def_cfa_offset 112
 15067              	# sieve_extend.c:1012:     counter_t primecount = count_primes(sieve);
1012:sieve_extend.c ****     counter_t valid_primes = 0;
 15068              		.loc 1 1012 28 view .LVU5310
 15069 5208 488B17   		mov	rdx, QWORD PTR [rdi]	# _24, MEM[(uint64_t * *)sieve_18(D)]
 15070 520b 488B7F08 		mov	rdi, QWORD PTR 8[rdi]	# _25, MEM[(long unsigned int *)sieve_18(D) + 8B]
 15071              	.LVL892:
 15072              	.LBB750:
 15073              	.LBI750:
 981:sieve_extend.c ****     counter_t primeCount = 1;
 15074              		.loc 1 981 18 is_stmt 1 view .LVU5311
 15075              	.LBB751:
 15076              	.LBB752:
 983:sieve_extend.c ****     return primeCount;
 15077              		.loc 1 983 30 view .LVU5312
 15078 520f 4C8B4D10 		mov	r9, QWORD PTR 16[rbp]	# pretmp_201, sieve_18(D)->size
 15079              	# sieve_extend.c:983:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 983:sieve_extend.c ****     return primeCount;
 15080              		.loc 1 983 5 is_stmt 0 view .LVU5313
 15081 5213 4883FF01 		cmp	rdi, 1	# _25,
 15082 5217 0F860B05 		jbe	.L1180	#,
 15082      0000
 15083              	# sieve_extend.c:983:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 983:sieve_extend.c ****     return primeCount;
 15084              		.loc 1 983 20 view .LVU5314
 15085 521d B8010000 		mov	eax, 1	# factor,
 15085      00
 15086              	.LBE752:
 15087              	# sieve_extend.c:982:     counter_t primeCount = 1;
 982:sieve_extend.c ****     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(sieve->bitarray, factor+
 15088              		.loc 1 982 15 view .LVU5315
 15089 5222 41B80100 		mov	r8d, 1	# primeCount,
 15089      0000
 15090              	.LVL893:
 15091 5228 0F1F8400 		.p2align 4
 15091      00000000 
 15092              		.p2align 3
 15093              	.L1183:
 15094              	.LBB755:
 983:sieve_extend.c ****     return primeCount;
 15095              		.loc 1 983 104 is_stmt 1 view .LVU5316
 15096              	# sieve_extend.c:983:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 983:sieve_extend.c ****     return primeCount;
 15097              		.loc 1 983 114 is_stmt 0 view .LVU5317
 15098 5230 4983C001 		add	r8, 1	# primeCount,
 15099              	.LVL894:
 983:sieve_extend.c ****     return primeCount;
 15100              		.loc 1 983 52 is_stmt 1 view .LVU5318
 15101              	# sieve_extend.c:983:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 983:sieve_extend.c ****     return primeCount;
 15102              		.loc 1 983 61 is_stmt 0 view .LVU5319
 15103 5234 4883C001 		add	rax, 1	# factor,
 15104              	.LVL895:
GAS LISTING /tmp/ccNeV1of.s 			page 410


 15105              	.L1327:
 15106              	.LBB753:
 15107              	.LBI753:
 124:sieve_extend.c ****     while (bitarray[wordindex(index)] & markmask(index)) index++;
 15108              		.loc 1 124 25 is_stmt 1 view .LVU5320
 15109              	.LBB754:
 125:sieve_extend.c ****     return index;
 15110              		.loc 1 125 5 view .LVU5321
 125:sieve_extend.c ****     return index;
 15111              		.loc 1 125 11 view .LVU5322
 15112              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15113              		.loc 1 125 21 is_stmt 0 view .LVU5323
 15114 5238 4889C1   		mov	rcx, rax	# tmp162, factor
 15115 523b 48C1E906 		shr	rcx, 6	# tmp162,
 15116              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15117              		.loc 1 125 12 view .LVU5324
 15118 523f 4C8B1CCA 		mov	r11, QWORD PTR [rdx+rcx*8]	# *_106,* _24
 15119              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15120              		.loc 1 125 11 view .LVU5325
 15121 5243 490FA3C3 		bt	r11, rax	# *_106, factor
 15122 5247 0F83A300 		jnc	.L1181	#,
 15122      0000
 125:sieve_extend.c ****     return index;
 15123              		.loc 1 125 58 is_stmt 1 view .LVU5326
 15124              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15125              		.loc 1 125 63 is_stmt 0 view .LVU5327
 15126 524d 4C8D6801 		lea	r13, 1[rax]	# tmp235,
 15127              	.LVL896:
 15128              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15129              		.loc 1 125 21 view .LVU5328
 15130 5251 4D89EE   		mov	r14, r13	# tmp167, factor
 15131              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15132              		.loc 1 125 63 view .LVU5329
 15133 5254 4C89E8   		mov	rax, r13	# factor, tmp235
 125:sieve_extend.c ****     return index;
 15134              		.loc 1 125 11 is_stmt 1 view .LVU5330
 15135              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15136              		.loc 1 125 21 is_stmt 0 view .LVU5331
 15137 5257 49C1EE06 		shr	r14, 6	# tmp167,
 15138              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15139              		.loc 1 125 12 view .LVU5332
 15140 525b 4E8B3CF2 		mov	r15, QWORD PTR [rdx+r14*8]	# *_35, *_35
 15141              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15142              		.loc 1 125 11 view .LVU5333
 15143 525f 4D0FA3EF 		bt	r15, r13	# *_35, factor
 15144 5263 0F838700 		jnc	.L1181	#,
 15144      0000
 125:sieve_extend.c ****     return index;
GAS LISTING /tmp/ccNeV1of.s 			page 411


 15145              		.loc 1 125 58 is_stmt 1 view .LVU5334
 15146              	.LVL897:
 15147              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15148              		.loc 1 125 63 is_stmt 0 view .LVU5335
 15149 5269 4883C001 		add	rax, 1	# factor,
 15150              	.LVL898:
 125:sieve_extend.c ****     return index;
 15151              		.loc 1 125 11 is_stmt 1 view .LVU5336
 15152              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15153              		.loc 1 125 21 is_stmt 0 view .LVU5337
 15154 526d 4989C4   		mov	r12, rax	# tmp279, factor
 15155 5270 49C1EC06 		shr	r12, 6	# tmp279,
 15156              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15157              		.loc 1 125 12 view .LVU5338
 15158 5274 4A8B34E2 		mov	rsi, QWORD PTR [rdx+r12*8]	# *_35, *_35
 15159              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15160              		.loc 1 125 11 view .LVU5339
 15161 5278 480FA3C6 		bt	rsi, rax	# *_35, factor
 15162 527c 7372     		jnc	.L1181	#,
 125:sieve_extend.c ****     return index;
 15163              		.loc 1 125 58 is_stmt 1 view .LVU5340
 15164              	.LVL899:
 15165              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15166              		.loc 1 125 63 is_stmt 0 view .LVU5341
 15167 527e 498D4502 		lea	rax, 2[r13]	# factor,
 15168              	.LVL900:
 125:sieve_extend.c ****     return index;
 15169              		.loc 1 125 11 is_stmt 1 view .LVU5342
 15170              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15171              		.loc 1 125 21 is_stmt 0 view .LVU5343
 15172 5282 4989C2   		mov	r10, rax	# tmp283, factor
 15173 5285 49C1EA06 		shr	r10, 6	# tmp283,
 15174              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15175              		.loc 1 125 12 view .LVU5344
 15176 5289 4A8B0CD2 		mov	rcx, QWORD PTR [rdx+r10*8]	# *_35, *_35
 15177              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15178              		.loc 1 125 11 view .LVU5345
 15179 528d 480FA3C1 		bt	rcx, rax	# *_35, factor
 15180 5291 735D     		jnc	.L1181	#,
 125:sieve_extend.c ****     return index;
 15181              		.loc 1 125 58 is_stmt 1 view .LVU5346
 15182              	.LVL901:
 15183              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15184              		.loc 1 125 63 is_stmt 0 view .LVU5347
 15185 5293 498D4503 		lea	rax, 3[r13]	# factor,
 15186              	.LVL902:
 125:sieve_extend.c ****     return index;
 15187              		.loc 1 125 11 is_stmt 1 view .LVU5348
GAS LISTING /tmp/ccNeV1of.s 			page 412


 15188              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15189              		.loc 1 125 21 is_stmt 0 view .LVU5349
 15190 5297 4989C3   		mov	r11, rax	# tmp287, factor
 15191 529a 49C1EB06 		shr	r11, 6	# tmp287,
 15192              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15193              		.loc 1 125 12 view .LVU5350
 15194 529e 4E8B34DA 		mov	r14, QWORD PTR [rdx+r11*8]	# *_35, *_35
 15195              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15196              		.loc 1 125 11 view .LVU5351
 15197 52a2 490FA3C6 		bt	r14, rax	# *_35, factor
 15198 52a6 7348     		jnc	.L1181	#,
 125:sieve_extend.c ****     return index;
 15199              		.loc 1 125 58 is_stmt 1 view .LVU5352
 15200              	.LVL903:
 15201              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15202              		.loc 1 125 63 is_stmt 0 view .LVU5353
 15203 52a8 498D4504 		lea	rax, 4[r13]	# factor,
 15204              	.LVL904:
 125:sieve_extend.c ****     return index;
 15205              		.loc 1 125 11 is_stmt 1 view .LVU5354
 15206              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15207              		.loc 1 125 21 is_stmt 0 view .LVU5355
 15208 52ac 4989C7   		mov	r15, rax	# tmp291, factor
 15209 52af 49C1EF06 		shr	r15, 6	# tmp291,
 15210              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15211              		.loc 1 125 12 view .LVU5356
 15212 52b3 4E8B24FA 		mov	r12, QWORD PTR [rdx+r15*8]	# *_35, *_35
 15213              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15214              		.loc 1 125 11 view .LVU5357
 15215 52b7 490FA3C4 		bt	r12, rax	# *_35, factor
 15216 52bb 7333     		jnc	.L1181	#,
 125:sieve_extend.c ****     return index;
 15217              		.loc 1 125 58 is_stmt 1 view .LVU5358
 15218              	.LVL905:
 15219              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15220              		.loc 1 125 63 is_stmt 0 view .LVU5359
 15221 52bd 498D4505 		lea	rax, 5[r13]	# factor,
 15222              	.LVL906:
 125:sieve_extend.c ****     return index;
 15223              		.loc 1 125 11 is_stmt 1 view .LVU5360
 15224              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15225              		.loc 1 125 21 is_stmt 0 view .LVU5361
 15226 52c1 4889C6   		mov	rsi, rax	# tmp295, factor
 15227 52c4 48C1EE06 		shr	rsi, 6	# tmp295,
 15228              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15229              		.loc 1 125 12 view .LVU5362
 15230 52c8 4C8B14F2 		mov	r10, QWORD PTR [rdx+rsi*8]	# *_35, *_35
GAS LISTING /tmp/ccNeV1of.s 			page 413


 15231              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15232              		.loc 1 125 11 view .LVU5363
 15233 52cc 490FA3C2 		bt	r10, rax	# *_35, factor
 15234 52d0 731E     		jnc	.L1181	#,
 125:sieve_extend.c ****     return index;
 15235              		.loc 1 125 58 is_stmt 1 view .LVU5364
 15236              	.LVL907:
 15237              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15238              		.loc 1 125 63 is_stmt 0 view .LVU5365
 15239 52d2 498D4506 		lea	rax, 6[r13]	# factor,
 15240              	.LVL908:
 125:sieve_extend.c ****     return index;
 15241              		.loc 1 125 11 is_stmt 1 view .LVU5366
 15242              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15243              		.loc 1 125 21 is_stmt 0 view .LVU5367
 15244 52d6 4889C1   		mov	rcx, rax	# tmp299, factor
 15245 52d9 48C1E906 		shr	rcx, 6	# tmp299,
 15246              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15247              		.loc 1 125 12 view .LVU5368
 15248 52dd 4C8B1CCA 		mov	r11, QWORD PTR [rdx+rcx*8]	# *_35, *_35
 15249              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15250              		.loc 1 125 11 view .LVU5369
 15251 52e1 490FA3C3 		bt	r11, rax	# *_35, factor
 15252 52e5 7309     		jnc	.L1181	#,
 125:sieve_extend.c ****     return index;
 15253              		.loc 1 125 58 is_stmt 1 view .LVU5370
 15254              	.LVL909:
 15255              	# sieve_extend.c:125:     while (bitarray[wordindex(index)] & markmask(index)) index++;
 125:sieve_extend.c ****     return index;
 15256              		.loc 1 125 63 is_stmt 0 view .LVU5371
 15257 52e7 498D4507 		lea	rax, 7[r13]	# factor,
 15258              	.LVL910:
 125:sieve_extend.c ****     return index;
 15259              		.loc 1 125 11 is_stmt 1 view .LVU5372
 15260 52eb E948FFFF 		jmp	.L1327	#
 15260      FF
 15261              		.p2align 4,,7
 15262              		.p2align 3
 15263              	.L1181:
 15264              	.LVL911:
 125:sieve_extend.c ****     return index;
 15265              		.loc 1 125 11 is_stmt 0 view .LVU5373
 15266              	.LBE754:
 15267              	.LBE753:
 983:sieve_extend.c ****     return primeCount;
 15268              		.loc 1 983 30 is_stmt 1 view .LVU5374
 15269              	# sieve_extend.c:983:     for (counter_t factor=1; factor < sieve->bits; factor = searchBitFalse(si
 983:sieve_extend.c ****     return primeCount;
 15270              		.loc 1 983 5 is_stmt 0 view .LVU5375
 15271 52f0 4839C7   		cmp	rdi, rax	# _25, factor
 15272 52f3 0F8737FF 		ja	.L1183	#,
 15272      FFFF
GAS LISTING /tmp/ccNeV1of.s 			page 414


 983:sieve_extend.c ****     return primeCount;
 15273              		.loc 1 983 5 view .LVU5376
 15274              	.LBE755:
 984:sieve_extend.c **** }
 15275              		.loc 1 984 5 is_stmt 1 view .LVU5377
 15276              	.LVL912:
 984:sieve_extend.c **** }
 15277              		.loc 1 984 5 is_stmt 0 view .LVU5378
 15278              	.LBE751:
 15279              	.LBE750:
1013:sieve_extend.c ****     switch(sieve->size) {
 15280              		.loc 1 1013 5 is_stmt 1 view .LVU5379
1014:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 15281              		.loc 1 1014 5 view .LVU5380
 15282 52f9 83FB03   		cmp	ebx, 3	# option_verboselevel,
 15283 52fc 0F9FC2   		setg	dl	#, tmp172
 15284 52ff 4981F9A0 		cmp	r9, 100000	# pretmp_201,
 15284      860100
 15285 5306 0F843406 		je	.L1184	#,
 15285      0000
 15286 530c 0F86D402 		jbe	.L1328	#,
 15286      0000
 15287 5312 4981F900 		cmp	r9, 100000000	# pretmp_201,
 15287      E1F505
 15288 5319 0F84E005 		je	.L1192	#,
 15288      0000
 15289 531f 90       		.p2align 4,,4
 15290 5320 0F863A03 		jbe	.L1329	#,
 15290      0000
 15291 5326 4981F900 		cmp	r9, 1000000000	# pretmp_201,
 15291      CA9A3B
 15292 532d 0F85F105 		jne	.L1190	#,
 15292      0000
 15293 5333 4981F82E 		cmp	r8, 50847534	# primeCount,
 15293      DF0703
 15294              	# sieve_extend.c:1023:         case 1000000000:    valid_primes = 50847534; break;
1023:sieve_extend.c ****         default:            valid_primes= 0;
 15295              		.loc 1 1023 42 is_stmt 0 view .LVU5381
 15296 533a B92EDF07 		mov	ecx, 50847534	# valid_primes,
 15296      03
 15297 533f 410F94C5 		sete	r13b	#, tmp189
 15298 5343 4421EA   		and	edx, r13d	# _253, tmp189
 15299 5346 4981F82E 		cmp	r8, 50847534	# primeCount,
 15299      DF0703
 15300 534d 450FB6ED 		movzx	r13d, r13b	# <retval>, tmp189
 15301 5351 410F95C4 		setne	r12b	#, _135
1023:sieve_extend.c ****         default:            valid_primes= 0;
 15302              		.loc 1 1023 29 is_stmt 1 view .LVU5382
 15303              	.LVL913:
1023:sieve_extend.c ****         default:            valid_primes= 0;
 15304              		.loc 1 1023 54 view .LVU5383
 15305 5355 66662E0F 		.p2align 4
 15305      1F840000 
 15305      000000
 15306              		.p2align 3
 15307              	.L1197:
1027:sieve_extend.c ****     if (valid  && option_verboselevel >= 4) printf("Result: Sievesize %ju is expected to have %ju p
GAS LISTING /tmp/ccNeV1of.s 			page 415


 15308              		.loc 1 1027 5 view .LVU5384
1028:sieve_extend.c ****     if (!valid && option_verboselevel >= 1) {
 15309              		.loc 1 1028 5 view .LVU5385
 15310              	# sieve_extend.c:1028:     if (valid  && option_verboselevel >= 4) printf("Result: Sievesize %ju is
1028:sieve_extend.c ****     if (!valid && option_verboselevel >= 1) {
 15311              		.loc 1 1028 8 is_stmt 0 view .LVU5386
 15312 5360 84D2     		test	dl, dl	# _253
 15313 5362 0F841704 		je	.L1198	#,
 15313      0000
1028:sieve_extend.c ****     if (!valid && option_verboselevel >= 1) {
 15314              		.loc 1 1028 45 is_stmt 1 discriminator 1 view .LVU5387
 15315              	.LVL914:
 15316              	.LBB757:
 15317              	.LBI757:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15318              		.loc 3 105 1 discriminator 1 view .LVU5388
 15319              	.LBB758:
 15320              		.loc 3 107 3 discriminator 1 view .LVU5389
 15321              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15322              		.loc 3 107 10 is_stmt 0 discriminator 1 view .LVU5390
 15323 5368 4C89CA   		mov	rdx, r9	#, pretmp_201
 15324 536b 488D3500 		lea	rsi, .LC15[rip]	#,
 15324      000000
 15325 5372 BF010000 		mov	edi, 1	#,
 15325      00
 15326 5377 31C0     		xor	eax, eax	#
 15327 5379 E8000000 		call	__printf_chk@PLT	#
 15327      00
 15328              	.LVL915:
 15329              		.loc 3 107 10 discriminator 1 view .LVU5391
 15330              	.LBE758:
 15331              	.LBE757:
1029:sieve_extend.c ****         printf("No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produ
 15332              		.loc 1 1029 5 is_stmt 1 discriminator 1 view .LVU5392
 15333              	.L1199:
1033:sieve_extend.c ****     return (valid);
 15334              		.loc 1 1033 5 view .LVU5393
 15335              	# sieve_extend.c:1033:     if (!valid && option_verboselevel >= 2) deepAnalyzePrimes(sieve);
1033:sieve_extend.c ****     return (valid);
 15336              		.loc 1 1033 8 is_stmt 0 view .LVU5394
 15337 537e 83FB01   		cmp	ebx, 1	# option_verboselevel,
 15338 5381 0F8E4C02 		jle	.L1179	#,
 15338      0000
 15339 5387 4584E4   		test	r12b, r12b	# _135
 15340 538a 0F844302 		je	.L1179	#,
 15340      0000
 15341              	.L1201:
1033:sieve_extend.c ****     return (valid);
 15342              		.loc 1 1033 45 is_stmt 1 discriminator 1 view .LVU5395
 15343              	.LBB759:
 15344              	.LBI759:
 987:sieve_extend.c ****     printf("DeepAnalyzing\n");
 15345              		.loc 1 987 13 discriminator 1 view .LVU5396
 15346              	.LVL916:
 15347              	.LBB760:
 988:sieve_extend.c ****     counter_t warn_prime = 0;
 15348              		.loc 1 988 5 discriminator 1 view .LVU5397
GAS LISTING /tmp/ccNeV1of.s 			page 416


 15349              	.LBB761:
 15350              	.LBI761:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15351              		.loc 3 105 1 discriminator 1 view .LVU5398
 15352              	.LBB762:
 15353              		.loc 3 107 3 discriminator 1 view .LVU5399
 15354              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15355              		.loc 3 107 10 is_stmt 0 discriminator 1 view .LVU5400
 15356 5390 488D3D00 		lea	rdi, .LC17[rip]	#,
 15356      000000
 15357 5397 E8000000 		call	puts@PLT	#
 15357      00
 15358              	.LVL917:
 15359              		.loc 3 107 10 discriminator 1 view .LVU5401
 15360              	.LBE762:
 15361              	.LBE761:
 989:sieve_extend.c ****     counter_t warn_nonprime = 0;
 15362              		.loc 1 989 5 is_stmt 1 discriminator 1 view .LVU5402
 990:sieve_extend.c ****     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 15363              		.loc 1 990 5 discriminator 1 view .LVU5403
 991:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 15364              		.loc 1 991 5 discriminator 1 view .LVU5404
 15365              	.LBB763:
 991:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 15366              		.loc 1 991 10 discriminator 1 view .LVU5405
 991:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 15367              		.loc 1 991 31 discriminator 1 view .LVU5406
 15368              	# sieve_extend.c:991:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 991:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 15369              		.loc 1 991 44 is_stmt 0 discriminator 1 view .LVU5407
 15370 539c 488B7D08 		mov	rdi, QWORD PTR 8[rbp]	# _137, MEM[(uint64_t *)sieve_18(D) + 8B]
 15371              	# sieve_extend.c:991:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 991:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 15372              		.loc 1 991 5 discriminator 1 view .LVU5408
 15373 53a0 4883FF01 		cmp	rdi, 1	# _137,
 15374 53a4 0F862902 		jbe	.L1179	#,
 15374      0000
 15375              	.LBB764:
 15376              	.LBB765:
 15377              	.LBB766:
 15378              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15379              		.loc 3 107 10 view .LVU5409
 15380 53aa 44896C24 		mov	DWORD PTR 36[rsp], r13d	# %sfp, <retval>
 15380      24
 15381              	.LBE766:
 15382              	.LBE765:
 15383              	.LBE764:
 15384              	# sieve_extend.c:991:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 991:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 15385              		.loc 1 991 5 view .LVU5410
 15386 53af 41BE0200 		mov	r14d, 2	# ivtmp.693,
 15386      0000
 15387 53b5 41BC0300 		mov	r12d, 3	# ivtmp.691,
 15387      0000
 15388              	.LBE763:
 15389              	# sieve_extend.c:989:     counter_t warn_prime = 0;
 989:sieve_extend.c ****     counter_t warn_nonprime = 0;
GAS LISTING /tmp/ccNeV1of.s 			page 417


 15390              		.loc 1 989 15 view .LVU5411
 15391 53bb 4531C0   		xor	r8d, r8d	# warn_prime
 15392              	# sieve_extend.c:990:     counter_t warn_nonprime = 0;
 990:sieve_extend.c ****     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 15393              		.loc 1 990 15 view .LVU5412
 15394 53be 48C74424 		mov	QWORD PTR 24[rsp], 0	# %sfp,
 15394      18000000 
 15394      00
 15395              	.LBB785:
 15396              	# sieve_extend.c:991:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 991:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 15397              		.loc 1 991 20 view .LVU5413
 15398 53c7 41BF0100 		mov	r15d, 1	# prime,
 15398      0000
 15399              	.LBB773:
 15400              	.LBB770:
 15401              	.LBB767:
 15402              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15403              		.loc 3 107 10 view .LVU5414
 15404 53cd 4989ED   		mov	r13, rbp	# sieve, sieve
 15405              	.LVL918:
 15406              		.p2align 4
 15407              		.p2align 3
 15408              	.L1210:
 15409              		.loc 3 107 10 view .LVU5415
 15410              	.LBE767:
 15411              	.LBE770:
 15412              	.LBE773:
 992:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 15413              		.loc 1 992 9 is_stmt 1 view .LVU5416
 15414              	# sieve_extend.c:992:         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { 
 992:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 15415              		.loc 1 992 29 is_stmt 0 view .LVU5417
 15416 53d0 498B6D00 		mov	rbp, QWORD PTR 0[r13]	# MEM[(uint64_t * *)sieve_18(D)], MEM[(uint64_t * *)sieve_18(D)]
 15417              	# sieve_extend.c:992:         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { 
 992:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 15418              		.loc 1 992 30 view .LVU5418
 15419 53d4 4C89FB   		mov	rbx, r15	# tmp198, prime
 15420 53d7 48C1EB06 		shr	rbx, 6	# tmp198,
 15421              	# sieve_extend.c:992:         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { 
 992:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 15422              		.loc 1 992 71 view .LVU5419
 15423 53db 4C8B4CDD 		mov	r9, QWORD PTR 0[rbp+rbx*8]	# *_47, *_47
 15423      00
 15424 53e0 C4C283F7 		shrx	rcx, r9, r15	# tmp201, *_47, prime
 15424      C9
 15425              	# sieve_extend.c:992:         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { 
 992:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 15426              		.loc 1 992 12 view .LVU5420
 15427 53e5 83E101   		and	ecx, 1	# c,
 15428 53e8 0F84BA02 		je	.L1202	#,
 15428      0000
 15429              	.LVL919:
 15430              	.LBB774:
 15431              	.LBB775:
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15432              		.loc 1 1001 32 is_stmt 1 view .LVU5421
GAS LISTING /tmp/ccNeV1of.s 			page 418


 15433              	.LBE775:
 15434              	# sieve_extend.c:1000:             counter_t c_prime = 0;
1000:sieve_extend.c ****             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 15435              		.loc 1 1000 23 is_stmt 0 view .LVU5422
 15436 53ee 31ED     		xor	ebp, ebp	# c_prime
 15437              	.LBB776:
 15438              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15439              		.loc 1 1001 13 view .LVU5423
 15440 53f0 4885FF   		test	rdi, rdi	# _137
 15441 53f3 BE030000 		mov	esi, 3	# ivtmp.683,
 15441      00
 15442 53f8 0F84E003 		je	.L1317	#,
 15442      0000
 15443 53fe 4989FB   		mov	r11, rdi	# tmp231, _137
 15444 5401 4929CB   		sub	r11, rcx	# tmp231, c
 15445 5404 4183E303 		and	r11d, 3	# tmp231,
 15446 5408 4D89DA   		mov	r10, r11	# tmp232, tmp231
 15447 540b 0F84BF00 		je	.L1203	#,
 15447      0000
 15448              	.LVL920:
1002:sieve_extend.c ****             }
 15449              		.loc 1 1002 17 is_stmt 1 view .LVU5424
 15450              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15451              		.loc 1 1002 48 is_stmt 0 view .LVU5425
 15452 5411 488D0409 		lea	rax, [rcx+rcx]	# tmp239,
 15453 5415 4C39F0   		cmp	rax, r14	# tmp239, ivtmp.693
 15454 5418 7411     		je	.L1257	#,
 15455              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15456              		.loc 1 1002 33 view .LVU5426
 15457 541a 31D2     		xor	edx, edx	# tmp241
 15458 541c 4C89E0   		mov	rax, r12	# tmp242, ivtmp.691
 15459 541f 48F7F6   		div	rsi	# ivtmp.683
 15460              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15461              		.loc 1 1002 82 view .LVU5427
 15462 5422 31ED     		xor	ebp, ebp	# c_prime
1002:sieve_extend.c ****             }
 15463              		.loc 1 1002 82 view .LVU5428
 15464 5424 4885D2   		test	rdx, rdx	# tmp241
 15465 5427 400F94C5 		sete	bpl	#, c_prime
 15466              	.LVL921:
 15467              	.L1257:
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15468              		.loc 1 1001 68 is_stmt 1 view .LVU5429
 15469              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15470              		.loc 1 1001 69 is_stmt 0 view .LVU5430
 15471 542b 4883C101 		add	rcx, 1	# c,
 15472              	.LVL922:
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15473              		.loc 1 1001 32 is_stmt 1 view .LVU5431
 15474              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15475              		.loc 1 1001 13 is_stmt 0 view .LVU5432
GAS LISTING /tmp/ccNeV1of.s 			page 419


 15476 542f 4839F9   		cmp	rcx, rdi	# c, _137
 15477 5432 0F877801 		ja	.L1209	#,
 15477      0000
 15478              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15479              		.loc 1 1001 51 view .LVU5433
 15480 5438 4989C9   		mov	r9, rcx	# tmp244, c
 15481 543b BE050000 		mov	esi, 5	# ivtmp.683,
 15481      00
 15482 5440 4C0FAFC9 		imul	r9, rcx	# tmp244, c
 15483              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15484              		.loc 1 1001 47 view .LVU5434
 15485 5444 4D39E1   		cmp	r9, r12	# tmp244, ivtmp.691
 15486 5447 0F876301 		ja	.L1209	#,
 15486      0000
 15487 544d 4983FA01 		cmp	r10, 1	# tmp232,
 15488 5451 747D     		je	.L1203	#,
 15489 5453 4983FA02 		cmp	r10, 2	# tmp232,
 15490 5457 7438     		je	.L1288	#,
1002:sieve_extend.c ****             }
 15491              		.loc 1 1002 17 is_stmt 1 view .LVU5435
 15492              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15493              		.loc 1 1002 48 is_stmt 0 view .LVU5436
 15494 5459 488D1C09 		lea	rbx, [rcx+rcx]	# tmp245,
 15495 545d 4C39F3   		cmp	rbx, r14	# tmp245, ivtmp.693
 15496 5460 7417     		je	.L1259	#,
 15497              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15498              		.loc 1 1002 33 view .LVU5437
 15499 5462 31D2     		xor	edx, edx	# tmp247
 15500 5464 4C89E0   		mov	rax, r12	# tmp248, ivtmp.691
 15501 5467 48F7F6   		div	rsi	# ivtmp.683
 15502              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15503              		.loc 1 1002 20 view .LVU5438
 15504 546a 4885D2   		test	rdx, rdx	# tmp247
 15505 546d 410F94C3 		sete	r11b	#, tmp249
 15506              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15507              		.loc 1 1002 82 view .LVU5439
 15508 5471 4180FB01 		cmp	r11b, 1	# tmp249,
 15509 5475 4883DDFF 		sbb	rbp, -1	# c_prime,
 15510              	.LVL923:
 15511              	.L1259:
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15512              		.loc 1 1001 68 is_stmt 1 view .LVU5440
 15513              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15514              		.loc 1 1001 69 is_stmt 0 view .LVU5441
 15515 5479 4883C101 		add	rcx, 1	# c,
 15516              	.LVL924:
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15517              		.loc 1 1001 32 is_stmt 1 view .LVU5442
 15518 547d 4883C602 		add	rsi, 2	# ivtmp.683,
 15519              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
GAS LISTING /tmp/ccNeV1of.s 			page 420


1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15520              		.loc 1 1001 51 is_stmt 0 view .LVU5443
 15521 5481 4989CA   		mov	r10, rcx	# tmp250, c
 15522 5484 4C0FAFD1 		imul	r10, rcx	# tmp250, c
 15523              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15524              		.loc 1 1001 47 view .LVU5444
 15525 5488 4D39E2   		cmp	r10, r12	# tmp250, ivtmp.691
 15526 548b 0F871F01 		ja	.L1209	#,
 15526      0000
 15527              	.L1288:
1002:sieve_extend.c ****             }
 15528              		.loc 1 1002 17 is_stmt 1 view .LVU5445
 15529              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15530              		.loc 1 1002 48 is_stmt 0 view .LVU5446
 15531 5491 4C8D0C09 		lea	r9, [rcx+rcx]	# tmp251,
 15532 5495 4D39F1   		cmp	r9, r14	# tmp251, ivtmp.693
 15533 5498 7415     		je	.L1262	#,
 15534              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15535              		.loc 1 1002 33 view .LVU5447
 15536 549a 31D2     		xor	edx, edx	# tmp253
 15537 549c 4C89E0   		mov	rax, r12	# tmp254, ivtmp.691
 15538 549f 48F7F6   		div	rsi	# ivtmp.683
 15539              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15540              		.loc 1 1002 20 view .LVU5448
 15541 54a2 4885D2   		test	rdx, rdx	# tmp253
 15542 54a5 0F94C3   		sete	bl	#, tmp255
 15543              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15544              		.loc 1 1002 82 view .LVU5449
 15545 54a8 80FB01   		cmp	bl, 1	# tmp255,
 15546 54ab 4883DDFF 		sbb	rbp, -1	# c_prime,
 15547              	.LVL925:
 15548              	.L1262:
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15549              		.loc 1 1001 68 is_stmt 1 view .LVU5450
 15550              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15551              		.loc 1 1001 69 is_stmt 0 view .LVU5451
 15552 54af 4883C101 		add	rcx, 1	# c,
 15553              	.LVL926:
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15554              		.loc 1 1001 32 is_stmt 1 view .LVU5452
 15555 54b3 4883C602 		add	rsi, 2	# ivtmp.683,
 15556              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15557              		.loc 1 1001 51 is_stmt 0 view .LVU5453
 15558 54b7 4989CB   		mov	r11, rcx	# tmp256, c
 15559 54ba 4C0FAFD9 		imul	r11, rcx	# tmp256, c
 15560              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15561              		.loc 1 1001 47 view .LVU5454
 15562 54be 4D39E3   		cmp	r11, r12	# tmp256, ivtmp.691
 15563 54c1 0F87E900 		ja	.L1209	#,
GAS LISTING /tmp/ccNeV1of.s 			page 421


 15563      0000
 15564              	.LVL927:
 15565 54c7 660F1F84 		.p2align 4
 15565      00000000 
 15565      00
 15566              		.p2align 3
 15567              	.L1203:
1002:sieve_extend.c ****             }
 15568              		.loc 1 1002 17 is_stmt 1 view .LVU5455
 15569              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15570              		.loc 1 1002 48 is_stmt 0 view .LVU5456
 15571 54d0 4C8D1409 		lea	r10, [rcx+rcx]	# tmp210,
 15572 54d4 4D39F2   		cmp	r10, r14	# tmp210, ivtmp.693
 15573 54d7 7417     		je	.L1208	#,
 15574              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15575              		.loc 1 1002 33 view .LVU5457
 15576 54d9 31D2     		xor	edx, edx	# tmp214
 15577 54db 4C89E0   		mov	rax, r12	# tmp215, ivtmp.691
 15578 54de 48F7F6   		div	rsi	# ivtmp.683
 15579              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15580              		.loc 1 1002 20 view .LVU5458
 15581 54e1 4885D2   		test	rdx, rdx	# tmp214
 15582 54e4 410F94C1 		sete	r9b	#, tmp217
 15583              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15584              		.loc 1 1002 82 view .LVU5459
 15585 54e8 4180F901 		cmp	r9b, 1	# tmp217,
 15586 54ec 4883DDFF 		sbb	rbp, -1	# c_prime,
 15587              	.LVL928:
 15588              	.L1208:
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15589              		.loc 1 1001 68 is_stmt 1 view .LVU5460
 15590              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15591              		.loc 1 1001 69 is_stmt 0 view .LVU5461
 15592 54f0 4883C101 		add	rcx, 1	# tmp234,
 15593              	.LVL929:
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15594              		.loc 1 1001 32 is_stmt 1 view .LVU5462
 15595              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15596              		.loc 1 1001 13 is_stmt 0 view .LVU5463
 15597 54f4 4839F9   		cmp	rcx, rdi	# tmp234, _137
 15598 54f7 0F87B300 		ja	.L1209	#,
 15598      0000
 15599              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15600              		.loc 1 1001 51 view .LVU5464
 15601 54fd 4889CB   		mov	rbx, rcx	# tmp218, tmp234
 15602 5500 4883C602 		add	rsi, 2	# tmp233,
 15603 5504 480FAFD9 		imul	rbx, rcx	# tmp218, tmp234
 15604              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15605              		.loc 1 1001 47 view .LVU5465
GAS LISTING /tmp/ccNeV1of.s 			page 422


 15606 5508 4C39E3   		cmp	rbx, r12	# tmp218, ivtmp.691
 15607 550b 0F879F00 		ja	.L1209	#,
 15607      0000
1002:sieve_extend.c ****             }
 15608              		.loc 1 1002 17 is_stmt 1 view .LVU5466
 15609              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15610              		.loc 1 1002 48 is_stmt 0 view .LVU5467
 15611 5511 4C8D1C09 		lea	r11, [rcx+rcx]	# tmp257,
 15612 5515 4D39F3   		cmp	r11, r14	# tmp257, ivtmp.693
 15613 5518 7417     		je	.L1266	#,
 15614              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15615              		.loc 1 1002 33 view .LVU5468
 15616 551a 31D2     		xor	edx, edx	# tmp259
 15617 551c 4C89E0   		mov	rax, r12	# tmp260, ivtmp.691
 15618 551f 48F7F6   		div	rsi	# tmp233
 15619              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15620              		.loc 1 1002 20 view .LVU5469
 15621 5522 4885D2   		test	rdx, rdx	# tmp259
 15622 5525 410F94C2 		sete	r10b	#, tmp261
 15623              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15624              		.loc 1 1002 82 view .LVU5470
 15625 5529 4180FA01 		cmp	r10b, 1	# tmp261,
 15626 552d 4883DDFF 		sbb	rbp, -1	# c_prime,
 15627              	.LVL930:
 15628              	.L1266:
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15629              		.loc 1 1001 68 is_stmt 1 view .LVU5471
 15630              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15631              		.loc 1 1001 69 is_stmt 0 view .LVU5472
 15632 5531 4C8D4901 		lea	r9, 1[rcx]	# c,
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15633              		.loc 1 1001 32 is_stmt 1 view .LVU5473
 15634 5535 488D5E02 		lea	rbx, 2[rsi]	# ivtmp.683,
 15635              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15636              		.loc 1 1001 51 is_stmt 0 view .LVU5474
 15637 5539 4D89CB   		mov	r11, r9	# tmp264, c
 15638 553c 4D0FAFD9 		imul	r11, r9	# tmp264, c
 15639              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15640              		.loc 1 1001 47 view .LVU5475
 15641 5540 4D39E3   		cmp	r11, r12	# tmp264, ivtmp.691
 15642 5543 776B     		ja	.L1209	#,
1002:sieve_extend.c ****             }
 15643              		.loc 1 1002 17 is_stmt 1 view .LVU5476
 15644              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15645              		.loc 1 1002 48 is_stmt 0 view .LVU5477
 15646 5545 4D01C9   		add	r9, r9	# tmp265
 15647 5548 4D39F1   		cmp	r9, r14	# tmp265, ivtmp.693
 15648 554b 7417     		je	.L1268	#,
 15649              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
GAS LISTING /tmp/ccNeV1of.s 			page 423


1002:sieve_extend.c ****             }
 15650              		.loc 1 1002 33 view .LVU5478
 15651 554d 31D2     		xor	edx, edx	# tmp267
 15652 554f 4C89E0   		mov	rax, r12	# tmp268, ivtmp.691
 15653 5552 48F7F3   		div	rbx	# ivtmp.683
 15654              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15655              		.loc 1 1002 20 view .LVU5479
 15656 5555 4885D2   		test	rdx, rdx	# tmp267
 15657 5558 410F94C2 		sete	r10b	#, tmp269
 15658              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15659              		.loc 1 1002 82 view .LVU5480
 15660 555c 4180FA01 		cmp	r10b, 1	# tmp269,
 15661 5560 4883DDFF 		sbb	rbp, -1	# c_prime,
 15662              	.LVL931:
 15663              	.L1268:
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15664              		.loc 1 1001 68 is_stmt 1 view .LVU5481
 15665              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15666              		.loc 1 1001 69 is_stmt 0 view .LVU5482
 15667 5564 4C8D4902 		lea	r9, 2[rcx]	# c,
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15668              		.loc 1 1001 32 is_stmt 1 view .LVU5483
 15669 5568 488D5E04 		lea	rbx, 4[rsi]	# ivtmp.683,
 15670              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15671              		.loc 1 1001 51 is_stmt 0 view .LVU5484
 15672 556c 4D89CB   		mov	r11, r9	# tmp272, c
 15673 556f 4D0FAFD9 		imul	r11, r9	# tmp272, c
 15674              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15675              		.loc 1 1001 47 view .LVU5485
 15676 5573 4D39E3   		cmp	r11, r12	# tmp272, ivtmp.691
 15677 5576 7738     		ja	.L1209	#,
1002:sieve_extend.c ****             }
 15678              		.loc 1 1002 17 is_stmt 1 view .LVU5486
 15679              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15680              		.loc 1 1002 48 is_stmt 0 view .LVU5487
 15681 5578 4D01C9   		add	r9, r9	# tmp273
 15682 557b 4D39F1   		cmp	r9, r14	# tmp273, ivtmp.693
 15683 557e 7417     		je	.L1270	#,
 15684              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15685              		.loc 1 1002 33 view .LVU5488
 15686 5580 31D2     		xor	edx, edx	# tmp275
 15687 5582 4C89E0   		mov	rax, r12	# tmp276, ivtmp.691
 15688 5585 48F7F3   		div	rbx	# ivtmp.683
 15689              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
 15690              		.loc 1 1002 20 view .LVU5489
 15691 5588 4885D2   		test	rdx, rdx	# tmp275
 15692 558b 410F94C2 		sete	r10b	#, tmp277
 15693              	# sieve_extend.c:1002:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_
1002:sieve_extend.c ****             }
GAS LISTING /tmp/ccNeV1of.s 			page 424


 15694              		.loc 1 1002 82 view .LVU5490
 15695 558f 4180FA01 		cmp	r10b, 1	# tmp277,
 15696 5593 4883DDFF 		sbb	rbp, -1	# c_prime,
 15697              	.LVL932:
 15698              	.L1270:
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15699              		.loc 1 1001 68 is_stmt 1 view .LVU5491
 15700              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15701              		.loc 1 1001 69 is_stmt 0 view .LVU5492
 15702 5597 4883C103 		add	rcx, 3	# c,
 15703              	.LVL933:
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15704              		.loc 1 1001 32 is_stmt 1 view .LVU5493
 15705 559b 4883C606 		add	rsi, 6	# ivtmp.683,
 15706              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15707              		.loc 1 1001 51 is_stmt 0 view .LVU5494
 15708 559f 4989C9   		mov	r9, rcx	# tmp278, c
 15709 55a2 4C0FAFC9 		imul	r9, rcx	# tmp278, c
 15710              	# sieve_extend.c:1001:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15711              		.loc 1 1001 47 view .LVU5495
 15712 55a6 4D39E1   		cmp	r9, r12	# tmp278, ivtmp.691
 15713 55a9 0F8621FF 		jbe	.L1203	#,
 15713      FFFF
 15714              	.LVL934:
 15715 55af 90       		.p2align 4
 15716              		.p2align 3
 15717              	.L1209:
1001:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) c_prime++;
 15718              		.loc 1 1001 47 view .LVU5496
 15719              	.LBE776:
1004:sieve_extend.c ****         }
 15720              		.loc 1 1004 13 is_stmt 1 view .LVU5497
 15721              	# sieve_extend.c:1004:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1004:sieve_extend.c ****         }
 15722              		.loc 1 1004 16 is_stmt 0 view .LVU5498
 15723 55b0 4885ED   		test	rbp, rbp	# c_prime
 15724 55b3 0F840C02 		je	.L1330	#,
 15724      0000
 15725              	.LVL935:
 15726              	.L1206:
1004:sieve_extend.c ****         }
 15727              		.loc 1 1004 16 view .LVU5499
 15728              	.LBE774:
 991:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 15729              		.loc 1 991 52 is_stmt 1 view .LVU5500
 15730              	# sieve_extend.c:991:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 991:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 15731              		.loc 1 991 57 is_stmt 0 view .LVU5501
 15732 55b9 4983C701 		add	r15, 1	# prime,
 15733              	.LVL936:
 991:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 15734              		.loc 1 991 31 is_stmt 1 view .LVU5502
 15735 55bd 4983C402 		add	r12, 2	# ivtmp.691,
 15736 55c1 4983C602 		add	r14, 2	# ivtmp.693,
GAS LISTING /tmp/ccNeV1of.s 			page 425


 15737              	# sieve_extend.c:991:     for (counter_t prime = 1; prime < sieve->bits; prime++ ) {
 991:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 15738              		.loc 1 991 5 is_stmt 0 view .LVU5503
 15739 55c5 4939FF   		cmp	r15, rdi	# prime, _137
 15740 55c8 0F8202FE 		jb	.L1210	#,
 15740      FFFF
 15741              	.LVL937:
 15742              	.L1319:
 991:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 15743              		.loc 1 991 5 view .LVU5504
 15744 55ce 448B6C24 		mov	r13d, DWORD PTR 36[rsp]	# <retval>, %sfp
 15744      24
 15745              	.LVL938:
 15746              	.L1179:
 991:sieve_extend.c ****         if ((sieve->bitarray[wordindex(prime)] & markmask_calc(prime))==0) { // is this a prime?
 15747              		.loc 1 991 5 view .LVU5505
 15748              	.LBE785:
 15749              	.LBE760:
 15750              	.LBE759:
 15751              	# sieve_extend.c:1035: }
1035:sieve_extend.c **** 
 15752              		.loc 1 1035 1 view .LVU5506
 15753 55d3 488D6424 		lea	rsp, 56[rsp]	#,
 15753      38
 15754              		.cfi_remember_state
 15755              		.cfi_def_cfa_offset 56
 15756 55d8 4489E8   		mov	eax, r13d	#, <retval>
 15757 55db 5B       		pop	rbx	#
 15758              		.cfi_def_cfa_offset 48
 15759 55dc 5D       		pop	rbp	#
 15760              		.cfi_def_cfa_offset 40
 15761 55dd 415C     		pop	r12	#
 15762              		.cfi_def_cfa_offset 32
 15763 55df 415D     		pop	r13	#
 15764              		.cfi_def_cfa_offset 24
 15765 55e1 415E     		pop	r14	#
 15766              		.cfi_def_cfa_offset 16
 15767 55e3 415F     		pop	r15	#
 15768              		.cfi_def_cfa_offset 8
 15769 55e5 C3       		ret	
 15770              	.LVL939:
 15771              	.L1328:
 15772              		.cfi_restore_state
 15773              	# sieve_extend.c:1014:     switch(sieve->size) {
1014:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 15774              		.loc 1 1014 5 view .LVU5507
 15775 55e6 4981F9E8 		cmp	r9, 1000	# pretmp_201,
 15775      030000
 15776 55ed 0F84E502 		je	.L1186	#,
 15776      0000
 15777 55f3 7633     		jbe	.L1331	#,
 15778 55f5 4981F910 		cmp	r9, 10000	# pretmp_201,
 15778      270000
 15779 55fc 0F852203 		jne	.L1190	#,
 15779      0000
 15780 5602 4981F8CD 		cmp	r8, 1229	# primeCount,
 15780      040000
GAS LISTING /tmp/ccNeV1of.s 			page 426


 15781              	# sieve_extend.c:1018:         case 10000:         valid_primes = 1229;     break;
1018:sieve_extend.c ****         case 100000:        valid_primes = 9592;     break;
 15782              		.loc 1 1018 42 view .LVU5508
 15783 5609 B9CD0400 		mov	ecx, 1229	# valid_primes,
 15783      00
 15784 560e 400F94C6 		sete	sil	#, tmp179
 15785 5612 21F2     		and	edx, esi	# _253, tmp179
 15786 5614 4981F8CD 		cmp	r8, 1229	# primeCount,
 15786      040000
 15787 561b 440FB6EE 		movzx	r13d, sil	# <retval>, tmp179
 15788 561f 410F95C4 		setne	r12b	#, _135
1018:sieve_extend.c ****         case 100000:        valid_primes = 9592;     break;
 15789              		.loc 1 1018 29 is_stmt 1 view .LVU5509
 15790              	.LVL940:
1018:sieve_extend.c ****         case 100000:        valid_primes = 9592;     break;
 15791              		.loc 1 1018 54 view .LVU5510
 15792              	# sieve_extend.c:1018:         case 10000:         valid_primes = 1229;     break;
1018:sieve_extend.c ****         case 100000:        valid_primes = 9592;     break;
 15793              		.loc 1 1018 9 is_stmt 0 view .LVU5511
 15794 5623 E938FDFF 		jmp	.L1197	#
 15794      FF
 15795              	.LVL941:
 15796              	.L1331:
 15797              	# sieve_extend.c:1014:     switch(sieve->size) {
1014:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 15798              		.loc 1 1014 5 view .LVU5512
 15799 5628 4983F90A 		cmp	r9, 10	# pretmp_201,
 15800 562c 0F841902 		je	.L1188	#,
 15800      0000
 15801 5632 4983F964 		cmp	r9, 100	# pretmp_201,
 15802 5636 0F85E802 		jne	.L1190	#,
 15802      0000
 15803 563c 4983F819 		cmp	r8, 25	# primeCount,
 15804 5640 0F94C1   		sete	cl	#, tmp173
 15805 5643 21CA     		and	edx, ecx	# _253, tmp173
 15806 5645 4983F819 		cmp	r8, 25	# primeCount,
 15807 5649 440FB6E9 		movzx	r13d, cl	# <retval>, tmp173
 15808 564d 410F95C4 		setne	r12b	#, _135
 15809              	# sieve_extend.c:1016:         case 100:           valid_primes = 25;       break;
1016:sieve_extend.c ****         case 1000:          valid_primes = 168;      break;
 15810              		.loc 1 1016 42 view .LVU5513
 15811 5651 B9190000 		mov	ecx, 25	# valid_primes,
 15811      00
 15812 5656 E905FDFF 		jmp	.L1197	#
 15812      FF
 15813 565b 0F1F4400 		.p2align 4,,7
 15813      00
 15814              		.p2align 3
 15815              	.L1329:
 15816              	# sieve_extend.c:1014:     switch(sieve->size) {
1014:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 15817              		.loc 1 1014 5 view .LVU5514
 15818 5660 4981F940 		cmp	r9, 1000000	# pretmp_201,
 15818      420F00
 15819 5667 0F84B701 		je	.L1194	#,
 15819      0000
 15820 566d 4981F980 		cmp	r9, 10000000	# pretmp_201,
GAS LISTING /tmp/ccNeV1of.s 			page 427


 15820      969800
 15821 5674 0F85AA02 		jne	.L1190	#,
 15821      0000
 15822 567a 4981F803 		cmp	r8, 664579	# primeCount,
 15822      240A00
 15823              	# sieve_extend.c:1021:         case 10000000:      valid_primes = 664579;   break;
1021:sieve_extend.c ****         case 100000000:     valid_primes = 5761455;  break;
 15824              		.loc 1 1021 42 view .LVU5515
 15825 5681 B903240A 		mov	ecx, 664579	# valid_primes,
 15825      00
 15826 5686 410F94C7 		sete	r15b	#, tmp185
 15827 568a 4421FA   		and	edx, r15d	# _253, tmp185
 15828 568d 4981F803 		cmp	r8, 664579	# primeCount,
 15828      240A00
 15829 5694 450FB6EF 		movzx	r13d, r15b	# <retval>, tmp185
 15830 5698 410F95C4 		setne	r12b	#, _135
1021:sieve_extend.c ****         case 100000000:     valid_primes = 5761455;  break;
 15831              		.loc 1 1021 29 is_stmt 1 view .LVU5516
 15832              	.LVL942:
1021:sieve_extend.c ****         case 100000000:     valid_primes = 5761455;  break;
 15833              		.loc 1 1021 54 view .LVU5517
 15834              	# sieve_extend.c:1021:         case 10000000:      valid_primes = 664579;   break;
1021:sieve_extend.c ****         case 100000000:     valid_primes = 5761455;  break;
 15835              		.loc 1 1021 9 is_stmt 0 view .LVU5518
 15836 569c E9BFFCFF 		jmp	.L1197	#
 15836      FF
 15837              	.LVL943:
 15838              		.p2align 4,,7
 15839 56a1 0F1F8000 		.p2align 3
 15839      000000
 15840              	.L1202:
 15841              	.LBB790:
 15842              	.LBB788:
 15843              	.LBB786:
 15844              	.LBB783:
 993:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 15845              		.loc 1 993 32 is_stmt 1 view .LVU5519
 15846              	# sieve_extend.c:993:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 993:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 15847              		.loc 1 993 13 is_stmt 0 view .LVU5520
 15848 56a8 4885FF   		test	rdi, rdi	# _137
 15849 56ab 0F841DFF 		je	.L1319	#,
 15849      FFFF
 15850              	# sieve_extend.c:993:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 993:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 15851              		.loc 1 993 27 view .LVU5521
 15852 56b1 BB010000 		mov	ebx, 1	# c,
 15852      00
 15853 56b6 EB20     		jmp	.L1207	#
 15854              	.LVL944:
 15855              		.p2align 4,,7
 15856              		.p2align 3
 15857              	.L1216:
 15858              	# sieve_extend.c:995:                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marke
 995:sieve_extend.c ****                 }
 15859              		.loc 1 995 35 view .LVU5522
 15860 56b8 4989E8   		mov	r8, rbp	# warn_prime, warn_prime
GAS LISTING /tmp/ccNeV1of.s 			page 428


 15861              	.LVL945:
 15862              	.L1205:
 993:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 15863              		.loc 1 993 68 is_stmt 1 view .LVU5523
 15864              	# sieve_extend.c:993:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 993:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 15865              		.loc 1 993 69 is_stmt 0 view .LVU5524
 15866 56bb 4883C301 		add	rbx, 1	# c,
 15867              	.LVL946:
 993:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 15868              		.loc 1 993 32 is_stmt 1 view .LVU5525
 15869              	# sieve_extend.c:993:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 993:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 15870              		.loc 1 993 13 is_stmt 0 view .LVU5526
 15871 56bf 4839FB   		cmp	rbx, rdi	# c, _137
 15872 56c2 0F87F1FE 		ja	.L1206	#,
 15872      FFFF
 15873              	# sieve_extend.c:993:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 993:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 15874              		.loc 1 993 51 view .LVU5527
 15875 56c8 4989DB   		mov	r11, rbx	# tmp209, c
 15876 56cb 4C0FAFDB 		imul	r11, rbx	# tmp209, c
 15877              	# sieve_extend.c:993:             for(counter_t c=1; c<=sieve->bits && c*c <= prime*2+1; c++) {
 993:sieve_extend.c ****                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 15878              		.loc 1 993 47 view .LVU5528
 15879 56cf 4D39E3   		cmp	r11, r12	# tmp209, ivtmp.691
 15880 56d2 0F87E1FE 		ja	.L1206	#,
 15880      FFFF
 15881              	.LVL947:
 15882              	.L1207:
 994:sieve_extend.c ****                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marked prime, but %ju * %ju
 15883              		.loc 1 994 17 is_stmt 1 view .LVU5529
 15884 56d8 488D2C1B 		lea	rbp, [rbx+rbx]	# _218,
 15885 56dc 31D2     		xor	edx, edx	# tmp204
 15886 56de 4C89E0   		mov	rax, r12	# tmp203, ivtmp.691
 15887              	# sieve_extend.c:994:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 994:sieve_extend.c ****                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marked prime, but %ju * %ju
 15888              		.loc 1 994 39 is_stmt 0 view .LVU5530
 15889 56e1 488D7501 		lea	rsi, 1[rbp]	# _55,
 15890 56e5 48F7F6   		div	rsi	# _55
 15891              	# sieve_extend.c:994:                 if ((prime*2+1) % (c*2+1) == 0 && (c*2+1) != (prime*2+1)) {
 994:sieve_extend.c ****                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marked prime, but %ju * %ju
 15892              		.loc 1 994 48 view .LVU5531
 15893 56e8 4885D2   		test	rdx, rdx	# tmp204
 15894 56eb 75CE     		jne	.L1205	#,
 994:sieve_extend.c ****                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marked prime, but %ju * %ju
 15895              		.loc 1 994 48 view .LVU5532
 15896 56ed 4939EE   		cmp	r14, rbp	# ivtmp.693, _218
 15897 56f0 74C9     		je	.L1205	#,
 995:sieve_extend.c ****                 }
 15898              		.loc 1 995 21 is_stmt 1 view .LVU5533
 15899              	# sieve_extend.c:995:                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marke
 995:sieve_extend.c ****                 }
 15900              		.loc 1 995 24 is_stmt 0 view .LVU5534
 15901 56f2 4983F81D 		cmp	r8, 29	# warn_prime,
 15902              	# sieve_extend.c:995:                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marke
 995:sieve_extend.c ****                 }
GAS LISTING /tmp/ccNeV1of.s 			page 429


 15903              		.loc 1 995 35 view .LVU5535
 15904 56f6 498D6801 		lea	rbp, 1[r8]	# warn_prime,
 15905              	.LVL948:
 15906              	# sieve_extend.c:995:                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marke
 995:sieve_extend.c ****                 }
 15907              		.loc 1 995 24 view .LVU5536
 15908 56fa 77BC     		ja	.L1216	#,
 995:sieve_extend.c ****                 }
 15909              		.loc 1 995 44 is_stmt 1 view .LVU5537
 15910              	.LVL949:
 15911              	.LBB771:
 15912              	.LBI765:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15913              		.loc 3 105 1 view .LVU5538
 15914              	.LBB768:
 15915              		.loc 3 107 3 view .LVU5539
 15916              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15917              		.loc 3 107 10 is_stmt 0 view .LVU5540
 15918 56fc 4989F0   		mov	r8, rsi	#, _55
 15919 56ff 4989C1   		mov	r9, rax	#, tmp203
 15920 5702 BF010000 		mov	edi, 1	#,
 15920      00
 15921 5707 4C89F9   		mov	rcx, r15	#, prime
 15922 570a 4C892424 		mov	QWORD PTR [rsp], r12	#, ivtmp.691
 15923 570e 4C89E2   		mov	rdx, r12	#, ivtmp.691
 15924 5711 488D3500 		lea	rsi, .LC18[rip]	#,
 15924      000000
 15925 5718 31C0     		xor	eax, eax	#
 15926 571a E8000000 		call	__printf_chk@PLT	#
 15926      00
 15927              	.LVL950:
 15928 571f 498B7D08 		mov	rdi, QWORD PTR 8[r13]	# _137, MEM[(uint64_t *)sieve_18(D) + 8B]
 15929              	.LBE768:
 15930              	.LBE771:
 15931              	# sieve_extend.c:995:                     if (warn_prime++ < 30) printf("Number %ju (%ju) was marke
 995:sieve_extend.c ****                 }
 15932              		.loc 1 995 35 view .LVU5541
 15933 5723 4989E8   		mov	r8, rbp	# warn_prime, warn_prime
 15934              	.LBB772:
 15935              	.LBB769:
 15936              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15937              		.loc 3 107 10 view .LVU5542
 15938 5726 EB93     		jmp	.L1205	#
 15939              	.LVL951:
 15940              	.L1180:
 15941              		.loc 3 107 10 view .LVU5543
 15942              	.LBE769:
 15943              	.LBE772:
 15944              	.LBE783:
 15945              	.LBE786:
 15946              	.LBE788:
 15947              	.LBE790:
 15948              	.LBB791:
 15949              	.LBB756:
 984:sieve_extend.c **** }
 15950              		.loc 1 984 5 is_stmt 1 view .LVU5544
 984:sieve_extend.c **** }
GAS LISTING /tmp/ccNeV1of.s 			page 430


 15951              		.loc 1 984 5 is_stmt 0 view .LVU5545
 15952              	.LBE756:
 15953              	.LBE791:
1013:sieve_extend.c ****     switch(sieve->size) {
 15954              		.loc 1 1013 5 is_stmt 1 view .LVU5546
1014:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 15955              		.loc 1 1014 5 view .LVU5547
 15956 5728 4531ED   		xor	r13d, r13d	# <retval>
 15957 572b 4981F9A0 		cmp	r9, 100000	# pretmp_201,
 15957      860100
 15958 5732 41BC0100 		mov	r12d, 1	# _135,
 15958      0000
 15959 5738 41B80100 		mov	r8d, 1	# primeCount,
 15959      0000
 15960 573e 0F842202 		je	.L1219	#,
 15960      0000
 15961 5744 0F872201 		ja	.L1211	#,
 15961      0000
 15962 574a 4983F964 		cmp	r9, 100	# pretmp_201,
 15963 574e B9190000 		mov	ecx, 25	# valid_primes,
 15963      00
 15964 5753 742A     		je	.L1198	#,
 15965              		.p2align 4,,2
 15966 5755 0F863F01 		jbe	.L1332	#,
 15966      0000
 15967 575b 4981F9E8 		cmp	r9, 1000	# pretmp_201,
 15967      030000
 15968              	# sieve_extend.c:1017:         case 1000:          valid_primes = 168;      break;
1017:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 15969              		.loc 1 1017 42 is_stmt 0 view .LVU5548
 15970 5762 B9A80000 		mov	ecx, 168	# valid_primes,
 15970      00
 15971              	# sieve_extend.c:1014:     switch(sieve->size) {
1014:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 15972              		.loc 1 1014 5 view .LVU5549
 15973 5767 7416     		je	.L1198	#,
 15974 5769 4981F910 		cmp	r9, 10000	# pretmp_201,
 15974      270000
 15975 5770 B9CD0400 		mov	ecx, 1229	# tmp223,
 15975      00
 15976 5775 41BA0000 		mov	r10d, 0	# tmp224,
 15976      0000
 15977 577b 490F45CA 		cmovne	rcx, r10	# tmp223,, valid_primes, tmp224
 15978              	.LVL952:
 15979              	.L1198:
1029:sieve_extend.c ****         printf("No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produ
 15980              		.loc 1 1029 5 is_stmt 1 view .LVU5550
 15981              	# sieve_extend.c:1029:     if (!valid && option_verboselevel >= 1) {
1029:sieve_extend.c ****         printf("No valid result. Sievesize %ju was expected to have %ju primes, but algorithm produ
 15982              		.loc 1 1029 8 is_stmt 0 view .LVU5551
 15983 577f 85DB     		test	ebx, ebx	# option_verboselevel
 15984 5781 0F8EF7FB 		jle	.L1199	#,
 15984      FFFF
 15985 5787 4584E4   		test	r12b, r12b	# _135
 15986 578a 0F84EEFB 		je	.L1199	#,
 15986      FFFF
1030:sieve_extend.c ****         if (!valid && option_verboselevel >= 2) show_primes(sieve, default_show_primes_on_error);
GAS LISTING /tmp/ccNeV1of.s 			page 431


 15987              		.loc 1 1030 9 is_stmt 1 view .LVU5552
 15988              	.LVL953:
 15989              	.LBB792:
 15990              	.LBI792:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 15991              		.loc 3 105 1 view .LVU5553
 15992              	.LBB793:
 15993              		.loc 3 107 3 view .LVU5554
 15994              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 15995              		.loc 3 107 10 is_stmt 0 view .LVU5555
 15996 5790 31C0     		xor	eax, eax	#
 15997 5792 4C89CA   		mov	rdx, r9	#, pretmp_201
 15998 5795 488D3500 		lea	rsi, .LC16[rip]	#,
 15998      000000
 15999 579c BF010000 		mov	edi, 1	#,
 15999      00
 16000 57a1 E8000000 		call	__printf_chk@PLT	#
 16000      00
 16001              	.LVL954:
 16002              		.loc 3 107 10 view .LVU5556
 16003              	.LBE793:
 16004              	.LBE792:
1031:sieve_extend.c ****     }
 16005              		.loc 1 1031 9 is_stmt 1 view .LVU5557
 16006              	# sieve_extend.c:1031:         if (!valid && option_verboselevel >= 2) show_primes(sieve, default_s
1031:sieve_extend.c ****     }
 16007              		.loc 1 1031 12 is_stmt 0 view .LVU5558
 16008 57a6 83FB01   		cmp	ebx, 1	# option_verboselevel,
 16009 57a9 0F8424FE 		je	.L1179	#,
 16009      FFFF
1031:sieve_extend.c ****     }
 16010              		.loc 1 1031 49 is_stmt 1 discriminator 1 view .LVU5559
 16011 57af 488D7508 		lea	rsi, 8[rbp]	# tmp195,
 16012 57b3 BA640000 		mov	edx, 100	#,
 16012      00
 16013 57b8 4889EF   		mov	rdi, rbp	#, sieve
 16014 57bb E8E0CFFF 		call	show_primes.isra.0	#
 16014      FF
 16015              	.LVL955:
1033:sieve_extend.c ****     return (valid);
 16016              		.loc 1 1033 5 discriminator 1 view .LVU5560
 16017 57c0 E9CBFBFF 		jmp	.L1201	#
 16017      FF
 16018              	.LVL956:
 16019              	.L1330:
 16020              	.LBB794:
 16021              	.LBB789:
 16022              	.LBB787:
 16023              	.LBB784:
 16024              	# sieve_extend.c:1004:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1004:sieve_extend.c ****         }
 16025              		.loc 1 1004 44 is_stmt 0 view .LVU5561
 16026 57c5 488B4C24 		mov	rcx, QWORD PTR 24[rsp]	# warn_nonprime, %sfp
 16026      18
 16027              	# sieve_extend.c:1004:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1004:sieve_extend.c ****         }
 16028              		.loc 1 1004 28 view .LVU5562
GAS LISTING /tmp/ccNeV1of.s 			page 432


 16029 57ca 4883F91D 		cmp	rcx, 29	# warn_nonprime,
 16030              	# sieve_extend.c:1004:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1004:sieve_extend.c ****         }
 16031              		.loc 1 1004 44 view .LVU5563
 16032 57ce 488D5901 		lea	rbx, 1[rcx]	# warn_nonprime,
 16033              	.LVL957:
 16034              	# sieve_extend.c:1004:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1004:sieve_extend.c ****         }
 16035              		.loc 1 1004 28 view .LVU5564
 16036 57d2 761D     		jbe	.L1214	#,
 16037              	# sieve_extend.c:1004:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1004:sieve_extend.c ****         }
 16038              		.loc 1 1004 44 view .LVU5565
 16039 57d4 48895C24 		mov	QWORD PTR 24[rsp], rbx	# %sfp, warn_nonprime
 16039      18
 16040 57d9 E9DBFDFF 		jmp	.L1206	#
 16040      FF
 16041              	.LVL958:
 16042              	.L1317:
1004:sieve_extend.c ****         }
 16043              		.loc 1 1004 44 view .LVU5566
 16044 57de 488B5424 		mov	rdx, QWORD PTR 24[rsp]	# warn_nonprime, %sfp
 16044      18
 16045              	# sieve_extend.c:1004:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1004:sieve_extend.c ****         }
 16046              		.loc 1 1004 28 view .LVU5567
 16047 57e3 4883FA1D 		cmp	rdx, 29	# warn_nonprime,
 16048              	# sieve_extend.c:1004:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1004:sieve_extend.c ****         }
 16049              		.loc 1 1004 44 view .LVU5568
 16050 57e7 488D5A01 		lea	rbx, 1[rdx]	# warn_nonprime,
 16051              	.LVL959:
 16052              	# sieve_extend.c:1004:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1004:sieve_extend.c ****         }
 16053              		.loc 1 1004 28 view .LVU5569
 16054 57eb 0F87DDFD 		ja	.L1319	#,
 16054      FFFF
 16055              	.LVL960:
 16056              	.L1214:
 16057              	.LBB777:
 16058              	.LBB778:
 16059              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16060              		.loc 3 107 10 view .LVU5570
 16061 57f1 BF010000 		mov	edi, 1	#,
 16061      00
 16062              	.LBE778:
 16063              	.LBE777:
 16064              	# sieve_extend.c:1004:             if (c_prime==0 && warn_nonprime++ < 30) printf("Number %ju (%ju)
1004:sieve_extend.c ****         }
 16065              		.loc 1 1004 53 view .LVU5571
 16066 57f6 4B8D543F 		lea	rdx, 1[r15+r15]	# tmp220,
 16066      01
 16067              	.LBB781:
 16068              	.LBB779:
 16069              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16070              		.loc 3 107 10 view .LVU5572
 16071 57fb 4C89F9   		mov	rcx, r15	#, prime
GAS LISTING /tmp/ccNeV1of.s 			page 433


 16072 57fe 488D3500 		lea	rsi, .LC19[rip]	#,
 16072      000000
 16073 5805 4C894424 		mov	QWORD PTR 40[rsp], r8	# %sfp, warn_prime
 16073      28
 16074              	.LBE779:
 16075              	.LBE781:
1004:sieve_extend.c ****         }
 16076              		.loc 1 1004 53 is_stmt 1 view .LVU5573
 16077              	.LVL961:
 16078              	.LBB782:
 16079              	.LBI777:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16080              		.loc 3 105 1 view .LVU5574
 16081              	.LBB780:
 16082              		.loc 3 107 3 view .LVU5575
 16083              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16084              		.loc 3 107 10 is_stmt 0 view .LVU5576
 16085 580a 31C0     		xor	eax, eax	#
 16086 580c E8000000 		call	__printf_chk@PLT	#
 16086      00
 16087              	.LVL962:
 16088              		.loc 3 107 10 view .LVU5577
 16089 5811 498B7D08 		mov	rdi, QWORD PTR 8[r13]	# _137, MEM[(uint64_t *)sieve_18(D) + 8B]
 16090 5815 4C8B4424 		mov	r8, QWORD PTR 40[rsp]	# warn_prime, %sfp
 16090      28
 16091 581a 48895C24 		mov	QWORD PTR 24[rsp], rbx	# %sfp, warn_nonprime
 16091      18
 16092 581f E995FDFF 		jmp	.L1206	#
 16092      FF
 16093              	.LVL963:
 16094              	.L1194:
 16095              		.loc 3 107 10 view .LVU5578
 16096 5824 4981F8A2 		cmp	r8, 78498	# primeCount,
 16096      320100
 16097              	.LBE780:
 16098              	.LBE782:
 16099              	.LBE784:
 16100              	.LBE787:
 16101              	.LBE789:
 16102              	.LBE794:
 16103              	# sieve_extend.c:1020:         case 1000000:       valid_primes = 78498;    break;
1020:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 16104              		.loc 1 1020 42 view .LVU5579
 16105 582b B9A23201 		mov	ecx, 78498	# valid_primes,
 16105      00
 16106 5830 410F94C6 		sete	r14b	#, tmp183
 16107 5834 4421F2   		and	edx, r14d	# _253, tmp183
 16108 5837 4981F8A2 		cmp	r8, 78498	# primeCount,
 16108      320100
 16109 583e 450FB6EE 		movzx	r13d, r14b	# <retval>, tmp183
 16110 5842 410F95C4 		setne	r12b	#, _135
1020:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 16111              		.loc 1 1020 29 is_stmt 1 view .LVU5580
 16112              	.LVL964:
1020:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 16113              		.loc 1 1020 54 view .LVU5581
 16114              	# sieve_extend.c:1020:         case 1000000:       valid_primes = 78498;    break;
GAS LISTING /tmp/ccNeV1of.s 			page 434


1020:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 16115              		.loc 1 1020 9 is_stmt 0 view .LVU5582
 16116 5846 E915FBFF 		jmp	.L1197	#
 16116      FF
 16117              	.LVL965:
 16118              	.L1188:
1020:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 16119              		.loc 1 1020 9 view .LVU5583
 16120 584b 4983F804 		cmp	r8, 4	# primeCount,
 16121              	# sieve_extend.c:1015:         case 10:            valid_primes = 4;        break;
1015:sieve_extend.c ****         case 100:           valid_primes = 25;       break;
 16122              		.loc 1 1015 42 view .LVU5584
 16123 584f B9040000 		mov	ecx, 4	# valid_primes,
 16123      00
 16124 5854 410F94C2 		sete	r10b	#, tmp175
 16125 5858 4421D2   		and	edx, r10d	# _253, tmp175
 16126 585b 4983F804 		cmp	r8, 4	# primeCount,
 16127 585f 450FB6EA 		movzx	r13d, r10b	# <retval>, tmp175
 16128 5863 410F95C4 		setne	r12b	#, _135
 16129 5867 E9F4FAFF 		jmp	.L1197	#
 16129      FF
 16130              	.LVL966:
 16131              	.L1211:
 16132              	# sieve_extend.c:1014:     switch(sieve->size) {
1014:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 16133              		.loc 1 1014 5 view .LVU5585
 16134 586c 4981F900 		cmp	r9, 100000000	# pretmp_201,
 16134      E1F505
 16135              	# sieve_extend.c:1022:         case 100000000:     valid_primes = 5761455;  break;
1022:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 16136              		.loc 1 1022 42 view .LVU5586
 16137 5873 B9AFE957 		mov	ecx, 5761455	# valid_primes,
 16137      00
 16138              	# sieve_extend.c:1014:     switch(sieve->size) {
1014:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 16139              		.loc 1 1014 5 view .LVU5587
 16140 5878 0F8401FF 		je	.L1198	#,
 16140      FFFF
 16141 587e 762C     		jbe	.L1333	#,
 16142 5880 4981F900 		cmp	r9, 1000000000	# pretmp_201,
 16142      CA9A3B
 16143 5887 B92EDF07 		mov	ecx, 50847534	# tmp227,
 16143      03
 16144 588c B8000000 		mov	eax, 0	# tmp228,
 16144      00
 16145 5891 480F45C8 		cmovne	rcx, rax	# tmp227,, valid_primes, tmp228
 16146 5895 E9E5FEFF 		jmp	.L1198	#
 16146      FF
 16147              	.L1332:
 16148 589a 31C9     		xor	ecx, ecx	# valid_primes
 16149 589c 4983F90A 		cmp	r9, 10	# pretmp_201,
 16150 58a0 0F94C1   		sete	cl	#, valid_primes
 16151 58a3 48C1E102 		sal	rcx, 2	# valid_primes,
 16152 58a7 E9D3FEFF 		jmp	.L1198	#
 16152      FF
 16153              	.L1333:
 16154 58ac 4981F940 		cmp	r9, 1000000	# pretmp_201,
GAS LISTING /tmp/ccNeV1of.s 			page 435


 16154      420F00
 16155              	# sieve_extend.c:1020:         case 1000000:       valid_primes = 78498;    break;
1020:sieve_extend.c ****         case 10000000:      valid_primes = 664579;   break;
 16156              		.loc 1 1020 42 view .LVU5588
 16157 58b3 B9A23201 		mov	ecx, 78498	# valid_primes,
 16157      00
 16158              	# sieve_extend.c:1014:     switch(sieve->size) {
1014:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 16159              		.loc 1 1014 5 view .LVU5589
 16160 58b8 0F84C1FE 		je	.L1198	#,
 16160      FFFF
 16161 58be 4981F980 		cmp	r9, 10000000	# pretmp_201,
 16161      969800
 16162 58c5 B903240A 		mov	ecx, 664579	# tmp225,
 16162      00
 16163 58ca BE000000 		mov	esi, 0	# tmp226,
 16163      00
 16164 58cf 480F45CE 		cmovne	rcx, rsi	# tmp225,, valid_primes, tmp226
 16165 58d3 E9A7FEFF 		jmp	.L1198	#
 16165      FF
 16166              	.LVL967:
 16167              	.L1186:
1014:sieve_extend.c ****         case 10:            valid_primes = 4;        break;
 16168              		.loc 1 1014 5 view .LVU5590
 16169 58d8 4981F8A8 		cmp	r8, 168	# primeCount,
 16169      000000
 16170              	# sieve_extend.c:1017:         case 1000:          valid_primes = 168;      break;
1017:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 16171              		.loc 1 1017 42 view .LVU5591
 16172 58df B9A80000 		mov	ecx, 168	# valid_primes,
 16172      00
 16173 58e4 410F94C4 		sete	r12b	#, tmp177
 16174 58e8 4421E2   		and	edx, r12d	# _253, tmp177
 16175 58eb 4981F8A8 		cmp	r8, 168	# primeCount,
 16175      000000
 16176 58f2 450FB6EC 		movzx	r13d, r12b	# <retval>, tmp177
 16177 58f6 410F95C4 		setne	r12b	#, _135
1017:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 16178              		.loc 1 1017 29 is_stmt 1 view .LVU5592
 16179              	.LVL968:
1017:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 16180              		.loc 1 1017 54 view .LVU5593
 16181              	# sieve_extend.c:1017:         case 1000:          valid_primes = 168;      break;
1017:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 16182              		.loc 1 1017 9 is_stmt 0 view .LVU5594
 16183 58fa E961FAFF 		jmp	.L1197	#
 16183      FF
 16184              	.LVL969:
 16185              	.L1192:
1017:sieve_extend.c ****         case 10000:         valid_primes = 1229;     break;
 16186              		.loc 1 1017 9 view .LVU5595
 16187 58ff 4981F8AF 		cmp	r8, 5761455	# primeCount,
 16187      E95700
 16188              	# sieve_extend.c:1022:         case 100000000:     valid_primes = 5761455;  break;
1022:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 16189              		.loc 1 1022 42 view .LVU5596
 16190 5906 B9AFE957 		mov	ecx, 5761455	# valid_primes,
GAS LISTING /tmp/ccNeV1of.s 			page 436


 16190      00
 16191 590b 0F94C0   		sete	al	#, tmp187
 16192 590e 21C2     		and	edx, eax	# _253, tmp187
 16193 5910 4981F8AF 		cmp	r8, 5761455	# primeCount,
 16193      E95700
 16194 5917 440FB6E8 		movzx	r13d, al	# <retval>, tmp187
 16195 591b 410F95C4 		setne	r12b	#, _135
1022:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 16196              		.loc 1 1022 29 is_stmt 1 view .LVU5597
 16197              	.LVL970:
1022:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 16198              		.loc 1 1022 54 view .LVU5598
 16199              	# sieve_extend.c:1022:         case 100000000:     valid_primes = 5761455;  break;
1022:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 16200              		.loc 1 1022 9 is_stmt 0 view .LVU5599
 16201 591f E93CFAFF 		jmp	.L1197	#
 16201      FF
 16202              	.LVL971:
 16203              	.L1190:
1022:sieve_extend.c ****         case 1000000000:    valid_primes = 50847534; break;
 16204              		.loc 1 1022 9 view .LVU5600
 16205 5924 4D85C0   		test	r8, r8	# primeCount
 16206 5927 410F94C3 		sete	r11b	#, tmp191
 16207 592b 4421DA   		and	edx, r11d	# _253, tmp191
 16208 592e 4D85C0   		test	r8, r8	# primeCount
 16209 5931 450FB6EB 		movzx	r13d, r11b	# <retval>, tmp191
 16210 5935 410F95C4 		setne	r12b	#, _135
1024:sieve_extend.c ****     }
 16211              		.loc 1 1024 29 is_stmt 1 view .LVU5601
 16212              	# sieve_extend.c:1024:         default:            valid_primes= 0;
1024:sieve_extend.c ****     }
 16213              		.loc 1 1024 41 is_stmt 0 view .LVU5602
 16214 5939 31C9     		xor	ecx, ecx	# valid_primes
 16215 593b E920FAFF 		jmp	.L1197	#
 16215      FF
 16216              	.L1184:
1024:sieve_extend.c ****     }
 16217              		.loc 1 1024 41 view .LVU5603
 16218 5940 4981F878 		cmp	r8, 9592	# primeCount,
 16218      250000
 16219              	# sieve_extend.c:1019:         case 100000:        valid_primes = 9592;     break;
1019:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
 16220              		.loc 1 1019 42 view .LVU5604
 16221 5947 B9782500 		mov	ecx, 9592	# valid_primes,
 16221      00
 16222 594c 400F94C7 		sete	dil	#, tmp181
 16223 5950 21FA     		and	edx, edi	# _253, tmp181
 16224 5952 4981F878 		cmp	r8, 9592	# primeCount,
 16224      250000
 16225 5959 440FB6EF 		movzx	r13d, dil	# <retval>, tmp181
 16226 595d 410F95C4 		setne	r12b	#, _135
1019:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
 16227              		.loc 1 1019 29 is_stmt 1 view .LVU5605
 16228              	.LVL972:
1019:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
 16229              		.loc 1 1019 54 view .LVU5606
 16230              	# sieve_extend.c:1019:         case 100000:        valid_primes = 9592;     break;
GAS LISTING /tmp/ccNeV1of.s 			page 437


1019:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
 16231              		.loc 1 1019 9 is_stmt 0 view .LVU5607
 16232 5961 E9FAF9FF 		jmp	.L1197	#
 16232      FF
 16233              	.LVL973:
 16234              	.L1219:
 16235              	# sieve_extend.c:1019:         case 100000:        valid_primes = 9592;     break;
1019:sieve_extend.c ****         case 1000000:       valid_primes = 78498;    break;
 16236              		.loc 1 1019 42 view .LVU5608
 16237 5966 B9782500 		mov	ecx, 9592	# valid_primes,
 16237      00
 16238 596b E90FFEFF 		jmp	.L1198	#
 16238      FF
 16239              		.cfi_endproc
 16240              	.LFE84:
 16242              		.section	.rodata.str1.8
 16243 016d 000000   		.align 8
 16244              	.LC20:
 16245 0170 55736167 		.string	"Usage: %s [options] [maximum]\n"
 16245      653A2025 
 16245      73205B6F 
 16245      7074696F 
 16245      6E735D20 
 16246              		.section	.rodata.str1.1
 16247              	.LC21:
 16248 003b 4F707469 		.string	"Options:\n"
 16248      6F6E733A 
 16248      0A00
 16249              		.section	.rodata.str1.8
 16250 018f 00       		.align 8
 16251              	.LC22:
 16252 0190 20202D2D 		.string	"  --verbose <level>  Show more output to a certain level:\n"
 16252      76657262 
 16252      6F736520 
 16252      3C6C6576 
 16252      656C3E20 
 16253 01cb 00000000 		.align 8
 16253      00
 16254              	.LC23:
 16255 01d0 20202020 		.string	"                     1 - show phase progress\n"
 16255      20202020 
 16255      20202020 
 16255      20202020 
 16255      20202020 
 16256 01fe 0000     		.align 8
 16257              	.LC24:
 16258 0200 20202020 		.string	"                     2 - show general progress within the phase\n"
 16258      20202020 
 16258      20202020 
 16258      20202020 
 16258      20202020 
 16259 0241 00000000 		.align 8
 16259      000000
 16260              	.LC25:
 16261 0248 20202020 		.string	"                     3 - show actual work\n"
 16261      20202020 
 16261      20202020 
GAS LISTING /tmp/ccNeV1of.s 			page 438


 16261      20202020 
 16261      20202020 
 16262 0273 00000000 		.align 8
 16262      00
 16263              	.LC26:
 16264 0278 20202D2D 		.string	"  --check            check the correctness of the algorithm\n"
 16264      63686563 
 16264      6B202020 
 16264      20202020 
 16264      20202020 
 16265 02b5 000000   		.align 8
 16266              	.LC27:
 16267 02b8 20202D2D 		.string	"  --show <maximum>   Show the primes found up to the maximum\n"
 16267      73686F77 
 16267      203C6D61 
 16267      78696D75 
 16267      6D3E2020 
 16268 02f6 0000     		.align 8
 16269              	.LC28:
 16270 02f8 20202D2D 		.string	"  --tune  <level>    find the best settings for the current os and hardware\n"
 16270      74756E65 
 16270      20203C6C 
 16270      6576656C 
 16270      3E202020 
 16271 0345 000000   		.align 8
 16272              	.LC29:
 16273 0348 20202020 		.string	"                     1 - fast tuning\n"
 16273      20202020 
 16273      20202020 
 16273      20202020 
 16273      20202020 
 16274 036e 0000     		.align 8
 16275              	.LC30:
 16276 0370 20202020 		.string	"                     2 - refined tuning\n"
 16276      20202020 
 16276      20202020 
 16276      20202020 
 16276      20202020 
 16277 0399 00000000 		.align 8
 16277      000000
 16278              	.LC31:
 16279 03a0 20202020 		.string	"                     3 - maximum tuning (takes long)\n"
 16279      20202020 
 16279      20202020 
 16279      20202020 
 16279      20202020 
 16280              		.text
 16281              		.p2align 4
 16282              		.globl	usage
 16284              	usage:
 16285              	.LVL974:
 16286              	.LFB85:
1037:sieve_extend.c ****     fprintf(stderr, "Usage: %s [options] [maximum]\n", name);
 16287              		.loc 1 1037 24 is_stmt 1 view -0
 16288              		.cfi_startproc
1037:sieve_extend.c ****     fprintf(stderr, "Usage: %s [options] [maximum]\n", name);
 16289              		.loc 1 1037 24 is_stmt 0 view .LVU5610
GAS LISTING /tmp/ccNeV1of.s 			page 439


 16290 5970 F30F1EFA 		endbr64	
 16291 5974 50       		push	rax	#
 16292              		.cfi_def_cfa_offset 16
 16293 5975 58       		pop	rax	#
 16294              		.cfi_def_cfa_offset 8
1038:sieve_extend.c ****     fprintf(stderr, "Options:\n");
 16295              		.loc 1 1038 5 is_stmt 1 view .LVU5611
 16296              	.LVL975:
 16297              	.LBB795:
 16298              	.LBI795:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16299              		.loc 3 98 1 view .LVU5612
 16300              	.LBB796:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16301              		.loc 3 100 3 view .LVU5613
 16302              	.LBE796:
 16303              	.LBE795:
 16304              	# sieve_extend.c:1037: void usage(char *name) {
1037:sieve_extend.c ****     fprintf(stderr, "Usage: %s [options] [maximum]\n", name);
 16305              		.loc 1 1037 24 is_stmt 0 view .LVU5614
 16306 5976 488D6424 		lea	rsp, -8[rsp]	#,
 16306      F8
 16307              		.cfi_def_cfa_offset 16
 16308              	# sieve_extend.c:1037: void usage(char *name) {
1037:sieve_extend.c ****     fprintf(stderr, "Usage: %s [options] [maximum]\n", name);
 16309              		.loc 1 1037 24 view .LVU5615
 16310 597b 4889F9   		mov	rcx, rdi	# name, tmp107
 16311              	.LBB798:
 16312              	.LBB797:
 16313              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16314              		.loc 3 100 10 view .LVU5616
 16315 597e 488B3D00 		mov	rdi, QWORD PTR stderr[rip]	#, stderr
 16315      000000
 16316              	.LVL976:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16317              		.loc 3 100 10 view .LVU5617
 16318 5985 488D1500 		lea	rdx, .LC20[rip]	#,
 16318      000000
 16319 598c BE010000 		mov	esi, 1	#,
 16319      00
 16320 5991 31C0     		xor	eax, eax	#
 16321 5993 E8000000 		call	__fprintf_chk@PLT	#
 16321      00
 16322              	.LVL977:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16323              		.loc 3 100 10 view .LVU5618
 16324              	.LBE797:
 16325              	.LBE798:
1039:sieve_extend.c ****     fprintf(stderr, "  --verbose <level>  Show more output to a certain level:\n");
 16326              		.loc 1 1039 5 is_stmt 1 view .LVU5619
 16327              	.LBB799:
 16328              	.LBI799:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16329              		.loc 3 98 1 view .LVU5620
 16330              	.LBB800:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
GAS LISTING /tmp/ccNeV1of.s 			page 440


 16331              		.loc 3 100 3 view .LVU5621
 16332              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16333              		.loc 3 100 10 is_stmt 0 view .LVU5622
 16334 5998 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 16334      000000
 16335 599f BA090000 		mov	edx, 9	#,
 16335      00
 16336 59a4 BE010000 		mov	esi, 1	#,
 16336      00
 16337 59a9 488D3D00 		lea	rdi, .LC21[rip]	#,
 16337      000000
 16338 59b0 E8000000 		call	fwrite@PLT	#
 16338      00
 16339              	.LVL978:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16340              		.loc 3 100 10 view .LVU5623
 16341              	.LBE800:
 16342              	.LBE799:
1040:sieve_extend.c ****     fprintf(stderr, "                     1 - show phase progress\n");
 16343              		.loc 1 1040 5 is_stmt 1 view .LVU5624
 16344              	.LBB801:
 16345              	.LBI801:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16346              		.loc 3 98 1 view .LVU5625
 16347              	.LBB802:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16348              		.loc 3 100 3 view .LVU5626
 16349              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16350              		.loc 3 100 10 is_stmt 0 view .LVU5627
 16351 59b5 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 16351      000000
 16352 59bc BA3A0000 		mov	edx, 58	#,
 16352      00
 16353 59c1 BE010000 		mov	esi, 1	#,
 16353      00
 16354 59c6 488D3D00 		lea	rdi, .LC22[rip]	#,
 16354      000000
 16355 59cd E8000000 		call	fwrite@PLT	#
 16355      00
 16356              	.LVL979:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16357              		.loc 3 100 10 view .LVU5628
 16358              	.LBE802:
 16359              	.LBE801:
1041:sieve_extend.c ****     fprintf(stderr, "                     2 - show general progress within the phase\n");
 16360              		.loc 1 1041 5 is_stmt 1 view .LVU5629
 16361              	.LBB803:
 16362              	.LBI803:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16363              		.loc 3 98 1 view .LVU5630
 16364              	.LBB804:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16365              		.loc 3 100 3 view .LVU5631
 16366              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
GAS LISTING /tmp/ccNeV1of.s 			page 441


 16367              		.loc 3 100 10 is_stmt 0 view .LVU5632
 16368 59d2 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 16368      000000
 16369 59d9 BA2D0000 		mov	edx, 45	#,
 16369      00
 16370 59de BE010000 		mov	esi, 1	#,
 16370      00
 16371 59e3 488D3D00 		lea	rdi, .LC23[rip]	#,
 16371      000000
 16372 59ea E8000000 		call	fwrite@PLT	#
 16372      00
 16373              	.LVL980:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16374              		.loc 3 100 10 view .LVU5633
 16375              	.LBE804:
 16376              	.LBE803:
1042:sieve_extend.c ****     fprintf(stderr, "                     3 - show actual work\n");
 16377              		.loc 1 1042 5 is_stmt 1 view .LVU5634
 16378              	.LBB805:
 16379              	.LBI805:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16380              		.loc 3 98 1 view .LVU5635
 16381              	.LBB806:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16382              		.loc 3 100 3 view .LVU5636
 16383              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16384              		.loc 3 100 10 is_stmt 0 view .LVU5637
 16385 59ef 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 16385      000000
 16386 59f6 BA400000 		mov	edx, 64	#,
 16386      00
 16387 59fb BE010000 		mov	esi, 1	#,
 16387      00
 16388 5a00 488D3D00 		lea	rdi, .LC24[rip]	#,
 16388      000000
 16389 5a07 E8000000 		call	fwrite@PLT	#
 16389      00
 16390              	.LVL981:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16391              		.loc 3 100 10 view .LVU5638
 16392              	.LBE806:
 16393              	.LBE805:
1043:sieve_extend.c ****     fprintf(stderr, "  --check            check the correctness of the algorithm\n");
 16394              		.loc 1 1043 5 is_stmt 1 view .LVU5639
 16395              	.LBB807:
 16396              	.LBI807:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16397              		.loc 3 98 1 view .LVU5640
 16398              	.LBB808:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16399              		.loc 3 100 3 view .LVU5641
 16400              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16401              		.loc 3 100 10 is_stmt 0 view .LVU5642
 16402 5a0c 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 16402      000000
GAS LISTING /tmp/ccNeV1of.s 			page 442


 16403 5a13 BA2A0000 		mov	edx, 42	#,
 16403      00
 16404 5a18 BE010000 		mov	esi, 1	#,
 16404      00
 16405 5a1d 488D3D00 		lea	rdi, .LC25[rip]	#,
 16405      000000
 16406 5a24 E8000000 		call	fwrite@PLT	#
 16406      00
 16407              	.LVL982:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16408              		.loc 3 100 10 view .LVU5643
 16409              	.LBE808:
 16410              	.LBE807:
1044:sieve_extend.c ****     fprintf(stderr, "  --show <maximum>   Show the primes found up to the maximum\n");
 16411              		.loc 1 1044 5 is_stmt 1 view .LVU5644
 16412              	.LBB809:
 16413              	.LBI809:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16414              		.loc 3 98 1 view .LVU5645
 16415              	.LBB810:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16416              		.loc 3 100 3 view .LVU5646
 16417              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16418              		.loc 3 100 10 is_stmt 0 view .LVU5647
 16419 5a29 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 16419      000000
 16420 5a30 BA3C0000 		mov	edx, 60	#,
 16420      00
 16421 5a35 BE010000 		mov	esi, 1	#,
 16421      00
 16422 5a3a 488D3D00 		lea	rdi, .LC26[rip]	#,
 16422      000000
 16423 5a41 E8000000 		call	fwrite@PLT	#
 16423      00
 16424              	.LVL983:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16425              		.loc 3 100 10 view .LVU5648
 16426              	.LBE810:
 16427              	.LBE809:
1045:sieve_extend.c ****     fprintf(stderr, "  --tune  <level>    find the best settings for the current os and hardware\n"
 16428              		.loc 1 1045 5 is_stmt 1 view .LVU5649
 16429              	.LBB811:
 16430              	.LBI811:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16431              		.loc 3 98 1 view .LVU5650
 16432              	.LBB812:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16433              		.loc 3 100 3 view .LVU5651
 16434              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16435              		.loc 3 100 10 is_stmt 0 view .LVU5652
 16436 5a46 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 16436      000000
 16437 5a4d BA3D0000 		mov	edx, 61	#,
 16437      00
 16438 5a52 BE010000 		mov	esi, 1	#,
GAS LISTING /tmp/ccNeV1of.s 			page 443


 16438      00
 16439 5a57 488D3D00 		lea	rdi, .LC27[rip]	#,
 16439      000000
 16440 5a5e E8000000 		call	fwrite@PLT	#
 16440      00
 16441              	.LVL984:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16442              		.loc 3 100 10 view .LVU5653
 16443              	.LBE812:
 16444              	.LBE811:
1046:sieve_extend.c ****     fprintf(stderr, "                     1 - fast tuning\n");
 16445              		.loc 1 1046 5 is_stmt 1 view .LVU5654
 16446              	.LBB813:
 16447              	.LBI813:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16448              		.loc 3 98 1 view .LVU5655
 16449              	.LBB814:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16450              		.loc 3 100 3 view .LVU5656
 16451              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16452              		.loc 3 100 10 is_stmt 0 view .LVU5657
 16453 5a63 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 16453      000000
 16454 5a6a BA4C0000 		mov	edx, 76	#,
 16454      00
 16455 5a6f BE010000 		mov	esi, 1	#,
 16455      00
 16456 5a74 488D3D00 		lea	rdi, .LC28[rip]	#,
 16456      000000
 16457 5a7b E8000000 		call	fwrite@PLT	#
 16457      00
 16458              	.LVL985:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16459              		.loc 3 100 10 view .LVU5658
 16460              	.LBE814:
 16461              	.LBE813:
1047:sieve_extend.c ****     fprintf(stderr, "                     2 - refined tuning\n");
 16462              		.loc 1 1047 5 is_stmt 1 view .LVU5659
 16463              	.LBB815:
 16464              	.LBI815:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16465              		.loc 3 98 1 view .LVU5660
 16466              	.LBB816:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16467              		.loc 3 100 3 view .LVU5661
 16468              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16469              		.loc 3 100 10 is_stmt 0 view .LVU5662
 16470 5a80 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 16470      000000
 16471 5a87 BA250000 		mov	edx, 37	#,
 16471      00
 16472 5a8c BE010000 		mov	esi, 1	#,
 16472      00
 16473 5a91 488D3D00 		lea	rdi, .LC29[rip]	#,
 16473      000000
GAS LISTING /tmp/ccNeV1of.s 			page 444


 16474 5a98 E8000000 		call	fwrite@PLT	#
 16474      00
 16475              	.LVL986:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16476              		.loc 3 100 10 view .LVU5663
 16477              	.LBE816:
 16478              	.LBE815:
1048:sieve_extend.c ****     fprintf(stderr, "                     3 - maximum tuning (takes long)\n");
 16479              		.loc 1 1048 5 is_stmt 1 view .LVU5664
 16480              	.LBB817:
 16481              	.LBI817:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16482              		.loc 3 98 1 view .LVU5665
 16483              	.LBB818:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16484              		.loc 3 100 3 view .LVU5666
 16485              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16486              		.loc 3 100 10 is_stmt 0 view .LVU5667
 16487 5a9d 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 16487      000000
 16488 5aa4 BA280000 		mov	edx, 40	#,
 16488      00
 16489 5aa9 BE010000 		mov	esi, 1	#,
 16489      00
 16490 5aae 488D3D00 		lea	rdi, .LC30[rip]	#,
 16490      000000
 16491 5ab5 E8000000 		call	fwrite@PLT	#
 16491      00
 16492              	.LVL987:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16493              		.loc 3 100 10 view .LVU5668
 16494              	.LBE818:
 16495              	.LBE817:
1049:sieve_extend.c ****     exit(1);
 16496              		.loc 1 1049 5 is_stmt 1 view .LVU5669
 16497              	.LBB819:
 16498              	.LBI819:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16499              		.loc 3 98 1 view .LVU5670
 16500              	.LBB820:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16501              		.loc 3 100 3 view .LVU5671
 16502              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16503              		.loc 3 100 10 is_stmt 0 view .LVU5672
 16504 5aba 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 16504      000000
 16505 5ac1 488D3D00 		lea	rdi, .LC31[rip]	#,
 16505      000000
 16506 5ac8 BA350000 		mov	edx, 53	#,
 16506      00
 16507 5acd BE010000 		mov	esi, 1	#,
 16507      00
 16508 5ad2 E8000000 		call	fwrite@PLT	#
 16508      00
 16509              	.LVL988:
GAS LISTING /tmp/ccNeV1of.s 			page 445


 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 16510              		.loc 3 100 10 view .LVU5673
 16511              	.LBE820:
 16512              	.LBE819:
1050:sieve_extend.c **** }
 16513              		.loc 1 1050 5 is_stmt 1 view .LVU5674
 16514 5ad7 BF010000 		mov	edi, 1	#,
 16514      00
 16515 5adc E8000000 		call	exit@PLT	#
 16515      00
 16516              	.LVL989:
 16517              		.cfi_endproc
 16518              	.LFE85:
 16520              		.section	.rodata.str1.1
 16521              	.LC32:
 16522 0045 256400   		.string	"%d"
 16523              	.LC33:
 16524 0048 2C253033 		.string	",%03d"
 16524      6400
 16525              		.text
 16526 5ae1 66662E0F 		.p2align 4
 16526      1F840000 
 16526      0000000F 
 16526      1F4000
 16527              		.globl	printfcomma2
 16529              	printfcomma2:
 16530              	.LVL990:
 16531              	.LFB90:
1096:sieve_extend.c **** 
1097:sieve_extend.c **** static inline void tuning_result_print(tuning_result_type tuning_result) {
1098:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
1099:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
1100:sieve_extend.c ****                             (uintmax_t)tuning_result.smallstep_faster,(uintmax_t)tuning_result.medi
1101:sieve_extend.c ****                             (uintmax_t)tuning_result.passes, (uintmax_t) tuning_result.sample_max,
1102:sieve_extend.c ****                             tuning_result.elapsed_time, tuning_result.sample_duration, tuning_resul
1103:sieve_extend.c **** }
1104:sieve_extend.c **** 
1105:sieve_extend.c **** static tuning_result_type tune(int tune_level, counter_t maxints, int option_verboselevel) {
1106:sieve_extend.c ****     counter_t best_blocksize_bits = default_blocksize;
1107:sieve_extend.c **** 
1108:sieve_extend.c ****     double best_avg = 0;
1109:sieve_extend.c ****     best_blocksize_bits = 0;
1110:sieve_extend.c ****     counter_t best_smallstep_faster = 0;
1111:sieve_extend.c ****     counter_t best_mediumstep_faster = 0;
1112:sieve_extend.c ****     counter_t best_vectorstep_faster = 0;
1113:sieve_extend.c ****     counter_t smallstep_faster_steps = 4;
1114:sieve_extend.c ****     counter_t mediumstep_faster_steps = 4;
1115:sieve_extend.c ****     counter_t vectorstep_faster_steps = 32;
1116:sieve_extend.c ****     counter_t freebits_steps = anticiped_cache_line_bytesize;
1117:sieve_extend.c ****     counter_t sample_max = default_sample_max;
1118:sieve_extend.c ****     double sample_duration = default_sample_duration;
1119:sieve_extend.c **** 
1120:sieve_extend.c ****     // determines the size of the resultset
1121:sieve_extend.c ****     switch (tune_level) {
1122:sieve_extend.c ****         case 1:
1123:sieve_extend.c ****             smallstep_faster_steps  = WORD_SIZE/4;
1124:sieve_extend.c ****             mediumstep_faster_steps = WORD_SIZE/4;
GAS LISTING /tmp/ccNeV1of.s 			page 446


1125:sieve_extend.c ****             vectorstep_faster_steps = WORD_SIZE/2;
1126:sieve_extend.c ****             freebits_steps = anticiped_cache_line_bytesize*8*2;
1127:sieve_extend.c ****             sample_max = 8;
1128:sieve_extend.c ****             sample_duration = 0.1;
1129:sieve_extend.c ****             break;
1130:sieve_extend.c ****         case 2:
1131:sieve_extend.c ****             smallstep_faster_steps  = WORD_SIZE/8;
1132:sieve_extend.c ****             mediumstep_faster_steps = WORD_SIZE/8;
1133:sieve_extend.c ****             vectorstep_faster_steps = WORD_SIZE/4;
1134:sieve_extend.c ****             freebits_steps = anticiped_cache_line_bytesize*8;
1135:sieve_extend.c ****             sample_max = 8;
1136:sieve_extend.c ****             sample_duration = 0.2;
1137:sieve_extend.c ****             break;
1138:sieve_extend.c ****         case 3:
1139:sieve_extend.c ****             smallstep_faster_steps  = WORD_SIZE/16;
1140:sieve_extend.c ****             mediumstep_faster_steps = WORD_SIZE/16;
1141:sieve_extend.c ****             vectorstep_faster_steps = WORD_SIZE/16;
1142:sieve_extend.c ****             freebits_steps = anticiped_cache_line_bytesize/2;
1143:sieve_extend.c ****             sample_max = 8;
1144:sieve_extend.c ****             sample_duration = 0.2;
1145:sieve_extend.c ****             break;
1146:sieve_extend.c ****     }
1147:sieve_extend.c ****     
1148:sieve_extend.c ****     if (option_verboselevel >= 1) printf("Tuning..."); 
1149:sieve_extend.c ****     if (option_verboselevel >= 2) printf("\n");
1150:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
1151:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
1152:sieve_extend.c ****     counter_t tuning_results=0;
1153:sieve_extend.c ****     counter_t tuning_result_index=0;
1154:sieve_extend.c ****     
1155:sieve_extend.c ****     for (counter_t smallstep_faster = 0; smallstep_faster <= WORD_SIZE/2; smallstep_faster += small
1156:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
1157:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
1158:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
1159:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
1160:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
1161:sieve_extend.c **** 
1162:sieve_extend.c ****                         // set variables
1163:sieve_extend.c ****                         tuning_results++;
1164:sieve_extend.c ****                         tuning_result[tuning_result_index].maxints = maxints;
1165:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_duration = sample_duration;
1166:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_max = sample_max;
1167:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_kb = blocksize_kb;
1168:sieve_extend.c ****                         tuning_result[tuning_result_index].free_bits = free_bits;
1169:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_bits = blocksize_bits;
1170:sieve_extend.c ****                         tuning_result[tuning_result_index].smallstep_faster = smallstep_faster;
1171:sieve_extend.c ****                         tuning_result[tuning_result_index].mediumstep_faster = mediumstep_faster;
1172:sieve_extend.c ****                         tuning_result[tuning_result_index].vectorstep_faster = vectorstep_faster;
1173:sieve_extend.c ****                         tune_benchmark(tuning_result, tuning_result_index);
1174:sieve_extend.c **** 
1175:sieve_extend.c ****                         if ( tuning_result[tuning_result_index].avg > best_avg) {
1176:sieve_extend.c ****                             best_avg = tuning_result[tuning_result_index].avg;
1177:sieve_extend.c ****                             best_blocksize_bits = blocksize_bits;
1178:sieve_extend.c ****                             best_smallstep_faster = smallstep_faster;
1179:sieve_extend.c ****                             best_mediumstep_faster = mediumstep_faster;
1180:sieve_extend.c ****                             best_vectorstep_faster = vectorstep_faster;
1181:sieve_extend.c ****                             if (option_verboselevel >=2) { printf(".(>)"); tuning_result_print(tuni
GAS LISTING /tmp/ccNeV1of.s 			page 447


1182:sieve_extend.c ****                         }
1183:sieve_extend.c ****                         if (option_verboselevel >= 3) { printf("...."); tuning_result_print(tuning_
1184:sieve_extend.c ****                         tuning_result_index++;
1185:sieve_extend.c ****                     }
1186:sieve_extend.c ****                 }
1187:sieve_extend.c ****             }
1188:sieve_extend.c ****         }
1189:sieve_extend.c ****     }
1190:sieve_extend.c ****     if (option_verboselevel >= 2) {
1191:sieve_extend.c ****         printf("%ju results. Inital best blocksize: %ju; best smallstep %ju; best mediumstep %ju; b
1192:sieve_extend.c ****         printf("Best options\n");
1193:sieve_extend.c ****     }
1194:sieve_extend.c ****     counter_t step=0;
1195:sieve_extend.c ****     while (tuning_results>4) {
1196:sieve_extend.c ****         qsort(tuning_result, (size_t)tuning_results, sizeof(tuning_result_type), compare_tuning_res
1197:sieve_extend.c ****         step++;
1198:sieve_extend.c ****         if (option_verboselevel >= 2) {
1199:sieve_extend.c ****             tuning_result_index = 0;
1200:sieve_extend.c ****             printf("(%ju) ",(uintmax_t)step); tuning_result_print(tuning_result[tuning_result_index
1201:sieve_extend.c ****             if (option_verboselevel >= 3) {
1202:sieve_extend.c ****                 for (counter_t tuning_result_index=0; tuning_result_index<min(10,tuning_results); t
1203:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
1204:sieve_extend.c ****                 }
1205:sieve_extend.c ****             }
1206:sieve_extend.c ****         }
1207:sieve_extend.c **** 
1208:sieve_extend.c ****         tuning_results = tuning_results / 2;
1209:sieve_extend.c **** 
1210:sieve_extend.c ****         for (counter_t i=0; i<tuning_results; i++) {
1211:sieve_extend.c ****             tune_benchmark(tuning_result, i);
1212:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
1213:sieve_extend.c ****         }
1214:sieve_extend.c ****         
1215:sieve_extend.c ****     }
1216:sieve_extend.c ****     tuning_result_type best_result = tuning_result[0];
1217:sieve_extend.c ****     if (option_verboselevel >= 1) {
1218:sieve_extend.c ****         tuning_result_index = 0;
1219:sieve_extend.c ****         printf(".Best result:"); tuning_result_print(tuning_result[tuning_result_index]);
1220:sieve_extend.c ****     }
1221:sieve_extend.c **** 
1222:sieve_extend.c ****     free(tuning_result);
1223:sieve_extend.c ****     return best_result;
1224:sieve_extend.c **** }
1225:sieve_extend.c **** 
1226:sieve_extend.c **** void printfcomma2 (int n) {
 16532              		.loc 1 1226 27 view -0
 16533              		.cfi_startproc
 16534              		.loc 1 1226 27 is_stmt 0 view .LVU5676
 16535 5af0 F30F1EFA 		endbr64	
1227:sieve_extend.c ****     if (n < 1000) {
 16536              		.loc 1 1227 5 is_stmt 1 view .LVU5677
 16537              	# sieve_extend.c:1226: void printfcomma2 (int n) {
1226:sieve_extend.c ****     if (n < 1000) {
 16538              		.loc 1 1226 27 is_stmt 0 view .LVU5678
 16539 5af4 4154     		push	r12	#
 16540              		.cfi_def_cfa_offset 16
 16541              		.cfi_offset 12, -16
GAS LISTING /tmp/ccNeV1of.s 			page 448


 16542              	.LBB831:
 16543              	.LBB832:
 16544              	.LBB833:
 16545              	.LBB834:
 16546              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16547              		.loc 3 107 10 view .LVU5679
 16548 5af6 89FA     		mov	edx, edi	#, n
 16549              	.LBE834:
 16550              	.LBE833:
 16551              	.LBE832:
 16552              	.LBE831:
 16553              	# sieve_extend.c:1226: void printfcomma2 (int n) {
1226:sieve_extend.c ****     if (n < 1000) {
 16554              		.loc 1 1226 27 view .LVU5680
 16555 5af8 4189FC   		mov	r12d, edi	# n, tmp99
 16556 5afb 53       		push	rbx	#
 16557              		.cfi_def_cfa_offset 24
 16558              		.cfi_offset 3, -24
 16559              	.LBB838:
 16560              	.LBB837:
 16561              	.LBB836:
 16562              	.LBB835:
 16563              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16564              		.loc 3 107 10 view .LVU5681
 16565 5afc 488D3500 		lea	rsi, .LC32[rip]	#,
 16565      000000
 16566              	.LBE835:
 16567              	.LBE836:
 16568              	.LBE837:
 16569              	.LBE838:
 16570              	# sieve_extend.c:1226: void printfcomma2 (int n) {
1226:sieve_extend.c ****     if (n < 1000) {
 16571              		.loc 1 1226 27 view .LVU5682
 16572 5b03 488D6424 		lea	rsp, -8[rsp]	#,
 16572      F8
 16573              		.cfi_def_cfa_offset 32
 16574              	# sieve_extend.c:1227:     if (n < 1000) {
 16575              		.loc 1 1227 8 view .LVU5683
 16576 5b08 81FFE703 		cmp	edi, 999	# n,
 16576      0000
 16577 5b0e 7E2E     		jle	.L1339	#,
1228:sieve_extend.c ****         printf ("%d", n);
1229:sieve_extend.c ****         return;
1230:sieve_extend.c ****     }
1231:sieve_extend.c ****     printfcomma2 (n/1000);
 16578              		.loc 1 1231 5 is_stmt 1 view .LVU5684
 16579 5b10 4863DF   		movsx	rbx, edi	# n, n
 16580 5b13 89F8     		mov	eax, edi	# tmp90, n
 16581 5b15 4869DBD3 		imul	rbx, rbx, 274877907	# tmp87, n,
 16581      4D6210
 16582 5b1c C1F81F   		sar	eax, 31	# tmp90,
 16583 5b1f 48C1FB26 		sar	rbx, 38	# tmp89,
 16584 5b23 29C3     		sub	ebx, eax	# tmp85, tmp90
 16585 5b25 89DF     		mov	edi, ebx	#, tmp85
 16586              	.LVL991:
 16587              		.loc 1 1231 5 is_stmt 0 view .LVU5685
 16588 5b27 E8000000 		call	printfcomma2	#
GAS LISTING /tmp/ccNeV1of.s 			page 449


 16588      00
 16589              	.LVL992:
1232:sieve_extend.c ****     printf (",%03d", n%1000);
 16590              		.loc 1 1232 5 is_stmt 1 view .LVU5686
 16591              	.LBB839:
 16592              	.LBI839:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16593              		.loc 3 105 1 view .LVU5687
 16594              	.LBB840:
 16595              		.loc 3 107 3 view .LVU5688
 16596              	.LBE840:
 16597              	.LBE839:
 16598              	# sieve_extend.c:1232:     printf (",%03d", n%1000);
 16599              		.loc 1 1232 5 is_stmt 0 view .LVU5689
 16600 5b2c 69CBE803 		imul	ecx, ebx, 1000	# tmp97, tmp85,
 16600      0000
 16601 5b32 4489E2   		mov	edx, r12d	# n, n
 16602              	.LBB845:
 16603              	.LBB841:
 16604              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16605              		.loc 3 107 10 view .LVU5690
 16606 5b35 488D3500 		lea	rsi, .LC33[rip]	#,
 16606      000000
 16607              	.LBE841:
 16608              	.LBE845:
 16609              	# sieve_extend.c:1232:     printf (",%03d", n%1000);
 16610              		.loc 1 1232 5 view .LVU5691
 16611 5b3c 29CA     		sub	edx, ecx	# n, tmp97
 16612              	.LVL993:
 16613              	.L1339:
 16614              	# sieve_extend.c:1233: }
1233:sieve_extend.c **** }
 16615              		.loc 1 1233 1 view .LVU5692
 16616 5b3e 488D6424 		lea	rsp, 8[rsp]	#,
 16616      08
 16617              		.cfi_def_cfa_offset 24
 16618              	.LBB846:
 16619              	.LBB842:
 16620              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16621              		.loc 3 107 10 view .LVU5693
 16622 5b43 BF010000 		mov	edi, 1	#,
 16622      00
 16623              	.LBE842:
 16624              	.LBE846:
 16625              	# sieve_extend.c:1233: }
 16626              		.loc 1 1233 1 view .LVU5694
 16627 5b48 5B       		pop	rbx	#
 16628              		.cfi_def_cfa_offset 16
 16629              	.LBB847:
 16630              	.LBB843:
 16631              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16632              		.loc 3 107 10 view .LVU5695
 16633 5b49 31C0     		xor	eax, eax	#
 16634              	.LBE843:
 16635              	.LBE847:
 16636              	# sieve_extend.c:1233: }
 16637              		.loc 1 1233 1 view .LVU5696
GAS LISTING /tmp/ccNeV1of.s 			page 450


 16638 5b4b 415C     		pop	r12	#
 16639              		.cfi_def_cfa_offset 8
 16640              	.LVL994:
 16641              	.LBB848:
 16642              	.LBB844:
 16643              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16644              		.loc 3 107 10 view .LVU5697
 16645 5b4d E9000000 		jmp	__printf_chk@PLT	#
 16645      00
 16646              	.LVL995:
 16647              	.LBE844:
 16648              	.LBE848:
 16649              		.cfi_endproc
 16650              	.LFE90:
 16652 5b52 66662E0F 		.p2align 4
 16652      1F840000 
 16652      0000000F 
 16652      1F00
 16653              		.globl	printfcomma
 16655              	printfcomma:
 16656              	.LVL996:
 16657              	.LFB91:
1234:sieve_extend.c **** 
1235:sieve_extend.c **** void printfcomma (int n) {
 16658              		.loc 1 1235 26 is_stmt 1 view -0
 16659              		.cfi_startproc
 16660              		.loc 1 1235 26 is_stmt 0 view .LVU5699
 16661 5b60 F30F1EFA 		endbr64	
1236:sieve_extend.c ****     if (n < 0) {
 16662              		.loc 1 1236 5 is_stmt 1 view .LVU5700
 16663              	# sieve_extend.c:1235: void printfcomma (int n) {
1235:sieve_extend.c ****     if (n < 0) {
 16664              		.loc 1 1235 26 is_stmt 0 view .LVU5701
 16665 5b64 4157     		push	r15	#
 16666              		.cfi_def_cfa_offset 16
 16667              		.cfi_offset 15, -16
 16668 5b66 4156     		push	r14	#
 16669              		.cfi_def_cfa_offset 24
 16670              		.cfi_offset 14, -24
 16671 5b68 4155     		push	r13	#
 16672              		.cfi_def_cfa_offset 32
 16673              		.cfi_offset 13, -32
 16674 5b6a 4154     		push	r12	#
 16675              		.cfi_def_cfa_offset 40
 16676              		.cfi_offset 12, -40
 16677 5b6c 4189FC   		mov	r12d, edi	# n, tmp159
 16678 5b6f 55       		push	rbp	#
 16679              		.cfi_def_cfa_offset 48
 16680              		.cfi_offset 6, -48
 16681 5b70 53       		push	rbx	#
 16682              		.cfi_def_cfa_offset 56
 16683              		.cfi_offset 3, -56
 16684 5b71 488D6424 		lea	rsp, -8[rsp]	#,
 16684      F8
 16685              		.cfi_def_cfa_offset 64
 16686              	# sieve_extend.c:1236:     if (n < 0) {
 16687              		.loc 1 1236 8 view .LVU5702
GAS LISTING /tmp/ccNeV1of.s 			page 451


 16688 5b76 85FF     		test	edi, edi	# n
 16689 5b78 0F880A01 		js	.L1349	#,
 16689      0000
 16690              	.LVL997:
 16691              	.L1341:
1237:sieve_extend.c ****         printf ("-");
1238:sieve_extend.c ****         n = -n;
1239:sieve_extend.c ****     }
1240:sieve_extend.c ****     printfcomma2 (n);
 16692              		.loc 1 1240 5 is_stmt 1 view .LVU5703
 16693              	.LBB901:
 16694              	.LBI901:
1226:sieve_extend.c ****     if (n < 1000) {
 16695              		.loc 1 1226 6 view .LVU5704
 16696              	.LBB902:
1227:sieve_extend.c ****         printf ("%d", n);
 16697              		.loc 1 1227 5 view .LVU5705
 16698              	# sieve_extend.c:1227:     if (n < 1000) {
1227:sieve_extend.c ****         printf ("%d", n);
 16699              		.loc 1 1227 8 is_stmt 0 view .LVU5706
 16700 5b7e 4181FCE7 		cmp	r12d, 999	# n,
 16700      030000
 16701              	.LBB903:
 16702              	.LBB904:
 16703              	.LBB905:
 16704              	.LBB906:
 16705              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16706              		.loc 3 107 10 view .LVU5707
 16707 5b85 4489E2   		mov	edx, r12d	#, n
 16708 5b88 488D3500 		lea	rsi, .LC32[rip]	#,
 16708      000000
 16709              	.LBE906:
 16710              	.LBE905:
 16711              	.LBE904:
 16712              	.LBE903:
 16713              	# sieve_extend.c:1227:     if (n < 1000) {
1227:sieve_extend.c ****         printf ("%d", n);
 16714              		.loc 1 1227 8 view .LVU5708
 16715 5b8f 0F8EBF00 		jle	.L1348	#,
 16715      0000
 16716              	.LVL998:
1231:sieve_extend.c ****     printf (",%03d", n%1000);
 16717              		.loc 1 1231 5 is_stmt 1 view .LVU5709
 16718 5b95 4489E3   		mov	ebx, r12d	# n, n
 16719 5b98 4C69EBD3 		imul	r13, rbx, 274877907	# tmp90, n,
 16719      4D6210
 16720 5b9f 49C1ED26 		shr	r13, 38	# _8,
 16721              	.LVL999:
 16722              	.LBB907:
 16723              	.LBI907:
1226:sieve_extend.c ****     if (n < 1000) {
 16724              		.loc 1 1226 6 view .LVU5710
 16725              	.LBB908:
1227:sieve_extend.c ****         printf ("%d", n);
 16726              		.loc 1 1227 5 view .LVU5711
 16727              	# sieve_extend.c:1227:     if (n < 1000) {
1227:sieve_extend.c ****         printf ("%d", n);
GAS LISTING /tmp/ccNeV1of.s 			page 452


 16728              		.loc 1 1227 8 is_stmt 0 view .LVU5712
 16729 5ba3 4181FC3F 		cmp	r12d, 999999	# n,
 16729      420F00
 16730 5baa 0F8EC000 		jle	.L1350	#,
 16730      0000
1231:sieve_extend.c ****     printf (",%03d", n%1000);
 16731              		.loc 1 1231 5 is_stmt 1 view .LVU5713
 16732 5bb0 4489ED   		mov	ebp, r13d	# _8, _8
 16733 5bb3 4C69F5D3 		imul	r14, rbp, 274877907	# tmp98, _8,
 16733      4D6210
 16734 5bba 49C1EE26 		shr	r14, 38	# _10,
 16735              	.LVL1000:
 16736              	.LBB909:
 16737              	.LBI909:
1226:sieve_extend.c ****     if (n < 1000) {
 16738              		.loc 1 1226 6 view .LVU5714
 16739              	.LBB910:
1227:sieve_extend.c ****         printf ("%d", n);
 16740              		.loc 1 1227 5 view .LVU5715
 16741              	# sieve_extend.c:1227:     if (n < 1000) {
1227:sieve_extend.c ****         printf ("%d", n);
 16742              		.loc 1 1227 8 is_stmt 0 view .LVU5716
 16743 5bbe 4181FCFF 		cmp	r12d, 999999999	# n,
 16743      C99A3B
 16744 5bc5 0F8ED500 		jle	.L1351	#,
 16744      0000
1231:sieve_extend.c ****     printf (",%03d", n%1000);
 16745              		.loc 1 1231 5 is_stmt 1 view .LVU5717
 16746              	.LVL1001:
 16747              	.LBB911:
 16748              	.LBI911:
1226:sieve_extend.c ****     if (n < 1000) {
 16749              		.loc 1 1226 6 view .LVU5718
 16750              	.LBE911:
 16751              	.LBE910:
 16752              	.LBE909:
 16753              	.LBE908:
 16754              	.LBE907:
 16755              	.LBE902:
 16756              	.LBE901:
1227:sieve_extend.c ****         printf ("%d", n);
 16757              		.loc 1 1227 5 view .LVU5719
 16758              	.LBB977:
 16759              	.LBB972:
 16760              	.LBB959:
 16761              	.LBB956:
 16762              	.LBB944:
 16763              	.LBB942:
 16764              	.LBB928:
 16765              	.LBB912:
 16766              	.LBI912:
1226:sieve_extend.c ****     if (n < 1000) {
 16767              		.loc 1 1226 6 view .LVU5720
 16768              	.LBB913:
1228:sieve_extend.c ****         return;
 16769              		.loc 1 1228 9 view .LVU5721
 16770              	.LBB914:
GAS LISTING /tmp/ccNeV1of.s 			page 453


 16771              	.LBI914:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16772              		.loc 3 105 1 view .LVU5722
 16773              	.LBB915:
 16774              		.loc 3 107 3 view .LVU5723
 16775              	.LBE915:
 16776              	.LBE914:
 16777              	.LBE913:
 16778              	.LBE912:
 16779              	.LBE928:
 16780              	# sieve_extend.c:1231:     printfcomma2 (n/1000);
1231:sieve_extend.c ****     printf (",%03d", n%1000);
 16781              		.loc 1 1231 5 is_stmt 0 view .LVU5724
 16782 5bcb 4589F7   		mov	r15d, r14d	# _10, _10
 16783              	.LBB929:
 16784              	.LBB925:
 16785              	.LBB922:
 16786              	.LBB919:
 16787              	.LBB916:
 16788              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16789              		.loc 3 107 10 view .LVU5725
 16790 5bce 488D3500 		lea	rsi, .LC32[rip]	#,
 16790      000000
 16791              	.LBE916:
 16792              	.LBE919:
 16793              	.LBE922:
 16794              	.LBE925:
 16795              	.LBE929:
 16796              	# sieve_extend.c:1231:     printfcomma2 (n/1000);
1231:sieve_extend.c ****     printf (",%03d", n%1000);
 16797              		.loc 1 1231 5 view .LVU5726
 16798 5bd5 4D69FFD3 		imul	r15, r15, 274877907	# tmp107, _10,
 16798      4D6210
 16799              	.LBB930:
 16800              	.LBB926:
 16801              	.LBB923:
 16802              	.LBB920:
 16803              	.LBB917:
 16804              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16805              		.loc 3 107 10 view .LVU5727
 16806 5bdc BF010000 		mov	edi, 1	#,
 16806      00
 16807 5be1 31C0     		xor	eax, eax	#
 16808              	.LBE917:
 16809              	.LBE920:
 16810              	.LBE923:
 16811              	.LBE926:
 16812              	.LBE930:
 16813              	# sieve_extend.c:1231:     printfcomma2 (n/1000);
1231:sieve_extend.c ****     printf (",%03d", n%1000);
 16814              		.loc 1 1231 5 view .LVU5728
 16815 5be3 49C1EF26 		shr	r15, 38	# tmp105,
 16816              	.LBB931:
 16817              	.LBB927:
 16818              	.LBB924:
 16819              	.LBB921:
 16820              	.LBB918:
GAS LISTING /tmp/ccNeV1of.s 			page 454


 16821              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16822              		.loc 3 107 10 view .LVU5729
 16823 5be7 4489FA   		mov	edx, r15d	#, tmp105
 16824              	.LVL1002:
 16825              		.loc 3 107 10 view .LVU5730
 16826 5bea E8000000 		call	__printf_chk@PLT	#
 16826      00
 16827              	.LVL1003:
 16828              		.loc 3 107 10 view .LVU5731
 16829              	.LBE918:
 16830              	.LBE921:
1229:sieve_extend.c ****     }
 16831              		.loc 1 1229 9 is_stmt 1 view .LVU5732
1229:sieve_extend.c ****     }
 16832              		.loc 1 1229 9 is_stmt 0 view .LVU5733
 16833              	.LBE924:
 16834              	.LBE927:
 16835              	.LBE931:
1232:sieve_extend.c **** }
 16836              		.loc 1 1232 5 is_stmt 1 view .LVU5734
 16837              	.LBB932:
 16838              	.LBI932:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16839              		.loc 3 105 1 view .LVU5735
 16840              	.LBB933:
 16841              		.loc 3 107 3 view .LVU5736
 16842              	.LBE933:
 16843              	.LBE932:
 16844              	# sieve_extend.c:1232:     printf (",%03d", n%1000);
1232:sieve_extend.c **** }
 16845              		.loc 1 1232 5 is_stmt 0 view .LVU5737
 16846 5bef 4169C7E8 		imul	eax, r15d, 1000	# tmp119, tmp105,
 16846      030000
 16847 5bf6 4489F2   		mov	edx, r14d	# _10, _10
 16848              	.LBB936:
 16849              	.LBB934:
 16850              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16851              		.loc 3 107 10 view .LVU5738
 16852 5bf9 488D3500 		lea	rsi, .LC33[rip]	#,
 16852      000000
 16853 5c00 BF010000 		mov	edi, 1	#,
 16853      00
 16854              	.LBE934:
 16855              	.LBE936:
 16856              	# sieve_extend.c:1232:     printf (",%03d", n%1000);
1232:sieve_extend.c **** }
 16857              		.loc 1 1232 5 view .LVU5739
 16858 5c05 29C2     		sub	edx, eax	# _10, tmp119
 16859              	.LBB937:
 16860              	.LBB935:
 16861              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16862              		.loc 3 107 10 view .LVU5740
 16863 5c07 31C0     		xor	eax, eax	#
 16864 5c09 E8000000 		call	__printf_chk@PLT	#
 16864      00
 16865              	.LVL1004:
 16866              	.L1346:
GAS LISTING /tmp/ccNeV1of.s 			page 455


 16867              		.loc 3 107 10 view .LVU5741
 16868              	.LBE935:
 16869              	.LBE937:
 16870              	.LBE942:
 16871              	.LBE944:
1232:sieve_extend.c **** }
 16872              		.loc 1 1232 5 is_stmt 1 view .LVU5742
 16873              	.LBB945:
 16874              	.LBI945:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 16875              		.loc 3 105 1 view .LVU5743
 16876              	.LBB946:
 16877              		.loc 3 107 3 view .LVU5744
 16878              	.LBE946:
 16879              	.LBE945:
 16880              	# sieve_extend.c:1232:     printf (",%03d", n%1000);
1232:sieve_extend.c **** }
 16881              		.loc 1 1232 5 is_stmt 0 view .LVU5745
 16882 5c0e 4869D5D3 		imul	rdx, rbp, 274877907	# tmp131, _8,
 16882      4D6210
 16883              	.LBB949:
 16884              	.LBB947:
 16885              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16886              		.loc 3 107 10 view .LVU5746
 16887 5c15 488D3500 		lea	rsi, .LC33[rip]	#,
 16887      000000
 16888 5c1c BF010000 		mov	edi, 1	#,
 16888      00
 16889 5c21 31C0     		xor	eax, eax	#
 16890              	.LBE947:
 16891              	.LBE949:
 16892              	# sieve_extend.c:1232:     printf (",%03d", n%1000);
1232:sieve_extend.c **** }
 16893              		.loc 1 1232 5 view .LVU5747
 16894 5c23 48C1EA26 		shr	rdx, 38	# tmp129,
 16895 5c27 69CAE803 		imul	ecx, edx, 1000	# tmp133, tmp129,
 16895      0000
 16896 5c2d 4489EA   		mov	edx, r13d	# _8, _8
 16897 5c30 29CA     		sub	edx, ecx	# _8, tmp133
 16898              	.LBB950:
 16899              	.LBB948:
 16900              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16901              		.loc 3 107 10 view .LVU5748
 16902 5c32 E8000000 		call	__printf_chk@PLT	#
 16902      00
 16903              	.LVL1005:
 16904              	.L1344:
 16905              		.loc 3 107 10 view .LVU5749
 16906              	.LBE948:
 16907              	.LBE950:
 16908              	.LBE956:
 16909              	.LBE959:
1232:sieve_extend.c **** }
 16910              		.loc 1 1232 5 is_stmt 1 view .LVU5750
 16911              	.LBB960:
 16912              	.LBI960:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
GAS LISTING /tmp/ccNeV1of.s 			page 456


 16913              		.loc 3 105 1 view .LVU5751
 16914              	.LBB961:
 16915              		.loc 3 107 3 view .LVU5752
 16916              	.LBE961:
 16917              	.LBE960:
 16918              	# sieve_extend.c:1232:     printf (",%03d", n%1000);
1232:sieve_extend.c **** }
 16919              		.loc 1 1232 5 is_stmt 0 view .LVU5753
 16920 5c37 4869F3D3 		imul	rsi, rbx, 274877907	# tmp145, n,
 16920      4D6210
 16921 5c3e 4489E2   		mov	edx, r12d	# n, n
 16922 5c41 48C1EE26 		shr	rsi, 38	# tmp143,
 16923 5c45 69FEE803 		imul	edi, esi, 1000	# tmp147, tmp143,
 16923      0000
 16924              	.LBB966:
 16925              	.LBB962:
 16926              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16927              		.loc 3 107 10 view .LVU5754
 16928 5c4b 488D3500 		lea	rsi, .LC33[rip]	#,
 16928      000000
 16929              	.LBE962:
 16930              	.LBE966:
 16931              	# sieve_extend.c:1232:     printf (",%03d", n%1000);
1232:sieve_extend.c **** }
 16932              		.loc 1 1232 5 view .LVU5755
 16933 5c52 29FA     		sub	edx, edi	# n, tmp147
 16934              	.LVL1006:
 16935              	.L1348:
1232:sieve_extend.c **** }
 16936              		.loc 1 1232 5 view .LVU5756
 16937              	.LBE972:
 16938              	.LBE977:
 16939              	# sieve_extend.c:1241: }
1241:sieve_extend.c **** }
 16940              		.loc 1 1241 1 view .LVU5757
 16941 5c54 488D6424 		lea	rsp, 8[rsp]	#,
 16941      08
 16942              		.cfi_remember_state
 16943              		.cfi_def_cfa_offset 56
 16944              	.LBB978:
 16945              	.LBB973:
 16946              	.LBB967:
 16947              	.LBB963:
 16948              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16949              		.loc 3 107 10 view .LVU5758
 16950 5c59 BF010000 		mov	edi, 1	#,
 16950      00
 16951              	.LBE963:
 16952              	.LBE967:
 16953              	.LBE973:
 16954              	.LBE978:
 16955              	# sieve_extend.c:1241: }
 16956              		.loc 1 1241 1 view .LVU5759
 16957 5c5e 5B       		pop	rbx	#
 16958              		.cfi_def_cfa_offset 48
 16959              	.LBB979:
 16960              	.LBB974:
GAS LISTING /tmp/ccNeV1of.s 			page 457


 16961              	.LBB968:
 16962              	.LBB964:
 16963              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16964              		.loc 3 107 10 view .LVU5760
 16965 5c5f 31C0     		xor	eax, eax	#
 16966              	.LBE964:
 16967              	.LBE968:
 16968              	.LBE974:
 16969              	.LBE979:
 16970              	# sieve_extend.c:1241: }
 16971              		.loc 1 1241 1 view .LVU5761
 16972 5c61 5D       		pop	rbp	#
 16973              		.cfi_def_cfa_offset 40
 16974 5c62 415C     		pop	r12	#
 16975              		.cfi_def_cfa_offset 32
 16976              	.LVL1007:
 16977              		.loc 1 1241 1 view .LVU5762
 16978 5c64 415D     		pop	r13	#
 16979              		.cfi_def_cfa_offset 24
 16980 5c66 415E     		pop	r14	#
 16981              		.cfi_def_cfa_offset 16
 16982 5c68 415F     		pop	r15	#
 16983              		.cfi_def_cfa_offset 8
 16984              	.LBB980:
 16985              	.LBB975:
 16986              	.LBB969:
 16987              	.LBB965:
 16988              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 16989              		.loc 3 107 10 view .LVU5763
 16990 5c6a E9000000 		jmp	__printf_chk@PLT	#
 16990      00
 16991              	.LVL1008:
 16992 5c6f 90       		.p2align 4,,7
 16993              		.p2align 3
 16994              	.L1350:
 16995              		.cfi_restore_state
 16996              		.loc 3 107 10 view .LVU5764
 16997              	.LBE965:
 16998              	.LBE969:
 16999              	.LBB970:
 17000              	.LBB957:
 17001              	.LBB951:
 17002              	.LBI951:
1226:sieve_extend.c ****     if (n < 1000) {
 17003              		.loc 1 1226 6 is_stmt 1 view .LVU5765
 17004              	.LBB952:
1228:sieve_extend.c ****         return;
 17005              		.loc 1 1228 9 view .LVU5766
 17006              	.LBB953:
 17007              	.LBI953:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17008              		.loc 3 105 1 view .LVU5767
 17009              	.LBB954:
 17010              		.loc 3 107 3 view .LVU5768
 17011              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17012              		.loc 3 107 10 is_stmt 0 view .LVU5769
 17013 5c70 4489EA   		mov	edx, r13d	#, _8
GAS LISTING /tmp/ccNeV1of.s 			page 458


 17014              	.LVL1009:
 17015              		.loc 3 107 10 view .LVU5770
 17016 5c73 488D3500 		lea	rsi, .LC32[rip]	#,
 17016      000000
 17017 5c7a BF010000 		mov	edi, 1	#,
 17017      00
 17018 5c7f 31C0     		xor	eax, eax	#
 17019 5c81 E8000000 		call	__printf_chk@PLT	#
 17019      00
 17020              	.LVL1010:
 17021              		.loc 3 107 10 view .LVU5771
 17022              	.LBE954:
 17023              	.LBE953:
1229:sieve_extend.c ****     }
 17024              		.loc 1 1229 9 is_stmt 1 view .LVU5772
 17025 5c86 EBAF     		jmp	.L1344	#
 17026              	.LVL1011:
 17027              		.p2align 4,,7
 17028              		.p2align 3
 17029              	.L1349:
1229:sieve_extend.c ****     }
 17030              		.loc 1 1229 9 is_stmt 0 view .LVU5773
 17031              	.LBE952:
 17032              	.LBE951:
 17033              	.LBE957:
 17034              	.LBE970:
 17035              	.LBE975:
 17036              	.LBE980:
1237:sieve_extend.c ****         n = -n;
 17037              		.loc 1 1237 9 is_stmt 1 view .LVU5774
 17038              	.LBB981:
 17039              	.LBI981:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17040              		.loc 3 105 1 view .LVU5775
 17041              	.LBB982:
 17042              		.loc 3 107 3 view .LVU5776
 17043              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17044              		.loc 3 107 10 is_stmt 0 view .LVU5777
 17045 5c88 BF2D0000 		mov	edi, 45	#,
 17045      00
 17046              	.LVL1012:
 17047              		.loc 3 107 10 view .LVU5778
 17048              	.LBE982:
 17049              	.LBE981:
 17050              	# sieve_extend.c:1238:         n = -n;
1238:sieve_extend.c ****     }
 17051              		.loc 1 1238 11 view .LVU5779
 17052 5c8d 41F7DC   		neg	r12d	# n
 17053              	.LVL1013:
 17054              	.LBB984:
 17055              	.LBB983:
 17056              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17057              		.loc 3 107 10 view .LVU5780
 17058 5c90 E8000000 		call	putchar@PLT	#
 17058      00
 17059              	.LVL1014:
 17060              		.loc 3 107 10 view .LVU5781
GAS LISTING /tmp/ccNeV1of.s 			page 459


 17061              	.LBE983:
 17062              	.LBE984:
1238:sieve_extend.c ****     }
 17063              		.loc 1 1238 9 is_stmt 1 view .LVU5782
1238:sieve_extend.c ****     }
 17064              		.loc 1 1238 9 is_stmt 0 view .LVU5783
 17065 5c95 E9E4FEFF 		jmp	.L1341	#
 17065      FF
 17066              	.LVL1015:
 17067 5c9a 660F1F44 		.p2align 4,,7
 17067      0000
 17068              		.p2align 3
 17069              	.L1351:
 17070              	.LBB985:
 17071              	.LBB976:
 17072              	.LBB971:
 17073              	.LBB958:
 17074              	.LBB955:
 17075              	.LBB943:
 17076              	.LBB938:
 17077              	.LBI938:
1226:sieve_extend.c ****     if (n < 1000) {
 17078              		.loc 1 1226 6 is_stmt 1 view .LVU5784
 17079              	.LBB939:
1228:sieve_extend.c ****         return;
 17080              		.loc 1 1228 9 view .LVU5785
 17081              	.LBB940:
 17082              	.LBI940:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 17083              		.loc 3 105 1 view .LVU5786
 17084              	.LBB941:
 17085              		.loc 3 107 3 view .LVU5787
 17086              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 17087              		.loc 3 107 10 is_stmt 0 view .LVU5788
 17088 5ca0 4489F2   		mov	edx, r14d	#, _10
 17089              	.LVL1016:
 17090              		.loc 3 107 10 view .LVU5789
 17091 5ca3 488D3500 		lea	rsi, .LC32[rip]	#,
 17091      000000
 17092 5caa BF010000 		mov	edi, 1	#,
 17092      00
 17093 5caf 31C0     		xor	eax, eax	#
 17094 5cb1 E8000000 		call	__printf_chk@PLT	#
 17094      00
 17095              	.LVL1017:
 17096              		.loc 3 107 10 view .LVU5790
 17097              	.LBE941:
 17098              	.LBE940:
1229:sieve_extend.c ****     }
 17099              		.loc 1 1229 9 is_stmt 1 view .LVU5791
 17100 5cb6 E953FFFF 		jmp	.L1346	#
 17100      FF
 17101              	.LBE939:
 17102              	.LBE938:
 17103              	.LBE943:
 17104              	.LBE955:
 17105              	.LBE958:
GAS LISTING /tmp/ccNeV1of.s 			page 460


 17106              	.LBE971:
 17107              	.LBE976:
 17108              	.LBE985:
 17109              		.cfi_endproc
 17110              	.LFE91:
 17112 5cbb 0F1F4400 		.p2align 4
 17112      00
 17113              		.globl	benchmark
 17115              	benchmark:
 17116              	.LVL1018:
 17117              	.LFB92:
1242:sieve_extend.c **** 
1243:sieve_extend.c **** int benchmark(double max_time, void (*function)(bitword_t*, counter_t ), bitword_t* bitarray, count
 17118              		.loc 1 1243 111 view -0
 17119              		.cfi_startproc
 17120              		.loc 1 1243 111 is_stmt 0 view .LVU5793
 17121 5cc0 F30F1EFA 		endbr64	
 17122 5cc4 4157     		push	r15	#
 17123              		.cfi_def_cfa_offset 16
 17124              		.cfi_offset 15, -16
 17125 5cc6 4156     		push	r14	#
 17126              		.cfi_def_cfa_offset 24
 17127              		.cfi_offset 14, -24
 17128 5cc8 4155     		push	r13	#
 17129              		.cfi_def_cfa_offset 32
 17130              		.cfi_offset 13, -32
 17131 5cca 4989D5   		mov	r13, rdx	# max, tmp138
 17132 5ccd 4154     		push	r12	#
 17133              		.cfi_def_cfa_offset 40
 17134              		.cfi_offset 12, -40
 17135              	# sieve_extend.c:1245:     int passes = 0;
1244:sieve_extend.c ****     struct timespec start_time,end_time;
1245:sieve_extend.c ****     int passes = 0;
 17136              		.loc 1 1245 9 view .LVU5794
 17137 5ccf 4531E4   		xor	r12d, r12d	# <retval>
 17138              	# sieve_extend.c:1243: int benchmark(double max_time, void (*function)(bitword_t*, counter_t ), bit
1243:sieve_extend.c ****     struct timespec start_time,end_time;
 17139              		.loc 1 1243 111 view .LVU5795
 17140 5cd2 55       		push	rbp	#
 17141              		.cfi_def_cfa_offset 48
 17142              		.cfi_offset 6, -48
 17143 5cd3 4889F5   		mov	rbp, rsi	# bitarray, tmp137
 17144 5cd6 53       		push	rbx	#
 17145              		.cfi_def_cfa_offset 56
 17146              		.cfi_offset 3, -56
 17147 5cd7 4889FB   		mov	rbx, rdi	# function, tmp136
 17148              	# sieve_extend.c:1247:     clock_gettime(CLOCK_MONOTONIC,&start_time);
1246:sieve_extend.c ****     double elapsed_time = 0;
1247:sieve_extend.c ****     clock_gettime(CLOCK_MONOTONIC,&start_time);
 17149              		.loc 1 1247 5 view .LVU5796
 17150 5cda BF010000 		mov	edi, 1	#,
 17150      00
 17151              	.LVL1019:
 17152              	# sieve_extend.c:1243: int benchmark(double max_time, void (*function)(bitword_t*, counter_t ), bit
1243:sieve_extend.c ****     struct timespec start_time,end_time;
 17153              		.loc 1 1243 111 view .LVU5797
 17154 5cdf 488D6424 		lea	rsp, -72[rsp]	#,
GAS LISTING /tmp/ccNeV1of.s 			page 461


 17154      B8
 17155              		.cfi_def_cfa_offset 128
 17156              	# sieve_extend.c:1243: int benchmark(double max_time, void (*function)(bitword_t*, counter_t ), bit
1243:sieve_extend.c ****     struct timespec start_time,end_time;
 17157              		.loc 1 1243 111 view .LVU5798
 17158 5ce4 C5FB1144 		vmovsd	QWORD PTR 8[rsp], xmm0	# %sfp, tmp135
 17158      2408
 17159              	# sieve_extend.c:1247:     clock_gettime(CLOCK_MONOTONIC,&start_time);
 17160              		.loc 1 1247 5 view .LVU5799
 17161 5cea 488D7424 		lea	rsi, 16[rsp]	# tmp99,
 17161      10
 17162              	.LVL1020:
 17163              	# sieve_extend.c:1243: int benchmark(double max_time, void (*function)(bitword_t*, counter_t ), bit
1243:sieve_extend.c ****     struct timespec start_time,end_time;
 17164              		.loc 1 1243 111 view .LVU5800
 17165 5cef 64488B04 		mov	rax, QWORD PTR fs:40	# tmp139, MEM[(<address-space-1> long unsigned int *)40B]
 17165      25280000 
 17165      00
 17166 5cf8 48894424 		mov	QWORD PTR 56[rsp], rax	# D.7523, tmp139
 17166      38
 17167 5cfd 31C0     		xor	eax, eax	# tmp139
1244:sieve_extend.c ****     int passes = 0;
 17168              		.loc 1 1244 5 is_stmt 1 view .LVU5801
1245:sieve_extend.c ****     double elapsed_time = 0;
 17169              		.loc 1 1245 5 view .LVU5802
 17170              	.LVL1021:
1246:sieve_extend.c ****     double elapsed_time = 0;
 17171              		.loc 1 1246 5 view .LVU5803
 17172              		.loc 1 1247 5 view .LVU5804
 17173 5cff E8000000 		call	clock_gettime@PLT	#
 17173      00
 17174              	.LVL1022:
1248:sieve_extend.c ****     while (elapsed_time <= max_time) {
 17175              		.loc 1 1248 5 view .LVU5805
 17176              		.loc 1 1248 11 view .LVU5806
 17177 5d04 C5FB106C 		vmovsd	xmm5, QWORD PTR 8[rsp]	# max_time, %sfp
 17177      2408
 17178 5d0a C5F92F2D 		vcomisd	xmm5, QWORD PTR .LC12[rip]	# max_time,
 17178      00000000 
 17179 5d12 0F827801 		jb	.L1352	#,
 17179      0000
 17180 5d18 4C8D7424 		lea	r14, 32[rsp]	# tmp111,
 17180      20
 17181              	.LVL1023:
 17182              	.L1355:
1249:sieve_extend.c ****         function(bitarray, max);
 17183              		.loc 1 1249 9 view .LVU5807
 17184 5d1d 4C89EE   		mov	rsi, r13	#, max
 17185 5d20 4889EF   		mov	rdi, rbp	#, bitarray
 17186 5d23 FFD3     		call	rbx	# function
 17187              	.LVL1024:
1250:sieve_extend.c ****         passes++;
 17188              		.loc 1 1250 9 view .LVU5808
 17189              	# sieve_extend.c:1251:         clock_gettime(CLOCK_MONOTONIC,&end_time);
1251:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 17190              		.loc 1 1251 9 is_stmt 0 view .LVU5809
 17191 5d25 4C89F6   		mov	rsi, r14	#, tmp111
GAS LISTING /tmp/ccNeV1of.s 			page 462


 17192 5d28 BF010000 		mov	edi, 1	#,
 17192      00
 17193 5d2d E8000000 		call	clock_gettime@PLT	#
 17193      00
 17194              	.LVL1025:
 17195              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
1252:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 17196              		.loc 1 1252 58 view .LVU5810
 17197 5d32 C4E1FB2A 		vcvtsi2sd	xmm0, xmm0, QWORD PTR 40[rsp]	# tmp102, end_time.tv_nsec
 17197      442428
 17198              	# sieve_extend.c:1250:         passes++;
1250:sieve_extend.c ****         passes++;
 17199              		.loc 1 1250 15 view .LVU5811
 17200 5d39 458D7C24 		lea	r15d, 1[r12]	# tmp113,
 17200      01
 17201              	.LVL1026:
 17202              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17203              		.loc 1 1252 64 view .LVU5812
 17204 5d3e C4E1F32A 		vcvtsi2sd	xmm1, xmm1, QWORD PTR 16[rsp]	# tmp103, start_time.tv_sec
 17204      4C2410
 17205              	# sieve_extend.c:1250:         passes++;
1250:sieve_extend.c ****         passes++;
 17206              		.loc 1 1250 15 view .LVU5813
 17207 5d45 4589FC   		mov	r12d, r15d	# <retval>, tmp113
1251:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 17208              		.loc 1 1251 9 is_stmt 1 view .LVU5814
 17209              		.loc 1 1252 9 view .LVU5815
 17210              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17211              		.loc 1 1252 104 is_stmt 0 view .LVU5816
 17212 5d48 C4E1E32A 		vcvtsi2sd	xmm3, xmm3, QWORD PTR 24[rsp]	# tmp105, start_time.tv_nsec
 17212      5C2418
 17213              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17214              		.loc 1 1252 40 view .LVU5817
 17215 5d4f C4E1EB2A 		vcvtsi2sd	xmm2, xmm2, QWORD PTR 32[rsp]	# tmp106, end_time.tv_sec
 17215      542420
 17216              	# sieve_extend.c:1248:     while (elapsed_time <= max_time) {
1248:sieve_extend.c ****         function(bitarray, max);
 17217              		.loc 1 1248 11 view .LVU5818
 17218 5d56 C5FB1064 		vmovsd	xmm4, QWORD PTR 8[rsp]	# max_time, %sfp
 17218      2408
 17219 5d5c C4E2F9BB 		vfmsub231sd	xmm1, xmm0, QWORD PTR .LC14[rip]	# _30, tmp102,
 17219      0D000000 
 17219      00
 17220 5d65 C4E2E99D 		vfnmadd132sd	xmm3, xmm2, QWORD PTR .LC14[rip]	# _19, tmp106,
 17220      1D000000 
 17220      00
 17221              	.LVL1027:
1248:sieve_extend.c ****         function(bitarray, max);
 17222              		.loc 1 1248 11 is_stmt 1 view .LVU5819
 17223              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17224              		.loc 1 1252 22 is_stmt 0 view .LVU5820
 17225 5d6e C5E358F1 		vaddsd	xmm6, xmm3, xmm1	# elapsed_time, _19, _30
 17226              	# sieve_extend.c:1248:     while (elapsed_time <= max_time) {
1248:sieve_extend.c ****         function(bitarray, max);
 17227              		.loc 1 1248 11 view .LVU5821
 17228 5d72 C5F92FE6 		vcomisd	xmm4, xmm6	# max_time, elapsed_time
 17229 5d76 0F821401 		jb	.L1352	#,
GAS LISTING /tmp/ccNeV1of.s 			page 463


 17229      0000
 17230              	.LVL1028:
1249:sieve_extend.c ****         passes++;
 17231              		.loc 1 1249 9 is_stmt 1 view .LVU5822
 17232 5d7c 4C89EE   		mov	rsi, r13	#, max
 17233 5d7f 4889EF   		mov	rdi, rbp	#, bitarray
 17234 5d82 FFD3     		call	rbx	# function
 17235              	.LVL1029:
1250:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 17236              		.loc 1 1250 9 view .LVU5823
 17237              	# sieve_extend.c:1251:         clock_gettime(CLOCK_MONOTONIC,&end_time);
1251:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 17238              		.loc 1 1251 9 is_stmt 0 view .LVU5824
 17239 5d84 4C89F6   		mov	rsi, r14	#, tmp111
 17240 5d87 BF010000 		mov	edi, 1	#,
 17240      00
 17241 5d8c E8000000 		call	clock_gettime@PLT	#
 17241      00
 17242              	.LVL1030:
 17243              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17244              		.loc 1 1252 58 view .LVU5825
 17245 5d91 C4E1C32A 		vcvtsi2sd	xmm7, xmm7, QWORD PTR 40[rsp]	# tmp114, end_time.tv_nsec
 17245      7C2428
 17246              	# sieve_extend.c:1250:         passes++;
1250:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 17247              		.loc 1 1250 15 view .LVU5826
 17248 5d98 4183C401 		add	r12d, 1	# <retval>,
 17249              	.LVL1031:
1251:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 17250              		.loc 1 1251 9 is_stmt 1 view .LVU5827
 17251              		.loc 1 1252 9 view .LVU5828
 17252              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17253              		.loc 1 1252 64 is_stmt 0 view .LVU5829
 17254 5d9c C461BB2A 		vcvtsi2sd	xmm8, xmm8, QWORD PTR 16[rsp]	# tmp115, start_time.tv_sec
 17254      442410
 17255              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17256              		.loc 1 1252 104 view .LVU5830
 17257 5da3 C461B32A 		vcvtsi2sd	xmm9, xmm9, QWORD PTR 24[rsp]	# tmp117, start_time.tv_nsec
 17257      4C2418
 17258              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17259              		.loc 1 1252 40 view .LVU5831
 17260 5daa C461AB2A 		vcvtsi2sd	xmm10, xmm10, QWORD PTR 32[rsp]	# tmp118, end_time.tv_sec
 17260      542420
 17261              	# sieve_extend.c:1248:     while (elapsed_time <= max_time) {
1248:sieve_extend.c ****         function(bitarray, max);
 17262              		.loc 1 1248 11 view .LVU5832
 17263 5db1 C57B1064 		vmovsd	xmm12, QWORD PTR 8[rsp]	# max_time, %sfp
 17263      2408
 17264 5db7 C462C1BB 		vfmsub231sd	xmm8, xmm7, QWORD PTR .LC14[rip]	# _30, tmp114,
 17264      05000000 
 17264      00
 17265 5dc0 C462A99D 		vfnmadd132sd	xmm9, xmm10, QWORD PTR .LC14[rip]	# _19, tmp118,
 17265      0D000000 
 17265      00
 17266              	.LVL1032:
1248:sieve_extend.c ****         function(bitarray, max);
 17267              		.loc 1 1248 11 is_stmt 1 view .LVU5833
GAS LISTING /tmp/ccNeV1of.s 			page 464


 17268              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17269              		.loc 1 1252 22 is_stmt 0 view .LVU5834
 17270 5dc9 C4413358 		vaddsd	xmm11, xmm9, xmm8	# elapsed_time, _19, _30
 17270      D8
 17271              	# sieve_extend.c:1248:     while (elapsed_time <= max_time) {
1248:sieve_extend.c ****         function(bitarray, max);
 17272              		.loc 1 1248 11 view .LVU5835
 17273 5dce C441792F 		vcomisd	xmm12, xmm11	# max_time, elapsed_time
 17273      E3
 17274 5dd3 0F82B700 		jb	.L1352	#,
 17274      0000
 17275              	.LVL1033:
1249:sieve_extend.c ****         passes++;
 17276              		.loc 1 1249 9 is_stmt 1 view .LVU5836
 17277 5dd9 4C89EE   		mov	rsi, r13	#, max
 17278 5ddc 4889EF   		mov	rdi, rbp	#, bitarray
 17279 5ddf FFD3     		call	rbx	# function
 17280              	.LVL1034:
1250:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 17281              		.loc 1 1250 9 view .LVU5837
 17282              	# sieve_extend.c:1251:         clock_gettime(CLOCK_MONOTONIC,&end_time);
1251:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 17283              		.loc 1 1251 9 is_stmt 0 view .LVU5838
 17284 5de1 4C89F6   		mov	rsi, r14	#, tmp111
 17285 5de4 BF010000 		mov	edi, 1	#,
 17285      00
 17286 5de9 E8000000 		call	clock_gettime@PLT	#
 17286      00
 17287              	.LVL1035:
 17288              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17289              		.loc 1 1252 58 view .LVU5839
 17290 5dee C461932A 		vcvtsi2sd	xmm13, xmm13, QWORD PTR 40[rsp]	# tmp121, end_time.tv_nsec
 17290      6C2428
 17291              	# sieve_extend.c:1250:         passes++;
1250:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 17292              		.loc 1 1250 15 view .LVU5840
 17293 5df5 458D6702 		lea	r12d, 2[r15]	# <retval>,
 17294              	.LVL1036:
1251:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 17295              		.loc 1 1251 9 is_stmt 1 view .LVU5841
 17296              		.loc 1 1252 9 view .LVU5842
 17297              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17298              		.loc 1 1252 64 is_stmt 0 view .LVU5843
 17299 5df9 C4618B2A 		vcvtsi2sd	xmm14, xmm14, QWORD PTR 16[rsp]	# tmp122, start_time.tv_sec
 17299      742410
 17300              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17301              		.loc 1 1252 104 view .LVU5844
 17302 5e00 C461832A 		vcvtsi2sd	xmm15, xmm15, QWORD PTR 24[rsp]	# tmp124, start_time.tv_nsec
 17302      7C2418
 17303              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17304              		.loc 1 1252 40 view .LVU5845
 17305 5e07 C4E1D32A 		vcvtsi2sd	xmm5, xmm5, QWORD PTR 32[rsp]	# tmp125, end_time.tv_sec
 17305      6C2420
 17306              	# sieve_extend.c:1248:     while (elapsed_time <= max_time) {
1248:sieve_extend.c ****         function(bitarray, max);
 17307              		.loc 1 1248 11 view .LVU5846
 17308 5e0e C5FB104C 		vmovsd	xmm1, QWORD PTR 8[rsp]	# max_time, %sfp
GAS LISTING /tmp/ccNeV1of.s 			page 465


 17308      2408
 17309 5e14 C46291BB 		vfmsub231sd	xmm14, xmm13, QWORD PTR .LC14[rip]	# _30, tmp121,
 17309      35000000 
 17309      00
 17310 5e1d C462D19D 		vfnmadd132sd	xmm15, xmm5, QWORD PTR .LC14[rip]	# _19, tmp125,
 17310      3D000000 
 17310      00
 17311              	.LVL1037:
1248:sieve_extend.c ****         function(bitarray, max);
 17312              		.loc 1 1248 11 is_stmt 1 view .LVU5847
 17313              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17314              		.loc 1 1252 22 is_stmt 0 view .LVU5848
 17315 5e26 C4C10358 		vaddsd	xmm0, xmm15, xmm14	# elapsed_time, _19, _30
 17315      C6
 17316              	# sieve_extend.c:1248:     while (elapsed_time <= max_time) {
1248:sieve_extend.c ****         function(bitarray, max);
 17317              		.loc 1 1248 11 view .LVU5849
 17318 5e2b C5F92FC8 		vcomisd	xmm1, xmm0	# max_time, elapsed_time
 17319 5e2f 725F     		jb	.L1352	#,
 17320              	.LVL1038:
1249:sieve_extend.c ****         passes++;
 17321              		.loc 1 1249 9 is_stmt 1 view .LVU5850
 17322 5e31 4C89EE   		mov	rsi, r13	#, max
 17323 5e34 4889EF   		mov	rdi, rbp	#, bitarray
 17324 5e37 FFD3     		call	rbx	# function
 17325              	.LVL1039:
1250:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 17326              		.loc 1 1250 9 view .LVU5851
 17327              	# sieve_extend.c:1251:         clock_gettime(CLOCK_MONOTONIC,&end_time);
1251:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 17328              		.loc 1 1251 9 is_stmt 0 view .LVU5852
 17329 5e39 4C89F6   		mov	rsi, r14	#, tmp111
 17330 5e3c BF010000 		mov	edi, 1	#,
 17330      00
 17331 5e41 E8000000 		call	clock_gettime@PLT	#
 17331      00
 17332              	.LVL1040:
 17333              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17334              		.loc 1 1252 58 view .LVU5853
 17335 5e46 C4E1E32A 		vcvtsi2sd	xmm3, xmm3, QWORD PTR 40[rsp]	# tmp128, end_time.tv_nsec
 17335      5C2428
 17336              	# sieve_extend.c:1250:         passes++;
1250:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&end_time);
 17337              		.loc 1 1250 15 view .LVU5854
 17338 5e4d 458D6703 		lea	r12d, 3[r15]	# <retval>,
 17339              	.LVL1041:
1251:sieve_extend.c ****         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time.tv_
 17340              		.loc 1 1251 9 is_stmt 1 view .LVU5855
 17341              		.loc 1 1252 9 view .LVU5856
 17342              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17343              		.loc 1 1252 64 is_stmt 0 view .LVU5857
 17344 5e51 C4E1CB2A 		vcvtsi2sd	xmm6, xmm6, QWORD PTR 16[rsp]	# tmp129, start_time.tv_sec
 17344      742410
 17345              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17346              		.loc 1 1252 104 view .LVU5858
 17347 5e58 C4E1DB2A 		vcvtsi2sd	xmm4, xmm4, QWORD PTR 24[rsp]	# tmp131, start_time.tv_nsec
 17347      642418
GAS LISTING /tmp/ccNeV1of.s 			page 466


 17348              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17349              		.loc 1 1252 40 view .LVU5859
 17350 5e5f C4E1EB2A 		vcvtsi2sd	xmm2, xmm2, QWORD PTR 32[rsp]	# tmp132, end_time.tv_sec
 17350      542420
 17351              	# sieve_extend.c:1248:     while (elapsed_time <= max_time) {
1248:sieve_extend.c ****         function(bitarray, max);
 17352              		.loc 1 1248 11 view .LVU5860
 17353 5e66 C57B1044 		vmovsd	xmm8, QWORD PTR 8[rsp]	# max_time, %sfp
 17353      2408
 17354 5e6c C4E2E1BB 		vfmsub231sd	xmm6, xmm3, QWORD PTR .LC14[rip]	# _30, tmp128,
 17354      35000000 
 17354      00
 17355 5e75 C4E2E99D 		vfnmadd132sd	xmm4, xmm2, QWORD PTR .LC14[rip]	# _19, tmp132,
 17355      25000000 
 17355      00
 17356              	.LVL1042:
1248:sieve_extend.c ****         function(bitarray, max);
 17357              		.loc 1 1248 11 is_stmt 1 view .LVU5861
 17358              	# sieve_extend.c:1252:         elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.
 17359              		.loc 1 1252 22 is_stmt 0 view .LVU5862
 17360 5e7e C5DB58FE 		vaddsd	xmm7, xmm4, xmm6	# elapsed_time, _19, _30
 17361              	# sieve_extend.c:1248:     while (elapsed_time <= max_time) {
1248:sieve_extend.c ****         function(bitarray, max);
 17362              		.loc 1 1248 11 view .LVU5863
 17363 5e82 C5792FC7 		vcomisd	xmm8, xmm7	# max_time, elapsed_time
 17364 5e86 0F8391FE 		jnb	.L1355	#,
 17364      FFFF
 17365              	.LVL1043:
 17366 5e8c 0F1F4000 		.p2align 4
 17367              		.p2align 3
 17368              	.L1352:
 17369              	# sieve_extend.c:1255: }
1253:sieve_extend.c ****     }
1254:sieve_extend.c ****     return passes;
1255:sieve_extend.c **** }
 17370              		.loc 1 1255 1 view .LVU5864
 17371 5e90 488B4424 		mov	rax, QWORD PTR 56[rsp]	# tmp140, D.7523
 17371      38
 17372 5e95 64483304 		xor	rax, QWORD PTR fs:40	# tmp140, MEM[(<address-space-1> long unsigned int *)40B]
 17372      25280000 
 17372      00
 17373 5e9e 7513     		jne	.L1368	#,
 17374 5ea0 488D6424 		lea	rsp, 72[rsp]	#,
 17374      48
 17375              		.cfi_remember_state
 17376              		.cfi_def_cfa_offset 56
 17377 5ea5 4489E0   		mov	eax, r12d	#, <retval>
 17378 5ea8 5B       		pop	rbx	#
 17379              		.cfi_def_cfa_offset 48
 17380              	.LVL1044:
 17381              		.loc 1 1255 1 view .LVU5865
 17382 5ea9 5D       		pop	rbp	#
 17383              		.cfi_def_cfa_offset 40
 17384              	.LVL1045:
 17385              		.loc 1 1255 1 view .LVU5866
 17386 5eaa 415C     		pop	r12	#
 17387              		.cfi_def_cfa_offset 32
GAS LISTING /tmp/ccNeV1of.s 			page 467


 17388 5eac 415D     		pop	r13	#
 17389              		.cfi_def_cfa_offset 24
 17390              	.LVL1046:
 17391              		.loc 1 1255 1 view .LVU5867
 17392 5eae 415E     		pop	r14	#
 17393              		.cfi_def_cfa_offset 16
 17394 5eb0 415F     		pop	r15	#
 17395              		.cfi_def_cfa_offset 8
 17396 5eb2 C3       		ret	
 17397              	.LVL1047:
 17398              	.L1368:
 17399              		.cfi_restore_state
 17400              		.loc 1 1255 1 view .LVU5868
 17401 5eb3 E8000000 		call	__stack_chk_fail@PLT	#
 17401      00
 17402              	.LVL1048:
 17403              		.cfi_endproc
 17404              	.LFE92:
 17406 5eb8 0F1F8400 		.p2align 4
 17406      00000000 
 17407              		.globl	test
 17409              	test:
 17410              	.LVL1049:
 17411              	.LFB93:
1256:sieve_extend.c **** 
1257:sieve_extend.c **** void test(bitword_t* __restrict bitarray, counter_t max) {
 17412              		.loc 1 1257 58 is_stmt 1 view -0
 17413              		.cfi_startproc
 17414              		.loc 1 1257 58 is_stmt 0 view .LVU5870
 17415 5ec0 F30F1EFA 		endbr64	
 17416              	.LBB987:
1258:sieve_extend.c ****     //#pragma GCC unroll 16
1259:sieve_extend.c ****     #pragma GCC ivdep 
1260:sieve_extend.c ****     for (counter_t x=0; x<max; x++) {
 17417              		.loc 1 1260 10 is_stmt 1 view .LVU5871
 17418              	.LVL1050:
 17419              		.loc 1 1260 25 view .LVU5872
 17420              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
 17421              		.loc 1 1260 5 is_stmt 0 view .LVU5873
 17422 5ec4 4885F6   		test	rsi, rsi	# max
 17423 5ec7 0F846901 		je	.L1411	#,
 17423      0000
 17424 5ecd 4889F1   		mov	rcx, rsi	# tmp97, max
 17425              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
 17426              		.loc 1 1260 20 view .LVU5874
 17427 5ed0 31C0     		xor	eax, eax	# x
 17428 5ed2 83E107   		and	ecx, 7	# tmp97,
 17429              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
1261:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17430              		.loc 1 1261 34 view .LVU5875
 17431 5ed5 BA010000 		mov	edx, 1	# tmp92,
 17431      00
 17432 5eda 0F84AD00 		je	.L1371	#,
 17432      0000
 17433 5ee0 4883F901 		cmp	rcx, 1	# tmp97,
 17434 5ee4 0F848600 		je	.L1396	#,
 17434      0000
GAS LISTING /tmp/ccNeV1of.s 			page 468


 17435 5eea 4883F902 		cmp	rcx, 2	# tmp97,
 17436 5eee 746C     		je	.L1397	#,
 17437 5ef0 4883F903 		cmp	rcx, 3	# tmp97,
 17438 5ef4 7452     		je	.L1398	#,
 17439 5ef6 4883F904 		cmp	rcx, 4	# tmp97,
 17440 5efa 7438     		je	.L1399	#,
 17441 5efc 4883F905 		cmp	rcx, 5	# tmp97,
 17442 5f00 741E     		je	.L1400	#,
 17443 5f02 4883F906 		cmp	rcx, 6	# tmp97,
 17444 5f06 0F852C01 		jne	.L1412	#,
 17444      0000
 17445              	.LVL1051:
 17446              	.L1401:
 17447              		.loc 1 1261 9 is_stmt 1 view .LVU5876
 17448              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17449              		.loc 1 1261 18 is_stmt 0 view .LVU5877
 17450 5f0c 4989C1   		mov	r9, rax	# tmp122, x
 17451              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17452              		.loc 1 1261 34 view .LVU5878
 17453 5f0f C462F9F7 		shlx	r8, rdx, rax	# tmp123, tmp92, x
 17453      C2
 17454              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17455              		.loc 1 1261 18 view .LVU5879
 17456 5f14 49C1E906 		shr	r9, 6	# tmp122,
 17457              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17458              		.loc 1 1260 33 view .LVU5880
 17459 5f18 4883C001 		add	rax, 1	# x,
 17460              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17461              		.loc 1 1261 34 view .LVU5881
 17462 5f1c 4E8904CF 		mov	QWORD PTR [rdi+r9*8], r8	# *_4, tmp123
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17463              		.loc 1 1260 32 is_stmt 1 view .LVU5882
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17464              		.loc 1 1260 25 view .LVU5883
 17465              	.L1400:
 17466              		.loc 1 1261 9 view .LVU5884
 17467              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17468              		.loc 1 1261 18 is_stmt 0 view .LVU5885
 17469 5f20 4989C2   		mov	r10, rax	# tmp124, x
 17470              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17471              		.loc 1 1261 34 view .LVU5886
 17472 5f23 C462F9F7 		shlx	r11, rdx, rax	# tmp125, tmp92, x
 17472      DA
 17473              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17474              		.loc 1 1261 18 view .LVU5887
 17475 5f28 49C1EA06 		shr	r10, 6	# tmp124,
 17476              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17477              		.loc 1 1260 33 view .LVU5888
 17478 5f2c 4883C001 		add	rax, 1	# x,
 17479              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17480              		.loc 1 1261 34 view .LVU5889
 17481 5f30 4E891CD7 		mov	QWORD PTR [rdi+r10*8], r11	# *_4, tmp125
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17482              		.loc 1 1260 32 is_stmt 1 view .LVU5890
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
GAS LISTING /tmp/ccNeV1of.s 			page 469


 17483              		.loc 1 1260 25 view .LVU5891
 17484              	.L1399:
 17485              		.loc 1 1261 9 view .LVU5892
 17486              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17487              		.loc 1 1261 18 is_stmt 0 view .LVU5893
 17488 5f34 4889C1   		mov	rcx, rax	# tmp126, x
 17489              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17490              		.loc 1 1261 34 view .LVU5894
 17491 5f37 C462F9F7 		shlx	r9, rdx, rax	# tmp127, tmp92, x
 17491      CA
 17492              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17493              		.loc 1 1261 18 view .LVU5895
 17494 5f3c 48C1E906 		shr	rcx, 6	# tmp126,
 17495              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17496              		.loc 1 1260 33 view .LVU5896
 17497 5f40 4883C001 		add	rax, 1	# x,
 17498              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17499              		.loc 1 1261 34 view .LVU5897
 17500 5f44 4C890CCF 		mov	QWORD PTR [rdi+rcx*8], r9	# *_4, tmp127
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17501              		.loc 1 1260 32 is_stmt 1 view .LVU5898
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17502              		.loc 1 1260 25 view .LVU5899
 17503              	.L1398:
 17504              		.loc 1 1261 9 view .LVU5900
 17505              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17506              		.loc 1 1261 18 is_stmt 0 view .LVU5901
 17507 5f48 4989C2   		mov	r10, rax	# tmp128, x
 17508              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17509              		.loc 1 1261 34 view .LVU5902
 17510 5f4b C462F9F7 		shlx	r8, rdx, rax	# tmp129, tmp92, x
 17510      C2
 17511              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17512              		.loc 1 1261 18 view .LVU5903
 17513 5f50 49C1EA06 		shr	r10, 6	# tmp128,
 17514              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17515              		.loc 1 1260 33 view .LVU5904
 17516 5f54 4883C001 		add	rax, 1	# x,
 17517              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17518              		.loc 1 1261 34 view .LVU5905
 17519 5f58 4E8904D7 		mov	QWORD PTR [rdi+r10*8], r8	# *_4, tmp129
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17520              		.loc 1 1260 32 is_stmt 1 view .LVU5906
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17521              		.loc 1 1260 25 view .LVU5907
 17522              	.L1397:
 17523              		.loc 1 1261 9 view .LVU5908
 17524              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17525              		.loc 1 1261 18 is_stmt 0 view .LVU5909
 17526 5f5c 4989C3   		mov	r11, rax	# tmp130, x
 17527              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17528              		.loc 1 1261 34 view .LVU5910
 17529 5f5f C4E2F9F7 		shlx	rcx, rdx, rax	# tmp131, tmp92, x
 17529      CA
 17530              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
GAS LISTING /tmp/ccNeV1of.s 			page 470


 17531              		.loc 1 1261 18 view .LVU5911
 17532 5f64 49C1EB06 		shr	r11, 6	# tmp130,
 17533              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17534              		.loc 1 1260 33 view .LVU5912
 17535 5f68 4883C001 		add	rax, 1	# x,
 17536              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17537              		.loc 1 1261 34 view .LVU5913
 17538 5f6c 4A890CDF 		mov	QWORD PTR [rdi+r11*8], rcx	# *_4, tmp131
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17539              		.loc 1 1260 32 is_stmt 1 view .LVU5914
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17540              		.loc 1 1260 25 view .LVU5915
 17541              	.L1396:
 17542              		.loc 1 1261 9 view .LVU5916
 17543              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17544              		.loc 1 1261 18 is_stmt 0 view .LVU5917
 17545 5f70 4989C1   		mov	r9, rax	# tmp132, x
 17546              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17547              		.loc 1 1261 34 view .LVU5918
 17548 5f73 C462F9F7 		shlx	r10, rdx, rax	# tmp133, tmp92, x
 17548      D2
 17549              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17550              		.loc 1 1261 18 view .LVU5919
 17551 5f78 49C1E906 		shr	r9, 6	# tmp132,
 17552              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17553              		.loc 1 1260 33 view .LVU5920
 17554 5f7c 4883C001 		add	rax, 1	# x,
 17555              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17556              		.loc 1 1261 34 view .LVU5921
 17557 5f80 4E8914CF 		mov	QWORD PTR [rdi+r9*8], r10	# *_4, tmp133
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17558              		.loc 1 1260 32 is_stmt 1 view .LVU5922
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17559              		.loc 1 1260 25 view .LVU5923
 17560              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17561              		.loc 1 1260 5 is_stmt 0 view .LVU5924
 17562 5f84 4839C6   		cmp	rsi, rax	# max, x
 17563 5f87 0F84BD00 		je	.L1413	#,
 17563      0000
 17564              	.L1371:
 17565              		.loc 1 1261 9 is_stmt 1 discriminator 3 view .LVU5925
 17566              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17567              		.loc 1 1260 33 is_stmt 0 discriminator 3 view .LVU5926
 17568 5f8d 488D4801 		lea	rcx, 1[rax]	# tmp98,
 17569              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17570              		.loc 1 1261 18 discriminator 3 view .LVU5927
 17571 5f91 4989C3   		mov	r11, rax	# tmp90, x
 17572 5f94 49C1EB06 		shr	r11, 6	# tmp90,
 17573 5f98 4989C9   		mov	r9, rcx	# tmp100, tmp98
 17574 5f9b 49C1E906 		shr	r9, 6	# tmp100,
 17575              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17576              		.loc 1 1261 34 discriminator 3 view .LVU5928
 17577 5f9f C462F9F7 		shlx	r8, rdx, rax	# tmp93, tmp92, x
GAS LISTING /tmp/ccNeV1of.s 			page 471


 17577      C2
 17578 5fa4 C462F1F7 		shlx	r10, rdx, rcx	# tmp101, tmp92, tmp98
 17578      D2
 17579 5fa9 4E8904DF 		mov	QWORD PTR [rdi+r11*8], r8	# *_4, tmp93
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17580              		.loc 1 1260 32 is_stmt 1 discriminator 3 view .LVU5929
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17581              		.loc 1 1260 25 discriminator 3 view .LVU5930
 17582              		.loc 1 1261 9 discriminator 3 view .LVU5931
 17583              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17584              		.loc 1 1261 34 is_stmt 0 discriminator 3 view .LVU5932
 17585 5fad 4E8914CF 		mov	QWORD PTR [rdi+r9*8], r10	# *_4, tmp101
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17586              		.loc 1 1260 32 is_stmt 1 discriminator 3 view .LVU5933
 17587              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17588              		.loc 1 1260 33 is_stmt 0 discriminator 3 view .LVU5934
 17589 5fb1 4C8D5802 		lea	r11, 2[rax]	# x,
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17590              		.loc 1 1260 25 is_stmt 1 discriminator 3 view .LVU5935
 17591              		.loc 1 1261 9 discriminator 3 view .LVU5936
 17592              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17593              		.loc 1 1260 33 is_stmt 0 discriminator 3 view .LVU5937
 17594 5fb5 4C8D4803 		lea	r9, 3[rax]	# x,
 17595              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17596              		.loc 1 1261 18 discriminator 3 view .LVU5938
 17597 5fb9 4D89D8   		mov	r8, r11	# tmp103, x
 17598 5fbc 49C1E806 		shr	r8, 6	# tmp103,
 17599 5fc0 4D89CA   		mov	r10, r9	# tmp106, x
 17600 5fc3 49C1EA06 		shr	r10, 6	# tmp106,
 17601              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17602              		.loc 1 1261 34 discriminator 3 view .LVU5939
 17603 5fc7 C4E2A1F7 		shlx	rcx, rdx, r11	# tmp104, tmp92, x
 17603      CA
 17604 5fcc C462B1F7 		shlx	r11, rdx, r9	# tmp107, tmp92, x
 17604      DA
 17605 5fd1 4A890CC7 		mov	QWORD PTR [rdi+r8*8], rcx	# *_4, tmp104
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17606              		.loc 1 1260 32 is_stmt 1 discriminator 3 view .LVU5940
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17607              		.loc 1 1260 25 discriminator 3 view .LVU5941
 17608              		.loc 1 1261 9 discriminator 3 view .LVU5942
 17609              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17610              		.loc 1 1261 34 is_stmt 0 discriminator 3 view .LVU5943
 17611 5fd5 4E891CD7 		mov	QWORD PTR [rdi+r10*8], r11	# *_4, tmp107
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17612              		.loc 1 1260 32 is_stmt 1 discriminator 3 view .LVU5944
 17613              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17614              		.loc 1 1260 33 is_stmt 0 discriminator 3 view .LVU5945
 17615 5fd9 488D4804 		lea	rcx, 4[rax]	# x,
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17616              		.loc 1 1260 25 is_stmt 1 discriminator 3 view .LVU5946
 17617              		.loc 1 1261 9 discriminator 3 view .LVU5947
 17618              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
GAS LISTING /tmp/ccNeV1of.s 			page 472


 17619              		.loc 1 1260 33 is_stmt 0 discriminator 3 view .LVU5948
 17620 5fdd 4C8D5005 		lea	r10, 5[rax]	# x,
 17621              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17622              		.loc 1 1261 18 discriminator 3 view .LVU5949
 17623 5fe1 4989C8   		mov	r8, rcx	# tmp109, x
 17624 5fe4 49C1E806 		shr	r8, 6	# tmp109,
 17625 5fe8 4D89D3   		mov	r11, r10	# tmp112, x
 17626 5feb 49C1EB06 		shr	r11, 6	# tmp112,
 17627              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17628              		.loc 1 1261 34 discriminator 3 view .LVU5950
 17629 5fef C462F1F7 		shlx	r9, rdx, rcx	# tmp110, tmp92, x
 17629      CA
 17630 5ff4 C4E2A9F7 		shlx	rcx, rdx, r10	# tmp113, tmp92, x
 17630      CA
 17631 5ff9 4E890CC7 		mov	QWORD PTR [rdi+r8*8], r9	# *_4, tmp110
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17632              		.loc 1 1260 32 is_stmt 1 discriminator 3 view .LVU5951
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17633              		.loc 1 1260 25 discriminator 3 view .LVU5952
 17634              		.loc 1 1261 9 discriminator 3 view .LVU5953
 17635              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17636              		.loc 1 1261 34 is_stmt 0 discriminator 3 view .LVU5954
 17637 5ffd 4A890CDF 		mov	QWORD PTR [rdi+r11*8], rcx	# *_4, tmp113
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17638              		.loc 1 1260 32 is_stmt 1 discriminator 3 view .LVU5955
 17639              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17640              		.loc 1 1260 33 is_stmt 0 discriminator 3 view .LVU5956
 17641 6001 4C8D4806 		lea	r9, 6[rax]	# x,
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17642              		.loc 1 1260 25 is_stmt 1 discriminator 3 view .LVU5957
 17643              		.loc 1 1261 9 discriminator 3 view .LVU5958
 17644              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17645              		.loc 1 1260 33 is_stmt 0 discriminator 3 view .LVU5959
 17646 6005 4C8D5807 		lea	r11, 7[rax]	# x,
 17647              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17648              		.loc 1 1261 18 discriminator 3 view .LVU5960
 17649 6009 4D89C8   		mov	r8, r9	# tmp115, x
 17650              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17651              		.loc 1 1261 34 discriminator 3 view .LVU5961
 17652 600c C462B1F7 		shlx	r10, rdx, r9	# tmp116, tmp92, x
 17652      D2
 17653              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17654              		.loc 1 1260 33 discriminator 3 view .LVU5962
 17655 6011 4883C008 		add	rax, 8	# x,
 17656              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17657              		.loc 1 1261 18 discriminator 3 view .LVU5963
 17658 6015 49C1E806 		shr	r8, 6	# tmp115,
 17659 6019 4D89D9   		mov	r9, r11	# tmp118, x
 17660 601c 49C1E906 		shr	r9, 6	# tmp118,
 17661              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17662              		.loc 1 1260 5 discriminator 3 view .LVU5964
 17663 6020 4839C6   		cmp	rsi, rax	# max, x
 17664              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
GAS LISTING /tmp/ccNeV1of.s 			page 473


 17665              		.loc 1 1261 34 discriminator 3 view .LVU5965
 17666 6023 C4E2A1F7 		shlx	rcx, rdx, r11	# tmp119, tmp92, x
 17666      CA
 17667 6028 4E8914C7 		mov	QWORD PTR [rdi+r8*8], r10	# *_4, tmp116
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17668              		.loc 1 1260 32 is_stmt 1 discriminator 3 view .LVU5966
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17669              		.loc 1 1260 25 discriminator 3 view .LVU5967
 17670              		.loc 1 1261 9 discriminator 3 view .LVU5968
 17671              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
 17672              		.loc 1 1261 34 is_stmt 0 discriminator 3 view .LVU5969
 17673 602c 4A890CCF 		mov	QWORD PTR [rdi+r9*8], rcx	# *_4, tmp119
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17674              		.loc 1 1260 32 is_stmt 1 discriminator 3 view .LVU5970
 17675              	.LVL1052:
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17676              		.loc 1 1260 25 discriminator 3 view .LVU5971
 17677              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17678              		.loc 1 1260 5 is_stmt 0 discriminator 3 view .LVU5972
 17679 6030 0F8557FF 		jne	.L1371	#,
 17679      FFFF
 17680              	.LVL1053:
 17681              	.L1411:
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17682              		.loc 1 1260 5 discriminator 3 view .LVU5973
 17683              	.LBE987:
 17684              	# sieve_extend.c:1263: }
1262:sieve_extend.c ****     }
1263:sieve_extend.c **** }
 17685              		.loc 1 1263 1 view .LVU5974
 17686 6036 C3       		ret	
 17687              	.LVL1054:
 17688              		.p2align 4,,7
 17689 6037 90       		.p2align 3
 17690              	.L1412:
 17691              	.LBB988:
1261:sieve_extend.c ****     }
 17692              		.loc 1 1261 9 is_stmt 1 view .LVU5975
 17693              	# sieve_extend.c:1261:         bitarray[wordindex(x)] = markmask(x);
1261:sieve_extend.c ****     }
 17694              		.loc 1 1261 34 is_stmt 0 view .LVU5976
 17695 6038 48C704C7 		mov	QWORD PTR [rdi+rax*8], 1	# *_4,
 17695      01000000 
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17696              		.loc 1 1260 32 is_stmt 1 view .LVU5977
 17697              	.LVL1055:
 17698              	# sieve_extend.c:1260:     for (counter_t x=0; x<max; x++) {
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17699              		.loc 1 1260 33 is_stmt 0 view .LVU5978
 17700 6040 B8010000 		mov	eax, 1	# x,
 17700      00
1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17701              		.loc 1 1260 25 is_stmt 1 view .LVU5979
 17702 6045 E9C2FEFF 		jmp	.L1401	#
 17702      FF
 17703              	.L1413:
GAS LISTING /tmp/ccNeV1of.s 			page 474


1260:sieve_extend.c ****         bitarray[wordindex(x)] = markmask(x);
 17704              		.loc 1 1260 25 is_stmt 0 view .LVU5980
 17705 604a C3       		ret	
 17706              	.LBE988:
 17707              		.cfi_endproc
 17708              	.LFE93:
 17710 604b 0F1F4400 		.p2align 4
 17710      00
 17711              		.globl	test2
 17713              	test2:
 17714              	.LFB107:
 17715              		.cfi_startproc
 17716 6050 F30F1EFA 		endbr64	
 17717 6054 4885F6   		test	rsi, rsi	# max
 17718 6057 0F846901 		je	.L1456	#,
 17718      0000
 17719 605d 4889F1   		mov	rcx, rsi	# tmp97, max
 17720 6060 31C0     		xor	eax, eax	# x
 17721 6062 83E107   		and	ecx, 7	# tmp97,
 17722 6065 BA010000 		mov	edx, 1	# tmp92,
 17722      00
 17723 606a 0F84AD00 		je	.L1416	#,
 17723      0000
 17724 6070 4883F901 		cmp	rcx, 1	# tmp97,
 17725 6074 0F848600 		je	.L1441	#,
 17725      0000
 17726 607a 4883F902 		cmp	rcx, 2	# tmp97,
 17727 607e 746C     		je	.L1442	#,
 17728 6080 4883F903 		cmp	rcx, 3	# tmp97,
 17729 6084 7452     		je	.L1443	#,
 17730 6086 4883F904 		cmp	rcx, 4	# tmp97,
 17731 608a 7438     		je	.L1444	#,
 17732 608c 4883F905 		cmp	rcx, 5	# tmp97,
 17733 6090 741E     		je	.L1445	#,
 17734 6092 4883F906 		cmp	rcx, 6	# tmp97,
 17735 6096 0F852C01 		jne	.L1457	#,
 17735      0000
 17736              	.L1446:
 17737 609c 4989C1   		mov	r9, rax	# tmp122, x
 17738 609f C462F9F7 		shlx	r8, rdx, rax	# tmp123, tmp92, x
 17738      C2
 17739 60a4 49C1E906 		shr	r9, 6	# tmp122,
 17740 60a8 4883C001 		add	rax, 1	# x,
 17741 60ac 4E8904CF 		mov	QWORD PTR [rdi+r9*8], r8	# *_9, tmp123
 17742              	.L1445:
 17743 60b0 4989C2   		mov	r10, rax	# tmp124, x
 17744 60b3 C462F9F7 		shlx	r11, rdx, rax	# tmp125, tmp92, x
 17744      DA
 17745 60b8 49C1EA06 		shr	r10, 6	# tmp124,
 17746 60bc 4883C001 		add	rax, 1	# x,
 17747 60c0 4E891CD7 		mov	QWORD PTR [rdi+r10*8], r11	# *_9, tmp125
 17748              	.L1444:
 17749 60c4 4889C1   		mov	rcx, rax	# tmp126, x
 17750 60c7 C462F9F7 		shlx	r9, rdx, rax	# tmp127, tmp92, x
 17750      CA
 17751 60cc 48C1E906 		shr	rcx, 6	# tmp126,
 17752 60d0 4883C001 		add	rax, 1	# x,
GAS LISTING /tmp/ccNeV1of.s 			page 475


 17753 60d4 4C890CCF 		mov	QWORD PTR [rdi+rcx*8], r9	# *_9, tmp127
 17754              	.L1443:
 17755 60d8 4989C2   		mov	r10, rax	# tmp128, x
 17756 60db C462F9F7 		shlx	r8, rdx, rax	# tmp129, tmp92, x
 17756      C2
 17757 60e0 49C1EA06 		shr	r10, 6	# tmp128,
 17758 60e4 4883C001 		add	rax, 1	# x,
 17759 60e8 4E8904D7 		mov	QWORD PTR [rdi+r10*8], r8	# *_9, tmp129
 17760              	.L1442:
 17761 60ec 4989C3   		mov	r11, rax	# tmp130, x
 17762 60ef C4E2F9F7 		shlx	rcx, rdx, rax	# tmp131, tmp92, x
 17762      CA
 17763 60f4 49C1EB06 		shr	r11, 6	# tmp130,
 17764 60f8 4883C001 		add	rax, 1	# x,
 17765 60fc 4A890CDF 		mov	QWORD PTR [rdi+r11*8], rcx	# *_9, tmp131
 17766              	.L1441:
 17767 6100 4989C1   		mov	r9, rax	# tmp132, x
 17768 6103 C462F9F7 		shlx	r10, rdx, rax	# tmp133, tmp92, x
 17768      D2
 17769 6108 49C1E906 		shr	r9, 6	# tmp132,
 17770 610c 4883C001 		add	rax, 1	# x,
 17771 6110 4E8914CF 		mov	QWORD PTR [rdi+r9*8], r10	# *_9, tmp133
 17772 6114 4839C6   		cmp	rsi, rax	# max, x
 17773 6117 0F84BD00 		je	.L1458	#,
 17773      0000
 17774              	.L1416:
 17775 611d 488D4801 		lea	rcx, 1[rax]	# tmp98,
 17776 6121 4989C3   		mov	r11, rax	# tmp90, x
 17777 6124 49C1EB06 		shr	r11, 6	# tmp90,
 17778 6128 4989C9   		mov	r9, rcx	# tmp100, tmp98
 17779 612b 49C1E906 		shr	r9, 6	# tmp100,
 17780 612f C462F9F7 		shlx	r8, rdx, rax	# tmp93, tmp92, x
 17780      C2
 17781 6134 C462F1F7 		shlx	r10, rdx, rcx	# tmp101, tmp92, tmp98
 17781      D2
 17782 6139 4E8904DF 		mov	QWORD PTR [rdi+r11*8], r8	# *_9, tmp93
 17783 613d 4E8914CF 		mov	QWORD PTR [rdi+r9*8], r10	# *_9, tmp101
 17784 6141 4C8D5802 		lea	r11, 2[rax]	# x,
 17785 6145 4C8D4803 		lea	r9, 3[rax]	# x,
 17786 6149 4D89D8   		mov	r8, r11	# tmp103, x
 17787 614c 49C1E806 		shr	r8, 6	# tmp103,
 17788 6150 4D89CA   		mov	r10, r9	# tmp106, x
 17789 6153 49C1EA06 		shr	r10, 6	# tmp106,
 17790 6157 C4E2A1F7 		shlx	rcx, rdx, r11	# tmp104, tmp92, x
 17790      CA
 17791 615c C462B1F7 		shlx	r11, rdx, r9	# tmp107, tmp92, x
 17791      DA
 17792 6161 4A890CC7 		mov	QWORD PTR [rdi+r8*8], rcx	# *_9, tmp104
 17793 6165 4E891CD7 		mov	QWORD PTR [rdi+r10*8], r11	# *_9, tmp107
 17794 6169 488D4804 		lea	rcx, 4[rax]	# x,
 17795 616d 4C8D5005 		lea	r10, 5[rax]	# x,
 17796 6171 4989C8   		mov	r8, rcx	# tmp109, x
 17797 6174 49C1E806 		shr	r8, 6	# tmp109,
 17798 6178 4D89D3   		mov	r11, r10	# tmp112, x
 17799 617b 49C1EB06 		shr	r11, 6	# tmp112,
 17800 617f C462F1F7 		shlx	r9, rdx, rcx	# tmp110, tmp92, x
 17800      CA
GAS LISTING /tmp/ccNeV1of.s 			page 476


 17801 6184 C4E2A9F7 		shlx	rcx, rdx, r10	# tmp113, tmp92, x
 17801      CA
 17802 6189 4E890CC7 		mov	QWORD PTR [rdi+r8*8], r9	# *_9, tmp110
 17803 618d 4A890CDF 		mov	QWORD PTR [rdi+r11*8], rcx	# *_9, tmp113
 17804 6191 4C8D4806 		lea	r9, 6[rax]	# x,
 17805 6195 4C8D5807 		lea	r11, 7[rax]	# x,
 17806 6199 4D89C8   		mov	r8, r9	# tmp115, x
 17807 619c C462B1F7 		shlx	r10, rdx, r9	# tmp116, tmp92, x
 17807      D2
 17808 61a1 4883C008 		add	rax, 8	# x,
 17809 61a5 49C1E806 		shr	r8, 6	# tmp115,
 17810 61a9 4D89D9   		mov	r9, r11	# tmp118, x
 17811 61ac 49C1E906 		shr	r9, 6	# tmp118,
 17812 61b0 4839C6   		cmp	rsi, rax	# max, x
 17813 61b3 C4E2A1F7 		shlx	rcx, rdx, r11	# tmp119, tmp92, x
 17813      CA
 17814 61b8 4E8914C7 		mov	QWORD PTR [rdi+r8*8], r10	# *_9, tmp116
 17815 61bc 4A890CCF 		mov	QWORD PTR [rdi+r9*8], rcx	# *_9, tmp119
 17816 61c0 0F8557FF 		jne	.L1416	#,
 17816      FFFF
 17817              	.L1456:
 17818 61c6 C3       		ret	
 17819              		.p2align 4,,7
 17820 61c7 90       		.p2align 3
 17821              	.L1457:
 17822 61c8 48C704C7 		mov	QWORD PTR [rdi+rax*8], 1	# *_9,
 17822      01000000 
 17823 61d0 B8010000 		mov	eax, 1	# x,
 17823      00
 17824 61d5 E9C2FEFF 		jmp	.L1446	#
 17824      FF
 17825              	.L1458:
 17826 61da C3       		ret	
 17827              		.cfi_endproc
 17828              	.LFE107:
 17830 61db 0F1F4400 		.p2align 4
 17830      00
 17831              		.globl	test3
 17833              	test3:
 17834              	.LVL1056:
 17835              	.LFB95:
1264:sieve_extend.c **** 
1265:sieve_extend.c **** void test2(bitword_t* __restrict bitarray, counter_t max) {
1266:sieve_extend.c ****     //#pragma GCC unroll 16
1267:sieve_extend.c ****     #pragma GCC ivdep 
1268:sieve_extend.c ****     for (counter_t x=0; x<max; x++) {
1269:sieve_extend.c ****         *(bitarray+wordindex(x)) = markmask(x);
1270:sieve_extend.c ****     }
1271:sieve_extend.c **** }
1272:sieve_extend.c **** 
1273:sieve_extend.c **** void test3(bitword_t* __restrict bitarray, counter_t max) {
 17836              		.loc 1 1273 59 is_stmt 1 view -0
 17837              		.cfi_startproc
 17838              		.loc 1 1273 59 is_stmt 0 view .LVU5982
 17839 61e0 F30F1EFA 		endbr64	
1274:sieve_extend.c ****     for (register counter_t x=0; x<max; ) {
 17840              		.loc 1 1274 5 is_stmt 1 view .LVU5983
GAS LISTING /tmp/ccNeV1of.s 			page 477


 17841              	.LBB989:
 17842              		.loc 1 1274 10 view .LVU5984
 17843              	.LVL1057:
 17844              		.loc 1 1274 34 view .LVU5985
 17845              	# sieve_extend.c:1274:     for (register counter_t x=0; x<max; ) {
 17846              		.loc 1 1274 5 is_stmt 0 view .LVU5986
 17847 61e4 4885F6   		test	rsi, rsi	# max
 17848 61e7 0F840401 		je	.L1483	#,
 17848      0000
 17849              	# sieve_extend.c:1274:     for (register counter_t x=0; x<max; ) {
 17850              		.loc 1 1274 29 view .LVU5987
 17851 61ed 31C0     		xor	eax, eax	# x
 17852              	.LBB990:
 17853              	# sieve_extend.c:1280:             mask |= markmask(x);
1275:sieve_extend.c ****         register bitword_t mask = SAFE_ZERO;
1276:sieve_extend.c ****         register counter_t index_word = wordstart(x);
1277:sieve_extend.c **** 
1278:sieve_extend.c ****         #pragma GCC ivdep
1279:sieve_extend.c ****         do {
1280:sieve_extend.c ****             mask |= markmask(x);
 17854              		.loc 1 1280 21 view .LVU5988
 17855 61ef 41BA0100 		mov	r10d, 1	# tmp95,
 17855      0000
 17856              	.LVL1058:
 17857 61f5 66662E0F 		.p2align 4
 17857      1F840000 
 17857      000000
 17858              		.p2align 3
 17859              	.L1462:
1275:sieve_extend.c ****         register bitword_t mask = SAFE_ZERO;
 17860              		.loc 1 1275 9 is_stmt 1 view .LVU5989
1276:sieve_extend.c **** 
 17861              		.loc 1 1276 9 view .LVU5990
 17862              	# sieve_extend.c:1276:         register counter_t index_word = wordstart(x);
1276:sieve_extend.c **** 
 17863              		.loc 1 1276 28 is_stmt 0 view .LVU5991
 17864 6200 4989C0   		mov	r8, rax	# index_word, x
 17865              	# sieve_extend.c:1275:         register bitword_t mask = SAFE_ZERO;
1275:sieve_extend.c ****         register bitword_t mask = SAFE_ZERO;
 17866              		.loc 1 1275 28 view .LVU5992
 17867 6203 31C9     		xor	ecx, ecx	# mask
 17868              	# sieve_extend.c:1276:         register counter_t index_word = wordstart(x);
1276:sieve_extend.c **** 
 17869              		.loc 1 1276 28 view .LVU5993
 17870 6205 4983E0C0 		and	r8, -64	# index_word,
 17871              	.LVL1059:
 17872              	.L1461:
 17873              		.loc 1 1280 13 is_stmt 1 discriminator 1 view .LVU5994
 17874              	# sieve_extend.c:1281:             x++;
1281:sieve_extend.c ****             x++;
 17875              		.loc 1 1281 14 is_stmt 0 discriminator 1 view .LVU5995
 17876 6209 4C8D4801 		lea	r9, 1[rax]	# tmp98,
 17877              	# sieve_extend.c:1280:             mask |= markmask(x);
1280:sieve_extend.c ****             x++;
 17878              		.loc 1 1280 21 discriminator 1 view .LVU5996
 17879 620d C4C2F9F7 		shlx	rdx, r10, rax	# tmp94, tmp95, x
 17879      D2
GAS LISTING /tmp/ccNeV1of.s 			page 478


 17880              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
1282:sieve_extend.c ****         } while(wordstart(x)==index_word);
 17881              		.loc 1 1282 17 discriminator 1 view .LVU5997
 17882 6212 4D89CB   		mov	r11, r9	# tmp96, x
 17883              	# sieve_extend.c:1280:             mask |= markmask(x);
1280:sieve_extend.c ****             x++;
 17884              		.loc 1 1280 18 discriminator 1 view .LVU5998
 17885 6215 4809D1   		or	rcx, rdx	# mask, tmp94
 17886              	.LVL1060:
1281:sieve_extend.c ****             x++;
 17887              		.loc 1 1281 13 is_stmt 1 discriminator 1 view .LVU5999
 17888              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 17889              		.loc 1 1282 17 is_stmt 0 discriminator 1 view .LVU6000
 17890 6218 4983E3C0 		and	r11, -64	# tmp96,
 17891              	# sieve_extend.c:1281:             x++;
1281:sieve_extend.c ****             x++;
 17892              		.loc 1 1281 14 discriminator 1 view .LVU6001
 17893 621c 4C89C8   		mov	rax, r9	# x, tmp98
 17894              	.LVL1061:
 17895              		.loc 1 1282 16 is_stmt 1 discriminator 1 view .LVU6002
 17896              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 17897              		.loc 1 1282 9 is_stmt 0 discriminator 1 view .LVU6003
 17898 621f 4D39C3   		cmp	r11, r8	# tmp96, index_word
 17899 6222 0F85B800 		jne	.L1482	#,
 17899      0000
1280:sieve_extend.c ****             x++;
 17900              		.loc 1 1280 13 is_stmt 1 view .LVU6004
 17901              	# sieve_extend.c:1281:             x++;
1281:sieve_extend.c ****             x++;
 17902              		.loc 1 1281 14 is_stmt 0 view .LVU6005
 17903 6228 4883C001 		add	rax, 1	# x,
 17904              	.LVL1062:
 17905              	# sieve_extend.c:1280:             mask |= markmask(x);
1280:sieve_extend.c ****             x++;
 17906              		.loc 1 1280 21 view .LVU6006
 17907 622c C4C2B1F7 		shlx	rdx, r10, r9	# tmp99, tmp95, x
 17907      D2
 17908              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 17909              		.loc 1 1282 17 view .LVU6007
 17910 6231 4989C3   		mov	r11, rax	# tmp100, x
 17911              	# sieve_extend.c:1280:             mask |= markmask(x);
1280:sieve_extend.c ****             x++;
 17912              		.loc 1 1280 18 view .LVU6008
 17913 6234 4809D1   		or	rcx, rdx	# mask, tmp99
 17914              	.LVL1063:
1281:sieve_extend.c ****             x++;
 17915              		.loc 1 1281 13 is_stmt 1 view .LVU6009
 17916              		.loc 1 1282 16 view .LVU6010
 17917              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 17918              		.loc 1 1282 17 is_stmt 0 view .LVU6011
 17919 6237 4983E3C0 		and	r11, -64	# tmp100,
 17920              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 17921              		.loc 1 1282 9 view .LVU6012
 17922 623b 4D39C3   		cmp	r11, r8	# tmp100, index_word
 17923 623e 0F859C00 		jne	.L1482	#,
 17923      0000
1280:sieve_extend.c ****             x++;
GAS LISTING /tmp/ccNeV1of.s 			page 479


 17924              		.loc 1 1280 13 is_stmt 1 view .LVU6013
 17925              	# sieve_extend.c:1280:             mask |= markmask(x);
1280:sieve_extend.c ****             x++;
 17926              		.loc 1 1280 21 is_stmt 0 view .LVU6014
 17927 6244 C4C2F9F7 		shlx	rax, r10, rax	# tmp101, tmp95, x
 17927      C2
 17928              	.LVL1064:
 17929              	# sieve_extend.c:1280:             mask |= markmask(x);
1280:sieve_extend.c ****             x++;
 17930              		.loc 1 1280 18 view .LVU6015
 17931 6249 4809C1   		or	rcx, rax	# mask, tmp101
 17932              	.LVL1065:
1281:sieve_extend.c ****             x++;
 17933              		.loc 1 1281 13 is_stmt 1 view .LVU6016
 17934              	# sieve_extend.c:1281:             x++;
1281:sieve_extend.c ****             x++;
 17935              		.loc 1 1281 14 is_stmt 0 view .LVU6017
 17936 624c 498D4102 		lea	rax, 2[r9]	# x,
 17937              	.LVL1066:
 17938              		.loc 1 1282 16 is_stmt 1 view .LVU6018
 17939              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 17940              		.loc 1 1282 17 is_stmt 0 view .LVU6019
 17941 6250 4889C2   		mov	rdx, rax	# tmp102, x
 17942 6253 4883E2C0 		and	rdx, -64	# tmp102,
 17943              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 17944              		.loc 1 1282 9 view .LVU6020
 17945 6257 4C39C2   		cmp	rdx, r8	# tmp102, index_word
 17946 625a 0F858000 		jne	.L1482	#,
 17946      0000
1280:sieve_extend.c ****             x++;
 17947              		.loc 1 1280 13 is_stmt 1 view .LVU6021
 17948              	# sieve_extend.c:1280:             mask |= markmask(x);
1280:sieve_extend.c ****             x++;
 17949              		.loc 1 1280 21 is_stmt 0 view .LVU6022
 17950 6260 C442F9F7 		shlx	r11, r10, rax	# tmp103, tmp95, x
 17950      DA
 17951              	# sieve_extend.c:1281:             x++;
1281:sieve_extend.c ****             x++;
 17952              		.loc 1 1281 14 view .LVU6023
 17953 6265 498D4103 		lea	rax, 3[r9]	# x,
 17954              	.LVL1067:
 17955              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 17956              		.loc 1 1282 17 view .LVU6024
 17957 6269 4889C2   		mov	rdx, rax	# tmp104, x
 17958              	# sieve_extend.c:1280:             mask |= markmask(x);
1280:sieve_extend.c ****             x++;
 17959              		.loc 1 1280 18 view .LVU6025
 17960 626c 4C09D9   		or	rcx, r11	# mask, tmp103
 17961              	.LVL1068:
1281:sieve_extend.c ****             x++;
 17962              		.loc 1 1281 13 is_stmt 1 view .LVU6026
 17963              		.loc 1 1282 16 view .LVU6027
 17964              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 17965              		.loc 1 1282 17 is_stmt 0 view .LVU6028
 17966 626f 4883E2C0 		and	rdx, -64	# tmp104,
 17967              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 17968              		.loc 1 1282 9 view .LVU6029
GAS LISTING /tmp/ccNeV1of.s 			page 480


 17969 6273 4C39C2   		cmp	rdx, r8	# tmp104, index_word
 17970 6276 7568     		jne	.L1482	#,
1280:sieve_extend.c ****             x++;
 17971              		.loc 1 1280 13 is_stmt 1 view .LVU6030
 17972              	# sieve_extend.c:1280:             mask |= markmask(x);
1280:sieve_extend.c ****             x++;
 17973              		.loc 1 1280 21 is_stmt 0 view .LVU6031
 17974 6278 C4C2F9F7 		shlx	rax, r10, rax	# tmp105, tmp95, x
 17974      C2
 17975              	.LVL1069:
 17976              	# sieve_extend.c:1280:             mask |= markmask(x);
1280:sieve_extend.c ****             x++;
 17977              		.loc 1 1280 18 view .LVU6032
 17978 627d 4809C1   		or	rcx, rax	# mask, tmp105
 17979              	.LVL1070:
1281:sieve_extend.c ****             x++;
 17980              		.loc 1 1281 13 is_stmt 1 view .LVU6033
 17981              	# sieve_extend.c:1281:             x++;
1281:sieve_extend.c ****             x++;
 17982              		.loc 1 1281 14 is_stmt 0 view .LVU6034
 17983 6280 498D4104 		lea	rax, 4[r9]	# x,
 17984              	.LVL1071:
 17985              		.loc 1 1282 16 is_stmt 1 view .LVU6035
 17986              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 17987              		.loc 1 1282 17 is_stmt 0 view .LVU6036
 17988 6284 4989C3   		mov	r11, rax	# tmp106, x
 17989 6287 4983E3C0 		and	r11, -64	# tmp106,
 17990              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 17991              		.loc 1 1282 9 view .LVU6037
 17992 628b 4D39C3   		cmp	r11, r8	# tmp106, index_word
 17993 628e 7550     		jne	.L1482	#,
1280:sieve_extend.c ****             x++;
 17994              		.loc 1 1280 13 is_stmt 1 view .LVU6038
 17995              	# sieve_extend.c:1280:             mask |= markmask(x);
1280:sieve_extend.c ****             x++;
 17996              		.loc 1 1280 21 is_stmt 0 view .LVU6039
 17997 6290 C4C2F9F7 		shlx	rdx, r10, rax	# tmp107, tmp95, x
 17997      D2
 17998              	# sieve_extend.c:1281:             x++;
1281:sieve_extend.c ****             x++;
 17999              		.loc 1 1281 14 view .LVU6040
 18000 6295 498D4105 		lea	rax, 5[r9]	# x,
 18001              	.LVL1072:
 18002              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 18003              		.loc 1 1282 17 view .LVU6041
 18004 6299 4989C3   		mov	r11, rax	# tmp108, x
 18005              	# sieve_extend.c:1280:             mask |= markmask(x);
1280:sieve_extend.c ****             x++;
 18006              		.loc 1 1280 18 view .LVU6042
 18007 629c 4809D1   		or	rcx, rdx	# mask, tmp107
 18008              	.LVL1073:
1281:sieve_extend.c ****             x++;
 18009              		.loc 1 1281 13 is_stmt 1 view .LVU6043
 18010              		.loc 1 1282 16 view .LVU6044
 18011              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 18012              		.loc 1 1282 17 is_stmt 0 view .LVU6045
 18013 629f 4983E3C0 		and	r11, -64	# tmp108,
GAS LISTING /tmp/ccNeV1of.s 			page 481


 18014              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 18015              		.loc 1 1282 9 view .LVU6046
 18016 62a3 4D39C3   		cmp	r11, r8	# tmp108, index_word
 18017 62a6 7538     		jne	.L1482	#,
1280:sieve_extend.c ****             x++;
 18018              		.loc 1 1280 13 is_stmt 1 view .LVU6047
 18019              	# sieve_extend.c:1280:             mask |= markmask(x);
1280:sieve_extend.c ****             x++;
 18020              		.loc 1 1280 21 is_stmt 0 view .LVU6048
 18021 62a8 C4C2F9F7 		shlx	rax, r10, rax	# tmp109, tmp95, x
 18021      C2
 18022              	.LVL1074:
 18023              	# sieve_extend.c:1280:             mask |= markmask(x);
1280:sieve_extend.c ****             x++;
 18024              		.loc 1 1280 18 view .LVU6049
 18025 62ad 4809C1   		or	rcx, rax	# mask, tmp109
 18026              	.LVL1075:
1281:sieve_extend.c ****             x++;
 18027              		.loc 1 1281 13 is_stmt 1 view .LVU6050
 18028              	# sieve_extend.c:1281:             x++;
1281:sieve_extend.c ****             x++;
 18029              		.loc 1 1281 14 is_stmt 0 view .LVU6051
 18030 62b0 498D4106 		lea	rax, 6[r9]	# x,
 18031              	.LVL1076:
 18032              		.loc 1 1282 16 is_stmt 1 view .LVU6052
 18033              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 18034              		.loc 1 1282 17 is_stmt 0 view .LVU6053
 18035 62b4 4889C2   		mov	rdx, rax	# tmp110, x
 18036 62b7 4883E2C0 		and	rdx, -64	# tmp110,
 18037              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 18038              		.loc 1 1282 9 view .LVU6054
 18039 62bb 4C39C2   		cmp	rdx, r8	# tmp110, index_word
 18040 62be 7520     		jne	.L1482	#,
1280:sieve_extend.c ****             x++;
 18041              		.loc 1 1280 13 is_stmt 1 view .LVU6055
 18042              	# sieve_extend.c:1280:             mask |= markmask(x);
1280:sieve_extend.c ****             x++;
 18043              		.loc 1 1280 21 is_stmt 0 view .LVU6056
 18044 62c0 C442F9F7 		shlx	r11, r10, rax	# tmp111, tmp95, x
 18044      DA
 18045              	# sieve_extend.c:1281:             x++;
1281:sieve_extend.c ****             x++;
 18046              		.loc 1 1281 14 view .LVU6057
 18047 62c5 498D4107 		lea	rax, 7[r9]	# x,
 18048              	.LVL1077:
 18049              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 18050              		.loc 1 1282 17 view .LVU6058
 18051 62c9 4989C1   		mov	r9, rax	# tmp112, x
 18052              	.LVL1078:
 18053              	# sieve_extend.c:1280:             mask |= markmask(x);
1280:sieve_extend.c ****             x++;
 18054              		.loc 1 1280 18 view .LVU6059
 18055 62cc 4C09D9   		or	rcx, r11	# mask, tmp111
 18056              	.LVL1079:
1281:sieve_extend.c ****             x++;
 18057              		.loc 1 1281 13 is_stmt 1 view .LVU6060
 18058              		.loc 1 1282 16 view .LVU6061
GAS LISTING /tmp/ccNeV1of.s 			page 482


 18059              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 18060              		.loc 1 1282 17 is_stmt 0 view .LVU6062
 18061 62cf 4983E1C0 		and	r9, -64	# tmp112,
 18062              	# sieve_extend.c:1282:         } while(wordstart(x)==index_word);
 18063              		.loc 1 1282 9 view .LVU6063
 18064 62d3 4D39C1   		cmp	r9, r8	# tmp112, index_word
 18065 62d6 0F842DFF 		je	.L1461	#,
 18065      FFFF
 18066 62dc 0F1F4000 		.p2align 4
 18067              		.p2align 3
 18068              	.L1482:
1283:sieve_extend.c ****         bitarray[wordindex(index_word)] = mask;
 18069              		.loc 1 1283 9 is_stmt 1 view .LVU6064
 18070              	# sieve_extend.c:1283:         bitarray[wordindex(index_word)] = mask;
 18071              		.loc 1 1283 18 is_stmt 0 view .LVU6065
 18072 62e0 49C1E806 		shr	r8, 6	# tmp97,
 18073              	.LVL1080:
 18074              		.loc 1 1283 18 view .LVU6066
 18075              	.LBE990:
 18076              	# sieve_extend.c:1274:     for (register counter_t x=0; x<max; ) {
1274:sieve_extend.c ****         register bitword_t mask = SAFE_ZERO;
 18077              		.loc 1 1274 5 view .LVU6067
 18078 62e4 4839C6   		cmp	rsi, rax	# max, x
 18079              	.LBB991:
 18080              	# sieve_extend.c:1283:         bitarray[wordindex(index_word)] = mask;
 18081              		.loc 1 1283 41 view .LVU6068
 18082 62e7 4A890CC7 		mov	QWORD PTR [rdi+r8*8], rcx	# *_6, mask
 18083              		.loc 1 1283 41 view .LVU6069
 18084              	.LBE991:
1274:sieve_extend.c ****         register bitword_t mask = SAFE_ZERO;
 18085              		.loc 1 1274 34 is_stmt 1 view .LVU6070
 18086              	# sieve_extend.c:1274:     for (register counter_t x=0; x<max; ) {
1274:sieve_extend.c ****         register bitword_t mask = SAFE_ZERO;
 18087              		.loc 1 1274 5 is_stmt 0 view .LVU6071
 18088 62eb 0F870FFF 		ja	.L1462	#,
 18088      FFFF
 18089              	.LVL1081:
 18090              	.L1483:
1274:sieve_extend.c ****         register bitword_t mask = SAFE_ZERO;
 18091              		.loc 1 1274 5 view .LVU6072
 18092              	.LBE989:
 18093              	# sieve_extend.c:1285: }
1284:sieve_extend.c ****     }
1285:sieve_extend.c **** }
 18094              		.loc 1 1285 1 view .LVU6073
 18095 62f1 C3       		ret	
 18096              		.cfi_endproc
 18097              	.LFE95:
 18099 62f2 66662E0F 		.p2align 4
 18099      1F840000 
 18099      0000000F 
 18099      1F00
 18100              		.globl	testshuffle_vector
 18102              	testshuffle_vector:
 18103              	.LVL1082:
 18104              	.LFB96:
1286:sieve_extend.c **** 
GAS LISTING /tmp/ccNeV1of.s 			page 483


1287:sieve_extend.c **** //void test4(bitword_t* __restrict bitarray, counter_t max) {
1288:sieve_extend.c **** //    bitvector_t* bitvector = (bitvector_t*) bitarray;
1289:sieve_extend.c **** //    for (register int x=0; x<max; ) {
1290:sieve_extend.c **** //        register bitvector_t mask = {};
1291:sieve_extend.c **** //        register counter_t index_vector = vectorstart(x);
1292:sieve_extend.c **** //        register counter_t index_word = wordindex(x);
1293:sieve_extend.c **** //        register word = wordindex(x);
1294:sieve_extend.c **** //        #pragma GCC ivdep
1295:sieve_extend.c **** //        do {
1296:sieve_extend.c **** //            mask[word[] |= markmask(x);
1297:sieve_extend.c **** //            x++;
1298:sieve_extend.c **** //            word =
1299:sieve_extend.c **** //        } while(wordstart(x)==index_word);
1300:sieve_extend.c **** //        bitvector[wordindex(index_word)] = mask;
1301:sieve_extend.c **** //    }
1302:sieve_extend.c **** //}
1303:sieve_extend.c **** 
1304:sieve_extend.c **** void testshuffle_vector(bitword_t* __restrict bitarray, counter_t max) {
 18105              		.loc 1 1304 72 is_stmt 1 view -0
 18106              		.cfi_startproc
 18107              		.loc 1 1304 72 is_stmt 0 view .LVU6075
 18108 6300 F30F1EFA 		endbr64	
1305:sieve_extend.c ****     
1306:sieve_extend.c ****     bitword_t* bitarray_word     = (bitword_t*)bitarray;
 18109              		.loc 1 1306 5 is_stmt 1 view .LVU6076
 18110              	.LVL1083:
1307:sieve_extend.c ****     bitvector_t* bitarray_vector = (bitvector_t*)bitarray;
 18111              		.loc 1 1307 5 view .LVU6077
1308:sieve_extend.c ****     
1309:sieve_extend.c ****     for (counter_t i=1; i<8*64 && i < max; i+=20) {
 18112              		.loc 1 1309 5 view .LVU6078
 18113              	.LBB992:
 18114              		.loc 1 1309 10 view .LVU6079
 18115              		.loc 1 1309 25 view .LVU6080
 18116              	# sieve_extend.c:1309:     for (counter_t i=1; i<8*64 && i < max; i+=20) {
 18117              		.loc 1 1309 5 is_stmt 0 view .LVU6081
 18118 6304 4883FE01 		cmp	rsi, 1	# max,
 18119 6308 0F86C300 		jbe	.L1485	#,
 18119      0000
 18120              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
1310:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18121              		.loc 1 1310 37 view .LVU6082
 18122 630e 48830F02 		or	QWORD PTR [rdi], 2	# *_3,
 18123              	# sieve_extend.c:1309:     for (counter_t i=1; i<8*64 && i < max; i+=20) {
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18124              		.loc 1 1309 5 view .LVU6083
 18125 6312 4883FE15 		cmp	rsi, 21	# max,
 18126              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18127              		.loc 1 1310 40 view .LVU6084
 18128 6316 B9010000 		mov	ecx, 1	# tmp134,
 18128      00
 18129              		.loc 1 1310 9 is_stmt 1 view .LVU6085
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18130              		.loc 1 1309 44 view .LVU6086
 18131              	# sieve_extend.c:1309:     for (counter_t i=1; i<8*64 && i < max; i+=20) {
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18132              		.loc 1 1309 45 is_stmt 0 view .LVU6087
GAS LISTING /tmp/ccNeV1of.s 			page 484


 18133 631b B8150000 		mov	eax, 21	# i,
 18133      00
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18134              		.loc 1 1309 25 is_stmt 1 view .LVU6088
 18135              	# sieve_extend.c:1309:     for (counter_t i=1; i<8*64 && i < max; i+=20) {
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18136              		.loc 1 1309 5 is_stmt 0 view .LVU6089
 18137 6320 0F86AB00 		jbe	.L1485	#,
 18137      0000
 18138              	.L1486:
 18139              		.loc 1 1310 9 is_stmt 1 discriminator 3 view .LVU6090
 18140              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18141              		.loc 1 1310 37 is_stmt 0 discriminator 3 view .LVU6091
 18142 6326 4889C2   		mov	rdx, rax	# tmp169, i
 18143              	# sieve_extend.c:1309:     for (counter_t i=1; i<8*64 && i < max; i+=20) {
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18144              		.loc 1 1309 45 discriminator 3 view .LVU6092
 18145 6329 4C8D4814 		lea	r9, 20[rax]	# tmp167,
 18146              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18147              		.loc 1 1310 37 discriminator 3 view .LVU6093
 18148 632d 48C1EA06 		shr	rdx, 6	# tmp169,
 18149              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18150              		.loc 1 1310 40 discriminator 3 view .LVU6094
 18151 6331 C462F9F7 		shlx	r8, rcx, rax	# tmp172, tmp134, i
 18151      C1
 18152              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18153              		.loc 1 1310 37 discriminator 3 view .LVU6095
 18154 6336 4C0904D7 		or	QWORD PTR [rdi+rdx*8], r8	# *_3, tmp172
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18155              		.loc 1 1309 44 is_stmt 1 discriminator 3 view .LVU6096
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18156              		.loc 1 1309 25 discriminator 3 view .LVU6097
 18157              	# sieve_extend.c:1309:     for (counter_t i=1; i<8*64 && i < max; i+=20) {
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18158              		.loc 1 1309 5 is_stmt 0 discriminator 3 view .LVU6098
 18159 633a 4981F9FF 		cmp	r9, 511	# tmp167,
 18159      010000
 18160 6341 0F878A00 		ja	.L1485	#,
 18160      0000
 18161 6347 4C39CE   		cmp	rsi, r9	# max, tmp167
 18162 634a 0F868100 		jbe	.L1485	#,
 18162      0000
 18163              		.loc 1 1310 9 is_stmt 1 view .LVU6099
 18164              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18165              		.loc 1 1310 37 is_stmt 0 view .LVU6100
 18166 6350 4D89CA   		mov	r10, r9	# tmp210, tmp167
 18167              	# sieve_extend.c:1309:     for (counter_t i=1; i<8*64 && i < max; i+=20) {
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18168              		.loc 1 1309 45 view .LVU6101
 18169 6353 488D5028 		lea	rdx, 40[rax]	# i,
 18170              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18171              		.loc 1 1310 37 view .LVU6102
 18172 6357 49C1EA06 		shr	r10, 6	# tmp210,
 18173              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18174              		.loc 1 1310 40 view .LVU6103
 18175 635b C462B1F7 		shlx	r11, rcx, r9	# tmp213, tmp134, tmp167
 18175      D9
GAS LISTING /tmp/ccNeV1of.s 			page 485


 18176              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18177              		.loc 1 1310 37 view .LVU6104
 18178 6360 4E091CD7 		or	QWORD PTR [rdi+r10*8], r11	# *_3, tmp213
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18179              		.loc 1 1309 44 is_stmt 1 view .LVU6105
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18180              		.loc 1 1309 25 view .LVU6106
 18181              	# sieve_extend.c:1309:     for (counter_t i=1; i<8*64 && i < max; i+=20) {
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18182              		.loc 1 1309 5 is_stmt 0 view .LVU6107
 18183 6364 4839D6   		cmp	rsi, rdx	# max, i
 18184 6367 7668     		jbe	.L1485	#,
 18185              		.loc 1 1310 9 is_stmt 1 view .LVU6108
 18186              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18187              		.loc 1 1310 37 is_stmt 0 view .LVU6109
 18188 6369 4989D0   		mov	r8, rdx	# tmp217, i
 18189              	# sieve_extend.c:1309:     for (counter_t i=1; i<8*64 && i < max; i+=20) {
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18190              		.loc 1 1309 45 view .LVU6110
 18191 636c 4C8D503C 		lea	r10, 60[rax]	# i,
 18192              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18193              		.loc 1 1310 37 view .LVU6111
 18194 6370 49C1E806 		shr	r8, 6	# tmp217,
 18195              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18196              		.loc 1 1310 40 view .LVU6112
 18197 6374 C462E9F7 		shlx	r9, rcx, rdx	# tmp220, tmp134, i
 18197      C9
 18198              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18199              		.loc 1 1310 37 view .LVU6113
 18200 6379 4E090CC7 		or	QWORD PTR [rdi+r8*8], r9	# *_3, tmp220
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18201              		.loc 1 1309 44 is_stmt 1 view .LVU6114
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18202              		.loc 1 1309 25 view .LVU6115
 18203              	# sieve_extend.c:1309:     for (counter_t i=1; i<8*64 && i < max; i+=20) {
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18204              		.loc 1 1309 5 is_stmt 0 view .LVU6116
 18205 637d 4C39D6   		cmp	rsi, r10	# max, i
 18206 6380 764F     		jbe	.L1485	#,
 18207              		.loc 1 1310 9 is_stmt 1 view .LVU6117
 18208              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18209              		.loc 1 1310 37 is_stmt 0 view .LVU6118
 18210 6382 4D89D3   		mov	r11, r10	# tmp224, i
 18211              	# sieve_extend.c:1309:     for (counter_t i=1; i<8*64 && i < max; i+=20) {
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18212              		.loc 1 1309 45 view .LVU6119
 18213 6385 4C8D4850 		lea	r9, 80[rax]	# i,
 18214              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18215              		.loc 1 1310 37 view .LVU6120
 18216 6389 49C1EB06 		shr	r11, 6	# tmp224,
 18217              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18218              		.loc 1 1310 40 view .LVU6121
 18219 638d C4E2A9F7 		shlx	rdx, rcx, r10	# tmp227, tmp134, i
 18219      D1
 18220              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18221              		.loc 1 1310 37 view .LVU6122
 18222 6392 4A0914DF 		or	QWORD PTR [rdi+r11*8], rdx	# *_3, tmp227
GAS LISTING /tmp/ccNeV1of.s 			page 486


1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18223              		.loc 1 1309 44 is_stmt 1 view .LVU6123
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18224              		.loc 1 1309 25 view .LVU6124
 18225              	# sieve_extend.c:1309:     for (counter_t i=1; i<8*64 && i < max; i+=20) {
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18226              		.loc 1 1309 5 is_stmt 0 view .LVU6125
 18227 6396 4C39CE   		cmp	rsi, r9	# max, i
 18228 6399 7636     		jbe	.L1485	#,
 18229              		.loc 1 1310 9 is_stmt 1 view .LVU6126
 18230              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18231              		.loc 1 1310 37 is_stmt 0 view .LVU6127
 18232 639b 4D89C8   		mov	r8, r9	# tmp231, i
 18233              	# sieve_extend.c:1309:     for (counter_t i=1; i<8*64 && i < max; i+=20) {
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18234              		.loc 1 1309 45 view .LVU6128
 18235 639e 4C8D5864 		lea	r11, 100[rax]	# i,
 18236              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18237              		.loc 1 1310 37 view .LVU6129
 18238 63a2 49C1E806 		shr	r8, 6	# tmp231,
 18239              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18240              		.loc 1 1310 40 view .LVU6130
 18241 63a6 C462B1F7 		shlx	r10, rcx, r9	# tmp234, tmp134, i
 18241      D1
 18242              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18243              		.loc 1 1310 37 view .LVU6131
 18244 63ab 4E0914C7 		or	QWORD PTR [rdi+r8*8], r10	# *_3, tmp234
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18245              		.loc 1 1309 44 is_stmt 1 view .LVU6132
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18246              		.loc 1 1309 25 view .LVU6133
 18247              	# sieve_extend.c:1309:     for (counter_t i=1; i<8*64 && i < max; i+=20) {
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18248              		.loc 1 1309 5 is_stmt 0 view .LVU6134
 18249 63af 4C39DE   		cmp	rsi, r11	# max, i
 18250 63b2 761D     		jbe	.L1485	#,
 18251              		.loc 1 1310 9 is_stmt 1 view .LVU6135
 18252              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18253              		.loc 1 1310 37 is_stmt 0 view .LVU6136
 18254 63b4 4D89D9   		mov	r9, r11	# tmp238, i
 18255              	# sieve_extend.c:1309:     for (counter_t i=1; i<8*64 && i < max; i+=20) {
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18256              		.loc 1 1309 45 view .LVU6137
 18257 63b7 4883C078 		add	rax, 120	# i,
 18258              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18259              		.loc 1 1310 37 view .LVU6138
 18260 63bb 49C1E906 		shr	r9, 6	# tmp238,
 18261              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18262              		.loc 1 1310 40 view .LVU6139
 18263 63bf C4E2A1F7 		shlx	rdx, rcx, r11	# tmp241, tmp134, i
 18263      D1
 18264              	# sieve_extend.c:1310:         bitarray_word[wordindex(i)] |= markmask(i);
 18265              		.loc 1 1310 37 view .LVU6140
 18266 63c4 4A0914CF 		or	QWORD PTR [rdi+r9*8], rdx	# *_3, tmp241
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18267              		.loc 1 1309 44 is_stmt 1 view .LVU6141
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
GAS LISTING /tmp/ccNeV1of.s 			page 487


 18268              		.loc 1 1309 25 view .LVU6142
 18269              	# sieve_extend.c:1309:     for (counter_t i=1; i<8*64 && i < max; i+=20) {
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18270              		.loc 1 1309 5 is_stmt 0 view .LVU6143
 18271 63c8 4839C6   		cmp	rsi, rax	# max, i
 18272 63cb 0F8755FF 		ja	.L1486	#,
 18272      FFFF
 18273              	.LVL1084:
 18274              	.L1485:
1309:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18275              		.loc 1 1309 5 view .LVU6144
 18276              	.LBE992:
1311:sieve_extend.c ****     }
1312:sieve_extend.c **** 
1313:sieve_extend.c ****     counter_t source_start = 66+64;
 18277              		.loc 1 1313 5 is_stmt 1 view .LVU6145
1314:sieve_extend.c ****     counter_t destination_start = 3*4*64 + 12;
 18278              		.loc 1 1314 5 view .LVU6146
1315:sieve_extend.c ****     bitarray_word[wordindex(source_start)]  |= markmask_calc(source_start);
 18279              		.loc 1 1315 5 view .LVU6147
1316:sieve_extend.c ****     bitarray_word[wordindex(source_start+1)]  |= markmask_calc(source_start+1);
 18280              		.loc 1 1316 5 view .LVU6148
 18281              	# sieve_extend.c:1316:     bitarray_word[wordindex(source_start+1)]  |= markmask_calc(source_start+
 18282              		.loc 1 1316 47 is_stmt 0 view .LVU6149
 18283 63d1 48834F10 		or	QWORD PTR 16[rdi], 12	# MEM[(uint64_t *)bitarray_29(D) + 16B],
 18283      0C
1317:sieve_extend.c **** 
1318:sieve_extend.c **** 
1319:sieve_extend.c ****     counter_t source_vector = vectorindex(source_start);
 18284              		.loc 1 1319 5 is_stmt 1 view .LVU6150
 18285              	.LVL1085:
1320:sieve_extend.c ****     counter_t delta_word   = 4-((wordindex(destination_start) - wordindex(source_start)) % 4);
 18286              		.loc 1 1320 5 view .LVU6151
1321:sieve_extend.c ****     int32_t delta_bit    = bitindex_calc(destination_start) - bitindex_calc(source_start); // could
 18287              		.loc 1 1321 5 view .LVU6152
1322:sieve_extend.c ****     
1323:sieve_extend.c ****     bitshift_t shift_bit = delta_bit; 
 18288              		.loc 1 1323 5 view .LVU6153
1324:sieve_extend.c ****     bitshift_t shift_bit_flipped = WORD_SIZE_bitshift - shift_bit; 
 18289              		.loc 1 1324 5 view .LVU6154
1325:sieve_extend.c **** 
1326:sieve_extend.c **** //    if (delta_bit) ....
1327:sieve_extend.c **** 
1328:sieve_extend.c ****     const bitvector_t shuffle1 = { delta_word-1, delta_word, delta_word+1, delta_word+2 };
 18290              		.loc 1 1328 5 view .LVU6155
1329:sieve_extend.c ****     const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2, delta_word+3 };
 18291              		.loc 1 1329 5 view .LVU6156
1330:sieve_extend.c ****     const bitvector_t shift = { shift_bit, shift_bit, shift_bit, shift_bit };
 18292              		.loc 1 1330 5 view .LVU6157
1331:sieve_extend.c ****     const bitvector_t shift_flipped = { shift_bit_flipped, shift_bit_flipped, shift_bit_flipped, sh
 18293              		.loc 1 1331 5 view .LVU6158
1332:sieve_extend.c **** 
1333:sieve_extend.c ****     for (counter_t copy_vector = 3; copy_vector<400; copy_vector++, source_vector++ ) {
 18294              		.loc 1 1333 5 view .LVU6159
 18295              	.LBB993:
 18296              		.loc 1 1333 10 view .LVU6160
 18297              		.loc 1 1333 37 view .LVU6161
GAS LISTING /tmp/ccNeV1of.s 			page 488


 18298 63d6 488D7760 		lea	rsi, 96[rdi]	# ivtmp.766,
 18299              	.LVL1086:
 18300              		.loc 1 1333 37 is_stmt 0 view .LVU6162
 18301 63da C57D6F47 		vmovdqa	ymm8, YMMWORD PTR 32[rdi]	# D__lsm1.740, MEM[(bitvector_t *)bitarray_29(D) + 32B]
 18301      20
 18302              	# sieve_extend.c:1333:     for (counter_t copy_vector = 3; copy_vector<400; copy_vector++, source_v
 18303              		.loc 1 1333 20 view .LVU6163
 18304 63df B8030000 		mov	eax, 3	# copy_vector,
 18304      00
 18305 63e4 C57D6F67 		vmovdqa	ymm12, YMMWORD PTR 64[rdi]	# D__lsm2.741, MEM[(bitvector_t *)bitarray_29(D) + 64B]
 18305      40
 18306 63e9 C5FD6F27 		vmovdqa	ymm4, YMMWORD PTR [rdi]	# D__lsm0.739, MEM[(bitvector_t *)bitarray_29(D)]
 18307              	.LVL1087:
 18308              	.L1488:
 18309              	.LBB994:
1334:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18310              		.loc 1 1334 9 is_stmt 1 discriminator 3 view .LVU6164
1335:sieve_extend.c ****         bitvector_t source1 = bitarray_vector[source_vector+1];
 18311              		.loc 1 1335 9 discriminator 3 view .LVU6165
1336:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18312              		.loc 1 1336 9 discriminator 3 view .LVU6166
1337:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18313              		.loc 1 1337 9 discriminator 3 view .LVU6167
1338:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18314              		.loc 1 1338 9 discriminator 3 view .LVU6168
 18315              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18316              		.loc 1 1336 29 is_stmt 0 discriminator 3 view .LVU6169
 18317 63ed C4C35D46 		vperm2i128	ymm3, ymm4, ymm8, 33	# tmp140, D__lsm0.739, D__lsm1.740,
 18317      D821
 18318 63f3 C4C33D46 		vperm2i128	ymm7, ymm8, ymm12, 33	# tmp146, D__lsm1.740, D__lsm2.741,
 18318      FC21
 18319 63f9 C4E3650F 		vpalignr	ymm2, ymm3, ymm4, 8	# tmp141, tmp140, D__lsm0.739,
 18319      D408
 18320              	# sieve_extend.c:1337:         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << s
1337:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18321              		.loc 1 1337 21 discriminator 3 view .LVU6170
 18322 63ff C5D573F3 		vpsllq	ymm5, ymm3, 10	# dest2, tmp140,
 18322      0A
 18323              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18324              		.loc 1 1336 21 discriminator 3 view .LVU6171
 18325 6404 C5DD73D2 		vpsrlq	ymm4, ymm2, 54	# dest1, tmp141,
 18325      36
 18326              	.LVL1088:
 18327              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18328              		.loc 1 1338 46 discriminator 3 view .LVU6172
 18329 6409 C5DDEBF5 		vpor	ymm6, ymm4, ymm5	# D__lsm0.739, dest1, dest2
 18330              	# sieve_extend.c:1337:         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << s
1337:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18331              		.loc 1 1337 21 discriminator 3 view .LVU6173
 18332 640d C5B573F7 		vpsllq	ymm9, ymm7, 10	# dest2, tmp146,
 18332      0A
 18333              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18334              		.loc 1 1336 29 discriminator 3 view .LVU6174
 18335 6412 C4C3450F 		vpalignr	ymm1, ymm7, ymm8, 8	# tmp147, tmp146, D__lsm1.740,
GAS LISTING /tmp/ccNeV1of.s 			page 489


 18335      C808
 18336 6418 C4631D46 		vperm2i128	ymm11, ymm12, ymm6, 33	# tmp152, D__lsm2.741, D__lsm0.739,
 18336      DE21
 18337              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18338              		.loc 1 1336 21 discriminator 3 view .LVU6175
 18339 641e C5BD73D1 		vpsrlq	ymm8, ymm1, 54	# dest1, tmp147,
 18339      36
 18340              	.LVL1089:
 18341              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18342              		.loc 1 1336 29 discriminator 3 view .LVU6176
 18343 6423 C4C3250F 		vpalignr	ymm0, ymm11, ymm12, 8	# tmp153, tmp152, D__lsm2.741,
 18343      C408
 18344              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18345              		.loc 1 1338 46 discriminator 3 view .LVU6177
 18346 6429 C4413DEB 		vpor	ymm10, ymm8, ymm9	# D__lsm1.740, dest1, dest2
 18346      D1
 18347              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18348              		.loc 1 1336 21 discriminator 3 view .LVU6178
 18349 642e C59D73D0 		vpsrlq	ymm12, ymm0, 54	# dest1, tmp153,
 18349      36
 18350              	# sieve_extend.c:1337:         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << s
1337:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18351              		.loc 1 1337 21 discriminator 3 view .LVU6179
 18352 6433 C4C11573 		vpsllq	ymm13, ymm11, 10	# dest2, tmp152,
 18352      F30A
 18353              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18354              		.loc 1 1336 29 discriminator 3 view .LVU6180
 18355 6439 C4434D46 		vperm2i128	ymm15, ymm6, ymm10, 33	# tmp181, D__lsm0.739, D__lsm1.740,
 18355      FA21
 18356              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18357              		.loc 1 1338 46 discriminator 3 view .LVU6181
 18358 643f C4411DEB 		vpor	ymm14, ymm12, ymm13	# D__lsm2.741, dest1, dest2
 18358      F5
 18359              	# sieve_extend.c:1337:         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << s
1337:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18360              		.loc 1 1337 21 discriminator 3 view .LVU6182
 18361 6444 C4C15D73 		vpsllq	ymm4, ymm15, 10	# dest2, tmp181,
 18361      F70A
 18362              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18363              		.loc 1 1338 38 discriminator 3 view .LVU6183
 18364 644a C5FD7F36 		vmovdqa	YMMWORD PTR [rsi], ymm6	# MEM[base: _134, offset: 0B], D__lsm0.739
 18365              	.LBE994:
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18366              		.loc 1 1333 54 is_stmt 1 discriminator 3 view .LVU6184
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18367              		.loc 1 1333 37 discriminator 3 view .LVU6185
 18368              	.LBB995:
1334:sieve_extend.c ****         bitvector_t source1 = bitarray_vector[source_vector+1];
 18369              		.loc 1 1334 9 discriminator 3 view .LVU6186
1335:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18370              		.loc 1 1335 9 discriminator 3 view .LVU6187
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18371              		.loc 1 1336 9 discriminator 3 view .LVU6188
GAS LISTING /tmp/ccNeV1of.s 			page 490


1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18372              		.loc 1 1337 9 discriminator 3 view .LVU6189
 18373              		.loc 1 1338 9 discriminator 3 view .LVU6190
 18374              	.LBE995:
 18375              	# sieve_extend.c:1333:     for (counter_t copy_vector = 3; copy_vector<400; copy_vector++, source_v
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18376              		.loc 1 1333 65 is_stmt 0 discriminator 3 view .LVU6191
 18377 644e 4883C009 		add	rax, 9	# copy_vector,
 18378              	.LBB996:
 18379              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18380              		.loc 1 1336 29 discriminator 3 view .LVU6192
 18381 6452 C4E3050F 		vpalignr	ymm3, ymm15, ymm6, 8	# tmp182, tmp181, D__lsm0.739,
 18381      DE08
 18382 6458 C4C32D46 		vperm2i128	ymm6, ymm10, ymm14, 33	# tmp186, D__lsm1.740, D__lsm2.741,
 18382      F621
 18383              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18384              		.loc 1 1336 21 discriminator 3 view .LVU6193
 18385 645e C5ED73D3 		vpsrlq	ymm2, ymm3, 54	# dest1, tmp182,
 18385      36
 18386              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18387              		.loc 1 1336 29 discriminator 3 view .LVU6194
 18388 6463 C4C34D0F 		vpalignr	ymm7, ymm6, ymm10, 8	# tmp187, tmp186, D__lsm1.740,
 18388      FA08
 18389              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18390              		.loc 1 1338 46 discriminator 3 view .LVU6195
 18391 6469 C5EDEBEC 		vpor	ymm5, ymm2, ymm4	# D__lsm0.739, dest1, dest2
 18392              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18393              		.loc 1 1336 21 discriminator 3 view .LVU6196
 18394 646d C5F573D7 		vpsrlq	ymm1, ymm7, 54	# dest1, tmp187,
 18394      36
 18395              	# sieve_extend.c:1337:         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << s
1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18396              		.loc 1 1337 21 discriminator 3 view .LVU6197
 18397 6472 C5BD73F6 		vpsllq	ymm8, ymm6, 10	# dest2, tmp186,
 18397      0A
 18398 6477 488D8EC0 		lea	rcx, 192[rsi]	# ivtmp.766,
 18398      000000
 18399              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18400              		.loc 1 1338 38 discriminator 3 view .LVU6198
 18401 647e C57D7F56 		vmovdqa	YMMWORD PTR 32[rsi], ymm10	# MEM[base: _134, offset: 32B], D__lsm1.740
 18401      20
 18402              	.LBE996:
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18403              		.loc 1 1333 54 is_stmt 1 discriminator 3 view .LVU6199
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18404              		.loc 1 1333 37 discriminator 3 view .LVU6200
 18405              	.LBB997:
1334:sieve_extend.c ****         bitvector_t source1 = bitarray_vector[source_vector+1];
 18406              		.loc 1 1334 9 discriminator 3 view .LVU6201
1335:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18407              		.loc 1 1335 9 discriminator 3 view .LVU6202
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18408              		.loc 1 1336 9 discriminator 3 view .LVU6203
GAS LISTING /tmp/ccNeV1of.s 			page 491


1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18409              		.loc 1 1337 9 discriminator 3 view .LVU6204
 18410              		.loc 1 1338 9 discriminator 3 view .LVU6205
 18411              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18412              		.loc 1 1338 46 is_stmt 0 discriminator 3 view .LVU6206
 18413 6483 C44175EB 		vpor	ymm9, ymm1, ymm8	# D__lsm1.740, dest1, dest2
 18413      C8
 18414              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18415              		.loc 1 1336 29 discriminator 3 view .LVU6207
 18416 6488 C4630D46 		vperm2i128	ymm10, ymm14, ymm5, 33	# tmp191, D__lsm2.741, D__lsm0.739,
 18416      D521
 18417 648e 4881C620 		add	rsi, 288	# ivtmp.766,
 18417      010000
 18418              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18419              		.loc 1 1338 38 discriminator 3 view .LVU6208
 18420 6495 C57D7FB6 		vmovdqa	YMMWORD PTR -224[rsi], ymm14	# MEM[base: _134, offset: 64B], D__lsm2.741
 18420      20FFFFFF 
 18421              	.LBE997:
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18422              		.loc 1 1333 54 is_stmt 1 discriminator 3 view .LVU6209
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18423              		.loc 1 1333 37 discriminator 3 view .LVU6210
 18424              	.LBB998:
1334:sieve_extend.c ****         bitvector_t source1 = bitarray_vector[source_vector+1];
 18425              		.loc 1 1334 9 discriminator 3 view .LVU6211
1335:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18426              		.loc 1 1335 9 discriminator 3 view .LVU6212
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18427              		.loc 1 1336 9 discriminator 3 view .LVU6213
1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18428              		.loc 1 1337 9 discriminator 3 view .LVU6214
 18429              		.loc 1 1338 9 discriminator 3 view .LVU6215
 18430              	# sieve_extend.c:1337:         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << s
1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18431              		.loc 1 1337 21 is_stmt 0 discriminator 3 view .LVU6216
 18432 649d C4C11D73 		vpsllq	ymm12, ymm10, 10	# dest2, tmp191,
 18432      F20A
 18433              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18434              		.loc 1 1336 29 discriminator 3 view .LVU6217
 18435 64a3 C4432D0F 		vpalignr	ymm11, ymm10, ymm14, 8	# tmp192, tmp191, D__lsm2.741,
 18435      DE08
 18436 64a9 C4435546 		vperm2i128	ymm14, ymm5, ymm9, 33	# tmp198, D__lsm0.739, D__lsm1.740,
 18436      F121
 18437              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18438              		.loc 1 1336 21 discriminator 3 view .LVU6218
 18439 64af C4C17D73 		vpsrlq	ymm0, ymm11, 54	# dest1, tmp192,
 18439      D336
 18440              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18441              		.loc 1 1336 29 discriminator 3 view .LVU6219
 18442 64b5 C4630D0F 		vpalignr	ymm15, ymm14, ymm5, 8	# tmp199, tmp198, D__lsm0.739,
 18442      FD08
 18443              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18444              		.loc 1 1338 46 discriminator 3 view .LVU6220
GAS LISTING /tmp/ccNeV1of.s 			page 492


 18445 64bb C4417DEB 		vpor	ymm13, ymm0, ymm12	# D__lsm2.741, dest1, dest2
 18445      EC
 18446              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18447              		.loc 1 1336 21 discriminator 3 view .LVU6221
 18448 64c0 C4C16D73 		vpsrlq	ymm2, ymm15, 54	# dest1, tmp199,
 18448      D736
 18449              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18450              		.loc 1 1338 38 discriminator 3 view .LVU6222
 18451 64c6 C5FD7FAE 		vmovdqa	YMMWORD PTR -192[rsi], ymm5	# MEM[base: _134, offset: 0B], D__lsm0.739
 18451      40FFFFFF 
 18452              	.LBE998:
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18453              		.loc 1 1333 54 is_stmt 1 discriminator 3 view .LVU6223
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18454              		.loc 1 1333 37 discriminator 3 view .LVU6224
 18455              	.LBB999:
1334:sieve_extend.c ****         bitvector_t source1 = bitarray_vector[source_vector+1];
 18456              		.loc 1 1334 9 discriminator 3 view .LVU6225
1335:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18457              		.loc 1 1335 9 discriminator 3 view .LVU6226
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18458              		.loc 1 1336 9 discriminator 3 view .LVU6227
1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18459              		.loc 1 1337 9 discriminator 3 view .LVU6228
 18460              		.loc 1 1338 9 discriminator 3 view .LVU6229
 18461              	# sieve_extend.c:1337:         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << s
1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18462              		.loc 1 1337 21 is_stmt 0 discriminator 3 view .LVU6230
 18463 64ce C4C16573 		vpsllq	ymm3, ymm14, 10	# dest2, tmp198,
 18463      F60A
 18464              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18465              		.loc 1 1336 29 discriminator 3 view .LVU6231
 18466 64d4 C4C33546 		vperm2i128	ymm5, ymm9, ymm13, 33	# tmp202, D__lsm1.740, D__lsm2.741,
 18466      ED21
 18467              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18468              		.loc 1 1338 46 discriminator 3 view .LVU6232
 18469 64da C5EDEBE3 		vpor	ymm4, ymm2, ymm3	# D__lsm0.739, dest1, dest2
 18470              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18471              		.loc 1 1338 38 discriminator 3 view .LVU6233
 18472 64de C57D7F8E 		vmovdqa	YMMWORD PTR -160[rsi], ymm9	# MEM[base: _134, offset: 32B], D__lsm1.740
 18472      60FFFFFF 
 18473              	.LBE999:
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18474              		.loc 1 1333 54 is_stmt 1 discriminator 3 view .LVU6234
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18475              		.loc 1 1333 37 discriminator 3 view .LVU6235
 18476              	.LBB1000:
1334:sieve_extend.c ****         bitvector_t source1 = bitarray_vector[source_vector+1];
 18477              		.loc 1 1334 9 discriminator 3 view .LVU6236
1335:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18478              		.loc 1 1335 9 discriminator 3 view .LVU6237
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18479              		.loc 1 1336 9 discriminator 3 view .LVU6238
1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18480              		.loc 1 1337 9 discriminator 3 view .LVU6239
GAS LISTING /tmp/ccNeV1of.s 			page 493


 18481              		.loc 1 1338 9 discriminator 3 view .LVU6240
 18482              	# sieve_extend.c:1337:         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << s
1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18483              		.loc 1 1337 21 is_stmt 0 discriminator 3 view .LVU6241
 18484 64e6 C5F573F5 		vpsllq	ymm1, ymm5, 10	# dest2, tmp202,
 18484      0A
 18485              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18486              		.loc 1 1336 29 discriminator 3 view .LVU6242
 18487 64eb C4C3550F 		vpalignr	ymm6, ymm5, ymm9, 8	# tmp203, tmp202, D__lsm1.740,
 18487      F108
 18488 64f1 C4631546 		vperm2i128	ymm9, ymm13, ymm4, 33	# tmp206, D__lsm2.741, D__lsm0.739,
 18488      CC21
 18489              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18490              		.loc 1 1336 21 discriminator 3 view .LVU6243
 18491 64f7 C5C573D6 		vpsrlq	ymm7, ymm6, 54	# dest1, tmp203,
 18491      36
 18492              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18493              		.loc 1 1336 29 discriminator 3 view .LVU6244
 18494 64fc C443350F 		vpalignr	ymm10, ymm9, ymm13, 8	# tmp207, tmp206, D__lsm2.741,
 18494      D508
 18495              	# sieve_extend.c:1337:         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << s
1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18496              		.loc 1 1337 21 discriminator 3 view .LVU6245
 18497 6502 C4C17D73 		vpsllq	ymm0, ymm9, 10	# dest2, tmp206,
 18497      F10A
 18498              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18499              		.loc 1 1336 21 discriminator 3 view .LVU6246
 18500 6508 C4C12573 		vpsrlq	ymm11, ymm10, 54	# dest1, tmp207,
 18500      D236
 18501              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18502              		.loc 1 1338 38 discriminator 3 view .LVU6247
 18503 650e C57D7F6E 		vmovdqa	YMMWORD PTR -128[rsi], ymm13	# MEM[base: _134, offset: 64B], D__lsm2.741
 18503      80
 18504              	.LBE1000:
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18505              		.loc 1 1333 54 is_stmt 1 discriminator 3 view .LVU6248
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18506              		.loc 1 1333 37 discriminator 3 view .LVU6249
 18507              	.LBB1001:
1334:sieve_extend.c ****         bitvector_t source1 = bitarray_vector[source_vector+1];
 18508              		.loc 1 1334 9 discriminator 3 view .LVU6250
1335:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18509              		.loc 1 1335 9 discriminator 3 view .LVU6251
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18510              		.loc 1 1336 9 discriminator 3 view .LVU6252
1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18511              		.loc 1 1337 9 discriminator 3 view .LVU6253
 18512              		.loc 1 1338 9 discriminator 3 view .LVU6254
 18513              	.LVL1090:
 18514              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18515              		.loc 1 1338 46 is_stmt 0 discriminator 3 view .LVU6255
 18516 6513 C545EBC1 		vpor	ymm8, ymm7, ymm1	# D__lsm1.740, dest1, dest2
 18517              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
GAS LISTING /tmp/ccNeV1of.s 			page 494


 18518              		.loc 1 1338 38 discriminator 3 view .LVU6256
 18519 6517 C5FD7F66 		vmovdqa	YMMWORD PTR -96[rsi], ymm4	# MEM[base: _134, offset: 0B], D__lsm0.739
 18519      A0
 18520              	.LBE1001:
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18521              		.loc 1 1333 54 is_stmt 1 discriminator 3 view .LVU6257
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18522              		.loc 1 1333 37 discriminator 3 view .LVU6258
 18523              	.LBB1002:
1334:sieve_extend.c ****         bitvector_t source1 = bitarray_vector[source_vector+1];
 18524              		.loc 1 1334 9 discriminator 3 view .LVU6259
 18525              	.LVL1091:
1335:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18526              		.loc 1 1335 9 discriminator 3 view .LVU6260
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18527              		.loc 1 1336 9 discriminator 3 view .LVU6261
1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18528              		.loc 1 1337 9 discriminator 3 view .LVU6262
 18529              		.loc 1 1338 9 discriminator 3 view .LVU6263
 18530              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18531              		.loc 1 1338 46 is_stmt 0 discriminator 3 view .LVU6264
 18532 651c C525EBE0 		vpor	ymm12, ymm11, ymm0	# D__lsm2.741, dest1, dest2
 18533              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18534              		.loc 1 1338 38 discriminator 3 view .LVU6265
 18535 6520 C57D7F41 		vmovdqa	YMMWORD PTR 32[rcx], ymm8	# MEM[base: _134, offset: 32B], D__lsm1.740
 18535      20
 18536              	.LBE1002:
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18537              		.loc 1 1333 54 is_stmt 1 discriminator 3 view .LVU6266
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18538              		.loc 1 1333 37 discriminator 3 view .LVU6267
 18539              	.LBB1003:
1334:sieve_extend.c ****         bitvector_t source1 = bitarray_vector[source_vector+1];
 18540              		.loc 1 1334 9 discriminator 3 view .LVU6268
 18541              	.LVL1092:
1335:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18542              		.loc 1 1335 9 discriminator 3 view .LVU6269
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18543              		.loc 1 1336 9 discriminator 3 view .LVU6270
1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18544              		.loc 1 1337 9 discriminator 3 view .LVU6271
 18545              		.loc 1 1338 9 discriminator 3 view .LVU6272
 18546              		.loc 1 1338 9 is_stmt 0 discriminator 3 view .LVU6273
 18547 6525 483D8F01 		cmp	rax, 399	# copy_vector,
 18547      0000
 18548              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18549              		.loc 1 1338 38 discriminator 3 view .LVU6274
 18550 652b C57D7F61 		vmovdqa	YMMWORD PTR 64[rcx], ymm12	# MEM[base: _134, offset: 64B], D__lsm2.741
 18550      40
 18551              	.LBE1003:
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18552              		.loc 1 1333 54 is_stmt 1 discriminator 3 view .LVU6275
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18553              		.loc 1 1333 37 discriminator 3 view .LVU6276
 18554 6530 0F85B7FE 		jne	.L1488	#,
 18554      FFFF
 18555 6536 4C8D8780 		lea	r8, 12672[rdi]	# ivtmp.751,
GAS LISTING /tmp/ccNeV1of.s 			page 495


 18555      310000
 18556 653d 488DBFA0 		lea	rdi, 12704[rdi]	# _24,
 18556      310000
 18557              	.LVL1093:
 18558 6544 66662E0F 		.p2align 4
 18558      1F840000 
 18558      00000090 
 18559              		.p2align 3
 18560              	.L1489:
 18561              	.LBB1004:
1334:sieve_extend.c ****         bitvector_t source1 = bitarray_vector[source_vector+1];
 18562              		.loc 1 1334 9 view .LVU6277
1335:sieve_extend.c ****         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> shift_flipped;
 18563              		.loc 1 1335 9 view .LVU6278
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18564              		.loc 1 1336 9 view .LVU6279
1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18565              		.loc 1 1337 9 view .LVU6280
 18566              		.loc 1 1338 9 view .LVU6281
 18567              	# sieve_extend.c:1337:         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << s
1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18568              		.loc 1 1337 29 is_stmt 0 view .LVU6282
 18569 6550 C4417D6F 		vmovdqa	ymm13, YMMWORD PTR [r8]	# tmp247, MEM[base: _102, offset: 0B]
 18569      28
 18570 6555 4983C020 		add	r8, 32	# ivtmp.751,
 18571              	.LVL1094:
1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18572              		.loc 1 1337 29 view .LVU6283
 18573 6559 C4431546 		vperm2i128	ymm14, ymm13, YMMWORD PTR [r8], 33	# tmp158, tmp247, MEM[base: _102, offset: 32B],
 18573      3021
 18574              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18575              		.loc 1 1336 29 view .LVU6284
 18576 655f C4C30D0F 		vpalignr	ymm2, ymm14, YMMWORD PTR -32[r8], 8	# tmp162, tmp158, MEM[base: _102, offset: 0B],
 18576      50E008
 18577              	# sieve_extend.c:1337:         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << s
1337:sieve_extend.c ****         bitarray_vector[copy_vector] = dest1 | dest2;
 18578              		.loc 1 1337 21 view .LVU6285
 18579 6566 C4C10573 		vpsllq	ymm15, ymm14, 10	# dest2, tmp158,
 18579      F60A
 18580              	# sieve_extend.c:1336:         bitvector_t dest1 = __builtin_shuffle(source0,source1,shuffle1) >> s
1336:sieve_extend.c ****         bitvector_t dest2 = __builtin_shuffle(source0,source1,shuffle2) << shift;
 18581              		.loc 1 1336 21 view .LVU6286
 18582 656c C5E573D2 		vpsrlq	ymm3, ymm2, 54	# dest1, tmp162,
 18582      36
 18583              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18584              		.loc 1 1338 46 view .LVU6287
 18585 6571 C585EBE3 		vpor	ymm4, ymm15, ymm3	# tmp164, dest2, dest1
 18586              	# sieve_extend.c:1338:         bitarray_vector[copy_vector] = dest1 | dest2;
 18587              		.loc 1 1338 38 view .LVU6288
 18588 6575 C4C17D7F 		vmovdqa	YMMWORD PTR 64[r8], ymm4	# MEM[base: _84, offset: 12768B], tmp164
 18588      6040
 18589              	.LBE1004:
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18590              		.loc 1 1333 54 is_stmt 1 view .LVU6289
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18591              		.loc 1 1333 37 view .LVU6290
GAS LISTING /tmp/ccNeV1of.s 			page 496


 18592              	# sieve_extend.c:1333:     for (counter_t copy_vector = 3; copy_vector<400; copy_vector++, source_v
1333:sieve_extend.c ****         bitvector_t source0 = bitarray_vector[source_vector];
 18593              		.loc 1 1333 5 is_stmt 0 view .LVU6291
 18594 657b 4C39C7   		cmp	rdi, r8	# _24, ivtmp.751
 18595 657e 75D0     		jne	.L1489	#,
 18596 6580 C5F877   		vzeroupper
 18597              	.LBE993:
 18598              	# sieve_extend.c:1340: }
1339:sieve_extend.c ****     }
1340:sieve_extend.c **** }
 18599              		.loc 1 1340 1 view .LVU6292
 18600 6583 C3       		ret	
 18601              		.cfi_endproc
 18602              	.LFE96:
 18604 6584 66662E0F 		.p2align 4
 18604      1F840000 
 18604      00000090 
 18605              		.globl	testshuffle_vector2
 18607              	testshuffle_vector2:
 18608              	.LFB109:
 18609              		.cfi_startproc
 18610 6590 F30F1EFA 		endbr64	
 18611 6594 E967FDFF 		jmp	testshuffle_vector	#
 18611      FF
 18612              		.cfi_endproc
 18613              	.LFE109:
 18615 6599 0F1F8000 		.p2align 4
 18615      000000
 18616              		.globl	testshuffle_word
 18618              	testshuffle_word:
 18619              	.LVL1095:
 18620              	.LFB98:
1341:sieve_extend.c **** 
1342:sieve_extend.c **** void testshuffle_vector2(bitword_t* __restrict bitarray, counter_t max) {
1343:sieve_extend.c ****     
1344:sieve_extend.c ****     bitword_t* bitarray_word     = (bitword_t*)bitarray;
1345:sieve_extend.c ****     bitvector_t* bitarray_vector = (bitvector_t*)bitarray;
1346:sieve_extend.c **** 
1347:sieve_extend.c ****     for (counter_t i=1; i<8*64 && i < max; i+=20) {
1348:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
1349:sieve_extend.c ****     }
1350:sieve_extend.c **** 
1351:sieve_extend.c ****     counter_t source_start = 66+64;
1352:sieve_extend.c ****     counter_t destination_start = 3*4*64 + 12;
1353:sieve_extend.c ****     bitarray_word[wordindex(source_start)]  |= markmask_calc(source_start);
1354:sieve_extend.c ****     bitarray_word[wordindex(source_start+1)]  |= markmask_calc(source_start+1);
1355:sieve_extend.c **** 
1356:sieve_extend.c **** 
1357:sieve_extend.c ****     counter_t source_vector = vectorindex(source_start);
1358:sieve_extend.c ****     counter_t delta_word   = 4-((wordindex(destination_start) - wordindex(source_start)) % 4);
1359:sieve_extend.c ****     int32_t delta_bit    = bitindex_calc(destination_start) - bitindex_calc(source_start); // could
1360:sieve_extend.c ****     
1361:sieve_extend.c ****     bitshift_t shift_bit = delta_bit; 
1362:sieve_extend.c ****     bitshift_t shift_bit_flipped = WORD_SIZE_bitshift - shift_bit; 
1363:sieve_extend.c **** 
1364:sieve_extend.c **** //    if (delta_bit) ....
1365:sieve_extend.c **** 
GAS LISTING /tmp/ccNeV1of.s 			page 497


1366:sieve_extend.c ****     register const bitvector_t shuffle1 = { delta_word-1, delta_word, delta_word+1, delta_word+2 };
1367:sieve_extend.c ****     register const bitvector_t shuffle2 = { delta_word, delta_word+1, delta_word+2, delta_word+3 };
1368:sieve_extend.c ****     register const bitvector_t shift = { shift_bit, shift_bit, shift_bit, shift_bit };
1369:sieve_extend.c ****     register const bitvector_t shift_flipped = { shift_bit_flipped, shift_bit_flipped, shift_bit_fl
1370:sieve_extend.c **** 
1371:sieve_extend.c ****     for (counter_t copy_vector = 3; copy_vector<400; copy_vector++, source_vector++ ) {
1372:sieve_extend.c ****         register bitvector_t source0 = bitarray_vector[source_vector];
1373:sieve_extend.c ****         register bitvector_t source1 = bitarray_vector[source_vector+1];
1374:sieve_extend.c ****         bitarray_vector[copy_vector] = (__builtin_shuffle(source0,source1,shuffle1) >> shift_flippe
1375:sieve_extend.c ****     }
1376:sieve_extend.c **** }
1377:sieve_extend.c **** 
1378:sieve_extend.c **** void testshuffle_word(bitword_t* __restrict bitarray, counter_t max) {
 18621              		.loc 1 1378 70 is_stmt 1 view -0
 18622              		.cfi_startproc
 18623              		.loc 1 1378 70 is_stmt 0 view .LVU6294
 18624 65a0 F30F1EFA 		endbr64	
1379:sieve_extend.c ****     
1380:sieve_extend.c ****     bitword_t* bitarray_word     = (bitword_t*)bitarray;
 18625              		.loc 1 1380 5 is_stmt 1 view .LVU6295
 18626              	.LVL1096:
1381:sieve_extend.c **** 
1382:sieve_extend.c ****     for (counter_t i=1; i<8*64 && i<max; i+=20) {
 18627              		.loc 1 1382 5 view .LVU6296
 18628              	.LBB1005:
 18629              		.loc 1 1382 10 view .LVU6297
 18630              		.loc 1 1382 25 view .LVU6298
 18631              	.LBE1005:
 18632              	# sieve_extend.c:1378: void testshuffle_word(bitword_t* __restrict bitarray, counter_t max) {
1378:sieve_extend.c ****     
 18633              		.loc 1 1378 70 is_stmt 0 view .LVU6299
 18634 65a4 4157     		push	r15	#
 18635              		.cfi_def_cfa_offset 16
 18636              		.cfi_offset 15, -16
 18637              	.LBB1006:
 18638              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
 18639              		.loc 1 1382 5 view .LVU6300
 18640 65a6 4883FE01 		cmp	rsi, 1	# max,
 18641              	.LBE1006:
 18642              	# sieve_extend.c:1378: void testshuffle_word(bitword_t* __restrict bitarray, counter_t max) {
1378:sieve_extend.c ****     
 18643              		.loc 1 1378 70 view .LVU6301
 18644 65aa 4156     		push	r14	#
 18645              		.cfi_def_cfa_offset 24
 18646              		.cfi_offset 14, -24
 18647 65ac 4155     		push	r13	#
 18648              		.cfi_def_cfa_offset 32
 18649              		.cfi_offset 13, -32
 18650 65ae 4154     		push	r12	#
 18651              		.cfi_def_cfa_offset 40
 18652              		.cfi_offset 12, -40
 18653 65b0 55       		push	rbp	#
 18654              		.cfi_def_cfa_offset 48
 18655              		.cfi_offset 6, -48
 18656 65b1 53       		push	rbx	#
 18657              		.cfi_def_cfa_offset 56
 18658              		.cfi_offset 3, -56
GAS LISTING /tmp/ccNeV1of.s 			page 498


 18659              	.LBB1007:
 18660              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
 18661              		.loc 1 1382 5 view .LVU6302
 18662 65b2 0F86C300 		jbe	.L1517	#,
 18662      0000
 18663              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
1383:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18664              		.loc 1 1383 37 view .LVU6303
 18665 65b8 48830F02 		or	QWORD PTR [rdi], 2	# *_3,
 18666              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18667              		.loc 1 1382 5 view .LVU6304
 18668 65bc 4883FE15 		cmp	rsi, 21	# max,
 18669              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18670              		.loc 1 1383 40 view .LVU6305
 18671 65c0 B9010000 		mov	ecx, 1	# tmp185,
 18671      00
 18672              		.loc 1 1383 9 is_stmt 1 view .LVU6306
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18673              		.loc 1 1382 42 view .LVU6307
 18674              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18675              		.loc 1 1382 43 is_stmt 0 view .LVU6308
 18676 65c5 B8150000 		mov	eax, 21	# i,
 18676      00
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18677              		.loc 1 1382 25 is_stmt 1 view .LVU6309
 18678              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18679              		.loc 1 1382 5 is_stmt 0 view .LVU6310
 18680 65ca 0F86AB00 		jbe	.L1517	#,
 18680      0000
 18681              	.L1518:
 18682              		.loc 1 1383 9 is_stmt 1 discriminator 3 view .LVU6311
 18683              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18684              		.loc 1 1383 37 is_stmt 0 discriminator 3 view .LVU6312
 18685 65d0 4889C2   		mov	rdx, rax	# tmp248, i
 18686              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18687              		.loc 1 1382 43 discriminator 3 view .LVU6313
 18688 65d3 488D5814 		lea	rbx, 20[rax]	# tmp246,
 18689              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18690              		.loc 1 1383 37 discriminator 3 view .LVU6314
 18691 65d7 48C1EA06 		shr	rdx, 6	# tmp248,
 18692              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18693              		.loc 1 1383 40 discriminator 3 view .LVU6315
 18694 65db C462F9F7 		shlx	r8, rcx, rax	# tmp251, tmp185, i
 18694      C1
 18695              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18696              		.loc 1 1383 37 discriminator 3 view .LVU6316
 18697 65e0 4C0904D7 		or	QWORD PTR [rdi+rdx*8], r8	# *_3, tmp251
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18698              		.loc 1 1382 42 is_stmt 1 discriminator 3 view .LVU6317
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18699              		.loc 1 1382 25 discriminator 3 view .LVU6318
 18700              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
GAS LISTING /tmp/ccNeV1of.s 			page 499


 18701              		.loc 1 1382 5 is_stmt 0 discriminator 3 view .LVU6319
 18702 65e4 4881FBFF 		cmp	rbx, 511	# tmp246,
 18702      010000
 18703 65eb 0F878A00 		ja	.L1517	#,
 18703      0000
 18704 65f1 4839DE   		cmp	rsi, rbx	# max, tmp246
 18705 65f4 0F868100 		jbe	.L1517	#,
 18705      0000
 18706              		.loc 1 1383 9 is_stmt 1 view .LVU6320
 18707              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18708              		.loc 1 1383 37 is_stmt 0 view .LVU6321
 18709 65fa 4889DD   		mov	rbp, rbx	# tmp255, tmp246
 18710              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18711              		.loc 1 1382 43 view .LVU6322
 18712 65fd 4C8D5028 		lea	r10, 40[rax]	# i,
 18713              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18714              		.loc 1 1383 37 view .LVU6323
 18715 6601 48C1ED06 		shr	rbp, 6	# tmp255,
 18716              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18717              		.loc 1 1383 40 view .LVU6324
 18718 6605 C462E1F7 		shlx	r9, rcx, rbx	# tmp258, tmp185, tmp246
 18718      C9
 18719              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18720              		.loc 1 1383 37 view .LVU6325
 18721 660a 4C090CEF 		or	QWORD PTR [rdi+rbp*8], r9	# *_3, tmp258
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18722              		.loc 1 1382 42 is_stmt 1 view .LVU6326
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18723              		.loc 1 1382 25 view .LVU6327
 18724              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18725              		.loc 1 1382 5 is_stmt 0 view .LVU6328
 18726 660e 4C39D6   		cmp	rsi, r10	# max, i
 18727 6611 7668     		jbe	.L1517	#,
 18728              		.loc 1 1383 9 is_stmt 1 view .LVU6329
 18729              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18730              		.loc 1 1383 37 is_stmt 0 view .LVU6330
 18731 6613 4D89D3   		mov	r11, r10	# tmp262, i
 18732              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18733              		.loc 1 1382 43 view .LVU6331
 18734 6616 4C8D683C 		lea	r13, 60[rax]	# i,
 18735              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18736              		.loc 1 1383 37 view .LVU6332
 18737 661a 49C1EB06 		shr	r11, 6	# tmp262,
 18738              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18739              		.loc 1 1383 40 view .LVU6333
 18740 661e C462A9F7 		shlx	r12, rcx, r10	# tmp265, tmp185, i
 18740      E1
 18741              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18742              		.loc 1 1383 37 view .LVU6334
 18743 6623 4E0924DF 		or	QWORD PTR [rdi+r11*8], r12	# *_3, tmp265
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18744              		.loc 1 1382 42 is_stmt 1 view .LVU6335
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18745              		.loc 1 1382 25 view .LVU6336
GAS LISTING /tmp/ccNeV1of.s 			page 500


 18746              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18747              		.loc 1 1382 5 is_stmt 0 view .LVU6337
 18748 6627 4C39EE   		cmp	rsi, r13	# max, i
 18749 662a 764F     		jbe	.L1517	#,
 18750              		.loc 1 1383 9 is_stmt 1 view .LVU6338
 18751              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18752              		.loc 1 1383 37 is_stmt 0 view .LVU6339
 18753 662c 4D89EE   		mov	r14, r13	# tmp269, i
 18754              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18755              		.loc 1 1382 43 view .LVU6340
 18756 662f 488D5050 		lea	rdx, 80[rax]	# i,
 18757              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18758              		.loc 1 1383 37 view .LVU6341
 18759 6633 49C1EE06 		shr	r14, 6	# tmp269,
 18760              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18761              		.loc 1 1383 40 view .LVU6342
 18762 6637 C46291F7 		shlx	r15, rcx, r13	# tmp272, tmp185, i
 18762      F9
 18763              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18764              		.loc 1 1383 37 view .LVU6343
 18765 663c 4E093CF7 		or	QWORD PTR [rdi+r14*8], r15	# *_3, tmp272
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18766              		.loc 1 1382 42 is_stmt 1 view .LVU6344
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18767              		.loc 1 1382 25 view .LVU6345
 18768              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18769              		.loc 1 1382 5 is_stmt 0 view .LVU6346
 18770 6640 4839D6   		cmp	rsi, rdx	# max, i
 18771 6643 7636     		jbe	.L1517	#,
 18772              		.loc 1 1383 9 is_stmt 1 view .LVU6347
 18773              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18774              		.loc 1 1383 37 is_stmt 0 view .LVU6348
 18775 6645 4989D0   		mov	r8, rdx	# tmp276, i
 18776              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18777              		.loc 1 1382 43 view .LVU6349
 18778 6648 488D6864 		lea	rbp, 100[rax]	# i,
 18779              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18780              		.loc 1 1383 37 view .LVU6350
 18781 664c 49C1E806 		shr	r8, 6	# tmp276,
 18782              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18783              		.loc 1 1383 40 view .LVU6351
 18784 6650 C4E2E9F7 		shlx	rbx, rcx, rdx	# tmp279, tmp185, i
 18784      D9
 18785              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18786              		.loc 1 1383 37 view .LVU6352
 18787 6655 4A091CC7 		or	QWORD PTR [rdi+r8*8], rbx	# *_3, tmp279
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18788              		.loc 1 1382 42 is_stmt 1 view .LVU6353
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18789              		.loc 1 1382 25 view .LVU6354
 18790              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18791              		.loc 1 1382 5 is_stmt 0 view .LVU6355
GAS LISTING /tmp/ccNeV1of.s 			page 501


 18792 6659 4839EE   		cmp	rsi, rbp	# max, i
 18793 665c 761D     		jbe	.L1517	#,
 18794              		.loc 1 1383 9 is_stmt 1 view .LVU6356
 18795              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18796              		.loc 1 1383 37 is_stmt 0 view .LVU6357
 18797 665e 4989E9   		mov	r9, rbp	# tmp283, i
 18798              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18799              		.loc 1 1382 43 view .LVU6358
 18800 6661 4883C078 		add	rax, 120	# i,
 18801              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18802              		.loc 1 1383 37 view .LVU6359
 18803 6665 49C1E906 		shr	r9, 6	# tmp283,
 18804              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18805              		.loc 1 1383 40 view .LVU6360
 18806 6669 C462D1F7 		shlx	r10, rcx, rbp	# tmp286, tmp185, i
 18806      D1
 18807              	# sieve_extend.c:1383:         bitarray_word[wordindex(i)] |= markmask(i);
 18808              		.loc 1 1383 37 view .LVU6361
 18809 666e 4E0914CF 		or	QWORD PTR [rdi+r9*8], r10	# *_3, tmp286
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18810              		.loc 1 1382 42 is_stmt 1 view .LVU6362
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18811              		.loc 1 1382 25 view .LVU6363
 18812              	# sieve_extend.c:1382:     for (counter_t i=1; i<8*64 && i<max; i+=20) {
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18813              		.loc 1 1382 5 is_stmt 0 view .LVU6364
 18814 6672 4839C6   		cmp	rsi, rax	# max, i
 18815 6675 0F8755FF 		ja	.L1518	#,
 18815      FFFF
 18816              	.LVL1097:
 18817              	.L1517:
1382:sieve_extend.c ****         bitarray_word[wordindex(i)] |= markmask(i);
 18818              		.loc 1 1382 5 view .LVU6365
 18819              	.LBE1007:
1384:sieve_extend.c ****     }
1385:sieve_extend.c **** 
1386:sieve_extend.c ****     counter_t source_start = 66+64;
 18820              		.loc 1 1386 5 is_stmt 1 view .LVU6366
1387:sieve_extend.c ****     counter_t destination_start = 3*4*64 + 12;
 18821              		.loc 1 1387 5 view .LVU6367
1388:sieve_extend.c ****     bitarray_word[wordindex(source_start)]  |= markmask_calc(source_start);
 18822              		.loc 1 1388 5 view .LVU6368
1389:sieve_extend.c ****     bitarray_word[wordindex(source_start+1)]  |= markmask_calc(source_start+1);
 18823              		.loc 1 1389 5 view .LVU6369
 18824 667b 488B4738 		mov	rax, QWORD PTR 56[rdi]	# D__lsm1.794, MEM[(uint64_t *)bitarray_57(D) + 56B]
 18825              	# sieve_extend.c:1389:     bitarray_word[wordindex(source_start+1)]  |= markmask_calc(source_start+
 18826              		.loc 1 1389 47 is_stmt 0 view .LVU6370
 18827 667f 48834F10 		or	QWORD PTR 16[rdi], 12	# MEM[(uint64_t *)bitarray_57(D) + 16B],
 18827      0C
1390:sieve_extend.c **** 
1391:sieve_extend.c ****     counter_t source_vector = vectorindex(source_start);
 18828              		.loc 1 1391 5 is_stmt 1 view .LVU6371
 18829              	.LVL1098:
1392:sieve_extend.c ****     int32_t delta_bit    = bitindex_calc(destination_start) - bitindex_calc(source_start); // could
 18830              		.loc 1 1392 5 view .LVU6372
1393:sieve_extend.c ****     
GAS LISTING /tmp/ccNeV1of.s 			page 502


1394:sieve_extend.c ****     bitshift_t shift_bit = delta_bit; 
 18831              		.loc 1 1394 5 view .LVU6373
1395:sieve_extend.c ****     bitshift_t shift_bit_flipped = WORD_SIZE_bitshift - shift_bit; 
 18832              		.loc 1 1395 5 view .LVU6374
1396:sieve_extend.c **** 
1397:sieve_extend.c ****     for (counter_t copy_vector = 3; copy_vector<400; copy_vector++, source_vector++) {
 18833              		.loc 1 1397 5 view .LVU6375
 18834              	.LBB1008:
 18835              		.loc 1 1397 10 view .LVU6376
 18836              		.loc 1 1397 37 view .LVU6377
 18837 6684 488B4F18 		mov	rcx, QWORD PTR 24[rdi]	# D__lsm0.793, MEM[(uint64_t *)bitarray_57(D) + 24B]
 18838 6688 4C8B7758 		mov	r14, QWORD PTR 88[rdi]	# D__lsm2.795, MEM[(uint64_t *)bitarray_57(D) + 88B]
 18839 668c 4C8B6F10 		mov	r13, QWORD PTR 16[rdi]	# D__lsm0.781, MEM[(uint64_t *)bitarray_57(D) + 16B]
 18840 6690 4C8B6730 		mov	r12, QWORD PTR 48[rdi]	# D__lsm1.782, MEM[(uint64_t *)bitarray_57(D) + 48B]
 18841 6694 488B7750 		mov	rsi, QWORD PTR 80[rdi]	# D__lsm2.783, MEM[(uint64_t *)bitarray_57(D) + 80B]
 18842              	.LVL1099:
 18843              		.loc 1 1397 37 is_stmt 0 view .LVU6378
 18844 6698 488B6F08 		mov	rbp, QWORD PTR 8[rdi]	# D__lsm0.785, MEM[(uint64_t *)bitarray_57(D) + 8B]
 18845 669c 488B5F28 		mov	rbx, QWORD PTR 40[rdi]	# D__lsm1.786, MEM[(uint64_t *)bitarray_57(D) + 40B]
 18846 66a0 488B5748 		mov	rdx, QWORD PTR 72[rdi]	# D__lsm2.787, MEM[(uint64_t *)bitarray_57(D) + 72B]
 18847 66a4 4C8B1F   		mov	r11, QWORD PTR [rdi]	# D__lsm0.789, *bitarray_57(D)
 18848 66a7 4C8B5720 		mov	r10, QWORD PTR 32[rdi]	# D__lsm1.790, MEM[(uint64_t *)bitarray_57(D) + 32B]
 18849 66ab 4C8B4F40 		mov	r9, QWORD PTR 64[rdi]	# D__lsm2.791, MEM[(uint64_t *)bitarray_57(D) + 64B]
 18850 66af 48894424 		mov	QWORD PTR -16[rsp], rax	# %sfp, D__lsm1.794
 18850      F0
 18851 66b4 488D4718 		lea	rax, 24[rdi]	# ivtmp.819,
 18852 66b8 48894C24 		mov	QWORD PTR -24[rsp], rcx	# %sfp, D__lsm0.793
 18852      E8
 18853              	# sieve_extend.c:1397:     for (counter_t copy_vector = 3; copy_vector<400; copy_vector++, source_v
 18854              		.loc 1 1397 20 view .LVU6379
 18855 66bd 48C74424 		mov	QWORD PTR -32[rsp], 3	# %sfp,
 18855      E0030000 
 18855      00
 18856 66c6 4C897424 		mov	QWORD PTR -8[rsp], r14	# %sfp, D__lsm2.795
 18856      F8
 18857              	.LVL1100:
 18858              	.L1520:
1398:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 18859              		.loc 1 1398 9 is_stmt 1 discriminator 3 view .LVU6380
 18860              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
 18861              		.loc 1 1398 76 is_stmt 0 discriminator 3 view .LVU6381
 18862 66cb 41BF3600 		mov	r15d, 54	# tmp312,
 18862      0000
 18863 66d1 C4E283F7 		shrx	rcx, QWORD PTR -32[rax], r15	# tmp190, MEM[base: _352, offset: -32B], tmp312
 18863      48E0
 18864              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >> shift_bit_flipped) | 
1401:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 18865              		.loc 1 1401 134 discriminator 3 view .LVU6382
 18866 66d7 4C8B7C24 		mov	r15, QWORD PTR -24[rsp]	# D__lsm0.793, %sfp
 18866      E8
 18867              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 18868              		.loc 1 1398 134 discriminator 3 view .LVU6383
 18869 66dc 4D89D8   		mov	r8, r11	# tmp192, D__lsm0.789
 18870 66df 49C1E00A 		sal	r8, 10	# tmp192,
GAS LISTING /tmp/ccNeV1of.s 			page 503


 18871              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 18872              		.loc 1 1399 134 discriminator 3 view .LVU6384
 18873 66e3 4989EE   		mov	r14, rbp	# tmp194, D__lsm0.785
 18874              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 18875              		.loc 1 1400 76 discriminator 3 view .LVU6385
 18876 66e6 48C1ED36 		shr	rbp, 54	# tmp195,
 18877              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 18878              		.loc 1 1398 98 discriminator 3 view .LVU6386
 18879 66ea 4C09C1   		or	rcx, r8	# _24, tmp192
 18880              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 18881              		.loc 1 1401 134 discriminator 3 view .LVU6387
 18882 66ed 49C1E70A 		sal	r15, 10	# D__lsm0.793,
 18883              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 18884              		.loc 1 1400 134 discriminator 3 view .LVU6388
 18885 66f1 4D89E8   		mov	r8, r13	# tmp196, D__lsm0.781
 18886              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 18887              		.loc 1 1401 76 discriminator 3 view .LVU6389
 18888 66f4 49C1ED36 		shr	r13, 54	# tmp197,
 18889              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 18890              		.loc 1 1400 134 discriminator 3 view .LVU6390
 18891 66f8 49C1E00A 		sal	r8, 10	# tmp196,
 18892              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 18893              		.loc 1 1401 98 discriminator 3 view .LVU6391
 18894 66fc 4D09EF   		or	r15, r13	# _51, tmp197
 18895              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 18896              		.loc 1 1398 134 discriminator 3 view .LVU6392
 18897 66ff 4D89D5   		mov	r13, r10	# tmp201, D__lsm1.790
 18898              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 18899              		.loc 1 1400 98 discriminator 3 view .LVU6393
 18900 6702 4909E8   		or	r8, rbp	# _42, tmp195
 18901              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 18902              		.loc 1 1399 76 discriminator 3 view .LVU6394
 18903 6705 49C1EA36 		shr	r10, 54	# D__lsm1.790,
 18904 6709 49C1EB36 		shr	r11, 54	# tmp193,
 18905 670d 4C89D5   		mov	rbp, r10	# tmp202, D__lsm1.790
 18906              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 18907              		.loc 1 1398 134 discriminator 3 view .LVU6395
 18908 6710 49C1E50A 		sal	r13, 10	# tmp201,
 18909              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 18910              		.loc 1 1399 134 discriminator 3 view .LVU6396
 18911 6714 4989DA   		mov	r10, rbx	# tmp203, D__lsm1.786
 18912 6717 49C1E20A 		sal	r10, 10	# tmp203,
 18913 671b 49C1E60A 		sal	r14, 10	# tmp194,
 18914              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 18915              		.loc 1 1399 98 discriminator 3 view .LVU6397
 18916 671f 4C09D5   		or	rbp, r10	# D__lsm0.785, tmp203
GAS LISTING /tmp/ccNeV1of.s 			page 504


 18917              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 18918              		.loc 1 1401 134 discriminator 3 view .LVU6398
 18919 6722 4C8B5424 		mov	r10, QWORD PTR -16[rsp]	# D__lsm1.794, %sfp
 18919      F0
 18920              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 18921              		.loc 1 1399 98 discriminator 3 view .LVU6399
 18922 6727 4D09DE   		or	r14, r11	# _33, tmp193
 18923              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 18924              		.loc 1 1398 40 discriminator 3 view .LVU6400
 18925 672a 48894848 		mov	QWORD PTR 72[rax], rcx	# MEM[base: _352, offset: 72B], _24
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 18926              		.loc 1 1399 9 is_stmt 1 discriminator 3 view .LVU6401
 18927              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 18928              		.loc 1 1398 76 is_stmt 0 discriminator 3 view .LVU6402
 18929 672e 41BB3600 		mov	r11d, 54	# tmp317,
 18929      0000
 18930 6734 C462A3F7 		shrx	r11, QWORD PTR [rax], r11	# tmp199, MEM[base: _352, offset: 0B], tmp317
 18930      18
 18931              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 18932              		.loc 1 1399 40 discriminator 3 view .LVU6403
 18933 6739 4C897050 		mov	QWORD PTR 80[rax], r14	# MEM[base: _352, offset: 80B], _33
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 18934              		.loc 1 1400 9 is_stmt 1 discriminator 3 view .LVU6404
 18935              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 18936              		.loc 1 1401 134 is_stmt 0 discriminator 3 view .LVU6405
 18937 673d 49C1E20A 		sal	r10, 10	# D__lsm1.794,
 18938              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 18939              		.loc 1 1398 98 discriminator 3 view .LVU6406
 18940 6741 4D09EB   		or	r11, r13	# D__lsm0.789, tmp201
 18941              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 18942              		.loc 1 1400 40 discriminator 3 view .LVU6407
 18943 6744 4C894058 		mov	QWORD PTR 88[rax], r8	# MEM[base: _352, offset: 88B], _42
 18944              		.loc 1 1401 9 is_stmt 1 discriminator 3 view .LVU6408
 18945              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 18946              		.loc 1 1400 76 is_stmt 0 discriminator 3 view .LVU6409
 18947 6748 4989DD   		mov	r13, rbx	# D__lsm1.786, D__lsm1.786
 18948 674b 49C1ED36 		shr	r13, 54	# D__lsm1.786,
 18949              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 18950              		.loc 1 1400 134 discriminator 3 view .LVU6410
 18951 674f 4C89E3   		mov	rbx, r12	# tmp205, D__lsm1.782
 18952 6752 48C1E30A 		sal	rbx, 10	# tmp205,
 18953              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 18954              		.loc 1 1401 76 discriminator 3 view .LVU6411
 18955 6756 49C1EC36 		shr	r12, 54	# tmp206,
 18956              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 18957              		.loc 1 1400 98 discriminator 3 view .LVU6412
 18958 675a 4909DD   		or	r13, rbx	# D__lsm0.781, tmp205
 18959              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
GAS LISTING /tmp/ccNeV1of.s 			page 505


1398:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 18960              		.loc 1 1398 134 discriminator 3 view .LVU6413
 18961 675d 4C89CB   		mov	rbx, r9	# tmp210, D__lsm2.791
 18962              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 18963              		.loc 1 1401 98 discriminator 3 view .LVU6414
 18964 6760 4D09D4   		or	r12, r10	# tmp206, tmp207
 18965              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 18966              		.loc 1 1398 134 discriminator 3 view .LVU6415
 18967 6763 48C1E30A 		sal	rbx, 10	# tmp210,
 18968              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 18969              		.loc 1 1399 76 discriminator 3 view .LVU6416
 18970 6767 49C1E936 		shr	r9, 54	# D__lsm2.791,
 18971              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 18972              		.loc 1 1401 40 discriminator 3 view .LVU6417
 18973 676b 4C89A080 		mov	QWORD PTR 128[rax], r12	# MEM[base: _352, offset: 128B], D__lsm0.793
 18973      000000
 18974              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 18975              		.loc 1 1401 98 discriminator 3 view .LVU6418
 18976 6772 4C896424 		mov	QWORD PTR -24[rsp], r12	# %sfp, D__lsm0.793
 18976      E8
 18977              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 18978              		.loc 1 1398 76 discriminator 3 view .LVU6419
 18979 6777 41BC3600 		mov	r12d, 54	# tmp326,
 18979      0000
 18980 677d C4629BF7 		shrx	r10, QWORD PTR 32[rax], r12	# tmp208, MEM[base: _352, offset: 32B], tmp326
 18980      5020
 18981              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 18982              		.loc 1 1398 98 discriminator 3 view .LVU6420
 18983 6783 4909DA   		or	r10, rbx	# D__lsm1.790, tmp210
 18984              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 18985              		.loc 1 1399 76 discriminator 3 view .LVU6421
 18986 6786 4C89CB   		mov	rbx, r9	# tmp211, D__lsm2.791
 18987              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 18988              		.loc 1 1399 134 discriminator 3 view .LVU6422
 18989 6789 4989D1   		mov	r9, rdx	# tmp212, D__lsm2.787
 18990 678c 49C1E10A 		sal	r9, 10	# tmp212,
 18991              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 18992              		.loc 1 1400 76 discriminator 3 view .LVU6423
 18993 6790 4989D4   		mov	r12, rdx	# D__lsm2.787, D__lsm2.787
 18994              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 18995              		.loc 1 1399 98 discriminator 3 view .LVU6424
 18996 6793 4C09CB   		or	rbx, r9	# D__lsm1.786, tmp212
 18997              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 18998              		.loc 1 1400 134 discriminator 3 view .LVU6425
 18999 6796 4889F2   		mov	rdx, rsi	# tmp214, D__lsm2.783
 19000              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 19001              		.loc 1 1401 134 discriminator 3 view .LVU6426
 19002 6799 4C8B4C24 		mov	r9, QWORD PTR -8[rsp]	# D__lsm2.795, %sfp
GAS LISTING /tmp/ccNeV1of.s 			page 506


 19002      F8
 19003              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19004              		.loc 1 1400 76 discriminator 3 view .LVU6427
 19005 679e 49C1EC36 		shr	r12, 54	# D__lsm2.787,
 19006              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19007              		.loc 1 1400 134 discriminator 3 view .LVU6428
 19008 67a2 48C1E20A 		sal	rdx, 10	# tmp214,
 19009              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 19010              		.loc 1 1401 134 discriminator 3 view .LVU6429
 19011 67a6 49C1E10A 		sal	r9, 10	# D__lsm2.795,
 19012              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19013              		.loc 1 1400 98 discriminator 3 view .LVU6430
 19014 67aa 4909D4   		or	r12, rdx	# D__lsm1.782, tmp214
 19015              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 19016              		.loc 1 1401 76 discriminator 3 view .LVU6431
 19017 67ad 48C1EE36 		shr	rsi, 54	# tmp215,
 19018              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 19019              		.loc 1 1398 134 discriminator 3 view .LVU6432
 19020 67b1 4889CA   		mov	rdx, rcx	# tmp219, _24
 19021              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 19022              		.loc 1 1401 40 discriminator 3 view .LVU6433
 19023 67b4 4C897860 		mov	QWORD PTR 96[rax], r15	# MEM[base: _352, offset: 96B], _51
1397:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 19024              		.loc 1 1397 54 is_stmt 1 discriminator 3 view .LVU6434
 19025              	.LVL1101:
1397:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 19026              		.loc 1 1397 37 discriminator 3 view .LVU6435
1398:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 19027              		.loc 1 1398 9 discriminator 3 view .LVU6436
 19028              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 19029              		.loc 1 1401 98 is_stmt 0 discriminator 3 view .LVU6437
 19030 67b8 4C09CE   		or	rsi, r9	# tmp215, tmp216
 19031              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 19032              		.loc 1 1398 134 discriminator 3 view .LVU6438
 19033 67bb 48C1E20A 		sal	rdx, 10	# tmp219,
 19034              	# sieve_extend.c:1397:     for (counter_t copy_vector = 3; copy_vector<400; copy_vector++, source_v
1397:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 19035              		.loc 1 1397 65 discriminator 3 view .LVU6439
 19036 67bf 48834424 		add	QWORD PTR -32[rsp], 4	# %sfp,
 19036      E004
 19037              	.LVL1102:
 19038              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 19039              		.loc 1 1401 40 discriminator 3 view .LVU6440
 19040 67c5 4889B0A0 		mov	QWORD PTR 160[rax], rsi	# MEM[base: _352, offset: 160B], D__lsm1.794
 19040      000000
 19041 67cc 4883E880 		sub	rax, -128	# ivtmp.819,
 19042              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 19043              		.loc 1 1401 98 discriminator 3 view .LVU6441
 19044 67d0 48897424 		mov	QWORD PTR -16[rsp], rsi	# %sfp, D__lsm1.794
 19044      F0
 19045              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
GAS LISTING /tmp/ccNeV1of.s 			page 507


 19046              		.loc 1 1398 76 discriminator 3 view .LVU6442
 19047 67d5 BE360000 		mov	esi, 54	# tmp335,
 19047      00
 19048 67da C462CBF7 		shrx	r9, QWORD PTR -64[rax], rsi	# tmp217, MEM[base: _352, offset: 64B], tmp335
 19048      48C0
 19049              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 19050              		.loc 1 1398 98 discriminator 3 view .LVU6443
 19051 67e0 4909D1   		or	r9, rdx	# D__lsm2.791, tmp219
 19052              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >> shift_bit_flipped) | 
 19053              		.loc 1 1399 134 discriminator 3 view .LVU6444
 19054 67e3 4C89F2   		mov	rdx, r14	# tmp221, _33
 19055              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19056              		.loc 1 1400 134 discriminator 3 view .LVU6445
 19057 67e6 4C89C6   		mov	rsi, r8	# tmp223, _42
 19058              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >> shift_bit_flipped) | 
 19059              		.loc 1 1399 76 discriminator 3 view .LVU6446
 19060 67e9 48C1E936 		shr	rcx, 54	# tmp220,
 19061              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >> shift_bit_flipped) | 
 19062              		.loc 1 1399 134 discriminator 3 view .LVU6447
 19063 67ed 48C1E20A 		sal	rdx, 10	# tmp221,
 19064              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19065              		.loc 1 1400 76 discriminator 3 view .LVU6448
 19066 67f1 49C1EE36 		shr	r14, 54	# tmp222,
 19067              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >> shift_bit_flipped) | 
 19068              		.loc 1 1399 98 discriminator 3 view .LVU6449
 19069 67f5 4809CA   		or	rdx, rcx	# D__lsm2.787, tmp220
 19070              	# sieve_extend.c:1397:     for (counter_t copy_vector = 3; copy_vector<400; copy_vector++, source_v
1397:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 19071              		.loc 1 1397 65 discriminator 3 view .LVU6450
 19072 67f8 488B4C24 		mov	rcx, QWORD PTR -32[rsp]	# copy_vector, %sfp
 19072      E0
 19073              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19074              		.loc 1 1400 134 discriminator 3 view .LVU6451
 19075 67fd 48C1E60A 		sal	rsi, 10	# tmp223,
 19076              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 19077              		.loc 1 1401 134 discriminator 3 view .LVU6452
 19078 6801 49C1E70A 		sal	r15, 10	# tmp225,
 19079              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19080              		.loc 1 1400 98 discriminator 3 view .LVU6453
 19081 6805 4C09F6   		or	rsi, r14	# D__lsm2.783, tmp222
 19082              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 19083              		.loc 1 1401 76 discriminator 3 view .LVU6454
 19084 6808 49C1E836 		shr	r8, 54	# tmp224,
 19085              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 19086              		.loc 1 1398 40 discriminator 3 view .LVU6455
 19087 680c 4C8958E8 		mov	QWORD PTR -24[rax], r11	# MEM[base: _352, offset: 104B], D__lsm0.789
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >> shift_bit_flipped) | 
GAS LISTING /tmp/ccNeV1of.s 			page 508


 19088              		.loc 1 1399 9 is_stmt 1 discriminator 3 view .LVU6456
 19089              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 19090              		.loc 1 1401 98 is_stmt 0 discriminator 3 view .LVU6457
 19091 6810 4D09F8   		or	r8, r15	# tmp224, tmp225
 19092              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >> shift_bit_flipped) | 
 19093              		.loc 1 1399 40 discriminator 3 view .LVU6458
 19094 6813 488968F0 		mov	QWORD PTR -16[rax], rbp	# MEM[base: _352, offset: 112B], D__lsm0.785
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19095              		.loc 1 1400 9 is_stmt 1 discriminator 3 view .LVU6459
 19096              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19097              		.loc 1 1400 40 is_stmt 0 discriminator 3 view .LVU6460
 19098 6817 4C8968F8 		mov	QWORD PTR -8[rax], r13	# MEM[base: _352, offset: 120B], D__lsm0.781
 19099              		.loc 1 1401 9 is_stmt 1 discriminator 3 view .LVU6461
1397:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 19100              		.loc 1 1397 54 discriminator 3 view .LVU6462
1397:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 19101              		.loc 1 1397 37 discriminator 3 view .LVU6463
1398:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 19102              		.loc 1 1398 9 discriminator 3 view .LVU6464
 19103              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 19104              		.loc 1 1398 40 is_stmt 0 discriminator 3 view .LVU6465
 19105 681b 4C895008 		mov	QWORD PTR 8[rax], r10	# MEM[base: _352, offset: 136B], D__lsm1.790
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >> shift_bit_flipped) | 
 19106              		.loc 1 1399 9 is_stmt 1 discriminator 3 view .LVU6466
 19107              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >> shift_bit_flipped) | 
 19108              		.loc 1 1399 40 is_stmt 0 discriminator 3 view .LVU6467
 19109 681f 48895810 		mov	QWORD PTR 16[rax], rbx	# MEM[base: _352, offset: 144B], D__lsm1.786
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19110              		.loc 1 1400 9 is_stmt 1 discriminator 3 view .LVU6468
 19111              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19112              		.loc 1 1400 40 is_stmt 0 discriminator 3 view .LVU6469
 19113 6823 4C896018 		mov	QWORD PTR 24[rax], r12	# MEM[base: _352, offset: 152B], D__lsm1.782
 19114              		.loc 1 1401 9 is_stmt 1 discriminator 3 view .LVU6470
1397:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 19115              		.loc 1 1397 54 discriminator 3 view .LVU6471
1397:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 19116              		.loc 1 1397 37 discriminator 3 view .LVU6472
1398:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 19117              		.loc 1 1398 9 discriminator 3 view .LVU6473
 19118              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 19119              		.loc 1 1398 40 is_stmt 0 discriminator 3 view .LVU6474
 19120 6827 4C894828 		mov	QWORD PTR 40[rax], r9	# MEM[base: _352, offset: 168B], D__lsm2.791
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >> shift_bit_flipped) | 
 19121              		.loc 1 1399 9 is_stmt 1 discriminator 3 view .LVU6475
 19122              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >> shift_bit_flipped) | 
 19123              		.loc 1 1399 40 is_stmt 0 discriminator 3 view .LVU6476
 19124 682b 48895030 		mov	QWORD PTR 48[rax], rdx	# MEM[base: _352, offset: 176B], D__lsm2.787
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19125              		.loc 1 1400 9 is_stmt 1 discriminator 3 view .LVU6477
 19126              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
GAS LISTING /tmp/ccNeV1of.s 			page 509


1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19127              		.loc 1 1400 40 is_stmt 0 discriminator 3 view .LVU6478
 19128 682f 48897038 		mov	QWORD PTR 56[rax], rsi	# MEM[base: _352, offset: 184B], D__lsm2.783
 19129              		.loc 1 1401 9 is_stmt 1 discriminator 3 view .LVU6479
 19130              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 19131              		.loc 1 1401 40 is_stmt 0 discriminator 3 view .LVU6480
 19132 6833 4C894040 		mov	QWORD PTR 64[rax], r8	# MEM[base: _352, offset: 192B], D__lsm2.795
1397:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 19133              		.loc 1 1397 54 is_stmt 1 discriminator 3 view .LVU6481
 19134              	.LVL1103:
1397:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 19135              		.loc 1 1397 37 discriminator 3 view .LVU6482
 19136 6837 4881F98F 		cmp	rcx, 399	# copy_vector,
 19136      010000
 19137              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 19138              		.loc 1 1401 98 is_stmt 0 discriminator 3 view .LVU6483
 19139 683e 4C894424 		mov	QWORD PTR -8[rsp], r8	# %sfp, D__lsm2.795
 19139      F8
 19140 6843 0F8582FE 		jne	.L1520	#,
 19140      FFFF
 19141 6849 488D8780 		lea	rax, 12672[rdi]	# ivtmp.805,
 19141      310000
 19142 6850 4C8DB7E0 		lea	r14, 12768[rdi]	# ivtmp.806,
 19142      310000
 19143 6857 4881C7A0 		add	rdi, 12704	# _224,
 19143      310000
 19144              	.LVL1104:
 19145 685e 6690     		.p2align 4
 19146              		.p2align 3
 19147              	.L1521:
1398:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 19148              		.loc 1 1398 9 is_stmt 1 view .LVU6484
 19149              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 19150              		.loc 1 1398 134 is_stmt 0 view .LVU6485
 19151 6860 41B80A00 		mov	r8d, 10	# tmp343,
 19151      0000
 19152              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 19153              		.loc 1 1398 76 view .LVU6486
 19154 6866 41BF3600 		mov	r15d, 54	# tmp344,
 19154      0000
 19155              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 19156              		.loc 1 1398 134 view .LVU6487
 19157 686c C462B9F7 		shlx	r11, QWORD PTR [rax], r8	# tmp226, MEM[base: _232, offset: 0B], tmp343
 19157      18
 19158              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 19159              		.loc 1 1398 76 view .LVU6488
 19160 6871 C4E283F7 		shrx	rbp, QWORD PTR -8[rax], r15	# tmp228, MEM[base: _232, offset: -8B], tmp344
 19160      68F8
 19161              	# sieve_extend.c:1398:         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >
1398:sieve_extend.c ****         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >> shift_bit_flipped) | 
 19162              		.loc 1 1398 98 view .LVU6489
 19163 6877 4909EB   		or	r11, rbp	# tmp230, tmp228
 19164 687a 4883C020 		add	rax, 32	# ivtmp.805,
GAS LISTING /tmp/ccNeV1of.s 			page 510


 19165 687e 4D891E   		mov	QWORD PTR [r14], r11	# MEM[base: _231, offset: 0B], tmp230
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >> shift_bit_flipped) | 
 19166              		.loc 1 1399 9 is_stmt 1 view .LVU6490
 19167              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >> shift_bit_flipped) | 
 19168              		.loc 1 1399 134 is_stmt 0 view .LVU6491
 19169 6881 C462B9F7 		shlx	r13, QWORD PTR -24[rax], r8	# tmp231, MEM[base: _232, offset: 8B], tmp345
 19169      68E8
 19170              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >> shift_bit_flipped) | 
 19171              		.loc 1 1399 76 view .LVU6492
 19172 6887 C46283F7 		shrx	r10, QWORD PTR -32[rax], r15	# tmp233, MEM[base: _232, offset: 0B], tmp346
 19172      50E0
 19173              	# sieve_extend.c:1399:         bitarray_word[copy_vector*4+1] = (bitarray_word[source_vector*4  ] >
1399:sieve_extend.c ****         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >> shift_bit_flipped) | 
 19174              		.loc 1 1399 98 view .LVU6493
 19175 688d 4D09D5   		or	r13, r10	# tmp235, tmp233
 19176 6890 4D896E08 		mov	QWORD PTR 8[r14], r13	# MEM[base: _231, offset: 8B], tmp235
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19177              		.loc 1 1400 9 is_stmt 1 view .LVU6494
 19178              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19179              		.loc 1 1400 134 is_stmt 0 view .LVU6495
 19180 6894 C4E2B9F7 		shlx	rbx, QWORD PTR -16[rax], r8	# tmp236, MEM[base: _232, offset: 16B], tmp347
 19180      58F0
 19181              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19182              		.loc 1 1400 76 view .LVU6496
 19183 689a C46283F7 		shrx	r12, QWORD PTR -24[rax], r15	# tmp238, MEM[base: _232, offset: 8B], tmp348
 19183      60E8
 19184              	# sieve_extend.c:1400:         bitarray_word[copy_vector*4+2] = (bitarray_word[source_vector*4+1] >
1400:sieve_extend.c ****         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >> shift_bit_flipped) | 
 19185              		.loc 1 1400 98 view .LVU6497
 19186 68a0 4C09E3   		or	rbx, r12	# tmp240, tmp238
 19187 68a3 49895E10 		mov	QWORD PTR 16[r14], rbx	# MEM[base: _231, offset: 16B], tmp240
 19188              		.loc 1 1401 9 is_stmt 1 view .LVU6498
 19189              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 19190              		.loc 1 1401 76 is_stmt 0 view .LVU6499
 19191 68a7 C46283F7 		shrx	r9, QWORD PTR -16[rax], r15	# tmp241, MEM[base: _232, offset: 16B], tmp349
 19191      48F0
 19192              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 19193              		.loc 1 1401 134 view .LVU6500
 19194 68ad C4E2B9F7 		shlx	rdx, QWORD PTR -8[rax], r8	# tmp243, MEM[base: _232, offset: 24B], tmp350
 19194      50F8
 19195              	# sieve_extend.c:1401:         bitarray_word[copy_vector*4+3] = (bitarray_word[source_vector*4+2] >
 19196              		.loc 1 1401 98 view .LVU6501
 19197 68b3 4909D1   		or	r9, rdx	# tmp245, tmp243
 19198 68b6 4D894E18 		mov	QWORD PTR 24[r14], r9	# MEM[base: _231, offset: 24B], tmp245
1397:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 19199              		.loc 1 1397 54 is_stmt 1 view .LVU6502
1397:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 19200              		.loc 1 1397 37 view .LVU6503
 19201 68ba 4983C620 		add	r14, 32	# ivtmp.806,
 19202              	# sieve_extend.c:1397:     for (counter_t copy_vector = 3; copy_vector<400; copy_vector++, source_v
1397:sieve_extend.c ****         bitarray_word[copy_vector*4  ] = (bitarray_word[source_vector*4-1] >> shift_bit_flipped) | 
 19203              		.loc 1 1397 5 is_stmt 0 view .LVU6504
 19204 68be 4839C7   		cmp	rdi, rax	# _224, ivtmp.805
GAS LISTING /tmp/ccNeV1of.s 			page 511


 19205 68c1 759D     		jne	.L1521	#,
 19206              	.LBE1008:
 19207              	# sieve_extend.c:1403: }
1402:sieve_extend.c ****     }
1403:sieve_extend.c **** }
 19208              		.loc 1 1403 1 view .LVU6505
 19209 68c3 5B       		pop	rbx	#
 19210              		.cfi_def_cfa_offset 48
 19211 68c4 5D       		pop	rbp	#
 19212              		.cfi_def_cfa_offset 40
 19213 68c5 415C     		pop	r12	#
 19214              		.cfi_def_cfa_offset 32
 19215 68c7 415D     		pop	r13	#
 19216              		.cfi_def_cfa_offset 24
 19217 68c9 415E     		pop	r14	#
 19218              		.cfi_def_cfa_offset 16
 19219 68cb 415F     		pop	r15	#
 19220              		.cfi_def_cfa_offset 8
 19221 68cd C3       		ret	
 19222              		.cfi_endproc
 19223              	.LFE98:
 19225              		.section	.rodata.str1.1
 19226              	.LC35:
 19227 004e 5573696E 		.string	"Using Pointers"
 19227      6720506F 
 19227      696E7465 
 19227      727300
 19228              	.LC36:
 19229 005d 2D2D6865 		.string	"--help"
 19229      6C7000
 19230              	.LC37:
 19231 0064 2D2D7665 		.string	"--verbose"
 19231      72626F73 
 19231      6500
 19232              	.LC38:
 19233 006e 4E6F2076 		.string	"No verbose level specified\n"
 19233      6572626F 
 19233      7365206C 
 19233      6576656C 
 19233      20737065 
 19234              		.section	.rodata.str1.8
 19235 03d6 0000     		.align 8
 19236              	.LC39:
 19237 03d8 4572726F 		.string	"Error: Invalid measurement time: %s\n"
 19237      723A2049 
 19237      6E76616C 
 19237      6964206D 
 19237      65617375 
 19238              		.section	.rodata.str1.1
 19239              	.LC40:
 19240 008a 56657262 		.string	"Verbose level set to %d\n"
 19240      6F736520 
 19240      6C657665 
 19240      6C207365 
 19240      7420746F 
 19241              	.LC41:
 19242 00a3 2D2D6368 		.string	"--check"
GAS LISTING /tmp/ccNeV1of.s 			page 512


 19242      65636B00 
 19243              	.LC42:
 19244 00ab 2D2D7475 		.string	"--tune"
 19244      6E6500
 19245              	.LC43:
 19246 00b2 4E6F2074 		.string	"No tune level specified\n"
 19246      756E6520 
 19246      6C657665 
 19246      6C207370 
 19246      65636966 
 19247              		.section	.rodata.str1.8
 19248 03fd 000000   		.align 8
 19249              	.LC44:
 19250 0400 4572726F 		.string	"Error: Invalid tune level: %s\n"
 19250      723A2049 
 19250      6E76616C 
 19250      69642074 
 19250      756E6520 
 19251              		.section	.rodata.str1.1
 19252              	.LC45:
 19253 00cb 54756E65 		.string	"Tune level set to %d\n"
 19253      206C6576 
 19253      656C2073 
 19253      65742074 
 19253      6F202564 
 19254              	.LC46:
 19255 00e1 2D2D7368 		.string	"--show"
 19255      6F7700
 19256              	.LC47:
 19257 00e8 4E6F2073 		.string	"No show maximum specified\n"
 19257      686F7720 
 19257      6D617869 
 19257      6D756D20 
 19257      73706563 
 19258              	.LC48:
 19259 0103 256A7500 		.string	"%ju"
 19260              		.section	.rodata.str1.8
 19261 041f 00       		.align 8
 19262              	.LC49:
 19263 0420 4572726F 		.string	"Error: Invalid show maximum: %s\n"
 19263      723A2049 
 19263      6E76616C 
 19263      69642073 
 19263      686F7720 
 19264              		.section	.rodata.str1.1
 19265              	.LC50:
 19266 0107 53686F77 		.string	"Show maximum set to %ju\n"
 19266      206D6178 
 19266      696D756D 
 19266      20736574 
 19266      20746F20 
 19267              	.LC51:
 19268 0120 496E7661 		.string	"Invalid size %s\n"
 19268      6C696420 
 19268      73697A65 
 19268      2025730A 
 19268      00
GAS LISTING /tmp/ccNeV1of.s 			page 513


 19269              	.LC52:
 19270 0131 56616C69 		.string	"Validating... "
 19270      64617469 
 19270      6E672E2E 
 19270      2E2000
 19271              	.LC53:
 19272 0140 2E2E2E43 		.string	"...Checking size %ju ..."
 19272      6865636B 
 19272      696E6720 
 19272      73697A65 
 19272      20256A75 
 19273              	.LC54:
 19274 0159 2E626C6F 		.string	".blocksize %ju-"
 19274      636B7369 
 19274      7A652025 
 19274      6A752D00 
 19275              	.LC55:
 19276 0169 76616C69 		.string	"valid;"
 19276      643B00
 19277              	.LC56:
 19278 0170 2E2E2E56 		.string	"...Valid algorithm"
 19278      616C6964 
 19278      20616C67 
 19278      6F726974 
 19278      686D00
 19279              	.LC57:
 19280 0183 54756E69 		.string	"Tuning..."
 19280      6E672E2E 
 19280      2E00
 19281              	.LC58:
 19282 018d 2E283E29 		.string	".(>)"
 19282      00
 19283              		.section	.rodata.str1.8
 19284 0441 00000000 		.align 8
 19284      000000
 19285              	.LC59:
 19286 0448 626C6F63 		.string	"blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector %
 19286      6B73697A 
 19286      655F6269 
 19286      74732025 
 19286      31306A75 
 19287              		.section	.rodata.str1.1
 19288              	.LC60:
 19289 0192 2E2E2E2E 		.string	"...."
 19289      00
 19290              		.section	.rodata.str1.8
 19291 04cf 00       		.align 8
 19292              	.LC61:
 19293 04d0 256A7520 		.string	"%ju results. Inital best blocksize: %ju; best smallstep %ju; best mediumstep %ju; best ve
 19293      72657375 
 19293      6C74732E 
 19293      20496E69 
 19293      74616C20 
 19294              		.section	.rodata.str1.1
 19295              	.LC62:
 19296 0197 42657374 		.string	"Best options"
 19296      206F7074 
GAS LISTING /tmp/ccNeV1of.s 			page 514


 19296      696F6E73 
 19296      00
 19297              	.LC63:
 19298 01a4 28256A75 		.string	"(%ju) "
 19298      292000
 19299              	.LC64:
 19300 01ab 2E2E2E00 		.string	"..."
 19301              	.LC65:
 19302 01af 2E426573 		.string	".Best result:"
 19302      74207265 
 19302      73756C74 
 19302      3A00
 19303              		.section	.rodata.str1.8
 19304 0537 00       		.align 8
 19305              	.LC66:
 19306 0538 42656E63 		.string	"Benchmarking... with blocksize %ju steps: %ju/%ju/%ju\n"
 19306      686D6172 
 19306      6B696E67 
 19306      2E2E2E20 
 19306      77697468 
 19307 056f 00       		.align 8
 19308              	.LC68:
 19309 0570 726F6769 		.string	"rogiervandam_extend;%ju;%f;1;algorithm=other,faithful=yes,bits=1\n"
 19309      65727661 
 19309      6E64616D 
 19309      5F657874 
 19309      656E643B 
 19310 05b2 00000000 		.align 8
 19310      0000
 19311              	.LC69:
 19312 05b8 50617373 		.string	"Passes - per 5 seconds: %f - per second %f\n"
 19312      6573202D 
 19312      20706572 
 19312      20352073 
 19312      65636F6E 
 19313              		.section	.rodata.str1.1
 19314              	.LC70:
 19315 01bd 53686F77 		.string	"Show result set:"
 19315      20726573 
 19315      756C7420 
 19315      7365743A 
 19315      00
 19316              		.section	.text.startup,"ax",@progbits
 19317              		.p2align 4
 19318              		.globl	main
 19320              	main:
 19321              	.LVL1105:
 19322              	.LFB99:
1404:sieve_extend.c **** int main(int argc, char *argv[]) {
 19323              		.loc 1 1404 34 is_stmt 1 view -0
 19324              		.cfi_startproc
 19325              		.loc 1 1404 34 is_stmt 0 view .LVU6507
 19326 0000 F30F1EFA 		endbr64	
 19327 0004 4157     		push	r15	#
 19328              		.cfi_def_cfa_offset 16
 19329              		.cfi_offset 15, -16
 19330 0006 4156     		push	r14	#
GAS LISTING /tmp/ccNeV1of.s 			page 515


 19331              		.cfi_def_cfa_offset 24
 19332              		.cfi_offset 14, -24
 19333 0008 4155     		push	r13	#
 19334              		.cfi_def_cfa_offset 32
 19335              		.cfi_offset 13, -32
 19336 000a 4154     		push	r12	#
 19337              		.cfi_def_cfa_offset 40
 19338              		.cfi_offset 12, -40
 19339 000c 55       		push	rbp	#
 19340              		.cfi_def_cfa_offset 48
 19341              		.cfi_offset 6, -48
 19342 000d 53       		push	rbx	#
 19343              		.cfi_def_cfa_offset 56
 19344              		.cfi_offset 3, -56
 19345 000e 488DA424 		lea	rsp, -248[rsp]	#,
 19345      08FFFFFF 
 19346              		.cfi_def_cfa_offset 304
 19347              	# sieve_extend.c:1404: int main(int argc, char *argv[]) {
 19348              		.loc 1 1404 34 view .LVU6508
 19349 0016 64488B04 		mov	rax, QWORD PTR fs:40	# tmp571, MEM[(<address-space-1> long unsigned int *)40B]
 19349      25280000 
 19349      00
 19350 001f 48898424 		mov	QWORD PTR 232[rsp], rax	# D.7777, tmp571
 19350      E8000000 
 19351 0027 31C0     		xor	eax, eax	# tmp571
1405:sieve_extend.c ****     
1406:sieve_extend.c **** //     struct sieve_t* sieve = sieve_create(1000000);
1407:sieve_extend.c **** //     bitvector_t* bitarray = (bitvector_t*)sieve->bitarray;
1408:sieve_extend.c **** 
1409:sieve_extend.c **** //     int passes1 = benchmark(1, testshuffle_vector , sieve->bitarray, 500000);
1410:sieve_extend.c **** //     int passes2 = benchmark(1, testshuffle_vector2, sieve->bitarray, 500000);
1411:sieve_extend.c **** //     // int passes3 = benchmark(1, test3, sieve->bitarray, 500000);
1412:sieve_extend.c **** 
1413:sieve_extend.c **** //     // testshuffle(bitarray,1000000);
1414:sieve_extend.c **** // //    dump_bitarray((bitword_t *)bitarray,20);
1415:sieve_extend.c **** 
1416:sieve_extend.c **** //     sieve_delete(sieve);
1417:sieve_extend.c **** //     printf("Passes1:"); printfcomma2(passes1);printf("\n");
1418:sieve_extend.c **** //     printf("Passes2:"); printfcomma2(passes2);printf("\n");
1419:sieve_extend.c **** //     // printf("Passes3:"); printfcomma2(passes3);printf("\n");
1420:sieve_extend.c **** //     exit(0);
1421:sieve_extend.c ****     
1422:sieve_extend.c ****     
1423:sieve_extend.c ****     counter_t option_maxFactor  = default_sieve_limit;
 19352              		.loc 1 1423 5 is_stmt 1 view .LVU6509
 19353              	# sieve_extend.c:1423:     counter_t option_maxFactor  = default_sieve_limit;
 19354              		.loc 1 1423 15 is_stmt 0 view .LVU6510
 19355 0029 48C78424 		mov	QWORD PTR 176[rsp], 1000000	# option_maxFactor,
 19355      B0000000 
 19355      40420F00 
1424:sieve_extend.c ****     counter_t option_showMaxFactor = default_showMaxFactor;
 19356              		.loc 1 1424 5 is_stmt 1 view .LVU6511
 19357              	.LBB1117:
 19358              	# sieve_extend.c:1429:     for (int arg=1; arg < argc; arg++) {
1425:sieve_extend.c ****     int option_verboselevel = default_verbose_level;
1426:sieve_extend.c ****     int option_check = default_check_level;
1427:sieve_extend.c ****     int option_tunelevel = default_tune_level;
GAS LISTING /tmp/ccNeV1of.s 			page 516


1428:sieve_extend.c **** 
1429:sieve_extend.c ****     for (int arg=1; arg < argc; arg++) {
 19359              		.loc 1 1429 5 is_stmt 0 view .LVU6512
 19360 0035 83FF01   		cmp	edi, 1	# argc,
 19361              	.LBE1117:
 19362              	# sieve_extend.c:1424:     counter_t option_showMaxFactor = default_showMaxFactor;
1424:sieve_extend.c ****     counter_t option_showMaxFactor = default_showMaxFactor;
 19363              		.loc 1 1424 15 view .LVU6513
 19364 0038 48C78424 		mov	QWORD PTR 184[rsp], 0	# option_showMaxFactor,
 19364      B8000000 
 19364      00000000 
1425:sieve_extend.c ****     int option_verboselevel = default_verbose_level;
 19365              		.loc 1 1425 5 is_stmt 1 view .LVU6514
 19366              	# sieve_extend.c:1425:     int option_verboselevel = default_verbose_level;
1425:sieve_extend.c ****     int option_verboselevel = default_verbose_level;
 19367              		.loc 1 1425 9 is_stmt 0 view .LVU6515
 19368 0044 C78424A8 		mov	DWORD PTR 168[rsp], 2	# option_verboselevel,
 19368      00000002 
 19368      000000
1426:sieve_extend.c ****     int option_tunelevel = default_tune_level;
 19369              		.loc 1 1426 5 is_stmt 1 view .LVU6516
 19370              	.LVL1106:
1427:sieve_extend.c **** 
 19371              		.loc 1 1427 5 view .LVU6517
 19372              	# sieve_extend.c:1427:     int option_tunelevel = default_tune_level;
1427:sieve_extend.c **** 
 19373              		.loc 1 1427 9 is_stmt 0 view .LVU6518
 19374 004f C78424AC 		mov	DWORD PTR 172[rsp], 0	# option_tunelevel,
 19374      00000000 
 19374      000000
 19375              		.loc 1 1429 5 is_stmt 1 view .LVU6519
 19376              	.LBB1142:
 19377              		.loc 1 1429 10 view .LVU6520
 19378              	.LVL1107:
 19379              		.loc 1 1429 21 view .LVU6521
 19380              	# sieve_extend.c:1429:     for (int arg=1; arg < argc; arg++) {
 19381              		.loc 1 1429 5 is_stmt 0 view .LVU6522
 19382 005a 0F8E2C05 		jle	.L1569	#,
 19382      0000
 19383 0060 89FD     		mov	ebp, edi	# argc, tmp527
 19384 0062 4989F4   		mov	r12, rsi	# argv, tmp528
 19385              	# sieve_extend.c:1429:     for (int arg=1; arg < argc; arg++) {
 19386              		.loc 1 1429 14 view .LVU6523
 19387 0065 BB010000 		mov	ebx, 1	# arg,
 19387      00
 19388 006a 4C8D2D00 		lea	r13, .LC36[rip]	# tmp467,
 19388      000000
 19389              	# sieve_extend.c:1431:         else if (strcmp(argv[arg], "--verbose")==0) {
1430:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1431:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 19390              		.loc 1 1431 18 view .LVU6524
 19391 0071 4C8D3500 		lea	r14, .LC37[rip]	# tmp482,
 19391      000000
 19392 0078 EB66     		jmp	.L1552	#
 19393              	.LVL1108:
 19394 007a 660F1F44 		.p2align 4,,7
 19394      0000
GAS LISTING /tmp/ccNeV1of.s 			page 517


 19395              		.p2align 3
 19396              	.L1688:
1432:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No verbose level specified\n"); usage(argv[0]); }
 19397              		.loc 1 1432 13 is_stmt 1 view .LVU6525
 19398              	# sieve_extend.c:1432:             if (++arg >= argc) { fprintf(stderr, "No verbose level specified
 19399              		.loc 1 1432 16 is_stmt 0 view .LVU6526
 19400 0080 83C301   		add	ebx, 1	# arg,
 19401              	.LVL1109:
 19402              		.loc 1 1432 16 view .LVU6527
 19403 0083 39DD     		cmp	ebp, ebx	# argc, arg
 19404 0085 0F8E2B0F 		jle	.L1686	#,
 19404      0000
1433:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option_verboselevel > 4) {
 19405              		.loc 1 1433 13 is_stmt 1 view .LVU6528
 19406              	# sieve_extend.c:1433:             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option
 19407              		.loc 1 1433 28 is_stmt 0 view .LVU6529
 19408 008b 4D8D7C04 		lea	r15, 8[r12+rax]	# _16,
 19408      08
 19409              	# sieve_extend.c:1433:             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option
 19410              		.loc 1 1433 17 view .LVU6530
 19411 0090 488D9424 		lea	rdx, 168[rsp]	# tmp303,
 19411      A8000000 
 19412 0098 498B3F   		mov	rdi, QWORD PTR [r15]	#, *_16
 19413 009b 31C0     		xor	eax, eax	#
 19414 009d 488D3500 		lea	rsi, .LC32[rip]	#,
 19414      000000
 19415 00a4 E8000000 		call	__isoc99_sscanf@PLT	#
 19415      00
 19416              	.LVL1110:
 19417              	# sieve_extend.c:1433:             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option
 19418              		.loc 1 1433 16 view .LVU6531
 19419 00a9 83F801   		cmp	eax, 1	# tmp529,
 19420 00ac 0F850C05 		jne	.L1558	#,
 19420      0000
 19421              	# sieve_extend.c:1433:             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option
 19422              		.loc 1 1433 91 discriminator 1 view .LVU6532
 19423 00b2 8B9424A8 		mov	edx, DWORD PTR 168[rsp]	# option_verboselevel.16_19, option_verboselevel
 19423      000000
 19424              	# sieve_extend.c:1433:             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option
 19425              		.loc 1 1433 68 discriminator 1 view .LVU6533
 19426 00b9 83FA04   		cmp	edx, 4	# option_verboselevel.16_19,
 19427 00bc 0F8FFC04 		jg	.L1558	#,
 19427      0000
1434:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid measurement time: %s\n", argv[arg]); usage(argv[0])
1435:sieve_extend.c ****             }
1436:sieve_extend.c ****             printf("Verbose level set to %d\n",option_verboselevel);
 19428              		.loc 1 1436 13 is_stmt 1 view .LVU6534
 19429              	.LVL1111:
 19430              	.LBB1118:
 19431              	.LBI1118:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 19432              		.loc 3 105 1 view .LVU6535
 19433              	.LBB1119:
 19434              		.loc 3 107 3 view .LVU6536
 19435              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 19436              		.loc 3 107 10 is_stmt 0 view .LVU6537
 19437 00c2 488D3500 		lea	rsi, .LC40[rip]	#,
GAS LISTING /tmp/ccNeV1of.s 			page 518


 19437      000000
 19438 00c9 BF010000 		mov	edi, 1	#,
 19438      00
 19439 00ce 31C0     		xor	eax, eax	#
 19440 00d0 E8000000 		call	__printf_chk@PLT	#
 19440      00
 19441              	.LVL1112:
 19442              	.L1560:
 19443              		.loc 3 107 10 view .LVU6538
 19444              	.LBE1119:
 19445              	.LBE1118:
1429:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 19446              		.loc 1 1429 33 is_stmt 1 discriminator 2 view .LVU6539
 19447              	# sieve_extend.c:1429:     for (int arg=1; arg < argc; arg++) {
1429:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 19448              		.loc 1 1429 36 is_stmt 0 discriminator 2 view .LVU6540
 19449 00d5 83C301   		add	ebx, 1	# arg,
 19450              	.LVL1113:
1429:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 19451              		.loc 1 1429 21 is_stmt 1 discriminator 2 view .LVU6541
 19452              	# sieve_extend.c:1429:     for (int arg=1; arg < argc; arg++) {
1429:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 19453              		.loc 1 1429 5 is_stmt 0 discriminator 2 view .LVU6542
 19454 00d8 39DD     		cmp	ebp, ebx	# argc, arg
 19455 00da 0F8E0001 		jle	.L1687	#,
 19455      0000
 19456              	.LVL1114:
 19457              	.L1552:
1430:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 19458              		.loc 1 1430 9 is_stmt 1 view .LVU6543
 19459              	# sieve_extend.c:1430:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1430:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 19460              		.loc 1 1430 24 is_stmt 0 view .LVU6544
 19461 00e0 4863C3   		movsx	rax, ebx	# arg, arg
 19462              	# sieve_extend.c:1430:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1430:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 19463              		.loc 1 1430 13 view .LVU6545
 19464 00e3 41B90700 		mov	r9d, 7	# tmp292,
 19464      0000
 19465              	# sieve_extend.c:1430:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1430:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 19466              		.loc 1 1430 24 view .LVU6546
 19467 00e9 48C1E003 		sal	rax, 3	# _2,
 19468              	# sieve_extend.c:1430:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1430:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 19469              		.loc 1 1430 13 view .LVU6547
 19470 00ed 4C89EF   		mov	rdi, r13	# tmp291, tmp467
 19471              	# sieve_extend.c:1430:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1430:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 19472              		.loc 1 1430 24 view .LVU6548
 19473 00f0 4D8D3C04 		lea	r15, [r12+rax]	# _3,
 19474              	# sieve_extend.c:1430:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1430:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 19475              		.loc 1 1430 13 view .LVU6549
 19476 00f4 4C89C9   		mov	rcx, r9	# tmp493, tmp292
 19477 00f7 4D8B07   		mov	r8, QWORD PTR [r15]	# _4, *_3
 19478 00fa 4C89C6   		mov	rsi, r8	# _4, _4
GAS LISTING /tmp/ccNeV1of.s 			page 519


 19479 00fd F3A6     		repz cmpsb
 19480 00ff 0F97C2   		seta	dl	#, tmp293
 19481 0102 80DA00   		sbb	dl, 0	# _5
 19482              	# sieve_extend.c:1430:         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
1430:sieve_extend.c ****         else if (strcmp(argv[arg], "--verbose")==0) {
 19483              		.loc 1 1430 12 view .LVU6550
 19484 0105 84D2     		test	dl, dl	# _5
 19485 0107 0F84CE04 		je	.L1684	#,
 19485      0000
1431:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No verbose level specified\n"); usage(argv[0]); }
 19486              		.loc 1 1431 14 is_stmt 1 view .LVU6551
 19487              	# sieve_extend.c:1431:         else if (strcmp(argv[arg], "--verbose")==0) {
1431:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No verbose level specified\n"); usage(argv[0]); }
 19488              		.loc 1 1431 18 is_stmt 0 view .LVU6552
 19489 010d B90A0000 		mov	ecx, 10	# tmp298,
 19489      00
 19490 0112 4C89C6   		mov	rsi, r8	# _4, _4
 19491 0115 4C89F7   		mov	rdi, r14	# tmp297, tmp482
 19492 0118 F3A6     		repz cmpsb
 19493 011a 410F97C2 		seta	r10b	#, tmp299
 19494 011e 4180DA00 		sbb	r10b, 0	# _11
 19495              	# sieve_extend.c:1431:         else if (strcmp(argv[arg], "--verbose")==0) {
1431:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No verbose level specified\n"); usage(argv[0]); }
 19496              		.loc 1 1431 17 view .LVU6553
 19497 0122 4584D2   		test	r10b, r10b	# _11
 19498 0125 0F8455FF 		je	.L1688	#,
 19498      FFFF
1437:sieve_extend.c ****         } 
1438:sieve_extend.c ****         else if (strcmp(argv[arg], "--check")==0) { option_check=1; }
 19499              		.loc 1 1438 14 is_stmt 1 view .LVU6554
 19500              	# sieve_extend.c:1438:         else if (strcmp(argv[arg], "--check")==0) { option_check=1; }
 19501              		.loc 1 1438 18 is_stmt 0 view .LVU6555
 19502 012b B9080000 		mov	ecx, 8	# tmp308,
 19502      00
 19503 0130 4C89C6   		mov	rsi, r8	# _4, _4
 19504 0133 488D3D00 		lea	rdi, .LC41[rip]	# tmp307,
 19504      000000
 19505 013a F3A6     		repz cmpsb
 19506 013c 410F97C3 		seta	r11b	#, tmp309
 19507 0140 4180DB00 		sbb	r11b, 0	# _23
 19508              	# sieve_extend.c:1438:         else if (strcmp(argv[arg], "--check")==0) { option_check=1; }
 19509              		.loc 1 1438 17 view .LVU6556
 19510 0144 4584DB   		test	r11b, r11b	# _23
 19511 0147 748C     		je	.L1560	#,
1439:sieve_extend.c ****         else if (strcmp(argv[arg], "--tune")==0) { option_tunelevel=0;
 19512              		.loc 1 1439 14 is_stmt 1 view .LVU6557
 19513              	# sieve_extend.c:1439:         else if (strcmp(argv[arg], "--tune")==0) { option_tunelevel=0;
 19514              		.loc 1 1439 18 is_stmt 0 view .LVU6558
 19515 0149 4C89C6   		mov	rsi, r8	# _4, _4
 19516 014c 488D3D00 		lea	rdi, .LC42[rip]	# tmp313,
 19516      000000
 19517 0153 4C89C9   		mov	rcx, r9	# tmp499, tmp292
 19518 0156 F3A6     		repz cmpsb
 19519 0158 0F97C2   		seta	dl	#, tmp315
 19520 015b 80DA00   		sbb	dl, 0	# _24
 19521              	# sieve_extend.c:1439:         else if (strcmp(argv[arg], "--tune")==0) { option_tunelevel=0;
 19522              		.loc 1 1439 17 view .LVU6559
GAS LISTING /tmp/ccNeV1of.s 			page 520


 19523 015e 84D2     		test	dl, dl	# _24
 19524 0160 0F855A01 		jne	.L1561	#,
 19524      0000
 19525              		.loc 1 1439 52 is_stmt 1 discriminator 1 view .LVU6560
 19526              	# sieve_extend.c:1439:         else if (strcmp(argv[arg], "--tune")==0) { option_tunelevel=0;
 19527              		.loc 1 1439 68 is_stmt 0 discriminator 1 view .LVU6561
 19528 0166 C78424AC 		mov	DWORD PTR 172[rsp], 0	# option_tunelevel,
 19528      00000000 
 19528      000000
1440:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No tune level specified\n"); usage(argv[0]); }
 19529              		.loc 1 1440 13 is_stmt 1 discriminator 1 view .LVU6562
 19530              	# sieve_extend.c:1440:             if (++arg >= argc) { fprintf(stderr, "No tune level specified\n"
 19531              		.loc 1 1440 16 is_stmt 0 discriminator 1 view .LVU6563
 19532 0171 83C301   		add	ebx, 1	# arg,
 19533              	.LVL1115:
 19534              		.loc 1 1440 16 discriminator 1 view .LVU6564
 19535 0174 39DD     		cmp	ebp, ebx	# argc, arg
 19536 0176 0F8E7A0E 		jle	.L1689	#,
 19536      0000
1441:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tunelevel > 4) {
 19537              		.loc 1 1441 13 is_stmt 1 view .LVU6565
 19538              	# sieve_extend.c:1441:             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tu
 19539              		.loc 1 1441 28 is_stmt 0 view .LVU6566
 19540 017c 4D8D7C04 		lea	r15, 8[r12+rax]	# _29,
 19540      08
 19541              	# sieve_extend.c:1441:             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tu
 19542              		.loc 1 1441 17 view .LVU6567
 19543 0181 488D9424 		lea	rdx, 172[rsp]	# tmp319,
 19543      AC000000 
 19544 0189 498B3F   		mov	rdi, QWORD PTR [r15]	#, *_29
 19545 018c 31C0     		xor	eax, eax	#
 19546 018e 488D3500 		lea	rsi, .LC32[rip]	#,
 19546      000000
 19547 0195 E8000000 		call	__isoc99_sscanf@PLT	#
 19547      00
 19548              	.LVL1116:
 19549              	# sieve_extend.c:1441:             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tu
 19550              		.loc 1 1441 16 view .LVU6568
 19551 019a 83F801   		cmp	eax, 1	# tmp530,
 19552 019d 0F85350E 		jne	.L1563	#,
 19552      0000
 19553              	# sieve_extend.c:1441:             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tu
 19554              		.loc 1 1441 85 discriminator 1 view .LVU6569
 19555 01a3 8B9424AC 		mov	edx, DWORD PTR 172[rsp]	# option_tunelevel.20_32, option_tunelevel
 19555      000000
 19556              	# sieve_extend.c:1441:             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tu
 19557              		.loc 1 1441 65 discriminator 1 view .LVU6570
 19558 01aa 83FA04   		cmp	edx, 4	# option_tunelevel.20_32,
 19559 01ad 0F8F250E 		jg	.L1563	#,
 19559      0000
1442:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid tune level: %s\n", argv[arg]); usage(argv[0]);
1443:sieve_extend.c ****             }
1444:sieve_extend.c ****             printf("Tune level set to %d\n",option_tunelevel);
 19560              		.loc 1 1444 13 is_stmt 1 view .LVU6571
 19561              	.LVL1117:
 19562              	.LBB1120:
 19563              	.LBI1120:
GAS LISTING /tmp/ccNeV1of.s 			page 521


 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 19564              		.loc 3 105 1 view .LVU6572
 19565              	.LBB1121:
 19566              		.loc 3 107 3 view .LVU6573
 19567              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 19568              		.loc 3 107 10 is_stmt 0 view .LVU6574
 19569 01b3 31C0     		xor	eax, eax	#
 19570 01b5 488D3500 		lea	rsi, .LC45[rip]	#,
 19570      000000
 19571 01bc BF010000 		mov	edi, 1	#,
 19571      00
 19572              	.LBE1121:
 19573              	.LBE1120:
 19574              	# sieve_extend.c:1429:     for (int arg=1; arg < argc; arg++) {
1429:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 19575              		.loc 1 1429 36 view .LVU6575
 19576 01c1 83C301   		add	ebx, 1	# arg,
 19577              	.LVL1118:
 19578              	.LBB1123:
 19579              	.LBB1122:
 19580              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 19581              		.loc 3 107 10 view .LVU6576
 19582 01c4 E8000000 		call	__printf_chk@PLT	#
 19582      00
 19583              	.LVL1119:
 19584              		.loc 3 107 10 view .LVU6577
 19585              	.LBE1122:
 19586              	.LBE1123:
1429:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 19587              		.loc 1 1429 33 is_stmt 1 view .LVU6578
1429:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 19588              		.loc 1 1429 21 view .LVU6579
 19589              	# sieve_extend.c:1429:     for (int arg=1; arg < argc; arg++) {
1429:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 19590              		.loc 1 1429 5 is_stmt 0 view .LVU6580
 19591 01c9 39DD     		cmp	ebp, ebx	# argc, arg
 19592 01cb 0F8F0FFF 		jg	.L1552	#,
 19592      FFFF
 19593 01d1 66662E0F 		.p2align 4
 19593      1F840000 
 19593      0000000F 
 19593      1F4000
 19594              		.p2align 3
 19595              	.L1687:
1429:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 19596              		.loc 1 1429 5 view .LVU6581
 19597              	.LBE1142:
1445:sieve_extend.c ****         }
1446:sieve_extend.c ****         else if (strcmp(argv[arg], "--show")==0) { option_showMaxFactor=0;
1447:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
1448:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
1449:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
1450:sieve_extend.c ****             }
1451:sieve_extend.c ****             printf("Show maximum set to %ju\n",(uintmax_t)option_showMaxFactor);
1452:sieve_extend.c ****         }
1453:sieve_extend.c ****         else if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_maxFactor) != 1) {
1454:sieve_extend.c ****             fprintf(stderr, "Invalid size %s\n",argv[arg]); usage(argv[0]); 
GAS LISTING /tmp/ccNeV1of.s 			page 522


1455:sieve_extend.c ****             printf("Maximum set to %ju\n",(uintmax_t)option_maxFactor);
1456:sieve_extend.c ****         }
1457:sieve_extend.c ****     }
1458:sieve_extend.c **** 
1459:sieve_extend.c ****     if (option_runonce) { // used for stats and debugging
 19598              		.loc 1 1459 5 is_stmt 1 view .LVU6582
1460:sieve_extend.c ****         struct sieve_t* sieve = sieve_shake(option_maxFactor, default_blocksize);
1461:sieve_extend.c ****         printf("\nResult set:\n");
1462:sieve_extend.c ****         show_primes(sieve, option_showMaxFactor);
1463:sieve_extend.c ****         int valid = validatePrimeCount(sieve,3);
1464:sieve_extend.c ****         if (!valid) printf("The sieve is NOT valid\n");
1465:sieve_extend.c ****         else printf("The sieve is VALID\n");
1466:sieve_extend.c ****         sieve_delete(sieve);
1467:sieve_extend.c ****         exit(0);
1468:sieve_extend.c ****     }
1469:sieve_extend.c **** 
1470:sieve_extend.c ****     struct timespec start_time,end_time;
 19599              		.loc 1 1470 5 view .LVU6583
1471:sieve_extend.c **** 
1472:sieve_extend.c ****     if (option_verboselevel >=1) {
 19600              		.loc 1 1472 5 view .LVU6584
 19601              	# sieve_extend.c:1472:     if (option_verboselevel >=1) {
 19602              		.loc 1 1472 8 is_stmt 0 view .LVU6585
 19603 01e0 8BAC24A8 		mov	ebp, DWORD PTR 168[rsp]	#, option_verboselevel
 19603      000000
 19604              	.LVL1120:
 19605              		.loc 1 1472 8 view .LVU6586
 19606 01e7 85ED     		test	ebp, ebp	#
 19607 01e9 0F8F9D03 		jg	.L1569	#,
 19607      0000
 19608              	.LVL1121:
 19609              	.L1570:
1473:sieve_extend.c ****         #if __APPLE__
1474:sieve_extend.c ****             printf("Apple detected. Using arrays instead of pointers\n");
1475:sieve_extend.c ****         #else
1476:sieve_extend.c ****             printf("Using Pointers\n");
1477:sieve_extend.c ****         #endif
1478:sieve_extend.c ****     }
1479:sieve_extend.c ****         
1480:sieve_extend.c ****     if (option_check) {
1481:sieve_extend.c ****         // Count the number of primes and validate the result
1482:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Validating... ");
1483:sieve_extend.c ****         if (option_verboselevel >= 2) printf("\n");
 19610              		.loc 1 1483 9 is_stmt 1 view .LVU6587
 19611              	# sieve_extend.c:1483:         if (option_verboselevel >= 2) printf("\n");
 19612              		.loc 1 1483 12 is_stmt 0 view .LVU6588
 19613 01ef 83BC24A8 		cmp	DWORD PTR 168[rsp], 1	# option_verboselevel,
 19613      00000001 
 19614 01f7 7E0A     		jle	.L1571	#,
 19615              		.loc 1 1483 39 is_stmt 1 view .LVU6589
 19616              	.LVL1122:
 19617              	.LBB1143:
 19618              	.LBI1143:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 19619              		.loc 3 105 1 view .LVU6590
 19620              	.LBB1144:
 19621              		.loc 3 107 3 view .LVU6591
GAS LISTING /tmp/ccNeV1of.s 			page 523


 19622              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 19623              		.loc 3 107 10 is_stmt 0 view .LVU6592
 19624 01f9 BF0A0000 		mov	edi, 10	#,
 19624      00
 19625 01fe E8000000 		call	putchar@PLT	#
 19625      00
 19626              	.LVL1123:
 19627              	.L1571:
 19628              		.loc 3 107 10 view .LVU6593
 19629              	.LBE1144:
 19630              	.LBE1143:
 19631              	.LBB1145:
 19632              	# sieve_extend.c:1429:     for (int arg=1; arg < argc; arg++) {
1429:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 19633              		.loc 1 1429 14 view .LVU6594
 19634 0203 C7442428 		mov	DWORD PTR 40[rsp], 5	# %sfp,
 19634      05000000 
 19635 020b 41BD6400 		mov	r13d, 100	# sieveSize_check,
 19635      0000
 19636              	.LBE1145:
 19637              	.LBB1146:
 19638              	.LBB1147:
 19639              	.LBB1148:
 19640              	.LBB1149:
 19641              	.LBB1150:
 19642              	.LBB1151:
 19643              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 19644              		.loc 3 107 10 view .LVU6595
 19645 0211 4C8D3500 		lea	r14, .LC54[rip]	# tmp481,
 19645      000000
 19646              	.L1578:
 19647              	.LVL1124:
 19648              		.loc 3 107 10 view .LVU6596
 19649              	.LBE1151:
 19650              	.LBE1150:
 19651              	.LBE1149:
 19652              	.LBE1148:
1484:sieve_extend.c **** 
1485:sieve_extend.c ****         // validate algorithm - run one time for all sizes
1486:sieve_extend.c ****         for (counter_t sieveSize_check = 100; sieveSize_check <= 1000000; sieveSize_check *=10) {
1487:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 19653              		.loc 1 1487 13 is_stmt 1 view .LVU6597
 19654              	# sieve_extend.c:1487:             if (option_verboselevel >= 2) printf("...Checking size %ju ...",
 19655              		.loc 1 1487 37 is_stmt 0 view .LVU6598
 19656 0218 8B8424A8 		mov	eax, DWORD PTR 168[rsp]	# prephitmp_67, option_verboselevel
 19656      000000
 19657              	# sieve_extend.c:1487:             if (option_verboselevel >= 2) printf("...Checking size %ju ...",
 19658              		.loc 1 1487 16 view .LVU6599
 19659 021f 83F801   		cmp	eax, 1	# prephitmp_67,
 19660 0222 7E1D     		jle	.L1572	#,
 19661              		.loc 1 1487 43 is_stmt 1 view .LVU6600
 19662              	.LVL1125:
 19663              	.LBB1167:
 19664              	.LBI1167:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 19665              		.loc 3 105 1 view .LVU6601
 19666              	.LBB1168:
GAS LISTING /tmp/ccNeV1of.s 			page 524


 19667              		.loc 3 107 3 view .LVU6602
 19668              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 19669              		.loc 3 107 10 is_stmt 0 view .LVU6603
 19670 0224 4C89EA   		mov	rdx, r13	#, sieveSize_check
 19671 0227 488D3500 		lea	rsi, .LC53[rip]	#,
 19671      000000
 19672 022e BF010000 		mov	edi, 1	#,
 19672      00
 19673 0233 31C0     		xor	eax, eax	#
 19674 0235 E8000000 		call	__printf_chk@PLT	#
 19674      00
 19675              	.LVL1126:
 19676 023a 8B8424A8 		mov	eax, DWORD PTR 168[rsp]	# prephitmp_67, option_verboselevel
 19676      000000
 19677              	.LVL1127:
 19678              	.L1572:
 19679              		.loc 3 107 10 view .LVU6604
 19680              	.LBE1168:
 19681              	.LBE1167:
 19682              	.LBE1147:
 19683              	.LBE1146:
 19684              	.LBB1177:
 19685              	# sieve_extend.c:1429:     for (int arg=1; arg < argc; arg++) {
1429:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 19686              		.loc 1 1429 14 view .LVU6605
 19687 0241 41BC0500 		mov	r12d, 5	# ivtmp_69,
 19687      0000
 19688 0247 BD000400 		mov	ebp, 1024	# blocksize_bits,
 19688      00
 19689 024c EB56     		jmp	.L1576	#
 19690              	.LVL1128:
 19691 024e 6690     		.p2align 4,,7
 19692              		.p2align 3
 19693              	.L1573:
1429:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 19694              		.loc 1 1429 14 view .LVU6606
 19695              	.LBE1177:
 19696              	.LBB1178:
 19697              	.LBB1174:
 19698              	.LBB1169:
 19699              	.LBB1162:
1488:sieve_extend.c ****             struct sieve_t *sieve_check;
1489:sieve_extend.c ****             for (counter_t blocksize_bits=1024; blocksize_bits<=2*1024*8; blocksize_bits *= 2) {
1490:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
1491:sieve_extend.c ****                 sieve_check = sieve_shake(sieveSize_check, blocksize_bits);
 19700              		.loc 1 1491 17 is_stmt 1 view .LVU6607
 19701              	# sieve_extend.c:1491:                 sieve_check = sieve_shake(sieveSize_check, blocksize_bits);
 19702              		.loc 1 1491 31 is_stmt 0 view .LVU6608
 19703 0250 4889EE   		mov	rsi, rbp	#, blocksize_bits
 19704 0253 4C89EF   		mov	rdi, r13	#, sieveSize_check
 19705 0256 E8000000 		call	sieve_shake	#
 19705      00
 19706              	.LVL1129:
 19707              	# sieve_extend.c:1492:                 int valid = validatePrimeCount(sieve_check,option_verboselev
1492:sieve_extend.c ****                 int valid = validatePrimeCount(sieve_check,option_verboselevel);
 19708              		.loc 1 1492 29 view .LVU6609
 19709 025b 8BB424A8 		mov	esi, DWORD PTR 168[rsp]	#, option_verboselevel
GAS LISTING /tmp/ccNeV1of.s 			page 525


 19709      000000
 19710              	# sieve_extend.c:1491:                 sieve_check = sieve_shake(sieveSize_check, blocksize_bits);
1491:sieve_extend.c ****                 int valid = validatePrimeCount(sieve_check,option_verboselevel);
 19711              		.loc 1 1491 31 view .LVU6610
 19712 0262 4989C7   		mov	r15, rax	# sieve_check, tmp533
 19713              	.LVL1130:
 19714              		.loc 1 1492 17 is_stmt 1 view .LVU6611
 19715              	# sieve_extend.c:1492:                 int valid = validatePrimeCount(sieve_check,option_verboselev
 19716              		.loc 1 1492 29 is_stmt 0 view .LVU6612
 19717 0265 4889C7   		mov	rdi, rax	#, sieve_check
 19718 0268 E8000000 		call	validatePrimeCount	#
 19718      00
 19719              	.LVL1131:
 19720              	.LBB1153:
 19721              	.LBB1154:
 19722              	# sieve_extend.c:119:     free(sieve->bitarray);
 119:sieve_extend.c ****     free(sieve);
 19723              		.loc 1 119 5 view .LVU6613
 19724 026d 498B3F   		mov	rdi, QWORD PTR [r15]	#, sieve_check_130->bitarray
 19725              	.LBE1154:
 19726              	.LBE1153:
 19727              	# sieve_extend.c:1492:                 int valid = validatePrimeCount(sieve_check,option_verboselev
 19728              		.loc 1 1492 29 view .LVU6614
 19729 0270 89C3     		mov	ebx, eax	# valid, tmp534
 19730              	.LVL1132:
1493:sieve_extend.c ****                 sieve_delete(sieve_check);
 19731              		.loc 1 1493 17 is_stmt 1 view .LVU6615
 19732              	.LBB1156:
 19733              	.LBI1153:
 118:sieve_extend.c ****     free(sieve->bitarray);
 19734              		.loc 1 118 13 view .LVU6616
 19735              	.LBB1155:
 119:sieve_extend.c ****     free(sieve);
 19736              		.loc 1 119 5 view .LVU6617
 19737 0272 E8000000 		call	free@PLT	#
 19737      00
 19738              	.LVL1133:
 120:sieve_extend.c **** }
 19739              		.loc 1 120 5 view .LVU6618
 19740 0277 4C89FF   		mov	rdi, r15	#, sieve_check
 19741 027a E8000000 		call	free@PLT	#
 19741      00
 19742              	.LVL1134:
 120:sieve_extend.c **** }
 19743              		.loc 1 120 5 is_stmt 0 view .LVU6619
 19744              	.LBE1155:
 19745              	.LBE1156:
1494:sieve_extend.c ****                 if (!valid) return 0; else if (option_verboselevel >= 3) printf("valid;");
 19746              		.loc 1 1494 17 is_stmt 1 view .LVU6620
 19747              	# sieve_extend.c:1494:                 if (!valid) return 0; else if (option_verboselevel >= 3) pri
 19748              		.loc 1 1494 20 is_stmt 0 view .LVU6621
 19749 027f 85DB     		test	ebx, ebx	# valid
 19750 0281 0F84D902 		je	.L1614	#,
 19750      0000
 19751              		.loc 1 1494 44 is_stmt 1 discriminator 2 view .LVU6622
 19752              	# sieve_extend.c:1494:                 if (!valid) return 0; else if (option_verboselevel >= 3) pri
 19753              		.loc 1 1494 68 is_stmt 0 discriminator 2 view .LVU6623
GAS LISTING /tmp/ccNeV1of.s 			page 526


 19754 0287 8B8424A8 		mov	eax, DWORD PTR 168[rsp]	# prephitmp_67, option_verboselevel
 19754      000000
 19755              	# sieve_extend.c:1494:                 if (!valid) return 0; else if (option_verboselevel >= 3) pri
 19756              		.loc 1 1494 47 discriminator 2 view .LVU6624
 19757 028e 83F802   		cmp	eax, 2	# prephitmp_67,
 19758 0291 0F8FE900 		jg	.L1690	#,
 19758      0000
 19759              	.LBE1162:
1489:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 19760              		.loc 1 1489 75 is_stmt 1 discriminator 2 view .LVU6625
 19761              	# sieve_extend.c:1489:             for (counter_t blocksize_bits=1024; blocksize_bits<=2*1024*8; bl
1489:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 19762              		.loc 1 1489 90 is_stmt 0 discriminator 2 view .LVU6626
 19763 0297 4801ED   		add	rbp, rbp	# blocksize_bits
 19764              	.LVL1135:
1489:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 19765              		.loc 1 1489 49 is_stmt 1 discriminator 2 view .LVU6627
 19766              	# sieve_extend.c:1489:             for (counter_t blocksize_bits=1024; blocksize_bits<=2*1024*8; bl
1489:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 19767              		.loc 1 1489 13 is_stmt 0 discriminator 2 view .LVU6628
 19768 029a 4183EC01 		sub	r12d, 1	# ivtmp_69,
 19769 029e 0F840301 		je	.L1691	#,
 19769      0000
 19770              	.LVL1136:
 19771              	.L1576:
 19772              	.LBB1163:
1490:sieve_extend.c ****                 sieve_check = sieve_shake(sieveSize_check, blocksize_bits);
 19773              		.loc 1 1490 17 is_stmt 1 view .LVU6629
 19774              	# sieve_extend.c:1490:                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uint
1490:sieve_extend.c ****                 sieve_check = sieve_shake(sieveSize_check, blocksize_bits);
 19775              		.loc 1 1490 20 is_stmt 0 view .LVU6630
 19776 02a4 83F802   		cmp	eax, 2	# prephitmp_67,
 19777 02a7 7EA7     		jle	.L1573	#,
1490:sieve_extend.c ****                 sieve_check = sieve_shake(sieveSize_check, blocksize_bits);
 19778              		.loc 1 1490 47 is_stmt 1 view .LVU6631
 19779              	.LVL1137:
 19780              	.LBB1157:
 19781              	.LBI1150:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 19782              		.loc 3 105 1 view .LVU6632
 19783              	.LBB1152:
 19784              		.loc 3 107 3 view .LVU6633
 19785              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 19786              		.loc 3 107 10 is_stmt 0 view .LVU6634
 19787 02a9 4889EA   		mov	rdx, rbp	#, blocksize_bits
 19788 02ac 4C89F6   		mov	rsi, r14	#, tmp481
 19789 02af BF010000 		mov	edi, 1	#,
 19789      00
 19790 02b4 31C0     		xor	eax, eax	#
 19791 02b6 E8000000 		call	__printf_chk@PLT	#
 19791      00
 19792              	.LVL1138:
 19793 02bb EB93     		jmp	.L1573	#
 19794              	.LVL1139:
 19795 02bd 0F1F00   		.p2align 4,,7
 19796              		.p2align 3
 19797              	.L1561:
GAS LISTING /tmp/ccNeV1of.s 			page 527


 19798              		.loc 3 107 10 view .LVU6635
 19799              	.LBE1152:
 19800              	.LBE1157:
 19801              	.LBE1163:
 19802              	.LBE1169:
 19803              	.LBE1174:
 19804              	.LBE1178:
 19805              	.LBB1179:
1446:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
 19806              		.loc 1 1446 14 is_stmt 1 view .LVU6636
 19807              	# sieve_extend.c:1446:         else if (strcmp(argv[arg], "--show")==0) { option_showMaxFactor=0;
1446:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
 19808              		.loc 1 1446 18 is_stmt 0 view .LVU6637
 19809 02c0 4C89C9   		mov	rcx, r9	# tmp292, tmp292
 19810 02c3 4C89C6   		mov	rsi, r8	# _4, _4
 19811 02c6 488D3D00 		lea	rdi, .LC46[rip]	# tmp323,
 19811      000000
 19812 02cd F3A6     		repz cmpsb
 19813 02cf 410F97C1 		seta	r9b	#, tmp325
 19814 02d3 4180D900 		sbb	r9b, 0	# _36
 19815              	# sieve_extend.c:1446:         else if (strcmp(argv[arg], "--show")==0) { option_showMaxFactor=0;
1446:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
 19816              		.loc 1 1446 17 view .LVU6638
 19817 02d7 4584C9   		test	r9b, r9b	# _36
 19818 02da 756C     		jne	.L1565	#,
1446:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
 19819              		.loc 1 1446 52 is_stmt 1 discriminator 1 view .LVU6639
 19820              	# sieve_extend.c:1446:         else if (strcmp(argv[arg], "--show")==0) { option_showMaxFactor=0;
1446:sieve_extend.c ****             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\n"); usage(argv[0]); }
 19821              		.loc 1 1446 72 is_stmt 0 discriminator 1 view .LVU6640
 19822 02dc 48C78424 		mov	QWORD PTR 184[rsp], 0	# option_showMaxFactor,
 19822      B8000000 
 19822      00000000 
1447:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
 19823              		.loc 1 1447 13 is_stmt 1 discriminator 1 view .LVU6641
 19824              	# sieve_extend.c:1447:             if (++arg >= argc) { fprintf(stderr, "No show maximum specified\
1447:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
 19825              		.loc 1 1447 16 is_stmt 0 discriminator 1 view .LVU6642
 19826 02e8 83C301   		add	ebx, 1	# arg,
 19827              	.LVL1140:
1447:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
 19828              		.loc 1 1447 16 discriminator 1 view .LVU6643
 19829 02eb 39DD     		cmp	ebp, ebx	# argc, arg
 19830 02ed 0F8E2E0D 		jle	.L1692	#,
 19830      0000
1448:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
 19831              		.loc 1 1448 13 is_stmt 1 view .LVU6644
 19832              	# sieve_extend.c:1448:             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) 
1448:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
 19833              		.loc 1 1448 28 is_stmt 0 view .LVU6645
 19834 02f3 4D8D7C04 		lea	r15, 8[r12+rax]	# _41,
 19834      08
 19835              	# sieve_extend.c:1448:             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) 
1448:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
 19836              		.loc 1 1448 17 view .LVU6646
 19837 02f8 488D9424 		lea	rdx, 184[rsp]	# tmp329,
 19837      B8000000 
GAS LISTING /tmp/ccNeV1of.s 			page 528


 19838 0300 498B3F   		mov	rdi, QWORD PTR [r15]	#, *_41
 19839 0303 31C0     		xor	eax, eax	#
 19840 0305 488D3500 		lea	rsi, .LC48[rip]	#,
 19840      000000
 19841 030c E8000000 		call	__isoc99_sscanf@PLT	#
 19841      00
 19842              	.LVL1141:
 19843              	# sieve_extend.c:1448:             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) 
1448:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
 19844              		.loc 1 1448 16 view .LVU6647
 19845 0311 83F801   		cmp	eax, 1	# tmp531,
 19846 0314 0F85CD0C 		jne	.L1567	#,
 19846      0000
 19847              	# sieve_extend.c:1448:             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) 
1448:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
 19848              		.loc 1 1448 106 discriminator 1 view .LVU6648
 19849 031a 488B9424 		mov	rdx, QWORD PTR 184[rsp]	# option_showMaxFactor.24_44, option_showMaxFactor
 19849      B8000000 
 19850              	# sieve_extend.c:1448:             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) 
1448:sieve_extend.c ****                 fprintf(stderr, "Error: Invalid show maximum: %s\n", argv[arg]); usage(argv[0]);
 19851              		.loc 1 1448 82 discriminator 1 view .LVU6649
 19852 0322 483B9424 		cmp	rdx, QWORD PTR 176[rsp]	# option_showMaxFactor.24_44, option_maxFactor
 19852      B0000000 
 19853 032a 0F87B70C 		ja	.L1567	#,
 19853      0000
1451:sieve_extend.c ****         }
 19854              		.loc 1 1451 13 is_stmt 1 view .LVU6650
 19855              	.LVL1142:
 19856              	.LBB1124:
 19857              	.LBI1124:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 19858              		.loc 3 105 1 view .LVU6651
 19859              	.LBB1125:
 19860              		.loc 3 107 3 view .LVU6652
 19861              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 19862              		.loc 3 107 10 is_stmt 0 view .LVU6653
 19863 0330 488D3500 		lea	rsi, .LC50[rip]	#,
 19863      000000
 19864 0337 BF010000 		mov	edi, 1	#,
 19864      00
 19865 033c 31C0     		xor	eax, eax	#
 19866 033e E8000000 		call	__printf_chk@PLT	#
 19866      00
 19867              	.LVL1143:
 19868 0343 E98DFDFF 		jmp	.L1560	#
 19868      FF
 19869              	.LVL1144:
 19870              		.p2align 4,,7
 19871              		.p2align 3
 19872              	.L1565:
 19873              		.loc 3 107 10 view .LVU6654
 19874              	.LBE1125:
 19875              	.LBE1124:
1453:sieve_extend.c ****             fprintf(stderr, "Invalid size %s\n",argv[arg]); usage(argv[0]); 
 19876              		.loc 1 1453 14 is_stmt 1 view .LVU6655
 19877              	# sieve_extend.c:1453:         else if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_maxFactor) != 
1453:sieve_extend.c ****             fprintf(stderr, "Invalid size %s\n",argv[arg]); usage(argv[0]); 
GAS LISTING /tmp/ccNeV1of.s 			page 529


 19878              		.loc 1 1453 18 is_stmt 0 view .LVU6656
 19879 0348 31C0     		xor	eax, eax	#
 19880 034a 488D9424 		lea	rdx, 176[rsp]	# tmp331,
 19880      B0000000 
 19881 0352 488D3500 		lea	rsi, .LC48[rip]	#,
 19881      000000
 19882 0359 4C89C7   		mov	rdi, r8	#, _4
 19883 035c E8000000 		call	__isoc99_sscanf@PLT	#
 19883      00
 19884              	.LVL1145:
 19885              	# sieve_extend.c:1453:         else if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_maxFactor) != 
1453:sieve_extend.c ****             fprintf(stderr, "Invalid size %s\n",argv[arg]); usage(argv[0]); 
 19886              		.loc 1 1453 17 view .LVU6657
 19887 0361 83F801   		cmp	eax, 1	# tmp532,
 19888 0364 0F846BFD 		je	.L1560	#,
 19888      FFFF
1454:sieve_extend.c ****             printf("Maximum set to %ju\n",(uintmax_t)option_maxFactor);
 19889              		.loc 1 1454 13 is_stmt 1 view .LVU6658
 19890              	.LVL1146:
 19891              	.LBB1126:
 19892              	.LBI1126:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 19893              		.loc 3 98 1 view .LVU6659
 19894              	.LBB1127:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 19895              		.loc 3 100 3 view .LVU6660
 19896              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 19897              		.loc 3 100 10 is_stmt 0 view .LVU6661
 19898 036a 498B0F   		mov	rcx, QWORD PTR [r15]	#, *_3
 19899 036d 488D1500 		lea	rdx, .LC51[rip]	#,
 19899      000000
 19900 0374 E94F0200 		jmp	.L1683	#
 19900      00
 19901              	.LVL1147:
 19902 0379 0F1F8000 		.p2align 4,,7
 19902      000000
 19903              		.p2align 3
 19904              	.L1690:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 19905              		.loc 3 100 10 view .LVU6662
 19906              	.LBE1127:
 19907              	.LBE1126:
 19908              	.LBE1179:
 19909              	.LBB1180:
 19910              	.LBB1175:
 19911              	.LBB1170:
 19912              	.LBB1164:
 19913              		.loc 1 1494 74 is_stmt 1 view .LVU6663
 19914              	.LBB1158:
 19915              	.LBI1158:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 19916              		.loc 3 105 1 view .LVU6664
 19917              	.LBB1159:
 19918              		.loc 3 107 3 view .LVU6665
 19919              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 19920              		.loc 3 107 10 is_stmt 0 view .LVU6666
GAS LISTING /tmp/ccNeV1of.s 			page 530


 19921 0380 31C0     		xor	eax, eax	#
 19922 0382 488D3500 		lea	rsi, .LC55[rip]	#,
 19922      000000
 19923 0389 BF010000 		mov	edi, 1	#,
 19923      00
 19924              	.LBE1159:
 19925              	.LBE1158:
 19926              	.LBE1164:
 19927              	# sieve_extend.c:1489:             for (counter_t blocksize_bits=1024; blocksize_bits<=2*1024*8; bl
1489:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 19928              		.loc 1 1489 90 view .LVU6667
 19929 038e 4801ED   		add	rbp, rbp	# blocksize_bits
 19930              	.LVL1148:
 19931              	.LBB1165:
 19932              	.LBB1161:
 19933              	.LBB1160:
 19934              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 19935              		.loc 3 107 10 view .LVU6668
 19936 0391 E8000000 		call	__printf_chk@PLT	#
 19936      00
 19937              	.LVL1149:
 19938 0396 8B8424A8 		mov	eax, DWORD PTR 168[rsp]	# prephitmp_67, option_verboselevel
 19938      000000
 19939              	.LVL1150:
 19940              		.loc 3 107 10 view .LVU6669
 19941              	.LBE1160:
 19942              	.LBE1161:
 19943              	.LBE1165:
1489:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 19944              		.loc 1 1489 75 is_stmt 1 view .LVU6670
1489:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 19945              		.loc 1 1489 49 view .LVU6671
 19946              	# sieve_extend.c:1489:             for (counter_t blocksize_bits=1024; blocksize_bits<=2*1024*8; bl
1489:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 19947              		.loc 1 1489 13 is_stmt 0 view .LVU6672
 19948 039d 4183EC01 		sub	r12d, 1	# ivtmp_69,
 19949 03a1 0F85FDFE 		jne	.L1576	#,
 19949      FFFF
 19950              	.L1691:
1489:sieve_extend.c ****                 if (option_verboselevel >= 3) printf(".blocksize %ju-",(uintmax_t)blocksize_bits);
 19951              		.loc 1 1489 13 view .LVU6673
 19952              	.LBE1170:
1495:sieve_extend.c ****             }
1496:sieve_extend.c ****             if (option_verboselevel >= 2) printf("\n");
 19953              		.loc 1 1496 13 is_stmt 1 view .LVU6674
 19954              	# sieve_extend.c:1496:             if (option_verboselevel >= 2) printf("\n");
 19955              		.loc 1 1496 16 is_stmt 0 view .LVU6675
 19956 03a7 83F801   		cmp	eax, 1	# prephitmp_67,
 19957 03aa 7E0A     		jle	.L1577	#,
 19958              		.loc 1 1496 43 is_stmt 1 view .LVU6676
 19959              	.LVL1151:
 19960              	.LBB1171:
 19961              	.LBI1171:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 19962              		.loc 3 105 1 view .LVU6677
 19963              	.LBB1172:
 19964              		.loc 3 107 3 view .LVU6678
GAS LISTING /tmp/ccNeV1of.s 			page 531


 19965              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 19966              		.loc 3 107 10 is_stmt 0 view .LVU6679
 19967 03ac BF0A0000 		mov	edi, 10	#,
 19967      00
 19968 03b1 E8000000 		call	putchar@PLT	#
 19968      00
 19969              	.LVL1152:
 19970              	.L1577:
 19971              		.loc 3 107 10 view .LVU6680
 19972              	.LBE1172:
 19973              	.LBE1171:
 19974              	.LBE1175:
1486:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 19975              		.loc 1 1486 75 is_stmt 1 discriminator 2 view .LVU6681
 19976              	# sieve_extend.c:1486:         for (counter_t sieveSize_check = 100; sieveSize_check <= 1000000; si
1486:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 19977              		.loc 1 1486 91 is_stmt 0 discriminator 2 view .LVU6682
 19978 03b6 4F8D6CAD 		lea	r13, 0[r13+r13*4]	# tmp337,
 19978      00
 19979              	.LVL1153:
1486:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 19980              		.loc 1 1486 91 discriminator 2 view .LVU6683
 19981 03bb 4D01ED   		add	r13, r13	# sieveSize_check
 19982              	.LVL1154:
1486:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 19983              		.loc 1 1486 47 is_stmt 1 discriminator 2 view .LVU6684
 19984              	# sieve_extend.c:1486:         for (counter_t sieveSize_check = 100; sieveSize_check <= 1000000; si
1486:sieve_extend.c ****             if (option_verboselevel >= 2) printf("...Checking size %ju ...",(uintmax_t)sieveSize_ch
 19985              		.loc 1 1486 9 is_stmt 0 discriminator 2 view .LVU6685
 19986 03be 836C2428 		sub	DWORD PTR 40[rsp], 1	# %sfp,
 19986      01
 19987 03c3 0F854FFE 		jne	.L1578	#,
 19987      FFFF
 19988              	.LBE1180:
1497:sieve_extend.c ****         }
1498:sieve_extend.c ****         if (option_verboselevel >= 1) printf("...Valid algorithm\n");
 19989              		.loc 1 1498 9 is_stmt 1 view .LVU6686
 19990              	# sieve_extend.c:1498:         if (option_verboselevel >= 1) printf("...Valid algorithm\n");
 19991              		.loc 1 1498 12 is_stmt 0 view .LVU6687
 19992 03c9 83BC24A8 		cmp	DWORD PTR 168[rsp], 0	# option_verboselevel,
 19992      00000000 
 19993 03d1 0F8FCC09 		jg	.L1693	#,
 19993      0000
1499:sieve_extend.c ****     }
1500:sieve_extend.c ****     
1501:sieve_extend.c ****     counter_t best_blocksize_bits = default_blocksize;
 19994              		.loc 1 1501 5 is_stmt 1 view .LVU6688
 19995              	.LVL1155:
1502:sieve_extend.c ****     if (option_tunelevel) {
 19996              		.loc 1 1502 5 view .LVU6689
 19997              	# sieve_extend.c:1502:     if (option_tunelevel) {
 19998              		.loc 1 1502 9 is_stmt 0 view .LVU6690
 19999 03d7 448B8424 		mov	r8d, DWORD PTR 172[rsp]	# option_tunelevel.41_405, option_tunelevel
 19999      AC000000 
 20000              	# sieve_extend.c:1501:     counter_t best_blocksize_bits = default_blocksize;
1501:sieve_extend.c ****     if (option_tunelevel) {
 20001              		.loc 1 1501 15 view .LVU6691
GAS LISTING /tmp/ccNeV1of.s 			page 532


 20002 03df 41BC00FC 		mov	r12d, 261120	# best_result$blocksize_bits,
 20002      0300
 20003              	# sieve_extend.c:1502:     if (option_tunelevel) {
 20004              		.loc 1 1502 8 view .LVU6692
 20005 03e5 4585C0   		test	r8d, r8d	# option_tunelevel.41_405
 20006 03e8 0F85B802 		jne	.L1694	#,
 20006      0000
 20007              	.LVL1156:
 20008              	.L1607:
 20009              	.LBB1181:
1503:sieve_extend.c ****         tuning_result_type tuning_result = tune(option_tunelevel, option_maxFactor, option_verbosel
1504:sieve_extend.c ****         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
1505:sieve_extend.c ****         global_MEDIUMSTEP_FASTER = tuning_result.mediumstep_faster;
1506:sieve_extend.c ****         global_VECTORSTEP_FASTER = tuning_result.vectorstep_faster;
1507:sieve_extend.c ****         best_blocksize_bits = tuning_result.blocksize_bits;
1508:sieve_extend.c ****     }
1509:sieve_extend.c **** 
1510:sieve_extend.c ****     double max_time = default_sieve_duration;
1511:sieve_extend.c ****     if (best_blocksize_bits > 0) {
1512:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
1513:sieve_extend.c ****         counter_t passes = 0;
 20010              		.loc 1 1513 9 is_stmt 1 view .LVU6693
1514:sieve_extend.c ****         counter_t blocksize_bits = best_blocksize_bits;
 20011              		.loc 1 1514 9 view .LVU6694
1515:sieve_extend.c ****         double elapsed_time = 0;
 20012              		.loc 1 1515 9 view .LVU6695
1516:sieve_extend.c ****         struct sieve_t *sieve;
 20013              		.loc 1 1516 9 view .LVU6696
1517:sieve_extend.c ****         clock_gettime(CLOCK_MONOTONIC,&start_time);
 20014              		.loc 1 1517 9 view .LVU6697
 20015 03ee 488DB424 		lea	rsi, 192[rsp]	# tmp440,
 20015      C0000000 
 20016 03f6 BF010000 		mov	edi, 1	#,
 20016      00
 20017 03fb E8000000 		call	clock_gettime@PLT	#
 20017      00
 20018              	.LVL1157:
1518:sieve_extend.c ****         while (elapsed_time <= max_time) {
 20019              		.loc 1 1518 9 view .LVU6698
 20020              		.loc 1 1518 15 view .LVU6699
 20021              	# sieve_extend.c:1513:         counter_t passes = 0;
1513:sieve_extend.c ****         counter_t blocksize_bits = best_blocksize_bits;
 20022              		.loc 1 1513 19 is_stmt 0 view .LVU6700
 20023 0400 4531FF   		xor	r15d, r15d	# passes
 20024 0403 4C8DAC24 		lea	r13, 208[rsp]	# tmp465,
 20024      D0000000 
 20025              	.LVL1158:
 20026              	.L1608:
1519:sieve_extend.c ****             sieve = sieve_shake(option_maxFactor, blocksize_bits);//blocksize_bits);
 20027              		.loc 1 1519 13 is_stmt 1 view .LVU6701
 20028              	# sieve_extend.c:1519:             sieve = sieve_shake(option_maxFactor, blocksize_bits);//blocksiz
 20029              		.loc 1 1519 21 is_stmt 0 view .LVU6702
 20030 040b 488BBC24 		mov	rdi, QWORD PTR 176[rsp]	#, option_maxFactor
 20030      B0000000 
 20031 0413 4C89E6   		mov	rsi, r12	#, best_result$blocksize_bits
 20032              	# sieve_extend.c:1521:             passes++;
1520:sieve_extend.c ****             sieve_delete(sieve);
GAS LISTING /tmp/ccNeV1of.s 			page 533


1521:sieve_extend.c ****             passes++;
 20033              		.loc 1 1521 19 view .LVU6703
 20034 0416 4983C701 		add	r15, 1	# passes,
 20035              	# sieve_extend.c:1519:             sieve = sieve_shake(option_maxFactor, blocksize_bits);//blocksiz
1519:sieve_extend.c ****             sieve = sieve_shake(option_maxFactor, blocksize_bits);//blocksize_bits);
 20036              		.loc 1 1519 21 view .LVU6704
 20037 041a E8000000 		call	sieve_shake	#
 20037      00
 20038              	.LVL1159:
 20039              	.LBB1182:
 20040              	.LBB1183:
 20041              	# sieve_extend.c:119:     free(sieve->bitarray);
 119:sieve_extend.c ****     free(sieve);
 20042              		.loc 1 119 5 view .LVU6705
 20043 041f 488B38   		mov	rdi, QWORD PTR [rax]	#, sieve_148->bitarray
 20044              	.LBE1183:
 20045              	.LBE1182:
 20046              	# sieve_extend.c:1519:             sieve = sieve_shake(option_maxFactor, blocksize_bits);//blocksiz
1519:sieve_extend.c ****             sieve = sieve_shake(option_maxFactor, blocksize_bits);//blocksize_bits);
 20047              		.loc 1 1519 21 view .LVU6706
 20048 0422 4989C6   		mov	r14, rax	# sieve, tmp536
 20049              	.LVL1160:
1520:sieve_extend.c ****             sieve_delete(sieve);
 20050              		.loc 1 1520 13 is_stmt 1 view .LVU6707
 20051              	.LBB1187:
 20052              	.LBI1182:
 118:sieve_extend.c ****     free(sieve->bitarray);
 20053              		.loc 1 118 13 view .LVU6708
 20054              	.LBB1184:
 119:sieve_extend.c ****     free(sieve);
 20055              		.loc 1 119 5 view .LVU6709
 20056 0425 E8000000 		call	free@PLT	#
 20056      00
 20057              	.LVL1161:
 120:sieve_extend.c **** }
 20058              		.loc 1 120 5 view .LVU6710
 20059 042a 4C89F7   		mov	rdi, r14	#, sieve
 20060 042d E8000000 		call	free@PLT	#
 20060      00
 20061              	.LVL1162:
 120:sieve_extend.c **** }
 20062              		.loc 1 120 5 is_stmt 0 view .LVU6711
 20063              	.LBE1184:
 20064              	.LBE1187:
 20065              		.loc 1 1521 13 is_stmt 1 view .LVU6712
1522:sieve_extend.c ****             clock_gettime(CLOCK_MONOTONIC,&end_time);
 20066              		.loc 1 1522 13 view .LVU6713
 20067 0432 4C89EE   		mov	rsi, r13	#, tmp465
 20068 0435 BF010000 		mov	edi, 1	#,
 20068      00
 20069 043a E8000000 		call	clock_gettime@PLT	#
 20069      00
 20070              	.LVL1163:
1523:sieve_extend.c ****             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time
 20071              		.loc 1 1523 13 view .LVU6714
 20072              	# sieve_extend.c:1523:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 20073              		.loc 1 1523 62 is_stmt 0 view .LVU6715
GAS LISTING /tmp/ccNeV1of.s 			page 534


 20074 043f C4E1D32A 		vcvtsi2sd	xmm5, xmm5, QWORD PTR 216[rsp]	# tmp443, end_time.tv_nsec
 20074      AC24D800 
 20074      0000
 20075              	# sieve_extend.c:1523:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 20076              		.loc 1 1523 68 view .LVU6716
 20077 0449 C4E1EB2A 		vcvtsi2sd	xmm2, xmm2, QWORD PTR 192[rsp]	# tmp444, start_time.tv_sec
 20077      9424C000 
 20077      0000
 20078              	# sieve_extend.c:1523:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 20079              		.loc 1 1523 108 view .LVU6717
 20080 0453 C461BB2A 		vcvtsi2sd	xmm8, xmm8, QWORD PTR 200[rsp]	# tmp446, start_time.tv_nsec
 20080      8424C800 
 20080      0000
 20081              	# sieve_extend.c:1523:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 20082              		.loc 1 1523 44 view .LVU6718
 20083 045d C461B32A 		vcvtsi2sd	xmm9, xmm9, QWORD PTR 208[rsp]	# tmp447, end_time.tv_sec
 20083      8C24D000 
 20083      0000
 20084              	# sieve_extend.c:1518:         while (elapsed_time <= max_time) {
1518:sieve_extend.c ****             sieve = sieve_shake(option_maxFactor, blocksize_bits);//blocksize_bits);
 20085              		.loc 1 1518 15 view .LVU6719
 20086 0467 C57B1015 		vmovsd	xmm10, QWORD PTR .LC67[rip]	# tmp649,
 20086      00000000 
 20087 046f C4E2E99B 		vfmsub132sd	xmm5, xmm2, QWORD PTR .LC14[rip]	# _305, tmp444,
 20087      2D000000 
 20087      00
 20088 0478 C462B19D 		vfnmadd132sd	xmm8, xmm9, QWORD PTR .LC14[rip]	# _306, tmp447,
 20088      05000000 
 20088      00
 20089              	# sieve_extend.c:1523:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 20090              		.loc 1 1523 26 view .LVU6720
 20091 0481 C4C15358 		vaddsd	xmm0, xmm5, xmm8	# elapsed_time, _305, _306
 20091      C0
 20092              	.LVL1164:
1518:sieve_extend.c ****             sieve = sieve_shake(option_maxFactor, blocksize_bits);//blocksize_bits);
 20093              		.loc 1 1518 15 is_stmt 1 view .LVU6721
 20094 0486 C5792FD0 		vcomisd	xmm10, xmm0	# tmp649, elapsed_time
 20095 048a 0F828500 		jb	.L1680	#,
 20095      0000
 20096              	.LVL1165:
1519:sieve_extend.c ****             sieve_delete(sieve);
 20097              		.loc 1 1519 13 view .LVU6722
 20098              	# sieve_extend.c:1519:             sieve = sieve_shake(option_maxFactor, blocksize_bits);//blocksiz
1519:sieve_extend.c ****             sieve_delete(sieve);
 20099              		.loc 1 1519 21 is_stmt 0 view .LVU6723
 20100 0490 488BBC24 		mov	rdi, QWORD PTR 176[rsp]	#, option_maxFactor
 20100      B0000000 
 20101 0498 4C89E6   		mov	rsi, r12	#, best_result$blocksize_bits
 20102              	# sieve_extend.c:1521:             passes++;
1521:sieve_extend.c ****             clock_gettime(CLOCK_MONOTONIC,&end_time);
 20103              		.loc 1 1521 19 view .LVU6724
 20104 049b 4983C701 		add	r15, 1	# passes,
 20105              	# sieve_extend.c:1519:             sieve = sieve_shake(option_maxFactor, blocksize_bits);//blocksiz
1519:sieve_extend.c ****             sieve_delete(sieve);
 20106              		.loc 1 1519 21 view .LVU6725
 20107 049f E8000000 		call	sieve_shake	#
 20107      00
GAS LISTING /tmp/ccNeV1of.s 			page 535


 20108              	.LVL1166:
 20109              	.LBB1188:
 20110              	.LBB1185:
 20111              	# sieve_extend.c:119:     free(sieve->bitarray);
 119:sieve_extend.c ****     free(sieve);
 20112              		.loc 1 119 5 view .LVU6726
 20113 04a4 488B38   		mov	rdi, QWORD PTR [rax]	#, sieve_148->bitarray
 20114              	.LBE1185:
 20115              	.LBE1188:
 20116              	# sieve_extend.c:1519:             sieve = sieve_shake(option_maxFactor, blocksize_bits);//blocksiz
1519:sieve_extend.c ****             sieve_delete(sieve);
 20117              		.loc 1 1519 21 view .LVU6727
 20118 04a7 4889C5   		mov	rbp, rax	# sieve, tmp538
1520:sieve_extend.c ****             passes++;
 20119              		.loc 1 1520 13 is_stmt 1 view .LVU6728
 20120              	.LVL1167:
 20121              	.LBB1189:
 118:sieve_extend.c ****     free(sieve->bitarray);
 20122              		.loc 1 118 13 view .LVU6729
 20123              	.LBB1186:
 119:sieve_extend.c ****     free(sieve);
 20124              		.loc 1 119 5 view .LVU6730
 20125 04aa E8000000 		call	free@PLT	#
 20125      00
 20126              	.LVL1168:
 120:sieve_extend.c **** }
 20127              		.loc 1 120 5 view .LVU6731
 20128 04af 4889EF   		mov	rdi, rbp	#, sieve
 20129 04b2 E8000000 		call	free@PLT	#
 20129      00
 20130              	.LVL1169:
 120:sieve_extend.c **** }
 20131              		.loc 1 120 5 is_stmt 0 view .LVU6732
 20132              	.LBE1186:
 20133              	.LBE1189:
1521:sieve_extend.c ****             clock_gettime(CLOCK_MONOTONIC,&end_time);
 20134              		.loc 1 1521 13 is_stmt 1 view .LVU6733
1522:sieve_extend.c ****             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_time.tv_sec - start_time
 20135              		.loc 1 1522 13 view .LVU6734
 20136 04b7 4C89EE   		mov	rsi, r13	#, tmp465
 20137 04ba BF010000 		mov	edi, 1	#,
 20137      00
 20138 04bf E8000000 		call	clock_gettime@PLT	#
 20138      00
 20139              	.LVL1170:
 20140              		.loc 1 1523 13 view .LVU6735
 20141              	# sieve_extend.c:1523:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 20142              		.loc 1 1523 62 is_stmt 0 view .LVU6736
 20143 04c4 C461A32A 		vcvtsi2sd	xmm11, xmm11, QWORD PTR 216[rsp]	# tmp521, end_time.tv_nsec
 20143      9C24D800 
 20143      0000
 20144              	# sieve_extend.c:1523:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 20145              		.loc 1 1523 68 view .LVU6737
 20146 04ce C4619B2A 		vcvtsi2sd	xmm12, xmm12, QWORD PTR 192[rsp]	# tmp522, start_time.tv_sec
 20146      A424C000 
 20146      0000
 20147              	# sieve_extend.c:1523:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
GAS LISTING /tmp/ccNeV1of.s 			page 536


 20148              		.loc 1 1523 108 view .LVU6738
 20149 04d8 C461932A 		vcvtsi2sd	xmm13, xmm13, QWORD PTR 200[rsp]	# tmp524, start_time.tv_nsec
 20149      AC24C800 
 20149      0000
 20150              	# sieve_extend.c:1523:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 20151              		.loc 1 1523 44 view .LVU6739
 20152 04e2 C4618B2A 		vcvtsi2sd	xmm14, xmm14, QWORD PTR 208[rsp]	# tmp525, end_time.tv_sec
 20152      B424D000 
 20152      0000
 20153              	# sieve_extend.c:1518:         while (elapsed_time <= max_time) {
1518:sieve_extend.c ****             sieve = sieve_shake(option_maxFactor, blocksize_bits);//blocksize_bits);
 20154              		.loc 1 1518 15 view .LVU6740
 20155 04ec C57B103D 		vmovsd	xmm15, QWORD PTR .LC67[rip]	# tmp656,
 20155      00000000 
 20156 04f4 C462999B 		vfmsub132sd	xmm11, xmm12, QWORD PTR .LC14[rip]	# _305, tmp522,
 20156      1D000000 
 20156      00
 20157 04fd C462899D 		vfnmadd132sd	xmm13, xmm14, QWORD PTR .LC14[rip]	# _306, tmp525,
 20157      2D000000 
 20157      00
 20158              	# sieve_extend.c:1523:             elapsed_time = end_time.tv_sec + end_time.tv_nsec*1e-9 - start_t
 20159              		.loc 1 1523 26 view .LVU6741
 20160 0506 C4C12358 		vaddsd	xmm0, xmm11, xmm13	# elapsed_time, _305, _306
 20160      C5
 20161              	.LVL1171:
1518:sieve_extend.c ****             sieve = sieve_shake(option_maxFactor, blocksize_bits);//blocksize_bits);
 20162              		.loc 1 1518 15 is_stmt 1 view .LVU6742
 20163 050b C5792FF8 		vcomisd	xmm15, xmm0	# tmp656, elapsed_time
 20164 050f 0F83F6FE 		jnb	.L1608	#,
 20164      FFFF
 20165              	.L1680:
1524:sieve_extend.c ****         }
1525:sieve_extend.c ****         printf("rogiervandam_extend;%ju;%f;1;algorithm=other,faithful=yes,bits=1\n", (uintmax_t)pas
 20166              		.loc 1 1525 9 view .LVU6743
 20167              	.LVL1172:
 20168              	.LBB1190:
 20169              	.LBI1190:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 20170              		.loc 3 105 1 view .LVU6744
 20171              	.LBB1191:
 20172              		.loc 3 107 3 view .LVU6745
 20173              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 20174              		.loc 3 107 10 is_stmt 0 view .LVU6746
 20175 0515 4C89FA   		mov	rdx, r15	#, passes
 20176 0518 488D3500 		lea	rsi, .LC68[rip]	#,
 20176      000000
 20177 051f BF010000 		mov	edi, 1	#,
 20177      00
 20178 0524 B8010000 		mov	eax, 1	#,
 20178      00
 20179 0529 C5FB1144 		vmovsd	QWORD PTR 40[rsp], xmm0	# %sfp, elapsed_time
 20179      2428
 20180 052f E8000000 		call	__printf_chk@PLT	#
 20180      00
 20181              	.LVL1173:
 20182              		.loc 3 107 10 view .LVU6747
 20183              	.LBE1191:
GAS LISTING /tmp/ccNeV1of.s 			page 537


 20184              	.LBE1190:
1526:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Passes - per 5 seconds: %f - per second %f\n", 5*pass
 20185              		.loc 1 1526 9 is_stmt 1 view .LVU6748
 20186              	# sieve_extend.c:1526:         if (option_verboselevel >= 1) printf("Passes - per 5 seconds: %f - p
 20187              		.loc 1 1526 12 is_stmt 0 view .LVU6749
 20188 0534 83BC24A8 		cmp	DWORD PTR 168[rsp], 0	# option_verboselevel,
 20188      00000000 
 20189 053c 0F8FF500 		jg	.L1695	#,
 20189      0000
 20190              	.LVL1174:
 20191              	.L1606:
 20192              		.loc 1 1526 12 view .LVU6750
 20193              	.LBE1181:
1527:sieve_extend.c ****     }
1528:sieve_extend.c ****     
1529:sieve_extend.c ****     if (option_showMaxFactor > 0) {
 20194              		.loc 1 1529 5 is_stmt 1 view .LVU6751
 20195              	# sieve_extend.c:1529:     if (option_showMaxFactor > 0) {
 20196              		.loc 1 1529 8 is_stmt 0 view .LVU6752
 20197 0542 4883BC24 		cmp	QWORD PTR 184[rsp], 0	# option_showMaxFactor,
 20197      B8000000 
 20197      00
 20198 054b 0F859300 		jne	.L1696	#,
 20198      0000
 20199 0551 66662E0F 		.p2align 4
 20199      1F840000 
 20199      0000000F 
 20199      1F4000
 20200              		.p2align 3
 20201              	.L1614:
 20202              	.LBB1198:
 20203              	.LBB1176:
 20204              	.LBB1173:
 20205              	.LBB1166:
1494:sieve_extend.c ****             }
 20206              		.loc 1 1494 29 is_stmt 1 discriminator 1 view .LVU6753
 20207              	.LBE1166:
 20208              	.LBE1173:
 20209              	.LBE1176:
 20210              	.LBE1198:
 20211              	# sieve_extend.c:1536: }
1530:sieve_extend.c ****         printf("Show result set:\n");
1531:sieve_extend.c ****         struct sieve_t* sieve = sieve_shake(option_maxFactor, option_maxFactor);
1532:sieve_extend.c ****         show_primes(sieve, option_showMaxFactor);
1533:sieve_extend.c ****         sieve_delete(sieve);
1534:sieve_extend.c ****         printf("\n");
1535:sieve_extend.c ****     }
1536:sieve_extend.c **** }
 20212              		.loc 1 1536 1 is_stmt 0 discriminator 1 view .LVU6754
 20213 0560 488B8424 		mov	rax, QWORD PTR 232[rsp]	# tmp572, D.7777
 20213      E8000000 
 20214 0568 64483304 		xor	rax, QWORD PTR fs:40	# tmp572, MEM[(<address-space-1> long unsigned int *)40B]
 20214      25280000 
 20214      00
 20215 0571 0F85A50A 		jne	.L1697	#,
 20215      0000
 20216              	# sieve_extend.c:1536: }
GAS LISTING /tmp/ccNeV1of.s 			page 538


 20217              		.loc 1 1536 1 view .LVU6755
 20218 0577 488DA424 		lea	rsp, 248[rsp]	#,
 20218      F8000000 
 20219              		.cfi_remember_state
 20220              		.cfi_def_cfa_offset 56
 20221 057f 31C0     		xor	eax, eax	#
 20222 0581 5B       		pop	rbx	#
 20223              		.cfi_def_cfa_offset 48
 20224 0582 5D       		pop	rbp	#
 20225              		.cfi_def_cfa_offset 40
 20226 0583 415C     		pop	r12	#
 20227              		.cfi_def_cfa_offset 32
 20228 0585 415D     		pop	r13	#
 20229              		.cfi_def_cfa_offset 24
 20230 0587 415E     		pop	r14	#
 20231              		.cfi_def_cfa_offset 16
 20232 0589 415F     		pop	r15	#
 20233              		.cfi_def_cfa_offset 8
 20234 058b C3       		ret	
 20235              	.L1569:
 20236              		.cfi_restore_state
1476:sieve_extend.c ****         #endif
 20237              		.loc 1 1476 13 is_stmt 1 view .LVU6756
 20238              	.LVL1175:
 20239              	.LBB1199:
 20240              	.LBI1199:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 20241              		.loc 3 105 1 view .LVU6757
 20242              	.LBB1200:
 20243              		.loc 3 107 3 view .LVU6758
 20244              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 20245              		.loc 3 107 10 is_stmt 0 view .LVU6759
 20246 058c 488D3D00 		lea	rdi, .LC35[rip]	#,
 20246      000000
 20247 0593 E8000000 		call	puts@PLT	#
 20247      00
 20248              	.LVL1176:
 20249              		.loc 3 107 10 view .LVU6760
 20250              	.LBE1200:
 20251              	.LBE1199:
1480:sieve_extend.c ****         // Count the number of primes and validate the result
 20252              		.loc 1 1480 5 is_stmt 1 view .LVU6761
1482:sieve_extend.c ****         if (option_verboselevel >= 2) printf("\n");
 20253              		.loc 1 1482 9 view .LVU6762
 20254              	# sieve_extend.c:1482:         if (option_verboselevel >= 1) printf("Validating... ");
1482:sieve_extend.c ****         if (option_verboselevel >= 2) printf("\n");
 20255              		.loc 1 1482 12 is_stmt 0 view .LVU6763
 20256 0598 83BC24A8 		cmp	DWORD PTR 168[rsp], 0	# option_verboselevel,
 20256      00000000 
 20257 05a0 0F8E49FC 		jle	.L1570	#,
 20257      FFFF
1482:sieve_extend.c ****         if (option_verboselevel >= 2) printf("\n");
 20258              		.loc 1 1482 39 is_stmt 1 view .LVU6764
 20259              	.LVL1177:
 20260              	.LBB1201:
 20261              	.LBI1201:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
GAS LISTING /tmp/ccNeV1of.s 			page 539


 20262              		.loc 3 105 1 view .LVU6765
 20263              	.LBB1202:
 20264              		.loc 3 107 3 view .LVU6766
 20265              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 20266              		.loc 3 107 10 is_stmt 0 view .LVU6767
 20267 05a6 488D3500 		lea	rsi, .LC52[rip]	#,
 20267      000000
 20268 05ad BF010000 		mov	edi, 1	#,
 20268      00
 20269 05b2 31C0     		xor	eax, eax	#
 20270 05b4 E8000000 		call	__printf_chk@PLT	#
 20270      00
 20271              	.LVL1178:
 20272 05b9 E931FCFF 		jmp	.L1570	#
 20272      FF
 20273              	.LVL1179:
 20274              	.L1558:
 20275              		.loc 3 107 10 view .LVU6768
 20276              	.LBE1202:
 20277              	.LBE1201:
 20278              	.LBB1203:
1434:sieve_extend.c ****             }
 20279              		.loc 1 1434 17 is_stmt 1 view .LVU6769
 20280              	.LBB1128:
 20281              	.LBI1128:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 20282              		.loc 3 98 1 view .LVU6770
 20283              	.LBB1129:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 20284              		.loc 3 100 3 view .LVU6771
 20285              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 20286              		.loc 3 100 10 is_stmt 0 view .LVU6772
 20287 05be 498B0F   		mov	rcx, QWORD PTR [r15]	#, *_16
 20288 05c1 488D1500 		lea	rdx, .LC39[rip]	#,
 20288      000000
 20289              	.LVL1180:
 20290              	.L1683:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 20291              		.loc 3 100 10 view .LVU6773
 20292              	.LBE1129:
 20293              	.LBE1128:
 20294              	.LBB1130:
 20295              	.LBB1131:
 20296 05c8 488B3D00 		mov	rdi, QWORD PTR stderr[rip]	#, stderr
 20296      000000
 20297 05cf BE010000 		mov	esi, 1	#,
 20297      00
 20298 05d4 31C0     		xor	eax, eax	#
 20299 05d6 E8000000 		call	__fprintf_chk@PLT	#
 20299      00
 20300              	.LVL1181:
 20301              	.L1684:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 20302              		.loc 3 100 10 view .LVU6774
 20303              	.LBE1131:
 20304              	.LBE1130:
GAS LISTING /tmp/ccNeV1of.s 			page 540


1442:sieve_extend.c ****             }
 20305              		.loc 1 1442 80 is_stmt 1 view .LVU6775
 20306 05db 498B3C24 		mov	rdi, QWORD PTR [r12]	#, *argv_161(D)
 20307 05df E8000000 		call	usage	#
 20307      00
 20308              	.LVL1182:
 20309              	.L1696:
1442:sieve_extend.c ****             }
 20310              		.loc 1 1442 80 is_stmt 0 view .LVU6776
 20311              	.LBE1203:
 20312              	.LBB1204:
1530:sieve_extend.c ****         struct sieve_t* sieve = sieve_shake(option_maxFactor, option_maxFactor);
 20313              		.loc 1 1530 9 is_stmt 1 view .LVU6777
 20314              	.LBB1205:
 20315              	.LBI1205:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 20316              		.loc 3 105 1 view .LVU6778
 20317              	.LBB1206:
 20318              		.loc 3 107 3 view .LVU6779
 20319              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 20320              		.loc 3 107 10 is_stmt 0 view .LVU6780
 20321 05e4 488D3D00 		lea	rdi, .LC70[rip]	#,
 20321      000000
 20322 05eb E8000000 		call	puts@PLT	#
 20322      00
 20323              	.LVL1183:
 20324              		.loc 3 107 10 view .LVU6781
 20325              	.LBE1206:
 20326              	.LBE1205:
1531:sieve_extend.c ****         show_primes(sieve, option_showMaxFactor);
 20327              		.loc 1 1531 9 is_stmt 1 view .LVU6782
 20328              	# sieve_extend.c:1531:         struct sieve_t* sieve = sieve_shake(option_maxFactor, option_maxFact
1531:sieve_extend.c ****         show_primes(sieve, option_showMaxFactor);
 20329              		.loc 1 1531 33 is_stmt 0 view .LVU6783
 20330 05f0 488BBC24 		mov	rdi, QWORD PTR 176[rsp]	# option_maxFactor.52_94, option_maxFactor
 20330      B0000000 
 20331 05f8 4889FE   		mov	rsi, rdi	#, option_maxFactor.52_94
 20332 05fb E8000000 		call	sieve_shake	#
 20332      00
 20333              	.LVL1184:
 20334              	# sieve_extend.c:1532:         show_primes(sieve, option_showMaxFactor);
1532:sieve_extend.c ****         sieve_delete(sieve);
 20335              		.loc 1 1532 9 view .LVU6784
 20336 0600 488B9424 		mov	rdx, QWORD PTR 184[rsp]	#, option_showMaxFactor
 20336      B8000000 
 20337              	# sieve_extend.c:1531:         struct sieve_t* sieve = sieve_shake(option_maxFactor, option_maxFact
1531:sieve_extend.c ****         show_primes(sieve, option_showMaxFactor);
 20338              		.loc 1 1531 33 view .LVU6785
 20339 0608 4989C4   		mov	r12, rax	# sieve, tmp537
 20340              	.LVL1185:
1532:sieve_extend.c ****         sieve_delete(sieve);
 20341              		.loc 1 1532 9 is_stmt 1 view .LVU6786
 20342 060b 488D7008 		lea	rsi, 8[rax]	# tmp462,
 20343 060f 4889C7   		mov	rdi, rax	#, sieve
 20344 0612 E8000000 		call	show_primes.isra.0	#
 20344      00
 20345              	.LVL1186:
GAS LISTING /tmp/ccNeV1of.s 			page 541


1533:sieve_extend.c ****         printf("\n");
 20346              		.loc 1 1533 9 view .LVU6787
 20347              	.LBB1207:
 20348              	.LBI1207:
 118:sieve_extend.c ****     free(sieve->bitarray);
 20349              		.loc 1 118 13 view .LVU6788
 20350              	.LBB1208:
 119:sieve_extend.c ****     free(sieve);
 20351              		.loc 1 119 5 view .LVU6789
 20352 0617 498B3C24 		mov	rdi, QWORD PTR [r12]	#, sieve_153->bitarray
 20353 061b E8000000 		call	free@PLT	#
 20353      00
 20354              	.LVL1187:
 120:sieve_extend.c **** }
 20355              		.loc 1 120 5 view .LVU6790
 20356 0620 4C89E7   		mov	rdi, r12	#, sieve
 20357 0623 E8000000 		call	free@PLT	#
 20357      00
 20358              	.LVL1188:
 120:sieve_extend.c **** }
 20359              		.loc 1 120 5 is_stmt 0 view .LVU6791
 20360              	.LBE1208:
 20361              	.LBE1207:
1534:sieve_extend.c ****     }
 20362              		.loc 1 1534 9 is_stmt 1 view .LVU6792
 20363              	.LBB1209:
 20364              	.LBI1209:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 20365              		.loc 3 105 1 view .LVU6793
 20366              	.LBB1210:
 20367              		.loc 3 107 3 view .LVU6794
 20368              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 20369              		.loc 3 107 10 is_stmt 0 view .LVU6795
 20370 0628 BF0A0000 		mov	edi, 10	#,
 20370      00
 20371 062d E8000000 		call	putchar@PLT	#
 20371      00
 20372              	.LVL1189:
 20373 0632 E929FFFF 		jmp	.L1614	#
 20373      FF
 20374              	.LVL1190:
 20375              	.L1695:
 20376              		.loc 3 107 10 view .LVU6796
 20377              	.LBE1210:
 20378              	.LBE1209:
 20379              	.LBE1204:
 20380              	.LBB1211:
1526:sieve_extend.c ****     }
 20381              		.loc 1 1526 39 is_stmt 1 discriminator 1 view .LVU6797
 20382              	.LBB1192:
 20383              	.LBI1192:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 20384              		.loc 3 105 1 discriminator 1 view .LVU6798
 20385              	.LBB1193:
 20386              		.loc 3 107 3 discriminator 1 view .LVU6799
 20387              	.LBE1193:
 20388              	.LBE1192:
GAS LISTING /tmp/ccNeV1of.s 			page 542


 20389              	# sieve_extend.c:1526:         if (option_verboselevel >= 1) printf("Passes - per 5 seconds: %f - p
1526:sieve_extend.c ****     }
 20390              		.loc 1 1526 39 is_stmt 0 discriminator 1 view .LVU6800
 20391 0637 C4C1FB2A 		vcvtsi2sd	xmm0, xmm0, r15	# tmp450, passes
 20391      C7
 20392 063c 4D85FF   		test	r15, r15	# passes
 20393 063f C5FB1074 		vmovsd	xmm6, QWORD PTR 40[rsp]	# elapsed_time, %sfp
 20393      2428
 20394 0645 7919     		jns	.L1611	#,
 20395 0647 4C89F9   		mov	rcx, r15	# tmp452, passes
 20396 064a 4D89FA   		mov	r10, r15	# tmp453, passes
 20397 064d 48D1E9   		shr	rcx	# tmp452
 20398 0650 4183E201 		and	r10d, 1	# tmp453,
 20399 0654 4C09D1   		or	rcx, r10	# tmp517, tmp453
 20400 0657 C4E1C32A 		vcvtsi2sd	xmm7, xmm7, rcx	# tmp451, tmp517
 20400      F9
 20401 065c C5C358C7 		vaddsd	xmm0, xmm7, xmm7	# tmp450, tmp451, tmp451
 20402              	.L1611:
1526:sieve_extend.c ****     }
 20403              		.loc 1 1526 39 discriminator 1 view .LVU6801
 20404 0660 C5FB5ECE 		vdivsd	xmm1, xmm0, xmm6	# tmp454, tmp450, elapsed_time
 20405              	# sieve_extend.c:1526:         if (option_verboselevel >= 1) printf("Passes - per 5 seconds: %f - p
1526:sieve_extend.c ****     }
 20406              		.loc 1 1526 95 discriminator 1 view .LVU6802
 20407 0664 4B8D14BF 		lea	rdx, [r15+r15*4]	# tmp455,
 20408              	# sieve_extend.c:1526:         if (option_verboselevel >= 1) printf("Passes - per 5 seconds: %f - p
1526:sieve_extend.c ****     }
 20409              		.loc 1 1526 39 discriminator 1 view .LVU6803
 20410 0668 4885D2   		test	rdx, rdx	# tmp455
 20411 066b C4E1E32A 		vcvtsi2sd	xmm3, xmm3, rdx	# tmp456, tmp455
 20411      DA
 20412 0670 7915     		jns	.L1613	#,
 20413 0672 4989D3   		mov	r11, rdx	# tmp458, tmp455
 20414 0675 83E201   		and	edx, 1	# tmp459,
 20415 0678 49D1EB   		shr	r11	# tmp458
 20416 067b 4909D3   		or	r11, rdx	# tmp518, tmp459
 20417 067e C4C1DB2A 		vcvtsi2sd	xmm4, xmm4, r11	# tmp457, tmp518
 20417      E3
 20418 0683 C5DB58DC 		vaddsd	xmm3, xmm4, xmm4	# tmp456, tmp457, tmp457
 20419              	.L1613:
 20420 0687 C5E35EC6 		vdivsd	xmm0, xmm3, xmm6	# tmp460, tmp456, elapsed_time
 20421              	.LBB1195:
 20422              	.LBB1194:
 20423              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 20424              		.loc 3 107 10 discriminator 1 view .LVU6804
 20425 068b 488D3500 		lea	rsi, .LC69[rip]	#,
 20425      000000
 20426 0692 BF010000 		mov	edi, 1	#,
 20426      00
 20427 0697 B8020000 		mov	eax, 2	#,
 20427      00
 20428 069c E8000000 		call	__printf_chk@PLT	#
 20428      00
 20429              	.LVL1191:
 20430 06a1 E99CFEFF 		jmp	.L1606	#
 20430      FF
 20431              	.LVL1192:
GAS LISTING /tmp/ccNeV1of.s 			page 543


 20432              	.L1694:
 20433              		.loc 3 107 10 discriminator 1 view .LVU6805
 20434              	.LBE1194:
 20435              	.LBE1195:
 20436              	.LBE1211:
 20437              	.LBB1212:
1503:sieve_extend.c ****         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
 20438              		.loc 1 1503 9 is_stmt 1 view .LVU6806
 20439              	# sieve_extend.c:1503:         tuning_result_type tuning_result = tune(option_tunelevel, option_max
1503:sieve_extend.c ****         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
 20440              		.loc 1 1503 44 is_stmt 0 view .LVU6807
 20441 06a6 448B9424 		mov	r10d, DWORD PTR 168[rsp]	# option_verboselevel.42_64, option_verboselevel
 20441      A8000000 
 20442 06ae 4183E801 		sub	r8d, 1	#,
 20443 06b2 4C8B9C24 		mov	r11, QWORD PTR 176[rsp]	# option_maxFactor.43_65, option_maxFactor
 20443      B0000000 
 20444 06ba 4183F802 		cmp	r8d, 2	# _215,
 20445 06be 44895424 		mov	DWORD PTR 104[rsp], r10d	# %sfp, option_verboselevel.42_64
 20445      68
 20446 06c3 4C899C24 		mov	QWORD PTR 136[rsp], r11	# %sfp, option_maxFactor.43_65
 20446      88000000 
 20447              	.LVL1193:
 20448              	.LBB1213:
 20449              	.LBI1213:
1105:sieve_extend.c ****     counter_t best_blocksize_bits = default_blocksize;
 20450              		.loc 1 1105 27 is_stmt 1 view .LVU6808
 20451              	.LBB1214:
1106:sieve_extend.c **** 
 20452              		.loc 1 1106 5 view .LVU6809
1108:sieve_extend.c ****     best_blocksize_bits = 0;
 20453              		.loc 1 1108 5 view .LVU6810
1109:sieve_extend.c ****     counter_t best_smallstep_faster = 0;
 20454              		.loc 1 1109 5 view .LVU6811
1110:sieve_extend.c ****     counter_t best_mediumstep_faster = 0;
 20455              		.loc 1 1110 5 view .LVU6812
1111:sieve_extend.c ****     counter_t best_vectorstep_faster = 0;
 20456              		.loc 1 1111 5 view .LVU6813
1112:sieve_extend.c ****     counter_t smallstep_faster_steps = 4;
 20457              		.loc 1 1112 5 view .LVU6814
1113:sieve_extend.c ****     counter_t mediumstep_faster_steps = 4;
 20458              		.loc 1 1113 5 view .LVU6815
1114:sieve_extend.c ****     counter_t vectorstep_faster_steps = 32;
 20459              		.loc 1 1114 5 view .LVU6816
1115:sieve_extend.c ****     counter_t freebits_steps = anticiped_cache_line_bytesize;
 20460              		.loc 1 1115 5 view .LVU6817
1116:sieve_extend.c ****     counter_t sample_max = default_sample_max;
 20461              		.loc 1 1116 5 view .LVU6818
1117:sieve_extend.c ****     double sample_duration = default_sample_duration;
 20462              		.loc 1 1117 5 view .LVU6819
1118:sieve_extend.c **** 
 20463              		.loc 1 1118 5 view .LVU6820
1121:sieve_extend.c ****         case 1:
 20464              		.loc 1 1121 5 view .LVU6821
 20465 06cb 0F86EA07 		jbe	.L1615	#,
 20465      0000
 20466 06d1 C5FB1035 		vmovsd	xmm6, QWORD PTR .LC34[rip]	# sample_duration,
 20466      00000000 
GAS LISTING /tmp/ccNeV1of.s 			page 544


 20467 06d9 48C74424 		mov	QWORD PTR 120[rsp], 5	# %sfp,
 20467      78050000 
 20467      00
 20468 06e2 48C74424 		mov	QWORD PTR 112[rsp], 128	# %sfp,
 20468      70800000 
 20468      00
 20469 06eb 48C78424 		mov	QWORD PTR 144[rsp], 32	# %sfp,
 20469      90000000 
 20469      20000000 
 20470 06f7 48C78424 		mov	QWORD PTR 152[rsp], 4	# %sfp,
 20470      98000000 
 20470      04000000 
 20471 0703 C5FB11B4 		vmovsd	QWORD PTR 128[rsp], xmm6	# %sfp, sample_duration
 20471      24800000 
 20471      00
 20472              	.LVL1194:
 20473              	.L1583:
1150:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 20474              		.loc 1 1150 5 view .LVU6822
 20475              	# sieve_extend.c:1150:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1150:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 20476              		.loc 1 1150 33 is_stmt 0 view .LVU6823
 20477 070c B8400000 		mov	eax, 64	# tmp350,
 20477      00
 20478 0711 31D2     		xor	edx, edx	# tmp349
 20479 0713 48F7B424 		div	QWORD PTR 152[rsp]	# %sfp
 20479      98000000 
 20480              	# sieve_extend.c:1150:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1150:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 20481              		.loc 1 1150 254 view .LVU6824
 20482 071b 31D2     		xor	edx, edx	# tmp357
 20483              	# sieve_extend.c:1152:     counter_t tuning_results=0;
1152:sieve_extend.c ****     counter_t tuning_result_index=0;
 20484              		.loc 1 1152 15 view .LVU6825
 20485 071d 4531FF   		xor	r15d, r15d	# tuning_results
 20486              	# sieve_extend.c:1150:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1150:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 20487              		.loc 1 1150 83 view .LVU6826
 20488 0720 488D7801 		lea	rdi, 1[rax]	# _232,
 20489              	.LVL1195:
1151:sieve_extend.c ****     counter_t tuning_results=0;
 20490              		.loc 1 1151 5 is_stmt 1 view .LVU6827
 20491              	# sieve_extend.c:1150:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1150:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 20492              		.loc 1 1150 254 is_stmt 0 view .LVU6828
 20493 0724 B8001000 		mov	eax, 4096	# tmp358,
 20493      00
 20494 0729 48F77424 		div	QWORD PTR 112[rsp]	# %sfp
 20494      70
 20495              	.LVL1196:
 20496              	# sieve_extend.c:1150:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1150:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 20497              		.loc 1 1150 148 view .LVU6829
 20498 072e 31D2     		xor	edx, edx	# tmp367
 20499              	# sieve_extend.c:1151:     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_r
1151:sieve_extend.c ****     counter_t tuning_results=0;
 20500              		.loc 1 1151 41 view .LVU6830
GAS LISTING /tmp/ccNeV1of.s 			page 545


 20501 0730 480FAFC7 		imul	rax, rdi	# tmp363, _232
 20502              	.LVL1197:
1151:sieve_extend.c ****     counter_t tuning_results=0;
 20503              		.loc 1 1151 41 view .LVU6831
 20504 0734 480FAFF8 		imul	rdi, rax	# tmp364, tmp363
 20505              	.LVL1198:
 20506              	# sieve_extend.c:1150:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1150:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 20507              		.loc 1 1150 148 view .LVU6832
 20508 0738 B8000100 		mov	eax, 256	# tmp368,
 20508      00
 20509 073d 48F7B424 		div	QWORD PTR 144[rsp]	# %sfp
 20509      90000000 
 20510              	# sieve_extend.c:1150:     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_
1150:sieve_extend.c ****     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_result));
 20511              		.loc 1 1150 201 view .LVU6833
 20512 0745 4883C001 		add	rax, 1	# tmp373,
 20513              	# sieve_extend.c:1151:     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_r
1151:sieve_extend.c ****     counter_t tuning_results=0;
 20514              		.loc 1 1151 41 view .LVU6834
 20515 0749 480FAFF8 		imul	rdi, rax	# tmp374, tmp373
 20516 074d 48C1E708 		sal	rdi, 8	# tmp374,
 20517 0751 E8000000 		call	malloc@PLT	#
 20517      00
 20518              	.LVL1199:
 20519              	# sieve_extend.c:1108:     double best_avg = 0;
1108:sieve_extend.c ****     best_blocksize_bits = 0;
 20520              		.loc 1 1108 12 view .LVU6835
 20521 0756 C5F157C9 		vxorpd	xmm1, xmm1, xmm1	# best_avg
 20522              	# sieve_extend.c:1151:     tuning_result_type* tuning_result = malloc(max_results * sizeof(tuning_r
1151:sieve_extend.c ****     counter_t tuning_results=0;
 20523              		.loc 1 1151 41 view .LVU6836
 20524 075a 48894424 		mov	QWORD PTR 64[rsp], rax	# %sfp, tmp535
 20524      40
 20525              	.LVL1200:
1152:sieve_extend.c ****     counter_t tuning_result_index=0;
 20526              		.loc 1 1152 5 is_stmt 1 view .LVU6837
1153:sieve_extend.c ****     
 20527              		.loc 1 1153 5 view .LVU6838
1155:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 20528              		.loc 1 1155 5 view .LVU6839
 20529              	.LBB1215:
1155:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 20530              		.loc 1 1155 10 view .LVU6840
1155:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 20531              		.loc 1 1155 42 view .LVU6841
 20532              	.LBE1215:
 20533              	# sieve_extend.c:1112:     counter_t best_vectorstep_faster = 0;
1112:sieve_extend.c ****     counter_t smallstep_faster_steps = 4;
 20534              		.loc 1 1112 15 is_stmt 0 view .LVU6842
 20535 075f 48C74424 		mov	QWORD PTR 96[rsp], 0	# %sfp,
 20535      60000000 
 20535      00
 20536              	# sieve_extend.c:1111:     counter_t best_mediumstep_faster = 0;
1111:sieve_extend.c ****     counter_t best_vectorstep_faster = 0;
 20537              		.loc 1 1111 15 view .LVU6843
 20538 0768 48C74424 		mov	QWORD PTR 88[rsp], 0	# %sfp,
GAS LISTING /tmp/ccNeV1of.s 			page 546


 20538      58000000 
 20538      00
 20539              	# sieve_extend.c:1110:     counter_t best_smallstep_faster = 0;
1110:sieve_extend.c ****     counter_t best_mediumstep_faster = 0;
 20540              		.loc 1 1110 15 view .LVU6844
 20541 0771 48C74424 		mov	QWORD PTR 80[rsp], 0	# %sfp,
 20541      50000000 
 20541      00
 20542              	# sieve_extend.c:1109:     best_blocksize_bits = 0;
1109:sieve_extend.c ****     counter_t best_smallstep_faster = 0;
 20543              		.loc 1 1109 25 view .LVU6845
 20544 077a 48C74424 		mov	QWORD PTR 72[rsp], 0	# %sfp,
 20544      48000000 
 20544      00
 20545              	.LBB1245:
 20546              	# sieve_extend.c:1155:     for (counter_t smallstep_faster = 0; smallstep_faster <= WORD_SIZE/2; sm
1155:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 20547              		.loc 1 1155 20 view .LVU6846
 20548 0783 48C74424 		mov	QWORD PTR 48[rsp], 0	# %sfp,
 20548      30000000 
 20548      00
 20549              	.LBE1245:
 20550              	# sieve_extend.c:1108:     double best_avg = 0;
1108:sieve_extend.c ****     best_blocksize_bits = 0;
 20551              		.loc 1 1108 12 view .LVU6847
 20552 078c C5FB114C 		vmovsd	QWORD PTR 56[rsp], xmm1	# %sfp, best_avg
 20552      2438
 20553              	.LVL1201:
 20554              	.L1585:
 20555              	.LBB1246:
 20556              	.LBB1216:
1156:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 20557              		.loc 1 1156 62 is_stmt 1 view .LVU6848
 20558              	.LBB1217:
 20559              	.LBB1218:
 20560              	# sieve_extend.c:1158:                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_
1158:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 20561              		.loc 1 1158 32 is_stmt 0 view .LVU6849
 20562 0792 4C8B4424 		mov	r8, QWORD PTR 48[rsp]	# smallstep_faster, %sfp
 20562      30
 20563 0797 4C894424 		mov	QWORD PTR 40[rsp], r8	# %sfp, smallstep_faster
 20563      28
 20564              	.LVL1202:
 20565 079c 0F1F4000 		.p2align 4
 20566              		.p2align 3
 20567              	.L1597:
1158:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 20568              		.loc 1 1158 32 view .LVU6850
 20569              	.LBE1218:
1157:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 20570              		.loc 1 1157 67 is_stmt 1 view .LVU6851
 20571              	.LBB1241:
 20572              	# sieve_extend.c:1158:                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_
1158:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 20573              		.loc 1 1158 32 is_stmt 0 view .LVU6852
 20574 07a0 4C8B7424 		mov	r14, QWORD PTR 40[rsp]	# vectorstep_faster, %sfp
 20574      28
GAS LISTING /tmp/ccNeV1of.s 			page 547


 20575              	.LVL1203:
 20576 07a5 66662E0F 		.p2align 4
 20576      1F840000 
 20576      000000
 20577              		.p2align 3
 20578              	.L1595:
1158:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 20579              		.loc 1 1158 50 is_stmt 1 view .LVU6853
 20580              	.LBB1219:
 20581              	# sieve_extend.c:1159:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1159:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 20582              		.loc 1 1159 36 is_stmt 0 view .LVU6854
 20583 07b0 C744246C 		mov	DWORD PTR 108[rsp], 6	# %sfp,
 20583      06000000 
 20584              	.LBE1219:
 20585              	# sieve_extend.c:1158:                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_
1158:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 20586              		.loc 1 1158 32 view .LVU6855
 20587 07b8 41BC0001 		mov	r12d, 256	# blocksize_kb,
 20587      0000
 20588              	.LVL1204:
 20589 07be 6690     		.p2align 4
 20590              		.p2align 3
 20591              	.L1593:
 20592              	.LBB1239:
1159:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 20593              		.loc 1 1159 49 is_stmt 1 view .LVU6856
 20594 07c0 4F8D147F 		lea	r10, [r15+r15*2]	# tmp401,
 20595              	# sieve_extend.c:1159:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1159:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 20596              		.loc 1 1159 134 is_stmt 0 view .LVU6857
 20597 07c4 4C89E3   		mov	rbx, r12	# ivtmp.857, blocksize_kb
 20598 07c7 4C8B5C24 		mov	r11, QWORD PTR 64[rsp]	# tuning_result, %sfp
 20598      40
 20599              	# sieve_extend.c:1159:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1159:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 20600              		.loc 1 1159 36 view .LVU6858
 20601 07cc 31ED     		xor	ebp, ebp	# free_bits
 20602 07ce 49C1E205 		sal	r10, 5	# tmp402,
 20603              	# sieve_extend.c:1159:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1159:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 20604              		.loc 1 1159 134 view .LVU6859
 20605 07d2 48C1E30D 		sal	rbx, 13	# ivtmp.857,
 20606 07d6 4F8D2C13 		lea	r13, [r11+r10]	# ivtmp.856,
 20607 07da EB4F     		jmp	.L1591	#
 20608              	.LVL1205:
 20609 07dc 0F1F4000 		.p2align 4,,7
 20610              		.p2align 3
 20611              	.L1588:
 20612              	.LBB1220:
1176:sieve_extend.c ****                             best_blocksize_bits = blocksize_bits;
 20613              		.loc 1 1176 29 is_stmt 1 view .LVU6860
1177:sieve_extend.c ****                             best_smallstep_faster = smallstep_faster;
 20614              		.loc 1 1177 29 view .LVU6861
1178:sieve_extend.c ****                             best_mediumstep_faster = mediumstep_faster;
 20615              		.loc 1 1178 29 view .LVU6862
1179:sieve_extend.c ****                             best_vectorstep_faster = vectorstep_faster;
GAS LISTING /tmp/ccNeV1of.s 			page 548


 20616              		.loc 1 1179 29 view .LVU6863
1180:sieve_extend.c ****                             if (option_verboselevel >=2) { printf(".(>)"); tuning_result_print(tuni
 20617              		.loc 1 1180 29 view .LVU6864
1181:sieve_extend.c ****                         }
 20618              		.loc 1 1181 29 view .LVU6865
 20619              	# sieve_extend.c:1181:                             if (option_verboselevel >=2) { printf(".(>)"); t
1181:sieve_extend.c ****                         }
 20620              		.loc 1 1181 32 is_stmt 0 view .LVU6866
 20621 07e0 837C2468 		cmp	DWORD PTR 104[rsp], 1	# %sfp,
 20621      01
 20622 07e5 0F8F0504 		jg	.L1698	#,
 20622      0000
1181:sieve_extend.c ****                         }
 20623              		.loc 1 1181 32 view .LVU6867
 20624 07eb 488B7424 		mov	rsi, QWORD PTR 40[rsp]	# mediumstep_faster, %sfp
 20624      28
 20625 07f0 488B5424 		mov	rdx, QWORD PTR 48[rsp]	# smallstep_faster, %sfp
 20625      30
 20626 07f5 4C897424 		mov	QWORD PTR 96[rsp], r14	# %sfp, vectorstep_faster
 20626      60
 20627              	# sieve_extend.c:1176:                             best_avg = tuning_result[tuning_result_index].av
1176:sieve_extend.c ****                             best_blocksize_bits = blocksize_bits;
 20628              		.loc 1 1176 38 view .LVU6868
 20629 07fa C5FB115C 		vmovsd	QWORD PTR 56[rsp], xmm3	# %sfp, _256
 20629      2438
 20630 0800 48897424 		mov	QWORD PTR 88[rsp], rsi	# %sfp, mediumstep_faster
 20630      58
 20631              	# sieve_extend.c:1177:                             best_blocksize_bits = blocksize_bits;
1177:sieve_extend.c ****                             best_smallstep_faster = smallstep_faster;
 20632              		.loc 1 1177 49 view .LVU6869
 20633 0805 48895C24 		mov	QWORD PTR 72[rsp], rbx	# %sfp, ivtmp.857
 20633      48
 20634 080a 48895424 		mov	QWORD PTR 80[rsp], rdx	# %sfp, smallstep_faster
 20634      50
 20635              	.LVL1206:
 20636              	.L1586:
1184:sieve_extend.c ****                     }
 20637              		.loc 1 1184 25 is_stmt 1 view .LVU6870
1184:sieve_extend.c ****                     }
 20638              		.loc 1 1184 25 is_stmt 0 view .LVU6871
 20639              	.LBE1220:
1159:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 20640              		.loc 1 1159 141 is_stmt 1 view .LVU6872
 20641              	# sieve_extend.c:1159:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1159:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 20642              		.loc 1 1159 151 is_stmt 0 view .LVU6873
 20643 080f 488B5424 		mov	rdx, QWORD PTR 112[rsp]	# freebits_steps, %sfp
 20643      70
 20644 0814 4983C560 		add	r13, 96	# ivtmp.856,
 20645 0818 4801D5   		add	rbp, rdx	# free_bits, freebits_steps
 20646              	.LVL1207:
1159:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
 20647              		.loc 1 1159 49 is_stmt 1 view .LVU6874
 20648 081b 4829D3   		sub	rbx, rdx	# ivtmp.857, freebits_steps
 20649              	.LVL1208:
 20650              	# sieve_extend.c:1159:                     for (counter_t free_bits=0; (free_bits < (anticiped_cach
1159:sieve_extend.c ****                         counter_t blocksize_bits = (blocksize_kb * 1024 * 8) - free_bits;
GAS LISTING /tmp/ccNeV1of.s 			page 549


 20651              		.loc 1 1159 21 is_stmt 0 view .LVU6875
 20652 081e 4881FDFF 		cmp	rbp, 4095	# free_bits,
 20652      0F0000
 20653 0825 0F87ED00 		ja	.L1587	#,
 20653      0000
 20654              	.LVL1209:
 20655              	.L1591:
 20656              	.LBB1237:
1160:sieve_extend.c **** 
 20657              		.loc 1 1160 25 is_stmt 1 view .LVU6876
1163:sieve_extend.c ****                         tuning_result[tuning_result_index].maxints = maxints;
 20658              		.loc 1 1163 25 view .LVU6877
 20659              	# sieve_extend.c:1170:                         tuning_result[tuning_result_index].smallstep_faster 
1170:sieve_extend.c ****                         tuning_result[tuning_result_index].mediumstep_faster = mediumstep_faster;
 20660              		.loc 1 1170 77 is_stmt 0 view .LVU6878
 20661 082b 488B7C24 		mov	rdi, QWORD PTR 48[rsp]	# smallstep_faster, %sfp
 20661      30
 20662 0830 4C89FE   		mov	rsi, r15	# tuning_results, tuning_results
 20663              	# sieve_extend.c:1164:                         tuning_result[tuning_result_index].maxints = maxints
1164:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_duration = sample_duration;
 20664              		.loc 1 1164 68 view .LVU6879
 20665 0833 488B8C24 		mov	rcx, QWORD PTR 136[rsp]	# option_maxFactor.43_65, %sfp
 20665      88000000 
 20666              	# sieve_extend.c:1163:                         tuning_results++;
1163:sieve_extend.c ****                         tuning_result[tuning_result_index].maxints = maxints;
 20667              		.loc 1 1163 39 view .LVU6880
 20668 083b 4983C701 		add	r15, 1	# tuning_results,
 20669              	.LVL1210:
1164:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_duration = sample_duration;
 20670              		.loc 1 1164 25 is_stmt 1 view .LVU6881
 20671              	# sieve_extend.c:1166:                         tuning_result[tuning_result_index].sample_max = samp
1166:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_kb = blocksize_kb;
 20672              		.loc 1 1166 71 is_stmt 0 view .LVU6882
 20673 083f 4C8B4C24 		mov	r9, QWORD PTR 120[rsp]	# sample_max, %sfp
 20673      78
 20674              	# sieve_extend.c:1171:                         tuning_result[tuning_result_index].mediumstep_faster
1171:sieve_extend.c ****                         tuning_result[tuning_result_index].vectorstep_faster = vectorstep_faster;
 20675              		.loc 1 1171 78 view .LVU6883
 20676 0844 488B4424 		mov	rax, QWORD PTR 40[rsp]	# mediumstep_faster, %sfp
 20676      28
 20677              	# sieve_extend.c:1170:                         tuning_result[tuning_result_index].smallstep_faster 
1170:sieve_extend.c ****                         tuning_result[tuning_result_index].mediumstep_faster = mediumstep_faster;
 20678              		.loc 1 1170 77 view .LVU6884
 20679 0849 49897D20 		mov	QWORD PTR 32[r13], rdi	# MEM[base: _520, offset: 32B], smallstep_faster
 20680              	# sieve_extend.c:1173:                         tune_benchmark(tuning_result, tuning_result_index);
1173:sieve_extend.c **** 
 20681              		.loc 1 1173 25 view .LVU6885
 20682 084d 488B7C24 		mov	rdi, QWORD PTR 64[rsp]	#, %sfp
 20682      40
 20683              	# sieve_extend.c:1165:                         tuning_result[tuning_result_index].sample_duration =
1165:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_max = sample_max;
 20684              		.loc 1 1165 76 view .LVU6886
 20685 0852 C5FB10A4 		vmovsd	xmm4, QWORD PTR 128[rsp]	# sample_duration, %sfp
 20685      24800000 
 20685      00
 20686              	# sieve_extend.c:1164:                         tuning_result[tuning_result_index].maxints = maxints
1164:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_duration = sample_duration;
GAS LISTING /tmp/ccNeV1of.s 			page 550


 20687              		.loc 1 1164 68 view .LVU6887
 20688 085b 49894D00 		mov	QWORD PTR 0[r13], rcx	# MEM[base: _520, offset: 0B], option_maxFactor.43_65
1165:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_max = sample_max;
 20689              		.loc 1 1165 25 is_stmt 1 view .LVU6888
 20690              	# sieve_extend.c:1166:                         tuning_result[tuning_result_index].sample_max = samp
1166:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_kb = blocksize_kb;
 20691              		.loc 1 1166 71 is_stmt 0 view .LVU6889
 20692 085f 4D894D38 		mov	QWORD PTR 56[r13], r9	# MEM[base: _520, offset: 56B], sample_max
 20693              	# sieve_extend.c:1167:                         tuning_result[tuning_result_index].blocksize_kb = bl
1167:sieve_extend.c ****                         tuning_result[tuning_result_index].free_bits = free_bits;
 20694              		.loc 1 1167 73 view .LVU6890
 20695 0863 4D896510 		mov	QWORD PTR 16[r13], r12	# MEM[base: _520, offset: 16B], blocksize_kb
 20696              	# sieve_extend.c:1168:                         tuning_result[tuning_result_index].free_bits = free_
1168:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_bits = blocksize_bits;
 20697              		.loc 1 1168 70 view .LVU6891
 20698 0867 49896D18 		mov	QWORD PTR 24[r13], rbp	# MEM[base: _520, offset: 24B], free_bits
 20699              	# sieve_extend.c:1169:                         tuning_result[tuning_result_index].blocksize_bits = 
1169:sieve_extend.c ****                         tuning_result[tuning_result_index].smallstep_faster = smallstep_faster;
 20700              		.loc 1 1169 75 view .LVU6892
 20701 086b 49895D08 		mov	QWORD PTR 8[r13], rbx	# MEM[base: _520, offset: 8B], ivtmp.857
 20702              	# sieve_extend.c:1171:                         tuning_result[tuning_result_index].mediumstep_faster
1171:sieve_extend.c ****                         tuning_result[tuning_result_index].vectorstep_faster = vectorstep_faster;
 20703              		.loc 1 1171 78 view .LVU6893
 20704 086f 49894528 		mov	QWORD PTR 40[r13], rax	# MEM[base: _520, offset: 40B], mediumstep_faster
 20705              	# sieve_extend.c:1172:                         tuning_result[tuning_result_index].vectorstep_faster
1172:sieve_extend.c ****                         tune_benchmark(tuning_result, tuning_result_index);
 20706              		.loc 1 1172 78 view .LVU6894
 20707 0873 4D897530 		mov	QWORD PTR 48[r13], r14	# MEM[base: _520, offset: 48B], vectorstep_faster
 20708              	# sieve_extend.c:1165:                         tuning_result[tuning_result_index].sample_duration =
1165:sieve_extend.c ****                         tuning_result[tuning_result_index].sample_max = sample_max;
 20709              		.loc 1 1165 76 view .LVU6895
 20710 0877 C4C17B11 		vmovsd	QWORD PTR 64[r13], xmm4	# MEM[base: _520, offset: 64B], sample_duration
 20710      6540
1166:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_kb = blocksize_kb;
 20711              		.loc 1 1166 25 is_stmt 1 view .LVU6896
1167:sieve_extend.c ****                         tuning_result[tuning_result_index].free_bits = free_bits;
 20712              		.loc 1 1167 25 view .LVU6897
1168:sieve_extend.c ****                         tuning_result[tuning_result_index].blocksize_bits = blocksize_bits;
 20713              		.loc 1 1168 25 view .LVU6898
1169:sieve_extend.c ****                         tuning_result[tuning_result_index].smallstep_faster = smallstep_faster;
 20714              		.loc 1 1169 25 view .LVU6899
1170:sieve_extend.c ****                         tuning_result[tuning_result_index].mediumstep_faster = mediumstep_faster;
 20715              		.loc 1 1170 25 view .LVU6900
1171:sieve_extend.c ****                         tuning_result[tuning_result_index].vectorstep_faster = vectorstep_faster;
 20716              		.loc 1 1171 25 view .LVU6901
1172:sieve_extend.c ****                         tune_benchmark(tuning_result, tuning_result_index);
 20717              		.loc 1 1172 25 view .LVU6902
1173:sieve_extend.c **** 
 20718              		.loc 1 1173 25 view .LVU6903
 20719 087d E8000000 		call	tune_benchmark	#
 20719      00
 20720              	.LVL1211:
1175:sieve_extend.c ****                             best_avg = tuning_result[tuning_result_index].avg;
 20721              		.loc 1 1175 25 view .LVU6904
 20722              	# sieve_extend.c:1175:                         if ( tuning_result[tuning_result_index].avg > best_a
1175:sieve_extend.c ****                             best_avg = tuning_result[tuning_result_index].avg;
 20723              		.loc 1 1175 64 is_stmt 0 view .LVU6905
GAS LISTING /tmp/ccNeV1of.s 			page 551


 20724 0882 C4C17B10 		vmovsd	xmm3, QWORD PTR 88[r13]	# _256, MEM[base: _520, offset: 88B]
 20724      5D58
 20725              	# sieve_extend.c:1175:                         if ( tuning_result[tuning_result_index].avg > best_a
1175:sieve_extend.c ****                             best_avg = tuning_result[tuning_result_index].avg;
 20726              		.loc 1 1175 28 view .LVU6906
 20727 0888 C5F92F5C 		vcomisd	xmm3, QWORD PTR 56[rsp]	# _256, %sfp
 20727      2438
 20728 088e 0F874CFF 		ja	.L1588	#,
 20728      FFFF
 20729              	.L1589:
1183:sieve_extend.c ****                         tuning_result_index++;
 20730              		.loc 1 1183 25 is_stmt 1 view .LVU6907
 20731              	# sieve_extend.c:1183:                         if (option_verboselevel >= 3) { printf("...."); tuni
1183:sieve_extend.c ****                         tuning_result_index++;
 20732              		.loc 1 1183 28 is_stmt 0 view .LVU6908
 20733 0894 837C2468 		cmp	DWORD PTR 104[rsp], 2	# %sfp,
 20733      02
 20734 0899 0F8E70FF 		jle	.L1586	#,
 20734      FFFF
1183:sieve_extend.c ****                         tuning_result_index++;
 20735              		.loc 1 1183 57 is_stmt 1 view .LVU6909
 20736              	.LVL1212:
 20737              	.LBB1221:
 20738              	.LBI1221:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 20739              		.loc 3 105 1 view .LVU6910
 20740              	.LBB1222:
 20741              		.loc 3 107 3 view .LVU6911
 20742              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 20743              		.loc 3 107 10 is_stmt 0 view .LVU6912
 20744 089f 488D3500 		lea	rsi, .LC60[rip]	#,
 20744      000000
 20745 08a6 BF010000 		mov	edi, 1	#,
 20745      00
 20746 08ab 31C0     		xor	eax, eax	#
 20747 08ad E8000000 		call	__printf_chk@PLT	#
 20747      00
 20748              	.LVL1213:
 20749              		.loc 3 107 10 view .LVU6913
 20750              	.LBE1222:
 20751              	.LBE1221:
1183:sieve_extend.c ****                         tuning_result_index++;
 20752              		.loc 1 1183 73 is_stmt 1 view .LVU6914
 20753              	.LBB1223:
 20754              	.LBI1223:
1097:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
 20755              		.loc 1 1097 20 view .LVU6915
 20756              	.LBB1224:
1098:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
 20757              		.loc 1 1098 5 view .LVU6916
 20758              	.LBB1225:
 20759              	.LBI1225:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 20760              		.loc 3 105 1 view .LVU6917
 20761              	.LBB1226:
 20762              		.loc 3 107 3 view .LVU6918
 20763              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
GAS LISTING /tmp/ccNeV1of.s 			page 552


 20764              		.loc 3 107 10 is_stmt 0 view .LVU6919
 20765 08b2 498B4538 		mov	rax, QWORD PTR 56[r13]	# MEM[base: _520, offset: 56B], MEM[base: _520, offset: 56B]
 20766 08b6 BF010000 		mov	edi, 1	#,
 20766      00
 20767 08bb C4C17B10 		vmovsd	xmm0, QWORD PTR 80[r13]	# MEM[base: _520, offset: 80B], MEM[base: _520, offset: 80B]
 20767      4550
 20768 08c1 498B4D10 		mov	rcx, QWORD PTR 16[r13]	# MEM[base: _520, offset: 16B], MEM[base: _520, offset: 16B]
 20769 08c5 498B5508 		mov	rdx, QWORD PTR 8[r13]	# MEM[base: _520, offset: 8B], MEM[base: _520, offset: 8B]
 20770 08c9 48894424 		mov	QWORD PTR 24[rsp], rax	#, MEM[base: _520, offset: 56B]
 20770      18
 20771 08ce B8030000 		mov	eax, 3	#,
 20771      00
 20772 08d3 498B7548 		mov	rsi, QWORD PTR 72[r13]	# MEM[base: _520, offset: 72B], MEM[base: _520, offset: 72B]
 20773 08d7 48897424 		mov	QWORD PTR 16[rsp], rsi	#, MEM[base: _520, offset: 72B]
 20773      10
 20774 08dc 488D3500 		lea	rsi, .LC59[rip]	#,
 20774      000000
 20775 08e3 4D8B4530 		mov	r8, QWORD PTR 48[r13]	# MEM[base: _520, offset: 48B], MEM[base: _520, offset: 48B]
 20776 08e7 4C894424 		mov	QWORD PTR 8[rsp], r8	#, MEM[base: _520, offset: 48B]
 20776      08
 20777 08ec 4D8B5528 		mov	r10, QWORD PTR 40[r13]	# MEM[base: _520, offset: 40B], MEM[base: _520, offset: 40B]
 20778 08f0 4C891424 		mov	QWORD PTR [rsp], r10	#, MEM[base: _520, offset: 40B]
 20779 08f4 4D8B4D20 		mov	r9, QWORD PTR 32[r13]	#, MEM[base: _520, offset: 32B]
 20780 08f8 4D8B4518 		mov	r8, QWORD PTR 24[r13]	#, MEM[base: _520, offset: 24B]
 20781 08fc C4C17B10 		vmovsd	xmm2, QWORD PTR 88[r13]	#, MEM[base: _520, offset: 88B]
 20781      5558
 20782 0902 C4C17B10 		vmovsd	xmm1, QWORD PTR 64[r13]	#, MEM[base: _520, offset: 64B]
 20782      4D40
 20783 0908 E8000000 		call	__printf_chk@PLT	#
 20783      00
 20784              	.LVL1214:
 20785              		.loc 3 107 10 view .LVU6920
 20786              	.LBE1226:
 20787              	.LBE1225:
 20788              	# sieve_extend.c:1103: }
1103:sieve_extend.c **** 
 20789              		.loc 1 1103 1 view .LVU6921
 20790 090d E9FDFEFF 		jmp	.L1586	#
 20790      FF
 20791              	.LVL1215:
 20792              		.p2align 4,,7
 20793 0912 660F1F44 		.p2align 3
 20793      0000
 20794              	.L1587:
1103:sieve_extend.c **** 
 20795              		.loc 1 1103 1 view .LVU6922
 20796              	.LBE1224:
 20797              	.LBE1223:
 20798              	.LBE1237:
 20799              	.LBE1239:
1158:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 20800              		.loc 1 1158 67 is_stmt 1 view .LVU6923
 20801              	# sieve_extend.c:1158:                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_
1158:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 20802              		.loc 1 1158 80 is_stmt 0 view .LVU6924
 20803 0918 49D1EC   		shr	r12	# blocksize_kb
 20804              	.LVL1216:
GAS LISTING /tmp/ccNeV1of.s 			page 553


1158:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 20805              		.loc 1 1158 50 is_stmt 1 view .LVU6925
 20806              	# sieve_extend.c:1158:                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_
1158:sieve_extend.c ****                     for (counter_t free_bits=0; (free_bits < (anticiped_cache_line_bytesize*8*4) &&
 20807              		.loc 1 1158 17 is_stmt 0 view .LVU6926
 20808 091b 836C246C 		sub	DWORD PTR 108[rsp], 1	# %sfp,
 20808      01
 20809 0920 0F859AFE 		jne	.L1593	#,
 20809      FFFF
 20810              	.LBE1241:
1157:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 20811              		.loc 1 1157 101 is_stmt 1 view .LVU6927
 20812              	# sieve_extend.c:1157:             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep
1157:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 20813              		.loc 1 1157 119 is_stmt 0 view .LVU6928
 20814 0926 4C03B424 		add	r14, QWORD PTR 144[rsp]	# vectorstep_faster, %sfp
 20814      90000000 
 20815              	.LVL1217:
1157:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 20816              		.loc 1 1157 67 is_stmt 1 view .LVU6929
 20817              	# sieve_extend.c:1157:             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep
1157:sieve_extend.c ****                 for (counter_t blocksize_kb=256; blocksize_kb>=8; blocksize_kb /= 2) {
 20818              		.loc 1 1157 13 is_stmt 0 view .LVU6930
 20819 092e 4981FE00 		cmp	r14, 256	# vectorstep_faster,
 20819      010000
 20820 0935 0F8675FE 		jbe	.L1595	#,
 20820      FFFF
 20821              	.LBE1217:
1156:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 20822              		.loc 1 1156 94 is_stmt 1 view .LVU6931
 20823              	# sieve_extend.c:1156:         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_fast
1156:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 20824              		.loc 1 1156 112 is_stmt 0 view .LVU6932
 20825 093b 4C8BB424 		mov	r14, QWORD PTR 152[rsp]	# smallstep_faster_steps, %sfp
 20825      98000000 
 20826              	.LVL1218:
1156:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 20827              		.loc 1 1156 112 view .LVU6933
 20828 0943 4C017424 		add	QWORD PTR 40[rsp], r14	# %sfp, smallstep_faster_steps
 20828      28
 20829              	.LVL1219:
1156:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 20830              		.loc 1 1156 112 view .LVU6934
 20831 0948 4C8B6424 		mov	r12, QWORD PTR 40[rsp]	# mediumstep_faster, %sfp
 20831      28
 20832              	.LVL1220:
1156:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 20833              		.loc 1 1156 62 is_stmt 1 view .LVU6935
 20834              	# sieve_extend.c:1156:         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_fast
1156:sieve_extend.c ****             for (counter_t vectorstep_faster = mediumstep_faster; vectorstep_faster <= VECTOR_SIZE;
 20835              		.loc 1 1156 9 is_stmt 0 view .LVU6936
 20836 094d 4983FC40 		cmp	r12, 64	# mediumstep_faster,
 20837 0951 0F8649FE 		jbe	.L1597	#,
 20837      FFFF
 20838              	.LBE1216:
1155:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 20839              		.loc 1 1155 75 is_stmt 1 view .LVU6937
GAS LISTING /tmp/ccNeV1of.s 			page 554


 20840              	# sieve_extend.c:1155:     for (counter_t smallstep_faster = 0; smallstep_faster <= WORD_SIZE/2; sm
1155:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 20841              		.loc 1 1155 92 is_stmt 0 view .LVU6938
 20842 0957 488B9C24 		mov	rbx, QWORD PTR 152[rsp]	# smallstep_faster_steps, %sfp
 20842      98000000 
 20843 095f 48015C24 		add	QWORD PTR 48[rsp], rbx	# %sfp, smallstep_faster_steps
 20843      30
 20844              	.LVL1221:
1155:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 20845              		.loc 1 1155 92 view .LVU6939
 20846 0964 4C8B6C24 		mov	r13, QWORD PTR 48[rsp]	# smallstep_faster, %sfp
 20846      30
 20847              	.LVL1222:
1155:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 20848              		.loc 1 1155 42 is_stmt 1 view .LVU6940
 20849              	# sieve_extend.c:1155:     for (counter_t smallstep_faster = 0; smallstep_faster <= WORD_SIZE/2; sm
1155:sieve_extend.c ****         for (counter_t mediumstep_faster = smallstep_faster; mediumstep_faster <= WORD_SIZE; medium
 20850              		.loc 1 1155 5 is_stmt 0 view .LVU6941
 20851 0969 4983FD20 		cmp	r13, 32	# smallstep_faster,
 20852 096d 0F861FFE 		jbe	.L1585	#,
 20852      FFFF
 20853              	.LBE1246:
1190:sieve_extend.c ****         printf("%ju results. Inital best blocksize: %ju; best smallstep %ju; best mediumstep %ju; b
 20854              		.loc 1 1190 5 is_stmt 1 view .LVU6942
 20855              	# sieve_extend.c:1190:     if (option_verboselevel >= 2) {
1190:sieve_extend.c ****         printf("%ju results. Inital best blocksize: %ju; best smallstep %ju; best mediumstep %ju; b
 20856              		.loc 1 1190 8 is_stmt 0 view .LVU6943
 20857 0973 837C2468 		cmp	DWORD PTR 104[rsp], 1	# %sfp,
 20857      01
 20858 0978 7E3A     		jle	.L1598	#,
1191:sieve_extend.c ****         printf("Best options\n");
 20859              		.loc 1 1191 9 is_stmt 1 view .LVU6944
 20860              	.LVL1223:
 20861              	.LBB1247:
 20862              	.LBI1247:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 20863              		.loc 3 105 1 view .LVU6945
 20864              	.LBB1248:
 20865              		.loc 3 107 3 view .LVU6946
 20866              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 20867              		.loc 3 107 10 is_stmt 0 view .LVU6947
 20868 097a 488B6C24 		mov	rbp, QWORD PTR 96[rsp]	# best_vectorstep_faster, %sfp
 20868      60
 20869              	.LVL1224:
 20870              		.loc 3 107 10 view .LVU6948
 20871 097f BF010000 		mov	edi, 1	#,
 20871      00
 20872 0984 4C8B4C24 		mov	r9, QWORD PTR 88[rsp]	#, %sfp
 20872      58
 20873 0989 4C89FA   		mov	rdx, r15	#, tuning_results
 20874 098c 4C8B4424 		mov	r8, QWORD PTR 80[rsp]	#, %sfp
 20874      50
 20875 0991 488D3500 		lea	rsi, .LC61[rip]	#,
 20875      000000
 20876 0998 488B4C24 		mov	rcx, QWORD PTR 72[rsp]	#, %sfp
 20876      48
 20877 099d 31C0     		xor	eax, eax	#
GAS LISTING /tmp/ccNeV1of.s 			page 555


 20878 099f 48892C24 		mov	QWORD PTR [rsp], rbp	#, best_vectorstep_faster
 20879 09a3 E8000000 		call	__printf_chk@PLT	#
 20879      00
 20880              	.LVL1225:
 20881              		.loc 3 107 10 view .LVU6949
 20882              	.LBE1248:
 20883              	.LBE1247:
1192:sieve_extend.c ****     }
 20884              		.loc 1 1192 9 is_stmt 1 view .LVU6950
 20885              	.LBB1249:
 20886              	.LBI1249:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 20887              		.loc 3 105 1 view .LVU6951
 20888              	.LBB1250:
 20889              		.loc 3 107 3 view .LVU6952
 20890              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 20891              		.loc 3 107 10 is_stmt 0 view .LVU6953
 20892 09a8 488D3D00 		lea	rdi, .LC62[rip]	#,
 20892      000000
 20893 09af E8000000 		call	puts@PLT	#
 20893      00
 20894              	.LVL1226:
 20895              	.L1598:
 20896              		.loc 3 107 10 view .LVU6954
 20897              	.LBE1250:
 20898              	.LBE1249:
 20899              	.LBB1251:
 20900              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 20901              		.loc 1 1210 24 view .LVU6955
 20902 09b4 4531DB   		xor	r11d, r11d	# step
 20903              	.LBE1251:
 20904              	.LBB1252:
 20905              	# sieve_extend.c:1202:                 for (counter_t tuning_result_index=0; tuning_result_index<mi
1202:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 20906              		.loc 1 1202 75 view .LVU6956
 20907 09b7 41BE0A00 		mov	r14d, 10	# tmp476,
 20907      0000
 20908 09bd 4C8B6C24 		mov	r13, QWORD PTR 120[rsp]	# sample_max, %sfp
 20908      78
 20909              	.LVL1227:
1202:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 20910              		.loc 1 1202 75 view .LVU6957
 20911 09c2 4C8B6424 		mov	r12, QWORD PTR 64[rsp]	# tuning_result, %sfp
 20911      40
 20912              	.LVL1228:
1202:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 20913              		.loc 1 1202 75 view .LVU6958
 20914 09c7 4C895C24 		mov	QWORD PTR 48[rsp], r11	# %sfp, step
 20914      30
 20915              	.LVL1229:
 20916              	.L1603:
1202:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 20917              		.loc 1 1202 75 view .LVU6959
 20918              	.LBE1252:
1195:sieve_extend.c ****         qsort(tuning_result, (size_t)tuning_results, sizeof(tuning_result_type), compare_tuning_res
 20919              		.loc 1 1195 11 is_stmt 1 view .LVU6960
GAS LISTING /tmp/ccNeV1of.s 			page 556


 20920 09cc 4983FF04 		cmp	r15, 4	# tuning_results,
 20921 09d0 0F862E04 		jbe	.L1699	#,
 20921      0000
1196:sieve_extend.c ****         step++;
 20922              		.loc 1 1196 9 view .LVU6961
 20923 09d6 488D0D00 		lea	rcx, compare_tuning_result[rip]	#,
 20923      000000
 20924 09dd BA600000 		mov	edx, 96	#,
 20924      00
 20925 09e2 4C89FE   		mov	rsi, r15	#, tuning_results
 20926 09e5 4C89E7   		mov	rdi, r12	#, tuning_result
 20927 09e8 E8000000 		call	qsort@PLT	#
 20927      00
 20928              	.LVL1230:
1197:sieve_extend.c ****         if (option_verboselevel >= 2) {
 20929              		.loc 1 1197 9 view .LVU6962
1198:sieve_extend.c ****             tuning_result_index = 0;
 20930              		.loc 1 1198 9 view .LVU6963
 20931              	# sieve_extend.c:1197:         step++;
1197:sieve_extend.c ****         if (option_verboselevel >= 2) {
 20932              		.loc 1 1197 13 is_stmt 0 view .LVU6964
 20933 09ed 48834424 		add	QWORD PTR 48[rsp], 1	# %sfp,
 20933      3001
 20934              	.LVL1231:
 20935              	# sieve_extend.c:1198:         if (option_verboselevel >= 2) {
1198:sieve_extend.c ****             tuning_result_index = 0;
 20936              		.loc 1 1198 12 view .LVU6965
 20937 09f3 837C2468 		cmp	DWORD PTR 104[rsp], 1	# %sfp,
 20937      01
 20938 09f8 0F8F8902 		jg	.L1599	#,
 20938      0000
 20939              	.L1601:
1208:sieve_extend.c **** 
 20940              		.loc 1 1208 9 is_stmt 1 view .LVU6966
 20941              	# sieve_extend.c:1208:         tuning_results = tuning_results / 2;
1208:sieve_extend.c **** 
 20942              		.loc 1 1208 24 is_stmt 0 view .LVU6967
 20943 09fe 49D1EF   		shr	r15	# tuning_results
 20944              	.LVL1232:
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 20945              		.loc 1 1210 9 is_stmt 1 view .LVU6968
 20946              	.LBB1261:
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 20947              		.loc 1 1210 14 view .LVU6969
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 20948              		.loc 1 1210 29 view .LVU6970
 20949              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 20950              		.loc 1 1210 24 is_stmt 0 view .LVU6971
 20951 0a01 31ED     		xor	ebp, ebp	# i
 20952 0a03 4D89FB   		mov	r11, r15	# tmp490, tuning_results
 20953 0a06 498D5C24 		lea	rbx, 56[r12]	# ivtmp.838,
 20953      38
 20954 0a0b 4183E307 		and	r11d, 7	# tmp490,
 20955 0a0f 0F84D300 		je	.L1600	#,
 20955      0000
 20956 0a15 4983FB01 		cmp	r11, 1	# tmp490,
GAS LISTING /tmp/ccNeV1of.s 			page 557


 20957 0a19 0F84AA00 		je	.L1658	#,
 20957      0000
 20958 0a1f 4983FB02 		cmp	r11, 2	# tmp490,
 20959 0a23 0F848A00 		je	.L1659	#,
 20959      0000
 20960 0a29 4983FB03 		cmp	r11, 3	# tmp490,
 20961 0a2d 746E     		je	.L1660	#,
 20962 0a2f 4983FB04 		cmp	r11, 4	# tmp490,
 20963 0a33 7452     		je	.L1661	#,
 20964 0a35 4983FB05 		cmp	r11, 5	# tmp490,
 20965 0a39 7436     		je	.L1662	#,
 20966 0a3b 4983FB06 		cmp	r11, 6	# tmp490,
 20967 0a3f 741A     		je	.L1663	#,
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 20968              		.loc 1 1211 13 is_stmt 1 view .LVU6972
 20969 0a41 31F6     		xor	esi, esi	#
 20970 0a43 4C89E7   		mov	rdi, r12	#, tuning_result
 20971 0a46 E8000000 		call	tune_benchmark	#
 20971      00
 20972              	.LVL1233:
1212:sieve_extend.c ****         }
 20973              		.loc 1 1212 13 view .LVU6973
 20974              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 20975              		.loc 1 1210 48 is_stmt 0 view .LVU6974
 20976 0a4b BD010000 		mov	ebp, 1	# i,
 20976      00
 20977              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 20978              		.loc 1 1212 41 view .LVU6975
 20979 0a50 4C012B   		add	QWORD PTR [rbx], r13	# MEM[base: _159, offset: 0B], sample_max
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 20980              		.loc 1 1210 47 is_stmt 1 view .LVU6976
 20981              	.LVL1234:
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 20982              		.loc 1 1210 29 view .LVU6977
 20983 0a53 498D9C24 		lea	rbx, 152[r12]	# ivtmp.838,
 20983      98000000 
 20984              	.L1663:
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 20985              		.loc 1 1211 13 view .LVU6978
 20986 0a5b 4889EE   		mov	rsi, rbp	#, i
 20987 0a5e 4C89E7   		mov	rdi, r12	#, tuning_result
 20988 0a61 E8000000 		call	tune_benchmark	#
 20988      00
 20989              	.LVL1235:
1212:sieve_extend.c ****         }
 20990              		.loc 1 1212 13 view .LVU6979
 20991              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 20992              		.loc 1 1210 48 is_stmt 0 view .LVU6980
 20993 0a66 4883C501 		add	rbp, 1	# i,
 20994              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 20995              		.loc 1 1212 41 view .LVU6981
 20996 0a6a 4C012B   		add	QWORD PTR [rbx], r13	# MEM[base: _159, offset: 0B], sample_max
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
GAS LISTING /tmp/ccNeV1of.s 			page 558


 20997              		.loc 1 1210 47 is_stmt 1 view .LVU6982
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 20998              		.loc 1 1210 29 view .LVU6983
 20999 0a6d 4883C360 		add	rbx, 96	# ivtmp.838,
 21000              	.L1662:
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21001              		.loc 1 1211 13 view .LVU6984
 21002 0a71 4889EE   		mov	rsi, rbp	#, i
 21003 0a74 4C89E7   		mov	rdi, r12	#, tuning_result
 21004 0a77 E8000000 		call	tune_benchmark	#
 21004      00
 21005              	.LVL1236:
1212:sieve_extend.c ****         }
 21006              		.loc 1 1212 13 view .LVU6985
 21007              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21008              		.loc 1 1210 48 is_stmt 0 view .LVU6986
 21009 0a7c 4883C501 		add	rbp, 1	# i,
 21010              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21011              		.loc 1 1212 41 view .LVU6987
 21012 0a80 4C012B   		add	QWORD PTR [rbx], r13	# MEM[base: _159, offset: 0B], sample_max
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21013              		.loc 1 1210 47 is_stmt 1 view .LVU6988
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21014              		.loc 1 1210 29 view .LVU6989
 21015 0a83 4883C360 		add	rbx, 96	# ivtmp.838,
 21016              	.L1661:
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21017              		.loc 1 1211 13 view .LVU6990
 21018 0a87 4889EE   		mov	rsi, rbp	#, i
 21019 0a8a 4C89E7   		mov	rdi, r12	#, tuning_result
 21020 0a8d E8000000 		call	tune_benchmark	#
 21020      00
 21021              	.LVL1237:
1212:sieve_extend.c ****         }
 21022              		.loc 1 1212 13 view .LVU6991
 21023              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21024              		.loc 1 1210 48 is_stmt 0 view .LVU6992
 21025 0a92 4883C501 		add	rbp, 1	# i,
 21026              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21027              		.loc 1 1212 41 view .LVU6993
 21028 0a96 4C012B   		add	QWORD PTR [rbx], r13	# MEM[base: _159, offset: 0B], sample_max
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21029              		.loc 1 1210 47 is_stmt 1 view .LVU6994
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21030              		.loc 1 1210 29 view .LVU6995
 21031 0a99 4883C360 		add	rbx, 96	# ivtmp.838,
 21032              	.L1660:
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21033              		.loc 1 1211 13 view .LVU6996
 21034 0a9d 4889EE   		mov	rsi, rbp	#, i
 21035 0aa0 4C89E7   		mov	rdi, r12	#, tuning_result
 21036 0aa3 E8000000 		call	tune_benchmark	#
 21036      00
GAS LISTING /tmp/ccNeV1of.s 			page 559


 21037              	.LVL1238:
1212:sieve_extend.c ****         }
 21038              		.loc 1 1212 13 view .LVU6997
 21039              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21040              		.loc 1 1210 48 is_stmt 0 view .LVU6998
 21041 0aa8 4883C501 		add	rbp, 1	# i,
 21042              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21043              		.loc 1 1212 41 view .LVU6999
 21044 0aac 4C012B   		add	QWORD PTR [rbx], r13	# MEM[base: _159, offset: 0B], sample_max
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21045              		.loc 1 1210 47 is_stmt 1 view .LVU7000
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21046              		.loc 1 1210 29 view .LVU7001
 21047 0aaf 4883C360 		add	rbx, 96	# ivtmp.838,
 21048              	.L1659:
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21049              		.loc 1 1211 13 view .LVU7002
 21050 0ab3 4889EE   		mov	rsi, rbp	#, i
 21051 0ab6 4C89E7   		mov	rdi, r12	#, tuning_result
 21052 0ab9 E8000000 		call	tune_benchmark	#
 21052      00
 21053              	.LVL1239:
1212:sieve_extend.c ****         }
 21054              		.loc 1 1212 13 view .LVU7003
 21055              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21056              		.loc 1 1210 48 is_stmt 0 view .LVU7004
 21057 0abe 4883C501 		add	rbp, 1	# i,
 21058              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21059              		.loc 1 1212 41 view .LVU7005
 21060 0ac2 4C012B   		add	QWORD PTR [rbx], r13	# MEM[base: _159, offset: 0B], sample_max
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21061              		.loc 1 1210 47 is_stmt 1 view .LVU7006
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21062              		.loc 1 1210 29 view .LVU7007
 21063 0ac5 4883C360 		add	rbx, 96	# ivtmp.838,
 21064              	.L1658:
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21065              		.loc 1 1211 13 view .LVU7008
 21066 0ac9 4889EE   		mov	rsi, rbp	#, i
 21067 0acc 4C89E7   		mov	rdi, r12	#, tuning_result
 21068              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21069              		.loc 1 1210 48 is_stmt 0 view .LVU7009
 21070 0acf 4883C501 		add	rbp, 1	# i,
 21071              	# sieve_extend.c:1211:             tune_benchmark(tuning_result, i);
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21072              		.loc 1 1211 13 view .LVU7010
 21073 0ad3 E8000000 		call	tune_benchmark	#
 21073      00
 21074              	.LVL1240:
1212:sieve_extend.c ****         }
 21075              		.loc 1 1212 13 is_stmt 1 view .LVU7011
 21076              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
GAS LISTING /tmp/ccNeV1of.s 			page 560


1212:sieve_extend.c ****         }
 21077              		.loc 1 1212 41 is_stmt 0 view .LVU7012
 21078 0ad8 4C012B   		add	QWORD PTR [rbx], r13	# MEM[base: _159, offset: 0B], sample_max
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21079              		.loc 1 1210 47 is_stmt 1 view .LVU7013
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21080              		.loc 1 1210 29 view .LVU7014
 21081 0adb 4883C360 		add	rbx, 96	# ivtmp.838,
 21082              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21083              		.loc 1 1210 9 is_stmt 0 view .LVU7015
 21084 0adf 4939EF   		cmp	r15, rbp	# tuning_results, i
 21085 0ae2 0F84E4FE 		je	.L1603	#,
 21085      FFFF
 21086              	.L1600:
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21087              		.loc 1 1211 13 is_stmt 1 view .LVU7016
 21088 0ae8 4889EE   		mov	rsi, rbp	#, i
 21089 0aeb 4C89E7   		mov	rdi, r12	#, tuning_result
 21090 0aee E8000000 		call	tune_benchmark	#
 21090      00
 21091              	.LVL1241:
1212:sieve_extend.c ****         }
 21092              		.loc 1 1212 13 view .LVU7017
 21093 0af3 488D7B60 		lea	rdi, 96[rbx]	# tmp492,
 21094              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21095              		.loc 1 1212 41 is_stmt 0 view .LVU7018
 21096 0af7 4C012B   		add	QWORD PTR [rbx], r13	# MEM[base: _159, offset: 0B], sample_max
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21097              		.loc 1 1210 47 is_stmt 1 view .LVU7019
 21098 0afa 48897C24 		mov	QWORD PTR 40[rsp], rdi	# %sfp, tmp492
 21098      28
 21099              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21100              		.loc 1 1210 48 is_stmt 0 view .LVU7020
 21101 0aff 488D7501 		lea	rsi, 1[rbp]	# tmp491,
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21102              		.loc 1 1210 29 is_stmt 1 view .LVU7021
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21103              		.loc 1 1211 13 view .LVU7022
 21104 0b03 4C89E7   		mov	rdi, r12	#, tuning_result
 21105 0b06 E8000000 		call	tune_benchmark	#
 21105      00
 21106              	.LVL1242:
1212:sieve_extend.c ****         }
 21107              		.loc 1 1212 13 view .LVU7023
 21108              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21109              		.loc 1 1212 41 is_stmt 0 view .LVU7024
 21110 0b0b 4C8B4C24 		mov	r9, QWORD PTR 40[rsp]	# tmp492, %sfp
 21110      28
 21111 0b10 488D83C0 		lea	rax, 192[rbx]	# ivtmp.838,
 21111      000000
 21112              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21113              		.loc 1 1210 48 view .LVU7025
GAS LISTING /tmp/ccNeV1of.s 			page 561


 21114 0b17 488D7502 		lea	rsi, 2[rbp]	# i,
 21115              	# sieve_extend.c:1211:             tune_benchmark(tuning_result, i);
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21116              		.loc 1 1211 13 view .LVU7026
 21117 0b1b 4C89E7   		mov	rdi, r12	#, tuning_result
 21118 0b1e 48894424 		mov	QWORD PTR 40[rsp], rax	# %sfp, ivtmp.838
 21118      28
 21119              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21120              		.loc 1 1212 41 view .LVU7027
 21121 0b23 4D0129   		add	QWORD PTR [r9], r13	# MEM[base: _159, offset: 0B], sample_max
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21122              		.loc 1 1210 47 is_stmt 1 view .LVU7028
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21123              		.loc 1 1210 29 view .LVU7029
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21124              		.loc 1 1211 13 view .LVU7030
 21125 0b26 E8000000 		call	tune_benchmark	#
 21125      00
 21126              	.LVL1243:
1212:sieve_extend.c ****         }
 21127              		.loc 1 1212 13 view .LVU7031
 21128              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21129              		.loc 1 1212 41 is_stmt 0 view .LVU7032
 21130 0b2b 488B7424 		mov	rsi, QWORD PTR 40[rsp]	# ivtmp.838, %sfp
 21130      28
 21131 0b30 4C8D8320 		lea	r8, 288[rbx]	# ivtmp.838,
 21131      010000
 21132 0b37 4C894424 		mov	QWORD PTR 40[rsp], r8	# %sfp, ivtmp.838
 21132      28
 21133              	# sieve_extend.c:1211:             tune_benchmark(tuning_result, i);
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21134              		.loc 1 1211 13 view .LVU7033
 21135 0b3c 4C89E7   		mov	rdi, r12	#, tuning_result
 21136              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21137              		.loc 1 1212 41 view .LVU7034
 21138 0b3f 4C012E   		add	QWORD PTR [rsi], r13	# MEM[base: _159, offset: 0B], sample_max
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21139              		.loc 1 1210 47 is_stmt 1 view .LVU7035
 21140              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21141              		.loc 1 1210 48 is_stmt 0 view .LVU7036
 21142 0b42 488D7503 		lea	rsi, 3[rbp]	# i,
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21143              		.loc 1 1210 29 is_stmt 1 view .LVU7037
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21144              		.loc 1 1211 13 view .LVU7038
 21145 0b46 E8000000 		call	tune_benchmark	#
 21145      00
 21146              	.LVL1244:
1212:sieve_extend.c ****         }
 21147              		.loc 1 1212 13 view .LVU7039
 21148              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21149              		.loc 1 1212 41 is_stmt 0 view .LVU7040
GAS LISTING /tmp/ccNeV1of.s 			page 562


 21150 0b4b 4C8B5424 		mov	r10, QWORD PTR 40[rsp]	# ivtmp.838, %sfp
 21150      28
 21151 0b50 488D9380 		lea	rdx, 384[rbx]	# ivtmp.838,
 21151      010000
 21152              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21153              		.loc 1 1210 48 view .LVU7041
 21154 0b57 488D7504 		lea	rsi, 4[rbp]	# i,
 21155              	# sieve_extend.c:1211:             tune_benchmark(tuning_result, i);
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21156              		.loc 1 1211 13 view .LVU7042
 21157 0b5b 4C89E7   		mov	rdi, r12	#, tuning_result
 21158 0b5e 48895424 		mov	QWORD PTR 40[rsp], rdx	# %sfp, ivtmp.838
 21158      28
 21159              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21160              		.loc 1 1212 41 view .LVU7043
 21161 0b63 4D012A   		add	QWORD PTR [r10], r13	# MEM[base: _159, offset: 0B], sample_max
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21162              		.loc 1 1210 47 is_stmt 1 view .LVU7044
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21163              		.loc 1 1210 29 view .LVU7045
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21164              		.loc 1 1211 13 view .LVU7046
 21165 0b66 E8000000 		call	tune_benchmark	#
 21165      00
 21166              	.LVL1245:
1212:sieve_extend.c ****         }
 21167              		.loc 1 1212 13 view .LVU7047
 21168              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21169              		.loc 1 1212 41 is_stmt 0 view .LVU7048
 21170 0b6b 488B4C24 		mov	rcx, QWORD PTR 40[rsp]	# ivtmp.838, %sfp
 21170      28
 21171 0b70 4C8D9BE0 		lea	r11, 480[rbx]	# ivtmp.838,
 21171      010000
 21172              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21173              		.loc 1 1210 48 view .LVU7049
 21174 0b77 488D7505 		lea	rsi, 5[rbp]	# i,
 21175              	# sieve_extend.c:1211:             tune_benchmark(tuning_result, i);
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21176              		.loc 1 1211 13 view .LVU7050
 21177 0b7b 4C89E7   		mov	rdi, r12	#, tuning_result
 21178 0b7e 4C895C24 		mov	QWORD PTR 40[rsp], r11	# %sfp, ivtmp.838
 21178      28
 21179              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21180              		.loc 1 1212 41 view .LVU7051
 21181 0b83 4C0129   		add	QWORD PTR [rcx], r13	# MEM[base: _159, offset: 0B], sample_max
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21182              		.loc 1 1210 47 is_stmt 1 view .LVU7052
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21183              		.loc 1 1210 29 view .LVU7053
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21184              		.loc 1 1211 13 view .LVU7054
 21185 0b86 E8000000 		call	tune_benchmark	#
GAS LISTING /tmp/ccNeV1of.s 			page 563


 21185      00
 21186              	.LVL1246:
1212:sieve_extend.c ****         }
 21187              		.loc 1 1212 13 view .LVU7055
 21188              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21189              		.loc 1 1212 41 is_stmt 0 view .LVU7056
 21190 0b8b 488B7C24 		mov	rdi, QWORD PTR 40[rsp]	# ivtmp.838, %sfp
 21190      28
 21191 0b90 4C8D8B40 		lea	r9, 576[rbx]	# ivtmp.838,
 21191      020000
 21192 0b97 4C894C24 		mov	QWORD PTR 40[rsp], r9	# %sfp, ivtmp.838
 21192      28
 21193              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21194              		.loc 1 1210 48 view .LVU7057
 21195 0b9c 488D7506 		lea	rsi, 6[rbp]	# i,
 21196              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21197              		.loc 1 1212 41 view .LVU7058
 21198 0ba0 4C012F   		add	QWORD PTR [rdi], r13	# MEM[base: _159, offset: 0B], sample_max
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21199              		.loc 1 1210 47 is_stmt 1 view .LVU7059
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21200              		.loc 1 1210 29 view .LVU7060
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21201              		.loc 1 1211 13 view .LVU7061
 21202 0ba3 4C89E7   		mov	rdi, r12	#, tuning_result
 21203 0ba6 E8000000 		call	tune_benchmark	#
 21203      00
 21204              	.LVL1247:
1212:sieve_extend.c ****         }
 21205              		.loc 1 1212 13 view .LVU7062
 21206              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21207              		.loc 1 1212 41 is_stmt 0 view .LVU7063
 21208 0bab 488B4424 		mov	rax, QWORD PTR 40[rsp]	# ivtmp.838, %sfp
 21208      28
 21209              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21210              		.loc 1 1210 48 view .LVU7064
 21211 0bb0 488D7507 		lea	rsi, 7[rbp]	# i,
 21212 0bb4 4C8D83A0 		lea	r8, 672[rbx]	# ivtmp.838,
 21212      020000
 21213              	# sieve_extend.c:1211:             tune_benchmark(tuning_result, i);
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21214              		.loc 1 1211 13 view .LVU7065
 21215 0bbb 4C89E7   		mov	rdi, r12	#, tuning_result
 21216 0bbe 4C894424 		mov	QWORD PTR 40[rsp], r8	# %sfp, ivtmp.838
 21216      28
 21217              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21218              		.loc 1 1210 48 view .LVU7066
 21219 0bc3 4883C508 		add	rbp, 8	# i,
 21220              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21221              		.loc 1 1212 41 view .LVU7067
GAS LISTING /tmp/ccNeV1of.s 			page 564


 21222 0bc7 4C0128   		add	QWORD PTR [rax], r13	# MEM[base: _159, offset: 0B], sample_max
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21223              		.loc 1 1210 47 is_stmt 1 view .LVU7068
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21224              		.loc 1 1210 29 view .LVU7069
1211:sieve_extend.c ****             tuning_result[i].sample_max += sample_max;
 21225              		.loc 1 1211 13 view .LVU7070
 21226 0bca 4881C300 		add	rbx, 768	# ivtmp.838,
 21226      030000
 21227 0bd1 E8000000 		call	tune_benchmark	#
 21227      00
 21228              	.LVL1248:
1212:sieve_extend.c ****         }
 21229              		.loc 1 1212 13 view .LVU7071
 21230              	# sieve_extend.c:1212:             tuning_result[i].sample_max += sample_max;
1212:sieve_extend.c ****         }
 21231              		.loc 1 1212 41 is_stmt 0 view .LVU7072
 21232 0bd6 488B7424 		mov	rsi, QWORD PTR 40[rsp]	# ivtmp.838, %sfp
 21232      28
 21233 0bdb 4C012E   		add	QWORD PTR [rsi], r13	# MEM[base: _159, offset: 0B], sample_max
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21234              		.loc 1 1210 47 is_stmt 1 view .LVU7073
 21235              	.LVL1249:
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21236              		.loc 1 1210 29 view .LVU7074
 21237              	# sieve_extend.c:1210:         for (counter_t i=0; i<tuning_results; i++) {
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21238              		.loc 1 1210 9 is_stmt 0 view .LVU7075
 21239 0bde 4939EF   		cmp	r15, rbp	# tuning_results, i
 21240 0be1 0F8501FF 		jne	.L1600	#,
 21240      FFFF
 21241 0be7 E9E0FDFF 		jmp	.L1603	#
 21241      FF
 21242              	.LVL1250:
 21243 0bec 0F1F4000 		.p2align 4,,7
 21244              		.p2align 3
 21245              	.L1698:
1210:sieve_extend.c ****             tune_benchmark(tuning_result, i);
 21246              		.loc 1 1210 9 view .LVU7076
 21247              	.LBE1261:
 21248              	.LBB1262:
 21249              	.LBB1244:
 21250              	.LBB1243:
 21251              	.LBB1242:
 21252              	.LBB1240:
 21253              	.LBB1238:
 21254              	.LBB1227:
 21255              	.LBB1228:
 21256              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 21257              		.loc 3 107 10 view .LVU7077
 21258 0bf0 488D3500 		lea	rsi, .LC58[rip]	#,
 21258      000000
 21259 0bf7 BF010000 		mov	edi, 1	#,
 21259      00
 21260 0bfc C5FB115C 		vmovsd	QWORD PTR 56[rsp], xmm3	# %sfp, _256
 21260      2438
 21261              	.LBE1228:
GAS LISTING /tmp/ccNeV1of.s 			page 565


 21262              	.LBE1227:
1181:sieve_extend.c ****                         }
 21263              		.loc 1 1181 60 is_stmt 1 view .LVU7078
 21264              	.LVL1251:
 21265              	.LBB1230:
 21266              	.LBI1227:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21267              		.loc 3 105 1 view .LVU7079
 21268              	.LBB1229:
 21269              		.loc 3 107 3 view .LVU7080
 21270              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 21271              		.loc 3 107 10 is_stmt 0 view .LVU7081
 21272 0c02 31C0     		xor	eax, eax	#
 21273 0c04 E8000000 		call	__printf_chk@PLT	#
 21273      00
 21274              	.LVL1252:
 21275              		.loc 3 107 10 view .LVU7082
 21276              	.LBE1229:
 21277              	.LBE1230:
1181:sieve_extend.c ****                         }
 21278              		.loc 1 1181 76 is_stmt 1 view .LVU7083
 21279              	.LBB1231:
 21280              	.LBI1231:
1097:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
 21281              		.loc 1 1097 20 view .LVU7084
 21282              	.LBB1232:
1098:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
 21283              		.loc 1 1098 5 view .LVU7085
 21284              	.LBB1233:
 21285              	.LBI1233:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21286              		.loc 3 105 1 view .LVU7086
 21287              	.LBB1234:
 21288              		.loc 3 107 3 view .LVU7087
 21289              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 21290              		.loc 3 107 10 is_stmt 0 view .LVU7088
 21291 0c09 4D8B4538 		mov	r8, QWORD PTR 56[r13]	# MEM[base: _520, offset: 56B], MEM[base: _520, offset: 56B]
 21292 0c0d BF010000 		mov	edi, 1	#,
 21292      00
 21293 0c12 498B4D10 		mov	rcx, QWORD PTR 16[r13]	# MEM[base: _520, offset: 16B], MEM[base: _520, offset: 16B]
 21294 0c16 488D3500 		lea	rsi, .LC59[rip]	#,
 21294      000000
 21295 0c1d C4C17B10 		vmovsd	xmm0, QWORD PTR 80[r13]	# MEM[base: _520, offset: 80B], MEM[base: _520, offset: 80B]
 21295      4550
 21296 0c23 B8030000 		mov	eax, 3	#,
 21296      00
 21297 0c28 498B5508 		mov	rdx, QWORD PTR 8[r13]	# MEM[base: _520, offset: 8B], MEM[base: _520, offset: 8B]
 21298 0c2c 4C894424 		mov	QWORD PTR 24[rsp], r8	#, MEM[base: _520, offset: 56B]
 21298      18
 21299 0c31 4D8B5548 		mov	r10, QWORD PTR 72[r13]	# MEM[base: _520, offset: 72B], MEM[base: _520, offset: 72B]
 21300 0c35 4C895424 		mov	QWORD PTR 16[rsp], r10	#, MEM[base: _520, offset: 72B]
 21300      10
 21301 0c3a 4D8B5D30 		mov	r11, QWORD PTR 48[r13]	# MEM[base: _520, offset: 48B], MEM[base: _520, offset: 48B]
 21302 0c3e 4C895C24 		mov	QWORD PTR 8[rsp], r11	#, MEM[base: _520, offset: 48B]
 21302      08
 21303 0c43 4D8B4D28 		mov	r9, QWORD PTR 40[r13]	# MEM[base: _520, offset: 40B], MEM[base: _520, offset: 40B]
 21304 0c47 4C890C24 		mov	QWORD PTR [rsp], r9	#, MEM[base: _520, offset: 40B]
GAS LISTING /tmp/ccNeV1of.s 			page 566


 21305 0c4b 4D8B4D20 		mov	r9, QWORD PTR 32[r13]	#, MEM[base: _520, offset: 32B]
 21306 0c4f 4D8B4518 		mov	r8, QWORD PTR 24[r13]	#, MEM[base: _520, offset: 24B]
 21307 0c53 C4C17B10 		vmovsd	xmm2, QWORD PTR 88[r13]	#, MEM[base: _520, offset: 88B]
 21307      5558
 21308 0c59 C4C17B10 		vmovsd	xmm1, QWORD PTR 64[r13]	#, MEM[base: _520, offset: 64B]
 21308      4D40
 21309 0c5f E8000000 		call	__printf_chk@PLT	#
 21309      00
 21310              	.LVL1253:
 21311              		.loc 3 107 10 view .LVU7089
 21312              	.LBE1234:
 21313              	.LBE1233:
 21314              	# sieve_extend.c:1103: }
1103:sieve_extend.c **** 
 21315              		.loc 1 1103 1 view .LVU7090
 21316 0c64 488B4C24 		mov	rcx, QWORD PTR 40[rsp]	# mediumstep_faster, %sfp
 21316      28
 21317 0c69 488B7C24 		mov	rdi, QWORD PTR 48[rsp]	# smallstep_faster, %sfp
 21317      30
 21318 0c6e 4C897424 		mov	QWORD PTR 96[rsp], r14	# %sfp, vectorstep_faster
 21318      60
 21319              	.LBE1232:
 21320              	.LBE1231:
 21321              	# sieve_extend.c:1177:                             best_blocksize_bits = blocksize_bits;
1177:sieve_extend.c ****                             best_smallstep_faster = smallstep_faster;
 21322              		.loc 1 1177 49 view .LVU7091
 21323 0c73 48895C24 		mov	QWORD PTR 72[rsp], rbx	# %sfp, ivtmp.857
 21323      48
 21324              	.LBB1236:
 21325              	.LBB1235:
 21326              	# sieve_extend.c:1103: }
1103:sieve_extend.c **** 
 21327              		.loc 1 1103 1 view .LVU7092
 21328 0c78 48894C24 		mov	QWORD PTR 88[rsp], rcx	# %sfp, mediumstep_faster
 21328      58
 21329 0c7d 48897C24 		mov	QWORD PTR 80[rsp], rdi	# %sfp, smallstep_faster
 21329      50
 21330 0c82 E90DFCFF 		jmp	.L1589	#
 21330      FF
 21331              	.LVL1254:
 21332              	.L1599:
1103:sieve_extend.c **** 
 21333              		.loc 1 1103 1 view .LVU7093
 21334              	.LBE1235:
 21335              	.LBE1236:
 21336              	.LBE1238:
 21337              	.LBE1240:
 21338              	.LBE1242:
 21339              	.LBE1243:
 21340              	.LBE1244:
 21341              	.LBE1262:
1199:sieve_extend.c ****             printf("(%ju) ",(uintmax_t)step); tuning_result_print(tuning_result[tuning_result_index
 21342              		.loc 1 1199 13 is_stmt 1 view .LVU7094
1200:sieve_extend.c ****             if (option_verboselevel >= 3) {
 21343              		.loc 1 1200 13 view .LVU7095
 21344              	.LBB1263:
 21345              	.LBI1263:
GAS LISTING /tmp/ccNeV1of.s 			page 567


 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21346              		.loc 3 105 1 view .LVU7096
 21347              	.LBB1264:
 21348              		.loc 3 107 3 view .LVU7097
 21349              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 21350              		.loc 3 107 10 is_stmt 0 view .LVU7098
 21351 0c87 488B5424 		mov	rdx, QWORD PTR 48[rsp]	#, %sfp
 21351      30
 21352 0c8c 488D3500 		lea	rsi, .LC63[rip]	#,
 21352      000000
 21353 0c93 BF010000 		mov	edi, 1	#,
 21353      00
 21354 0c98 31C0     		xor	eax, eax	#
 21355 0c9a E8000000 		call	__printf_chk@PLT	#
 21355      00
 21356              	.LVL1255:
 21357              		.loc 3 107 10 view .LVU7099
 21358              	.LBE1264:
 21359              	.LBE1263:
1200:sieve_extend.c ****             if (option_verboselevel >= 3) {
 21360              		.loc 1 1200 47 is_stmt 1 view .LVU7100
 21361              	.LBB1265:
 21362              	.LBI1265:
1097:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
 21363              		.loc 1 1097 20 view .LVU7101
 21364              	.LBB1266:
1098:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
 21365              		.loc 1 1098 5 view .LVU7102
 21366              	.LBB1267:
 21367              	.LBI1267:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21368              		.loc 3 105 1 view .LVU7103
 21369              	.LBB1268:
 21370              		.loc 3 107 3 view .LVU7104
 21371              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 21372              		.loc 3 107 10 is_stmt 0 view .LVU7105
 21373 0c9f 498B5C24 		mov	rbx, QWORD PTR 56[r12]	# MEM[(struct tuning_result_type *)tuning_result_242 + 56B], MEM[(struc
 21373      38
 21374 0ca4 488D3500 		lea	rsi, .LC59[rip]	#,
 21374      000000
 21375 0cab C4C17B10 		vmovsd	xmm0, QWORD PTR 80[r12]	# MEM[(struct tuning_result_type *)tuning_result_242 + 80B], MEM[(s
 21375      442450
 21376 0cb2 498B4C24 		mov	rcx, QWORD PTR 16[r12]	# MEM[(struct tuning_result_type *)tuning_result_242 + 16B], MEM[(struc
 21376      10
 21377 0cb7 498B5424 		mov	rdx, QWORD PTR 8[r12]	# MEM[(struct tuning_result_type *)tuning_result_242 + 8B], MEM[(struct 
 21377      08
 21378 0cbc 48895C24 		mov	QWORD PTR 24[rsp], rbx	#, MEM[(struct tuning_result_type *)tuning_result_242 + 56B]
 21378      18
 21379 0cc1 498B7C24 		mov	rdi, QWORD PTR 72[r12]	# MEM[(struct tuning_result_type *)tuning_result_242 + 72B], MEM[(struc
 21379      48
 21380 0cc6 48897C24 		mov	QWORD PTR 16[rsp], rdi	#, MEM[(struct tuning_result_type *)tuning_result_242 + 72B]
 21380      10
 21381 0ccb BF010000 		mov	edi, 1	#,
 21381      00
 21382 0cd0 4D8B4C24 		mov	r9, QWORD PTR 48[r12]	# MEM[(struct tuning_result_type *)tuning_result_242 + 48B], MEM[(struct
 21382      30
 21383 0cd5 4C894C24 		mov	QWORD PTR 8[rsp], r9	#, MEM[(struct tuning_result_type *)tuning_result_242 + 48B]
GAS LISTING /tmp/ccNeV1of.s 			page 568


 21383      08
 21384 0cda 498B4424 		mov	rax, QWORD PTR 40[r12]	# MEM[(struct tuning_result_type *)tuning_result_242 + 40B], MEM[(struc
 21384      28
 21385 0cdf 48890424 		mov	QWORD PTR [rsp], rax	#, MEM[(struct tuning_result_type *)tuning_result_242 + 40B]
 21386 0ce3 B8030000 		mov	eax, 3	#,
 21386      00
 21387 0ce8 4D8B4C24 		mov	r9, QWORD PTR 32[r12]	#, MEM[(struct tuning_result_type *)tuning_result_242 + 32B]
 21387      20
 21388 0ced 4D8B4424 		mov	r8, QWORD PTR 24[r12]	#, MEM[(struct tuning_result_type *)tuning_result_242 + 24B]
 21388      18
 21389 0cf2 C4C17B10 		vmovsd	xmm2, QWORD PTR 88[r12]	#, MEM[(struct tuning_result_type *)tuning_result_242 + 88B]
 21389      542458
 21390 0cf9 C4C17B10 		vmovsd	xmm1, QWORD PTR 64[r12]	#, MEM[(struct tuning_result_type *)tuning_result_242 + 64B]
 21390      4C2440
 21391 0d00 E8000000 		call	__printf_chk@PLT	#
 21391      00
 21392              	.LVL1256:
 21393              		.loc 3 107 10 view .LVU7106
 21394              	.LBE1268:
 21395              	.LBE1267:
 21396              	.LBE1266:
 21397              	.LBE1265:
1201:sieve_extend.c ****                 for (counter_t tuning_result_index=0; tuning_result_index<min(10,tuning_results); t
 21398              		.loc 1 1201 13 is_stmt 1 view .LVU7107
 21399              	# sieve_extend.c:1201:             if (option_verboselevel >= 3) {
1201:sieve_extend.c ****                 for (counter_t tuning_result_index=0; tuning_result_index<min(10,tuning_results); t
 21400              		.loc 1 1201 16 is_stmt 0 view .LVU7108
 21401 0d05 837C2468 		cmp	DWORD PTR 104[rsp], 2	# %sfp,
 21401      02
 21402 0d0a 0F84EEFC 		je	.L1601	#,
 21402      FFFF
 21403 0d10 498D5C24 		lea	rbx, 8[r12]	# ivtmp.844,
 21403      08
 21404              	.LBB1269:
 21405              	# sieve_extend.c:1202:                 for (counter_t tuning_result_index=0; tuning_result_index<mi
1202:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 21406              		.loc 1 1202 32 view .LVU7109
 21407 0d15 31ED     		xor	ebp, ebp	# tuning_result_index
 21408              	.L1602:
 21409              	.LVL1257:
1203:sieve_extend.c ****                 }
 21410              		.loc 1 1203 21 is_stmt 1 view .LVU7110
 21411              	.LBB1253:
 21412              	.LBI1253:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21413              		.loc 3 105 1 view .LVU7111
 21414              	.LBB1254:
 21415              		.loc 3 107 3 view .LVU7112
 21416              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 21417              		.loc 3 107 10 is_stmt 0 view .LVU7113
 21418 0d17 488D3500 		lea	rsi, .LC64[rip]	#,
 21418      000000
 21419 0d1e BF010000 		mov	edi, 1	#,
 21419      00
 21420 0d23 31C0     		xor	eax, eax	#
 21421              	.LBE1254:
 21422              	.LBE1253:
GAS LISTING /tmp/ccNeV1of.s 			page 569


 21423              	# sieve_extend.c:1202:                 for (counter_t tuning_result_index=0; tuning_result_index<mi
1202:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 21424              		.loc 1 1202 118 view .LVU7114
 21425 0d25 4883C501 		add	rbp, 1	# tuning_result_index,
 21426              	.LVL1258:
 21427              	.LBB1256:
 21428              	.LBB1255:
 21429              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 21430              		.loc 3 107 10 view .LVU7115
 21431 0d29 E8000000 		call	__printf_chk@PLT	#
 21431      00
 21432              	.LVL1259:
 21433              		.loc 3 107 10 view .LVU7116
 21434              	.LBE1255:
 21435              	.LBE1256:
1203:sieve_extend.c ****                 }
 21436              		.loc 1 1203 36 is_stmt 1 view .LVU7117
 21437              	.LBB1257:
 21438              	.LBI1257:
1097:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
 21439              		.loc 1 1097 20 view .LVU7118
 21440              	.LBB1258:
1098:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
 21441              		.loc 1 1098 5 view .LVU7119
 21442              	.LBB1259:
 21443              	.LBI1259:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21444              		.loc 3 105 1 view .LVU7120
 21445              	.LBB1260:
 21446              		.loc 3 107 3 view .LVU7121
 21447              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 21448              		.loc 3 107 10 is_stmt 0 view .LVU7122
 21449 0d2e 488B7330 		mov	rsi, QWORD PTR 48[rbx]	# MEM[base: _224, offset: 48B], MEM[base: _224, offset: 48B]
 21450 0d32 BF010000 		mov	edi, 1	#,
 21450      00
 21451 0d37 488B4B08 		mov	rcx, QWORD PTR 8[rbx]	# MEM[base: _224, offset: 8B], MEM[base: _224, offset: 8B]
 21452 0d3b B8030000 		mov	eax, 3	#,
 21452      00
 21453 0d40 C5FB1043 		vmovsd	xmm0, QWORD PTR 72[rbx]	# MEM[base: _224, offset: 72B], MEM[base: _224, offset: 72B]
 21453      48
 21454 0d45 4883C360 		add	rbx, 96	# ivtmp.844,
 21455 0d49 48897424 		mov	QWORD PTR 24[rsp], rsi	#, MEM[base: _224, offset: 48B]
 21455      18
 21456 0d4e 488D3500 		lea	rsi, .LC59[rip]	#,
 21456      000000
 21457 0d55 4C8B43E0 		mov	r8, QWORD PTR -32[rbx]	# MEM[base: _224, offset: 64B], MEM[base: _224, offset: 64B]
 21458 0d59 4C894424 		mov	QWORD PTR 16[rsp], r8	#, MEM[base: _224, offset: 64B]
 21458      10
 21459 0d5e 4C8B53C8 		mov	r10, QWORD PTR -56[rbx]	# MEM[base: _224, offset: 40B], MEM[base: _224, offset: 40B]
 21460 0d62 4C895424 		mov	QWORD PTR 8[rsp], r10	#, MEM[base: _224, offset: 40B]
 21460      08
 21461 0d67 488B53C0 		mov	rdx, QWORD PTR -64[rbx]	# MEM[base: _224, offset: 32B], MEM[base: _224, offset: 32B]
 21462 0d6b 48891424 		mov	QWORD PTR [rsp], rdx	#, MEM[base: _224, offset: 32B]
 21463 0d6f 4C8B4BB8 		mov	r9, QWORD PTR -72[rbx]	#, MEM[base: _224, offset: 24B]
 21464 0d73 4C8B43B0 		mov	r8, QWORD PTR -80[rbx]	#, MEM[base: _224, offset: 16B]
 21465 0d77 488B53A0 		mov	rdx, QWORD PTR -96[rbx]	#, MEM[base: _224, offset: 0B]
 21466 0d7b C5FB1053 		vmovsd	xmm2, QWORD PTR -16[rbx]	#, MEM[base: _224, offset: 80B]
GAS LISTING /tmp/ccNeV1of.s 			page 570


 21466      F0
 21467 0d80 C5FB104B 		vmovsd	xmm1, QWORD PTR -40[rbx]	#, MEM[base: _224, offset: 56B]
 21467      D8
 21468 0d85 E8000000 		call	__printf_chk@PLT	#
 21468      00
 21469              	.LVL1260:
 21470              		.loc 3 107 10 view .LVU7123
 21471              	.LBE1260:
 21472              	.LBE1259:
 21473              	.LBE1258:
 21474              	.LBE1257:
1202:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 21475              		.loc 1 1202 99 is_stmt 1 view .LVU7124
1202:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 21476              		.loc 1 1202 55 view .LVU7125
 21477              	# sieve_extend.c:1202:                 for (counter_t tuning_result_index=0; tuning_result_index<mi
1202:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 21478              		.loc 1 1202 75 is_stmt 0 view .LVU7126
 21479 0d8a 4983FF0A 		cmp	r15, 10	# tuning_results,
 21480 0d8e 4C89F1   		mov	rcx, r14	# tmp424, tmp476
 21481 0d91 490F46CF 		cmovbe	rcx, r15	# tuning_results,, tmp424
 21482              	# sieve_extend.c:1202:                 for (counter_t tuning_result_index=0; tuning_result_index<mi
1202:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 21483              		.loc 1 1202 17 view .LVU7127
 21484 0d95 4839CD   		cmp	rbp, rcx	# tuning_result_index, tmp424
 21485 0d98 0F8279FF 		jb	.L1602	#,
 21485      FFFF
 21486 0d9e E95BFCFF 		jmp	.L1601	#
 21486      FF
 21487              	.LVL1261:
 21488              	.L1693:
1202:sieve_extend.c ****                     printf("..."); tuning_result_print(tuning_result[tuning_result_index]);
 21489              		.loc 1 1202 17 view .LVU7128
 21490              	.LBE1269:
 21491              	.LBE1214:
 21492              	.LBE1213:
 21493              	.LBE1212:
1498:sieve_extend.c ****     }
 21494              		.loc 1 1498 39 is_stmt 1 view .LVU7129
 21495              	.LBB1288:
 21496              	.LBI1288:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21497              		.loc 3 105 1 view .LVU7130
 21498              	.LBB1289:
 21499              		.loc 3 107 3 view .LVU7131
 21500              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 21501              		.loc 3 107 10 is_stmt 0 view .LVU7132
 21502 0da3 488D3D00 		lea	rdi, .LC56[rip]	#,
 21502      000000
 21503              	.LBE1289:
 21504              	.LBE1288:
 21505              	# sieve_extend.c:1501:     counter_t best_blocksize_bits = default_blocksize;
1501:sieve_extend.c ****     if (option_tunelevel) {
 21506              		.loc 1 1501 15 view .LVU7133
 21507 0daa 41BC00FC 		mov	r12d, 261120	# best_result$blocksize_bits,
 21507      0300
 21508              	.LBB1291:
GAS LISTING /tmp/ccNeV1of.s 			page 571


 21509              	.LBB1290:
 21510              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 21511              		.loc 3 107 10 view .LVU7134
 21512 0db0 E8000000 		call	puts@PLT	#
 21512      00
 21513              	.LVL1262:
 21514              		.loc 3 107 10 view .LVU7135
 21515              	.LBE1290:
 21516              	.LBE1291:
1501:sieve_extend.c ****     if (option_tunelevel) {
 21517              		.loc 1 1501 5 is_stmt 1 view .LVU7136
1502:sieve_extend.c ****         tuning_result_type tuning_result = tune(option_tunelevel, option_maxFactor, option_verbosel
 21518              		.loc 1 1502 5 view .LVU7137
 21519              	# sieve_extend.c:1502:     if (option_tunelevel) {
1502:sieve_extend.c ****         tuning_result_type tuning_result = tune(option_tunelevel, option_maxFactor, option_verbosel
 21520              		.loc 1 1502 9 is_stmt 0 view .LVU7138
 21521 0db5 448B8424 		mov	r8d, DWORD PTR 172[rsp]	# option_tunelevel.41_63, option_tunelevel
 21521      AC000000 
 21522              	# sieve_extend.c:1502:     if (option_tunelevel) {
1502:sieve_extend.c ****         tuning_result_type tuning_result = tune(option_tunelevel, option_maxFactor, option_verbosel
 21523              		.loc 1 1502 8 view .LVU7139
 21524 0dbd 4585C0   		test	r8d, r8d	# option_tunelevel.41_63
 21525 0dc0 0F858701 		jne	.L1700	#,
 21525      0000
 21526              	.LVL1263:
 21527              	.L1580:
 21528              	.LBB1292:
1512:sieve_extend.c ****         counter_t passes = 0;
 21529              		.loc 1 1512 9 is_stmt 1 view .LVU7140
 21530              	# sieve_extend.c:1512:         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize
1512:sieve_extend.c ****         counter_t passes = 0;
 21531              		.loc 1 1512 12 is_stmt 0 view .LVU7141
 21532 0dc6 83BC24A8 		cmp	DWORD PTR 168[rsp], 0	# option_verboselevel,
 21532      00000000 
 21533 0dce 0F8E1AF6 		jle	.L1607	#,
 21533      FFFF
1512:sieve_extend.c ****         counter_t passes = 0;
 21534              		.loc 1 1512 39 is_stmt 1 discriminator 1 view .LVU7142
 21535              	.LVL1264:
 21536              	.LBB1196:
 21537              	.LBI1196:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21538              		.loc 3 105 1 discriminator 1 view .LVU7143
 21539              	.LBB1197:
 21540              		.loc 3 107 3 discriminator 1 view .LVU7144
 21541              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 21542              		.loc 3 107 10 is_stmt 0 discriminator 1 view .LVU7145
 21543 0dd4 4C8B0D00 		mov	r9, QWORD PTR global_VECTORSTEP_FASTER[rip]	#, global_VECTORSTEP_FASTER
 21543      000000
 21544 0ddb 4C89E2   		mov	rdx, r12	#, best_result$blocksize_bits
 21545 0dde 4C8B0500 		mov	r8, QWORD PTR global_MEDIUMSTEP_FASTER[rip]	#, global_MEDIUMSTEP_FASTER
 21545      000000
 21546 0de5 488D3500 		lea	rsi, .LC66[rip]	#,
 21546      000000
 21547 0dec 488B0D00 		mov	rcx, QWORD PTR global_SMALLSTEP_FASTER[rip]	#, global_SMALLSTEP_FASTER
 21547      000000
 21548 0df3 BF010000 		mov	edi, 1	#,
GAS LISTING /tmp/ccNeV1of.s 			page 572


 21548      00
 21549 0df8 31C0     		xor	eax, eax	#
 21550 0dfa E8000000 		call	__printf_chk@PLT	#
 21550      00
 21551              	.LVL1265:
 21552 0dff E9EAF5FF 		jmp	.L1607	#
 21552      FF
 21553              	.LVL1266:
 21554              	.L1699:
 21555              		.loc 3 107 10 discriminator 1 view .LVU7146
 21556              	.LBE1197:
 21557              	.LBE1196:
 21558              	.LBE1292:
 21559              	.LBB1293:
 21560              	.LBB1285:
 21561              	.LBB1282:
1216:sieve_extend.c ****     if (option_verboselevel >= 1) {
 21562              		.loc 1 1216 5 is_stmt 1 view .LVU7147
 21563              	# sieve_extend.c:1216:     tuning_result_type best_result = tuning_result[0];
1216:sieve_extend.c ****     if (option_verboselevel >= 1) {
 21564              		.loc 1 1216 24 is_stmt 0 view .LVU7148
 21565 0e04 4C8B7C24 		mov	r15, QWORD PTR 64[rsp]	# tuning_result, %sfp
 21565      40
 21566              	.LVL1267:
 21567              	# sieve_extend.c:1217:     if (option_verboselevel >= 1) {
1217:sieve_extend.c ****         tuning_result_index = 0;
 21568              		.loc 1 1217 8 view .LVU7149
 21569 0e09 837C2468 		cmp	DWORD PTR 104[rsp], 0	# %sfp,
 21569      00
 21570              	# sieve_extend.c:1216:     tuning_result_type best_result = tuning_result[0];
1216:sieve_extend.c ****     if (option_verboselevel >= 1) {
 21571              		.loc 1 1216 24 view .LVU7150
 21572 0e0e 4D8B6708 		mov	r12, QWORD PTR 8[r15]	# best_result$blocksize_bits, MEM[(struct tuning_result_type *)tuning_re
 21573              	.LVL1268:
1216:sieve_extend.c ****     if (option_verboselevel >= 1) {
 21574              		.loc 1 1216 24 view .LVU7151
 21575 0e12 4D8B7720 		mov	r14, QWORD PTR 32[r15]	# best_result$smallstep_faster, MEM[(struct tuning_result_type *)tuning
 21576 0e16 498B6F28 		mov	rbp, QWORD PTR 40[r15]	# best_result$mediumstep_faster, MEM[(struct tuning_result_type *)tunin
 21577 0e1a 498B5F30 		mov	rbx, QWORD PTR 48[r15]	# best_result$vectorstep_faster, MEM[(struct tuning_result_type *)tunin
1217:sieve_extend.c ****         tuning_result_index = 0;
 21578              		.loc 1 1217 5 is_stmt 1 view .LVU7152
 21579              	# sieve_extend.c:1217:     if (option_verboselevel >= 1) {
1217:sieve_extend.c ****         tuning_result_index = 0;
 21580              		.loc 1 1217 8 is_stmt 0 view .LVU7153
 21581 0e1e 7E6E     		jle	.L1605	#,
1218:sieve_extend.c ****         printf(".Best result:"); tuning_result_print(tuning_result[tuning_result_index]);
 21582              		.loc 1 1218 9 is_stmt 1 view .LVU7154
 21583              	.LVL1269:
1219:sieve_extend.c ****     }
 21584              		.loc 1 1219 9 view .LVU7155
 21585              	.LBB1270:
 21586              	.LBI1270:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21587              		.loc 3 105 1 view .LVU7156
 21588              	.LBB1271:
 21589              		.loc 3 107 3 view .LVU7157
 21590              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
GAS LISTING /tmp/ccNeV1of.s 			page 573


 21591              		.loc 3 107 10 is_stmt 0 view .LVU7158
 21592 0e20 488D3500 		lea	rsi, .LC65[rip]	#,
 21592      000000
 21593 0e27 BF010000 		mov	edi, 1	#,
 21593      00
 21594 0e2c 31C0     		xor	eax, eax	#
 21595 0e2e E8000000 		call	__printf_chk@PLT	#
 21595      00
 21596              	.LVL1270:
 21597              		.loc 3 107 10 view .LVU7159
 21598              	.LBE1271:
 21599              	.LBE1270:
1219:sieve_extend.c ****     }
 21600              		.loc 1 1219 34 is_stmt 1 view .LVU7160
 21601              	.LBB1272:
 21602              	.LBI1272:
1097:sieve_extend.c ****     printf("blocksize_bits %10ju; blocksize %4jukb; free_bits %5ju; small %2ju; medium %2ju; vector
 21603              		.loc 1 1097 20 view .LVU7161
 21604              	.LBB1273:
1098:sieve_extend.c ****                             (uintmax_t)tuning_result.blocksize_bits, (uintmax_t)tuning_result.block
 21605              		.loc 1 1098 5 view .LVU7162
 21606              	.LBB1274:
 21607              	.LBI1274:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21608              		.loc 3 105 1 view .LVU7163
 21609              	.LBB1275:
 21610              		.loc 3 107 3 view .LVU7164
 21611              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 21612              		.loc 3 107 10 is_stmt 0 view .LVU7165
 21613 0e33 4D8B4F38 		mov	r9, QWORD PTR 56[r15]	# MEM[(struct tuning_result_type *)tuning_result_242 + 56B], MEM[(struct
 21614 0e37 BF010000 		mov	edi, 1	#,
 21614      00
 21615 0e3c C4C17B10 		vmovsd	xmm0, QWORD PTR 80[r15]	# MEM[(struct tuning_result_type *)tuning_result_242 + 80B], MEM[(s
 21615      4750
 21616 0e42 498B4F10 		mov	rcx, QWORD PTR 16[r15]	# MEM[(struct tuning_result_type *)tuning_result_242 + 16B], MEM[(struc
 21617 0e46 498B5708 		mov	rdx, QWORD PTR 8[r15]	# MEM[(struct tuning_result_type *)tuning_result_242 + 8B], MEM[(struct 
 21618 0e4a 4C894C24 		mov	QWORD PTR 24[rsp], r9	#, MEM[(struct tuning_result_type *)tuning_result_242 + 56B]
 21618      18
 21619 0e4f 498B4748 		mov	rax, QWORD PTR 72[r15]	# MEM[(struct tuning_result_type *)tuning_result_242 + 72B], MEM[(struc
 21620 0e53 48894424 		mov	QWORD PTR 16[rsp], rax	#, MEM[(struct tuning_result_type *)tuning_result_242 + 72B]
 21620      10
 21621 0e58 B8030000 		mov	eax, 3	#,
 21621      00
 21622 0e5d 498B7730 		mov	rsi, QWORD PTR 48[r15]	# MEM[(struct tuning_result_type *)tuning_result_242 + 48B], MEM[(struc
 21623 0e61 48897424 		mov	QWORD PTR 8[rsp], rsi	#, MEM[(struct tuning_result_type *)tuning_result_242 + 48B]
 21623      08
 21624 0e66 488D3500 		lea	rsi, .LC59[rip]	#,
 21624      000000
 21625 0e6d 4D8B4728 		mov	r8, QWORD PTR 40[r15]	# MEM[(struct tuning_result_type *)tuning_result_242 + 40B], MEM[(struct
 21626 0e71 4C890424 		mov	QWORD PTR [rsp], r8	#, MEM[(struct tuning_result_type *)tuning_result_242 + 40B]
 21627 0e75 4D8B4F20 		mov	r9, QWORD PTR 32[r15]	#, MEM[(struct tuning_result_type *)tuning_result_242 + 32B]
 21628 0e79 4D8B4718 		mov	r8, QWORD PTR 24[r15]	#, MEM[(struct tuning_result_type *)tuning_result_242 + 24B]
 21629 0e7d C4C17B10 		vmovsd	xmm2, QWORD PTR 88[r15]	#, MEM[(struct tuning_result_type *)tuning_result_242 + 88B]
 21629      5758
 21630 0e83 C4C17B10 		vmovsd	xmm1, QWORD PTR 64[r15]	#, MEM[(struct tuning_result_type *)tuning_result_242 + 64B]
 21630      4F40
 21631 0e89 E8000000 		call	__printf_chk@PLT	#
GAS LISTING /tmp/ccNeV1of.s 			page 574


 21631      00
 21632              	.LVL1271:
 21633              	.L1605:
 21634              		.loc 3 107 10 view .LVU7166
 21635              	.LBE1275:
 21636              	.LBE1274:
 21637              	.LBE1273:
 21638              	.LBE1272:
1222:sieve_extend.c ****     return best_result;
 21639              		.loc 1 1222 5 is_stmt 1 view .LVU7167
 21640 0e8e 488B7C24 		mov	rdi, QWORD PTR 64[rsp]	#, %sfp
 21640      40
 21641 0e93 E8000000 		call	free@PLT	#
 21641      00
 21642              	.LVL1272:
1223:sieve_extend.c **** }
 21643              		.loc 1 1223 5 view .LVU7168
1223:sieve_extend.c **** }
 21644              		.loc 1 1223 5 is_stmt 0 view .LVU7169
 21645              	.LBE1282:
 21646              	.LBE1285:
1504:sieve_extend.c ****         global_MEDIUMSTEP_FASTER = tuning_result.mediumstep_faster;
 21647              		.loc 1 1504 9 is_stmt 1 view .LVU7170
 21648              	# sieve_extend.c:1504:         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
1504:sieve_extend.c ****         global_MEDIUMSTEP_FASTER = tuning_result.mediumstep_faster;
 21649              		.loc 1 1504 33 is_stmt 0 view .LVU7171
 21650 0e98 4C893500 		mov	QWORD PTR global_SMALLSTEP_FASTER[rip], r14	# global_SMALLSTEP_FASTER, best_result$smallstep_f
 21650      000000
1505:sieve_extend.c ****         global_VECTORSTEP_FASTER = tuning_result.vectorstep_faster;
 21651              		.loc 1 1505 9 is_stmt 1 view .LVU7172
 21652              	.LBE1293:
 21653              	# sieve_extend.c:1511:     if (best_blocksize_bits > 0) {
1511:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 21654              		.loc 1 1511 8 is_stmt 0 view .LVU7173
 21655 0e9f 4D85E4   		test	r12, r12	# best_result$blocksize_bits
 21656              	.LBB1294:
 21657              	# sieve_extend.c:1505:         global_MEDIUMSTEP_FASTER = tuning_result.mediumstep_faster;
1505:sieve_extend.c ****         global_VECTORSTEP_FASTER = tuning_result.vectorstep_faster;
 21658              		.loc 1 1505 34 view .LVU7174
 21659 0ea2 48892D00 		mov	QWORD PTR global_MEDIUMSTEP_FASTER[rip], rbp	# global_MEDIUMSTEP_FASTER, best_result$mediumste
 21659      000000
1506:sieve_extend.c ****         best_blocksize_bits = tuning_result.blocksize_bits;
 21660              		.loc 1 1506 9 is_stmt 1 view .LVU7175
 21661              	# sieve_extend.c:1506:         global_VECTORSTEP_FASTER = tuning_result.vectorstep_faster;
1506:sieve_extend.c ****         best_blocksize_bits = tuning_result.blocksize_bits;
 21662              		.loc 1 1506 34 is_stmt 0 view .LVU7176
 21663 0ea9 48891D00 		mov	QWORD PTR global_VECTORSTEP_FASTER[rip], rbx	# global_VECTORSTEP_FASTER, best_result$vectorste
 21663      000000
1507:sieve_extend.c ****     }
 21664              		.loc 1 1507 9 is_stmt 1 view .LVU7177
 21665              	.LVL1273:
1507:sieve_extend.c ****     }
 21666              		.loc 1 1507 9 is_stmt 0 view .LVU7178
 21667              	.LBE1294:
1510:sieve_extend.c ****     if (best_blocksize_bits > 0) {
 21668              		.loc 1 1510 5 is_stmt 1 view .LVU7179
1511:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
GAS LISTING /tmp/ccNeV1of.s 			page 575


 21669              		.loc 1 1511 5 view .LVU7180
 21670              	# sieve_extend.c:1511:     if (best_blocksize_bits > 0) {
1511:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 21671              		.loc 1 1511 8 is_stmt 0 view .LVU7181
 21672 0eb0 0F848CF6 		je	.L1606	#,
 21672      FFFF
 21673 0eb6 E90BFFFF 		jmp	.L1580	#
 21673      FF
 21674              	.LVL1274:
 21675              	.L1615:
1511:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 21676              		.loc 1 1511 8 view .LVU7182
 21677 0ebb 488D3D00 		lea	rdi, CSWTCH.125[rip]	# tmp339,
 21677      000000
 21678 0ec2 4C8D0D00 		lea	r9, CSWTCH.126[rip]	# tmp341,
 21678      000000
 21679 0ec9 488D2D00 		lea	rbp, CSWTCH.127[rip]	# tmp343,
 21679      000000
 21680              	.LVL1275:
1511:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 21681              		.loc 1 1511 8 view .LVU7183
 21682 0ed0 488D1D00 		lea	rbx, CSWTCH.128[rip]	# tmp345,
 21682      000000
 21683              	.LVL1276:
1511:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 21684              		.loc 1 1511 8 view .LVU7184
 21685 0ed7 4A8B0CC7 		mov	rcx, QWORD PTR [rdi+r8*8]	# smallstep_faster_steps, CSWTCH.125
 21686 0edb 4F8B34C1 		mov	r14, QWORD PTR [r9+r8*8]	# vectorstep_faster_steps, CSWTCH.126
 21687 0edf 4E8B7CC5 		mov	r15, QWORD PTR 0[rbp+r8*8]	# freebits_steps, CSWTCH.127
 21687      00
 21688              	.LVL1277:
1511:sieve_extend.c ****         if (option_verboselevel >= 1) printf("Benchmarking... with blocksize %ju steps: %ju/%ju/%ju
 21689              		.loc 1 1511 8 view .LVU7185
 21690 0ee4 C4A17B10 		vmovsd	xmm7, QWORD PTR [rbx+r8*8]	# sample_duration, CSWTCH.128
 21690      3CC3
 21691 0eea 48898C24 		mov	QWORD PTR 152[rsp], rcx	# %sfp, smallstep_faster_steps
 21691      98000000 
 21692 0ef2 4C89B424 		mov	QWORD PTR 144[rsp], r14	# %sfp, vectorstep_faster_steps
 21692      90000000 
 21693 0efa 4C897C24 		mov	QWORD PTR 112[rsp], r15	# %sfp, freebits_steps
 21693      70
 21694              	.LBB1295:
 21695              	# sieve_extend.c:1429:     for (int arg=1; arg < argc; arg++) {
1429:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 21696              		.loc 1 1429 14 view .LVU7186
 21697 0eff 48C74424 		mov	QWORD PTR 120[rsp], 8	# %sfp,
 21697      78080000 
 21697      00
 21698 0f08 C5FB11BC 		vmovsd	QWORD PTR 128[rsp], xmm7	# %sfp, sample_duration
 21698      24800000 
 21698      00
 21699              	.L1581:
 21700              	.LVL1278:
1429:sieve_extend.c ****         if (strcmp(argv[arg], "--help")==0) { usage(argv[0]); }
 21701              		.loc 1 1429 14 view .LVU7187
 21702              	.LBE1295:
 21703              	.LBB1296:
GAS LISTING /tmp/ccNeV1of.s 			page 576


 21704              	.LBB1286:
 21705              	.LBB1283:
1148:sieve_extend.c ****     if (option_verboselevel >= 2) printf("\n");
 21706              		.loc 1 1148 5 is_stmt 1 view .LVU7188
 21707              	# sieve_extend.c:1148:     if (option_verboselevel >= 1) printf("Tuning..."); 
1148:sieve_extend.c ****     if (option_verboselevel >= 2) printf("\n");
 21708              		.loc 1 1148 8 is_stmt 0 view .LVU7189
 21709 0f11 448B6C24 		mov	r13d, DWORD PTR 104[rsp]	# option_verboselevel.42_64, %sfp
 21709      68
 21710              	.LVL1279:
1148:sieve_extend.c ****     if (option_verboselevel >= 2) printf("\n");
 21711              		.loc 1 1148 8 view .LVU7190
 21712 0f16 4585ED   		test	r13d, r13d	# option_verboselevel.42_64
 21713 0f19 0F8EEDF7 		jle	.L1583	#,
 21713      FFFF
1148:sieve_extend.c ****     if (option_verboselevel >= 2) printf("\n");
 21714              		.loc 1 1148 35 is_stmt 1 view .LVU7191
 21715              	.LVL1280:
 21716              	.LBB1276:
 21717              	.LBI1276:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21718              		.loc 3 105 1 view .LVU7192
 21719              	.LBB1277:
 21720              		.loc 3 107 3 view .LVU7193
 21721              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 21722              		.loc 3 107 10 is_stmt 0 view .LVU7194
 21723 0f1f 31C0     		xor	eax, eax	#
 21724 0f21 488D3500 		lea	rsi, .LC57[rip]	#,
 21724      000000
 21725 0f28 BF010000 		mov	edi, 1	#,
 21725      00
 21726              	.LBE1277:
 21727              	.LBE1276:
 21728              	# sieve_extend.c:1149:     if (option_verboselevel >= 2) printf("\n");
1149:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
 21729              		.loc 1 1149 8 view .LVU7195
 21730 0f2d 4489EB   		mov	ebx, r13d	# option_verboselevel.42_64, option_verboselevel.42_64
 21731              	.LBB1279:
 21732              	.LBB1278:
 21733              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 21734              		.loc 3 107 10 view .LVU7196
 21735 0f30 E8000000 		call	__printf_chk@PLT	#
 21735      00
 21736              	.LVL1281:
 21737              		.loc 3 107 10 view .LVU7197
 21738              	.LBE1278:
 21739              	.LBE1279:
1149:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
 21740              		.loc 1 1149 5 is_stmt 1 view .LVU7198
 21741              	# sieve_extend.c:1149:     if (option_verboselevel >= 2) printf("\n");
1149:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
 21742              		.loc 1 1149 8 is_stmt 0 view .LVU7199
 21743 0f35 83EB01   		sub	ebx, 1	# option_verboselevel.42_64,
 21744 0f38 0F84CEF7 		je	.L1583	#,
 21744      FFFF
1149:sieve_extend.c ****     const size_t max_results = ((size_t)(WORD_SIZE_counter/smallstep_faster_steps)+1) * ((size_t)(W
 21745              		.loc 1 1149 35 is_stmt 1 view .LVU7200
GAS LISTING /tmp/ccNeV1of.s 			page 577


 21746              	.LVL1282:
 21747              	.LBB1280:
 21748              	.LBI1280:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21749              		.loc 3 105 1 view .LVU7201
 21750              	.LBB1281:
 21751              		.loc 3 107 3 view .LVU7202
 21752              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 21753              		.loc 3 107 10 is_stmt 0 view .LVU7203
 21754 0f3e BF0A0000 		mov	edi, 10	#,
 21754      00
 21755 0f43 E8000000 		call	putchar@PLT	#
 21755      00
 21756              	.LVL1283:
 21757 0f48 E9BFF7FF 		jmp	.L1583	#
 21757      FF
 21758              	.LVL1284:
 21759              	.L1700:
 21760              		.loc 3 107 10 view .LVU7204
 21761              	.LBE1281:
 21762              	.LBE1280:
 21763              	.LBE1283:
 21764              	.LBE1286:
1503:sieve_extend.c ****         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
 21765              		.loc 1 1503 9 is_stmt 1 view .LVU7205
 21766              	# sieve_extend.c:1503:         tuning_result_type tuning_result = tune(option_tunelevel, option_max
1503:sieve_extend.c ****         global_SMALLSTEP_FASTER = tuning_result.smallstep_faster;
 21767              		.loc 1 1503 44 is_stmt 0 view .LVU7206
 21768 0f4d 8B9424A8 		mov	edx, DWORD PTR 168[rsp]	# option_verboselevel.42_64, option_verboselevel
 21768      000000
 21769 0f54 4183E801 		sub	r8d, 1	#,
 21770 0f58 488BB424 		mov	rsi, QWORD PTR 176[rsp]	# option_maxFactor.43_65, option_maxFactor
 21770      B0000000 
 21771 0f60 4183F802 		cmp	r8d, 2	# _215,
 21772 0f64 89542468 		mov	DWORD PTR 104[rsp], edx	# %sfp, option_verboselevel.42_64
 21773 0f68 4889B424 		mov	QWORD PTR 136[rsp], rsi	# %sfp, option_maxFactor.43_65
 21773      88000000 
 21774              	.LVL1285:
 21775              	.LBB1287:
1105:sieve_extend.c ****     counter_t best_blocksize_bits = default_blocksize;
 21776              		.loc 1 1105 27 is_stmt 1 view .LVU7207
 21777              	.LBB1284:
1106:sieve_extend.c **** 
 21778              		.loc 1 1106 5 view .LVU7208
1108:sieve_extend.c ****     best_blocksize_bits = 0;
 21779              		.loc 1 1108 5 view .LVU7209
1109:sieve_extend.c ****     counter_t best_smallstep_faster = 0;
 21780              		.loc 1 1109 5 view .LVU7210
1110:sieve_extend.c ****     counter_t best_mediumstep_faster = 0;
 21781              		.loc 1 1110 5 view .LVU7211
1111:sieve_extend.c ****     counter_t best_vectorstep_faster = 0;
 21782              		.loc 1 1111 5 view .LVU7212
1112:sieve_extend.c ****     counter_t smallstep_faster_steps = 4;
 21783              		.loc 1 1112 5 view .LVU7213
1113:sieve_extend.c ****     counter_t mediumstep_faster_steps = 4;
 21784              		.loc 1 1113 5 view .LVU7214
1114:sieve_extend.c ****     counter_t vectorstep_faster_steps = 32;
GAS LISTING /tmp/ccNeV1of.s 			page 578


 21785              		.loc 1 1114 5 view .LVU7215
1115:sieve_extend.c ****     counter_t freebits_steps = anticiped_cache_line_bytesize;
 21786              		.loc 1 1115 5 view .LVU7216
1116:sieve_extend.c ****     counter_t sample_max = default_sample_max;
 21787              		.loc 1 1116 5 view .LVU7217
1117:sieve_extend.c ****     double sample_duration = default_sample_duration;
 21788              		.loc 1 1117 5 view .LVU7218
1118:sieve_extend.c **** 
 21789              		.loc 1 1118 5 view .LVU7219
1121:sieve_extend.c ****         case 1:
 21790              		.loc 1 1121 5 view .LVU7220
 21791 0f70 0F8645FF 		jbe	.L1615	#,
 21791      FFFF
 21792 0f76 C5FB1005 		vmovsd	xmm0, QWORD PTR .LC34[rip]	# sample_duration,
 21792      00000000 
 21793 0f7e 48C74424 		mov	QWORD PTR 120[rsp], 5	# %sfp,
 21793      78050000 
 21793      00
 21794 0f87 48C74424 		mov	QWORD PTR 112[rsp], 128	# %sfp,
 21794      70800000 
 21794      00
 21795 0f90 48C78424 		mov	QWORD PTR 144[rsp], 32	# %sfp,
 21795      90000000 
 21795      20000000 
 21796 0f9c 48C78424 		mov	QWORD PTR 152[rsp], 4	# %sfp,
 21796      98000000 
 21796      04000000 
 21797 0fa8 C5FB1184 		vmovsd	QWORD PTR 128[rsp], xmm0	# %sfp, sample_duration
 21797      24800000 
 21797      00
 21798 0fb1 E95BFFFF 		jmp	.L1581	#
 21798      FF
 21799              	.LVL1286:
 21800              	.L1686:
1121:sieve_extend.c ****         case 1:
 21801              		.loc 1 1121 5 is_stmt 0 view .LVU7221
 21802              	.LBE1284:
 21803              	.LBE1287:
 21804              	.LBE1296:
 21805              	.LBB1297:
1432:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option_verboselevel > 4) {
 21806              		.loc 1 1432 34 is_stmt 1 discriminator 1 view .LVU7222
 21807              	.LBB1133:
 21808              	.LBI1133:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21809              		.loc 3 98 1 discriminator 1 view .LVU7223
 21810              	.LBB1134:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 21811              		.loc 3 100 3 discriminator 1 view .LVU7224
 21812              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 21813              		.loc 3 100 10 is_stmt 0 discriminator 1 view .LVU7225
 21814 0fb6 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 21814      000000
 21815 0fbd BA1B0000 		mov	edx, 27	#,
 21815      00
 21816 0fc2 BE010000 		mov	esi, 1	#,
GAS LISTING /tmp/ccNeV1of.s 			page 579


 21816      00
 21817 0fc7 488D3D00 		lea	rdi, .LC38[rip]	#,
 21817      000000
 21818 0fce E8000000 		call	fwrite@PLT	#
 21818      00
 21819              	.LVL1287:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 21820              		.loc 3 100 10 discriminator 1 view .LVU7226
 21821              	.LBE1134:
 21822              	.LBE1133:
1432:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_verboselevel) != 1 || option_verboselevel > 4) {
 21823              		.loc 1 1432 83 is_stmt 1 discriminator 1 view .LVU7227
 21824 0fd3 E903F6FF 		jmp	.L1684	#
 21824      FF
 21825              	.L1563:
1442:sieve_extend.c ****             }
 21826              		.loc 1 1442 17 view .LVU7228
 21827              	.LVL1288:
 21828              	.LBB1135:
 21829              	.LBI1130:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21830              		.loc 3 98 1 view .LVU7229
 21831              	.LBB1132:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 21832              		.loc 3 100 3 view .LVU7230
 21833              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 21834              		.loc 3 100 10 is_stmt 0 view .LVU7231
 21835 0fd8 498B0F   		mov	rcx, QWORD PTR [r15]	#, *_29
 21836 0fdb 488D1500 		lea	rdx, .LC44[rip]	#,
 21836      000000
 21837 0fe2 E9E1F5FF 		jmp	.L1683	#
 21837      FF
 21838              	.LVL1289:
 21839              	.L1567:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 21840              		.loc 3 100 10 view .LVU7232
 21841              	.LBE1132:
 21842              	.LBE1135:
1449:sieve_extend.c ****             }
 21843              		.loc 1 1449 17 is_stmt 1 view .LVU7233
 21844              	.LBB1136:
 21845              	.LBI1136:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21846              		.loc 3 98 1 view .LVU7234
 21847              	.LBB1137:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 21848              		.loc 3 100 3 view .LVU7235
 21849              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 21850              		.loc 3 100 10 is_stmt 0 view .LVU7236
 21851 0fe7 498B0F   		mov	rcx, QWORD PTR [r15]	#, *_41
 21852 0fea 488D1500 		lea	rdx, .LC49[rip]	#,
 21852      000000
 21853 0ff1 E9D2F5FF 		jmp	.L1683	#
 21853      FF
 21854              	.LVL1290:
GAS LISTING /tmp/ccNeV1of.s 			page 580


 21855              	.L1689:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 21856              		.loc 3 100 10 view .LVU7237
 21857              	.LBE1137:
 21858              	.LBE1136:
1440:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tunelevel > 4) {
 21859              		.loc 1 1440 34 is_stmt 1 discriminator 1 view .LVU7238
 21860              	.LBB1138:
 21861              	.LBI1138:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21862              		.loc 3 98 1 discriminator 1 view .LVU7239
 21863              	.LBB1139:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 21864              		.loc 3 100 3 discriminator 1 view .LVU7240
 21865              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 21866              		.loc 3 100 10 is_stmt 0 discriminator 1 view .LVU7241
 21867 0ff6 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 21867      000000
 21868 0ffd 488D3D00 		lea	rdi, .LC43[rip]	#,
 21868      000000
 21869 1004 BA180000 		mov	edx, 24	#,
 21869      00
 21870 1009 BE010000 		mov	esi, 1	#,
 21870      00
 21871 100e E8000000 		call	fwrite@PLT	#
 21871      00
 21872              	.LVL1291:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 21873              		.loc 3 100 10 discriminator 1 view .LVU7242
 21874              	.LBE1139:
 21875              	.LBE1138:
1440:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tunelevel > 4) {
 21876              		.loc 1 1440 80 is_stmt 1 discriminator 1 view .LVU7243
 21877 1013 498B3C24 		mov	rdi, QWORD PTR [r12]	#, *argv_161(D)
 21878 1017 E8000000 		call	usage	#
 21878      00
 21879              	.LVL1292:
 21880              	.L1697:
1440:sieve_extend.c ****             if (sscanf(argv[arg], "%d", &option_tunelevel) != 1 || option_tunelevel > 4) {
 21881              		.loc 1 1440 80 is_stmt 0 discriminator 1 view .LVU7244
 21882              	.LBE1297:
 21883              	# sieve_extend.c:1536: }
 21884              		.loc 1 1536 1 view .LVU7245
 21885 101c E8000000 		call	__stack_chk_fail@PLT	#
 21885      00
 21886              	.LVL1293:
 21887              	.L1692:
 21888              	.LBB1298:
1447:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
 21889              		.loc 1 1447 34 is_stmt 1 discriminator 1 view .LVU7246
 21890              	.LBB1140:
 21891              	.LBI1140:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 21892              		.loc 3 98 1 discriminator 1 view .LVU7247
 21893              	.LBB1141:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
GAS LISTING /tmp/ccNeV1of.s 			page 581


 21894              		.loc 3 100 3 discriminator 1 view .LVU7248
 21895              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:100:   return __fprintf_chk (__stream, __USE_FORTIFY_
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 21896              		.loc 3 100 10 is_stmt 0 discriminator 1 view .LVU7249
 21897 1021 488B0D00 		mov	rcx, QWORD PTR stderr[rip]	#, stderr
 21897      000000
 21898 1028 488D3D00 		lea	rdi, .LC47[rip]	#,
 21898      000000
 21899 102f BA1A0000 		mov	edx, 26	#,
 21899      00
 21900 1034 BE010000 		mov	esi, 1	#,
 21900      00
 21901 1039 E8000000 		call	fwrite@PLT	#
 21901      00
 21902              	.LVL1294:
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 21903              		.loc 3 100 10 discriminator 1 view .LVU7250
 21904              	.LBE1141:
 21905              	.LBE1140:
1447:sieve_extend.c ****             if (sscanf(argv[arg], "%ju", (uintmax_t*)&option_showMaxFactor) != 1 || option_showMaxF
 21906              		.loc 1 1447 82 is_stmt 1 discriminator 1 view .LVU7251
 21907 103e 498B3C24 		mov	rdi, QWORD PTR [r12]	#, *argv_161(D)
 21908 1042 E8000000 		call	usage	#
 21908      00
 21909              	.LVL1295:
 21910              	.LBE1298:
 21911              		.cfi_endproc
 21912              	.LFE99:
 21914              		.section	.rodata
 21915              		.align 16
 21918              	CSWTCH.128:
 21919 0000 9A999999 		.long	2576980378
 21920 0004 9999B93F 		.long	1069128089
 21921 0008 9A999999 		.long	2576980378
 21922 000c 9999C93F 		.long	1070176665
 21923 0010 9A999999 		.long	2576980378
 21924 0014 9999C93F 		.long	1070176665
 21925 0018 00000000 		.align 16
 21925      00000000 
 21928              	CSWTCH.127:
 21929 0020 00080000 		.quad	2048
 21929      00000000 
 21930 0028 00040000 		.quad	1024
 21930      00000000 
 21931 0030 40000000 		.quad	64
 21931      00000000 
 21932 0038 00000000 		.align 16
 21932      00000000 
 21935              	CSWTCH.126:
 21936 0040 20000000 		.quad	32
 21936      00000000 
 21937 0048 10000000 		.quad	16
 21937      00000000 
 21938 0050 04000000 		.quad	4
 21938      00000000 
 21939 0058 00000000 		.align 16
 21939      00000000 
GAS LISTING /tmp/ccNeV1of.s 			page 582


 21942              	CSWTCH.125:
 21943 0060 10000000 		.quad	16
 21943      00000000 
 21944 0068 08000000 		.quad	8
 21944      00000000 
 21945 0070 04000000 		.quad	4
 21945      00000000 
 21946              		.globl	debug_hitpoint
 21947              		.bss
 21948              		.align 32
 21951              	debug_hitpoint:
 21952 0000 00000000 		.zero	40
 21952      00000000 
 21952      00000000 
 21952      00000000 
 21952      00000000 
 21953              		.globl	global_VECTORSTEP_FASTER
 21954              		.data
 21955              		.align 8
 21958              	global_VECTORSTEP_FASTER:
 21959 0000 80000000 		.quad	128
 21959      00000000 
 21960              		.globl	global_MEDIUMSTEP_FASTER
 21961              		.bss
 21962              		.align 8
 21965              	global_MEDIUMSTEP_FASTER:
 21966 0028 00000000 		.zero	8
 21966      00000000 
 21967              		.globl	global_SMALLSTEP_FASTER
 21968              		.align 8
 21971              	global_SMALLSTEP_FASTER:
 21972 0030 00000000 		.zero	8
 21972      00000000 
 21973              		.section	.rodata.cst32,"aM",@progbits,32
 21974              		.align 32
 21975              	.LC0:
 21976 0000 00000000 		.quad	0
 21976      00000000 
 21977 0008 01000000 		.quad	1
 21977      00000000 
 21978 0010 02000000 		.quad	2
 21978      00000000 
 21979 0018 03000000 		.quad	3
 21979      00000000 
 21980              		.align 32
 21981              	.LC1:
 21982 0020 08000000 		.quad	8
 21982      00000000 
 21983 0028 08000000 		.quad	8
 21983      00000000 
 21984 0030 08000000 		.quad	8
 21984      00000000 
 21985 0038 08000000 		.quad	8
 21985      00000000 
 21986              		.align 32
 21987              	.LC2:
 21988 0040 04000000 		.quad	4
GAS LISTING /tmp/ccNeV1of.s 			page 583


 21988      00000000 
 21989 0048 04000000 		.quad	4
 21989      00000000 
 21990 0050 04000000 		.quad	4
 21990      00000000 
 21991 0058 04000000 		.quad	4
 21991      00000000 
 21992              		.align 32
 21993              	.LC3:
 21994 0060 3F000000 		.long	63
 21995 0064 3F000000 		.long	63
 21996 0068 3F000000 		.long	63
 21997 006c 3F000000 		.long	63
 21998 0070 3F000000 		.long	63
 21999 0074 3F000000 		.long	63
 22000 0078 3F000000 		.long	63
 22001 007c 3F000000 		.long	63
 22002              		.align 32
 22003              	.LC6:
 22004 0080 00000000 		.long	0
 22005 0084 00000000 		.long	0
 22006 0088 02000000 		.long	2
 22007 008c 02000000 		.long	2
 22008 0090 04000000 		.long	4
 22009 0094 04000000 		.long	4
 22010 0098 06000000 		.long	6
 22011 009c 06000000 		.long	6
 22012              		.align 32
 22013              	.LC7:
 22014 00a0 00000000 		.long	0
 22015 00a4 01000000 		.long	1
 22016 00a8 00000000 		.long	0
 22017 00ac 01000000 		.long	1
 22018 00b0 00000000 		.long	0
 22019 00b4 01000000 		.long	1
 22020 00b8 00000000 		.long	0
 22021 00bc 01000000 		.long	1
 22022              		.align 32
 22023              	.LC8:
 22024 00c0 08000000 		.long	8
 22025 00c4 08000000 		.long	8
 22026 00c8 08000000 		.long	8
 22027 00cc 08000000 		.long	8
 22028 00d0 08000000 		.long	8
 22029 00d4 08000000 		.long	8
 22030 00d8 08000000 		.long	8
 22031 00dc 08000000 		.long	8
 22032              		.section	.rodata.cst8,"aM",@progbits,8
 22033              		.align 8
 22034              	.LC12:
 22035 0000 00000000 		.long	0
 22036 0004 00000000 		.long	0
 22037              		.align 8
 22038              	.LC13:
 22039 0008 00000000 		.long	0
 22040 000c 0000F87F 		.long	2146959360
 22041              		.align 8
GAS LISTING /tmp/ccNeV1of.s 			page 584


 22042              	.LC14:
 22043 0010 95D626E8 		.long	3894859413
 22044 0014 0B2E113E 		.long	1041313291
 22045              		.align 8
 22046              	.LC34:
 22047 0018 9A999999 		.long	2576980378
 22048 001c 9999B93F 		.long	1069128089
 22049              		.align 8
 22050              	.LC67:
 22051 0020 00000000 		.long	0
 22052 0024 00001440 		.long	1075052544
 22053              		.text
 22054              	.Letext0:
 22055              		.file 5 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 22056              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types.h"
 22057              		.file 7 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 22058              		.file 8 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 22059              		.file 9 "/usr/include/stdio.h"
 22060              		.file 10 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 22061              		.file 11 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h"
 22062              		.file 12 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h"
 22063              		.file 13 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
 22064              		.file 14 "/usr/include/stdint.h"
 22065              		.file 15 "/usr/include/time.h"
 22066              		.file 16 "/usr/include/math.h"
 22067              		.file 17 "/usr/include/stdlib.h"
 22068              		.file 18 "<built-in>"
 50841              		.section	.note.gnu.property,"a"
 50842              		.align 8
 50843 0000 04000000 		.long	 1f - 0f
 50844 0004 10000000 		.long	 4f - 1f
 50845 0008 05000000 		.long	 5
 50846              	0:
 50847 000c 474E5500 		.string	 "GNU"
 50848              	1:
 50849              		.align 8
 50850 0010 020000C0 		.long	 0xc0000002
 50851 0014 04000000 		.long	 3f - 2f
 50852              	2:
 50853 0018 03000000 		.long	 0x3
 50854              	3:
 50855 001c 00000000 		.align 8
 50856              	4:
GAS LISTING /tmp/ccNeV1of.s 			page 585


DEFINED SYMBOLS
                            *ABS*:0000000000000000 sieve_extend.c
     /tmp/ccNeV1of.s:86     .text:0000000000000000 extendSieve_smallSize
     /tmp/ccNeV1of.s:21975  .rodata.cst32:0000000000000000 .LC0
     /tmp/ccNeV1of.s:21981  .rodata.cst32:0000000000000020 .LC1
     /tmp/ccNeV1of.s:21987  .rodata.cst32:0000000000000040 .LC2
     /tmp/ccNeV1of.s:21993  .rodata.cst32:0000000000000060 .LC3
     /tmp/ccNeV1of.s:1228   .text:00000000000006c0 compare_tuning_result
     /tmp/ccNeV1of.s:1254   .text:00000000000006e0 setBitsTrue_largeRange_vector
     /tmp/ccNeV1of.s:3189   .text:0000000000001190 extendSieve_aligned
     /tmp/ccNeV1of.s:4078   .text:0000000000001710 extendSieve_shiftleft
     /tmp/ccNeV1of.s:6752   .text:00000000000027a0 show_primes.isra.0
     /tmp/ccNeV1of.s:6747   .rodata.str1.1:0000000000000006 .LC5
     /tmp/ccNeV1of.s:6745   .rodata.str1.1:0000000000000000 .LC4
     /tmp/ccNeV1of.s:7169   .text:0000000000002940 extendSieve_shiftright_vector
     /tmp/ccNeV1of.s:22003  .rodata.cst32:0000000000000080 .LC6
     /tmp/ccNeV1of.s:22023  .rodata.cst32:00000000000000c0 .LC8
     /tmp/ccNeV1of.s:22013  .rodata.cst32:00000000000000a0 .LC7
     /tmp/ccNeV1of.s:7159   .rodata.str1.8:0000000000000000 .LC9
     /tmp/ccNeV1of.s:7162   .rodata.str1.1:0000000000000023 .LC10
     /tmp/ccNeV1of.s:7164   .rodata.str1.1:0000000000000026 .LC11
     /tmp/ccNeV1of.s:11149  .text:00000000000041e0 sieve_shake
     /tmp/ccNeV1of.s:21958  .data:0000000000000000 global_VECTORSTEP_FASTER
     /tmp/ccNeV1of.s:13656  .text:0000000000004cf0 tune_benchmark
     /tmp/ccNeV1of.s:21965  .bss:0000000000000028 global_MEDIUMSTEP_FASTER
     /tmp/ccNeV1of.s:21971  .bss:0000000000000030 global_SMALLSTEP_FASTER
     /tmp/ccNeV1of.s:22038  .rodata.cst8:0000000000000008 .LC13
     /tmp/ccNeV1of.s:22042  .rodata.cst8:0000000000000010 .LC14
     /tmp/ccNeV1of.s:13873  .text:0000000000004e30 shiftvec
     /tmp/ccNeV1of.s:15035  .text:00000000000051f0 validatePrimeCount
     /tmp/ccNeV1of.s:15016  .rodata.str1.8:0000000000000028 .LC15
     /tmp/ccNeV1of.s:15022  .rodata.str1.1:000000000000002d .LC17
     /tmp/ccNeV1of.s:15026  .rodata.str1.8:00000000000000e8 .LC18
     /tmp/ccNeV1of.s:15019  .rodata.str1.8:0000000000000080 .LC16
     /tmp/ccNeV1of.s:15029  .rodata.str1.8:0000000000000120 .LC19
     /tmp/ccNeV1of.s:16284  .text:0000000000005970 usage
     /tmp/ccNeV1of.s:16244  .rodata.str1.8:0000000000000170 .LC20
     /tmp/ccNeV1of.s:16247  .rodata.str1.1:000000000000003b .LC21
     /tmp/ccNeV1of.s:16251  .rodata.str1.8:0000000000000190 .LC22
     /tmp/ccNeV1of.s:16254  .rodata.str1.8:00000000000001d0 .LC23
     /tmp/ccNeV1of.s:16257  .rodata.str1.8:0000000000000200 .LC24
     /tmp/ccNeV1of.s:16260  .rodata.str1.8:0000000000000248 .LC25
     /tmp/ccNeV1of.s:16263  .rodata.str1.8:0000000000000278 .LC26
     /tmp/ccNeV1of.s:16266  .rodata.str1.8:00000000000002b8 .LC27
     /tmp/ccNeV1of.s:16269  .rodata.str1.8:00000000000002f8 .LC28
     /tmp/ccNeV1of.s:16272  .rodata.str1.8:0000000000000348 .LC29
     /tmp/ccNeV1of.s:16275  .rodata.str1.8:0000000000000370 .LC30
     /tmp/ccNeV1of.s:16278  .rodata.str1.8:00000000000003a0 .LC31
     /tmp/ccNeV1of.s:16529  .text:0000000000005af0 printfcomma2
     /tmp/ccNeV1of.s:16521  .rodata.str1.1:0000000000000045 .LC32
     /tmp/ccNeV1of.s:16523  .rodata.str1.1:0000000000000048 .LC33
     /tmp/ccNeV1of.s:16655  .text:0000000000005b60 printfcomma
     /tmp/ccNeV1of.s:17115  .text:0000000000005cc0 benchmark
     /tmp/ccNeV1of.s:22034  .rodata.cst8:0000000000000000 .LC12
     /tmp/ccNeV1of.s:17409  .text:0000000000005ec0 test
     /tmp/ccNeV1of.s:17713  .text:0000000000006050 test2
     /tmp/ccNeV1of.s:17833  .text:00000000000061e0 test3
GAS LISTING /tmp/ccNeV1of.s 			page 586


     /tmp/ccNeV1of.s:18102  .text:0000000000006300 testshuffle_vector
     /tmp/ccNeV1of.s:18607  .text:0000000000006590 testshuffle_vector2
     /tmp/ccNeV1of.s:18618  .text:00000000000065a0 testshuffle_word
     /tmp/ccNeV1of.s:19320  .text.startup:0000000000000000 main
     /tmp/ccNeV1of.s:19228  .rodata.str1.1:000000000000005d .LC36
     /tmp/ccNeV1of.s:19230  .rodata.str1.1:0000000000000064 .LC37
     /tmp/ccNeV1of.s:19239  .rodata.str1.1:000000000000008a .LC40
     /tmp/ccNeV1of.s:19241  .rodata.str1.1:00000000000000a3 .LC41
     /tmp/ccNeV1of.s:19243  .rodata.str1.1:00000000000000ab .LC42
     /tmp/ccNeV1of.s:19252  .rodata.str1.1:00000000000000cb .LC45
     /tmp/ccNeV1of.s:19273  .rodata.str1.1:0000000000000159 .LC54
     /tmp/ccNeV1of.s:19271  .rodata.str1.1:0000000000000140 .LC53
     /tmp/ccNeV1of.s:19254  .rodata.str1.1:00000000000000e1 .LC46
     /tmp/ccNeV1of.s:19258  .rodata.str1.1:0000000000000103 .LC48
     /tmp/ccNeV1of.s:19265  .rodata.str1.1:0000000000000107 .LC50
     /tmp/ccNeV1of.s:19267  .rodata.str1.1:0000000000000120 .LC51
     /tmp/ccNeV1of.s:19275  .rodata.str1.1:0000000000000169 .LC55
     /tmp/ccNeV1of.s:22050  .rodata.cst8:0000000000000020 .LC67
     /tmp/ccNeV1of.s:19308  .rodata.str1.8:0000000000000570 .LC68
     /tmp/ccNeV1of.s:19226  .rodata.str1.1:000000000000004e .LC35
     /tmp/ccNeV1of.s:19269  .rodata.str1.1:0000000000000131 .LC52
     /tmp/ccNeV1of.s:19236  .rodata.str1.8:00000000000003d8 .LC39
     /tmp/ccNeV1of.s:19314  .rodata.str1.1:00000000000001bd .LC70
     /tmp/ccNeV1of.s:19311  .rodata.str1.8:00000000000005b8 .LC69
     /tmp/ccNeV1of.s:22046  .rodata.cst8:0000000000000018 .LC34
     /tmp/ccNeV1of.s:19288  .rodata.str1.1:0000000000000192 .LC60
     /tmp/ccNeV1of.s:19285  .rodata.str1.8:0000000000000448 .LC59
     /tmp/ccNeV1of.s:19292  .rodata.str1.8:00000000000004d0 .LC61
     /tmp/ccNeV1of.s:19295  .rodata.str1.1:0000000000000197 .LC62
     /tmp/ccNeV1of.s:19281  .rodata.str1.1:000000000000018d .LC58
     /tmp/ccNeV1of.s:19297  .rodata.str1.1:00000000000001a4 .LC63
     /tmp/ccNeV1of.s:19299  .rodata.str1.1:00000000000001ab .LC64
     /tmp/ccNeV1of.s:19277  .rodata.str1.1:0000000000000170 .LC56
     /tmp/ccNeV1of.s:19305  .rodata.str1.8:0000000000000538 .LC66
     /tmp/ccNeV1of.s:19301  .rodata.str1.1:00000000000001af .LC65
     /tmp/ccNeV1of.s:21942  .rodata:0000000000000060 CSWTCH.125
     /tmp/ccNeV1of.s:21935  .rodata:0000000000000040 CSWTCH.126
     /tmp/ccNeV1of.s:21928  .rodata:0000000000000020 CSWTCH.127
     /tmp/ccNeV1of.s:21918  .rodata:0000000000000000 CSWTCH.128
     /tmp/ccNeV1of.s:19279  .rodata.str1.1:0000000000000183 .LC57
     /tmp/ccNeV1of.s:19232  .rodata.str1.1:000000000000006e .LC38
     /tmp/ccNeV1of.s:19249  .rodata.str1.8:0000000000000400 .LC44
     /tmp/ccNeV1of.s:19262  .rodata.str1.8:0000000000000420 .LC49
     /tmp/ccNeV1of.s:19245  .rodata.str1.1:00000000000000b2 .LC43
     /tmp/ccNeV1of.s:19256  .rodata.str1.1:00000000000000e8 .LC47
     /tmp/ccNeV1of.s:21951  .bss:0000000000000000 debug_hitpoint

UNDEFINED SYMBOLS
__stack_chk_fail
_GLOBAL_OFFSET_TABLE_
memcpy
__printf_chk
putchar
puts
exit
aligned_alloc
clock_gettime
GAS LISTING /tmp/ccNeV1of.s 			page 587


free
stderr
__fprintf_chk
fwrite
__isoc99_sscanf
malloc
qsort
